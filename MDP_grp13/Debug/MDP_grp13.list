
MDP_grp13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba8  0800aa68  0800aa68  0001aa68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b610  0800b610  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800b610  0800b610  0001b610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b618  0800b618  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b618  0800b618  0001b618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b61c  0800b61c  0001b61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00005024  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000509c  2000509c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f997  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cfc  00000000  00000000  0003fa3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001798  00000000  00000000  00043740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001658  00000000  00000000  00044ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004633  00000000  00000000  00046530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019f86  00000000  00000000  0004ab63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2931  00000000  00000000  00064ae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014741a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b34  00000000  00000000  00147470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aa4c 	.word	0x0800aa4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800aa4c 	.word	0x0800aa4c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_uldivmod>:
 8000b88:	b953      	cbnz	r3, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8a:	b94a      	cbnz	r2, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bf08      	it	eq
 8000b90:	2800      	cmpeq	r0, #0
 8000b92:	bf1c      	itt	ne
 8000b94:	f04f 31ff 	movne.w	r1, #4294967295
 8000b98:	f04f 30ff 	movne.w	r0, #4294967295
 8000b9c:	f000 b96e 	b.w	8000e7c <__aeabi_idiv0>
 8000ba0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba8:	f000 f806 	bl	8000bb8 <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4770      	bx	lr

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9d08      	ldr	r5, [sp, #32]
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	468c      	mov	ip, r1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f040 8083 	bne.w	8000cce <__udivmoddi4+0x116>
 8000bc8:	428a      	cmp	r2, r1
 8000bca:	4617      	mov	r7, r2
 8000bcc:	d947      	bls.n	8000c5e <__udivmoddi4+0xa6>
 8000bce:	fab2 f282 	clz	r2, r2
 8000bd2:	b142      	cbz	r2, 8000be6 <__udivmoddi4+0x2e>
 8000bd4:	f1c2 0020 	rsb	r0, r2, #32
 8000bd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bdc:	4091      	lsls	r1, r2
 8000bde:	4097      	lsls	r7, r2
 8000be0:	ea40 0c01 	orr.w	ip, r0, r1
 8000be4:	4094      	lsls	r4, r2
 8000be6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bea:	0c23      	lsrs	r3, r4, #16
 8000bec:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf0:	fa1f fe87 	uxth.w	lr, r7
 8000bf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000bf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000c00:	4299      	cmp	r1, r3
 8000c02:	d909      	bls.n	8000c18 <__udivmoddi4+0x60>
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c0a:	f080 8119 	bcs.w	8000e40 <__udivmoddi4+0x288>
 8000c0e:	4299      	cmp	r1, r3
 8000c10:	f240 8116 	bls.w	8000e40 <__udivmoddi4+0x288>
 8000c14:	3e02      	subs	r6, #2
 8000c16:	443b      	add	r3, r7
 8000c18:	1a5b      	subs	r3, r3, r1
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c20:	fb08 3310 	mls	r3, r8, r0, r3
 8000c24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d909      	bls.n	8000c44 <__udivmoddi4+0x8c>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	f080 8105 	bcs.w	8000e44 <__udivmoddi4+0x28c>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f240 8102 	bls.w	8000e44 <__udivmoddi4+0x28c>
 8000c40:	3802      	subs	r0, #2
 8000c42:	443c      	add	r4, r7
 8000c44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c48:	eba4 040e 	sub.w	r4, r4, lr
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	b11d      	cbz	r5, 8000c58 <__udivmoddi4+0xa0>
 8000c50:	40d4      	lsrs	r4, r2
 8000c52:	2300      	movs	r3, #0
 8000c54:	e9c5 4300 	strd	r4, r3, [r5]
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	b902      	cbnz	r2, 8000c62 <__udivmoddi4+0xaa>
 8000c60:	deff      	udf	#255	; 0xff
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	d150      	bne.n	8000d0c <__udivmoddi4+0x154>
 8000c6a:	1bcb      	subs	r3, r1, r7
 8000c6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c70:	fa1f f887 	uxth.w	r8, r7
 8000c74:	2601      	movs	r6, #1
 8000c76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c7a:	0c21      	lsrs	r1, r4, #16
 8000c7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c84:	fb08 f30c 	mul.w	r3, r8, ip
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d907      	bls.n	8000c9c <__udivmoddi4+0xe4>
 8000c8c:	1879      	adds	r1, r7, r1
 8000c8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0xe2>
 8000c94:	428b      	cmp	r3, r1
 8000c96:	f200 80e9 	bhi.w	8000e6c <__udivmoddi4+0x2b4>
 8000c9a:	4684      	mov	ip, r0
 8000c9c:	1ac9      	subs	r1, r1, r3
 8000c9e:	b2a3      	uxth	r3, r4
 8000ca0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cac:	fb08 f800 	mul.w	r8, r8, r0
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	d907      	bls.n	8000cc4 <__udivmoddi4+0x10c>
 8000cb4:	193c      	adds	r4, r7, r4
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x10a>
 8000cbc:	45a0      	cmp	r8, r4
 8000cbe:	f200 80d9 	bhi.w	8000e74 <__udivmoddi4+0x2bc>
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	eba4 0408 	sub.w	r4, r4, r8
 8000cc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ccc:	e7bf      	b.n	8000c4e <__udivmoddi4+0x96>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0x12e>
 8000cd2:	2d00      	cmp	r5, #0
 8000cd4:	f000 80b1 	beq.w	8000e3a <__udivmoddi4+0x282>
 8000cd8:	2600      	movs	r6, #0
 8000cda:	e9c5 0100 	strd	r0, r1, [r5]
 8000cde:	4630      	mov	r0, r6
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	fab3 f683 	clz	r6, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d14a      	bne.n	8000d84 <__udivmoddi4+0x1cc>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0x140>
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	f200 80b8 	bhi.w	8000e68 <__udivmoddi4+0x2b0>
 8000cf8:	1a84      	subs	r4, r0, r2
 8000cfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	468c      	mov	ip, r1
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	d0a8      	beq.n	8000c58 <__udivmoddi4+0xa0>
 8000d06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d0a:	e7a5      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000d0c:	f1c2 0320 	rsb	r3, r2, #32
 8000d10:	fa20 f603 	lsr.w	r6, r0, r3
 8000d14:	4097      	lsls	r7, r2
 8000d16:	fa01 f002 	lsl.w	r0, r1, r2
 8000d1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1e:	40d9      	lsrs	r1, r3
 8000d20:	4330      	orrs	r0, r6
 8000d22:	0c03      	lsrs	r3, r0, #16
 8000d24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d28:	fa1f f887 	uxth.w	r8, r7
 8000d2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d34:	fb06 f108 	mul.w	r1, r6, r8
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x19c>
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d46:	f080 808d 	bcs.w	8000e64 <__udivmoddi4+0x2ac>
 8000d4a:	4299      	cmp	r1, r3
 8000d4c:	f240 808a 	bls.w	8000e64 <__udivmoddi4+0x2ac>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	443b      	add	r3, r7
 8000d54:	1a5b      	subs	r3, r3, r1
 8000d56:	b281      	uxth	r1, r0
 8000d58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb00 f308 	mul.w	r3, r0, r8
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x1c4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d72:	d273      	bcs.n	8000e5c <__udivmoddi4+0x2a4>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d971      	bls.n	8000e5c <__udivmoddi4+0x2a4>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4439      	add	r1, r7
 8000d7c:	1acb      	subs	r3, r1, r3
 8000d7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d82:	e778      	b.n	8000c76 <__udivmoddi4+0xbe>
 8000d84:	f1c6 0c20 	rsb	ip, r6, #32
 8000d88:	fa03 f406 	lsl.w	r4, r3, r6
 8000d8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d90:	431c      	orrs	r4, r3
 8000d92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d96:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000da2:	431f      	orrs	r7, r3
 8000da4:	0c3b      	lsrs	r3, r7, #16
 8000da6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000daa:	fa1f f884 	uxth.w	r8, r4
 8000dae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000db6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dba:	458a      	cmp	sl, r1
 8000dbc:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc0:	fa00 f306 	lsl.w	r3, r0, r6
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x220>
 8000dc6:	1861      	adds	r1, r4, r1
 8000dc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dcc:	d248      	bcs.n	8000e60 <__udivmoddi4+0x2a8>
 8000dce:	458a      	cmp	sl, r1
 8000dd0:	d946      	bls.n	8000e60 <__udivmoddi4+0x2a8>
 8000dd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dd6:	4421      	add	r1, r4
 8000dd8:	eba1 010a 	sub.w	r1, r1, sl
 8000ddc:	b2bf      	uxth	r7, r7
 8000dde:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dea:	fb00 f808 	mul.w	r8, r0, r8
 8000dee:	45b8      	cmp	r8, r7
 8000df0:	d907      	bls.n	8000e02 <__udivmoddi4+0x24a>
 8000df2:	19e7      	adds	r7, r4, r7
 8000df4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df8:	d22e      	bcs.n	8000e58 <__udivmoddi4+0x2a0>
 8000dfa:	45b8      	cmp	r8, r7
 8000dfc:	d92c      	bls.n	8000e58 <__udivmoddi4+0x2a0>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	4427      	add	r7, r4
 8000e02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e06:	eba7 0708 	sub.w	r7, r7, r8
 8000e0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0e:	454f      	cmp	r7, r9
 8000e10:	46c6      	mov	lr, r8
 8000e12:	4649      	mov	r1, r9
 8000e14:	d31a      	bcc.n	8000e4c <__udivmoddi4+0x294>
 8000e16:	d017      	beq.n	8000e48 <__udivmoddi4+0x290>
 8000e18:	b15d      	cbz	r5, 8000e32 <__udivmoddi4+0x27a>
 8000e1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e26:	40f2      	lsrs	r2, r6
 8000e28:	ea4c 0202 	orr.w	r2, ip, r2
 8000e2c:	40f7      	lsrs	r7, r6
 8000e2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e32:	2600      	movs	r6, #0
 8000e34:	4631      	mov	r1, r6
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	462e      	mov	r6, r5
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	e70b      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000e40:	4606      	mov	r6, r0
 8000e42:	e6e9      	b.n	8000c18 <__udivmoddi4+0x60>
 8000e44:	4618      	mov	r0, r3
 8000e46:	e6fd      	b.n	8000c44 <__udivmoddi4+0x8c>
 8000e48:	4543      	cmp	r3, r8
 8000e4a:	d2e5      	bcs.n	8000e18 <__udivmoddi4+0x260>
 8000e4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e50:	eb69 0104 	sbc.w	r1, r9, r4
 8000e54:	3801      	subs	r0, #1
 8000e56:	e7df      	b.n	8000e18 <__udivmoddi4+0x260>
 8000e58:	4608      	mov	r0, r1
 8000e5a:	e7d2      	b.n	8000e02 <__udivmoddi4+0x24a>
 8000e5c:	4660      	mov	r0, ip
 8000e5e:	e78d      	b.n	8000d7c <__udivmoddi4+0x1c4>
 8000e60:	4681      	mov	r9, r0
 8000e62:	e7b9      	b.n	8000dd8 <__udivmoddi4+0x220>
 8000e64:	4666      	mov	r6, ip
 8000e66:	e775      	b.n	8000d54 <__udivmoddi4+0x19c>
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e74a      	b.n	8000d02 <__udivmoddi4+0x14a>
 8000e6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e70:	4439      	add	r1, r7
 8000e72:	e713      	b.n	8000c9c <__udivmoddi4+0xe4>
 8000e74:	3802      	subs	r0, #2
 8000e76:	443c      	add	r4, r7
 8000e78:	e724      	b.n	8000cc4 <__udivmoddi4+0x10c>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <HAL_TIM_IC_CaptureCallback>:
	__HAL_TIM_SET_COUNTER(&htim4, 0);
	while(__HAL_TIM_GET_COUNTER(&htim4) < time);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)		//For HCSR04_Read();
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7f1b      	ldrb	r3, [r3, #28]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	f040 8083 	bne.w	8000f98 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000e92:	4b45      	ldr	r3, [pc, #276]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d11a      	bne.n	8000ed0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f003 fcbb 	bl	8004818 <HAL_TIM_ReadCapturedValue>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4a41      	ldr	r2, [pc, #260]	; (8000fac <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ea6:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000ea8:	4b3f      	ldr	r3, [pc, #252]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	601a      	str	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6a1a      	ldr	r2, [r3, #32]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 020a 	bic.w	r2, r2, #10
 8000ebc:	621a      	str	r2, [r3, #32]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6a1a      	ldr	r2, [r3, #32]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f042 0202 	orr.w	r2, r2, #2
 8000ecc:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 8000ece:	e063      	b.n	8000f98 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000ed0:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d15f      	bne.n	8000f98 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000ed8:	2100      	movs	r1, #0
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f003 fc9c 	bl	8004818 <HAL_TIM_ReadCapturedValue>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4a33      	ldr	r2, [pc, #204]	; (8000fb0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ee4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 8000eee:	4b30      	ldr	r3, [pc, #192]	; (8000fb0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	4b2e      	ldr	r3, [pc, #184]	; (8000fac <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d907      	bls.n	8000f0a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000efa:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	4b2b      	ldr	r3, [pc, #172]	; (8000fac <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	4a2b      	ldr	r2, [pc, #172]	; (8000fb4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	e00f      	b.n	8000f2a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2) {
 8000f0a:	4b28      	ldr	r3, [pc, #160]	; (8000fac <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d909      	bls.n	8000f2a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000f16:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4b24      	ldr	r3, [pc, #144]	; (8000fac <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000f24:	33ff      	adds	r3, #255	; 0xff
 8000f26:	4a23      	ldr	r2, [pc, #140]	; (8000fb4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f28:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000f2a:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fae0 	bl	80004f4 <__aeabi_ui2d>
 8000f34:	a31a      	add	r3, pc, #104	; (adr r3, 8000fa0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3a:	f7ff fb55 	bl	80005e8 <__aeabi_dmul>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	460b      	mov	r3, r1
 8000f42:	4610      	mov	r0, r2
 8000f44:	4619      	mov	r1, r3
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f4e:	f7ff fc75 	bl	800083c <__aeabi_ddiv>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	4610      	mov	r0, r2
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f7ff fdf5 	bl	8000b48 <__aeabi_d2uiz>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000f64:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6a1a      	ldr	r2, [r3, #32]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 020a 	bic.w	r2, r2, #10
 8000f7a:	621a      	str	r2, [r3, #32]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	6a12      	ldr	r2, [r2, #32]
 8000f86:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 0202 	bic.w	r2, r2, #2
 8000f96:	60da      	str	r2, [r3, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	b020c49c 	.word	0xb020c49c
 8000fa4:	3fa16872 	.word	0x3fa16872
 8000fa8:	200000a0 	.word	0x200000a0
 8000fac:	20000094 	.word	0x20000094
 8000fb0:	20000098 	.word	0x20000098
 8000fb4:	2000009c 	.word	0x2000009c
 8000fb8:	200000a4 	.word	0x200000a4
 8000fbc:	20004a14 	.word	0x20004a14

08000fc0 <irLeft>:
		}
	}
	uDistFinal = (uDistCheck1 + uDistCheck2)/2;
}

void irLeft (void) { //ADC1 (nd solder)
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
	uint32_t adc1 = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	603b      	str	r3, [r7, #0]
	float V = 0;
 8000fca:	f04f 0300 	mov.w	r3, #0
 8000fce:	607b      	str	r3, [r7, #4]
	HAL_ADC_Start(&hadc1);
 8000fd0:	482d      	ldr	r0, [pc, #180]	; (8001088 <irLeft+0xc8>)
 8000fd2:	f001 f93f 	bl	8002254 <HAL_ADC_Start>
	adc1 = HAL_ADC_GetValue(&hadc1);
 8000fd6:	482c      	ldr	r0, [pc, #176]	; (8001088 <irLeft+0xc8>)
 8000fd8:	f001 fb4f 	bl	800267a <HAL_ADC_GetValue>
 8000fdc:	6038      	str	r0, [r7, #0]
	V = (float)adc1/1000;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	ee07 3a90 	vmov	s15, r3
 8000fe4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fe8:	eddf 6a28 	vldr	s13, [pc, #160]	; 800108c <irLeft+0xcc>
 8000fec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff0:	edc7 7a01 	vstr	s15, [r7, #4]

	if (V <= 0.42) V = 0.42; //cap at 10 cm
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff fa9f 	bl	8000538 <__aeabi_f2d>
 8000ffa:	a31b      	add	r3, pc, #108	; (adr r3, 8001068 <irLeft+0xa8>)
 8000ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001000:	f7ff fd6e 	bl	8000ae0 <__aeabi_dcmple>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d002      	beq.n	8001010 <irLeft+0x50>
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <irLeft+0xd0>)
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	e00c      	b.n	800102a <irLeft+0x6a>
	else if (V >= 2.9) V = 2.84; //cap at 80 cm
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff fa91 	bl	8000538 <__aeabi_f2d>
 8001016:	a316      	add	r3, pc, #88	; (adr r3, 8001070 <irLeft+0xb0>)
 8001018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101c:	f7ff fd6a 	bl	8000af4 <__aeabi_dcmpge>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <irLeft+0x6a>
 8001026:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <irLeft+0xd4>)
 8001028:	607b      	str	r3, [r7, #4]


	ir1Dist = 31.13125 * pow(V, -1.08797);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff fa84 	bl	8000538 <__aeabi_f2d>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8001078 <irLeft+0xb8>
 8001038:	ec43 2b10 	vmov	d0, r2, r3
 800103c:	f008 fd50 	bl	8009ae0 <pow>
 8001040:	ec51 0b10 	vmov	r0, r1, d0
 8001044:	a30e      	add	r3, pc, #56	; (adr r3, 8001080 <irLeft+0xc0>)
 8001046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104a:	f7ff facd 	bl	80005e8 <__aeabi_dmul>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	f7ff fd77 	bl	8000b48 <__aeabi_d2uiz>
 800105a:	4603      	mov	r3, r0
 800105c:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <irLeft+0xd8>)
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	ae147ae1 	.word	0xae147ae1
 800106c:	3fdae147 	.word	0x3fdae147
 8001070:	33333333 	.word	0x33333333
 8001074:	40073333 	.word	0x40073333
 8001078:	3b107747 	.word	0x3b107747
 800107c:	bff16853 	.word	0xbff16853
 8001080:	9999999a 	.word	0x9999999a
 8001084:	403f2199 	.word	0x403f2199
 8001088:	20004b54 	.word	0x20004b54
 800108c:	447a0000 	.word	0x447a0000
 8001090:	3ed70a3d 	.word	0x3ed70a3d
 8001094:	4035c28f 	.word	0x4035c28f
 8001098:	200000a8 	.word	0x200000a8

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a0:	f000 fffe 	bl	80020a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a4:	f000 f844 	bl	8001130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f000 fb96 	bl	80017d8 <MX_GPIO_Init>
  MX_TIM8_Init();
 80010ac:	f000 fade 	bl	800166c <MX_TIM8_Init>
  MX_TIM2_Init();
 80010b0:	f000 f9e0 	bl	8001474 <MX_TIM2_Init>
  MX_TIM1_Init();
 80010b4:	f000 f93e 	bl	8001334 <MX_TIM1_Init>
  MX_TIM3_Init();
 80010b8:	f000 fa30 	bl	800151c <MX_TIM3_Init>
  MX_TIM4_Init();
 80010bc:	f000 fa82 	bl	80015c4 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80010c0:	f000 fb60 	bl	8001784 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80010c4:	f000 f892 	bl	80011ec <MX_ADC1_Init>
  MX_ADC2_Init();
 80010c8:	f000 f8e2 	bl	8001290 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80010cc:	2100      	movs	r1, #0
 80010ce:	480f      	ldr	r0, [pc, #60]	; (800110c <main+0x70>)
 80010d0:	f002 fea6 	bl	8003e20 <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 1);
 80010d4:	2201      	movs	r2, #1
 80010d6:	490e      	ldr	r1, [pc, #56]	; (8001110 <main+0x74>)
 80010d8:	480e      	ldr	r0, [pc, #56]	; (8001114 <main+0x78>)
 80010da:	f004 fa04 	bl	80054e6 <HAL_UART_Receive_IT>
  OLED_Init();
 80010de:	f008 f813 	bl	8009108 <OLED_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010e2:	f005 f91d 	bl	8006320 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LED_Toggle */
  LED_ToggleHandle = osThreadNew(StartDefaultTask, NULL, &LED_Toggle_attributes);
 80010e6:	4a0c      	ldr	r2, [pc, #48]	; (8001118 <main+0x7c>)
 80010e8:	2100      	movs	r1, #0
 80010ea:	480c      	ldr	r0, [pc, #48]	; (800111c <main+0x80>)
 80010ec:	f005 f962 	bl	80063b4 <osThreadNew>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <main+0x84>)
 80010f4:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 80010f6:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <main+0x88>)
 80010f8:	2100      	movs	r1, #0
 80010fa:	480b      	ldr	r0, [pc, #44]	; (8001128 <main+0x8c>)
 80010fc:	f005 f95a 	bl	80063b4 <osThreadNew>
 8001100:	4603      	mov	r3, r0
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <main+0x90>)
 8001104:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001106:	f005 f92f 	bl	8006368 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800110a:	e7fe      	b.n	800110a <main+0x6e>
 800110c:	20004a14 	.word	0x20004a14
 8001110:	20004be8 	.word	0x20004be8
 8001114:	20004a60 	.word	0x20004a60
 8001118:	0800aad4 	.word	0x0800aad4
 800111c:	08001951 	.word	0x08001951
 8001120:	20004aec 	.word	0x20004aec
 8001124:	0800aaf8 	.word	0x0800aaf8
 8001128:	080019c9 	.word	0x080019c9
 800112c:	20004af0 	.word	0x20004af0

08001130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b094      	sub	sp, #80	; 0x50
 8001134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	2230      	movs	r2, #48	; 0x30
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f008 f8a6 	bl	8009290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <SystemClock_Config+0xb4>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	4a21      	ldr	r2, [pc, #132]	; (80011e4 <SystemClock_Config+0xb4>)
 800115e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001162:	6413      	str	r3, [r2, #64]	; 0x40
 8001164:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <SystemClock_Config+0xb4>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <SystemClock_Config+0xb8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a1b      	ldr	r2, [pc, #108]	; (80011e8 <SystemClock_Config+0xb8>)
 800117a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <SystemClock_Config+0xb8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800118c:	2302      	movs	r3, #2
 800118e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001190:	2301      	movs	r3, #1
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001194:	2310      	movs	r3, #16
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001198:	2300      	movs	r3, #0
 800119a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119c:	f107 0320 	add.w	r3, r7, #32
 80011a0:	4618      	mov	r0, r3
 80011a2:	f002 f83f 	bl	8003224 <HAL_RCC_OscConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80011ac:	f000 fc2c 	bl	8001a08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b0:	230f      	movs	r3, #15
 80011b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f002 faa2 	bl	8003714 <HAL_RCC_ClockConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80011d6:	f000 fc17 	bl	8001a08 <Error_Handler>
  }
}
 80011da:	bf00      	nop
 80011dc:	3750      	adds	r7, #80	; 0x50
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40007000 	.word	0x40007000

080011ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011f2:	463b      	mov	r3, r7
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011fe:	4b21      	ldr	r3, [pc, #132]	; (8001284 <MX_ADC1_Init+0x98>)
 8001200:	4a21      	ldr	r2, [pc, #132]	; (8001288 <MX_ADC1_Init+0x9c>)
 8001202:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001204:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <MX_ADC1_Init+0x98>)
 8001206:	2200      	movs	r2, #0
 8001208:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800120a:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <MX_ADC1_Init+0x98>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001210:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <MX_ADC1_Init+0x98>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001216:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <MX_ADC1_Init+0x98>)
 8001218:	2200      	movs	r2, #0
 800121a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800121c:	4b19      	ldr	r3, [pc, #100]	; (8001284 <MX_ADC1_Init+0x98>)
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <MX_ADC1_Init+0x98>)
 8001226:	2200      	movs	r2, #0
 8001228:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <MX_ADC1_Init+0x98>)
 800122c:	4a17      	ldr	r2, [pc, #92]	; (800128c <MX_ADC1_Init+0xa0>)
 800122e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_ADC1_Init+0x98>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <MX_ADC1_Init+0x98>)
 8001238:	2201      	movs	r2, #1
 800123a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_ADC1_Init+0x98>)
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_ADC1_Init+0x98>)
 8001246:	2201      	movs	r2, #1
 8001248:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800124a:	480e      	ldr	r0, [pc, #56]	; (8001284 <MX_ADC1_Init+0x98>)
 800124c:	f000 ffbe 	bl	80021cc <HAL_ADC_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001256:	f000 fbd7 	bl	8001a08 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800125a:	230b      	movs	r3, #11
 800125c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800125e:	2301      	movs	r3, #1
 8001260:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001266:	463b      	mov	r3, r7
 8001268:	4619      	mov	r1, r3
 800126a:	4806      	ldr	r0, [pc, #24]	; (8001284 <MX_ADC1_Init+0x98>)
 800126c:	f001 fa30 	bl	80026d0 <HAL_ADC_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001276:	f000 fbc7 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20004b54 	.word	0x20004b54
 8001288:	40012000 	.word	0x40012000
 800128c:	0f000001 	.word	0x0f000001

08001290 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001296:	463b      	mov	r3, r7
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80012a2:	4b21      	ldr	r3, [pc, #132]	; (8001328 <MX_ADC2_Init+0x98>)
 80012a4:	4a21      	ldr	r2, [pc, #132]	; (800132c <MX_ADC2_Init+0x9c>)
 80012a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012a8:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <MX_ADC2_Init+0x98>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <MX_ADC2_Init+0x98>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80012b4:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <MX_ADC2_Init+0x98>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80012ba:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <MX_ADC2_Init+0x98>)
 80012bc:	2200      	movs	r2, #0
 80012be:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <MX_ADC2_Init+0x98>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012c8:	4b17      	ldr	r3, [pc, #92]	; (8001328 <MX_ADC2_Init+0x98>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <MX_ADC2_Init+0x98>)
 80012d0:	4a17      	ldr	r2, [pc, #92]	; (8001330 <MX_ADC2_Init+0xa0>)
 80012d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <MX_ADC2_Init+0x98>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80012da:	4b13      	ldr	r3, [pc, #76]	; (8001328 <MX_ADC2_Init+0x98>)
 80012dc:	2201      	movs	r2, #1
 80012de:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <MX_ADC2_Init+0x98>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_ADC2_Init+0x98>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012ee:	480e      	ldr	r0, [pc, #56]	; (8001328 <MX_ADC2_Init+0x98>)
 80012f0:	f000 ff6c 	bl	80021cc <HAL_ADC_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80012fa:	f000 fb85 	bl	8001a08 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80012fe:	230c      	movs	r3, #12
 8001300:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001302:	2301      	movs	r3, #1
 8001304:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800130a:	463b      	mov	r3, r7
 800130c:	4619      	mov	r1, r3
 800130e:	4806      	ldr	r0, [pc, #24]	; (8001328 <MX_ADC2_Init+0x98>)
 8001310:	f001 f9de 	bl	80026d0 <HAL_ADC_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800131a:	f000 fb75 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20004aa4 	.word	0x20004aa4
 800132c:	40012100 	.word	0x40012100
 8001330:	0f000001 	.word	0x0f000001

08001334 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b096      	sub	sp, #88	; 0x58
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001348:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]
 8001362:	615a      	str	r2, [r3, #20]
 8001364:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	2220      	movs	r2, #32
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f007 ff8f 	bl	8009290 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001372:	4b3e      	ldr	r3, [pc, #248]	; (800146c <MX_TIM1_Init+0x138>)
 8001374:	4a3e      	ldr	r2, [pc, #248]	; (8001470 <MX_TIM1_Init+0x13c>)
 8001376:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320;
 8001378:	4b3c      	ldr	r3, [pc, #240]	; (800146c <MX_TIM1_Init+0x138>)
 800137a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800137e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001380:	4b3a      	ldr	r3, [pc, #232]	; (800146c <MX_TIM1_Init+0x138>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001386:	4b39      	ldr	r3, [pc, #228]	; (800146c <MX_TIM1_Init+0x138>)
 8001388:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800138c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138e:	4b37      	ldr	r3, [pc, #220]	; (800146c <MX_TIM1_Init+0x138>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001394:	4b35      	ldr	r3, [pc, #212]	; (800146c <MX_TIM1_Init+0x138>)
 8001396:	2200      	movs	r2, #0
 8001398:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800139a:	4b34      	ldr	r3, [pc, #208]	; (800146c <MX_TIM1_Init+0x138>)
 800139c:	2280      	movs	r2, #128	; 0x80
 800139e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013a0:	4832      	ldr	r0, [pc, #200]	; (800146c <MX_TIM1_Init+0x138>)
 80013a2:	f002 fb87 	bl	8003ab4 <HAL_TIM_Base_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80013ac:	f000 fb2c 	bl	8001a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013ba:	4619      	mov	r1, r3
 80013bc:	482b      	ldr	r0, [pc, #172]	; (800146c <MX_TIM1_Init+0x138>)
 80013be:	f003 f963 	bl	8004688 <HAL_TIM_ConfigClockSource>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80013c8:	f000 fb1e 	bl	8001a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013cc:	4827      	ldr	r0, [pc, #156]	; (800146c <MX_TIM1_Init+0x138>)
 80013ce:	f002 fbc0 	bl	8003b52 <HAL_TIM_PWM_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80013d8:	f000 fb16 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013e8:	4619      	mov	r1, r3
 80013ea:	4820      	ldr	r0, [pc, #128]	; (800146c <MX_TIM1_Init+0x138>)
 80013ec:	f003 feba 	bl	8005164 <HAL_TIMEx_MasterConfigSynchronization>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80013f6:	f000 fb07 	bl	8001a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013fa:	2360      	movs	r3, #96	; 0x60
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001402:	2300      	movs	r3, #0
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	220c      	movs	r2, #12
 8001418:	4619      	mov	r1, r3
 800141a:	4814      	ldr	r0, [pc, #80]	; (800146c <MX_TIM1_Init+0x138>)
 800141c:	f003 f872 	bl	8004504 <HAL_TIM_PWM_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001426:	f000 faef 	bl	8001a08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800143e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001442:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	4619      	mov	r1, r3
 800144c:	4807      	ldr	r0, [pc, #28]	; (800146c <MX_TIM1_Init+0x138>)
 800144e:	f003 ff05 	bl	800525c <HAL_TIMEx_ConfigBreakDeadTime>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001458:	f000 fad6 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800145c:	4803      	ldr	r0, [pc, #12]	; (800146c <MX_TIM1_Init+0x138>)
 800145e:	f000 fcdd 	bl	8001e1c <HAL_TIM_MspPostInit>

}
 8001462:	bf00      	nop
 8001464:	3758      	adds	r7, #88	; 0x58
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20004b9c 	.word	0x20004b9c
 8001470:	40010000 	.word	0x40010000

08001474 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08c      	sub	sp, #48	; 0x30
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800147a:	f107 030c 	add.w	r3, r7, #12
 800147e:	2224      	movs	r2, #36	; 0x24
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f007 ff04 	bl	8009290 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <MX_TIM2_Init+0xa4>)
 8001492:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001496:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001498:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <MX_TIM2_Init+0xa4>)
 800149a:	2200      	movs	r2, #0
 800149c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149e:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <MX_TIM2_Init+0xa4>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80014a4:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <MX_TIM2_Init+0xa4>)
 80014a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ac:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <MX_TIM2_Init+0xa4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <MX_TIM2_Init+0xa4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014b8:	2303      	movs	r3, #3
 80014ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014c0:	2301      	movs	r3, #1
 80014c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80014c8:	230a      	movs	r3, #10
 80014ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014d0:	2301      	movs	r3, #1
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80014d8:	230a      	movs	r3, #10
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	4619      	mov	r1, r3
 80014e2:	480d      	ldr	r0, [pc, #52]	; (8001518 <MX_TIM2_Init+0xa4>)
 80014e4:	f002 fdc4 	bl	8004070 <HAL_TIM_Encoder_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80014ee:	f000 fa8b 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	4619      	mov	r1, r3
 80014fe:	4806      	ldr	r0, [pc, #24]	; (8001518 <MX_TIM2_Init+0xa4>)
 8001500:	f003 fe30 	bl	8005164 <HAL_TIMEx_MasterConfigSynchronization>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800150a:	f000 fa7d 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	3730      	adds	r7, #48	; 0x30
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20004bec 	.word	0x20004bec

0800151c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	; 0x30
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	2224      	movs	r2, #36	; 0x24
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f007 feb0 	bl	8009290 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001538:	4b20      	ldr	r3, [pc, #128]	; (80015bc <MX_TIM3_Init+0xa0>)
 800153a:	4a21      	ldr	r2, [pc, #132]	; (80015c0 <MX_TIM3_Init+0xa4>)
 800153c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800153e:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <MX_TIM3_Init+0xa0>)
 8001540:	2200      	movs	r2, #0
 8001542:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001544:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <MX_TIM3_Init+0xa0>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <MX_TIM3_Init+0xa0>)
 800154c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001550:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001552:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <MX_TIM3_Init+0xa0>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001558:	4b18      	ldr	r3, [pc, #96]	; (80015bc <MX_TIM3_Init+0xa0>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800155e:	2303      	movs	r3, #3
 8001560:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001566:	2301      	movs	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800156e:	230a      	movs	r3, #10
 8001570:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001576:	2301      	movs	r3, #1
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800157e:	230a      	movs	r3, #10
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	4619      	mov	r1, r3
 8001588:	480c      	ldr	r0, [pc, #48]	; (80015bc <MX_TIM3_Init+0xa0>)
 800158a:	f002 fd71 	bl	8004070 <HAL_TIM_Encoder_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001594:	f000 fa38 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_TIM3_Init+0xa0>)
 80015a6:	f003 fddd 	bl	8005164 <HAL_TIMEx_MasterConfigSynchronization>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80015b0:	f000 fa2a 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	3730      	adds	r7, #48	; 0x30
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20004b0c 	.word	0x20004b0c
 80015c0:	40000400 	.word	0x40000400

080015c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ca:	f107 0310 	add.w	r3, r7, #16
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015d4:	463b      	mov	r3, r7
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015e0:	4b20      	ldr	r3, [pc, #128]	; (8001664 <MX_TIM4_Init+0xa0>)
 80015e2:	4a21      	ldr	r2, [pc, #132]	; (8001668 <MX_TIM4_Init+0xa4>)
 80015e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 80015e6:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <MX_TIM4_Init+0xa0>)
 80015e8:	220f      	movs	r2, #15
 80015ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <MX_TIM4_Init+0xa0>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <MX_TIM4_Init+0xa0>)
 80015f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fa:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <MX_TIM4_Init+0xa0>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <MX_TIM4_Init+0xa0>)
 8001602:	2200      	movs	r2, #0
 8001604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001606:	4817      	ldr	r0, [pc, #92]	; (8001664 <MX_TIM4_Init+0xa0>)
 8001608:	f002 fbba 	bl	8003d80 <HAL_TIM_IC_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001612:	f000 f9f9 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800161e:	f107 0310 	add.w	r3, r7, #16
 8001622:	4619      	mov	r1, r3
 8001624:	480f      	ldr	r0, [pc, #60]	; (8001664 <MX_TIM4_Init+0xa0>)
 8001626:	f003 fd9d 	bl	8005164 <HAL_TIMEx_MasterConfigSynchronization>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001630:	f000 f9ea 	bl	8001a08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001634:	2300      	movs	r3, #0
 8001636:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001638:	2301      	movs	r3, #1
 800163a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001644:	463b      	mov	r3, r7
 8001646:	2200      	movs	r2, #0
 8001648:	4619      	mov	r1, r3
 800164a:	4806      	ldr	r0, [pc, #24]	; (8001664 <MX_TIM4_Init+0xa0>)
 800164c:	f002 febe 	bl	80043cc <HAL_TIM_IC_ConfigChannel>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001656:	f000 f9d7 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20004a14 	.word	0x20004a14
 8001668:	40000800 	.word	0x40000800

0800166c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b092      	sub	sp, #72	; 0x48
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001672:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800167c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
 800168c:	615a      	str	r2, [r3, #20]
 800168e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	2220      	movs	r2, #32
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f007 fdfa 	bl	8009290 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800169c:	4b37      	ldr	r3, [pc, #220]	; (800177c <MX_TIM8_Init+0x110>)
 800169e:	4a38      	ldr	r2, [pc, #224]	; (8001780 <MX_TIM8_Init+0x114>)
 80016a0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80016a2:	4b36      	ldr	r3, [pc, #216]	; (800177c <MX_TIM8_Init+0x110>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a8:	4b34      	ldr	r3, [pc, #208]	; (800177c <MX_TIM8_Init+0x110>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80016ae:	4b33      	ldr	r3, [pc, #204]	; (800177c <MX_TIM8_Init+0x110>)
 80016b0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80016b4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b6:	4b31      	ldr	r3, [pc, #196]	; (800177c <MX_TIM8_Init+0x110>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016bc:	4b2f      	ldr	r3, [pc, #188]	; (800177c <MX_TIM8_Init+0x110>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c2:	4b2e      	ldr	r3, [pc, #184]	; (800177c <MX_TIM8_Init+0x110>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016c8:	482c      	ldr	r0, [pc, #176]	; (800177c <MX_TIM8_Init+0x110>)
 80016ca:	f002 fa42 	bl	8003b52 <HAL_TIM_PWM_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80016d4:	f000 f998 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d8:	2300      	movs	r3, #0
 80016da:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016e4:	4619      	mov	r1, r3
 80016e6:	4825      	ldr	r0, [pc, #148]	; (800177c <MX_TIM8_Init+0x110>)
 80016e8:	f003 fd3c 	bl	8005164 <HAL_TIMEx_MasterConfigSynchronization>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80016f2:	f000 f989 	bl	8001a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f6:	2360      	movs	r3, #96	; 0x60
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016fe:	2300      	movs	r3, #0
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001702:	2300      	movs	r3, #0
 8001704:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001716:	2200      	movs	r2, #0
 8001718:	4619      	mov	r1, r3
 800171a:	4818      	ldr	r0, [pc, #96]	; (800177c <MX_TIM8_Init+0x110>)
 800171c:	f002 fef2 	bl	8004504 <HAL_TIM_PWM_ConfigChannel>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8001726:	f000 f96f 	bl	8001a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800172a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172e:	2204      	movs	r2, #4
 8001730:	4619      	mov	r1, r3
 8001732:	4812      	ldr	r0, [pc, #72]	; (800177c <MX_TIM8_Init+0x110>)
 8001734:	f002 fee6 	bl	8004504 <HAL_TIM_PWM_ConfigChannel>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800173e:	f000 f963 	bl	8001a08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800175a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	4619      	mov	r1, r3
 8001764:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_TIM8_Init+0x110>)
 8001766:	f003 fd79 	bl	800525c <HAL_TIMEx_ConfigBreakDeadTime>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001770:	f000 f94a 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	3748      	adds	r7, #72	; 0x48
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	200049cc 	.word	0x200049cc
 8001780:	40010400 	.word	0x40010400

08001784 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <MX_USART3_UART_Init+0x4c>)
 800178a:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <MX_USART3_UART_Init+0x50>)
 800178c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <MX_USART3_UART_Init+0x4c>)
 8001790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001794:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <MX_USART3_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <MX_USART3_UART_Init+0x4c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <MX_USART3_UART_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <MX_USART3_UART_Init+0x4c>)
 80017aa:	220c      	movs	r2, #12
 80017ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <MX_USART3_UART_Init+0x4c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <MX_USART3_UART_Init+0x4c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <MX_USART3_UART_Init+0x4c>)
 80017bc:	f003 fdb4 	bl	8005328 <HAL_UART_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017c6:	f000 f91f 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20004a60 	.word	0x20004a60
 80017d4:	40004800 	.word	0x40004800

080017d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b49      	ldr	r3, [pc, #292]	; (8001918 <MX_GPIO_Init+0x140>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a48      	ldr	r2, [pc, #288]	; (8001918 <MX_GPIO_Init+0x140>)
 80017f8:	f043 0310 	orr.w	r3, r3, #16
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b46      	ldr	r3, [pc, #280]	; (8001918 <MX_GPIO_Init+0x140>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b42      	ldr	r3, [pc, #264]	; (8001918 <MX_GPIO_Init+0x140>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a41      	ldr	r2, [pc, #260]	; (8001918 <MX_GPIO_Init+0x140>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b3f      	ldr	r3, [pc, #252]	; (8001918 <MX_GPIO_Init+0x140>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <MX_GPIO_Init+0x140>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a3a      	ldr	r2, [pc, #232]	; (8001918 <MX_GPIO_Init+0x140>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b38      	ldr	r3, [pc, #224]	; (8001918 <MX_GPIO_Init+0x140>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	4b34      	ldr	r3, [pc, #208]	; (8001918 <MX_GPIO_Init+0x140>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a33      	ldr	r2, [pc, #204]	; (8001918 <MX_GPIO_Init+0x140>)
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b31      	ldr	r3, [pc, #196]	; (8001918 <MX_GPIO_Init+0x140>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	603b      	str	r3, [r7, #0]
 8001862:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <MX_GPIO_Init+0x140>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a2c      	ldr	r2, [pc, #176]	; (8001918 <MX_GPIO_Init+0x140>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <MX_GPIO_Init+0x140>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800187a:	2200      	movs	r2, #0
 800187c:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8001880:	4826      	ldr	r0, [pc, #152]	; (800191c <MX_GPIO_Init+0x144>)
 8001882:	f001 fc8d 	bl	80031a0 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	213c      	movs	r1, #60	; 0x3c
 800188a:	4825      	ldr	r0, [pc, #148]	; (8001920 <MX_GPIO_Init+0x148>)
 800188c:	f001 fc88 	bl	80031a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001896:	4823      	ldr	r0, [pc, #140]	; (8001924 <MX_GPIO_Init+0x14c>)
 8001898:	f001 fc82 	bl	80031a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800189c:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 80018a0:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	4819      	ldr	r0, [pc, #100]	; (800191c <MX_GPIO_Init+0x144>)
 80018b6:	f001 fad7 	bl	8002e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 80018ba:	233c      	movs	r3, #60	; 0x3c
 80018bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018be:	2301      	movs	r3, #1
 80018c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c6:	2302      	movs	r3, #2
 80018c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4813      	ldr	r0, [pc, #76]	; (8001920 <MX_GPIO_Init+0x148>)
 80018d2:	f001 fac9 	bl	8002e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USRBUT_Pin */
  GPIO_InitStruct.Pin = USRBUT_Pin;
 80018d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018dc:	2300      	movs	r3, #0
 80018de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USRBUT_GPIO_Port, &GPIO_InitStruct);
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4619      	mov	r1, r3
 80018ea:	480e      	ldr	r0, [pc, #56]	; (8001924 <MX_GPIO_Init+0x14c>)
 80018ec:	f001 fabc 	bl	8002e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 80018f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f6:	2301      	movs	r3, #1
 80018f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4619      	mov	r1, r3
 8001908:	4806      	ldr	r0, [pc, #24]	; (8001924 <MX_GPIO_Init+0x14c>)
 800190a:	f001 faad 	bl	8002e68 <HAL_GPIO_Init>

}
 800190e:	bf00      	nop
 8001910:	3728      	adds	r7, #40	; 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800
 800191c:	40021000 	.word	0x40021000
 8001920:	40020000 	.word	0x40020000
 8001924:	40020c00 	.word	0x40020c00

08001928 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	/*Prevent unused argument(s) compilation warning*/
	UNUSED(huart);
	HAL_UART_Transmit(&huart3,(uint8_t *)aRxBuffer,10,0xFFFF); //might not nd
 8001930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001934:	220a      	movs	r2, #10
 8001936:	4904      	ldr	r1, [pc, #16]	; (8001948 <HAL_UART_RxCpltCallback+0x20>)
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <HAL_UART_RxCpltCallback+0x24>)
 800193a:	f003 fd42 	bl	80053c2 <HAL_UART_Transmit>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20004be8 	.word	0x20004be8
 800194c:	20004a60 	.word	0x20004a60

08001950 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08e      	sub	sp, #56	; 0x38
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t test[20] = "Testing ir";
 8001958:	4a18      	ldr	r2, [pc, #96]	; (80019bc <StartDefaultTask+0x6c>)
 800195a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800195e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001960:	c303      	stmia	r3!, {r0, r1}
 8001962:	801a      	strh	r2, [r3, #0]
 8001964:	3302      	adds	r3, #2
 8001966:	0c12      	lsrs	r2, r2, #16
 8001968:	701a      	strb	r2, [r3, #0]
 800196a:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	721a      	strb	r2, [r3, #8]
	uint8_t checkPi[1];
	/* Infinite loop */
	for(;;)
	{
//		HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 1);
		OLED_ShowString(5,5,test);
 8001976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197a:	461a      	mov	r2, r3
 800197c:	2105      	movs	r1, #5
 800197e:	2005      	movs	r0, #5
 8001980:	f007 fb90 	bl	80090a4 <OLED_ShowString>
//		ultraDistCheck();
//		HAL_Delay(200);
//		sprintf(ultra, "uDist: %u cm\0", uDistFinal);
//		OLED_ShowString(10, 20, ultra);

		irLeft();
 8001984:	f7ff fb1c 	bl	8000fc0 <irLeft>
		HAL_Delay(200);
 8001988:	20c8      	movs	r0, #200	; 0xc8
 800198a:	f000 fbfb 	bl	8002184 <HAL_Delay>
		sprintf(ultra, "IR left: %u\0", ir1Dist);
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <StartDefaultTask+0x70>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	f107 0310 	add.w	r3, r7, #16
 8001996:	490b      	ldr	r1, [pc, #44]	; (80019c4 <StartDefaultTask+0x74>)
 8001998:	4618      	mov	r0, r3
 800199a:	f007 fc81 	bl	80092a0 <siprintf>
		OLED_ShowString(10, 30, ultra);
 800199e:	f107 0310 	add.w	r3, r7, #16
 80019a2:	461a      	mov	r2, r3
 80019a4:	211e      	movs	r1, #30
 80019a6:	200a      	movs	r0, #10
 80019a8:	f007 fb7c 	bl	80090a4 <OLED_ShowString>
//		HAL_Delay(200);
//		sprintf(ultra, "IR dist: %u\0", ir2Dist);
//		OLED_ShowString(10, 30, ultra);


		OLED_Refresh_Gram();
 80019ac:	f007 fa06 	bl	8008dbc <OLED_Refresh_Gram>
		//	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
		osDelay(1000);
 80019b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019b4:	f004 fd90 	bl	80064d8 <osDelay>
	{
 80019b8:	e7dd      	b.n	8001976 <StartDefaultTask+0x26>
 80019ba:	bf00      	nop
 80019bc:	0800aaa8 	.word	0x0800aaa8
 80019c0:	200000a8 	.word	0x200000a8
 80019c4:	0800aa98 	.word	0x0800aa98

080019c8 <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80019d0:	2100      	movs	r1, #0
 80019d2:	480a      	ldr	r0, [pc, #40]	; (80019fc <motor+0x34>)
 80019d4:	f002 f90c 	bl	8003bf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80019d8:	2104      	movs	r1, #4
 80019da:	4808      	ldr	r0, [pc, #32]	; (80019fc <motor+0x34>)
 80019dc:	f002 f908 	bl	8003bf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80019e0:	210c      	movs	r1, #12
 80019e2:	4807      	ldr	r0, [pc, #28]	; (8001a00 <motor+0x38>)
 80019e4:	f002 f904 	bl	8003bf0 <HAL_TIM_PWM_Start>
	int x = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
//		Fleft(90);
//		HAL_Delay(5000);
//		Fright(90);
//		}
//	}
	osDelay(100000);
 80019ec:	4805      	ldr	r0, [pc, #20]	; (8001a04 <motor+0x3c>)
 80019ee:	f004 fd73 	bl	80064d8 <osDelay>
  /* USER CODE END motor */
}
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200049cc 	.word	0x200049cc
 8001a00:	20004b9c 	.word	0x20004b9c
 8001a04:	000186a0 	.word	0x000186a0

08001a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a0c:	b672      	cpsid	i
}
 8001a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <Error_Handler+0x8>
	...

08001a14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_MspInit+0x54>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	4a11      	ldr	r2, [pc, #68]	; (8001a68 <HAL_MspInit+0x54>)
 8001a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a28:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_MspInit+0x54>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	603b      	str	r3, [r7, #0]
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_MspInit+0x54>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <HAL_MspInit+0x54>)
 8001a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a44:	6413      	str	r3, [r2, #64]	; 0x40
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <HAL_MspInit+0x54>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	210f      	movs	r1, #15
 8001a56:	f06f 0001 	mvn.w	r0, #1
 8001a5a:	f001 f93c 	bl	8002cd6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800

08001a6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08c      	sub	sp, #48	; 0x30
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a36      	ldr	r2, [pc, #216]	; (8001b64 <HAL_ADC_MspInit+0xf8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d130      	bne.n	8001af0 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
 8001a92:	4b35      	ldr	r3, [pc, #212]	; (8001b68 <HAL_ADC_MspInit+0xfc>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	4a34      	ldr	r2, [pc, #208]	; (8001b68 <HAL_ADC_MspInit+0xfc>)
 8001a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9e:	4b32      	ldr	r3, [pc, #200]	; (8001b68 <HAL_ADC_MspInit+0xfc>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa6:	61bb      	str	r3, [r7, #24]
 8001aa8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <HAL_ADC_MspInit+0xfc>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a2d      	ldr	r2, [pc, #180]	; (8001b68 <HAL_ADC_MspInit+0xfc>)
 8001ab4:	f043 0304 	orr.w	r3, r3, #4
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <HAL_ADC_MspInit+0xfc>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aca:	2303      	movs	r3, #3
 8001acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad2:	f107 031c 	add.w	r3, r7, #28
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4824      	ldr	r0, [pc, #144]	; (8001b6c <HAL_ADC_MspInit+0x100>)
 8001ada:	f001 f9c5 	bl	8002e68 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2105      	movs	r1, #5
 8001ae2:	2012      	movs	r0, #18
 8001ae4:	f001 f8f7 	bl	8002cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001ae8:	2012      	movs	r0, #18
 8001aea:	f001 f910 	bl	8002d0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001aee:	e034      	b.n	8001b5a <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a1e      	ldr	r2, [pc, #120]	; (8001b70 <HAL_ADC_MspInit+0x104>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d12f      	bne.n	8001b5a <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <HAL_ADC_MspInit+0xfc>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	4a19      	ldr	r2, [pc, #100]	; (8001b68 <HAL_ADC_MspInit+0xfc>)
 8001b04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b08:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0a:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <HAL_ADC_MspInit+0xfc>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <HAL_ADC_MspInit+0xfc>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <HAL_ADC_MspInit+0xfc>)
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <HAL_ADC_MspInit+0xfc>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b32:	2304      	movs	r3, #4
 8001b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b36:	2303      	movs	r3, #3
 8001b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4619      	mov	r1, r3
 8001b44:	4809      	ldr	r0, [pc, #36]	; (8001b6c <HAL_ADC_MspInit+0x100>)
 8001b46:	f001 f98f 	bl	8002e68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2105      	movs	r1, #5
 8001b4e:	2012      	movs	r0, #18
 8001b50:	f001 f8c1 	bl	8002cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b54:	2012      	movs	r0, #18
 8001b56:	f001 f8da 	bl	8002d0e <HAL_NVIC_EnableIRQ>
}
 8001b5a:	bf00      	nop
 8001b5c:	3730      	adds	r7, #48	; 0x30
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40012000 	.word	0x40012000
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40020800 	.word	0x40020800
 8001b70:	40012100 	.word	0x40012100

08001b74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0b      	ldr	r2, [pc, #44]	; (8001bb0 <HAL_TIM_Base_MspInit+0x3c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d10d      	bne.n	8001ba2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <HAL_TIM_Base_MspInit+0x40>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	4a09      	ldr	r2, [pc, #36]	; (8001bb4 <HAL_TIM_Base_MspInit+0x40>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6453      	str	r3, [r2, #68]	; 0x44
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <HAL_TIM_Base_MspInit+0x40>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40010000 	.word	0x40010000
 8001bb4:	40023800 	.word	0x40023800

08001bb8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08c      	sub	sp, #48	; 0x30
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 031c 	add.w	r3, r7, #28
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd8:	d14b      	bne.n	8001c72 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	4b3f      	ldr	r3, [pc, #252]	; (8001cdc <HAL_TIM_Encoder_MspInit+0x124>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	4a3e      	ldr	r2, [pc, #248]	; (8001cdc <HAL_TIM_Encoder_MspInit+0x124>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bea:	4b3c      	ldr	r3, [pc, #240]	; (8001cdc <HAL_TIM_Encoder_MspInit+0x124>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	61bb      	str	r3, [r7, #24]
 8001bf4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	4b38      	ldr	r3, [pc, #224]	; (8001cdc <HAL_TIM_Encoder_MspInit+0x124>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a37      	ldr	r2, [pc, #220]	; (8001cdc <HAL_TIM_Encoder_MspInit+0x124>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b35      	ldr	r3, [pc, #212]	; (8001cdc <HAL_TIM_Encoder_MspInit+0x124>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	4b31      	ldr	r3, [pc, #196]	; (8001cdc <HAL_TIM_Encoder_MspInit+0x124>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a30      	ldr	r2, [pc, #192]	; (8001cdc <HAL_TIM_Encoder_MspInit+0x124>)
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b2e      	ldr	r3, [pc, #184]	; (8001cdc <HAL_TIM_Encoder_MspInit+0x124>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c40:	2301      	movs	r3, #1
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c44:	f107 031c 	add.w	r3, r7, #28
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4825      	ldr	r0, [pc, #148]	; (8001ce0 <HAL_TIM_Encoder_MspInit+0x128>)
 8001c4c:	f001 f90c 	bl	8002e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c50:	2308      	movs	r3, #8
 8001c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c60:	2301      	movs	r3, #1
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c64:	f107 031c 	add.w	r3, r7, #28
 8001c68:	4619      	mov	r1, r3
 8001c6a:	481e      	ldr	r0, [pc, #120]	; (8001ce4 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001c6c:	f001 f8fc 	bl	8002e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c70:	e030      	b.n	8001cd4 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a1c      	ldr	r2, [pc, #112]	; (8001ce8 <HAL_TIM_Encoder_MspInit+0x130>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d12b      	bne.n	8001cd4 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <HAL_TIM_Encoder_MspInit+0x124>)
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	4a15      	ldr	r2, [pc, #84]	; (8001cdc <HAL_TIM_Encoder_MspInit+0x124>)
 8001c86:	f043 0302 	orr.w	r3, r3, #2
 8001c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <HAL_TIM_Encoder_MspInit+0x124>)
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_TIM_Encoder_MspInit+0x124>)
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca0:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <HAL_TIM_Encoder_MspInit+0x124>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_TIM_Encoder_MspInit+0x124>)
 8001caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cb4:	23c0      	movs	r3, #192	; 0xc0
 8001cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <HAL_TIM_Encoder_MspInit+0x128>)
 8001cd0:	f001 f8ca 	bl	8002e68 <HAL_GPIO_Init>
}
 8001cd4:	bf00      	nop
 8001cd6:	3730      	adds	r7, #48	; 0x30
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	40020400 	.word	0x40020400
 8001ce8:	40000400 	.word	0x40000400

08001cec <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1d      	ldr	r2, [pc, #116]	; (8001d80 <HAL_TIM_IC_MspInit+0x94>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d134      	bne.n	8001d78 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <HAL_TIM_IC_MspInit+0x98>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	4a1b      	ldr	r2, [pc, #108]	; (8001d84 <HAL_TIM_IC_MspInit+0x98>)
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1e:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <HAL_TIM_IC_MspInit+0x98>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <HAL_TIM_IC_MspInit+0x98>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a14      	ldr	r2, [pc, #80]	; (8001d84 <HAL_TIM_IC_MspInit+0x98>)
 8001d34:	f043 0308 	orr.w	r3, r3, #8
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_TIM_IC_MspInit+0x98>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2300      	movs	r3, #0
 8001d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4619      	mov	r1, r3
 8001d62:	4809      	ldr	r0, [pc, #36]	; (8001d88 <HAL_TIM_IC_MspInit+0x9c>)
 8001d64:	f001 f880 	bl	8002e68 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2105      	movs	r1, #5
 8001d6c:	201e      	movs	r0, #30
 8001d6e:	f000 ffb2 	bl	8002cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d72:	201e      	movs	r0, #30
 8001d74:	f000 ffcb 	bl	8002d0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d78:	bf00      	nop
 8001d7a:	3728      	adds	r7, #40	; 0x28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40000800 	.word	0x40000800
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020c00 	.word	0x40020c00

08001d8c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM8)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a19      	ldr	r2, [pc, #100]	; (8001e10 <HAL_TIM_PWM_MspInit+0x84>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d12b      	bne.n	8001e06 <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <HAL_TIM_PWM_MspInit+0x88>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	4a17      	ldr	r2, [pc, #92]	; (8001e14 <HAL_TIM_PWM_MspInit+0x88>)
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <HAL_TIM_PWM_MspInit+0x88>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <HAL_TIM_PWM_MspInit+0x88>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a10      	ldr	r2, [pc, #64]	; (8001e14 <HAL_TIM_PWM_MspInit+0x88>)
 8001dd4:	f043 0304 	orr.w	r3, r3, #4
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <HAL_TIM_PWM_MspInit+0x88>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8001de6:	23c0      	movs	r3, #192	; 0xc0
 8001de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df2:	2300      	movs	r3, #0
 8001df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001df6:	2303      	movs	r3, #3
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	; (8001e18 <HAL_TIM_PWM_MspInit+0x8c>)
 8001e02:	f001 f831 	bl	8002e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001e06:	bf00      	nop
 8001e08:	3728      	adds	r7, #40	; 0x28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40010400 	.word	0x40010400
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020800 	.word	0x40020800

08001e1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 030c 	add.w	r3, r7, #12
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a12      	ldr	r2, [pc, #72]	; (8001e84 <HAL_TIM_MspPostInit+0x68>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d11e      	bne.n	8001e7c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <HAL_TIM_MspPostInit+0x6c>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a10      	ldr	r2, [pc, #64]	; (8001e88 <HAL_TIM_MspPostInit+0x6c>)
 8001e48:	f043 0310 	orr.w	r3, r3, #16
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <HAL_TIM_MspPostInit+0x6c>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001e5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e70:	f107 030c 	add.w	r3, r7, #12
 8001e74:	4619      	mov	r1, r3
 8001e76:	4805      	ldr	r0, [pc, #20]	; (8001e8c <HAL_TIM_MspPostInit+0x70>)
 8001e78:	f000 fff6 	bl	8002e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e7c:	bf00      	nop
 8001e7e:	3720      	adds	r7, #32
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40010000 	.word	0x40010000
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40021000 	.word	0x40021000

08001e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	; 0x28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a1d      	ldr	r2, [pc, #116]	; (8001f24 <HAL_UART_MspInit+0x94>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d134      	bne.n	8001f1c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <HAL_UART_MspInit+0x98>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	4a1b      	ldr	r2, [pc, #108]	; (8001f28 <HAL_UART_MspInit+0x98>)
 8001ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec2:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <HAL_UART_MspInit+0x98>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <HAL_UART_MspInit+0x98>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a14      	ldr	r2, [pc, #80]	; (8001f28 <HAL_UART_MspInit+0x98>)
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_UART_MspInit+0x98>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001eea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001efc:	2307      	movs	r3, #7
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	4619      	mov	r1, r3
 8001f06:	4809      	ldr	r0, [pc, #36]	; (8001f2c <HAL_UART_MspInit+0x9c>)
 8001f08:	f000 ffae 	bl	8002e68 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2105      	movs	r1, #5
 8001f10:	2027      	movs	r0, #39	; 0x27
 8001f12:	f000 fee0 	bl	8002cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f16:	2027      	movs	r0, #39	; 0x27
 8001f18:	f000 fef9 	bl	8002d0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f1c:	bf00      	nop
 8001f1e:	3728      	adds	r7, #40	; 0x28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40004800 	.word	0x40004800
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40020800 	.word	0x40020800

08001f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <NMI_Handler+0x4>

08001f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3a:	e7fe      	b.n	8001f3a <HardFault_Handler+0x4>

08001f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <MemManage_Handler+0x4>

08001f42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <BusFault_Handler+0x4>

08001f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <UsageFault_Handler+0x4>

08001f4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f60:	f000 f8f0 	bl	8002144 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f64:	f005 fec6 	bl	8007cf4 <xTaskGetSchedulerState>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d001      	beq.n	8001f72 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001f6e:	f006 fcab 	bl	80088c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f7c:	4803      	ldr	r0, [pc, #12]	; (8001f8c <ADC_IRQHandler+0x14>)
 8001f7e:	f000 fa3b 	bl	80023f8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001f82:	4803      	ldr	r0, [pc, #12]	; (8001f90 <ADC_IRQHandler+0x18>)
 8001f84:	f000 fa38 	bl	80023f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20004b54 	.word	0x20004b54
 8001f90:	20004aa4 	.word	0x20004aa4

08001f94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f98:	4802      	ldr	r0, [pc, #8]	; (8001fa4 <TIM4_IRQHandler+0x10>)
 8001f9a:	f002 f90f 	bl	80041bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20004a14 	.word	0x20004a14

08001fa8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fac:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <USART3_IRQHandler+0x10>)
 8001fae:	f003 facb 	bl	8005548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20004a60 	.word	0x20004a60

08001fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc4:	4a14      	ldr	r2, [pc, #80]	; (8002018 <_sbrk+0x5c>)
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <_sbrk+0x60>)
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <_sbrk+0x64>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <_sbrk+0x64>)
 8001fda:	4a12      	ldr	r2, [pc, #72]	; (8002024 <_sbrk+0x68>)
 8001fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d207      	bcs.n	8001ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fec:	f007 f918 	bl	8009220 <__errno>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffa:	e009      	b.n	8002010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <_sbrk+0x64>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002002:	4b07      	ldr	r3, [pc, #28]	; (8002020 <_sbrk+0x64>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	4a05      	ldr	r2, [pc, #20]	; (8002020 <_sbrk+0x64>)
 800200c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800200e:	68fb      	ldr	r3, [r7, #12]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20020000 	.word	0x20020000
 800201c:	00000400 	.word	0x00000400
 8002020:	200000ac 	.word	0x200000ac
 8002024:	200050a0 	.word	0x200050a0

08002028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <SystemInit+0x20>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002032:	4a05      	ldr	r2, [pc, #20]	; (8002048 <SystemInit+0x20>)
 8002034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <Reset_Handler>:
 800204c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002084 <LoopFillZerobss+0x12>
 8002050:	480d      	ldr	r0, [pc, #52]	; (8002088 <LoopFillZerobss+0x16>)
 8002052:	490e      	ldr	r1, [pc, #56]	; (800208c <LoopFillZerobss+0x1a>)
 8002054:	4a0e      	ldr	r2, [pc, #56]	; (8002090 <LoopFillZerobss+0x1e>)
 8002056:	2300      	movs	r3, #0
 8002058:	e002      	b.n	8002060 <LoopCopyDataInit>

0800205a <CopyDataInit>:
 800205a:	58d4      	ldr	r4, [r2, r3]
 800205c:	50c4      	str	r4, [r0, r3]
 800205e:	3304      	adds	r3, #4

08002060 <LoopCopyDataInit>:
 8002060:	18c4      	adds	r4, r0, r3
 8002062:	428c      	cmp	r4, r1
 8002064:	d3f9      	bcc.n	800205a <CopyDataInit>
 8002066:	4a0b      	ldr	r2, [pc, #44]	; (8002094 <LoopFillZerobss+0x22>)
 8002068:	4c0b      	ldr	r4, [pc, #44]	; (8002098 <LoopFillZerobss+0x26>)
 800206a:	2300      	movs	r3, #0
 800206c:	e001      	b.n	8002072 <LoopFillZerobss>

0800206e <FillZerobss>:
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	3204      	adds	r2, #4

08002072 <LoopFillZerobss>:
 8002072:	42a2      	cmp	r2, r4
 8002074:	d3fb      	bcc.n	800206e <FillZerobss>
 8002076:	f7ff ffd7 	bl	8002028 <SystemInit>
 800207a:	f007 f8d7 	bl	800922c <__libc_init_array>
 800207e:	f7ff f80d 	bl	800109c <main>
 8002082:	4770      	bx	lr
 8002084:	20020000 	.word	0x20020000
 8002088:	20000000 	.word	0x20000000
 800208c:	20000078 	.word	0x20000078
 8002090:	0800b620 	.word	0x0800b620
 8002094:	20000078 	.word	0x20000078
 8002098:	2000509c 	.word	0x2000509c

0800209c <CAN1_RX0_IRQHandler>:
 800209c:	e7fe      	b.n	800209c <CAN1_RX0_IRQHandler>
	...

080020a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020a4:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <HAL_Init+0x40>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0d      	ldr	r2, [pc, #52]	; (80020e0 <HAL_Init+0x40>)
 80020aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_Init+0x40>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <HAL_Init+0x40>)
 80020b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020bc:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <HAL_Init+0x40>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a07      	ldr	r2, [pc, #28]	; (80020e0 <HAL_Init+0x40>)
 80020c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c8:	2003      	movs	r0, #3
 80020ca:	f000 fdf9 	bl	8002cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ce:	200f      	movs	r0, #15
 80020d0:	f000 f808 	bl	80020e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020d4:	f7ff fc9e 	bl	8001a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023c00 	.word	0x40023c00

080020e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020ec:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_InitTick+0x54>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <HAL_InitTick+0x58>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	4619      	mov	r1, r3
 80020f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80020fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002102:	4618      	mov	r0, r3
 8002104:	f000 fe11 	bl	8002d2a <HAL_SYSTICK_Config>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e00e      	b.n	8002130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b0f      	cmp	r3, #15
 8002116:	d80a      	bhi.n	800212e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002118:	2200      	movs	r2, #0
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	f04f 30ff 	mov.w	r0, #4294967295
 8002120:	f000 fdd9 	bl	8002cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002124:	4a06      	ldr	r2, [pc, #24]	; (8002140 <HAL_InitTick+0x5c>)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	e000      	b.n	8002130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000000 	.word	0x20000000
 800213c:	20000008 	.word	0x20000008
 8002140:	20000004 	.word	0x20000004

08002144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_IncTick+0x20>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_IncTick+0x24>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4413      	add	r3, r2
 8002154:	4a04      	ldr	r2, [pc, #16]	; (8002168 <HAL_IncTick+0x24>)
 8002156:	6013      	str	r3, [r2, #0]
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000008 	.word	0x20000008
 8002168:	20004c48 	.word	0x20004c48

0800216c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return uwTick;
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <HAL_GetTick+0x14>)
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20004c48 	.word	0x20004c48

08002184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800218c:	f7ff ffee 	bl	800216c <HAL_GetTick>
 8002190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219c:	d005      	beq.n	80021aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800219e:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <HAL_Delay+0x44>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4413      	add	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021aa:	bf00      	nop
 80021ac:	f7ff ffde 	bl	800216c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d8f7      	bhi.n	80021ac <HAL_Delay+0x28>
  {
  }
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000008 	.word	0x20000008

080021cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e033      	b.n	800224a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d109      	bne.n	80021fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff fc3e 	bl	8001a6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f003 0310 	and.w	r3, r3, #16
 8002206:	2b00      	cmp	r3, #0
 8002208:	d118      	bne.n	800223c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002212:	f023 0302 	bic.w	r3, r3, #2
 8002216:	f043 0202 	orr.w	r2, r3, #2
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 fb78 	bl	8002914 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f023 0303 	bic.w	r3, r3, #3
 8002232:	f043 0201 	orr.w	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	641a      	str	r2, [r3, #64]	; 0x40
 800223a:	e001      	b.n	8002240 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002248:	7bfb      	ldrb	r3, [r7, #15]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_ADC_Start+0x1a>
 800226a:	2302      	movs	r3, #2
 800226c:	e0b2      	b.n	80023d4 <HAL_ADC_Start+0x180>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b01      	cmp	r3, #1
 8002282:	d018      	beq.n	80022b6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0201 	orr.w	r2, r2, #1
 8002292:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002294:	4b52      	ldr	r3, [pc, #328]	; (80023e0 <HAL_ADC_Start+0x18c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a52      	ldr	r2, [pc, #328]	; (80023e4 <HAL_ADC_Start+0x190>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	0c9a      	lsrs	r2, r3, #18
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80022a8:	e002      	b.n	80022b0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f9      	bne.n	80022aa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d17a      	bne.n	80023ba <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022cc:	f023 0301 	bic.w	r3, r3, #1
 80022d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d007      	beq.n	80022f6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002302:	d106      	bne.n	8002312 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002308:	f023 0206 	bic.w	r2, r3, #6
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	645a      	str	r2, [r3, #68]	; 0x44
 8002310:	e002      	b.n	8002318 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002320:	4b31      	ldr	r3, [pc, #196]	; (80023e8 <HAL_ADC_Start+0x194>)
 8002322:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800232c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	2b00      	cmp	r3, #0
 8002338:	d12a      	bne.n	8002390 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a2b      	ldr	r2, [pc, #172]	; (80023ec <HAL_ADC_Start+0x198>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d015      	beq.n	8002370 <HAL_ADC_Start+0x11c>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a29      	ldr	r2, [pc, #164]	; (80023f0 <HAL_ADC_Start+0x19c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d105      	bne.n	800235a <HAL_ADC_Start+0x106>
 800234e:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <HAL_ADC_Start+0x194>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 031f 	and.w	r3, r3, #31
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00a      	beq.n	8002370 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a25      	ldr	r2, [pc, #148]	; (80023f4 <HAL_ADC_Start+0x1a0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d136      	bne.n	80023d2 <HAL_ADC_Start+0x17e>
 8002364:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <HAL_ADC_Start+0x194>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0310 	and.w	r3, r3, #16
 800236c:	2b00      	cmp	r3, #0
 800236e:	d130      	bne.n	80023d2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d129      	bne.n	80023d2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	e020      	b.n	80023d2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a15      	ldr	r2, [pc, #84]	; (80023ec <HAL_ADC_Start+0x198>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d11b      	bne.n	80023d2 <HAL_ADC_Start+0x17e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d114      	bne.n	80023d2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	e00b      	b.n	80023d2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f043 0210 	orr.w	r2, r3, #16
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	f043 0201 	orr.w	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	20000000 	.word	0x20000000
 80023e4:	431bde83 	.word	0x431bde83
 80023e8:	40012300 	.word	0x40012300
 80023ec:	40012000 	.word	0x40012000
 80023f0:	40012100 	.word	0x40012100
 80023f4:	40012200 	.word	0x40012200

080023f8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002400:	2300      	movs	r3, #0
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	2300      	movs	r3, #0
 8002406:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b02      	cmp	r3, #2
 8002414:	bf0c      	ite	eq
 8002416:	2301      	moveq	r3, #1
 8002418:	2300      	movne	r3, #0
 800241a:	b2db      	uxtb	r3, r3
 800241c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b20      	cmp	r3, #32
 800242a:	bf0c      	ite	eq
 800242c:	2301      	moveq	r3, #1
 800242e:	2300      	movne	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d049      	beq.n	80024ce <HAL_ADC_IRQHandler+0xd6>
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d046      	beq.n	80024ce <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	2b00      	cmp	r3, #0
 800244a:	d105      	bne.n	8002458 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d12b      	bne.n	80024be <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800246a:	2b00      	cmp	r3, #0
 800246c:	d127      	bne.n	80024be <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002478:	2b00      	cmp	r3, #0
 800247a:	d006      	beq.n	800248a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002486:	2b00      	cmp	r3, #0
 8002488:	d119      	bne.n	80024be <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0220 	bic.w	r2, r2, #32
 8002498:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d105      	bne.n	80024be <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f043 0201 	orr.w	r2, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f8e8 	bl	8002694 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f06f 0212 	mvn.w	r2, #18
 80024cc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b04      	cmp	r3, #4
 80024da:	bf0c      	ite	eq
 80024dc:	2301      	moveq	r3, #1
 80024de:	2300      	movne	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ee:	2b80      	cmp	r3, #128	; 0x80
 80024f0:	bf0c      	ite	eq
 80024f2:	2301      	moveq	r3, #1
 80024f4:	2300      	movne	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d057      	beq.n	80025b0 <HAL_ADC_IRQHandler+0x1b8>
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d054      	beq.n	80025b0 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f003 0310 	and.w	r3, r3, #16
 800250e:	2b00      	cmp	r3, #0
 8002510:	d105      	bne.n	800251e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d139      	bne.n	80025a0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002532:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002536:	2b00      	cmp	r3, #0
 8002538:	d006      	beq.n	8002548 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002544:	2b00      	cmp	r3, #0
 8002546:	d12b      	bne.n	80025a0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002552:	2b00      	cmp	r3, #0
 8002554:	d124      	bne.n	80025a0 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002560:	2b00      	cmp	r3, #0
 8002562:	d11d      	bne.n	80025a0 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002568:	2b00      	cmp	r3, #0
 800256a:	d119      	bne.n	80025a0 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800257a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002590:	2b00      	cmp	r3, #0
 8002592:	d105      	bne.n	80025a0 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	f043 0201 	orr.w	r2, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 fab3 	bl	8002b0c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f06f 020c 	mvn.w	r2, #12
 80025ae:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	bf0c      	ite	eq
 80025be:	2301      	moveq	r3, #1
 80025c0:	2300      	movne	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d0:	2b40      	cmp	r3, #64	; 0x40
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d017      	beq.n	8002612 <HAL_ADC_IRQHandler+0x21a>
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d014      	beq.n	8002612 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d10d      	bne.n	8002612 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f850 	bl	80026a8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f06f 0201 	mvn.w	r2, #1
 8002610:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	2b20      	cmp	r3, #32
 800261e:	bf0c      	ite	eq
 8002620:	2301      	moveq	r3, #1
 8002622:	2300      	movne	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002632:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002636:	bf0c      	ite	eq
 8002638:	2301      	moveq	r3, #1
 800263a:	2300      	movne	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d015      	beq.n	8002672 <HAL_ADC_IRQHandler+0x27a>
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d012      	beq.n	8002672 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002650:	f043 0202 	orr.w	r2, r3, #2
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0220 	mvn.w	r2, #32
 8002660:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f82a 	bl	80026bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f06f 0220 	mvn.w	r2, #32
 8002670:	601a      	str	r2, [r3, #0]
  }
}
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026da:	2300      	movs	r3, #0
 80026dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x1c>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e105      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x228>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b09      	cmp	r3, #9
 80026fa:	d925      	bls.n	8002748 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68d9      	ldr	r1, [r3, #12]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	b29b      	uxth	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	4613      	mov	r3, r2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	4413      	add	r3, r2
 8002710:	3b1e      	subs	r3, #30
 8002712:	2207      	movs	r2, #7
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43da      	mvns	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	400a      	ands	r2, r1
 8002720:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68d9      	ldr	r1, [r3, #12]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	b29b      	uxth	r3, r3
 8002732:	4618      	mov	r0, r3
 8002734:	4603      	mov	r3, r0
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4403      	add	r3, r0
 800273a:	3b1e      	subs	r3, #30
 800273c:	409a      	lsls	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	e022      	b.n	800278e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6919      	ldr	r1, [r3, #16]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	b29b      	uxth	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	4613      	mov	r3, r2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4413      	add	r3, r2
 800275c:	2207      	movs	r2, #7
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43da      	mvns	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	400a      	ands	r2, r1
 800276a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6919      	ldr	r1, [r3, #16]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	4618      	mov	r0, r3
 800277e:	4603      	mov	r3, r0
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4403      	add	r3, r0
 8002784:	409a      	lsls	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b06      	cmp	r3, #6
 8002794:	d824      	bhi.n	80027e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	3b05      	subs	r3, #5
 80027a8:	221f      	movs	r2, #31
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43da      	mvns	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	400a      	ands	r2, r1
 80027b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	4618      	mov	r0, r3
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	3b05      	subs	r3, #5
 80027d2:	fa00 f203 	lsl.w	r2, r0, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	635a      	str	r2, [r3, #52]	; 0x34
 80027de:	e04c      	b.n	800287a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b0c      	cmp	r3, #12
 80027e6:	d824      	bhi.n	8002832 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	3b23      	subs	r3, #35	; 0x23
 80027fa:	221f      	movs	r2, #31
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43da      	mvns	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	400a      	ands	r2, r1
 8002808:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	b29b      	uxth	r3, r3
 8002816:	4618      	mov	r0, r3
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	3b23      	subs	r3, #35	; 0x23
 8002824:	fa00 f203 	lsl.w	r2, r0, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	631a      	str	r2, [r3, #48]	; 0x30
 8002830:	e023      	b.n	800287a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	3b41      	subs	r3, #65	; 0x41
 8002844:	221f      	movs	r2, #31
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43da      	mvns	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	400a      	ands	r2, r1
 8002852:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	b29b      	uxth	r3, r3
 8002860:	4618      	mov	r0, r3
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	3b41      	subs	r3, #65	; 0x41
 800286e:	fa00 f203 	lsl.w	r2, r0, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800287a:	4b22      	ldr	r3, [pc, #136]	; (8002904 <HAL_ADC_ConfigChannel+0x234>)
 800287c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a21      	ldr	r2, [pc, #132]	; (8002908 <HAL_ADC_ConfigChannel+0x238>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d109      	bne.n	800289c <HAL_ADC_ConfigChannel+0x1cc>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b12      	cmp	r3, #18
 800288e:	d105      	bne.n	800289c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a19      	ldr	r2, [pc, #100]	; (8002908 <HAL_ADC_ConfigChannel+0x238>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d123      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x21e>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b10      	cmp	r3, #16
 80028ac:	d003      	beq.n	80028b6 <HAL_ADC_ConfigChannel+0x1e6>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b11      	cmp	r3, #17
 80028b4:	d11b      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b10      	cmp	r3, #16
 80028c8:	d111      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_ADC_ConfigChannel+0x23c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a10      	ldr	r2, [pc, #64]	; (8002910 <HAL_ADC_ConfigChannel+0x240>)
 80028d0:	fba2 2303 	umull	r2, r3, r2, r3
 80028d4:	0c9a      	lsrs	r2, r3, #18
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028e0:	e002      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	3b01      	subs	r3, #1
 80028e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f9      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	40012300 	.word	0x40012300
 8002908:	40012000 	.word	0x40012000
 800290c:	20000000 	.word	0x20000000
 8002910:	431bde83 	.word	0x431bde83

08002914 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800291c:	4b79      	ldr	r3, [pc, #484]	; (8002b04 <ADC_Init+0x1f0>)
 800291e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	431a      	orrs	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002948:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	021a      	lsls	r2, r3, #8
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800296c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800298e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6899      	ldr	r1, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	4a58      	ldr	r2, [pc, #352]	; (8002b08 <ADC_Init+0x1f4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d022      	beq.n	80029f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6899      	ldr	r1, [r3, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6899      	ldr	r1, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	e00f      	b.n	8002a12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0202 	bic.w	r2, r2, #2
 8002a20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6899      	ldr	r1, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	7e1b      	ldrb	r3, [r3, #24]
 8002a2c:	005a      	lsls	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01b      	beq.n	8002a78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6859      	ldr	r1, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	035a      	lsls	r2, r3, #13
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	e007      	b.n	8002a88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	051a      	lsls	r2, r3, #20
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002abc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6899      	ldr	r1, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002aca:	025a      	lsls	r2, r3, #9
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6899      	ldr	r1, [r3, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	029a      	lsls	r2, r3, #10
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	609a      	str	r2, [r3, #8]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	40012300 	.word	0x40012300
 8002b08:	0f000001 	.word	0x0f000001

08002b0c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b30:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <__NVIC_SetPriorityGrouping+0x44>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b52:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <__NVIC_SetPriorityGrouping+0x44>)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	60d3      	str	r3, [r2, #12]
}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b6c:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <__NVIC_GetPriorityGrouping+0x18>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	0a1b      	lsrs	r3, r3, #8
 8002b72:	f003 0307 	and.w	r3, r3, #7
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000ed00 	.word	0xe000ed00

08002b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	db0b      	blt.n	8002bae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	f003 021f 	and.w	r2, r3, #31
 8002b9c:	4907      	ldr	r1, [pc, #28]	; (8002bbc <__NVIC_EnableIRQ+0x38>)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8002baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	e000e100 	.word	0xe000e100

08002bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	6039      	str	r1, [r7, #0]
 8002bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	db0a      	blt.n	8002bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	490c      	ldr	r1, [pc, #48]	; (8002c0c <__NVIC_SetPriority+0x4c>)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	0112      	lsls	r2, r2, #4
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	440b      	add	r3, r1
 8002be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002be8:	e00a      	b.n	8002c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4908      	ldr	r1, [pc, #32]	; (8002c10 <__NVIC_SetPriority+0x50>)
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	3b04      	subs	r3, #4
 8002bf8:	0112      	lsls	r2, r2, #4
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	761a      	strb	r2, [r3, #24]
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	e000e100 	.word	0xe000e100
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b089      	sub	sp, #36	; 0x24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f1c3 0307 	rsb	r3, r3, #7
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	bf28      	it	cs
 8002c32:	2304      	movcs	r3, #4
 8002c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	2b06      	cmp	r3, #6
 8002c3c:	d902      	bls.n	8002c44 <NVIC_EncodePriority+0x30>
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3b03      	subs	r3, #3
 8002c42:	e000      	b.n	8002c46 <NVIC_EncodePriority+0x32>
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c48:	f04f 32ff 	mov.w	r2, #4294967295
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43da      	mvns	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	401a      	ands	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	43d9      	mvns	r1, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c6c:	4313      	orrs	r3, r2
         );
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3724      	adds	r7, #36	; 0x24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
	...

08002c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c8c:	d301      	bcc.n	8002c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e00f      	b.n	8002cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c92:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <SysTick_Config+0x40>)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c9a:	210f      	movs	r1, #15
 8002c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca0:	f7ff ff8e 	bl	8002bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ca4:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <SysTick_Config+0x40>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002caa:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <SysTick_Config+0x40>)
 8002cac:	2207      	movs	r2, #7
 8002cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	e000e010 	.word	0xe000e010

08002cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff ff29 	bl	8002b20 <__NVIC_SetPriorityGrouping>
}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b086      	sub	sp, #24
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	4603      	mov	r3, r0
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
 8002ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ce8:	f7ff ff3e 	bl	8002b68 <__NVIC_GetPriorityGrouping>
 8002cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	6978      	ldr	r0, [r7, #20]
 8002cf4:	f7ff ff8e 	bl	8002c14 <NVIC_EncodePriority>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cfe:	4611      	mov	r1, r2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ff5d 	bl	8002bc0 <__NVIC_SetPriority>
}
 8002d06:	bf00      	nop
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	4603      	mov	r3, r0
 8002d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ff31 	bl	8002b84 <__NVIC_EnableIRQ>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff ffa2 	bl	8002c7c <SysTick_Config>
 8002d38:	4603      	mov	r3, r0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d50:	f7ff fa0c 	bl	800216c <HAL_GetTick>
 8002d54:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d008      	beq.n	8002d74 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2280      	movs	r2, #128	; 0x80
 8002d66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e052      	b.n	8002e1a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0216 	bic.w	r2, r2, #22
 8002d82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d92:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d103      	bne.n	8002da4 <HAL_DMA_Abort+0x62>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d007      	beq.n	8002db4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0208 	bic.w	r2, r2, #8
 8002db2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0201 	bic.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dc4:	e013      	b.n	8002dee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dc6:	f7ff f9d1 	bl	800216c <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b05      	cmp	r3, #5
 8002dd2:	d90c      	bls.n	8002dee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2203      	movs	r2, #3
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e015      	b.n	8002e1a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e4      	bne.n	8002dc6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e00:	223f      	movs	r2, #63	; 0x3f
 8002e02:	409a      	lsls	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d004      	beq.n	8002e40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2280      	movs	r2, #128	; 0x80
 8002e3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e00c      	b.n	8002e5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2205      	movs	r2, #5
 8002e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
	...

08002e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b089      	sub	sp, #36	; 0x24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61fb      	str	r3, [r7, #28]
 8002e82:	e16b      	b.n	800315c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e84:	2201      	movs	r2, #1
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	4013      	ands	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	f040 815a 	bne.w	8003156 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d005      	beq.n	8002eba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d130      	bne.n	8002f1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	2203      	movs	r2, #3
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	091b      	lsrs	r3, r3, #4
 8002f06:	f003 0201 	and.w	r2, r3, #1
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	2b03      	cmp	r3, #3
 8002f26:	d017      	beq.n	8002f58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	2203      	movs	r2, #3
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d123      	bne.n	8002fac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	08da      	lsrs	r2, r3, #3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3208      	adds	r2, #8
 8002f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	220f      	movs	r2, #15
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	08da      	lsrs	r2, r3, #3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3208      	adds	r2, #8
 8002fa6:	69b9      	ldr	r1, [r7, #24]
 8002fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 0203 	and.w	r2, r3, #3
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 80b4 	beq.w	8003156 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	4b60      	ldr	r3, [pc, #384]	; (8003174 <HAL_GPIO_Init+0x30c>)
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	4a5f      	ldr	r2, [pc, #380]	; (8003174 <HAL_GPIO_Init+0x30c>)
 8002ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ffe:	4b5d      	ldr	r3, [pc, #372]	; (8003174 <HAL_GPIO_Init+0x30c>)
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800300a:	4a5b      	ldr	r2, [pc, #364]	; (8003178 <HAL_GPIO_Init+0x310>)
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	089b      	lsrs	r3, r3, #2
 8003010:	3302      	adds	r3, #2
 8003012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	220f      	movs	r2, #15
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43db      	mvns	r3, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a52      	ldr	r2, [pc, #328]	; (800317c <HAL_GPIO_Init+0x314>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d02b      	beq.n	800308e <HAL_GPIO_Init+0x226>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a51      	ldr	r2, [pc, #324]	; (8003180 <HAL_GPIO_Init+0x318>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d025      	beq.n	800308a <HAL_GPIO_Init+0x222>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a50      	ldr	r2, [pc, #320]	; (8003184 <HAL_GPIO_Init+0x31c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d01f      	beq.n	8003086 <HAL_GPIO_Init+0x21e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a4f      	ldr	r2, [pc, #316]	; (8003188 <HAL_GPIO_Init+0x320>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d019      	beq.n	8003082 <HAL_GPIO_Init+0x21a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a4e      	ldr	r2, [pc, #312]	; (800318c <HAL_GPIO_Init+0x324>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d013      	beq.n	800307e <HAL_GPIO_Init+0x216>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a4d      	ldr	r2, [pc, #308]	; (8003190 <HAL_GPIO_Init+0x328>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00d      	beq.n	800307a <HAL_GPIO_Init+0x212>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a4c      	ldr	r2, [pc, #304]	; (8003194 <HAL_GPIO_Init+0x32c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d007      	beq.n	8003076 <HAL_GPIO_Init+0x20e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a4b      	ldr	r2, [pc, #300]	; (8003198 <HAL_GPIO_Init+0x330>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d101      	bne.n	8003072 <HAL_GPIO_Init+0x20a>
 800306e:	2307      	movs	r3, #7
 8003070:	e00e      	b.n	8003090 <HAL_GPIO_Init+0x228>
 8003072:	2308      	movs	r3, #8
 8003074:	e00c      	b.n	8003090 <HAL_GPIO_Init+0x228>
 8003076:	2306      	movs	r3, #6
 8003078:	e00a      	b.n	8003090 <HAL_GPIO_Init+0x228>
 800307a:	2305      	movs	r3, #5
 800307c:	e008      	b.n	8003090 <HAL_GPIO_Init+0x228>
 800307e:	2304      	movs	r3, #4
 8003080:	e006      	b.n	8003090 <HAL_GPIO_Init+0x228>
 8003082:	2303      	movs	r3, #3
 8003084:	e004      	b.n	8003090 <HAL_GPIO_Init+0x228>
 8003086:	2302      	movs	r3, #2
 8003088:	e002      	b.n	8003090 <HAL_GPIO_Init+0x228>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <HAL_GPIO_Init+0x228>
 800308e:	2300      	movs	r3, #0
 8003090:	69fa      	ldr	r2, [r7, #28]
 8003092:	f002 0203 	and.w	r2, r2, #3
 8003096:	0092      	lsls	r2, r2, #2
 8003098:	4093      	lsls	r3, r2
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4313      	orrs	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030a0:	4935      	ldr	r1, [pc, #212]	; (8003178 <HAL_GPIO_Init+0x310>)
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	089b      	lsrs	r3, r3, #2
 80030a6:	3302      	adds	r3, #2
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030ae:	4b3b      	ldr	r3, [pc, #236]	; (800319c <HAL_GPIO_Init+0x334>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	43db      	mvns	r3, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4013      	ands	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030d2:	4a32      	ldr	r2, [pc, #200]	; (800319c <HAL_GPIO_Init+0x334>)
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030d8:	4b30      	ldr	r3, [pc, #192]	; (800319c <HAL_GPIO_Init+0x334>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030fc:	4a27      	ldr	r2, [pc, #156]	; (800319c <HAL_GPIO_Init+0x334>)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003102:	4b26      	ldr	r3, [pc, #152]	; (800319c <HAL_GPIO_Init+0x334>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	43db      	mvns	r3, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4013      	ands	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003126:	4a1d      	ldr	r2, [pc, #116]	; (800319c <HAL_GPIO_Init+0x334>)
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800312c:	4b1b      	ldr	r3, [pc, #108]	; (800319c <HAL_GPIO_Init+0x334>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	43db      	mvns	r3, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003150:	4a12      	ldr	r2, [pc, #72]	; (800319c <HAL_GPIO_Init+0x334>)
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	3301      	adds	r3, #1
 800315a:	61fb      	str	r3, [r7, #28]
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	2b0f      	cmp	r3, #15
 8003160:	f67f ae90 	bls.w	8002e84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop
 8003168:	3724      	adds	r7, #36	; 0x24
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800
 8003178:	40013800 	.word	0x40013800
 800317c:	40020000 	.word	0x40020000
 8003180:	40020400 	.word	0x40020400
 8003184:	40020800 	.word	0x40020800
 8003188:	40020c00 	.word	0x40020c00
 800318c:	40021000 	.word	0x40021000
 8003190:	40021400 	.word	0x40021400
 8003194:	40021800 	.word	0x40021800
 8003198:	40021c00 	.word	0x40021c00
 800319c:	40013c00 	.word	0x40013c00

080031a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	807b      	strh	r3, [r7, #2]
 80031ac:	4613      	mov	r3, r2
 80031ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031b0:	787b      	ldrb	r3, [r7, #1]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031b6:	887a      	ldrh	r2, [r7, #2]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031bc:	e003      	b.n	80031c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031be:	887b      	ldrh	r3, [r7, #2]
 80031c0:	041a      	lsls	r2, r3, #16
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	619a      	str	r2, [r3, #24]
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80031da:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <HAL_PWR_EnableBkUpAccess+0x20>)
 80031dc:	2201      	movs	r2, #1
 80031de:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80031e0:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <HAL_PWR_EnableBkUpAccess+0x24>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80031e6:	687b      	ldr	r3, [r7, #4]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	420e0020 	.word	0x420e0020
 80031f8:	40007000 	.word	0x40007000

080031fc <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <HAL_PWR_DisableBkUpAccess+0x20>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8003208:	4b05      	ldr	r3, [pc, #20]	; (8003220 <HAL_PWR_DisableBkUpAccess+0x24>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800320e:	687b      	ldr	r3, [r7, #4]
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	420e0020 	.word	0x420e0020
 8003220:	40007000 	.word	0x40007000

08003224 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e264      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d075      	beq.n	800332e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003242:	4ba3      	ldr	r3, [pc, #652]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	2b04      	cmp	r3, #4
 800324c:	d00c      	beq.n	8003268 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800324e:	4ba0      	ldr	r3, [pc, #640]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003256:	2b08      	cmp	r3, #8
 8003258:	d112      	bne.n	8003280 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800325a:	4b9d      	ldr	r3, [pc, #628]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003266:	d10b      	bne.n	8003280 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003268:	4b99      	ldr	r3, [pc, #612]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d05b      	beq.n	800332c <HAL_RCC_OscConfig+0x108>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d157      	bne.n	800332c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e23f      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003288:	d106      	bne.n	8003298 <HAL_RCC_OscConfig+0x74>
 800328a:	4b91      	ldr	r3, [pc, #580]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a90      	ldr	r2, [pc, #576]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	e01d      	b.n	80032d4 <HAL_RCC_OscConfig+0xb0>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032a0:	d10c      	bne.n	80032bc <HAL_RCC_OscConfig+0x98>
 80032a2:	4b8b      	ldr	r3, [pc, #556]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a8a      	ldr	r2, [pc, #552]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80032a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	4b88      	ldr	r3, [pc, #544]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a87      	ldr	r2, [pc, #540]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80032b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	e00b      	b.n	80032d4 <HAL_RCC_OscConfig+0xb0>
 80032bc:	4b84      	ldr	r3, [pc, #528]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a83      	ldr	r2, [pc, #524]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80032c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	4b81      	ldr	r3, [pc, #516]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a80      	ldr	r2, [pc, #512]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80032ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d013      	beq.n	8003304 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032dc:	f7fe ff46 	bl	800216c <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032e4:	f7fe ff42 	bl	800216c <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b64      	cmp	r3, #100	; 0x64
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e204      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f6:	4b76      	ldr	r3, [pc, #472]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCC_OscConfig+0xc0>
 8003302:	e014      	b.n	800332e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003304:	f7fe ff32 	bl	800216c <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800330c:	f7fe ff2e 	bl	800216c <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b64      	cmp	r3, #100	; 0x64
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e1f0      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331e:	4b6c      	ldr	r3, [pc, #432]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0xe8>
 800332a:	e000      	b.n	800332e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d063      	beq.n	8003402 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800333a:	4b65      	ldr	r3, [pc, #404]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00b      	beq.n	800335e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003346:	4b62      	ldr	r3, [pc, #392]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800334e:	2b08      	cmp	r3, #8
 8003350:	d11c      	bne.n	800338c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003352:	4b5f      	ldr	r3, [pc, #380]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d116      	bne.n	800338c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800335e:	4b5c      	ldr	r3, [pc, #368]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d005      	beq.n	8003376 <HAL_RCC_OscConfig+0x152>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d001      	beq.n	8003376 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e1c4      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003376:	4b56      	ldr	r3, [pc, #344]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	4952      	ldr	r1, [pc, #328]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003386:	4313      	orrs	r3, r2
 8003388:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800338a:	e03a      	b.n	8003402 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d020      	beq.n	80033d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003394:	4b4f      	ldr	r3, [pc, #316]	; (80034d4 <HAL_RCC_OscConfig+0x2b0>)
 8003396:	2201      	movs	r2, #1
 8003398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339a:	f7fe fee7 	bl	800216c <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033a2:	f7fe fee3 	bl	800216c <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e1a5      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b4:	4b46      	ldr	r3, [pc, #280]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f0      	beq.n	80033a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c0:	4b43      	ldr	r3, [pc, #268]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4940      	ldr	r1, [pc, #256]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	600b      	str	r3, [r1, #0]
 80033d4:	e015      	b.n	8003402 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033d6:	4b3f      	ldr	r3, [pc, #252]	; (80034d4 <HAL_RCC_OscConfig+0x2b0>)
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fe fec6 	bl	800216c <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033e4:	f7fe fec2 	bl	800216c <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e184      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f6:	4b36      	ldr	r3, [pc, #216]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d030      	beq.n	8003470 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d016      	beq.n	8003444 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003416:	4b30      	ldr	r3, [pc, #192]	; (80034d8 <HAL_RCC_OscConfig+0x2b4>)
 8003418:	2201      	movs	r2, #1
 800341a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341c:	f7fe fea6 	bl	800216c <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003424:	f7fe fea2 	bl	800216c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e164      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003436:	4b26      	ldr	r3, [pc, #152]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0x200>
 8003442:	e015      	b.n	8003470 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003444:	4b24      	ldr	r3, [pc, #144]	; (80034d8 <HAL_RCC_OscConfig+0x2b4>)
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344a:	f7fe fe8f 	bl	800216c <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003452:	f7fe fe8b 	bl	800216c <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e14d      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003464:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1f0      	bne.n	8003452 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80a0 	beq.w	80035be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800347e:	2300      	movs	r3, #0
 8003480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003482:	4b13      	ldr	r3, [pc, #76]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10f      	bne.n	80034ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	4a0e      	ldr	r2, [pc, #56]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349c:	6413      	str	r3, [r2, #64]	; 0x40
 800349e:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a6:	60bb      	str	r3, [r7, #8]
 80034a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034aa:	2301      	movs	r3, #1
 80034ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ae:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <HAL_RCC_OscConfig+0x2b8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d121      	bne.n	80034fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ba:	4b08      	ldr	r3, [pc, #32]	; (80034dc <HAL_RCC_OscConfig+0x2b8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a07      	ldr	r2, [pc, #28]	; (80034dc <HAL_RCC_OscConfig+0x2b8>)
 80034c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034c6:	f7fe fe51 	bl	800216c <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034cc:	e011      	b.n	80034f2 <HAL_RCC_OscConfig+0x2ce>
 80034ce:	bf00      	nop
 80034d0:	40023800 	.word	0x40023800
 80034d4:	42470000 	.word	0x42470000
 80034d8:	42470e80 	.word	0x42470e80
 80034dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e0:	f7fe fe44 	bl	800216c <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e106      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f2:	4b85      	ldr	r3, [pc, #532]	; (8003708 <HAL_RCC_OscConfig+0x4e4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d106      	bne.n	8003514 <HAL_RCC_OscConfig+0x2f0>
 8003506:	4b81      	ldr	r3, [pc, #516]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	4a80      	ldr	r2, [pc, #512]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	6713      	str	r3, [r2, #112]	; 0x70
 8003512:	e01c      	b.n	800354e <HAL_RCC_OscConfig+0x32a>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b05      	cmp	r3, #5
 800351a:	d10c      	bne.n	8003536 <HAL_RCC_OscConfig+0x312>
 800351c:	4b7b      	ldr	r3, [pc, #492]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003520:	4a7a      	ldr	r2, [pc, #488]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 8003522:	f043 0304 	orr.w	r3, r3, #4
 8003526:	6713      	str	r3, [r2, #112]	; 0x70
 8003528:	4b78      	ldr	r3, [pc, #480]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 800352a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352c:	4a77      	ldr	r2, [pc, #476]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	6713      	str	r3, [r2, #112]	; 0x70
 8003534:	e00b      	b.n	800354e <HAL_RCC_OscConfig+0x32a>
 8003536:	4b75      	ldr	r3, [pc, #468]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353a:	4a74      	ldr	r2, [pc, #464]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 800353c:	f023 0301 	bic.w	r3, r3, #1
 8003540:	6713      	str	r3, [r2, #112]	; 0x70
 8003542:	4b72      	ldr	r3, [pc, #456]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003546:	4a71      	ldr	r2, [pc, #452]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 8003548:	f023 0304 	bic.w	r3, r3, #4
 800354c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d015      	beq.n	8003582 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003556:	f7fe fe09 	bl	800216c <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355c:	e00a      	b.n	8003574 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f7fe fe05 	bl	800216c <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	f241 3288 	movw	r2, #5000	; 0x1388
 800356c:	4293      	cmp	r3, r2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e0c5      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003574:	4b65      	ldr	r3, [pc, #404]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 8003576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0ee      	beq.n	800355e <HAL_RCC_OscConfig+0x33a>
 8003580:	e014      	b.n	80035ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003582:	f7fe fdf3 	bl	800216c <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003588:	e00a      	b.n	80035a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800358a:	f7fe fdef 	bl	800216c <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	f241 3288 	movw	r2, #5000	; 0x1388
 8003598:	4293      	cmp	r3, r2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e0af      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a0:	4b5a      	ldr	r3, [pc, #360]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1ee      	bne.n	800358a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ac:	7dfb      	ldrb	r3, [r7, #23]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d105      	bne.n	80035be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b2:	4b56      	ldr	r3, [pc, #344]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	4a55      	ldr	r2, [pc, #340]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 80035b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 809b 	beq.w	80036fe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035c8:	4b50      	ldr	r3, [pc, #320]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 030c 	and.w	r3, r3, #12
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d05c      	beq.n	800368e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d141      	bne.n	8003660 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035dc:	4b4c      	ldr	r3, [pc, #304]	; (8003710 <HAL_RCC_OscConfig+0x4ec>)
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e2:	f7fe fdc3 	bl	800216c <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ea:	f7fe fdbf 	bl	800216c <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e081      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fc:	4b43      	ldr	r3, [pc, #268]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f0      	bne.n	80035ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69da      	ldr	r2, [r3, #28]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	431a      	orrs	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	019b      	lsls	r3, r3, #6
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361e:	085b      	lsrs	r3, r3, #1
 8003620:	3b01      	subs	r3, #1
 8003622:	041b      	lsls	r3, r3, #16
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	061b      	lsls	r3, r3, #24
 800362c:	4937      	ldr	r1, [pc, #220]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 800362e:	4313      	orrs	r3, r2
 8003630:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003632:	4b37      	ldr	r3, [pc, #220]	; (8003710 <HAL_RCC_OscConfig+0x4ec>)
 8003634:	2201      	movs	r2, #1
 8003636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7fe fd98 	bl	800216c <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003640:	f7fe fd94 	bl	800216c <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e056      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003652:	4b2e      	ldr	r3, [pc, #184]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0x41c>
 800365e:	e04e      	b.n	80036fe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003660:	4b2b      	ldr	r3, [pc, #172]	; (8003710 <HAL_RCC_OscConfig+0x4ec>)
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7fe fd81 	bl	800216c <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366e:	f7fe fd7d 	bl	800216c <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e03f      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003680:	4b22      	ldr	r3, [pc, #136]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1f0      	bne.n	800366e <HAL_RCC_OscConfig+0x44a>
 800368c:	e037      	b.n	80036fe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e032      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800369a:	4b1c      	ldr	r3, [pc, #112]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d028      	beq.n	80036fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d121      	bne.n	80036fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d11a      	bne.n	80036fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036ca:	4013      	ands	r3, r2
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036d0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d111      	bne.n	80036fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e0:	085b      	lsrs	r3, r3, #1
 80036e2:	3b01      	subs	r3, #1
 80036e4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d107      	bne.n	80036fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d001      	beq.n	80036fe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40007000 	.word	0x40007000
 800370c:	40023800 	.word	0x40023800
 8003710:	42470060 	.word	0x42470060

08003714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0cc      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003728:	4b68      	ldr	r3, [pc, #416]	; (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d90c      	bls.n	8003750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b65      	ldr	r3, [pc, #404]	; (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800373e:	4b63      	ldr	r3, [pc, #396]	; (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d001      	beq.n	8003750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0b8      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d020      	beq.n	800379e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003768:	4b59      	ldr	r3, [pc, #356]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4a58      	ldr	r2, [pc, #352]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003772:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003780:	4b53      	ldr	r3, [pc, #332]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	4a52      	ldr	r2, [pc, #328]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800378a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800378c:	4b50      	ldr	r3, [pc, #320]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	494d      	ldr	r1, [pc, #308]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	4313      	orrs	r3, r2
 800379c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d044      	beq.n	8003834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d107      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b2:	4b47      	ldr	r3, [pc, #284]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d119      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e07f      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d003      	beq.n	80037d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d107      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d2:	4b3f      	ldr	r3, [pc, #252]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e06f      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e2:	4b3b      	ldr	r3, [pc, #236]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e067      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037f2:	4b37      	ldr	r3, [pc, #220]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f023 0203 	bic.w	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4934      	ldr	r1, [pc, #208]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003800:	4313      	orrs	r3, r2
 8003802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003804:	f7fe fcb2 	bl	800216c <HAL_GetTick>
 8003808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	e00a      	b.n	8003822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800380c:	f7fe fcae 	bl	800216c <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	; 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e04f      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003822:	4b2b      	ldr	r3, [pc, #172]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 020c 	and.w	r2, r3, #12
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	429a      	cmp	r2, r3
 8003832:	d1eb      	bne.n	800380c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003834:	4b25      	ldr	r3, [pc, #148]	; (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d20c      	bcs.n	800385c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b22      	ldr	r3, [pc, #136]	; (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384a:	4b20      	ldr	r3, [pc, #128]	; (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e032      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003868:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4916      	ldr	r1, [pc, #88]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	4313      	orrs	r3, r2
 8003878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d009      	beq.n	800389a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003886:	4b12      	ldr	r3, [pc, #72]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	490e      	ldr	r1, [pc, #56]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	4313      	orrs	r3, r2
 8003898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800389a:	f000 f821 	bl	80038e0 <HAL_RCC_GetSysClockFreq>
 800389e:	4602      	mov	r2, r0
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	490a      	ldr	r1, [pc, #40]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 80038ac:	5ccb      	ldrb	r3, [r1, r3]
 80038ae:	fa22 f303 	lsr.w	r3, r2, r3
 80038b2:	4a09      	ldr	r2, [pc, #36]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80038b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038b6:	4b09      	ldr	r3, [pc, #36]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe fc12 	bl	80020e4 <HAL_InitTick>

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40023c00 	.word	0x40023c00
 80038d0:	40023800 	.word	0x40023800
 80038d4:	0800ab1c 	.word	0x0800ab1c
 80038d8:	20000000 	.word	0x20000000
 80038dc:	20000004 	.word	0x20000004

080038e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e0:	b5b0      	push	{r4, r5, r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038e6:	2100      	movs	r1, #0
 80038e8:	6079      	str	r1, [r7, #4]
 80038ea:	2100      	movs	r1, #0
 80038ec:	60f9      	str	r1, [r7, #12]
 80038ee:	2100      	movs	r1, #0
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80038f2:	2100      	movs	r1, #0
 80038f4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038f6:	4952      	ldr	r1, [pc, #328]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x160>)
 80038f8:	6889      	ldr	r1, [r1, #8]
 80038fa:	f001 010c 	and.w	r1, r1, #12
 80038fe:	2908      	cmp	r1, #8
 8003900:	d00d      	beq.n	800391e <HAL_RCC_GetSysClockFreq+0x3e>
 8003902:	2908      	cmp	r1, #8
 8003904:	f200 8094 	bhi.w	8003a30 <HAL_RCC_GetSysClockFreq+0x150>
 8003908:	2900      	cmp	r1, #0
 800390a:	d002      	beq.n	8003912 <HAL_RCC_GetSysClockFreq+0x32>
 800390c:	2904      	cmp	r1, #4
 800390e:	d003      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x38>
 8003910:	e08e      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003912:	4b4c      	ldr	r3, [pc, #304]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x164>)
 8003914:	60bb      	str	r3, [r7, #8]
       break;
 8003916:	e08e      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003918:	4b4b      	ldr	r3, [pc, #300]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x168>)
 800391a:	60bb      	str	r3, [r7, #8]
      break;
 800391c:	e08b      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800391e:	4948      	ldr	r1, [pc, #288]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003920:	6849      	ldr	r1, [r1, #4]
 8003922:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003926:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003928:	4945      	ldr	r1, [pc, #276]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x160>)
 800392a:	6849      	ldr	r1, [r1, #4]
 800392c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003930:	2900      	cmp	r1, #0
 8003932:	d024      	beq.n	800397e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003934:	4942      	ldr	r1, [pc, #264]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003936:	6849      	ldr	r1, [r1, #4]
 8003938:	0989      	lsrs	r1, r1, #6
 800393a:	4608      	mov	r0, r1
 800393c:	f04f 0100 	mov.w	r1, #0
 8003940:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003944:	f04f 0500 	mov.w	r5, #0
 8003948:	ea00 0204 	and.w	r2, r0, r4
 800394c:	ea01 0305 	and.w	r3, r1, r5
 8003950:	493d      	ldr	r1, [pc, #244]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x168>)
 8003952:	fb01 f003 	mul.w	r0, r1, r3
 8003956:	2100      	movs	r1, #0
 8003958:	fb01 f102 	mul.w	r1, r1, r2
 800395c:	1844      	adds	r4, r0, r1
 800395e:	493a      	ldr	r1, [pc, #232]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x168>)
 8003960:	fba2 0101 	umull	r0, r1, r2, r1
 8003964:	1863      	adds	r3, r4, r1
 8003966:	4619      	mov	r1, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	461a      	mov	r2, r3
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	f7fd f90a 	bl	8000b88 <__aeabi_uldivmod>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4613      	mov	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	e04a      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800397e:	4b30      	ldr	r3, [pc, #192]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	099b      	lsrs	r3, r3, #6
 8003984:	461a      	mov	r2, r3
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800398e:	f04f 0100 	mov.w	r1, #0
 8003992:	ea02 0400 	and.w	r4, r2, r0
 8003996:	ea03 0501 	and.w	r5, r3, r1
 800399a:	4620      	mov	r0, r4
 800399c:	4629      	mov	r1, r5
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	014b      	lsls	r3, r1, #5
 80039a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039ac:	0142      	lsls	r2, r0, #5
 80039ae:	4610      	mov	r0, r2
 80039b0:	4619      	mov	r1, r3
 80039b2:	1b00      	subs	r0, r0, r4
 80039b4:	eb61 0105 	sbc.w	r1, r1, r5
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	018b      	lsls	r3, r1, #6
 80039c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039c6:	0182      	lsls	r2, r0, #6
 80039c8:	1a12      	subs	r2, r2, r0
 80039ca:	eb63 0301 	sbc.w	r3, r3, r1
 80039ce:	f04f 0000 	mov.w	r0, #0
 80039d2:	f04f 0100 	mov.w	r1, #0
 80039d6:	00d9      	lsls	r1, r3, #3
 80039d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039dc:	00d0      	lsls	r0, r2, #3
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	1912      	adds	r2, r2, r4
 80039e4:	eb45 0303 	adc.w	r3, r5, r3
 80039e8:	f04f 0000 	mov.w	r0, #0
 80039ec:	f04f 0100 	mov.w	r1, #0
 80039f0:	0299      	lsls	r1, r3, #10
 80039f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80039f6:	0290      	lsls	r0, r2, #10
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4610      	mov	r0, r2
 80039fe:	4619      	mov	r1, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	461a      	mov	r2, r3
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	f7fd f8be 	bl	8000b88 <__aeabi_uldivmod>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4613      	mov	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a14:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	0c1b      	lsrs	r3, r3, #16
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	3301      	adds	r3, #1
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2c:	60bb      	str	r3, [r7, #8]
      break;
 8003a2e:	e002      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a30:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x164>)
 8003a32:	60bb      	str	r3, [r7, #8]
      break;
 8003a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a36:	68bb      	ldr	r3, [r7, #8]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a40:	40023800 	.word	0x40023800
 8003a44:	00f42400 	.word	0x00f42400
 8003a48:	017d7840 	.word	0x017d7840

08003a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a50:	4b03      	ldr	r3, [pc, #12]	; (8003a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a52:	681b      	ldr	r3, [r3, #0]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	20000000 	.word	0x20000000

08003a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a68:	f7ff fff0 	bl	8003a4c <HAL_RCC_GetHCLKFreq>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	0a9b      	lsrs	r3, r3, #10
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	4903      	ldr	r1, [pc, #12]	; (8003a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a7a:	5ccb      	ldrb	r3, [r1, r3]
 8003a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40023800 	.word	0x40023800
 8003a88:	0800ab2c 	.word	0x0800ab2c

08003a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a90:	f7ff ffdc 	bl	8003a4c <HAL_RCC_GetHCLKFreq>
 8003a94:	4602      	mov	r2, r0
 8003a96:	4b05      	ldr	r3, [pc, #20]	; (8003aac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	0b5b      	lsrs	r3, r3, #13
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	4903      	ldr	r1, [pc, #12]	; (8003ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aa2:	5ccb      	ldrb	r3, [r1, r3]
 8003aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	0800ab2c 	.word	0x0800ab2c

08003ab4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e041      	b.n	8003b4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fe f84a 	bl	8001b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3304      	adds	r3, #4
 8003af0:	4619      	mov	r1, r3
 8003af2:	4610      	mov	r0, r2
 8003af4:	f000 fefc 	bl	80048f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e041      	b.n	8003be8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d106      	bne.n	8003b7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7fe f907 	bl	8001d8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2202      	movs	r2, #2
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4610      	mov	r0, r2
 8003b92:	f000 fead 	bl	80048f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d109      	bne.n	8003c14 <HAL_TIM_PWM_Start+0x24>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	bf14      	ite	ne
 8003c0c:	2301      	movne	r3, #1
 8003c0e:	2300      	moveq	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	e022      	b.n	8003c5a <HAL_TIM_PWM_Start+0x6a>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d109      	bne.n	8003c2e <HAL_TIM_PWM_Start+0x3e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	bf14      	ite	ne
 8003c26:	2301      	movne	r3, #1
 8003c28:	2300      	moveq	r3, #0
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	e015      	b.n	8003c5a <HAL_TIM_PWM_Start+0x6a>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d109      	bne.n	8003c48 <HAL_TIM_PWM_Start+0x58>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	bf14      	ite	ne
 8003c40:	2301      	movne	r3, #1
 8003c42:	2300      	moveq	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	e008      	b.n	8003c5a <HAL_TIM_PWM_Start+0x6a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	bf14      	ite	ne
 8003c54:	2301      	movne	r3, #1
 8003c56:	2300      	moveq	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e07c      	b.n	8003d5c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_PWM_Start+0x82>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c70:	e013      	b.n	8003c9a <HAL_TIM_PWM_Start+0xaa>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d104      	bne.n	8003c82 <HAL_TIM_PWM_Start+0x92>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c80:	e00b      	b.n	8003c9a <HAL_TIM_PWM_Start+0xaa>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d104      	bne.n	8003c92 <HAL_TIM_PWM_Start+0xa2>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c90:	e003      	b.n	8003c9a <HAL_TIM_PWM_Start+0xaa>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2202      	movs	r2, #2
 8003c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	6839      	ldr	r1, [r7, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f001 fa38 	bl	8005118 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a2d      	ldr	r2, [pc, #180]	; (8003d64 <HAL_TIM_PWM_Start+0x174>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <HAL_TIM_PWM_Start+0xcc>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a2c      	ldr	r2, [pc, #176]	; (8003d68 <HAL_TIM_PWM_Start+0x178>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d101      	bne.n	8003cc0 <HAL_TIM_PWM_Start+0xd0>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <HAL_TIM_PWM_Start+0xd2>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a22      	ldr	r2, [pc, #136]	; (8003d64 <HAL_TIM_PWM_Start+0x174>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d022      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x136>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce8:	d01d      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x136>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1f      	ldr	r2, [pc, #124]	; (8003d6c <HAL_TIM_PWM_Start+0x17c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d018      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x136>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a1d      	ldr	r2, [pc, #116]	; (8003d70 <HAL_TIM_PWM_Start+0x180>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d013      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x136>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1c      	ldr	r2, [pc, #112]	; (8003d74 <HAL_TIM_PWM_Start+0x184>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00e      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x136>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a16      	ldr	r2, [pc, #88]	; (8003d68 <HAL_TIM_PWM_Start+0x178>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d009      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x136>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a18      	ldr	r2, [pc, #96]	; (8003d78 <HAL_TIM_PWM_Start+0x188>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d004      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x136>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a16      	ldr	r2, [pc, #88]	; (8003d7c <HAL_TIM_PWM_Start+0x18c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d111      	bne.n	8003d4a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b06      	cmp	r3, #6
 8003d36:	d010      	beq.n	8003d5a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d48:	e007      	b.n	8003d5a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0201 	orr.w	r2, r2, #1
 8003d58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40010000 	.word	0x40010000
 8003d68:	40010400 	.word	0x40010400
 8003d6c:	40000400 	.word	0x40000400
 8003d70:	40000800 	.word	0x40000800
 8003d74:	40000c00 	.word	0x40000c00
 8003d78:	40014000 	.word	0x40014000
 8003d7c:	40001800 	.word	0x40001800

08003d80 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e041      	b.n	8003e16 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7fd ffa0 	bl	8001cec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	f000 fd96 	bl	80048f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d104      	bne.n	8003e3e <HAL_TIM_IC_Start_IT+0x1e>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	e013      	b.n	8003e66 <HAL_TIM_IC_Start_IT+0x46>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d104      	bne.n	8003e4e <HAL_TIM_IC_Start_IT+0x2e>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	e00b      	b.n	8003e66 <HAL_TIM_IC_Start_IT+0x46>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d104      	bne.n	8003e5e <HAL_TIM_IC_Start_IT+0x3e>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	e003      	b.n	8003e66 <HAL_TIM_IC_Start_IT+0x46>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d104      	bne.n	8003e78 <HAL_TIM_IC_Start_IT+0x58>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	e013      	b.n	8003ea0 <HAL_TIM_IC_Start_IT+0x80>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d104      	bne.n	8003e88 <HAL_TIM_IC_Start_IT+0x68>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	e00b      	b.n	8003ea0 <HAL_TIM_IC_Start_IT+0x80>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d104      	bne.n	8003e98 <HAL_TIM_IC_Start_IT+0x78>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	e003      	b.n	8003ea0 <HAL_TIM_IC_Start_IT+0x80>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ea2:	7bbb      	ldrb	r3, [r7, #14]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d102      	bne.n	8003eae <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ea8:	7b7b      	ldrb	r3, [r7, #13]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d001      	beq.n	8003eb2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e0cc      	b.n	800404c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d104      	bne.n	8003ec2 <HAL_TIM_IC_Start_IT+0xa2>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ec0:	e013      	b.n	8003eea <HAL_TIM_IC_Start_IT+0xca>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d104      	bne.n	8003ed2 <HAL_TIM_IC_Start_IT+0xb2>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ed0:	e00b      	b.n	8003eea <HAL_TIM_IC_Start_IT+0xca>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d104      	bne.n	8003ee2 <HAL_TIM_IC_Start_IT+0xc2>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ee0:	e003      	b.n	8003eea <HAL_TIM_IC_Start_IT+0xca>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d104      	bne.n	8003efa <HAL_TIM_IC_Start_IT+0xda>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ef8:	e013      	b.n	8003f22 <HAL_TIM_IC_Start_IT+0x102>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d104      	bne.n	8003f0a <HAL_TIM_IC_Start_IT+0xea>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f08:	e00b      	b.n	8003f22 <HAL_TIM_IC_Start_IT+0x102>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d104      	bne.n	8003f1a <HAL_TIM_IC_Start_IT+0xfa>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f18:	e003      	b.n	8003f22 <HAL_TIM_IC_Start_IT+0x102>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b0c      	cmp	r3, #12
 8003f26:	d841      	bhi.n	8003fac <HAL_TIM_IC_Start_IT+0x18c>
 8003f28:	a201      	add	r2, pc, #4	; (adr r2, 8003f30 <HAL_TIM_IC_Start_IT+0x110>)
 8003f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2e:	bf00      	nop
 8003f30:	08003f65 	.word	0x08003f65
 8003f34:	08003fad 	.word	0x08003fad
 8003f38:	08003fad 	.word	0x08003fad
 8003f3c:	08003fad 	.word	0x08003fad
 8003f40:	08003f77 	.word	0x08003f77
 8003f44:	08003fad 	.word	0x08003fad
 8003f48:	08003fad 	.word	0x08003fad
 8003f4c:	08003fad 	.word	0x08003fad
 8003f50:	08003f89 	.word	0x08003f89
 8003f54:	08003fad 	.word	0x08003fad
 8003f58:	08003fad 	.word	0x08003fad
 8003f5c:	08003fad 	.word	0x08003fad
 8003f60:	08003f9b 	.word	0x08003f9b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0202 	orr.w	r2, r2, #2
 8003f72:	60da      	str	r2, [r3, #12]
      break;
 8003f74:	e01d      	b.n	8003fb2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0204 	orr.w	r2, r2, #4
 8003f84:	60da      	str	r2, [r3, #12]
      break;
 8003f86:	e014      	b.n	8003fb2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0208 	orr.w	r2, r2, #8
 8003f96:	60da      	str	r2, [r3, #12]
      break;
 8003f98:	e00b      	b.n	8003fb2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f042 0210 	orr.w	r2, r2, #16
 8003fa8:	60da      	str	r2, [r3, #12]
      break;
 8003faa:	e002      	b.n	8003fb2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	73fb      	strb	r3, [r7, #15]
      break;
 8003fb0:	bf00      	nop
  }

  if (status == HAL_OK)
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d148      	bne.n	800404a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	6839      	ldr	r1, [r7, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f001 f8a9 	bl	8005118 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a22      	ldr	r2, [pc, #136]	; (8004054 <HAL_TIM_IC_Start_IT+0x234>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d022      	beq.n	8004016 <HAL_TIM_IC_Start_IT+0x1f6>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd8:	d01d      	beq.n	8004016 <HAL_TIM_IC_Start_IT+0x1f6>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a1e      	ldr	r2, [pc, #120]	; (8004058 <HAL_TIM_IC_Start_IT+0x238>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d018      	beq.n	8004016 <HAL_TIM_IC_Start_IT+0x1f6>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1c      	ldr	r2, [pc, #112]	; (800405c <HAL_TIM_IC_Start_IT+0x23c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d013      	beq.n	8004016 <HAL_TIM_IC_Start_IT+0x1f6>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1b      	ldr	r2, [pc, #108]	; (8004060 <HAL_TIM_IC_Start_IT+0x240>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d00e      	beq.n	8004016 <HAL_TIM_IC_Start_IT+0x1f6>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a19      	ldr	r2, [pc, #100]	; (8004064 <HAL_TIM_IC_Start_IT+0x244>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d009      	beq.n	8004016 <HAL_TIM_IC_Start_IT+0x1f6>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a18      	ldr	r2, [pc, #96]	; (8004068 <HAL_TIM_IC_Start_IT+0x248>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d004      	beq.n	8004016 <HAL_TIM_IC_Start_IT+0x1f6>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a16      	ldr	r2, [pc, #88]	; (800406c <HAL_TIM_IC_Start_IT+0x24c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d111      	bne.n	800403a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2b06      	cmp	r3, #6
 8004026:	d010      	beq.n	800404a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004038:	e007      	b.n	800404a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0201 	orr.w	r2, r2, #1
 8004048:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800404a:	7bfb      	ldrb	r3, [r7, #15]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40010000 	.word	0x40010000
 8004058:	40000400 	.word	0x40000400
 800405c:	40000800 	.word	0x40000800
 8004060:	40000c00 	.word	0x40000c00
 8004064:	40010400 	.word	0x40010400
 8004068:	40014000 	.word	0x40014000
 800406c:	40001800 	.word	0x40001800

08004070 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e097      	b.n	80041b4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d106      	bne.n	800409e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7fd fd8d 	bl	8001bb8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2202      	movs	r2, #2
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6812      	ldr	r2, [r2, #0]
 80040b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040b4:	f023 0307 	bic.w	r3, r3, #7
 80040b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3304      	adds	r3, #4
 80040c2:	4619      	mov	r1, r3
 80040c4:	4610      	mov	r0, r2
 80040c6:	f000 fc13 	bl	80048f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f2:	f023 0303 	bic.w	r3, r3, #3
 80040f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	021b      	lsls	r3, r3, #8
 8004102:	4313      	orrs	r3, r2
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004110:	f023 030c 	bic.w	r3, r3, #12
 8004114:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800411c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004120:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	4313      	orrs	r3, r2
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	011a      	lsls	r2, r3, #4
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	031b      	lsls	r3, r3, #12
 8004140:	4313      	orrs	r3, r2
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800414e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004156:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	4313      	orrs	r3, r2
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d122      	bne.n	8004218 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d11b      	bne.n	8004218 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0202 	mvn.w	r2, #2
 80041e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fc fe3e 	bl	8000e80 <HAL_TIM_IC_CaptureCallback>
 8004204:	e005      	b.n	8004212 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 fb54 	bl	80048b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fb5b 	bl	80048c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	2b04      	cmp	r3, #4
 8004224:	d122      	bne.n	800426c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b04      	cmp	r3, #4
 8004232:	d11b      	bne.n	800426c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f06f 0204 	mvn.w	r2, #4
 800423c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2202      	movs	r2, #2
 8004242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fc fe14 	bl	8000e80 <HAL_TIM_IC_CaptureCallback>
 8004258:	e005      	b.n	8004266 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fb2a 	bl	80048b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 fb31 	bl	80048c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b08      	cmp	r3, #8
 8004278:	d122      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b08      	cmp	r3, #8
 8004286:	d11b      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f06f 0208 	mvn.w	r2, #8
 8004290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2204      	movs	r2, #4
 8004296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fc fdea 	bl	8000e80 <HAL_TIM_IC_CaptureCallback>
 80042ac:	e005      	b.n	80042ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fb00 	bl	80048b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fb07 	bl	80048c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f003 0310 	and.w	r3, r3, #16
 80042ca:	2b10      	cmp	r3, #16
 80042cc:	d122      	bne.n	8004314 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0310 	and.w	r3, r3, #16
 80042d8:	2b10      	cmp	r3, #16
 80042da:	d11b      	bne.n	8004314 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f06f 0210 	mvn.w	r2, #16
 80042e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2208      	movs	r2, #8
 80042ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7fc fdc0 	bl	8000e80 <HAL_TIM_IC_CaptureCallback>
 8004300:	e005      	b.n	800430e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fad6 	bl	80048b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 fadd 	bl	80048c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b01      	cmp	r3, #1
 8004320:	d10e      	bne.n	8004340 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b01      	cmp	r3, #1
 800432e:	d107      	bne.n	8004340 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f06f 0201 	mvn.w	r2, #1
 8004338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fab0 	bl	80048a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434a:	2b80      	cmp	r3, #128	; 0x80
 800434c:	d10e      	bne.n	800436c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004358:	2b80      	cmp	r3, #128	; 0x80
 800435a:	d107      	bne.n	800436c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 ffd4 	bl	8005314 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004376:	2b40      	cmp	r3, #64	; 0x40
 8004378:	d10e      	bne.n	8004398 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004384:	2b40      	cmp	r3, #64	; 0x40
 8004386:	d107      	bne.n	8004398 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 faa2 	bl	80048dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0320 	and.w	r3, r3, #32
 80043a2:	2b20      	cmp	r3, #32
 80043a4:	d10e      	bne.n	80043c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f003 0320 	and.w	r3, r3, #32
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	d107      	bne.n	80043c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0220 	mvn.w	r2, #32
 80043bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 ff9e 	bl	8005300 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043c4:	bf00      	nop
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_TIM_IC_ConfigChannel+0x1e>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e088      	b.n	80044fc <HAL_TIM_IC_ConfigChannel+0x130>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d11b      	bne.n	8004430 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6818      	ldr	r0, [r3, #0]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	6819      	ldr	r1, [r3, #0]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f000 fcc2 	bl	8004d90 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 020c 	bic.w	r2, r2, #12
 800441a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6999      	ldr	r1, [r3, #24]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	619a      	str	r2, [r3, #24]
 800442e:	e060      	b.n	80044f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b04      	cmp	r3, #4
 8004434:	d11c      	bne.n	8004470 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	6819      	ldr	r1, [r3, #0]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f000 fd46 	bl	8004ed6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	699a      	ldr	r2, [r3, #24]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004458:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6999      	ldr	r1, [r3, #24]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	021a      	lsls	r2, r3, #8
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	619a      	str	r2, [r3, #24]
 800446e:	e040      	b.n	80044f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b08      	cmp	r3, #8
 8004474:	d11b      	bne.n	80044ae <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6818      	ldr	r0, [r3, #0]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	6819      	ldr	r1, [r3, #0]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f000 fd93 	bl	8004fb0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69da      	ldr	r2, [r3, #28]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 020c 	bic.w	r2, r2, #12
 8004498:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	69d9      	ldr	r1, [r3, #28]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	61da      	str	r2, [r3, #28]
 80044ac:	e021      	b.n	80044f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b0c      	cmp	r3, #12
 80044b2:	d11c      	bne.n	80044ee <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6818      	ldr	r0, [r3, #0]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	6819      	ldr	r1, [r3, #0]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f000 fdb0 	bl	8005028 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	69da      	ldr	r2, [r3, #28]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80044d6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	69d9      	ldr	r1, [r3, #28]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	021a      	lsls	r2, r3, #8
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	61da      	str	r2, [r3, #28]
 80044ec:	e001      	b.n	80044f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800451a:	2b01      	cmp	r3, #1
 800451c:	d101      	bne.n	8004522 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800451e:	2302      	movs	r3, #2
 8004520:	e0ae      	b.n	8004680 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b0c      	cmp	r3, #12
 800452e:	f200 809f 	bhi.w	8004670 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004532:	a201      	add	r2, pc, #4	; (adr r2, 8004538 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004538:	0800456d 	.word	0x0800456d
 800453c:	08004671 	.word	0x08004671
 8004540:	08004671 	.word	0x08004671
 8004544:	08004671 	.word	0x08004671
 8004548:	080045ad 	.word	0x080045ad
 800454c:	08004671 	.word	0x08004671
 8004550:	08004671 	.word	0x08004671
 8004554:	08004671 	.word	0x08004671
 8004558:	080045ef 	.word	0x080045ef
 800455c:	08004671 	.word	0x08004671
 8004560:	08004671 	.word	0x08004671
 8004564:	08004671 	.word	0x08004671
 8004568:	0800462f 	.word	0x0800462f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68b9      	ldr	r1, [r7, #8]
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fa5c 	bl	8004a30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699a      	ldr	r2, [r3, #24]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0208 	orr.w	r2, r2, #8
 8004586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699a      	ldr	r2, [r3, #24]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0204 	bic.w	r2, r2, #4
 8004596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6999      	ldr	r1, [r3, #24]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	691a      	ldr	r2, [r3, #16]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	619a      	str	r2, [r3, #24]
      break;
 80045aa:	e064      	b.n	8004676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68b9      	ldr	r1, [r7, #8]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 faac 	bl	8004b10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699a      	ldr	r2, [r3, #24]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699a      	ldr	r2, [r3, #24]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6999      	ldr	r1, [r3, #24]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	021a      	lsls	r2, r3, #8
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	619a      	str	r2, [r3, #24]
      break;
 80045ec:	e043      	b.n	8004676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68b9      	ldr	r1, [r7, #8]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fb01 	bl	8004bfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69da      	ldr	r2, [r3, #28]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0208 	orr.w	r2, r2, #8
 8004608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69da      	ldr	r2, [r3, #28]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0204 	bic.w	r2, r2, #4
 8004618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69d9      	ldr	r1, [r3, #28]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	61da      	str	r2, [r3, #28]
      break;
 800462c:	e023      	b.n	8004676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fb55 	bl	8004ce4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69da      	ldr	r2, [r3, #28]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	69da      	ldr	r2, [r3, #28]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69d9      	ldr	r1, [r3, #28]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	021a      	lsls	r2, r3, #8
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	61da      	str	r2, [r3, #28]
      break;
 800466e:	e002      	b.n	8004676 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	75fb      	strb	r3, [r7, #23]
      break;
 8004674:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800467e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_TIM_ConfigClockSource+0x1c>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e0b4      	b.n	800480e <HAL_TIM_ConfigClockSource+0x186>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046dc:	d03e      	beq.n	800475c <HAL_TIM_ConfigClockSource+0xd4>
 80046de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e2:	f200 8087 	bhi.w	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 80046e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ea:	f000 8086 	beq.w	80047fa <HAL_TIM_ConfigClockSource+0x172>
 80046ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f2:	d87f      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 80046f4:	2b70      	cmp	r3, #112	; 0x70
 80046f6:	d01a      	beq.n	800472e <HAL_TIM_ConfigClockSource+0xa6>
 80046f8:	2b70      	cmp	r3, #112	; 0x70
 80046fa:	d87b      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 80046fc:	2b60      	cmp	r3, #96	; 0x60
 80046fe:	d050      	beq.n	80047a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004700:	2b60      	cmp	r3, #96	; 0x60
 8004702:	d877      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004704:	2b50      	cmp	r3, #80	; 0x50
 8004706:	d03c      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0xfa>
 8004708:	2b50      	cmp	r3, #80	; 0x50
 800470a:	d873      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 800470c:	2b40      	cmp	r3, #64	; 0x40
 800470e:	d058      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004710:	2b40      	cmp	r3, #64	; 0x40
 8004712:	d86f      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004714:	2b30      	cmp	r3, #48	; 0x30
 8004716:	d064      	beq.n	80047e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004718:	2b30      	cmp	r3, #48	; 0x30
 800471a:	d86b      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 800471c:	2b20      	cmp	r3, #32
 800471e:	d060      	beq.n	80047e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004720:	2b20      	cmp	r3, #32
 8004722:	d867      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d05c      	beq.n	80047e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004728:	2b10      	cmp	r3, #16
 800472a:	d05a      	beq.n	80047e2 <HAL_TIM_ConfigClockSource+0x15a>
 800472c:	e062      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	6899      	ldr	r1, [r3, #8]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f000 fccb 	bl	80050d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004750:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	609a      	str	r2, [r3, #8]
      break;
 800475a:	e04f      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6818      	ldr	r0, [r3, #0]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	6899      	ldr	r1, [r3, #8]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f000 fcb4 	bl	80050d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800477e:	609a      	str	r2, [r3, #8]
      break;
 8004780:	e03c      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6859      	ldr	r1, [r3, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	461a      	mov	r2, r3
 8004790:	f000 fb72 	bl	8004e78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2150      	movs	r1, #80	; 0x50
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fc81 	bl	80050a2 <TIM_ITRx_SetConfig>
      break;
 80047a0:	e02c      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	6859      	ldr	r1, [r3, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	461a      	mov	r2, r3
 80047b0:	f000 fbce 	bl	8004f50 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2160      	movs	r1, #96	; 0x60
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fc71 	bl	80050a2 <TIM_ITRx_SetConfig>
      break;
 80047c0:	e01c      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6818      	ldr	r0, [r3, #0]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	6859      	ldr	r1, [r3, #4]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	461a      	mov	r2, r3
 80047d0:	f000 fb52 	bl	8004e78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2140      	movs	r1, #64	; 0x40
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fc61 	bl	80050a2 <TIM_ITRx_SetConfig>
      break;
 80047e0:	e00c      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4619      	mov	r1, r3
 80047ec:	4610      	mov	r0, r2
 80047ee:	f000 fc58 	bl	80050a2 <TIM_ITRx_SetConfig>
      break;
 80047f2:	e003      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	73fb      	strb	r3, [r7, #15]
      break;
 80047f8:	e000      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800480c:	7bfb      	ldrb	r3, [r7, #15]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004822:	2300      	movs	r3, #0
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b0c      	cmp	r3, #12
 800482a:	d831      	bhi.n	8004890 <HAL_TIM_ReadCapturedValue+0x78>
 800482c:	a201      	add	r2, pc, #4	; (adr r2, 8004834 <HAL_TIM_ReadCapturedValue+0x1c>)
 800482e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004832:	bf00      	nop
 8004834:	08004869 	.word	0x08004869
 8004838:	08004891 	.word	0x08004891
 800483c:	08004891 	.word	0x08004891
 8004840:	08004891 	.word	0x08004891
 8004844:	08004873 	.word	0x08004873
 8004848:	08004891 	.word	0x08004891
 800484c:	08004891 	.word	0x08004891
 8004850:	08004891 	.word	0x08004891
 8004854:	0800487d 	.word	0x0800487d
 8004858:	08004891 	.word	0x08004891
 800485c:	08004891 	.word	0x08004891
 8004860:	08004891 	.word	0x08004891
 8004864:	08004887 	.word	0x08004887
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800486e:	60fb      	str	r3, [r7, #12]

      break;
 8004870:	e00f      	b.n	8004892 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004878:	60fb      	str	r3, [r7, #12]

      break;
 800487a:	e00a      	b.n	8004892 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004882:	60fb      	str	r3, [r7, #12]

      break;
 8004884:	e005      	b.n	8004892 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	60fb      	str	r3, [r7, #12]

      break;
 800488e:	e000      	b.n	8004892 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004890:	bf00      	nop
  }

  return tmpreg;
 8004892:	68fb      	ldr	r3, [r7, #12]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a40      	ldr	r2, [pc, #256]	; (8004a04 <TIM_Base_SetConfig+0x114>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d013      	beq.n	8004930 <TIM_Base_SetConfig+0x40>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490e:	d00f      	beq.n	8004930 <TIM_Base_SetConfig+0x40>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a3d      	ldr	r2, [pc, #244]	; (8004a08 <TIM_Base_SetConfig+0x118>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00b      	beq.n	8004930 <TIM_Base_SetConfig+0x40>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a3c      	ldr	r2, [pc, #240]	; (8004a0c <TIM_Base_SetConfig+0x11c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d007      	beq.n	8004930 <TIM_Base_SetConfig+0x40>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a3b      	ldr	r2, [pc, #236]	; (8004a10 <TIM_Base_SetConfig+0x120>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d003      	beq.n	8004930 <TIM_Base_SetConfig+0x40>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a3a      	ldr	r2, [pc, #232]	; (8004a14 <TIM_Base_SetConfig+0x124>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d108      	bne.n	8004942 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	4313      	orrs	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a2f      	ldr	r2, [pc, #188]	; (8004a04 <TIM_Base_SetConfig+0x114>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d02b      	beq.n	80049a2 <TIM_Base_SetConfig+0xb2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004950:	d027      	beq.n	80049a2 <TIM_Base_SetConfig+0xb2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a2c      	ldr	r2, [pc, #176]	; (8004a08 <TIM_Base_SetConfig+0x118>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d023      	beq.n	80049a2 <TIM_Base_SetConfig+0xb2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a2b      	ldr	r2, [pc, #172]	; (8004a0c <TIM_Base_SetConfig+0x11c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d01f      	beq.n	80049a2 <TIM_Base_SetConfig+0xb2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a2a      	ldr	r2, [pc, #168]	; (8004a10 <TIM_Base_SetConfig+0x120>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d01b      	beq.n	80049a2 <TIM_Base_SetConfig+0xb2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a29      	ldr	r2, [pc, #164]	; (8004a14 <TIM_Base_SetConfig+0x124>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d017      	beq.n	80049a2 <TIM_Base_SetConfig+0xb2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a28      	ldr	r2, [pc, #160]	; (8004a18 <TIM_Base_SetConfig+0x128>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d013      	beq.n	80049a2 <TIM_Base_SetConfig+0xb2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a27      	ldr	r2, [pc, #156]	; (8004a1c <TIM_Base_SetConfig+0x12c>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00f      	beq.n	80049a2 <TIM_Base_SetConfig+0xb2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a26      	ldr	r2, [pc, #152]	; (8004a20 <TIM_Base_SetConfig+0x130>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00b      	beq.n	80049a2 <TIM_Base_SetConfig+0xb2>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a25      	ldr	r2, [pc, #148]	; (8004a24 <TIM_Base_SetConfig+0x134>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d007      	beq.n	80049a2 <TIM_Base_SetConfig+0xb2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a24      	ldr	r2, [pc, #144]	; (8004a28 <TIM_Base_SetConfig+0x138>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d003      	beq.n	80049a2 <TIM_Base_SetConfig+0xb2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a23      	ldr	r2, [pc, #140]	; (8004a2c <TIM_Base_SetConfig+0x13c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d108      	bne.n	80049b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a0a      	ldr	r2, [pc, #40]	; (8004a04 <TIM_Base_SetConfig+0x114>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d003      	beq.n	80049e8 <TIM_Base_SetConfig+0xf8>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a0c      	ldr	r2, [pc, #48]	; (8004a14 <TIM_Base_SetConfig+0x124>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d103      	bne.n	80049f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	691a      	ldr	r2, [r3, #16]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	615a      	str	r2, [r3, #20]
}
 80049f6:	bf00      	nop
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40010000 	.word	0x40010000
 8004a08:	40000400 	.word	0x40000400
 8004a0c:	40000800 	.word	0x40000800
 8004a10:	40000c00 	.word	0x40000c00
 8004a14:	40010400 	.word	0x40010400
 8004a18:	40014000 	.word	0x40014000
 8004a1c:	40014400 	.word	0x40014400
 8004a20:	40014800 	.word	0x40014800
 8004a24:	40001800 	.word	0x40001800
 8004a28:	40001c00 	.word	0x40001c00
 8004a2c:	40002000 	.word	0x40002000

08004a30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	f023 0201 	bic.w	r2, r3, #1
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f023 0303 	bic.w	r3, r3, #3
 8004a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f023 0302 	bic.w	r3, r3, #2
 8004a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a20      	ldr	r2, [pc, #128]	; (8004b08 <TIM_OC1_SetConfig+0xd8>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d003      	beq.n	8004a94 <TIM_OC1_SetConfig+0x64>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a1f      	ldr	r2, [pc, #124]	; (8004b0c <TIM_OC1_SetConfig+0xdc>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d10c      	bne.n	8004aae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f023 0308 	bic.w	r3, r3, #8
 8004a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f023 0304 	bic.w	r3, r3, #4
 8004aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a15      	ldr	r2, [pc, #84]	; (8004b08 <TIM_OC1_SetConfig+0xd8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d003      	beq.n	8004abe <TIM_OC1_SetConfig+0x8e>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a14      	ldr	r2, [pc, #80]	; (8004b0c <TIM_OC1_SetConfig+0xdc>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d111      	bne.n	8004ae2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	621a      	str	r2, [r3, #32]
}
 8004afc:	bf00      	nop
 8004afe:	371c      	adds	r7, #28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	40010000 	.word	0x40010000
 8004b0c:	40010400 	.word	0x40010400

08004b10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	f023 0210 	bic.w	r2, r3, #16
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	021b      	lsls	r3, r3, #8
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f023 0320 	bic.w	r3, r3, #32
 8004b5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a22      	ldr	r2, [pc, #136]	; (8004bf4 <TIM_OC2_SetConfig+0xe4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <TIM_OC2_SetConfig+0x68>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a21      	ldr	r2, [pc, #132]	; (8004bf8 <TIM_OC2_SetConfig+0xe8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d10d      	bne.n	8004b94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a17      	ldr	r2, [pc, #92]	; (8004bf4 <TIM_OC2_SetConfig+0xe4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d003      	beq.n	8004ba4 <TIM_OC2_SetConfig+0x94>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a16      	ldr	r2, [pc, #88]	; (8004bf8 <TIM_OC2_SetConfig+0xe8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d113      	bne.n	8004bcc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004baa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	621a      	str	r2, [r3, #32]
}
 8004be6:	bf00      	nop
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40010000 	.word	0x40010000
 8004bf8:	40010400 	.word	0x40010400

08004bfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0303 	bic.w	r3, r3, #3
 8004c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	021b      	lsls	r3, r3, #8
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a21      	ldr	r2, [pc, #132]	; (8004cdc <TIM_OC3_SetConfig+0xe0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d003      	beq.n	8004c62 <TIM_OC3_SetConfig+0x66>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a20      	ldr	r2, [pc, #128]	; (8004ce0 <TIM_OC3_SetConfig+0xe4>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d10d      	bne.n	8004c7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	021b      	lsls	r3, r3, #8
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a16      	ldr	r2, [pc, #88]	; (8004cdc <TIM_OC3_SetConfig+0xe0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d003      	beq.n	8004c8e <TIM_OC3_SetConfig+0x92>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a15      	ldr	r2, [pc, #84]	; (8004ce0 <TIM_OC3_SetConfig+0xe4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d113      	bne.n	8004cb6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	621a      	str	r2, [r3, #32]
}
 8004cd0:	bf00      	nop
 8004cd2:	371c      	adds	r7, #28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	40010000 	.word	0x40010000
 8004ce0:	40010400 	.word	0x40010400

08004ce4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	021b      	lsls	r3, r3, #8
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	031b      	lsls	r3, r3, #12
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a12      	ldr	r2, [pc, #72]	; (8004d88 <TIM_OC4_SetConfig+0xa4>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d003      	beq.n	8004d4c <TIM_OC4_SetConfig+0x68>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a11      	ldr	r2, [pc, #68]	; (8004d8c <TIM_OC4_SetConfig+0xa8>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d109      	bne.n	8004d60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	019b      	lsls	r3, r3, #6
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	621a      	str	r2, [r3, #32]
}
 8004d7a:	bf00      	nop
 8004d7c:	371c      	adds	r7, #28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40010000 	.word	0x40010000
 8004d8c:	40010400 	.word	0x40010400

08004d90 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
 8004d9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	f023 0201 	bic.w	r2, r3, #1
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4a28      	ldr	r2, [pc, #160]	; (8004e5c <TIM_TI1_SetConfig+0xcc>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d01b      	beq.n	8004df6 <TIM_TI1_SetConfig+0x66>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc4:	d017      	beq.n	8004df6 <TIM_TI1_SetConfig+0x66>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4a25      	ldr	r2, [pc, #148]	; (8004e60 <TIM_TI1_SetConfig+0xd0>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d013      	beq.n	8004df6 <TIM_TI1_SetConfig+0x66>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4a24      	ldr	r2, [pc, #144]	; (8004e64 <TIM_TI1_SetConfig+0xd4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00f      	beq.n	8004df6 <TIM_TI1_SetConfig+0x66>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4a23      	ldr	r2, [pc, #140]	; (8004e68 <TIM_TI1_SetConfig+0xd8>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d00b      	beq.n	8004df6 <TIM_TI1_SetConfig+0x66>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4a22      	ldr	r2, [pc, #136]	; (8004e6c <TIM_TI1_SetConfig+0xdc>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d007      	beq.n	8004df6 <TIM_TI1_SetConfig+0x66>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4a21      	ldr	r2, [pc, #132]	; (8004e70 <TIM_TI1_SetConfig+0xe0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d003      	beq.n	8004df6 <TIM_TI1_SetConfig+0x66>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4a20      	ldr	r2, [pc, #128]	; (8004e74 <TIM_TI1_SetConfig+0xe4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d101      	bne.n	8004dfa <TIM_TI1_SetConfig+0x6a>
 8004df6:	2301      	movs	r3, #1
 8004df8:	e000      	b.n	8004dfc <TIM_TI1_SetConfig+0x6c>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d008      	beq.n	8004e12 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f023 0303 	bic.w	r3, r3, #3
 8004e06:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	e003      	b.n	8004e1a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f043 0301 	orr.w	r3, r3, #1
 8004e18:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f023 030a 	bic.w	r3, r3, #10
 8004e34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	f003 030a 	and.w	r3, r3, #10
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	621a      	str	r2, [r3, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	40010000 	.word	0x40010000
 8004e60:	40000400 	.word	0x40000400
 8004e64:	40000800 	.word	0x40000800
 8004e68:	40000c00 	.word	0x40000c00
 8004e6c:	40010400 	.word	0x40010400
 8004e70:	40014000 	.word	0x40014000
 8004e74:	40001800 	.word	0x40001800

08004e78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	f023 0201 	bic.w	r2, r3, #1
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f023 030a 	bic.w	r3, r3, #10
 8004eb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	621a      	str	r2, [r3, #32]
}
 8004eca:	bf00      	nop
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b087      	sub	sp, #28
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	607a      	str	r2, [r7, #4]
 8004ee2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	f023 0210 	bic.w	r2, r3, #16
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	021b      	lsls	r3, r3, #8
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	031b      	lsls	r3, r3, #12
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f28:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	621a      	str	r2, [r3, #32]
}
 8004f44:	bf00      	nop
 8004f46:	371c      	adds	r7, #28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	f023 0210 	bic.w	r2, r3, #16
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	031b      	lsls	r3, r3, #12
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	621a      	str	r2, [r3, #32]
}
 8004fa4:	bf00      	nop
 8004fa6:	371c      	adds	r7, #28
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f023 0303 	bic.w	r3, r3, #3
 8004fdc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005000:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	021b      	lsls	r3, r3, #8
 8005006:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	621a      	str	r2, [r3, #32]
}
 800501c:	bf00      	nop
 800501e:	371c      	adds	r7, #28
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005054:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	021b      	lsls	r3, r3, #8
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	4313      	orrs	r3, r2
 800505e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005066:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	031b      	lsls	r3, r3, #12
 800506c:	b29b      	uxth	r3, r3
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800507a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	031b      	lsls	r3, r3, #12
 8005080:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	4313      	orrs	r3, r2
 8005088:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	621a      	str	r2, [r3, #32]
}
 8005096:	bf00      	nop
 8005098:	371c      	adds	r7, #28
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b085      	sub	sp, #20
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4313      	orrs	r3, r2
 80050c0:	f043 0307 	orr.w	r3, r3, #7
 80050c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	609a      	str	r2, [r3, #8]
}
 80050cc:	bf00      	nop
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	021a      	lsls	r2, r3, #8
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	431a      	orrs	r2, r3
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4313      	orrs	r3, r2
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	4313      	orrs	r3, r2
 8005104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	609a      	str	r2, [r3, #8]
}
 800510c:	bf00      	nop
 800510e:	371c      	adds	r7, #28
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f003 031f 	and.w	r3, r3, #31
 800512a:	2201      	movs	r2, #1
 800512c:	fa02 f303 	lsl.w	r3, r2, r3
 8005130:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a1a      	ldr	r2, [r3, #32]
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	43db      	mvns	r3, r3
 800513a:	401a      	ands	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a1a      	ldr	r2, [r3, #32]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f003 031f 	and.w	r3, r3, #31
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	fa01 f303 	lsl.w	r3, r1, r3
 8005150:	431a      	orrs	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	621a      	str	r2, [r3, #32]
}
 8005156:	bf00      	nop
 8005158:	371c      	adds	r7, #28
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
	...

08005164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005178:	2302      	movs	r3, #2
 800517a:	e05a      	b.n	8005232 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a21      	ldr	r2, [pc, #132]	; (8005240 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d022      	beq.n	8005206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c8:	d01d      	beq.n	8005206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a1d      	ldr	r2, [pc, #116]	; (8005244 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d018      	beq.n	8005206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a1b      	ldr	r2, [pc, #108]	; (8005248 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d013      	beq.n	8005206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a1a      	ldr	r2, [pc, #104]	; (800524c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d00e      	beq.n	8005206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a18      	ldr	r2, [pc, #96]	; (8005250 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d009      	beq.n	8005206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a17      	ldr	r2, [pc, #92]	; (8005254 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d004      	beq.n	8005206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a15      	ldr	r2, [pc, #84]	; (8005258 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d10c      	bne.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800520c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	4313      	orrs	r3, r2
 8005216:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40010000 	.word	0x40010000
 8005244:	40000400 	.word	0x40000400
 8005248:	40000800 	.word	0x40000800
 800524c:	40000c00 	.word	0x40000c00
 8005250:	40010400 	.word	0x40010400
 8005254:	40014000 	.word	0x40014000
 8005258:	40001800 	.word	0x40001800

0800525c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005270:	2b01      	cmp	r3, #1
 8005272:	d101      	bne.n	8005278 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005274:	2302      	movs	r3, #2
 8005276:	e03d      	b.n	80052f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e03f      	b.n	80053ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d106      	bne.n	8005354 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fc fd9e 	bl	8001e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2224      	movs	r2, #36	; 0x24
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800536a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 fddb 	bl	8005f28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005380:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695a      	ldr	r2, [r3, #20]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005390:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b08a      	sub	sp, #40	; 0x28
 80053c6:	af02      	add	r7, sp, #8
 80053c8:	60f8      	str	r0, [r7, #12]
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	603b      	str	r3, [r7, #0]
 80053ce:	4613      	mov	r3, r2
 80053d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b20      	cmp	r3, #32
 80053e0:	d17c      	bne.n	80054dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <HAL_UART_Transmit+0x2c>
 80053e8:	88fb      	ldrh	r3, [r7, #6]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e075      	b.n	80054de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_UART_Transmit+0x3e>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e06e      	b.n	80054de <HAL_UART_Transmit+0x11c>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2221      	movs	r2, #33	; 0x21
 8005412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005416:	f7fc fea9 	bl	800216c <HAL_GetTick>
 800541a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	88fa      	ldrh	r2, [r7, #6]
 8005420:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	88fa      	ldrh	r2, [r7, #6]
 8005426:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005430:	d108      	bne.n	8005444 <HAL_UART_Transmit+0x82>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d104      	bne.n	8005444 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800543a:	2300      	movs	r3, #0
 800543c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	61bb      	str	r3, [r7, #24]
 8005442:	e003      	b.n	800544c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005448:	2300      	movs	r3, #0
 800544a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005454:	e02a      	b.n	80054ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2200      	movs	r2, #0
 800545e:	2180      	movs	r1, #128	; 0x80
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 fb1f 	bl	8005aa4 <UART_WaitOnFlagUntilTimeout>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e036      	b.n	80054de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10b      	bne.n	800548e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	461a      	mov	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005484:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	3302      	adds	r3, #2
 800548a:	61bb      	str	r3, [r7, #24]
 800548c:	e007      	b.n	800549e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	781a      	ldrb	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	3301      	adds	r3, #1
 800549c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1cf      	bne.n	8005456 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2200      	movs	r2, #0
 80054be:	2140      	movs	r1, #64	; 0x40
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 faef 	bl	8005aa4 <UART_WaitOnFlagUntilTimeout>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e006      	b.n	80054de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80054d8:	2300      	movs	r3, #0
 80054da:	e000      	b.n	80054de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80054dc:	2302      	movs	r3, #2
  }
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3720      	adds	r7, #32
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	4613      	mov	r3, r2
 80054f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d11d      	bne.n	800553c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <HAL_UART_Receive_IT+0x26>
 8005506:	88fb      	ldrh	r3, [r7, #6]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e016      	b.n	800553e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005516:	2b01      	cmp	r3, #1
 8005518:	d101      	bne.n	800551e <HAL_UART_Receive_IT+0x38>
 800551a:	2302      	movs	r3, #2
 800551c:	e00f      	b.n	800553e <HAL_UART_Receive_IT+0x58>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800552c:	88fb      	ldrh	r3, [r7, #6]
 800552e:	461a      	mov	r2, r3
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 fb24 	bl	8005b80 <UART_Start_Receive_IT>
 8005538:	4603      	mov	r3, r0
 800553a:	e000      	b.n	800553e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800553c:	2302      	movs	r3, #2
  }
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
	...

08005548 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b0ba      	sub	sp, #232	; 0xe8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800556e:	2300      	movs	r3, #0
 8005570:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005574:	2300      	movs	r3, #0
 8005576:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800557a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800557e:	f003 030f 	and.w	r3, r3, #15
 8005582:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005586:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10f      	bne.n	80055ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800558e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005592:	f003 0320 	and.w	r3, r3, #32
 8005596:	2b00      	cmp	r3, #0
 8005598:	d009      	beq.n	80055ae <HAL_UART_IRQHandler+0x66>
 800559a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fc03 	bl	8005db2 <UART_Receive_IT>
      return;
 80055ac:	e256      	b.n	8005a5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80055ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 80de 	beq.w	8005774 <HAL_UART_IRQHandler+0x22c>
 80055b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d106      	bne.n	80055d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 80d1 	beq.w	8005774 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00b      	beq.n	80055f6 <HAL_UART_IRQHandler+0xae>
 80055de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d005      	beq.n	80055f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f043 0201 	orr.w	r2, r3, #1
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055fa:	f003 0304 	and.w	r3, r3, #4
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00b      	beq.n	800561a <HAL_UART_IRQHandler+0xd2>
 8005602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	d005      	beq.n	800561a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	f043 0202 	orr.w	r2, r3, #2
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800561a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00b      	beq.n	800563e <HAL_UART_IRQHandler+0xf6>
 8005626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d005      	beq.n	800563e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	f043 0204 	orr.w	r2, r3, #4
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800563e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005642:	f003 0308 	and.w	r3, r3, #8
 8005646:	2b00      	cmp	r3, #0
 8005648:	d011      	beq.n	800566e <HAL_UART_IRQHandler+0x126>
 800564a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b00      	cmp	r3, #0
 8005654:	d105      	bne.n	8005662 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d005      	beq.n	800566e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	f043 0208 	orr.w	r2, r3, #8
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 81ed 	beq.w	8005a52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b00      	cmp	r3, #0
 8005682:	d008      	beq.n	8005696 <HAL_UART_IRQHandler+0x14e>
 8005684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005688:	f003 0320 	and.w	r3, r3, #32
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fb8e 	bl	8005db2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a0:	2b40      	cmp	r3, #64	; 0x40
 80056a2:	bf0c      	ite	eq
 80056a4:	2301      	moveq	r3, #1
 80056a6:	2300      	movne	r3, #0
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	f003 0308 	and.w	r3, r3, #8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d103      	bne.n	80056c2 <HAL_UART_IRQHandler+0x17a>
 80056ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d04f      	beq.n	8005762 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fa96 	bl	8005bf4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d141      	bne.n	800575a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3314      	adds	r3, #20
 80056dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3314      	adds	r3, #20
 80056fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005702:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005706:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800570e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005712:	e841 2300 	strex	r3, r2, [r1]
 8005716:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800571a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1d9      	bne.n	80056d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	2b00      	cmp	r3, #0
 8005728:	d013      	beq.n	8005752 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572e:	4a7d      	ldr	r2, [pc, #500]	; (8005924 <HAL_UART_IRQHandler+0x3dc>)
 8005730:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	4618      	mov	r0, r3
 8005738:	f7fd fb73 	bl	8002e22 <HAL_DMA_Abort_IT>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d016      	beq.n	8005770 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800574c:	4610      	mov	r0, r2
 800574e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005750:	e00e      	b.n	8005770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f990 	bl	8005a78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005758:	e00a      	b.n	8005770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f98c 	bl	8005a78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005760:	e006      	b.n	8005770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f988 	bl	8005a78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800576e:	e170      	b.n	8005a52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005770:	bf00      	nop
    return;
 8005772:	e16e      	b.n	8005a52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005778:	2b01      	cmp	r3, #1
 800577a:	f040 814a 	bne.w	8005a12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800577e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005782:	f003 0310 	and.w	r3, r3, #16
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 8143 	beq.w	8005a12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800578c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005790:	f003 0310 	and.w	r3, r3, #16
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 813c 	beq.w	8005a12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800579a:	2300      	movs	r3, #0
 800579c:	60bb      	str	r3, [r7, #8]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	60bb      	str	r3, [r7, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	60bb      	str	r3, [r7, #8]
 80057ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b40      	cmp	r3, #64	; 0x40
 80057bc:	f040 80b4 	bne.w	8005928 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 8140 	beq.w	8005a56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057de:	429a      	cmp	r2, r3
 80057e0:	f080 8139 	bcs.w	8005a56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057f6:	f000 8088 	beq.w	800590a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	330c      	adds	r3, #12
 8005800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005804:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005808:	e853 3f00 	ldrex	r3, [r3]
 800580c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005810:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005818:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	330c      	adds	r3, #12
 8005822:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005826:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800582a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005832:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005836:	e841 2300 	strex	r3, r2, [r1]
 800583a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800583e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1d9      	bne.n	80057fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3314      	adds	r3, #20
 800584c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005858:	f023 0301 	bic.w	r3, r3, #1
 800585c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3314      	adds	r3, #20
 8005866:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800586a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800586e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005872:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800587c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e1      	bne.n	8005846 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3314      	adds	r3, #20
 8005888:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005898:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3314      	adds	r3, #20
 80058a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80058a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80058a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058ae:	e841 2300 	strex	r3, r2, [r1]
 80058b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1e3      	bne.n	8005882 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2220      	movs	r2, #32
 80058be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	330c      	adds	r3, #12
 80058ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d2:	e853 3f00 	ldrex	r3, [r3]
 80058d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058da:	f023 0310 	bic.w	r3, r3, #16
 80058de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	330c      	adds	r3, #12
 80058e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80058ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058f4:	e841 2300 	strex	r3, r2, [r1]
 80058f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1e3      	bne.n	80058c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	4618      	mov	r0, r3
 8005906:	f7fd fa1c 	bl	8002d42 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005912:	b29b      	uxth	r3, r3
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	b29b      	uxth	r3, r3
 8005918:	4619      	mov	r1, r3
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f8b6 	bl	8005a8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005920:	e099      	b.n	8005a56 <HAL_UART_IRQHandler+0x50e>
 8005922:	bf00      	nop
 8005924:	08005cbb 	.word	0x08005cbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005930:	b29b      	uxth	r3, r3
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800593c:	b29b      	uxth	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	f000 808b 	beq.w	8005a5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005944:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 8086 	beq.w	8005a5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	330c      	adds	r3, #12
 8005954:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800595e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005960:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005964:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	330c      	adds	r3, #12
 800596e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005972:	647a      	str	r2, [r7, #68]	; 0x44
 8005974:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005978:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800597a:	e841 2300 	strex	r3, r2, [r1]
 800597e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1e3      	bne.n	800594e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3314      	adds	r3, #20
 800598c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	e853 3f00 	ldrex	r3, [r3]
 8005994:	623b      	str	r3, [r7, #32]
   return(result);
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	f023 0301 	bic.w	r3, r3, #1
 800599c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	3314      	adds	r3, #20
 80059a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80059aa:	633a      	str	r2, [r7, #48]	; 0x30
 80059ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059b2:	e841 2300 	strex	r3, r2, [r1]
 80059b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1e3      	bne.n	8005986 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	330c      	adds	r3, #12
 80059d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	e853 3f00 	ldrex	r3, [r3]
 80059da:	60fb      	str	r3, [r7, #12]
   return(result);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0310 	bic.w	r3, r3, #16
 80059e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	330c      	adds	r3, #12
 80059ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059f0:	61fa      	str	r2, [r7, #28]
 80059f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f4:	69b9      	ldr	r1, [r7, #24]
 80059f6:	69fa      	ldr	r2, [r7, #28]
 80059f8:	e841 2300 	strex	r3, r2, [r1]
 80059fc:	617b      	str	r3, [r7, #20]
   return(result);
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1e3      	bne.n	80059cc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f83e 	bl	8005a8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a10:	e023      	b.n	8005a5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <HAL_UART_IRQHandler+0x4ea>
 8005a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f959 	bl	8005ce2 <UART_Transmit_IT>
    return;
 8005a30:	e014      	b.n	8005a5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00e      	beq.n	8005a5c <HAL_UART_IRQHandler+0x514>
 8005a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d008      	beq.n	8005a5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f999 	bl	8005d82 <UART_EndTransmit_IT>
    return;
 8005a50:	e004      	b.n	8005a5c <HAL_UART_IRQHandler+0x514>
    return;
 8005a52:	bf00      	nop
 8005a54:	e002      	b.n	8005a5c <HAL_UART_IRQHandler+0x514>
      return;
 8005a56:	bf00      	nop
 8005a58:	e000      	b.n	8005a5c <HAL_UART_IRQHandler+0x514>
      return;
 8005a5a:	bf00      	nop
  }
}
 8005a5c:	37e8      	adds	r7, #232	; 0xe8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop

08005a64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	460b      	mov	r3, r1
 8005a96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b090      	sub	sp, #64	; 0x40
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ab4:	e050      	b.n	8005b58 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abc:	d04c      	beq.n	8005b58 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d007      	beq.n	8005ad4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ac4:	f7fc fb52 	bl	800216c <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d241      	bcs.n	8005b58 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	330c      	adds	r3, #12
 8005ada:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ade:	e853 3f00 	ldrex	r3, [r3]
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	330c      	adds	r3, #12
 8005af2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005af4:	637a      	str	r2, [r7, #52]	; 0x34
 8005af6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005afa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005afc:	e841 2300 	strex	r3, r2, [r1]
 8005b00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1e5      	bne.n	8005ad4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3314      	adds	r3, #20
 8005b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	e853 3f00 	ldrex	r3, [r3]
 8005b16:	613b      	str	r3, [r7, #16]
   return(result);
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f023 0301 	bic.w	r3, r3, #1
 8005b1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3314      	adds	r3, #20
 8005b26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b28:	623a      	str	r2, [r7, #32]
 8005b2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	69f9      	ldr	r1, [r7, #28]
 8005b2e:	6a3a      	ldr	r2, [r7, #32]
 8005b30:	e841 2300 	strex	r3, r2, [r1]
 8005b34:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e5      	bne.n	8005b08 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e00f      	b.n	8005b78 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	4013      	ands	r3, r2
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	bf0c      	ite	eq
 8005b68:	2301      	moveq	r3, #1
 8005b6a:	2300      	movne	r3, #0
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	461a      	mov	r2, r3
 8005b70:	79fb      	ldrb	r3, [r7, #7]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d09f      	beq.n	8005ab6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3740      	adds	r7, #64	; 0x40
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	88fa      	ldrh	r2, [r7, #6]
 8005b98:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	88fa      	ldrh	r2, [r7, #6]
 8005b9e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2222      	movs	r2, #34	; 0x22
 8005baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68da      	ldr	r2, [r3, #12]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bc4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	695a      	ldr	r2, [r3, #20]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0201 	orr.w	r2, r2, #1
 8005bd4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f042 0220 	orr.w	r2, r2, #32
 8005be4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b095      	sub	sp, #84	; 0x54
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	330c      	adds	r3, #12
 8005c02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c06:	e853 3f00 	ldrex	r3, [r3]
 8005c0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	330c      	adds	r3, #12
 8005c1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c1c:	643a      	str	r2, [r7, #64]	; 0x40
 8005c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c24:	e841 2300 	strex	r3, r2, [r1]
 8005c28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1e5      	bne.n	8005bfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3314      	adds	r3, #20
 8005c36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	e853 3f00 	ldrex	r3, [r3]
 8005c3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	f023 0301 	bic.w	r3, r3, #1
 8005c46:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3314      	adds	r3, #20
 8005c4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c58:	e841 2300 	strex	r3, r2, [r1]
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1e5      	bne.n	8005c30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d119      	bne.n	8005ca0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	330c      	adds	r3, #12
 8005c72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	e853 3f00 	ldrex	r3, [r3]
 8005c7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f023 0310 	bic.w	r3, r3, #16
 8005c82:	647b      	str	r3, [r7, #68]	; 0x44
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	330c      	adds	r3, #12
 8005c8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c8c:	61ba      	str	r2, [r7, #24]
 8005c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c90:	6979      	ldr	r1, [r7, #20]
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	e841 2300 	strex	r3, r2, [r1]
 8005c98:	613b      	str	r3, [r7, #16]
   return(result);
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1e5      	bne.n	8005c6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005cae:	bf00      	nop
 8005cb0:	3754      	adds	r7, #84	; 0x54
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f7ff fecf 	bl	8005a78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cda:	bf00      	nop
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b085      	sub	sp, #20
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b21      	cmp	r3, #33	; 0x21
 8005cf4:	d13e      	bne.n	8005d74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cfe:	d114      	bne.n	8005d2a <UART_Transmit_IT+0x48>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d110      	bne.n	8005d2a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	881b      	ldrh	r3, [r3, #0]
 8005d12:	461a      	mov	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	1c9a      	adds	r2, r3, #2
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	621a      	str	r2, [r3, #32]
 8005d28:	e008      	b.n	8005d3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	1c59      	adds	r1, r3, #1
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6211      	str	r1, [r2, #32]
 8005d34:	781a      	ldrb	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	3b01      	subs	r3, #1
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	4619      	mov	r1, r3
 8005d4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10f      	bne.n	8005d70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d70:	2300      	movs	r3, #0
 8005d72:	e000      	b.n	8005d76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d74:	2302      	movs	r3, #2
  }
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b082      	sub	sp, #8
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68da      	ldr	r2, [r3, #12]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7ff fe5e 	bl	8005a64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b08c      	sub	sp, #48	; 0x30
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b22      	cmp	r3, #34	; 0x22
 8005dc4:	f040 80ab 	bne.w	8005f1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd0:	d117      	bne.n	8005e02 <UART_Receive_IT+0x50>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d113      	bne.n	8005e02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfa:	1c9a      	adds	r2, r3, #2
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	629a      	str	r2, [r3, #40]	; 0x28
 8005e00:	e026      	b.n	8005e50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e14:	d007      	beq.n	8005e26 <UART_Receive_IT+0x74>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10a      	bne.n	8005e34 <UART_Receive_IT+0x82>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d106      	bne.n	8005e34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e30:	701a      	strb	r2, [r3, #0]
 8005e32:	e008      	b.n	8005e46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4a:	1c5a      	adds	r2, r3, #1
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	3b01      	subs	r3, #1
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d15a      	bne.n	8005f1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 0220 	bic.w	r2, r2, #32
 8005e72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	695a      	ldr	r2, [r3, #20]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 0201 	bic.w	r2, r2, #1
 8005e92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d135      	bne.n	8005f10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	330c      	adds	r3, #12
 8005eb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	e853 3f00 	ldrex	r3, [r3]
 8005eb8:	613b      	str	r3, [r7, #16]
   return(result);
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	f023 0310 	bic.w	r3, r3, #16
 8005ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	330c      	adds	r3, #12
 8005ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eca:	623a      	str	r2, [r7, #32]
 8005ecc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ece:	69f9      	ldr	r1, [r7, #28]
 8005ed0:	6a3a      	ldr	r2, [r7, #32]
 8005ed2:	e841 2300 	strex	r3, r2, [r1]
 8005ed6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1e5      	bne.n	8005eaa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0310 	and.w	r3, r3, #16
 8005ee8:	2b10      	cmp	r3, #16
 8005eea:	d10a      	bne.n	8005f02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005eec:	2300      	movs	r3, #0
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	60fb      	str	r3, [r7, #12]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f06:	4619      	mov	r1, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7ff fdbf 	bl	8005a8c <HAL_UARTEx_RxEventCallback>
 8005f0e:	e002      	b.n	8005f16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7fb fd09 	bl	8001928 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f16:	2300      	movs	r3, #0
 8005f18:	e002      	b.n	8005f20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	e000      	b.n	8005f20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005f1e:	2302      	movs	r3, #2
  }
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3730      	adds	r7, #48	; 0x30
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f2c:	b09f      	sub	sp, #124	; 0x7c
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f3e:	68d9      	ldr	r1, [r3, #12]
 8005f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	ea40 0301 	orr.w	r3, r0, r1
 8005f48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f4c:	689a      	ldr	r2, [r3, #8]
 8005f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	431a      	orrs	r2, r3
 8005f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f6c:	f021 010c 	bic.w	r1, r1, #12
 8005f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f76:	430b      	orrs	r3, r1
 8005f78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f86:	6999      	ldr	r1, [r3, #24]
 8005f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	ea40 0301 	orr.w	r3, r0, r1
 8005f90:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	4bc5      	ldr	r3, [pc, #788]	; (80062ac <UART_SetConfig+0x384>)
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d004      	beq.n	8005fa6 <UART_SetConfig+0x7e>
 8005f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	4bc3      	ldr	r3, [pc, #780]	; (80062b0 <UART_SetConfig+0x388>)
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d103      	bne.n	8005fae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fa6:	f7fd fd71 	bl	8003a8c <HAL_RCC_GetPCLK2Freq>
 8005faa:	6778      	str	r0, [r7, #116]	; 0x74
 8005fac:	e002      	b.n	8005fb4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fae:	f7fd fd59 	bl	8003a64 <HAL_RCC_GetPCLK1Freq>
 8005fb2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fbc:	f040 80b6 	bne.w	800612c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fc2:	461c      	mov	r4, r3
 8005fc4:	f04f 0500 	mov.w	r5, #0
 8005fc8:	4622      	mov	r2, r4
 8005fca:	462b      	mov	r3, r5
 8005fcc:	1891      	adds	r1, r2, r2
 8005fce:	6439      	str	r1, [r7, #64]	; 0x40
 8005fd0:	415b      	adcs	r3, r3
 8005fd2:	647b      	str	r3, [r7, #68]	; 0x44
 8005fd4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005fd8:	1912      	adds	r2, r2, r4
 8005fda:	eb45 0303 	adc.w	r3, r5, r3
 8005fde:	f04f 0000 	mov.w	r0, #0
 8005fe2:	f04f 0100 	mov.w	r1, #0
 8005fe6:	00d9      	lsls	r1, r3, #3
 8005fe8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fec:	00d0      	lsls	r0, r2, #3
 8005fee:	4602      	mov	r2, r0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	1911      	adds	r1, r2, r4
 8005ff4:	6639      	str	r1, [r7, #96]	; 0x60
 8005ff6:	416b      	adcs	r3, r5
 8005ff8:	667b      	str	r3, [r7, #100]	; 0x64
 8005ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	461a      	mov	r2, r3
 8006000:	f04f 0300 	mov.w	r3, #0
 8006004:	1891      	adds	r1, r2, r2
 8006006:	63b9      	str	r1, [r7, #56]	; 0x38
 8006008:	415b      	adcs	r3, r3
 800600a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800600c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006010:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006014:	f7fa fdb8 	bl	8000b88 <__aeabi_uldivmod>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	4ba5      	ldr	r3, [pc, #660]	; (80062b4 <UART_SetConfig+0x38c>)
 800601e:	fba3 2302 	umull	r2, r3, r3, r2
 8006022:	095b      	lsrs	r3, r3, #5
 8006024:	011e      	lsls	r6, r3, #4
 8006026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006028:	461c      	mov	r4, r3
 800602a:	f04f 0500 	mov.w	r5, #0
 800602e:	4622      	mov	r2, r4
 8006030:	462b      	mov	r3, r5
 8006032:	1891      	adds	r1, r2, r2
 8006034:	6339      	str	r1, [r7, #48]	; 0x30
 8006036:	415b      	adcs	r3, r3
 8006038:	637b      	str	r3, [r7, #52]	; 0x34
 800603a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800603e:	1912      	adds	r2, r2, r4
 8006040:	eb45 0303 	adc.w	r3, r5, r3
 8006044:	f04f 0000 	mov.w	r0, #0
 8006048:	f04f 0100 	mov.w	r1, #0
 800604c:	00d9      	lsls	r1, r3, #3
 800604e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006052:	00d0      	lsls	r0, r2, #3
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	1911      	adds	r1, r2, r4
 800605a:	65b9      	str	r1, [r7, #88]	; 0x58
 800605c:	416b      	adcs	r3, r5
 800605e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	461a      	mov	r2, r3
 8006066:	f04f 0300 	mov.w	r3, #0
 800606a:	1891      	adds	r1, r2, r2
 800606c:	62b9      	str	r1, [r7, #40]	; 0x28
 800606e:	415b      	adcs	r3, r3
 8006070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006072:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006076:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800607a:	f7fa fd85 	bl	8000b88 <__aeabi_uldivmod>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	4b8c      	ldr	r3, [pc, #560]	; (80062b4 <UART_SetConfig+0x38c>)
 8006084:	fba3 1302 	umull	r1, r3, r3, r2
 8006088:	095b      	lsrs	r3, r3, #5
 800608a:	2164      	movs	r1, #100	; 0x64
 800608c:	fb01 f303 	mul.w	r3, r1, r3
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	3332      	adds	r3, #50	; 0x32
 8006096:	4a87      	ldr	r2, [pc, #540]	; (80062b4 <UART_SetConfig+0x38c>)
 8006098:	fba2 2303 	umull	r2, r3, r2, r3
 800609c:	095b      	lsrs	r3, r3, #5
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060a4:	441e      	add	r6, r3
 80060a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060a8:	4618      	mov	r0, r3
 80060aa:	f04f 0100 	mov.w	r1, #0
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	1894      	adds	r4, r2, r2
 80060b4:	623c      	str	r4, [r7, #32]
 80060b6:	415b      	adcs	r3, r3
 80060b8:	627b      	str	r3, [r7, #36]	; 0x24
 80060ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060be:	1812      	adds	r2, r2, r0
 80060c0:	eb41 0303 	adc.w	r3, r1, r3
 80060c4:	f04f 0400 	mov.w	r4, #0
 80060c8:	f04f 0500 	mov.w	r5, #0
 80060cc:	00dd      	lsls	r5, r3, #3
 80060ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060d2:	00d4      	lsls	r4, r2, #3
 80060d4:	4622      	mov	r2, r4
 80060d6:	462b      	mov	r3, r5
 80060d8:	1814      	adds	r4, r2, r0
 80060da:	653c      	str	r4, [r7, #80]	; 0x50
 80060dc:	414b      	adcs	r3, r1
 80060de:	657b      	str	r3, [r7, #84]	; 0x54
 80060e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	461a      	mov	r2, r3
 80060e6:	f04f 0300 	mov.w	r3, #0
 80060ea:	1891      	adds	r1, r2, r2
 80060ec:	61b9      	str	r1, [r7, #24]
 80060ee:	415b      	adcs	r3, r3
 80060f0:	61fb      	str	r3, [r7, #28]
 80060f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80060fa:	f7fa fd45 	bl	8000b88 <__aeabi_uldivmod>
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	4b6c      	ldr	r3, [pc, #432]	; (80062b4 <UART_SetConfig+0x38c>)
 8006104:	fba3 1302 	umull	r1, r3, r3, r2
 8006108:	095b      	lsrs	r3, r3, #5
 800610a:	2164      	movs	r1, #100	; 0x64
 800610c:	fb01 f303 	mul.w	r3, r1, r3
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	3332      	adds	r3, #50	; 0x32
 8006116:	4a67      	ldr	r2, [pc, #412]	; (80062b4 <UART_SetConfig+0x38c>)
 8006118:	fba2 2303 	umull	r2, r3, r2, r3
 800611c:	095b      	lsrs	r3, r3, #5
 800611e:	f003 0207 	and.w	r2, r3, #7
 8006122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4432      	add	r2, r6
 8006128:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800612a:	e0b9      	b.n	80062a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800612c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800612e:	461c      	mov	r4, r3
 8006130:	f04f 0500 	mov.w	r5, #0
 8006134:	4622      	mov	r2, r4
 8006136:	462b      	mov	r3, r5
 8006138:	1891      	adds	r1, r2, r2
 800613a:	6139      	str	r1, [r7, #16]
 800613c:	415b      	adcs	r3, r3
 800613e:	617b      	str	r3, [r7, #20]
 8006140:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006144:	1912      	adds	r2, r2, r4
 8006146:	eb45 0303 	adc.w	r3, r5, r3
 800614a:	f04f 0000 	mov.w	r0, #0
 800614e:	f04f 0100 	mov.w	r1, #0
 8006152:	00d9      	lsls	r1, r3, #3
 8006154:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006158:	00d0      	lsls	r0, r2, #3
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	eb12 0804 	adds.w	r8, r2, r4
 8006162:	eb43 0905 	adc.w	r9, r3, r5
 8006166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	4618      	mov	r0, r3
 800616c:	f04f 0100 	mov.w	r1, #0
 8006170:	f04f 0200 	mov.w	r2, #0
 8006174:	f04f 0300 	mov.w	r3, #0
 8006178:	008b      	lsls	r3, r1, #2
 800617a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800617e:	0082      	lsls	r2, r0, #2
 8006180:	4640      	mov	r0, r8
 8006182:	4649      	mov	r1, r9
 8006184:	f7fa fd00 	bl	8000b88 <__aeabi_uldivmod>
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	4b49      	ldr	r3, [pc, #292]	; (80062b4 <UART_SetConfig+0x38c>)
 800618e:	fba3 2302 	umull	r2, r3, r3, r2
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	011e      	lsls	r6, r3, #4
 8006196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006198:	4618      	mov	r0, r3
 800619a:	f04f 0100 	mov.w	r1, #0
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	1894      	adds	r4, r2, r2
 80061a4:	60bc      	str	r4, [r7, #8]
 80061a6:	415b      	adcs	r3, r3
 80061a8:	60fb      	str	r3, [r7, #12]
 80061aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061ae:	1812      	adds	r2, r2, r0
 80061b0:	eb41 0303 	adc.w	r3, r1, r3
 80061b4:	f04f 0400 	mov.w	r4, #0
 80061b8:	f04f 0500 	mov.w	r5, #0
 80061bc:	00dd      	lsls	r5, r3, #3
 80061be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80061c2:	00d4      	lsls	r4, r2, #3
 80061c4:	4622      	mov	r2, r4
 80061c6:	462b      	mov	r3, r5
 80061c8:	1814      	adds	r4, r2, r0
 80061ca:	64bc      	str	r4, [r7, #72]	; 0x48
 80061cc:	414b      	adcs	r3, r1
 80061ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f04f 0100 	mov.w	r1, #0
 80061da:	f04f 0200 	mov.w	r2, #0
 80061de:	f04f 0300 	mov.w	r3, #0
 80061e2:	008b      	lsls	r3, r1, #2
 80061e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80061e8:	0082      	lsls	r2, r0, #2
 80061ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80061ee:	f7fa fccb 	bl	8000b88 <__aeabi_uldivmod>
 80061f2:	4602      	mov	r2, r0
 80061f4:	460b      	mov	r3, r1
 80061f6:	4b2f      	ldr	r3, [pc, #188]	; (80062b4 <UART_SetConfig+0x38c>)
 80061f8:	fba3 1302 	umull	r1, r3, r3, r2
 80061fc:	095b      	lsrs	r3, r3, #5
 80061fe:	2164      	movs	r1, #100	; 0x64
 8006200:	fb01 f303 	mul.w	r3, r1, r3
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	011b      	lsls	r3, r3, #4
 8006208:	3332      	adds	r3, #50	; 0x32
 800620a:	4a2a      	ldr	r2, [pc, #168]	; (80062b4 <UART_SetConfig+0x38c>)
 800620c:	fba2 2303 	umull	r2, r3, r2, r3
 8006210:	095b      	lsrs	r3, r3, #5
 8006212:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006216:	441e      	add	r6, r3
 8006218:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800621a:	4618      	mov	r0, r3
 800621c:	f04f 0100 	mov.w	r1, #0
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	1894      	adds	r4, r2, r2
 8006226:	603c      	str	r4, [r7, #0]
 8006228:	415b      	adcs	r3, r3
 800622a:	607b      	str	r3, [r7, #4]
 800622c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006230:	1812      	adds	r2, r2, r0
 8006232:	eb41 0303 	adc.w	r3, r1, r3
 8006236:	f04f 0400 	mov.w	r4, #0
 800623a:	f04f 0500 	mov.w	r5, #0
 800623e:	00dd      	lsls	r5, r3, #3
 8006240:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006244:	00d4      	lsls	r4, r2, #3
 8006246:	4622      	mov	r2, r4
 8006248:	462b      	mov	r3, r5
 800624a:	eb12 0a00 	adds.w	sl, r2, r0
 800624e:	eb43 0b01 	adc.w	fp, r3, r1
 8006252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	4618      	mov	r0, r3
 8006258:	f04f 0100 	mov.w	r1, #0
 800625c:	f04f 0200 	mov.w	r2, #0
 8006260:	f04f 0300 	mov.w	r3, #0
 8006264:	008b      	lsls	r3, r1, #2
 8006266:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800626a:	0082      	lsls	r2, r0, #2
 800626c:	4650      	mov	r0, sl
 800626e:	4659      	mov	r1, fp
 8006270:	f7fa fc8a 	bl	8000b88 <__aeabi_uldivmod>
 8006274:	4602      	mov	r2, r0
 8006276:	460b      	mov	r3, r1
 8006278:	4b0e      	ldr	r3, [pc, #56]	; (80062b4 <UART_SetConfig+0x38c>)
 800627a:	fba3 1302 	umull	r1, r3, r3, r2
 800627e:	095b      	lsrs	r3, r3, #5
 8006280:	2164      	movs	r1, #100	; 0x64
 8006282:	fb01 f303 	mul.w	r3, r1, r3
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	011b      	lsls	r3, r3, #4
 800628a:	3332      	adds	r3, #50	; 0x32
 800628c:	4a09      	ldr	r2, [pc, #36]	; (80062b4 <UART_SetConfig+0x38c>)
 800628e:	fba2 2303 	umull	r2, r3, r2, r3
 8006292:	095b      	lsrs	r3, r3, #5
 8006294:	f003 020f 	and.w	r2, r3, #15
 8006298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4432      	add	r2, r6
 800629e:	609a      	str	r2, [r3, #8]
}
 80062a0:	bf00      	nop
 80062a2:	377c      	adds	r7, #124	; 0x7c
 80062a4:	46bd      	mov	sp, r7
 80062a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062aa:	bf00      	nop
 80062ac:	40011000 	.word	0x40011000
 80062b0:	40011400 	.word	0x40011400
 80062b4:	51eb851f 	.word	0x51eb851f

080062b8 <__NVIC_SetPriority>:
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	4603      	mov	r3, r0
 80062c0:	6039      	str	r1, [r7, #0]
 80062c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	db0a      	blt.n	80062e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	b2da      	uxtb	r2, r3
 80062d0:	490c      	ldr	r1, [pc, #48]	; (8006304 <__NVIC_SetPriority+0x4c>)
 80062d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062d6:	0112      	lsls	r2, r2, #4
 80062d8:	b2d2      	uxtb	r2, r2
 80062da:	440b      	add	r3, r1
 80062dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80062e0:	e00a      	b.n	80062f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	4908      	ldr	r1, [pc, #32]	; (8006308 <__NVIC_SetPriority+0x50>)
 80062e8:	79fb      	ldrb	r3, [r7, #7]
 80062ea:	f003 030f 	and.w	r3, r3, #15
 80062ee:	3b04      	subs	r3, #4
 80062f0:	0112      	lsls	r2, r2, #4
 80062f2:	b2d2      	uxtb	r2, r2
 80062f4:	440b      	add	r3, r1
 80062f6:	761a      	strb	r2, [r3, #24]
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	e000e100 	.word	0xe000e100
 8006308:	e000ed00 	.word	0xe000ed00

0800630c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800630c:	b580      	push	{r7, lr}
 800630e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006310:	2100      	movs	r1, #0
 8006312:	f06f 0004 	mvn.w	r0, #4
 8006316:	f7ff ffcf 	bl	80062b8 <__NVIC_SetPriority>
#endif
}
 800631a:	bf00      	nop
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006326:	f3ef 8305 	mrs	r3, IPSR
 800632a:	603b      	str	r3, [r7, #0]
  return(result);
 800632c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006332:	f06f 0305 	mvn.w	r3, #5
 8006336:	607b      	str	r3, [r7, #4]
 8006338:	e00c      	b.n	8006354 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800633a:	4b0a      	ldr	r3, [pc, #40]	; (8006364 <osKernelInitialize+0x44>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d105      	bne.n	800634e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006342:	4b08      	ldr	r3, [pc, #32]	; (8006364 <osKernelInitialize+0x44>)
 8006344:	2201      	movs	r2, #1
 8006346:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006348:	2300      	movs	r3, #0
 800634a:	607b      	str	r3, [r7, #4]
 800634c:	e002      	b.n	8006354 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800634e:	f04f 33ff 	mov.w	r3, #4294967295
 8006352:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006354:	687b      	ldr	r3, [r7, #4]
}
 8006356:	4618      	mov	r0, r3
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	200000b0 	.word	0x200000b0

08006368 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800636e:	f3ef 8305 	mrs	r3, IPSR
 8006372:	603b      	str	r3, [r7, #0]
  return(result);
 8006374:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006376:	2b00      	cmp	r3, #0
 8006378:	d003      	beq.n	8006382 <osKernelStart+0x1a>
    stat = osErrorISR;
 800637a:	f06f 0305 	mvn.w	r3, #5
 800637e:	607b      	str	r3, [r7, #4]
 8006380:	e010      	b.n	80063a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006382:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <osKernelStart+0x48>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d109      	bne.n	800639e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800638a:	f7ff ffbf 	bl	800630c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800638e:	4b08      	ldr	r3, [pc, #32]	; (80063b0 <osKernelStart+0x48>)
 8006390:	2202      	movs	r2, #2
 8006392:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006394:	f001 f866 	bl	8007464 <vTaskStartScheduler>
      stat = osOK;
 8006398:	2300      	movs	r3, #0
 800639a:	607b      	str	r3, [r7, #4]
 800639c:	e002      	b.n	80063a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800639e:	f04f 33ff 	mov.w	r3, #4294967295
 80063a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80063a4:	687b      	ldr	r3, [r7, #4]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3708      	adds	r7, #8
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	200000b0 	.word	0x200000b0

080063b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b08e      	sub	sp, #56	; 0x38
 80063b8:	af04      	add	r7, sp, #16
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80063c0:	2300      	movs	r3, #0
 80063c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063c4:	f3ef 8305 	mrs	r3, IPSR
 80063c8:	617b      	str	r3, [r7, #20]
  return(result);
 80063ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d17e      	bne.n	80064ce <osThreadNew+0x11a>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d07b      	beq.n	80064ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80063d6:	2380      	movs	r3, #128	; 0x80
 80063d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80063da:	2318      	movs	r3, #24
 80063dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80063de:	2300      	movs	r3, #0
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80063e2:	f04f 33ff 	mov.w	r3, #4294967295
 80063e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d045      	beq.n	800647a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <osThreadNew+0x48>
        name = attr->name;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d002      	beq.n	800640a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d008      	beq.n	8006422 <osThreadNew+0x6e>
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	2b38      	cmp	r3, #56	; 0x38
 8006414:	d805      	bhi.n	8006422 <osThreadNew+0x6e>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <osThreadNew+0x72>
        return (NULL);
 8006422:	2300      	movs	r3, #0
 8006424:	e054      	b.n	80064d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	089b      	lsrs	r3, r3, #2
 8006434:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00e      	beq.n	800645c <osThreadNew+0xa8>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	2b5b      	cmp	r3, #91	; 0x5b
 8006444:	d90a      	bls.n	800645c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800644a:	2b00      	cmp	r3, #0
 800644c:	d006      	beq.n	800645c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <osThreadNew+0xa8>
        mem = 1;
 8006456:	2301      	movs	r3, #1
 8006458:	61bb      	str	r3, [r7, #24]
 800645a:	e010      	b.n	800647e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10c      	bne.n	800647e <osThreadNew+0xca>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d108      	bne.n	800647e <osThreadNew+0xca>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d104      	bne.n	800647e <osThreadNew+0xca>
          mem = 0;
 8006474:	2300      	movs	r3, #0
 8006476:	61bb      	str	r3, [r7, #24]
 8006478:	e001      	b.n	800647e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800647a:	2300      	movs	r3, #0
 800647c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d110      	bne.n	80064a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800648c:	9202      	str	r2, [sp, #8]
 800648e:	9301      	str	r3, [sp, #4]
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	6a3a      	ldr	r2, [r7, #32]
 8006498:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 fe0c 	bl	80070b8 <xTaskCreateStatic>
 80064a0:	4603      	mov	r3, r0
 80064a2:	613b      	str	r3, [r7, #16]
 80064a4:	e013      	b.n	80064ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d110      	bne.n	80064ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	f107 0310 	add.w	r3, r7, #16
 80064b4:	9301      	str	r3, [sp, #4]
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 fe57 	bl	8007172 <xTaskCreate>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d001      	beq.n	80064ce <osThreadNew+0x11a>
            hTask = NULL;
 80064ca:	2300      	movs	r3, #0
 80064cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80064ce:	693b      	ldr	r3, [r7, #16]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3728      	adds	r7, #40	; 0x28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064e0:	f3ef 8305 	mrs	r3, IPSR
 80064e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80064e6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d003      	beq.n	80064f4 <osDelay+0x1c>
    stat = osErrorISR;
 80064ec:	f06f 0305 	mvn.w	r3, #5
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	e007      	b.n	8006504 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d002      	beq.n	8006504 <osDelay+0x2c>
      vTaskDelay(ticks);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 ff7c 	bl	80073fc <vTaskDelay>
    }
  }

  return (stat);
 8006504:	68fb      	ldr	r3, [r7, #12]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4a07      	ldr	r2, [pc, #28]	; (800653c <vApplicationGetIdleTaskMemory+0x2c>)
 8006520:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	4a06      	ldr	r2, [pc, #24]	; (8006540 <vApplicationGetIdleTaskMemory+0x30>)
 8006526:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2280      	movs	r2, #128	; 0x80
 800652c:	601a      	str	r2, [r3, #0]
}
 800652e:	bf00      	nop
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	200000b4 	.word	0x200000b4
 8006540:	20000110 	.word	0x20000110

08006544 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4a07      	ldr	r2, [pc, #28]	; (8006570 <vApplicationGetTimerTaskMemory+0x2c>)
 8006554:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	4a06      	ldr	r2, [pc, #24]	; (8006574 <vApplicationGetTimerTaskMemory+0x30>)
 800655a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006562:	601a      	str	r2, [r3, #0]
}
 8006564:	bf00      	nop
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	20000310 	.word	0x20000310
 8006574:	2000036c 	.word	0x2000036c

08006578 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f103 0208 	add.w	r2, r3, #8
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f04f 32ff 	mov.w	r2, #4294967295
 8006590:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f103 0208 	add.w	r2, r3, #8
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f103 0208 	add.w	r2, r3, #8
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80065c6:	bf00      	nop
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065d2:	b480      	push	{r7}
 80065d4:	b085      	sub	sp, #20
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
 80065da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	1c5a      	adds	r2, r3, #1
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	601a      	str	r2, [r3, #0]
}
 800660e:	bf00      	nop
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800661a:	b480      	push	{r7}
 800661c:	b085      	sub	sp, #20
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006630:	d103      	bne.n	800663a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	e00c      	b.n	8006654 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3308      	adds	r3, #8
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	e002      	b.n	8006648 <vListInsert+0x2e>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	429a      	cmp	r2, r3
 8006652:	d2f6      	bcs.n	8006642 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	601a      	str	r2, [r3, #0]
}
 8006680:	bf00      	nop
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6892      	ldr	r2, [r2, #8]
 80066a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	6852      	ldr	r2, [r2, #4]
 80066ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d103      	bne.n	80066c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689a      	ldr	r2, [r3, #8]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	1e5a      	subs	r2, r3, #1
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10a      	bne.n	800670a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006706:	bf00      	nop
 8006708:	e7fe      	b.n	8006708 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800670a:	f002 f84b 	bl	80087a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006716:	68f9      	ldr	r1, [r7, #12]
 8006718:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800671a:	fb01 f303 	mul.w	r3, r1, r3
 800671e:	441a      	add	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673a:	3b01      	subs	r3, #1
 800673c:	68f9      	ldr	r1, [r7, #12]
 800673e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006740:	fb01 f303 	mul.w	r3, r1, r3
 8006744:	441a      	add	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	22ff      	movs	r2, #255	; 0xff
 800674e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	22ff      	movs	r2, #255	; 0xff
 8006756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d114      	bne.n	800678a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d01a      	beq.n	800679e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	3310      	adds	r3, #16
 800676c:	4618      	mov	r0, r3
 800676e:	f001 f903 	bl	8007978 <xTaskRemoveFromEventList>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d012      	beq.n	800679e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006778:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <xQueueGenericReset+0xcc>)
 800677a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800677e:	601a      	str	r2, [r3, #0]
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	e009      	b.n	800679e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	3310      	adds	r3, #16
 800678e:	4618      	mov	r0, r3
 8006790:	f7ff fef2 	bl	8006578 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	3324      	adds	r3, #36	; 0x24
 8006798:	4618      	mov	r0, r3
 800679a:	f7ff feed 	bl	8006578 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800679e:	f002 f831 	bl	8008804 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80067a2:	2301      	movs	r3, #1
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	e000ed04 	.word	0xe000ed04

080067b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08e      	sub	sp, #56	; 0x38
 80067b4:	af02      	add	r7, sp, #8
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10a      	bne.n	80067da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80067d6:	bf00      	nop
 80067d8:	e7fe      	b.n	80067d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10a      	bne.n	80067f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80067e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067f2:	bf00      	nop
 80067f4:	e7fe      	b.n	80067f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <xQueueGenericCreateStatic+0x52>
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <xQueueGenericCreateStatic+0x56>
 8006802:	2301      	movs	r3, #1
 8006804:	e000      	b.n	8006808 <xQueueGenericCreateStatic+0x58>
 8006806:	2300      	movs	r3, #0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10a      	bne.n	8006822 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800680c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	623b      	str	r3, [r7, #32]
}
 800681e:	bf00      	nop
 8006820:	e7fe      	b.n	8006820 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d102      	bne.n	800682e <xQueueGenericCreateStatic+0x7e>
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <xQueueGenericCreateStatic+0x82>
 800682e:	2301      	movs	r3, #1
 8006830:	e000      	b.n	8006834 <xQueueGenericCreateStatic+0x84>
 8006832:	2300      	movs	r3, #0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	61fb      	str	r3, [r7, #28]
}
 800684a:	bf00      	nop
 800684c:	e7fe      	b.n	800684c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800684e:	2350      	movs	r3, #80	; 0x50
 8006850:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2b50      	cmp	r3, #80	; 0x50
 8006856:	d00a      	beq.n	800686e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	61bb      	str	r3, [r7, #24]
}
 800686a:	bf00      	nop
 800686c:	e7fe      	b.n	800686c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800686e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00d      	beq.n	8006896 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800687a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006882:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	4613      	mov	r3, r2
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	68b9      	ldr	r1, [r7, #8]
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 f805 	bl	80068a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006898:	4618      	mov	r0, r3
 800689a:	3730      	adds	r7, #48	; 0x30
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
 80068ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d103      	bne.n	80068bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	e002      	b.n	80068c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068ce:	2101      	movs	r1, #1
 80068d0:	69b8      	ldr	r0, [r7, #24]
 80068d2:	f7ff ff05 	bl	80066e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	78fa      	ldrb	r2, [r7, #3]
 80068da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80068de:	bf00      	nop
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
	...

080068e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08e      	sub	sp, #56	; 0x38
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068f6:	2300      	movs	r3, #0
 80068f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10a      	bne.n	800691a <xQueueGenericSend+0x32>
	__asm volatile
 8006904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006916:	bf00      	nop
 8006918:	e7fe      	b.n	8006918 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d103      	bne.n	8006928 <xQueueGenericSend+0x40>
 8006920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006924:	2b00      	cmp	r3, #0
 8006926:	d101      	bne.n	800692c <xQueueGenericSend+0x44>
 8006928:	2301      	movs	r3, #1
 800692a:	e000      	b.n	800692e <xQueueGenericSend+0x46>
 800692c:	2300      	movs	r3, #0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10a      	bne.n	8006948 <xQueueGenericSend+0x60>
	__asm volatile
 8006932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006944:	bf00      	nop
 8006946:	e7fe      	b.n	8006946 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2b02      	cmp	r3, #2
 800694c:	d103      	bne.n	8006956 <xQueueGenericSend+0x6e>
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006952:	2b01      	cmp	r3, #1
 8006954:	d101      	bne.n	800695a <xQueueGenericSend+0x72>
 8006956:	2301      	movs	r3, #1
 8006958:	e000      	b.n	800695c <xQueueGenericSend+0x74>
 800695a:	2300      	movs	r3, #0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10a      	bne.n	8006976 <xQueueGenericSend+0x8e>
	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	623b      	str	r3, [r7, #32]
}
 8006972:	bf00      	nop
 8006974:	e7fe      	b.n	8006974 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006976:	f001 f9bd 	bl	8007cf4 <xTaskGetSchedulerState>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d102      	bne.n	8006986 <xQueueGenericSend+0x9e>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <xQueueGenericSend+0xa2>
 8006986:	2301      	movs	r3, #1
 8006988:	e000      	b.n	800698c <xQueueGenericSend+0xa4>
 800698a:	2300      	movs	r3, #0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10a      	bne.n	80069a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	61fb      	str	r3, [r7, #28]
}
 80069a2:	bf00      	nop
 80069a4:	e7fe      	b.n	80069a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069a6:	f001 fefd 	bl	80087a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d302      	bcc.n	80069bc <xQueueGenericSend+0xd4>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d129      	bne.n	8006a10 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	68b9      	ldr	r1, [r7, #8]
 80069c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069c2:	f000 fa0b 	bl	8006ddc <prvCopyDataToQueue>
 80069c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d010      	beq.n	80069f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	3324      	adds	r3, #36	; 0x24
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 ffcf 	bl	8007978 <xTaskRemoveFromEventList>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d013      	beq.n	8006a08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069e0:	4b3f      	ldr	r3, [pc, #252]	; (8006ae0 <xQueueGenericSend+0x1f8>)
 80069e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	e00a      	b.n	8006a08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d007      	beq.n	8006a08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069f8:	4b39      	ldr	r3, [pc, #228]	; (8006ae0 <xQueueGenericSend+0x1f8>)
 80069fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a08:	f001 fefc 	bl	8008804 <vPortExitCritical>
				return pdPASS;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e063      	b.n	8006ad8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d103      	bne.n	8006a1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a16:	f001 fef5 	bl	8008804 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e05c      	b.n	8006ad8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d106      	bne.n	8006a32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a24:	f107 0314 	add.w	r3, r7, #20
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f001 f809 	bl	8007a40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a32:	f001 fee7 	bl	8008804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a36:	f000 fd7b 	bl	8007530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a3a:	f001 feb3 	bl	80087a4 <vPortEnterCritical>
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a44:	b25b      	sxtb	r3, r3
 8006a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4a:	d103      	bne.n	8006a54 <xQueueGenericSend+0x16c>
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a5a:	b25b      	sxtb	r3, r3
 8006a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a60:	d103      	bne.n	8006a6a <xQueueGenericSend+0x182>
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a6a:	f001 fecb 	bl	8008804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a6e:	1d3a      	adds	r2, r7, #4
 8006a70:	f107 0314 	add.w	r3, r7, #20
 8006a74:	4611      	mov	r1, r2
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 fff8 	bl	8007a6c <xTaskCheckForTimeOut>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d124      	bne.n	8006acc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a84:	f000 faa2 	bl	8006fcc <prvIsQueueFull>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d018      	beq.n	8006ac0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	3310      	adds	r3, #16
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	4611      	mov	r1, r2
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 ff1e 	bl	80078d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a9e:	f000 fa2d 	bl	8006efc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006aa2:	f000 fd53 	bl	800754c <xTaskResumeAll>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f47f af7c 	bne.w	80069a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006aae:	4b0c      	ldr	r3, [pc, #48]	; (8006ae0 <xQueueGenericSend+0x1f8>)
 8006ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	e772      	b.n	80069a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ac2:	f000 fa1b 	bl	8006efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ac6:	f000 fd41 	bl	800754c <xTaskResumeAll>
 8006aca:	e76c      	b.n	80069a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ace:	f000 fa15 	bl	8006efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ad2:	f000 fd3b 	bl	800754c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ad6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3738      	adds	r7, #56	; 0x38
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	e000ed04 	.word	0xe000ed04

08006ae4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b090      	sub	sp, #64	; 0x40
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10a      	bne.n	8006b12 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b0e:	bf00      	nop
 8006b10:	e7fe      	b.n	8006b10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d103      	bne.n	8006b20 <xQueueGenericSendFromISR+0x3c>
 8006b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <xQueueGenericSendFromISR+0x40>
 8006b20:	2301      	movs	r3, #1
 8006b22:	e000      	b.n	8006b26 <xQueueGenericSendFromISR+0x42>
 8006b24:	2300      	movs	r3, #0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10a      	bne.n	8006b40 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b3c:	bf00      	nop
 8006b3e:	e7fe      	b.n	8006b3e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d103      	bne.n	8006b4e <xQueueGenericSendFromISR+0x6a>
 8006b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d101      	bne.n	8006b52 <xQueueGenericSendFromISR+0x6e>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e000      	b.n	8006b54 <xQueueGenericSendFromISR+0x70>
 8006b52:	2300      	movs	r3, #0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10a      	bne.n	8006b6e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	623b      	str	r3, [r7, #32]
}
 8006b6a:	bf00      	nop
 8006b6c:	e7fe      	b.n	8006b6c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b6e:	f001 fefb 	bl	8008968 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b72:	f3ef 8211 	mrs	r2, BASEPRI
 8006b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	61fa      	str	r2, [r7, #28]
 8006b88:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b8a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b8c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d302      	bcc.n	8006ba0 <xQueueGenericSendFromISR+0xbc>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d12f      	bne.n	8006c00 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	68b9      	ldr	r1, [r7, #8]
 8006bb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006bb6:	f000 f911 	bl	8006ddc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006bba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc2:	d112      	bne.n	8006bea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d016      	beq.n	8006bfa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bce:	3324      	adds	r3, #36	; 0x24
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 fed1 	bl	8007978 <xTaskRemoveFromEventList>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00e      	beq.n	8006bfa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00b      	beq.n	8006bfa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	e007      	b.n	8006bfa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006bea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006bee:	3301      	adds	r3, #1
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	b25a      	sxtb	r2, r3
 8006bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006bfe:	e001      	b.n	8006c04 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c00:	2300      	movs	r3, #0
 8006c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c06:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3740      	adds	r7, #64	; 0x40
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
	...

08006c1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b08c      	sub	sp, #48	; 0x30
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10a      	bne.n	8006c4c <xQueueReceive+0x30>
	__asm volatile
 8006c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	623b      	str	r3, [r7, #32]
}
 8006c48:	bf00      	nop
 8006c4a:	e7fe      	b.n	8006c4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d103      	bne.n	8006c5a <xQueueReceive+0x3e>
 8006c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <xQueueReceive+0x42>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e000      	b.n	8006c60 <xQueueReceive+0x44>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10a      	bne.n	8006c7a <xQueueReceive+0x5e>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	61fb      	str	r3, [r7, #28]
}
 8006c76:	bf00      	nop
 8006c78:	e7fe      	b.n	8006c78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c7a:	f001 f83b 	bl	8007cf4 <xTaskGetSchedulerState>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d102      	bne.n	8006c8a <xQueueReceive+0x6e>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <xQueueReceive+0x72>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e000      	b.n	8006c90 <xQueueReceive+0x74>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10a      	bne.n	8006caa <xQueueReceive+0x8e>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	61bb      	str	r3, [r7, #24]
}
 8006ca6:	bf00      	nop
 8006ca8:	e7fe      	b.n	8006ca8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006caa:	f001 fd7b 	bl	80087a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d01f      	beq.n	8006cfa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cba:	68b9      	ldr	r1, [r7, #8]
 8006cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cbe:	f000 f8f7 	bl	8006eb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	1e5a      	subs	r2, r3, #1
 8006cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00f      	beq.n	8006cf2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	3310      	adds	r3, #16
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 fe4e 	bl	8007978 <xTaskRemoveFromEventList>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d007      	beq.n	8006cf2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ce2:	4b3d      	ldr	r3, [pc, #244]	; (8006dd8 <xQueueReceive+0x1bc>)
 8006ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006cf2:	f001 fd87 	bl	8008804 <vPortExitCritical>
				return pdPASS;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e069      	b.n	8006dce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d103      	bne.n	8006d08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d00:	f001 fd80 	bl	8008804 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d04:	2300      	movs	r3, #0
 8006d06:	e062      	b.n	8006dce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d106      	bne.n	8006d1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d0e:	f107 0310 	add.w	r3, r7, #16
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 fe94 	bl	8007a40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d1c:	f001 fd72 	bl	8008804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d20:	f000 fc06 	bl	8007530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d24:	f001 fd3e 	bl	80087a4 <vPortEnterCritical>
 8006d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d2e:	b25b      	sxtb	r3, r3
 8006d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d34:	d103      	bne.n	8006d3e <xQueueReceive+0x122>
 8006d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d44:	b25b      	sxtb	r3, r3
 8006d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4a:	d103      	bne.n	8006d54 <xQueueReceive+0x138>
 8006d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d54:	f001 fd56 	bl	8008804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d58:	1d3a      	adds	r2, r7, #4
 8006d5a:	f107 0310 	add.w	r3, r7, #16
 8006d5e:	4611      	mov	r1, r2
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 fe83 	bl	8007a6c <xTaskCheckForTimeOut>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d123      	bne.n	8006db4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d6e:	f000 f917 	bl	8006fa0 <prvIsQueueEmpty>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d017      	beq.n	8006da8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7a:	3324      	adds	r3, #36	; 0x24
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	4611      	mov	r1, r2
 8006d80:	4618      	mov	r0, r3
 8006d82:	f000 fda9 	bl	80078d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d88:	f000 f8b8 	bl	8006efc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d8c:	f000 fbde 	bl	800754c <xTaskResumeAll>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d189      	bne.n	8006caa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006d96:	4b10      	ldr	r3, [pc, #64]	; (8006dd8 <xQueueReceive+0x1bc>)
 8006d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	e780      	b.n	8006caa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006daa:	f000 f8a7 	bl	8006efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dae:	f000 fbcd 	bl	800754c <xTaskResumeAll>
 8006db2:	e77a      	b.n	8006caa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006db6:	f000 f8a1 	bl	8006efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dba:	f000 fbc7 	bl	800754c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006dbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dc0:	f000 f8ee 	bl	8006fa0 <prvIsQueueEmpty>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f43f af6f 	beq.w	8006caa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006dcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3730      	adds	r7, #48	; 0x30
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	e000ed04 	.word	0xe000ed04

08006ddc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006de8:	2300      	movs	r3, #0
 8006dea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10d      	bne.n	8006e16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d14d      	bne.n	8006e9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 ff92 	bl	8007d30 <xTaskPriorityDisinherit>
 8006e0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	609a      	str	r2, [r3, #8]
 8006e14:	e043      	b.n	8006e9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d119      	bne.n	8006e50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6858      	ldr	r0, [r3, #4]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e24:	461a      	mov	r2, r3
 8006e26:	68b9      	ldr	r1, [r7, #8]
 8006e28:	f002 fa24 	bl	8009274 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e34:	441a      	add	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d32b      	bcc.n	8006e9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	605a      	str	r2, [r3, #4]
 8006e4e:	e026      	b.n	8006e9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	68d8      	ldr	r0, [r3, #12]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e58:	461a      	mov	r2, r3
 8006e5a:	68b9      	ldr	r1, [r7, #8]
 8006e5c:	f002 fa0a 	bl	8009274 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	68da      	ldr	r2, [r3, #12]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e68:	425b      	negs	r3, r3
 8006e6a:	441a      	add	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	68da      	ldr	r2, [r3, #12]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d207      	bcs.n	8006e8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e84:	425b      	negs	r3, r3
 8006e86:	441a      	add	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d105      	bne.n	8006e9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1c5a      	adds	r2, r3, #1
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006ea6:	697b      	ldr	r3, [r7, #20]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3718      	adds	r7, #24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d018      	beq.n	8006ef4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68da      	ldr	r2, [r3, #12]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eca:	441a      	add	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68da      	ldr	r2, [r3, #12]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d303      	bcc.n	8006ee4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68d9      	ldr	r1, [r3, #12]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eec:	461a      	mov	r2, r3
 8006eee:	6838      	ldr	r0, [r7, #0]
 8006ef0:	f002 f9c0 	bl	8009274 <memcpy>
	}
}
 8006ef4:	bf00      	nop
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f04:	f001 fc4e 	bl	80087a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f10:	e011      	b.n	8006f36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d012      	beq.n	8006f40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	3324      	adds	r3, #36	; 0x24
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 fd2a 	bl	8007978 <xTaskRemoveFromEventList>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f2a:	f000 fe01 	bl	8007b30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
 8006f30:	3b01      	subs	r3, #1
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	dce9      	bgt.n	8006f12 <prvUnlockQueue+0x16>
 8006f3e:	e000      	b.n	8006f42 <prvUnlockQueue+0x46>
					break;
 8006f40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	22ff      	movs	r2, #255	; 0xff
 8006f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006f4a:	f001 fc5b 	bl	8008804 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f4e:	f001 fc29 	bl	80087a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f5a:	e011      	b.n	8006f80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d012      	beq.n	8006f8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	3310      	adds	r3, #16
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 fd05 	bl	8007978 <xTaskRemoveFromEventList>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d001      	beq.n	8006f78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f74:	f000 fddc 	bl	8007b30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f78:	7bbb      	ldrb	r3, [r7, #14]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	dce9      	bgt.n	8006f5c <prvUnlockQueue+0x60>
 8006f88:	e000      	b.n	8006f8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	22ff      	movs	r2, #255	; 0xff
 8006f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006f94:	f001 fc36 	bl	8008804 <vPortExitCritical>
}
 8006f98:	bf00      	nop
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fa8:	f001 fbfc 	bl	80087a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d102      	bne.n	8006fba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	60fb      	str	r3, [r7, #12]
 8006fb8:	e001      	b.n	8006fbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fbe:	f001 fc21 	bl	8008804 <vPortExitCritical>

	return xReturn;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fd4:	f001 fbe6 	bl	80087a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d102      	bne.n	8006fea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	60fb      	str	r3, [r7, #12]
 8006fe8:	e001      	b.n	8006fee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fee:	f001 fc09 	bl	8008804 <vPortExitCritical>

	return xReturn;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007006:	2300      	movs	r3, #0
 8007008:	60fb      	str	r3, [r7, #12]
 800700a:	e014      	b.n	8007036 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800700c:	4a0f      	ldr	r2, [pc, #60]	; (800704c <vQueueAddToRegistry+0x50>)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10b      	bne.n	8007030 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007018:	490c      	ldr	r1, [pc, #48]	; (800704c <vQueueAddToRegistry+0x50>)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007022:	4a0a      	ldr	r2, [pc, #40]	; (800704c <vQueueAddToRegistry+0x50>)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	00db      	lsls	r3, r3, #3
 8007028:	4413      	add	r3, r2
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800702e:	e006      	b.n	800703e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	3301      	adds	r3, #1
 8007034:	60fb      	str	r3, [r7, #12]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2b07      	cmp	r3, #7
 800703a:	d9e7      	bls.n	800700c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800703c:	bf00      	nop
 800703e:	bf00      	nop
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	20004c4c 	.word	0x20004c4c

08007050 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007060:	f001 fba0 	bl	80087a4 <vPortEnterCritical>
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800706a:	b25b      	sxtb	r3, r3
 800706c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007070:	d103      	bne.n	800707a <vQueueWaitForMessageRestricted+0x2a>
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007080:	b25b      	sxtb	r3, r3
 8007082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007086:	d103      	bne.n	8007090 <vQueueWaitForMessageRestricted+0x40>
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007090:	f001 fbb8 	bl	8008804 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007098:	2b00      	cmp	r3, #0
 800709a:	d106      	bne.n	80070aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	3324      	adds	r3, #36	; 0x24
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	68b9      	ldr	r1, [r7, #8]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 fc3b 	bl	8007920 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80070aa:	6978      	ldr	r0, [r7, #20]
 80070ac:	f7ff ff26 	bl	8006efc <prvUnlockQueue>
	}
 80070b0:	bf00      	nop
 80070b2:	3718      	adds	r7, #24
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b08e      	sub	sp, #56	; 0x38
 80070bc:	af04      	add	r7, sp, #16
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
 80070c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80070c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10a      	bne.n	80070e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	623b      	str	r3, [r7, #32]
}
 80070de:	bf00      	nop
 80070e0:	e7fe      	b.n	80070e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80070e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10a      	bne.n	80070fe <xTaskCreateStatic+0x46>
	__asm volatile
 80070e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ec:	f383 8811 	msr	BASEPRI, r3
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	61fb      	str	r3, [r7, #28]
}
 80070fa:	bf00      	nop
 80070fc:	e7fe      	b.n	80070fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80070fe:	235c      	movs	r3, #92	; 0x5c
 8007100:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	2b5c      	cmp	r3, #92	; 0x5c
 8007106:	d00a      	beq.n	800711e <xTaskCreateStatic+0x66>
	__asm volatile
 8007108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710c:	f383 8811 	msr	BASEPRI, r3
 8007110:	f3bf 8f6f 	isb	sy
 8007114:	f3bf 8f4f 	dsb	sy
 8007118:	61bb      	str	r3, [r7, #24]
}
 800711a:	bf00      	nop
 800711c:	e7fe      	b.n	800711c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800711e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007122:	2b00      	cmp	r3, #0
 8007124:	d01e      	beq.n	8007164 <xTaskCreateStatic+0xac>
 8007126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007128:	2b00      	cmp	r3, #0
 800712a:	d01b      	beq.n	8007164 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800712c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007134:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	2202      	movs	r2, #2
 800713a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800713e:	2300      	movs	r3, #0
 8007140:	9303      	str	r3, [sp, #12]
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	9302      	str	r3, [sp, #8]
 8007146:	f107 0314 	add.w	r3, r7, #20
 800714a:	9301      	str	r3, [sp, #4]
 800714c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	68b9      	ldr	r1, [r7, #8]
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 f850 	bl	80071fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800715c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800715e:	f000 f8dd 	bl	800731c <prvAddNewTaskToReadyList>
 8007162:	e001      	b.n	8007168 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007164:	2300      	movs	r3, #0
 8007166:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007168:	697b      	ldr	r3, [r7, #20]
	}
 800716a:	4618      	mov	r0, r3
 800716c:	3728      	adds	r7, #40	; 0x28
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007172:	b580      	push	{r7, lr}
 8007174:	b08c      	sub	sp, #48	; 0x30
 8007176:	af04      	add	r7, sp, #16
 8007178:	60f8      	str	r0, [r7, #12]
 800717a:	60b9      	str	r1, [r7, #8]
 800717c:	603b      	str	r3, [r7, #0]
 800717e:	4613      	mov	r3, r2
 8007180:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007182:	88fb      	ldrh	r3, [r7, #6]
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4618      	mov	r0, r3
 8007188:	f001 fc2e 	bl	80089e8 <pvPortMalloc>
 800718c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00e      	beq.n	80071b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007194:	205c      	movs	r0, #92	; 0x5c
 8007196:	f001 fc27 	bl	80089e8 <pvPortMalloc>
 800719a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	631a      	str	r2, [r3, #48]	; 0x30
 80071a8:	e005      	b.n	80071b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80071aa:	6978      	ldr	r0, [r7, #20]
 80071ac:	f001 fce8 	bl	8008b80 <vPortFree>
 80071b0:	e001      	b.n	80071b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80071b2:	2300      	movs	r3, #0
 80071b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d017      	beq.n	80071ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80071c4:	88fa      	ldrh	r2, [r7, #6]
 80071c6:	2300      	movs	r3, #0
 80071c8:	9303      	str	r3, [sp, #12]
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	9302      	str	r3, [sp, #8]
 80071ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d0:	9301      	str	r3, [sp, #4]
 80071d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	68b9      	ldr	r1, [r7, #8]
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 f80e 	bl	80071fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071e0:	69f8      	ldr	r0, [r7, #28]
 80071e2:	f000 f89b 	bl	800731c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071e6:	2301      	movs	r3, #1
 80071e8:	61bb      	str	r3, [r7, #24]
 80071ea:	e002      	b.n	80071f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80071ec:	f04f 33ff 	mov.w	r3, #4294967295
 80071f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80071f2:	69bb      	ldr	r3, [r7, #24]
	}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3720      	adds	r7, #32
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b088      	sub	sp, #32
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
 8007208:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800720a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	461a      	mov	r2, r3
 8007214:	21a5      	movs	r1, #165	; 0xa5
 8007216:	f002 f83b 	bl	8009290 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007224:	3b01      	subs	r3, #1
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	f023 0307 	bic.w	r3, r3, #7
 8007232:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00a      	beq.n	8007254 <prvInitialiseNewTask+0x58>
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	617b      	str	r3, [r7, #20]
}
 8007250:	bf00      	nop
 8007252:	e7fe      	b.n	8007252 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d01f      	beq.n	800729a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800725a:	2300      	movs	r3, #0
 800725c:	61fb      	str	r3, [r7, #28]
 800725e:	e012      	b.n	8007286 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	4413      	add	r3, r2
 8007266:	7819      	ldrb	r1, [r3, #0]
 8007268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	4413      	add	r3, r2
 800726e:	3334      	adds	r3, #52	; 0x34
 8007270:	460a      	mov	r2, r1
 8007272:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	4413      	add	r3, r2
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d006      	beq.n	800728e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	3301      	adds	r3, #1
 8007284:	61fb      	str	r3, [r7, #28]
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	2b0f      	cmp	r3, #15
 800728a:	d9e9      	bls.n	8007260 <prvInitialiseNewTask+0x64>
 800728c:	e000      	b.n	8007290 <prvInitialiseNewTask+0x94>
			{
				break;
 800728e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007298:	e003      	b.n	80072a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800729a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a4:	2b37      	cmp	r3, #55	; 0x37
 80072a6:	d901      	bls.n	80072ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80072a8:	2337      	movs	r3, #55	; 0x37
 80072aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80072ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80072b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ba:	2200      	movs	r2, #0
 80072bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c0:	3304      	adds	r3, #4
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7ff f978 	bl	80065b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ca:	3318      	adds	r3, #24
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7ff f973 	bl	80065b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80072d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80072de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80072e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ea:	2200      	movs	r2, #0
 80072ec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	68f9      	ldr	r1, [r7, #12]
 80072fa:	69b8      	ldr	r0, [r7, #24]
 80072fc:	f001 f928 	bl	8008550 <pxPortInitialiseStack>
 8007300:	4602      	mov	r2, r0
 8007302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007304:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007308:	2b00      	cmp	r3, #0
 800730a:	d002      	beq.n	8007312 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007310:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007312:	bf00      	nop
 8007314:	3720      	adds	r7, #32
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007324:	f001 fa3e 	bl	80087a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007328:	4b2d      	ldr	r3, [pc, #180]	; (80073e0 <prvAddNewTaskToReadyList+0xc4>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	3301      	adds	r3, #1
 800732e:	4a2c      	ldr	r2, [pc, #176]	; (80073e0 <prvAddNewTaskToReadyList+0xc4>)
 8007330:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007332:	4b2c      	ldr	r3, [pc, #176]	; (80073e4 <prvAddNewTaskToReadyList+0xc8>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d109      	bne.n	800734e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800733a:	4a2a      	ldr	r2, [pc, #168]	; (80073e4 <prvAddNewTaskToReadyList+0xc8>)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007340:	4b27      	ldr	r3, [pc, #156]	; (80073e0 <prvAddNewTaskToReadyList+0xc4>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d110      	bne.n	800736a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007348:	f000 fc16 	bl	8007b78 <prvInitialiseTaskLists>
 800734c:	e00d      	b.n	800736a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800734e:	4b26      	ldr	r3, [pc, #152]	; (80073e8 <prvAddNewTaskToReadyList+0xcc>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d109      	bne.n	800736a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007356:	4b23      	ldr	r3, [pc, #140]	; (80073e4 <prvAddNewTaskToReadyList+0xc8>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007360:	429a      	cmp	r2, r3
 8007362:	d802      	bhi.n	800736a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007364:	4a1f      	ldr	r2, [pc, #124]	; (80073e4 <prvAddNewTaskToReadyList+0xc8>)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800736a:	4b20      	ldr	r3, [pc, #128]	; (80073ec <prvAddNewTaskToReadyList+0xd0>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3301      	adds	r3, #1
 8007370:	4a1e      	ldr	r2, [pc, #120]	; (80073ec <prvAddNewTaskToReadyList+0xd0>)
 8007372:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007374:	4b1d      	ldr	r3, [pc, #116]	; (80073ec <prvAddNewTaskToReadyList+0xd0>)
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007380:	4b1b      	ldr	r3, [pc, #108]	; (80073f0 <prvAddNewTaskToReadyList+0xd4>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	429a      	cmp	r2, r3
 8007386:	d903      	bls.n	8007390 <prvAddNewTaskToReadyList+0x74>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738c:	4a18      	ldr	r2, [pc, #96]	; (80073f0 <prvAddNewTaskToReadyList+0xd4>)
 800738e:	6013      	str	r3, [r2, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007394:	4613      	mov	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4a15      	ldr	r2, [pc, #84]	; (80073f4 <prvAddNewTaskToReadyList+0xd8>)
 800739e:	441a      	add	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	3304      	adds	r3, #4
 80073a4:	4619      	mov	r1, r3
 80073a6:	4610      	mov	r0, r2
 80073a8:	f7ff f913 	bl	80065d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073ac:	f001 fa2a 	bl	8008804 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073b0:	4b0d      	ldr	r3, [pc, #52]	; (80073e8 <prvAddNewTaskToReadyList+0xcc>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00e      	beq.n	80073d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073b8:	4b0a      	ldr	r3, [pc, #40]	; (80073e4 <prvAddNewTaskToReadyList+0xc8>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d207      	bcs.n	80073d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80073c6:	4b0c      	ldr	r3, [pc, #48]	; (80073f8 <prvAddNewTaskToReadyList+0xdc>)
 80073c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073cc:	601a      	str	r2, [r3, #0]
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073d6:	bf00      	nop
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	20000c40 	.word	0x20000c40
 80073e4:	2000076c 	.word	0x2000076c
 80073e8:	20000c4c 	.word	0x20000c4c
 80073ec:	20000c5c 	.word	0x20000c5c
 80073f0:	20000c48 	.word	0x20000c48
 80073f4:	20000770 	.word	0x20000770
 80073f8:	e000ed04 	.word	0xe000ed04

080073fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007404:	2300      	movs	r3, #0
 8007406:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d017      	beq.n	800743e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800740e:	4b13      	ldr	r3, [pc, #76]	; (800745c <vTaskDelay+0x60>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00a      	beq.n	800742c <vTaskDelay+0x30>
	__asm volatile
 8007416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
 8007426:	60bb      	str	r3, [r7, #8]
}
 8007428:	bf00      	nop
 800742a:	e7fe      	b.n	800742a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800742c:	f000 f880 	bl	8007530 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007430:	2100      	movs	r1, #0
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fcea 	bl	8007e0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007438:	f000 f888 	bl	800754c <xTaskResumeAll>
 800743c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d107      	bne.n	8007454 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007444:	4b06      	ldr	r3, [pc, #24]	; (8007460 <vTaskDelay+0x64>)
 8007446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007454:	bf00      	nop
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	20000c68 	.word	0x20000c68
 8007460:	e000ed04 	.word	0xe000ed04

08007464 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b08a      	sub	sp, #40	; 0x28
 8007468:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800746a:	2300      	movs	r3, #0
 800746c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800746e:	2300      	movs	r3, #0
 8007470:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007472:	463a      	mov	r2, r7
 8007474:	1d39      	adds	r1, r7, #4
 8007476:	f107 0308 	add.w	r3, r7, #8
 800747a:	4618      	mov	r0, r3
 800747c:	f7ff f848 	bl	8006510 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007480:	6839      	ldr	r1, [r7, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	9202      	str	r2, [sp, #8]
 8007488:	9301      	str	r3, [sp, #4]
 800748a:	2300      	movs	r3, #0
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	2300      	movs	r3, #0
 8007490:	460a      	mov	r2, r1
 8007492:	4921      	ldr	r1, [pc, #132]	; (8007518 <vTaskStartScheduler+0xb4>)
 8007494:	4821      	ldr	r0, [pc, #132]	; (800751c <vTaskStartScheduler+0xb8>)
 8007496:	f7ff fe0f 	bl	80070b8 <xTaskCreateStatic>
 800749a:	4603      	mov	r3, r0
 800749c:	4a20      	ldr	r2, [pc, #128]	; (8007520 <vTaskStartScheduler+0xbc>)
 800749e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80074a0:	4b1f      	ldr	r3, [pc, #124]	; (8007520 <vTaskStartScheduler+0xbc>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d002      	beq.n	80074ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80074a8:	2301      	movs	r3, #1
 80074aa:	617b      	str	r3, [r7, #20]
 80074ac:	e001      	b.n	80074b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80074ae:	2300      	movs	r3, #0
 80074b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d102      	bne.n	80074be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80074b8:	f000 fcfc 	bl	8007eb4 <xTimerCreateTimerTask>
 80074bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d116      	bne.n	80074f2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80074c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	613b      	str	r3, [r7, #16]
}
 80074d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80074d8:	4b12      	ldr	r3, [pc, #72]	; (8007524 <vTaskStartScheduler+0xc0>)
 80074da:	f04f 32ff 	mov.w	r2, #4294967295
 80074de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80074e0:	4b11      	ldr	r3, [pc, #68]	; (8007528 <vTaskStartScheduler+0xc4>)
 80074e2:	2201      	movs	r2, #1
 80074e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80074e6:	4b11      	ldr	r3, [pc, #68]	; (800752c <vTaskStartScheduler+0xc8>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80074ec:	f001 f8b8 	bl	8008660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80074f0:	e00e      	b.n	8007510 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f8:	d10a      	bne.n	8007510 <vTaskStartScheduler+0xac>
	__asm volatile
 80074fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	60fb      	str	r3, [r7, #12]
}
 800750c:	bf00      	nop
 800750e:	e7fe      	b.n	800750e <vTaskStartScheduler+0xaa>
}
 8007510:	bf00      	nop
 8007512:	3718      	adds	r7, #24
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	0800aabc 	.word	0x0800aabc
 800751c:	08007b49 	.word	0x08007b49
 8007520:	20000c64 	.word	0x20000c64
 8007524:	20000c60 	.word	0x20000c60
 8007528:	20000c4c 	.word	0x20000c4c
 800752c:	20000c44 	.word	0x20000c44

08007530 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007530:	b480      	push	{r7}
 8007532:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007534:	4b04      	ldr	r3, [pc, #16]	; (8007548 <vTaskSuspendAll+0x18>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3301      	adds	r3, #1
 800753a:	4a03      	ldr	r2, [pc, #12]	; (8007548 <vTaskSuspendAll+0x18>)
 800753c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800753e:	bf00      	nop
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	20000c68 	.word	0x20000c68

0800754c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007552:	2300      	movs	r3, #0
 8007554:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007556:	2300      	movs	r3, #0
 8007558:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800755a:	4b42      	ldr	r3, [pc, #264]	; (8007664 <xTaskResumeAll+0x118>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10a      	bne.n	8007578 <xTaskResumeAll+0x2c>
	__asm volatile
 8007562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	603b      	str	r3, [r7, #0]
}
 8007574:	bf00      	nop
 8007576:	e7fe      	b.n	8007576 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007578:	f001 f914 	bl	80087a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800757c:	4b39      	ldr	r3, [pc, #228]	; (8007664 <xTaskResumeAll+0x118>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3b01      	subs	r3, #1
 8007582:	4a38      	ldr	r2, [pc, #224]	; (8007664 <xTaskResumeAll+0x118>)
 8007584:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007586:	4b37      	ldr	r3, [pc, #220]	; (8007664 <xTaskResumeAll+0x118>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d162      	bne.n	8007654 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800758e:	4b36      	ldr	r3, [pc, #216]	; (8007668 <xTaskResumeAll+0x11c>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d05e      	beq.n	8007654 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007596:	e02f      	b.n	80075f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007598:	4b34      	ldr	r3, [pc, #208]	; (800766c <xTaskResumeAll+0x120>)
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	3318      	adds	r3, #24
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7ff f871 	bl	800668c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	3304      	adds	r3, #4
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7ff f86c 	bl	800668c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b8:	4b2d      	ldr	r3, [pc, #180]	; (8007670 <xTaskResumeAll+0x124>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d903      	bls.n	80075c8 <xTaskResumeAll+0x7c>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c4:	4a2a      	ldr	r2, [pc, #168]	; (8007670 <xTaskResumeAll+0x124>)
 80075c6:	6013      	str	r3, [r2, #0]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075cc:	4613      	mov	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4a27      	ldr	r2, [pc, #156]	; (8007674 <xTaskResumeAll+0x128>)
 80075d6:	441a      	add	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	3304      	adds	r3, #4
 80075dc:	4619      	mov	r1, r3
 80075de:	4610      	mov	r0, r2
 80075e0:	f7fe fff7 	bl	80065d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e8:	4b23      	ldr	r3, [pc, #140]	; (8007678 <xTaskResumeAll+0x12c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d302      	bcc.n	80075f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80075f2:	4b22      	ldr	r3, [pc, #136]	; (800767c <xTaskResumeAll+0x130>)
 80075f4:	2201      	movs	r2, #1
 80075f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075f8:	4b1c      	ldr	r3, [pc, #112]	; (800766c <xTaskResumeAll+0x120>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1cb      	bne.n	8007598 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007606:	f000 fb55 	bl	8007cb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800760a:	4b1d      	ldr	r3, [pc, #116]	; (8007680 <xTaskResumeAll+0x134>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d010      	beq.n	8007638 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007616:	f000 f847 	bl	80076a8 <xTaskIncrementTick>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007620:	4b16      	ldr	r3, [pc, #88]	; (800767c <xTaskResumeAll+0x130>)
 8007622:	2201      	movs	r2, #1
 8007624:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	3b01      	subs	r3, #1
 800762a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1f1      	bne.n	8007616 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007632:	4b13      	ldr	r3, [pc, #76]	; (8007680 <xTaskResumeAll+0x134>)
 8007634:	2200      	movs	r2, #0
 8007636:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007638:	4b10      	ldr	r3, [pc, #64]	; (800767c <xTaskResumeAll+0x130>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d009      	beq.n	8007654 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007640:	2301      	movs	r3, #1
 8007642:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007644:	4b0f      	ldr	r3, [pc, #60]	; (8007684 <xTaskResumeAll+0x138>)
 8007646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007654:	f001 f8d6 	bl	8008804 <vPortExitCritical>

	return xAlreadyYielded;
 8007658:	68bb      	ldr	r3, [r7, #8]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20000c68 	.word	0x20000c68
 8007668:	20000c40 	.word	0x20000c40
 800766c:	20000c00 	.word	0x20000c00
 8007670:	20000c48 	.word	0x20000c48
 8007674:	20000770 	.word	0x20000770
 8007678:	2000076c 	.word	0x2000076c
 800767c:	20000c54 	.word	0x20000c54
 8007680:	20000c50 	.word	0x20000c50
 8007684:	e000ed04 	.word	0xe000ed04

08007688 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800768e:	4b05      	ldr	r3, [pc, #20]	; (80076a4 <xTaskGetTickCount+0x1c>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007694:	687b      	ldr	r3, [r7, #4]
}
 8007696:	4618      	mov	r0, r3
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	20000c44 	.word	0x20000c44

080076a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80076ae:	2300      	movs	r3, #0
 80076b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076b2:	4b4f      	ldr	r3, [pc, #316]	; (80077f0 <xTaskIncrementTick+0x148>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f040 808f 	bne.w	80077da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076bc:	4b4d      	ldr	r3, [pc, #308]	; (80077f4 <xTaskIncrementTick+0x14c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3301      	adds	r3, #1
 80076c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80076c4:	4a4b      	ldr	r2, [pc, #300]	; (80077f4 <xTaskIncrementTick+0x14c>)
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d120      	bne.n	8007712 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80076d0:	4b49      	ldr	r3, [pc, #292]	; (80077f8 <xTaskIncrementTick+0x150>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00a      	beq.n	80076f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80076da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	603b      	str	r3, [r7, #0]
}
 80076ec:	bf00      	nop
 80076ee:	e7fe      	b.n	80076ee <xTaskIncrementTick+0x46>
 80076f0:	4b41      	ldr	r3, [pc, #260]	; (80077f8 <xTaskIncrementTick+0x150>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	60fb      	str	r3, [r7, #12]
 80076f6:	4b41      	ldr	r3, [pc, #260]	; (80077fc <xTaskIncrementTick+0x154>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a3f      	ldr	r2, [pc, #252]	; (80077f8 <xTaskIncrementTick+0x150>)
 80076fc:	6013      	str	r3, [r2, #0]
 80076fe:	4a3f      	ldr	r2, [pc, #252]	; (80077fc <xTaskIncrementTick+0x154>)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6013      	str	r3, [r2, #0]
 8007704:	4b3e      	ldr	r3, [pc, #248]	; (8007800 <xTaskIncrementTick+0x158>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3301      	adds	r3, #1
 800770a:	4a3d      	ldr	r2, [pc, #244]	; (8007800 <xTaskIncrementTick+0x158>)
 800770c:	6013      	str	r3, [r2, #0]
 800770e:	f000 fad1 	bl	8007cb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007712:	4b3c      	ldr	r3, [pc, #240]	; (8007804 <xTaskIncrementTick+0x15c>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	429a      	cmp	r2, r3
 800771a:	d349      	bcc.n	80077b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800771c:	4b36      	ldr	r3, [pc, #216]	; (80077f8 <xTaskIncrementTick+0x150>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d104      	bne.n	8007730 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007726:	4b37      	ldr	r3, [pc, #220]	; (8007804 <xTaskIncrementTick+0x15c>)
 8007728:	f04f 32ff 	mov.w	r2, #4294967295
 800772c:	601a      	str	r2, [r3, #0]
					break;
 800772e:	e03f      	b.n	80077b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007730:	4b31      	ldr	r3, [pc, #196]	; (80077f8 <xTaskIncrementTick+0x150>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	429a      	cmp	r2, r3
 8007746:	d203      	bcs.n	8007750 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007748:	4a2e      	ldr	r2, [pc, #184]	; (8007804 <xTaskIncrementTick+0x15c>)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800774e:	e02f      	b.n	80077b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	3304      	adds	r3, #4
 8007754:	4618      	mov	r0, r3
 8007756:	f7fe ff99 	bl	800668c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775e:	2b00      	cmp	r3, #0
 8007760:	d004      	beq.n	800776c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	3318      	adds	r3, #24
 8007766:	4618      	mov	r0, r3
 8007768:	f7fe ff90 	bl	800668c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007770:	4b25      	ldr	r3, [pc, #148]	; (8007808 <xTaskIncrementTick+0x160>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	429a      	cmp	r2, r3
 8007776:	d903      	bls.n	8007780 <xTaskIncrementTick+0xd8>
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777c:	4a22      	ldr	r2, [pc, #136]	; (8007808 <xTaskIncrementTick+0x160>)
 800777e:	6013      	str	r3, [r2, #0]
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007784:	4613      	mov	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	4413      	add	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4a1f      	ldr	r2, [pc, #124]	; (800780c <xTaskIncrementTick+0x164>)
 800778e:	441a      	add	r2, r3
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	3304      	adds	r3, #4
 8007794:	4619      	mov	r1, r3
 8007796:	4610      	mov	r0, r2
 8007798:	f7fe ff1b 	bl	80065d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a0:	4b1b      	ldr	r3, [pc, #108]	; (8007810 <xTaskIncrementTick+0x168>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d3b8      	bcc.n	800771c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80077aa:	2301      	movs	r3, #1
 80077ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077ae:	e7b5      	b.n	800771c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077b0:	4b17      	ldr	r3, [pc, #92]	; (8007810 <xTaskIncrementTick+0x168>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b6:	4915      	ldr	r1, [pc, #84]	; (800780c <xTaskIncrementTick+0x164>)
 80077b8:	4613      	mov	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	440b      	add	r3, r1
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d901      	bls.n	80077cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80077c8:	2301      	movs	r3, #1
 80077ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80077cc:	4b11      	ldr	r3, [pc, #68]	; (8007814 <xTaskIncrementTick+0x16c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d007      	beq.n	80077e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80077d4:	2301      	movs	r3, #1
 80077d6:	617b      	str	r3, [r7, #20]
 80077d8:	e004      	b.n	80077e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80077da:	4b0f      	ldr	r3, [pc, #60]	; (8007818 <xTaskIncrementTick+0x170>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	3301      	adds	r3, #1
 80077e0:	4a0d      	ldr	r2, [pc, #52]	; (8007818 <xTaskIncrementTick+0x170>)
 80077e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80077e4:	697b      	ldr	r3, [r7, #20]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3718      	adds	r7, #24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	20000c68 	.word	0x20000c68
 80077f4:	20000c44 	.word	0x20000c44
 80077f8:	20000bf8 	.word	0x20000bf8
 80077fc:	20000bfc 	.word	0x20000bfc
 8007800:	20000c58 	.word	0x20000c58
 8007804:	20000c60 	.word	0x20000c60
 8007808:	20000c48 	.word	0x20000c48
 800780c:	20000770 	.word	0x20000770
 8007810:	2000076c 	.word	0x2000076c
 8007814:	20000c54 	.word	0x20000c54
 8007818:	20000c50 	.word	0x20000c50

0800781c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007822:	4b28      	ldr	r3, [pc, #160]	; (80078c4 <vTaskSwitchContext+0xa8>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800782a:	4b27      	ldr	r3, [pc, #156]	; (80078c8 <vTaskSwitchContext+0xac>)
 800782c:	2201      	movs	r2, #1
 800782e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007830:	e041      	b.n	80078b6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007832:	4b25      	ldr	r3, [pc, #148]	; (80078c8 <vTaskSwitchContext+0xac>)
 8007834:	2200      	movs	r2, #0
 8007836:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007838:	4b24      	ldr	r3, [pc, #144]	; (80078cc <vTaskSwitchContext+0xb0>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	60fb      	str	r3, [r7, #12]
 800783e:	e010      	b.n	8007862 <vTaskSwitchContext+0x46>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10a      	bne.n	800785c <vTaskSwitchContext+0x40>
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	607b      	str	r3, [r7, #4]
}
 8007858:	bf00      	nop
 800785a:	e7fe      	b.n	800785a <vTaskSwitchContext+0x3e>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	3b01      	subs	r3, #1
 8007860:	60fb      	str	r3, [r7, #12]
 8007862:	491b      	ldr	r1, [pc, #108]	; (80078d0 <vTaskSwitchContext+0xb4>)
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	4613      	mov	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	4413      	add	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	440b      	add	r3, r1
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d0e4      	beq.n	8007840 <vTaskSwitchContext+0x24>
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	4613      	mov	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4a13      	ldr	r2, [pc, #76]	; (80078d0 <vTaskSwitchContext+0xb4>)
 8007882:	4413      	add	r3, r2
 8007884:	60bb      	str	r3, [r7, #8]
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	605a      	str	r2, [r3, #4]
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	3308      	adds	r3, #8
 8007898:	429a      	cmp	r2, r3
 800789a:	d104      	bne.n	80078a6 <vTaskSwitchContext+0x8a>
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	605a      	str	r2, [r3, #4]
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	4a09      	ldr	r2, [pc, #36]	; (80078d4 <vTaskSwitchContext+0xb8>)
 80078ae:	6013      	str	r3, [r2, #0]
 80078b0:	4a06      	ldr	r2, [pc, #24]	; (80078cc <vTaskSwitchContext+0xb0>)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6013      	str	r3, [r2, #0]
}
 80078b6:	bf00      	nop
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	20000c68 	.word	0x20000c68
 80078c8:	20000c54 	.word	0x20000c54
 80078cc:	20000c48 	.word	0x20000c48
 80078d0:	20000770 	.word	0x20000770
 80078d4:	2000076c 	.word	0x2000076c

080078d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10a      	bne.n	80078fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80078e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	60fb      	str	r3, [r7, #12]
}
 80078fa:	bf00      	nop
 80078fc:	e7fe      	b.n	80078fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078fe:	4b07      	ldr	r3, [pc, #28]	; (800791c <vTaskPlaceOnEventList+0x44>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	3318      	adds	r3, #24
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7fe fe87 	bl	800661a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800790c:	2101      	movs	r1, #1
 800790e:	6838      	ldr	r0, [r7, #0]
 8007910:	f000 fa7c 	bl	8007e0c <prvAddCurrentTaskToDelayedList>
}
 8007914:	bf00      	nop
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	2000076c 	.word	0x2000076c

08007920 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10a      	bne.n	8007948 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	617b      	str	r3, [r7, #20]
}
 8007944:	bf00      	nop
 8007946:	e7fe      	b.n	8007946 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007948:	4b0a      	ldr	r3, [pc, #40]	; (8007974 <vTaskPlaceOnEventListRestricted+0x54>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3318      	adds	r3, #24
 800794e:	4619      	mov	r1, r3
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f7fe fe3e 	bl	80065d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800795c:	f04f 33ff 	mov.w	r3, #4294967295
 8007960:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007962:	6879      	ldr	r1, [r7, #4]
 8007964:	68b8      	ldr	r0, [r7, #8]
 8007966:	f000 fa51 	bl	8007e0c <prvAddCurrentTaskToDelayedList>
	}
 800796a:	bf00      	nop
 800796c:	3718      	adds	r7, #24
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	2000076c 	.word	0x2000076c

08007978 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10a      	bne.n	80079a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800798e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	60fb      	str	r3, [r7, #12]
}
 80079a0:	bf00      	nop
 80079a2:	e7fe      	b.n	80079a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	3318      	adds	r3, #24
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7fe fe6f 	bl	800668c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079ae:	4b1e      	ldr	r3, [pc, #120]	; (8007a28 <xTaskRemoveFromEventList+0xb0>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d11d      	bne.n	80079f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	3304      	adds	r3, #4
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fe fe66 	bl	800668c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c4:	4b19      	ldr	r3, [pc, #100]	; (8007a2c <xTaskRemoveFromEventList+0xb4>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d903      	bls.n	80079d4 <xTaskRemoveFromEventList+0x5c>
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d0:	4a16      	ldr	r2, [pc, #88]	; (8007a2c <xTaskRemoveFromEventList+0xb4>)
 80079d2:	6013      	str	r3, [r2, #0]
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d8:	4613      	mov	r3, r2
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4a13      	ldr	r2, [pc, #76]	; (8007a30 <xTaskRemoveFromEventList+0xb8>)
 80079e2:	441a      	add	r2, r3
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	3304      	adds	r3, #4
 80079e8:	4619      	mov	r1, r3
 80079ea:	4610      	mov	r0, r2
 80079ec:	f7fe fdf1 	bl	80065d2 <vListInsertEnd>
 80079f0:	e005      	b.n	80079fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	3318      	adds	r3, #24
 80079f6:	4619      	mov	r1, r3
 80079f8:	480e      	ldr	r0, [pc, #56]	; (8007a34 <xTaskRemoveFromEventList+0xbc>)
 80079fa:	f7fe fdea 	bl	80065d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a02:	4b0d      	ldr	r3, [pc, #52]	; (8007a38 <xTaskRemoveFromEventList+0xc0>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d905      	bls.n	8007a18 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007a10:	4b0a      	ldr	r3, [pc, #40]	; (8007a3c <xTaskRemoveFromEventList+0xc4>)
 8007a12:	2201      	movs	r2, #1
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	e001      	b.n	8007a1c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007a1c:	697b      	ldr	r3, [r7, #20]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20000c68 	.word	0x20000c68
 8007a2c:	20000c48 	.word	0x20000c48
 8007a30:	20000770 	.word	0x20000770
 8007a34:	20000c00 	.word	0x20000c00
 8007a38:	2000076c 	.word	0x2000076c
 8007a3c:	20000c54 	.word	0x20000c54

08007a40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007a48:	4b06      	ldr	r3, [pc, #24]	; (8007a64 <vTaskInternalSetTimeOutState+0x24>)
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a50:	4b05      	ldr	r3, [pc, #20]	; (8007a68 <vTaskInternalSetTimeOutState+0x28>)
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	605a      	str	r2, [r3, #4]
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr
 8007a64:	20000c58 	.word	0x20000c58
 8007a68:	20000c44 	.word	0x20000c44

08007a6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b088      	sub	sp, #32
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10a      	bne.n	8007a92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a80:	f383 8811 	msr	BASEPRI, r3
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	613b      	str	r3, [r7, #16]
}
 8007a8e:	bf00      	nop
 8007a90:	e7fe      	b.n	8007a90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10a      	bne.n	8007aae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9c:	f383 8811 	msr	BASEPRI, r3
 8007aa0:	f3bf 8f6f 	isb	sy
 8007aa4:	f3bf 8f4f 	dsb	sy
 8007aa8:	60fb      	str	r3, [r7, #12]
}
 8007aaa:	bf00      	nop
 8007aac:	e7fe      	b.n	8007aac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007aae:	f000 fe79 	bl	80087a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ab2:	4b1d      	ldr	r3, [pc, #116]	; (8007b28 <xTaskCheckForTimeOut+0xbc>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aca:	d102      	bne.n	8007ad2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007acc:	2300      	movs	r3, #0
 8007ace:	61fb      	str	r3, [r7, #28]
 8007ad0:	e023      	b.n	8007b1a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	4b15      	ldr	r3, [pc, #84]	; (8007b2c <xTaskCheckForTimeOut+0xc0>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d007      	beq.n	8007aee <xTaskCheckForTimeOut+0x82>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	69ba      	ldr	r2, [r7, #24]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d302      	bcc.n	8007aee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	61fb      	str	r3, [r7, #28]
 8007aec:	e015      	b.n	8007b1a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d20b      	bcs.n	8007b10 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	1ad2      	subs	r2, r2, r3
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7ff ff9b 	bl	8007a40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	61fb      	str	r3, [r7, #28]
 8007b0e:	e004      	b.n	8007b1a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	2200      	movs	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b16:	2301      	movs	r3, #1
 8007b18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007b1a:	f000 fe73 	bl	8008804 <vPortExitCritical>

	return xReturn;
 8007b1e:	69fb      	ldr	r3, [r7, #28]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3720      	adds	r7, #32
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	20000c44 	.word	0x20000c44
 8007b2c:	20000c58 	.word	0x20000c58

08007b30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007b30:	b480      	push	{r7}
 8007b32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007b34:	4b03      	ldr	r3, [pc, #12]	; (8007b44 <vTaskMissedYield+0x14>)
 8007b36:	2201      	movs	r2, #1
 8007b38:	601a      	str	r2, [r3, #0]
}
 8007b3a:	bf00      	nop
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	20000c54 	.word	0x20000c54

08007b48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b50:	f000 f852 	bl	8007bf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b54:	4b06      	ldr	r3, [pc, #24]	; (8007b70 <prvIdleTask+0x28>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d9f9      	bls.n	8007b50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b5c:	4b05      	ldr	r3, [pc, #20]	; (8007b74 <prvIdleTask+0x2c>)
 8007b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b6c:	e7f0      	b.n	8007b50 <prvIdleTask+0x8>
 8007b6e:	bf00      	nop
 8007b70:	20000770 	.word	0x20000770
 8007b74:	e000ed04 	.word	0xe000ed04

08007b78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b7e:	2300      	movs	r3, #0
 8007b80:	607b      	str	r3, [r7, #4]
 8007b82:	e00c      	b.n	8007b9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	4613      	mov	r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	4413      	add	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4a12      	ldr	r2, [pc, #72]	; (8007bd8 <prvInitialiseTaskLists+0x60>)
 8007b90:	4413      	add	r3, r2
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7fe fcf0 	bl	8006578 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	607b      	str	r3, [r7, #4]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b37      	cmp	r3, #55	; 0x37
 8007ba2:	d9ef      	bls.n	8007b84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ba4:	480d      	ldr	r0, [pc, #52]	; (8007bdc <prvInitialiseTaskLists+0x64>)
 8007ba6:	f7fe fce7 	bl	8006578 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007baa:	480d      	ldr	r0, [pc, #52]	; (8007be0 <prvInitialiseTaskLists+0x68>)
 8007bac:	f7fe fce4 	bl	8006578 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007bb0:	480c      	ldr	r0, [pc, #48]	; (8007be4 <prvInitialiseTaskLists+0x6c>)
 8007bb2:	f7fe fce1 	bl	8006578 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007bb6:	480c      	ldr	r0, [pc, #48]	; (8007be8 <prvInitialiseTaskLists+0x70>)
 8007bb8:	f7fe fcde 	bl	8006578 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007bbc:	480b      	ldr	r0, [pc, #44]	; (8007bec <prvInitialiseTaskLists+0x74>)
 8007bbe:	f7fe fcdb 	bl	8006578 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007bc2:	4b0b      	ldr	r3, [pc, #44]	; (8007bf0 <prvInitialiseTaskLists+0x78>)
 8007bc4:	4a05      	ldr	r2, [pc, #20]	; (8007bdc <prvInitialiseTaskLists+0x64>)
 8007bc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007bc8:	4b0a      	ldr	r3, [pc, #40]	; (8007bf4 <prvInitialiseTaskLists+0x7c>)
 8007bca:	4a05      	ldr	r2, [pc, #20]	; (8007be0 <prvInitialiseTaskLists+0x68>)
 8007bcc:	601a      	str	r2, [r3, #0]
}
 8007bce:	bf00      	nop
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	20000770 	.word	0x20000770
 8007bdc:	20000bd0 	.word	0x20000bd0
 8007be0:	20000be4 	.word	0x20000be4
 8007be4:	20000c00 	.word	0x20000c00
 8007be8:	20000c14 	.word	0x20000c14
 8007bec:	20000c2c 	.word	0x20000c2c
 8007bf0:	20000bf8 	.word	0x20000bf8
 8007bf4:	20000bfc 	.word	0x20000bfc

08007bf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bfe:	e019      	b.n	8007c34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c00:	f000 fdd0 	bl	80087a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c04:	4b10      	ldr	r3, [pc, #64]	; (8007c48 <prvCheckTasksWaitingTermination+0x50>)
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	3304      	adds	r3, #4
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fe fd3b 	bl	800668c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c16:	4b0d      	ldr	r3, [pc, #52]	; (8007c4c <prvCheckTasksWaitingTermination+0x54>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	4a0b      	ldr	r2, [pc, #44]	; (8007c4c <prvCheckTasksWaitingTermination+0x54>)
 8007c1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c20:	4b0b      	ldr	r3, [pc, #44]	; (8007c50 <prvCheckTasksWaitingTermination+0x58>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	3b01      	subs	r3, #1
 8007c26:	4a0a      	ldr	r2, [pc, #40]	; (8007c50 <prvCheckTasksWaitingTermination+0x58>)
 8007c28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c2a:	f000 fdeb 	bl	8008804 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f810 	bl	8007c54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c34:	4b06      	ldr	r3, [pc, #24]	; (8007c50 <prvCheckTasksWaitingTermination+0x58>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1e1      	bne.n	8007c00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	20000c14 	.word	0x20000c14
 8007c4c:	20000c40 	.word	0x20000c40
 8007c50:	20000c28 	.word	0x20000c28

08007c54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d108      	bne.n	8007c78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 ff88 	bl	8008b80 <vPortFree>
				vPortFree( pxTCB );
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 ff85 	bl	8008b80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c76:	e018      	b.n	8007caa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d103      	bne.n	8007c8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 ff7c 	bl	8008b80 <vPortFree>
	}
 8007c88:	e00f      	b.n	8007caa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d00a      	beq.n	8007caa <prvDeleteTCB+0x56>
	__asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	60fb      	str	r3, [r7, #12]
}
 8007ca6:	bf00      	nop
 8007ca8:	e7fe      	b.n	8007ca8 <prvDeleteTCB+0x54>
	}
 8007caa:	bf00      	nop
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cba:	4b0c      	ldr	r3, [pc, #48]	; (8007cec <prvResetNextTaskUnblockTime+0x38>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d104      	bne.n	8007cce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007cc4:	4b0a      	ldr	r3, [pc, #40]	; (8007cf0 <prvResetNextTaskUnblockTime+0x3c>)
 8007cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ccc:	e008      	b.n	8007ce0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cce:	4b07      	ldr	r3, [pc, #28]	; (8007cec <prvResetNextTaskUnblockTime+0x38>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	4a04      	ldr	r2, [pc, #16]	; (8007cf0 <prvResetNextTaskUnblockTime+0x3c>)
 8007cde:	6013      	str	r3, [r2, #0]
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	20000bf8 	.word	0x20000bf8
 8007cf0:	20000c60 	.word	0x20000c60

08007cf4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007cfa:	4b0b      	ldr	r3, [pc, #44]	; (8007d28 <xTaskGetSchedulerState+0x34>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d102      	bne.n	8007d08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d02:	2301      	movs	r3, #1
 8007d04:	607b      	str	r3, [r7, #4]
 8007d06:	e008      	b.n	8007d1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d08:	4b08      	ldr	r3, [pc, #32]	; (8007d2c <xTaskGetSchedulerState+0x38>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d102      	bne.n	8007d16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d10:	2302      	movs	r3, #2
 8007d12:	607b      	str	r3, [r7, #4]
 8007d14:	e001      	b.n	8007d1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d16:	2300      	movs	r3, #0
 8007d18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d1a:	687b      	ldr	r3, [r7, #4]
	}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	20000c4c 	.word	0x20000c4c
 8007d2c:	20000c68 	.word	0x20000c68

08007d30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d056      	beq.n	8007df4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d46:	4b2e      	ldr	r3, [pc, #184]	; (8007e00 <xTaskPriorityDisinherit+0xd0>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d00a      	beq.n	8007d66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	60fb      	str	r3, [r7, #12]
}
 8007d62:	bf00      	nop
 8007d64:	e7fe      	b.n	8007d64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10a      	bne.n	8007d84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	60bb      	str	r3, [r7, #8]
}
 8007d80:	bf00      	nop
 8007d82:	e7fe      	b.n	8007d82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d88:	1e5a      	subs	r2, r3, #1
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d02c      	beq.n	8007df4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d128      	bne.n	8007df4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	3304      	adds	r3, #4
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fe fc70 	bl	800668c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc4:	4b0f      	ldr	r3, [pc, #60]	; (8007e04 <xTaskPriorityDisinherit+0xd4>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d903      	bls.n	8007dd4 <xTaskPriorityDisinherit+0xa4>
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	4a0c      	ldr	r2, [pc, #48]	; (8007e04 <xTaskPriorityDisinherit+0xd4>)
 8007dd2:	6013      	str	r3, [r2, #0]
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd8:	4613      	mov	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	4a09      	ldr	r2, [pc, #36]	; (8007e08 <xTaskPriorityDisinherit+0xd8>)
 8007de2:	441a      	add	r2, r3
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	3304      	adds	r3, #4
 8007de8:	4619      	mov	r1, r3
 8007dea:	4610      	mov	r0, r2
 8007dec:	f7fe fbf1 	bl	80065d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007df0:	2301      	movs	r3, #1
 8007df2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007df4:	697b      	ldr	r3, [r7, #20]
	}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3718      	adds	r7, #24
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	2000076c 	.word	0x2000076c
 8007e04:	20000c48 	.word	0x20000c48
 8007e08:	20000770 	.word	0x20000770

08007e0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e16:	4b21      	ldr	r3, [pc, #132]	; (8007e9c <prvAddCurrentTaskToDelayedList+0x90>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e1c:	4b20      	ldr	r3, [pc, #128]	; (8007ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	3304      	adds	r3, #4
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7fe fc32 	bl	800668c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2e:	d10a      	bne.n	8007e46 <prvAddCurrentTaskToDelayedList+0x3a>
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d007      	beq.n	8007e46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e36:	4b1a      	ldr	r3, [pc, #104]	; (8007ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	3304      	adds	r3, #4
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	4819      	ldr	r0, [pc, #100]	; (8007ea4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007e40:	f7fe fbc7 	bl	80065d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e44:	e026      	b.n	8007e94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e4e:	4b14      	ldr	r3, [pc, #80]	; (8007ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d209      	bcs.n	8007e72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e5e:	4b12      	ldr	r3, [pc, #72]	; (8007ea8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	4b0f      	ldr	r3, [pc, #60]	; (8007ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	3304      	adds	r3, #4
 8007e68:	4619      	mov	r1, r3
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	f7fe fbd5 	bl	800661a <vListInsert>
}
 8007e70:	e010      	b.n	8007e94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e72:	4b0e      	ldr	r3, [pc, #56]	; (8007eac <prvAddCurrentTaskToDelayedList+0xa0>)
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	4b0a      	ldr	r3, [pc, #40]	; (8007ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	3304      	adds	r3, #4
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	4610      	mov	r0, r2
 8007e80:	f7fe fbcb 	bl	800661a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e84:	4b0a      	ldr	r3, [pc, #40]	; (8007eb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d202      	bcs.n	8007e94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007e8e:	4a08      	ldr	r2, [pc, #32]	; (8007eb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	6013      	str	r3, [r2, #0]
}
 8007e94:	bf00      	nop
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	20000c44 	.word	0x20000c44
 8007ea0:	2000076c 	.word	0x2000076c
 8007ea4:	20000c2c 	.word	0x20000c2c
 8007ea8:	20000bfc 	.word	0x20000bfc
 8007eac:	20000bf8 	.word	0x20000bf8
 8007eb0:	20000c60 	.word	0x20000c60

08007eb4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b08a      	sub	sp, #40	; 0x28
 8007eb8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007ebe:	f000 fb07 	bl	80084d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007ec2:	4b1c      	ldr	r3, [pc, #112]	; (8007f34 <xTimerCreateTimerTask+0x80>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d021      	beq.n	8007f0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007ed2:	1d3a      	adds	r2, r7, #4
 8007ed4:	f107 0108 	add.w	r1, r7, #8
 8007ed8:	f107 030c 	add.w	r3, r7, #12
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fe fb31 	bl	8006544 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007ee2:	6879      	ldr	r1, [r7, #4]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	9202      	str	r2, [sp, #8]
 8007eea:	9301      	str	r3, [sp, #4]
 8007eec:	2302      	movs	r3, #2
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	460a      	mov	r2, r1
 8007ef4:	4910      	ldr	r1, [pc, #64]	; (8007f38 <xTimerCreateTimerTask+0x84>)
 8007ef6:	4811      	ldr	r0, [pc, #68]	; (8007f3c <xTimerCreateTimerTask+0x88>)
 8007ef8:	f7ff f8de 	bl	80070b8 <xTaskCreateStatic>
 8007efc:	4603      	mov	r3, r0
 8007efe:	4a10      	ldr	r2, [pc, #64]	; (8007f40 <xTimerCreateTimerTask+0x8c>)
 8007f00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007f02:	4b0f      	ldr	r3, [pc, #60]	; (8007f40 <xTimerCreateTimerTask+0x8c>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d001      	beq.n	8007f0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10a      	bne.n	8007f2a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	613b      	str	r3, [r7, #16]
}
 8007f26:	bf00      	nop
 8007f28:	e7fe      	b.n	8007f28 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007f2a:	697b      	ldr	r3, [r7, #20]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3718      	adds	r7, #24
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	20000c9c 	.word	0x20000c9c
 8007f38:	0800aac4 	.word	0x0800aac4
 8007f3c:	08008079 	.word	0x08008079
 8007f40:	20000ca0 	.word	0x20000ca0

08007f44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b08a      	sub	sp, #40	; 0x28
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
 8007f50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f52:	2300      	movs	r3, #0
 8007f54:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10a      	bne.n	8007f72 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f60:	f383 8811 	msr	BASEPRI, r3
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	623b      	str	r3, [r7, #32]
}
 8007f6e:	bf00      	nop
 8007f70:	e7fe      	b.n	8007f70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f72:	4b1a      	ldr	r3, [pc, #104]	; (8007fdc <xTimerGenericCommand+0x98>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d02a      	beq.n	8007fd0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	2b05      	cmp	r3, #5
 8007f8a:	dc18      	bgt.n	8007fbe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f8c:	f7ff feb2 	bl	8007cf4 <xTaskGetSchedulerState>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d109      	bne.n	8007faa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f96:	4b11      	ldr	r3, [pc, #68]	; (8007fdc <xTimerGenericCommand+0x98>)
 8007f98:	6818      	ldr	r0, [r3, #0]
 8007f9a:	f107 0110 	add.w	r1, r7, #16
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fa2:	f7fe fca1 	bl	80068e8 <xQueueGenericSend>
 8007fa6:	6278      	str	r0, [r7, #36]	; 0x24
 8007fa8:	e012      	b.n	8007fd0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007faa:	4b0c      	ldr	r3, [pc, #48]	; (8007fdc <xTimerGenericCommand+0x98>)
 8007fac:	6818      	ldr	r0, [r3, #0]
 8007fae:	f107 0110 	add.w	r1, r7, #16
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f7fe fc97 	bl	80068e8 <xQueueGenericSend>
 8007fba:	6278      	str	r0, [r7, #36]	; 0x24
 8007fbc:	e008      	b.n	8007fd0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007fbe:	4b07      	ldr	r3, [pc, #28]	; (8007fdc <xTimerGenericCommand+0x98>)
 8007fc0:	6818      	ldr	r0, [r3, #0]
 8007fc2:	f107 0110 	add.w	r1, r7, #16
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	f7fe fd8b 	bl	8006ae4 <xQueueGenericSendFromISR>
 8007fce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3728      	adds	r7, #40	; 0x28
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	20000c9c 	.word	0x20000c9c

08007fe0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b088      	sub	sp, #32
 8007fe4:	af02      	add	r7, sp, #8
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fea:	4b22      	ldr	r3, [pc, #136]	; (8008074 <prvProcessExpiredTimer+0x94>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	3304      	adds	r3, #4
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fe fb47 	bl	800668c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008004:	f003 0304 	and.w	r3, r3, #4
 8008008:	2b00      	cmp	r3, #0
 800800a:	d022      	beq.n	8008052 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	699a      	ldr	r2, [r3, #24]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	18d1      	adds	r1, r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	683a      	ldr	r2, [r7, #0]
 8008018:	6978      	ldr	r0, [r7, #20]
 800801a:	f000 f8d1 	bl	80081c0 <prvInsertTimerInActiveList>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d01f      	beq.n	8008064 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008024:	2300      	movs	r3, #0
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	2300      	movs	r3, #0
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	2100      	movs	r1, #0
 800802e:	6978      	ldr	r0, [r7, #20]
 8008030:	f7ff ff88 	bl	8007f44 <xTimerGenericCommand>
 8008034:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d113      	bne.n	8008064 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800803c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	60fb      	str	r3, [r7, #12]
}
 800804e:	bf00      	nop
 8008050:	e7fe      	b.n	8008050 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008058:	f023 0301 	bic.w	r3, r3, #1
 800805c:	b2da      	uxtb	r2, r3
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	6a1b      	ldr	r3, [r3, #32]
 8008068:	6978      	ldr	r0, [r7, #20]
 800806a:	4798      	blx	r3
}
 800806c:	bf00      	nop
 800806e:	3718      	adds	r7, #24
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	20000c94 	.word	0x20000c94

08008078 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008080:	f107 0308 	add.w	r3, r7, #8
 8008084:	4618      	mov	r0, r3
 8008086:	f000 f857 	bl	8008138 <prvGetNextExpireTime>
 800808a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	4619      	mov	r1, r3
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f000 f803 	bl	800809c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008096:	f000 f8d5 	bl	8008244 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800809a:	e7f1      	b.n	8008080 <prvTimerTask+0x8>

0800809c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80080a6:	f7ff fa43 	bl	8007530 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080aa:	f107 0308 	add.w	r3, r7, #8
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 f866 	bl	8008180 <prvSampleTimeNow>
 80080b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d130      	bne.n	800811e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10a      	bne.n	80080d8 <prvProcessTimerOrBlockTask+0x3c>
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d806      	bhi.n	80080d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80080ca:	f7ff fa3f 	bl	800754c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80080ce:	68f9      	ldr	r1, [r7, #12]
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f7ff ff85 	bl	8007fe0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80080d6:	e024      	b.n	8008122 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d008      	beq.n	80080f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80080de:	4b13      	ldr	r3, [pc, #76]	; (800812c <prvProcessTimerOrBlockTask+0x90>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <prvProcessTimerOrBlockTask+0x50>
 80080e8:	2301      	movs	r3, #1
 80080ea:	e000      	b.n	80080ee <prvProcessTimerOrBlockTask+0x52>
 80080ec:	2300      	movs	r3, #0
 80080ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80080f0:	4b0f      	ldr	r3, [pc, #60]	; (8008130 <prvProcessTimerOrBlockTask+0x94>)
 80080f2:	6818      	ldr	r0, [r3, #0]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	683a      	ldr	r2, [r7, #0]
 80080fc:	4619      	mov	r1, r3
 80080fe:	f7fe ffa7 	bl	8007050 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008102:	f7ff fa23 	bl	800754c <xTaskResumeAll>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10a      	bne.n	8008122 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800810c:	4b09      	ldr	r3, [pc, #36]	; (8008134 <prvProcessTimerOrBlockTask+0x98>)
 800810e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	f3bf 8f6f 	isb	sy
}
 800811c:	e001      	b.n	8008122 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800811e:	f7ff fa15 	bl	800754c <xTaskResumeAll>
}
 8008122:	bf00      	nop
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	20000c98 	.word	0x20000c98
 8008130:	20000c9c 	.word	0x20000c9c
 8008134:	e000ed04 	.word	0xe000ed04

08008138 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008140:	4b0e      	ldr	r3, [pc, #56]	; (800817c <prvGetNextExpireTime+0x44>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d101      	bne.n	800814e <prvGetNextExpireTime+0x16>
 800814a:	2201      	movs	r2, #1
 800814c:	e000      	b.n	8008150 <prvGetNextExpireTime+0x18>
 800814e:	2200      	movs	r2, #0
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d105      	bne.n	8008168 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800815c:	4b07      	ldr	r3, [pc, #28]	; (800817c <prvGetNextExpireTime+0x44>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	60fb      	str	r3, [r7, #12]
 8008166:	e001      	b.n	800816c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008168:	2300      	movs	r3, #0
 800816a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800816c:	68fb      	ldr	r3, [r7, #12]
}
 800816e:	4618      	mov	r0, r3
 8008170:	3714      	adds	r7, #20
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	20000c94 	.word	0x20000c94

08008180 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008188:	f7ff fa7e 	bl	8007688 <xTaskGetTickCount>
 800818c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800818e:	4b0b      	ldr	r3, [pc, #44]	; (80081bc <prvSampleTimeNow+0x3c>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	429a      	cmp	r2, r3
 8008196:	d205      	bcs.n	80081a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008198:	f000 f936 	bl	8008408 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	601a      	str	r2, [r3, #0]
 80081a2:	e002      	b.n	80081aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80081aa:	4a04      	ldr	r2, [pc, #16]	; (80081bc <prvSampleTimeNow+0x3c>)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80081b0:	68fb      	ldr	r3, [r7, #12]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	20000ca4 	.word	0x20000ca4

080081c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
 80081cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80081ce:	2300      	movs	r3, #0
 80081d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d812      	bhi.n	800820c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	1ad2      	subs	r2, r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d302      	bcc.n	80081fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80081f4:	2301      	movs	r3, #1
 80081f6:	617b      	str	r3, [r7, #20]
 80081f8:	e01b      	b.n	8008232 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80081fa:	4b10      	ldr	r3, [pc, #64]	; (800823c <prvInsertTimerInActiveList+0x7c>)
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3304      	adds	r3, #4
 8008202:	4619      	mov	r1, r3
 8008204:	4610      	mov	r0, r2
 8008206:	f7fe fa08 	bl	800661a <vListInsert>
 800820a:	e012      	b.n	8008232 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	429a      	cmp	r2, r3
 8008212:	d206      	bcs.n	8008222 <prvInsertTimerInActiveList+0x62>
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	429a      	cmp	r2, r3
 800821a:	d302      	bcc.n	8008222 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800821c:	2301      	movs	r3, #1
 800821e:	617b      	str	r3, [r7, #20]
 8008220:	e007      	b.n	8008232 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008222:	4b07      	ldr	r3, [pc, #28]	; (8008240 <prvInsertTimerInActiveList+0x80>)
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	3304      	adds	r3, #4
 800822a:	4619      	mov	r1, r3
 800822c:	4610      	mov	r0, r2
 800822e:	f7fe f9f4 	bl	800661a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008232:	697b      	ldr	r3, [r7, #20]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3718      	adds	r7, #24
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	20000c98 	.word	0x20000c98
 8008240:	20000c94 	.word	0x20000c94

08008244 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b08e      	sub	sp, #56	; 0x38
 8008248:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800824a:	e0ca      	b.n	80083e2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	da18      	bge.n	8008284 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008252:	1d3b      	adds	r3, r7, #4
 8008254:	3304      	adds	r3, #4
 8008256:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10a      	bne.n	8008274 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800825e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	61fb      	str	r3, [r7, #28]
}
 8008270:	bf00      	nop
 8008272:	e7fe      	b.n	8008272 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800827a:	6850      	ldr	r0, [r2, #4]
 800827c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800827e:	6892      	ldr	r2, [r2, #8]
 8008280:	4611      	mov	r1, r2
 8008282:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	f2c0 80aa 	blt.w	80083e0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008292:	695b      	ldr	r3, [r3, #20]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d004      	beq.n	80082a2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829a:	3304      	adds	r3, #4
 800829c:	4618      	mov	r0, r3
 800829e:	f7fe f9f5 	bl	800668c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082a2:	463b      	mov	r3, r7
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7ff ff6b 	bl	8008180 <prvSampleTimeNow>
 80082aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b09      	cmp	r3, #9
 80082b0:	f200 8097 	bhi.w	80083e2 <prvProcessReceivedCommands+0x19e>
 80082b4:	a201      	add	r2, pc, #4	; (adr r2, 80082bc <prvProcessReceivedCommands+0x78>)
 80082b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ba:	bf00      	nop
 80082bc:	080082e5 	.word	0x080082e5
 80082c0:	080082e5 	.word	0x080082e5
 80082c4:	080082e5 	.word	0x080082e5
 80082c8:	08008359 	.word	0x08008359
 80082cc:	0800836d 	.word	0x0800836d
 80082d0:	080083b7 	.word	0x080083b7
 80082d4:	080082e5 	.word	0x080082e5
 80082d8:	080082e5 	.word	0x080082e5
 80082dc:	08008359 	.word	0x08008359
 80082e0:	0800836d 	.word	0x0800836d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082ea:	f043 0301 	orr.w	r3, r3, #1
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	18d1      	adds	r1, r2, r3
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008304:	f7ff ff5c 	bl	80081c0 <prvInsertTimerInActiveList>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d069      	beq.n	80083e2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800830e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008314:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800831c:	f003 0304 	and.w	r3, r3, #4
 8008320:	2b00      	cmp	r3, #0
 8008322:	d05e      	beq.n	80083e2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008328:	699b      	ldr	r3, [r3, #24]
 800832a:	441a      	add	r2, r3
 800832c:	2300      	movs	r3, #0
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	2300      	movs	r3, #0
 8008332:	2100      	movs	r1, #0
 8008334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008336:	f7ff fe05 	bl	8007f44 <xTimerGenericCommand>
 800833a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d14f      	bne.n	80083e2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008346:	f383 8811 	msr	BASEPRI, r3
 800834a:	f3bf 8f6f 	isb	sy
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	61bb      	str	r3, [r7, #24]
}
 8008354:	bf00      	nop
 8008356:	e7fe      	b.n	8008356 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800835e:	f023 0301 	bic.w	r3, r3, #1
 8008362:	b2da      	uxtb	r2, r3
 8008364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008366:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800836a:	e03a      	b.n	80083e2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800836c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008372:	f043 0301 	orr.w	r3, r3, #1
 8008376:	b2da      	uxtb	r2, r3
 8008378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008382:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10a      	bne.n	80083a2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800838c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	617b      	str	r3, [r7, #20]
}
 800839e:	bf00      	nop
 80083a0:	e7fe      	b.n	80083a0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80083a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a4:	699a      	ldr	r2, [r3, #24]
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	18d1      	adds	r1, r2, r3
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083b0:	f7ff ff06 	bl	80081c0 <prvInsertTimerInActiveList>
					break;
 80083b4:	e015      	b.n	80083e2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80083b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083bc:	f003 0302 	and.w	r3, r3, #2
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d103      	bne.n	80083cc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80083c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083c6:	f000 fbdb 	bl	8008b80 <vPortFree>
 80083ca:	e00a      	b.n	80083e2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083d2:	f023 0301 	bic.w	r3, r3, #1
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80083de:	e000      	b.n	80083e2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80083e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083e2:	4b08      	ldr	r3, [pc, #32]	; (8008404 <prvProcessReceivedCommands+0x1c0>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	1d39      	adds	r1, r7, #4
 80083e8:	2200      	movs	r2, #0
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fe fc16 	bl	8006c1c <xQueueReceive>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f47f af2a 	bne.w	800824c <prvProcessReceivedCommands+0x8>
	}
}
 80083f8:	bf00      	nop
 80083fa:	bf00      	nop
 80083fc:	3730      	adds	r7, #48	; 0x30
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20000c9c 	.word	0x20000c9c

08008408 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b088      	sub	sp, #32
 800840c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800840e:	e048      	b.n	80084a2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008410:	4b2d      	ldr	r3, [pc, #180]	; (80084c8 <prvSwitchTimerLists+0xc0>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800841a:	4b2b      	ldr	r3, [pc, #172]	; (80084c8 <prvSwitchTimerLists+0xc0>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	3304      	adds	r3, #4
 8008428:	4618      	mov	r0, r3
 800842a:	f7fe f92f 	bl	800668c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800843c:	f003 0304 	and.w	r3, r3, #4
 8008440:	2b00      	cmp	r3, #0
 8008442:	d02e      	beq.n	80084a2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	4413      	add	r3, r2
 800844c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	429a      	cmp	r2, r3
 8008454:	d90e      	bls.n	8008474 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008462:	4b19      	ldr	r3, [pc, #100]	; (80084c8 <prvSwitchTimerLists+0xc0>)
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	3304      	adds	r3, #4
 800846a:	4619      	mov	r1, r3
 800846c:	4610      	mov	r0, r2
 800846e:	f7fe f8d4 	bl	800661a <vListInsert>
 8008472:	e016      	b.n	80084a2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008474:	2300      	movs	r3, #0
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	2300      	movs	r3, #0
 800847a:	693a      	ldr	r2, [r7, #16]
 800847c:	2100      	movs	r1, #0
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f7ff fd60 	bl	8007f44 <xTimerGenericCommand>
 8008484:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d10a      	bne.n	80084a2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800848c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008490:	f383 8811 	msr	BASEPRI, r3
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	603b      	str	r3, [r7, #0]
}
 800849e:	bf00      	nop
 80084a0:	e7fe      	b.n	80084a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084a2:	4b09      	ldr	r3, [pc, #36]	; (80084c8 <prvSwitchTimerLists+0xc0>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1b1      	bne.n	8008410 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80084ac:	4b06      	ldr	r3, [pc, #24]	; (80084c8 <prvSwitchTimerLists+0xc0>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80084b2:	4b06      	ldr	r3, [pc, #24]	; (80084cc <prvSwitchTimerLists+0xc4>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a04      	ldr	r2, [pc, #16]	; (80084c8 <prvSwitchTimerLists+0xc0>)
 80084b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80084ba:	4a04      	ldr	r2, [pc, #16]	; (80084cc <prvSwitchTimerLists+0xc4>)
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	6013      	str	r3, [r2, #0]
}
 80084c0:	bf00      	nop
 80084c2:	3718      	adds	r7, #24
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	20000c94 	.word	0x20000c94
 80084cc:	20000c98 	.word	0x20000c98

080084d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80084d6:	f000 f965 	bl	80087a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80084da:	4b15      	ldr	r3, [pc, #84]	; (8008530 <prvCheckForValidListAndQueue+0x60>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d120      	bne.n	8008524 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80084e2:	4814      	ldr	r0, [pc, #80]	; (8008534 <prvCheckForValidListAndQueue+0x64>)
 80084e4:	f7fe f848 	bl	8006578 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80084e8:	4813      	ldr	r0, [pc, #76]	; (8008538 <prvCheckForValidListAndQueue+0x68>)
 80084ea:	f7fe f845 	bl	8006578 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80084ee:	4b13      	ldr	r3, [pc, #76]	; (800853c <prvCheckForValidListAndQueue+0x6c>)
 80084f0:	4a10      	ldr	r2, [pc, #64]	; (8008534 <prvCheckForValidListAndQueue+0x64>)
 80084f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80084f4:	4b12      	ldr	r3, [pc, #72]	; (8008540 <prvCheckForValidListAndQueue+0x70>)
 80084f6:	4a10      	ldr	r2, [pc, #64]	; (8008538 <prvCheckForValidListAndQueue+0x68>)
 80084f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80084fa:	2300      	movs	r3, #0
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	4b11      	ldr	r3, [pc, #68]	; (8008544 <prvCheckForValidListAndQueue+0x74>)
 8008500:	4a11      	ldr	r2, [pc, #68]	; (8008548 <prvCheckForValidListAndQueue+0x78>)
 8008502:	2110      	movs	r1, #16
 8008504:	200a      	movs	r0, #10
 8008506:	f7fe f953 	bl	80067b0 <xQueueGenericCreateStatic>
 800850a:	4603      	mov	r3, r0
 800850c:	4a08      	ldr	r2, [pc, #32]	; (8008530 <prvCheckForValidListAndQueue+0x60>)
 800850e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008510:	4b07      	ldr	r3, [pc, #28]	; (8008530 <prvCheckForValidListAndQueue+0x60>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d005      	beq.n	8008524 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008518:	4b05      	ldr	r3, [pc, #20]	; (8008530 <prvCheckForValidListAndQueue+0x60>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	490b      	ldr	r1, [pc, #44]	; (800854c <prvCheckForValidListAndQueue+0x7c>)
 800851e:	4618      	mov	r0, r3
 8008520:	f7fe fd6c 	bl	8006ffc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008524:	f000 f96e 	bl	8008804 <vPortExitCritical>
}
 8008528:	bf00      	nop
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	20000c9c 	.word	0x20000c9c
 8008534:	20000c6c 	.word	0x20000c6c
 8008538:	20000c80 	.word	0x20000c80
 800853c:	20000c94 	.word	0x20000c94
 8008540:	20000c98 	.word	0x20000c98
 8008544:	20000d48 	.word	0x20000d48
 8008548:	20000ca8 	.word	0x20000ca8
 800854c:	0800aacc 	.word	0x0800aacc

08008550 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	3b04      	subs	r3, #4
 8008560:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008568:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	3b04      	subs	r3, #4
 800856e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	f023 0201 	bic.w	r2, r3, #1
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	3b04      	subs	r3, #4
 800857e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008580:	4a0c      	ldr	r2, [pc, #48]	; (80085b4 <pxPortInitialiseStack+0x64>)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	3b14      	subs	r3, #20
 800858a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	3b04      	subs	r3, #4
 8008596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f06f 0202 	mvn.w	r2, #2
 800859e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	3b20      	subs	r3, #32
 80085a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085a6:	68fb      	ldr	r3, [r7, #12]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr
 80085b4:	080085b9 	.word	0x080085b9

080085b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80085be:	2300      	movs	r3, #0
 80085c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80085c2:	4b12      	ldr	r3, [pc, #72]	; (800860c <prvTaskExitError+0x54>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ca:	d00a      	beq.n	80085e2 <prvTaskExitError+0x2a>
	__asm volatile
 80085cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d0:	f383 8811 	msr	BASEPRI, r3
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	60fb      	str	r3, [r7, #12]
}
 80085de:	bf00      	nop
 80085e0:	e7fe      	b.n	80085e0 <prvTaskExitError+0x28>
	__asm volatile
 80085e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	60bb      	str	r3, [r7, #8]
}
 80085f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80085f6:	bf00      	nop
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d0fc      	beq.n	80085f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80085fe:	bf00      	nop
 8008600:	bf00      	nop
 8008602:	3714      	adds	r7, #20
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr
 800860c:	2000000c 	.word	0x2000000c

08008610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008610:	4b07      	ldr	r3, [pc, #28]	; (8008630 <pxCurrentTCBConst2>)
 8008612:	6819      	ldr	r1, [r3, #0]
 8008614:	6808      	ldr	r0, [r1, #0]
 8008616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861a:	f380 8809 	msr	PSP, r0
 800861e:	f3bf 8f6f 	isb	sy
 8008622:	f04f 0000 	mov.w	r0, #0
 8008626:	f380 8811 	msr	BASEPRI, r0
 800862a:	4770      	bx	lr
 800862c:	f3af 8000 	nop.w

08008630 <pxCurrentTCBConst2>:
 8008630:	2000076c 	.word	0x2000076c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008634:	bf00      	nop
 8008636:	bf00      	nop

08008638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008638:	4808      	ldr	r0, [pc, #32]	; (800865c <prvPortStartFirstTask+0x24>)
 800863a:	6800      	ldr	r0, [r0, #0]
 800863c:	6800      	ldr	r0, [r0, #0]
 800863e:	f380 8808 	msr	MSP, r0
 8008642:	f04f 0000 	mov.w	r0, #0
 8008646:	f380 8814 	msr	CONTROL, r0
 800864a:	b662      	cpsie	i
 800864c:	b661      	cpsie	f
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	df00      	svc	0
 8008658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800865a:	bf00      	nop
 800865c:	e000ed08 	.word	0xe000ed08

08008660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008666:	4b46      	ldr	r3, [pc, #280]	; (8008780 <xPortStartScheduler+0x120>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a46      	ldr	r2, [pc, #280]	; (8008784 <xPortStartScheduler+0x124>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d10a      	bne.n	8008686 <xPortStartScheduler+0x26>
	__asm volatile
 8008670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008674:	f383 8811 	msr	BASEPRI, r3
 8008678:	f3bf 8f6f 	isb	sy
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	613b      	str	r3, [r7, #16]
}
 8008682:	bf00      	nop
 8008684:	e7fe      	b.n	8008684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008686:	4b3e      	ldr	r3, [pc, #248]	; (8008780 <xPortStartScheduler+0x120>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a3f      	ldr	r2, [pc, #252]	; (8008788 <xPortStartScheduler+0x128>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d10a      	bne.n	80086a6 <xPortStartScheduler+0x46>
	__asm volatile
 8008690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008694:	f383 8811 	msr	BASEPRI, r3
 8008698:	f3bf 8f6f 	isb	sy
 800869c:	f3bf 8f4f 	dsb	sy
 80086a0:	60fb      	str	r3, [r7, #12]
}
 80086a2:	bf00      	nop
 80086a4:	e7fe      	b.n	80086a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80086a6:	4b39      	ldr	r3, [pc, #228]	; (800878c <xPortStartScheduler+0x12c>)
 80086a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	22ff      	movs	r2, #255	; 0xff
 80086b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80086c0:	78fb      	ldrb	r3, [r7, #3]
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80086c8:	b2da      	uxtb	r2, r3
 80086ca:	4b31      	ldr	r3, [pc, #196]	; (8008790 <xPortStartScheduler+0x130>)
 80086cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80086ce:	4b31      	ldr	r3, [pc, #196]	; (8008794 <xPortStartScheduler+0x134>)
 80086d0:	2207      	movs	r2, #7
 80086d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086d4:	e009      	b.n	80086ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80086d6:	4b2f      	ldr	r3, [pc, #188]	; (8008794 <xPortStartScheduler+0x134>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3b01      	subs	r3, #1
 80086dc:	4a2d      	ldr	r2, [pc, #180]	; (8008794 <xPortStartScheduler+0x134>)
 80086de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80086e0:	78fb      	ldrb	r3, [r7, #3]
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	005b      	lsls	r3, r3, #1
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086ea:	78fb      	ldrb	r3, [r7, #3]
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f2:	2b80      	cmp	r3, #128	; 0x80
 80086f4:	d0ef      	beq.n	80086d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80086f6:	4b27      	ldr	r3, [pc, #156]	; (8008794 <xPortStartScheduler+0x134>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f1c3 0307 	rsb	r3, r3, #7
 80086fe:	2b04      	cmp	r3, #4
 8008700:	d00a      	beq.n	8008718 <xPortStartScheduler+0xb8>
	__asm volatile
 8008702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008706:	f383 8811 	msr	BASEPRI, r3
 800870a:	f3bf 8f6f 	isb	sy
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	60bb      	str	r3, [r7, #8]
}
 8008714:	bf00      	nop
 8008716:	e7fe      	b.n	8008716 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008718:	4b1e      	ldr	r3, [pc, #120]	; (8008794 <xPortStartScheduler+0x134>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	021b      	lsls	r3, r3, #8
 800871e:	4a1d      	ldr	r2, [pc, #116]	; (8008794 <xPortStartScheduler+0x134>)
 8008720:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008722:	4b1c      	ldr	r3, [pc, #112]	; (8008794 <xPortStartScheduler+0x134>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800872a:	4a1a      	ldr	r2, [pc, #104]	; (8008794 <xPortStartScheduler+0x134>)
 800872c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	b2da      	uxtb	r2, r3
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008736:	4b18      	ldr	r3, [pc, #96]	; (8008798 <xPortStartScheduler+0x138>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a17      	ldr	r2, [pc, #92]	; (8008798 <xPortStartScheduler+0x138>)
 800873c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008740:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008742:	4b15      	ldr	r3, [pc, #84]	; (8008798 <xPortStartScheduler+0x138>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a14      	ldr	r2, [pc, #80]	; (8008798 <xPortStartScheduler+0x138>)
 8008748:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800874c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800874e:	f000 f8dd 	bl	800890c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008752:	4b12      	ldr	r3, [pc, #72]	; (800879c <xPortStartScheduler+0x13c>)
 8008754:	2200      	movs	r2, #0
 8008756:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008758:	f000 f8fc 	bl	8008954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800875c:	4b10      	ldr	r3, [pc, #64]	; (80087a0 <xPortStartScheduler+0x140>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a0f      	ldr	r2, [pc, #60]	; (80087a0 <xPortStartScheduler+0x140>)
 8008762:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008766:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008768:	f7ff ff66 	bl	8008638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800876c:	f7ff f856 	bl	800781c <vTaskSwitchContext>
	prvTaskExitError();
 8008770:	f7ff ff22 	bl	80085b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3718      	adds	r7, #24
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	e000ed00 	.word	0xe000ed00
 8008784:	410fc271 	.word	0x410fc271
 8008788:	410fc270 	.word	0x410fc270
 800878c:	e000e400 	.word	0xe000e400
 8008790:	20000d98 	.word	0x20000d98
 8008794:	20000d9c 	.word	0x20000d9c
 8008798:	e000ed20 	.word	0xe000ed20
 800879c:	2000000c 	.word	0x2000000c
 80087a0:	e000ef34 	.word	0xe000ef34

080087a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
	__asm volatile
 80087aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ae:	f383 8811 	msr	BASEPRI, r3
 80087b2:	f3bf 8f6f 	isb	sy
 80087b6:	f3bf 8f4f 	dsb	sy
 80087ba:	607b      	str	r3, [r7, #4]
}
 80087bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80087be:	4b0f      	ldr	r3, [pc, #60]	; (80087fc <vPortEnterCritical+0x58>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	3301      	adds	r3, #1
 80087c4:	4a0d      	ldr	r2, [pc, #52]	; (80087fc <vPortEnterCritical+0x58>)
 80087c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80087c8:	4b0c      	ldr	r3, [pc, #48]	; (80087fc <vPortEnterCritical+0x58>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d10f      	bne.n	80087f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80087d0:	4b0b      	ldr	r3, [pc, #44]	; (8008800 <vPortEnterCritical+0x5c>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00a      	beq.n	80087f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80087da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087de:	f383 8811 	msr	BASEPRI, r3
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	603b      	str	r3, [r7, #0]
}
 80087ec:	bf00      	nop
 80087ee:	e7fe      	b.n	80087ee <vPortEnterCritical+0x4a>
	}
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	2000000c 	.word	0x2000000c
 8008800:	e000ed04 	.word	0xe000ed04

08008804 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800880a:	4b12      	ldr	r3, [pc, #72]	; (8008854 <vPortExitCritical+0x50>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10a      	bne.n	8008828 <vPortExitCritical+0x24>
	__asm volatile
 8008812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008816:	f383 8811 	msr	BASEPRI, r3
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	607b      	str	r3, [r7, #4]
}
 8008824:	bf00      	nop
 8008826:	e7fe      	b.n	8008826 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008828:	4b0a      	ldr	r3, [pc, #40]	; (8008854 <vPortExitCritical+0x50>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	3b01      	subs	r3, #1
 800882e:	4a09      	ldr	r2, [pc, #36]	; (8008854 <vPortExitCritical+0x50>)
 8008830:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008832:	4b08      	ldr	r3, [pc, #32]	; (8008854 <vPortExitCritical+0x50>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d105      	bne.n	8008846 <vPortExitCritical+0x42>
 800883a:	2300      	movs	r3, #0
 800883c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	f383 8811 	msr	BASEPRI, r3
}
 8008844:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008846:	bf00      	nop
 8008848:	370c      	adds	r7, #12
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	2000000c 	.word	0x2000000c
	...

08008860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008860:	f3ef 8009 	mrs	r0, PSP
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	4b15      	ldr	r3, [pc, #84]	; (80088c0 <pxCurrentTCBConst>)
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	f01e 0f10 	tst.w	lr, #16
 8008870:	bf08      	it	eq
 8008872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887a:	6010      	str	r0, [r2, #0]
 800887c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008880:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008884:	f380 8811 	msr	BASEPRI, r0
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	f3bf 8f6f 	isb	sy
 8008890:	f7fe ffc4 	bl	800781c <vTaskSwitchContext>
 8008894:	f04f 0000 	mov.w	r0, #0
 8008898:	f380 8811 	msr	BASEPRI, r0
 800889c:	bc09      	pop	{r0, r3}
 800889e:	6819      	ldr	r1, [r3, #0]
 80088a0:	6808      	ldr	r0, [r1, #0]
 80088a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a6:	f01e 0f10 	tst.w	lr, #16
 80088aa:	bf08      	it	eq
 80088ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80088b0:	f380 8809 	msr	PSP, r0
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	f3af 8000 	nop.w

080088c0 <pxCurrentTCBConst>:
 80088c0:	2000076c 	.word	0x2000076c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80088c4:	bf00      	nop
 80088c6:	bf00      	nop

080088c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	607b      	str	r3, [r7, #4]
}
 80088e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80088e2:	f7fe fee1 	bl	80076a8 <xTaskIncrementTick>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d003      	beq.n	80088f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80088ec:	4b06      	ldr	r3, [pc, #24]	; (8008908 <xPortSysTickHandler+0x40>)
 80088ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088f2:	601a      	str	r2, [r3, #0]
 80088f4:	2300      	movs	r3, #0
 80088f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	f383 8811 	msr	BASEPRI, r3
}
 80088fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008900:	bf00      	nop
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	e000ed04 	.word	0xe000ed04

0800890c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800890c:	b480      	push	{r7}
 800890e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008910:	4b0b      	ldr	r3, [pc, #44]	; (8008940 <vPortSetupTimerInterrupt+0x34>)
 8008912:	2200      	movs	r2, #0
 8008914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008916:	4b0b      	ldr	r3, [pc, #44]	; (8008944 <vPortSetupTimerInterrupt+0x38>)
 8008918:	2200      	movs	r2, #0
 800891a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800891c:	4b0a      	ldr	r3, [pc, #40]	; (8008948 <vPortSetupTimerInterrupt+0x3c>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a0a      	ldr	r2, [pc, #40]	; (800894c <vPortSetupTimerInterrupt+0x40>)
 8008922:	fba2 2303 	umull	r2, r3, r2, r3
 8008926:	099b      	lsrs	r3, r3, #6
 8008928:	4a09      	ldr	r2, [pc, #36]	; (8008950 <vPortSetupTimerInterrupt+0x44>)
 800892a:	3b01      	subs	r3, #1
 800892c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800892e:	4b04      	ldr	r3, [pc, #16]	; (8008940 <vPortSetupTimerInterrupt+0x34>)
 8008930:	2207      	movs	r2, #7
 8008932:	601a      	str	r2, [r3, #0]
}
 8008934:	bf00      	nop
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	e000e010 	.word	0xe000e010
 8008944:	e000e018 	.word	0xe000e018
 8008948:	20000000 	.word	0x20000000
 800894c:	10624dd3 	.word	0x10624dd3
 8008950:	e000e014 	.word	0xe000e014

08008954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008954:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008964 <vPortEnableVFP+0x10>
 8008958:	6801      	ldr	r1, [r0, #0]
 800895a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800895e:	6001      	str	r1, [r0, #0]
 8008960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008962:	bf00      	nop
 8008964:	e000ed88 	.word	0xe000ed88

08008968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800896e:	f3ef 8305 	mrs	r3, IPSR
 8008972:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2b0f      	cmp	r3, #15
 8008978:	d914      	bls.n	80089a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800897a:	4a17      	ldr	r2, [pc, #92]	; (80089d8 <vPortValidateInterruptPriority+0x70>)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	4413      	add	r3, r2
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008984:	4b15      	ldr	r3, [pc, #84]	; (80089dc <vPortValidateInterruptPriority+0x74>)
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	7afa      	ldrb	r2, [r7, #11]
 800898a:	429a      	cmp	r2, r3
 800898c:	d20a      	bcs.n	80089a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800898e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	607b      	str	r3, [r7, #4]
}
 80089a0:	bf00      	nop
 80089a2:	e7fe      	b.n	80089a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80089a4:	4b0e      	ldr	r3, [pc, #56]	; (80089e0 <vPortValidateInterruptPriority+0x78>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089ac:	4b0d      	ldr	r3, [pc, #52]	; (80089e4 <vPortValidateInterruptPriority+0x7c>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d90a      	bls.n	80089ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80089b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b8:	f383 8811 	msr	BASEPRI, r3
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	603b      	str	r3, [r7, #0]
}
 80089c6:	bf00      	nop
 80089c8:	e7fe      	b.n	80089c8 <vPortValidateInterruptPriority+0x60>
	}
 80089ca:	bf00      	nop
 80089cc:	3714      	adds	r7, #20
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	e000e3f0 	.word	0xe000e3f0
 80089dc:	20000d98 	.word	0x20000d98
 80089e0:	e000ed0c 	.word	0xe000ed0c
 80089e4:	20000d9c 	.word	0x20000d9c

080089e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b08a      	sub	sp, #40	; 0x28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80089f0:	2300      	movs	r3, #0
 80089f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80089f4:	f7fe fd9c 	bl	8007530 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80089f8:	4b5b      	ldr	r3, [pc, #364]	; (8008b68 <pvPortMalloc+0x180>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d101      	bne.n	8008a04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a00:	f000 f920 	bl	8008c44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a04:	4b59      	ldr	r3, [pc, #356]	; (8008b6c <pvPortMalloc+0x184>)
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f040 8093 	bne.w	8008b38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d01d      	beq.n	8008a54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008a18:	2208      	movs	r2, #8
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f003 0307 	and.w	r3, r3, #7
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d014      	beq.n	8008a54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f023 0307 	bic.w	r3, r3, #7
 8008a30:	3308      	adds	r3, #8
 8008a32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f003 0307 	and.w	r3, r3, #7
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00a      	beq.n	8008a54 <pvPortMalloc+0x6c>
	__asm volatile
 8008a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	617b      	str	r3, [r7, #20]
}
 8008a50:	bf00      	nop
 8008a52:	e7fe      	b.n	8008a52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d06e      	beq.n	8008b38 <pvPortMalloc+0x150>
 8008a5a:	4b45      	ldr	r3, [pc, #276]	; (8008b70 <pvPortMalloc+0x188>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d869      	bhi.n	8008b38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a64:	4b43      	ldr	r3, [pc, #268]	; (8008b74 <pvPortMalloc+0x18c>)
 8008a66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a68:	4b42      	ldr	r3, [pc, #264]	; (8008b74 <pvPortMalloc+0x18c>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a6e:	e004      	b.n	8008a7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d903      	bls.n	8008a8c <pvPortMalloc+0xa4>
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d1f1      	bne.n	8008a70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a8c:	4b36      	ldr	r3, [pc, #216]	; (8008b68 <pvPortMalloc+0x180>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d050      	beq.n	8008b38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a96:	6a3b      	ldr	r3, [r7, #32]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2208      	movs	r2, #8
 8008a9c:	4413      	add	r3, r2
 8008a9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	6a3b      	ldr	r3, [r7, #32]
 8008aa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aaa:	685a      	ldr	r2, [r3, #4]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	1ad2      	subs	r2, r2, r3
 8008ab0:	2308      	movs	r3, #8
 8008ab2:	005b      	lsls	r3, r3, #1
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d91f      	bls.n	8008af8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4413      	add	r3, r2
 8008abe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	f003 0307 	and.w	r3, r3, #7
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00a      	beq.n	8008ae0 <pvPortMalloc+0xf8>
	__asm volatile
 8008aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ace:	f383 8811 	msr	BASEPRI, r3
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	613b      	str	r3, [r7, #16]
}
 8008adc:	bf00      	nop
 8008ade:	e7fe      	b.n	8008ade <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	685a      	ldr	r2, [r3, #4]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	1ad2      	subs	r2, r2, r3
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008af2:	69b8      	ldr	r0, [r7, #24]
 8008af4:	f000 f908 	bl	8008d08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008af8:	4b1d      	ldr	r3, [pc, #116]	; (8008b70 <pvPortMalloc+0x188>)
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	4a1b      	ldr	r2, [pc, #108]	; (8008b70 <pvPortMalloc+0x188>)
 8008b04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b06:	4b1a      	ldr	r3, [pc, #104]	; (8008b70 <pvPortMalloc+0x188>)
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	4b1b      	ldr	r3, [pc, #108]	; (8008b78 <pvPortMalloc+0x190>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d203      	bcs.n	8008b1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b12:	4b17      	ldr	r3, [pc, #92]	; (8008b70 <pvPortMalloc+0x188>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a18      	ldr	r2, [pc, #96]	; (8008b78 <pvPortMalloc+0x190>)
 8008b18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	4b13      	ldr	r3, [pc, #76]	; (8008b6c <pvPortMalloc+0x184>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	431a      	orrs	r2, r3
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008b2e:	4b13      	ldr	r3, [pc, #76]	; (8008b7c <pvPortMalloc+0x194>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	3301      	adds	r3, #1
 8008b34:	4a11      	ldr	r2, [pc, #68]	; (8008b7c <pvPortMalloc+0x194>)
 8008b36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b38:	f7fe fd08 	bl	800754c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	f003 0307 	and.w	r3, r3, #7
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00a      	beq.n	8008b5c <pvPortMalloc+0x174>
	__asm volatile
 8008b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	60fb      	str	r3, [r7, #12]
}
 8008b58:	bf00      	nop
 8008b5a:	e7fe      	b.n	8008b5a <pvPortMalloc+0x172>
	return pvReturn;
 8008b5c:	69fb      	ldr	r3, [r7, #28]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3728      	adds	r7, #40	; 0x28
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	200049a8 	.word	0x200049a8
 8008b6c:	200049bc 	.word	0x200049bc
 8008b70:	200049ac 	.word	0x200049ac
 8008b74:	200049a0 	.word	0x200049a0
 8008b78:	200049b0 	.word	0x200049b0
 8008b7c:	200049b4 	.word	0x200049b4

08008b80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d04d      	beq.n	8008c2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b92:	2308      	movs	r3, #8
 8008b94:	425b      	negs	r3, r3
 8008b96:	697a      	ldr	r2, [r7, #20]
 8008b98:	4413      	add	r3, r2
 8008b9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	685a      	ldr	r2, [r3, #4]
 8008ba4:	4b24      	ldr	r3, [pc, #144]	; (8008c38 <vPortFree+0xb8>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4013      	ands	r3, r2
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10a      	bne.n	8008bc4 <vPortFree+0x44>
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	60fb      	str	r3, [r7, #12]
}
 8008bc0:	bf00      	nop
 8008bc2:	e7fe      	b.n	8008bc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00a      	beq.n	8008be2 <vPortFree+0x62>
	__asm volatile
 8008bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd0:	f383 8811 	msr	BASEPRI, r3
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	60bb      	str	r3, [r7, #8]
}
 8008bde:	bf00      	nop
 8008be0:	e7fe      	b.n	8008be0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	685a      	ldr	r2, [r3, #4]
 8008be6:	4b14      	ldr	r3, [pc, #80]	; (8008c38 <vPortFree+0xb8>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4013      	ands	r3, r2
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d01e      	beq.n	8008c2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d11a      	bne.n	8008c2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	685a      	ldr	r2, [r3, #4]
 8008bfc:	4b0e      	ldr	r3, [pc, #56]	; (8008c38 <vPortFree+0xb8>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	43db      	mvns	r3, r3
 8008c02:	401a      	ands	r2, r3
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c08:	f7fe fc92 	bl	8007530 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	685a      	ldr	r2, [r3, #4]
 8008c10:	4b0a      	ldr	r3, [pc, #40]	; (8008c3c <vPortFree+0xbc>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4413      	add	r3, r2
 8008c16:	4a09      	ldr	r2, [pc, #36]	; (8008c3c <vPortFree+0xbc>)
 8008c18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c1a:	6938      	ldr	r0, [r7, #16]
 8008c1c:	f000 f874 	bl	8008d08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008c20:	4b07      	ldr	r3, [pc, #28]	; (8008c40 <vPortFree+0xc0>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	3301      	adds	r3, #1
 8008c26:	4a06      	ldr	r2, [pc, #24]	; (8008c40 <vPortFree+0xc0>)
 8008c28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008c2a:	f7fe fc8f 	bl	800754c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c2e:	bf00      	nop
 8008c30:	3718      	adds	r7, #24
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	200049bc 	.word	0x200049bc
 8008c3c:	200049ac 	.word	0x200049ac
 8008c40:	200049b8 	.word	0x200049b8

08008c44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c50:	4b27      	ldr	r3, [pc, #156]	; (8008cf0 <prvHeapInit+0xac>)
 8008c52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f003 0307 	and.w	r3, r3, #7
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00c      	beq.n	8008c78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	3307      	adds	r3, #7
 8008c62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f023 0307 	bic.w	r3, r3, #7
 8008c6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c6c:	68ba      	ldr	r2, [r7, #8]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	4a1f      	ldr	r2, [pc, #124]	; (8008cf0 <prvHeapInit+0xac>)
 8008c74:	4413      	add	r3, r2
 8008c76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c7c:	4a1d      	ldr	r2, [pc, #116]	; (8008cf4 <prvHeapInit+0xb0>)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c82:	4b1c      	ldr	r3, [pc, #112]	; (8008cf4 <prvHeapInit+0xb0>)
 8008c84:	2200      	movs	r2, #0
 8008c86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c90:	2208      	movs	r2, #8
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	1a9b      	subs	r3, r3, r2
 8008c96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f023 0307 	bic.w	r3, r3, #7
 8008c9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	4a15      	ldr	r2, [pc, #84]	; (8008cf8 <prvHeapInit+0xb4>)
 8008ca4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ca6:	4b14      	ldr	r3, [pc, #80]	; (8008cf8 <prvHeapInit+0xb4>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2200      	movs	r2, #0
 8008cac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008cae:	4b12      	ldr	r3, [pc, #72]	; (8008cf8 <prvHeapInit+0xb4>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	1ad2      	subs	r2, r2, r3
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008cc4:	4b0c      	ldr	r3, [pc, #48]	; (8008cf8 <prvHeapInit+0xb4>)
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	4a0a      	ldr	r2, [pc, #40]	; (8008cfc <prvHeapInit+0xb8>)
 8008cd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	4a09      	ldr	r2, [pc, #36]	; (8008d00 <prvHeapInit+0xbc>)
 8008cda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008cdc:	4b09      	ldr	r3, [pc, #36]	; (8008d04 <prvHeapInit+0xc0>)
 8008cde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008ce2:	601a      	str	r2, [r3, #0]
}
 8008ce4:	bf00      	nop
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr
 8008cf0:	20000da0 	.word	0x20000da0
 8008cf4:	200049a0 	.word	0x200049a0
 8008cf8:	200049a8 	.word	0x200049a8
 8008cfc:	200049b0 	.word	0x200049b0
 8008d00:	200049ac 	.word	0x200049ac
 8008d04:	200049bc 	.word	0x200049bc

08008d08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d10:	4b28      	ldr	r3, [pc, #160]	; (8008db4 <prvInsertBlockIntoFreeList+0xac>)
 8008d12:	60fb      	str	r3, [r7, #12]
 8008d14:	e002      	b.n	8008d1c <prvInsertBlockIntoFreeList+0x14>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	60fb      	str	r3, [r7, #12]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d8f7      	bhi.n	8008d16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	4413      	add	r3, r2
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d108      	bne.n	8008d4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	685a      	ldr	r2, [r3, #4]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	441a      	add	r2, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	68ba      	ldr	r2, [r7, #8]
 8008d54:	441a      	add	r2, r3
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d118      	bne.n	8008d90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	4b15      	ldr	r3, [pc, #84]	; (8008db8 <prvInsertBlockIntoFreeList+0xb0>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d00d      	beq.n	8008d86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	441a      	add	r2, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	e008      	b.n	8008d98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d86:	4b0c      	ldr	r3, [pc, #48]	; (8008db8 <prvInsertBlockIntoFreeList+0xb0>)
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	601a      	str	r2, [r3, #0]
 8008d8e:	e003      	b.n	8008d98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d002      	beq.n	8008da6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008da6:	bf00      	nop
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	200049a0 	.word	0x200049a0
 8008db8:	200049a8 	.word	0x200049a8

08008dbc <OLED_Refresh_Gram>:
#include "stdlib.h"
#include "oledfont.h"  

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	71fb      	strb	r3, [r7, #7]
 8008dc6:	e026      	b.n	8008e16 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8008dc8:	79fb      	ldrb	r3, [r7, #7]
 8008dca:	3b50      	subs	r3, #80	; 0x50
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2100      	movs	r1, #0
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f000 f82b 	bl	8008e2c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	2000      	movs	r0, #0
 8008dda:	f000 f827 	bl	8008e2c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8008dde:	2100      	movs	r1, #0
 8008de0:	2010      	movs	r0, #16
 8008de2:	f000 f823 	bl	8008e2c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8008de6:	2300      	movs	r3, #0
 8008de8:	71bb      	strb	r3, [r7, #6]
 8008dea:	e00d      	b.n	8008e08 <OLED_Refresh_Gram+0x4c>
 8008dec:	79ba      	ldrb	r2, [r7, #6]
 8008dee:	79fb      	ldrb	r3, [r7, #7]
 8008df0:	490d      	ldr	r1, [pc, #52]	; (8008e28 <OLED_Refresh_Gram+0x6c>)
 8008df2:	00d2      	lsls	r2, r2, #3
 8008df4:	440a      	add	r2, r1
 8008df6:	4413      	add	r3, r2
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	2101      	movs	r1, #1
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f000 f815 	bl	8008e2c <OLED_WR_Byte>
 8008e02:	79bb      	ldrb	r3, [r7, #6]
 8008e04:	3301      	adds	r3, #1
 8008e06:	71bb      	strb	r3, [r7, #6]
 8008e08:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	daed      	bge.n	8008dec <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8008e10:	79fb      	ldrb	r3, [r7, #7]
 8008e12:	3301      	adds	r3, #1
 8008e14:	71fb      	strb	r3, [r7, #7]
 8008e16:	79fb      	ldrb	r3, [r7, #7]
 8008e18:	2b07      	cmp	r3, #7
 8008e1a:	d9d5      	bls.n	8008dc8 <OLED_Refresh_Gram+0xc>
	}   
}
 8008e1c:	bf00      	nop
 8008e1e:	bf00      	nop
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	20004c8c 	.word	0x20004c8c

08008e2c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	4603      	mov	r3, r0
 8008e34:	460a      	mov	r2, r1
 8008e36:	71fb      	strb	r3, [r7, #7]
 8008e38:	4613      	mov	r3, r2
 8008e3a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8008e3c:	79bb      	ldrb	r3, [r7, #6]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d006      	beq.n	8008e50 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8008e42:	2201      	movs	r2, #1
 8008e44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008e48:	481c      	ldr	r0, [pc, #112]	; (8008ebc <OLED_WR_Byte+0x90>)
 8008e4a:	f7fa f9a9 	bl	80031a0 <HAL_GPIO_WritePin>
 8008e4e:	e005      	b.n	8008e5c <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8008e50:	2200      	movs	r2, #0
 8008e52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008e56:	4819      	ldr	r0, [pc, #100]	; (8008ebc <OLED_WR_Byte+0x90>)
 8008e58:	f7fa f9a2 	bl	80031a0 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	73fb      	strb	r3, [r7, #15]
 8008e60:	e01e      	b.n	8008ea0 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8008e62:	2200      	movs	r2, #0
 8008e64:	2120      	movs	r1, #32
 8008e66:	4815      	ldr	r0, [pc, #84]	; (8008ebc <OLED_WR_Byte+0x90>)
 8008e68:	f7fa f99a 	bl	80031a0 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8008e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	da05      	bge.n	8008e80 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8008e74:	2201      	movs	r2, #1
 8008e76:	2140      	movs	r1, #64	; 0x40
 8008e78:	4810      	ldr	r0, [pc, #64]	; (8008ebc <OLED_WR_Byte+0x90>)
 8008e7a:	f7fa f991 	bl	80031a0 <HAL_GPIO_WritePin>
 8008e7e:	e004      	b.n	8008e8a <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8008e80:	2200      	movs	r2, #0
 8008e82:	2140      	movs	r1, #64	; 0x40
 8008e84:	480d      	ldr	r0, [pc, #52]	; (8008ebc <OLED_WR_Byte+0x90>)
 8008e86:	f7fa f98b 	bl	80031a0 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	2120      	movs	r1, #32
 8008e8e:	480b      	ldr	r0, [pc, #44]	; (8008ebc <OLED_WR_Byte+0x90>)
 8008e90:	f7fa f986 	bl	80031a0 <HAL_GPIO_WritePin>
		dat<<=1;   
 8008e94:	79fb      	ldrb	r3, [r7, #7]
 8008e96:	005b      	lsls	r3, r3, #1
 8008e98:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8008e9a:	7bfb      	ldrb	r3, [r7, #15]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	73fb      	strb	r3, [r7, #15]
 8008ea0:	7bfb      	ldrb	r3, [r7, #15]
 8008ea2:	2b07      	cmp	r3, #7
 8008ea4:	d9dd      	bls.n	8008e62 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008eac:	4803      	ldr	r0, [pc, #12]	; (8008ebc <OLED_WR_Byte+0x90>)
 8008eae:	f7fa f977 	bl	80031a0 <HAL_GPIO_WritePin>
} 
 8008eb2:	bf00      	nop
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	40021000 	.word	0x40021000

08008ec0 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	71fb      	strb	r3, [r7, #7]
 8008eca:	e014      	b.n	8008ef6 <OLED_Clear+0x36>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	71bb      	strb	r3, [r7, #6]
 8008ed0:	e00a      	b.n	8008ee8 <OLED_Clear+0x28>
 8008ed2:	79ba      	ldrb	r2, [r7, #6]
 8008ed4:	79fb      	ldrb	r3, [r7, #7]
 8008ed6:	490c      	ldr	r1, [pc, #48]	; (8008f08 <OLED_Clear+0x48>)
 8008ed8:	00d2      	lsls	r2, r2, #3
 8008eda:	440a      	add	r2, r1
 8008edc:	4413      	add	r3, r2
 8008ede:	2200      	movs	r2, #0
 8008ee0:	701a      	strb	r2, [r3, #0]
 8008ee2:	79bb      	ldrb	r3, [r7, #6]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	71bb      	strb	r3, [r7, #6]
 8008ee8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	daf0      	bge.n	8008ed2 <OLED_Clear+0x12>
 8008ef0:	79fb      	ldrb	r3, [r7, #7]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	71fb      	strb	r3, [r7, #7]
 8008ef6:	79fb      	ldrb	r3, [r7, #7]
 8008ef8:	2b07      	cmp	r3, #7
 8008efa:	d9e7      	bls.n	8008ecc <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8008efc:	f7ff ff5e 	bl	8008dbc <OLED_Refresh_Gram>
}
 8008f00:	bf00      	nop
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	20004c8c 	.word	0x20004c8c

08008f0c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	4603      	mov	r3, r0
 8008f14:	71fb      	strb	r3, [r7, #7]
 8008f16:	460b      	mov	r3, r1
 8008f18:	71bb      	strb	r3, [r7, #6]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8008f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	db41      	blt.n	8008fae <OLED_DrawPoint+0xa2>
 8008f2a:	79bb      	ldrb	r3, [r7, #6]
 8008f2c:	2b3f      	cmp	r3, #63	; 0x3f
 8008f2e:	d83e      	bhi.n	8008fae <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8008f30:	79bb      	ldrb	r3, [r7, #6]
 8008f32:	08db      	lsrs	r3, r3, #3
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	f1c3 0307 	rsb	r3, r3, #7
 8008f3a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8008f3c:	79bb      	ldrb	r3, [r7, #6]
 8008f3e:	f003 0307 	and.w	r3, r3, #7
 8008f42:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8008f44:	7b7b      	ldrb	r3, [r7, #13]
 8008f46:	f1c3 0307 	rsb	r3, r3, #7
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f50:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8008f52:	797b      	ldrb	r3, [r7, #5]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d012      	beq.n	8008f7e <OLED_DrawPoint+0x72>
 8008f58:	79fa      	ldrb	r2, [r7, #7]
 8008f5a:	7bbb      	ldrb	r3, [r7, #14]
 8008f5c:	4917      	ldr	r1, [pc, #92]	; (8008fbc <OLED_DrawPoint+0xb0>)
 8008f5e:	00d2      	lsls	r2, r2, #3
 8008f60:	440a      	add	r2, r1
 8008f62:	4413      	add	r3, r2
 8008f64:	7818      	ldrb	r0, [r3, #0]
 8008f66:	79fa      	ldrb	r2, [r7, #7]
 8008f68:	7bbb      	ldrb	r3, [r7, #14]
 8008f6a:	7bf9      	ldrb	r1, [r7, #15]
 8008f6c:	4301      	orrs	r1, r0
 8008f6e:	b2c8      	uxtb	r0, r1
 8008f70:	4912      	ldr	r1, [pc, #72]	; (8008fbc <OLED_DrawPoint+0xb0>)
 8008f72:	00d2      	lsls	r2, r2, #3
 8008f74:	440a      	add	r2, r1
 8008f76:	4413      	add	r3, r2
 8008f78:	4602      	mov	r2, r0
 8008f7a:	701a      	strb	r2, [r3, #0]
 8008f7c:	e018      	b.n	8008fb0 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8008f7e:	79fa      	ldrb	r2, [r7, #7]
 8008f80:	7bbb      	ldrb	r3, [r7, #14]
 8008f82:	490e      	ldr	r1, [pc, #56]	; (8008fbc <OLED_DrawPoint+0xb0>)
 8008f84:	00d2      	lsls	r2, r2, #3
 8008f86:	440a      	add	r2, r1
 8008f88:	4413      	add	r3, r2
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	b25a      	sxtb	r2, r3
 8008f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f92:	43db      	mvns	r3, r3
 8008f94:	b25b      	sxtb	r3, r3
 8008f96:	4013      	ands	r3, r2
 8008f98:	b259      	sxtb	r1, r3
 8008f9a:	79fa      	ldrb	r2, [r7, #7]
 8008f9c:	7bbb      	ldrb	r3, [r7, #14]
 8008f9e:	b2c8      	uxtb	r0, r1
 8008fa0:	4906      	ldr	r1, [pc, #24]	; (8008fbc <OLED_DrawPoint+0xb0>)
 8008fa2:	00d2      	lsls	r2, r2, #3
 8008fa4:	440a      	add	r2, r1
 8008fa6:	4413      	add	r3, r2
 8008fa8:	4602      	mov	r2, r0
 8008faa:	701a      	strb	r2, [r3, #0]
 8008fac:	e000      	b.n	8008fb0 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8008fae:	bf00      	nop
}
 8008fb0:	3714      	adds	r7, #20
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	20004c8c 	.word	0x20004c8c

08008fc0 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8008fc0:	b590      	push	{r4, r7, lr}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	4604      	mov	r4, r0
 8008fc8:	4608      	mov	r0, r1
 8008fca:	4611      	mov	r1, r2
 8008fcc:	461a      	mov	r2, r3
 8008fce:	4623      	mov	r3, r4
 8008fd0:	71fb      	strb	r3, [r7, #7]
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	71bb      	strb	r3, [r7, #6]
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	717b      	strb	r3, [r7, #5]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8008fde:	79bb      	ldrb	r3, [r7, #6]
 8008fe0:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8008fe2:	797b      	ldrb	r3, [r7, #5]
 8008fe4:	3b20      	subs	r3, #32
 8008fe6:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8008fe8:	2300      	movs	r3, #0
 8008fea:	73bb      	strb	r3, [r7, #14]
 8008fec:	e04d      	b.n	800908a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8008fee:	793b      	ldrb	r3, [r7, #4]
 8008ff0:	2b0c      	cmp	r3, #12
 8008ff2:	d10b      	bne.n	800900c <OLED_ShowChar+0x4c>
 8008ff4:	797a      	ldrb	r2, [r7, #5]
 8008ff6:	7bb9      	ldrb	r1, [r7, #14]
 8008ff8:	4828      	ldr	r0, [pc, #160]	; (800909c <OLED_ShowChar+0xdc>)
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	005b      	lsls	r3, r3, #1
 8008ffe:	4413      	add	r3, r2
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	4403      	add	r3, r0
 8009004:	440b      	add	r3, r1
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	73fb      	strb	r3, [r7, #15]
 800900a:	e007      	b.n	800901c <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800900c:	797a      	ldrb	r2, [r7, #5]
 800900e:	7bbb      	ldrb	r3, [r7, #14]
 8009010:	4923      	ldr	r1, [pc, #140]	; (80090a0 <OLED_ShowChar+0xe0>)
 8009012:	0112      	lsls	r2, r2, #4
 8009014:	440a      	add	r2, r1
 8009016:	4413      	add	r3, r2
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800901c:	2300      	movs	r3, #0
 800901e:	737b      	strb	r3, [r7, #13]
 8009020:	e02d      	b.n	800907e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8009022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009026:	2b00      	cmp	r3, #0
 8009028:	da07      	bge.n	800903a <OLED_ShowChar+0x7a>
 800902a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800902e:	79b9      	ldrb	r1, [r7, #6]
 8009030:	79fb      	ldrb	r3, [r7, #7]
 8009032:	4618      	mov	r0, r3
 8009034:	f7ff ff6a 	bl	8008f0c <OLED_DrawPoint>
 8009038:	e00c      	b.n	8009054 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800903a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800903e:	2b00      	cmp	r3, #0
 8009040:	bf0c      	ite	eq
 8009042:	2301      	moveq	r3, #1
 8009044:	2300      	movne	r3, #0
 8009046:	b2db      	uxtb	r3, r3
 8009048:	461a      	mov	r2, r3
 800904a:	79b9      	ldrb	r1, [r7, #6]
 800904c:	79fb      	ldrb	r3, [r7, #7]
 800904e:	4618      	mov	r0, r3
 8009050:	f7ff ff5c 	bl	8008f0c <OLED_DrawPoint>
			temp<<=1;
 8009054:	7bfb      	ldrb	r3, [r7, #15]
 8009056:	005b      	lsls	r3, r3, #1
 8009058:	73fb      	strb	r3, [r7, #15]
			y++;
 800905a:	79bb      	ldrb	r3, [r7, #6]
 800905c:	3301      	adds	r3, #1
 800905e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8009060:	79ba      	ldrb	r2, [r7, #6]
 8009062:	7b3b      	ldrb	r3, [r7, #12]
 8009064:	1ad2      	subs	r2, r2, r3
 8009066:	793b      	ldrb	r3, [r7, #4]
 8009068:	429a      	cmp	r2, r3
 800906a:	d105      	bne.n	8009078 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800906c:	7b3b      	ldrb	r3, [r7, #12]
 800906e:	71bb      	strb	r3, [r7, #6]
				x++;
 8009070:	79fb      	ldrb	r3, [r7, #7]
 8009072:	3301      	adds	r3, #1
 8009074:	71fb      	strb	r3, [r7, #7]
				break;
 8009076:	e005      	b.n	8009084 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8009078:	7b7b      	ldrb	r3, [r7, #13]
 800907a:	3301      	adds	r3, #1
 800907c:	737b      	strb	r3, [r7, #13]
 800907e:	7b7b      	ldrb	r3, [r7, #13]
 8009080:	2b07      	cmp	r3, #7
 8009082:	d9ce      	bls.n	8009022 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8009084:	7bbb      	ldrb	r3, [r7, #14]
 8009086:	3301      	adds	r3, #1
 8009088:	73bb      	strb	r3, [r7, #14]
 800908a:	7bba      	ldrb	r2, [r7, #14]
 800908c:	793b      	ldrb	r3, [r7, #4]
 800908e:	429a      	cmp	r2, r3
 8009090:	d3ad      	bcc.n	8008fee <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8009092:	bf00      	nop
 8009094:	bf00      	nop
 8009096:	3714      	adds	r7, #20
 8009098:	46bd      	mov	sp, r7
 800909a:	bd90      	pop	{r4, r7, pc}
 800909c:	0800ab34 	.word	0x0800ab34
 80090a0:	0800afa8 	.word	0x0800afa8

080090a4 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af02      	add	r7, sp, #8
 80090aa:	4603      	mov	r3, r0
 80090ac:	603a      	str	r2, [r7, #0]
 80090ae:	71fb      	strb	r3, [r7, #7]
 80090b0:	460b      	mov	r3, r1
 80090b2:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 80090b4:	e01f      	b.n	80090f6 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 80090b6:	79fb      	ldrb	r3, [r7, #7]
 80090b8:	2b7a      	cmp	r3, #122	; 0x7a
 80090ba:	d904      	bls.n	80090c6 <OLED_ShowString+0x22>
 80090bc:	2300      	movs	r3, #0
 80090be:	71fb      	strb	r3, [r7, #7]
 80090c0:	79bb      	ldrb	r3, [r7, #6]
 80090c2:	3310      	adds	r3, #16
 80090c4:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80090c6:	79bb      	ldrb	r3, [r7, #6]
 80090c8:	2b3a      	cmp	r3, #58	; 0x3a
 80090ca:	d905      	bls.n	80090d8 <OLED_ShowString+0x34>
 80090cc:	2300      	movs	r3, #0
 80090ce:	71fb      	strb	r3, [r7, #7]
 80090d0:	79fb      	ldrb	r3, [r7, #7]
 80090d2:	71bb      	strb	r3, [r7, #6]
 80090d4:	f7ff fef4 	bl	8008ec0 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	781a      	ldrb	r2, [r3, #0]
 80090dc:	79b9      	ldrb	r1, [r7, #6]
 80090de:	79f8      	ldrb	r0, [r7, #7]
 80090e0:	2301      	movs	r3, #1
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	230c      	movs	r3, #12
 80090e6:	f7ff ff6b 	bl	8008fc0 <OLED_ShowChar>
        x+=8;
 80090ea:	79fb      	ldrb	r3, [r7, #7]
 80090ec:	3308      	adds	r3, #8
 80090ee:	71fb      	strb	r3, [r7, #7]
        p++;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	3301      	adds	r3, #1
 80090f4:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1db      	bne.n	80090b6 <OLED_ShowString+0x12>
    }  
}	 
 80090fe:	bf00      	nop
 8009100:	bf00      	nop
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <OLED_Init>:

void OLED_Init(void)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800910c:	f7fa f862 	bl	80031d4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8009110:	4b41      	ldr	r3, [pc, #260]	; (8009218 <OLED_Init+0x110>)
 8009112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009114:	4a40      	ldr	r2, [pc, #256]	; (8009218 <OLED_Init+0x110>)
 8009116:	f023 0301 	bic.w	r3, r3, #1
 800911a:	6713      	str	r3, [r2, #112]	; 0x70
 800911c:	4b3e      	ldr	r3, [pc, #248]	; (8009218 <OLED_Init+0x110>)
 800911e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009120:	4a3d      	ldr	r2, [pc, #244]	; (8009218 <OLED_Init+0x110>)
 8009122:	f023 0304 	bic.w	r3, r3, #4
 8009126:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8009128:	f7fa f868 	bl	80031fc <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800912c:	2200      	movs	r2, #0
 800912e:	2180      	movs	r1, #128	; 0x80
 8009130:	483a      	ldr	r0, [pc, #232]	; (800921c <OLED_Init+0x114>)
 8009132:	f7fa f835 	bl	80031a0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8009136:	2064      	movs	r0, #100	; 0x64
 8009138:	f7f9 f824 	bl	8002184 <HAL_Delay>
	OLED_RST_Set();
 800913c:	2201      	movs	r2, #1
 800913e:	2180      	movs	r1, #128	; 0x80
 8009140:	4836      	ldr	r0, [pc, #216]	; (800921c <OLED_Init+0x114>)
 8009142:	f7fa f82d 	bl	80031a0 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8009146:	2100      	movs	r1, #0
 8009148:	20ae      	movs	r0, #174	; 0xae
 800914a:	f7ff fe6f 	bl	8008e2c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800914e:	2100      	movs	r1, #0
 8009150:	20d5      	movs	r0, #213	; 0xd5
 8009152:	f7ff fe6b 	bl	8008e2c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8009156:	2100      	movs	r1, #0
 8009158:	2050      	movs	r0, #80	; 0x50
 800915a:	f7ff fe67 	bl	8008e2c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800915e:	2100      	movs	r1, #0
 8009160:	20a8      	movs	r0, #168	; 0xa8
 8009162:	f7ff fe63 	bl	8008e2c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8009166:	2100      	movs	r1, #0
 8009168:	203f      	movs	r0, #63	; 0x3f
 800916a:	f7ff fe5f 	bl	8008e2c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800916e:	2100      	movs	r1, #0
 8009170:	20d3      	movs	r0, #211	; 0xd3
 8009172:	f7ff fe5b 	bl	8008e2c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8009176:	2100      	movs	r1, #0
 8009178:	2000      	movs	r0, #0
 800917a:	f7ff fe57 	bl	8008e2c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800917e:	2100      	movs	r1, #0
 8009180:	2040      	movs	r0, #64	; 0x40
 8009182:	f7ff fe53 	bl	8008e2c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8009186:	2100      	movs	r1, #0
 8009188:	208d      	movs	r0, #141	; 0x8d
 800918a:	f7ff fe4f 	bl	8008e2c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800918e:	2100      	movs	r1, #0
 8009190:	2014      	movs	r0, #20
 8009192:	f7ff fe4b 	bl	8008e2c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8009196:	2100      	movs	r1, #0
 8009198:	2020      	movs	r0, #32
 800919a:	f7ff fe47 	bl	8008e2c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800919e:	2100      	movs	r1, #0
 80091a0:	2002      	movs	r0, #2
 80091a2:	f7ff fe43 	bl	8008e2c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80091a6:	2100      	movs	r1, #0
 80091a8:	20a1      	movs	r0, #161	; 0xa1
 80091aa:	f7ff fe3f 	bl	8008e2c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80091ae:	2100      	movs	r1, #0
 80091b0:	20c0      	movs	r0, #192	; 0xc0
 80091b2:	f7ff fe3b 	bl	8008e2c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 80091b6:	2100      	movs	r1, #0
 80091b8:	20da      	movs	r0, #218	; 0xda
 80091ba:	f7ff fe37 	bl	8008e2c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 80091be:	2100      	movs	r1, #0
 80091c0:	2012      	movs	r0, #18
 80091c2:	f7ff fe33 	bl	8008e2c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 80091c6:	2100      	movs	r1, #0
 80091c8:	2081      	movs	r0, #129	; 0x81
 80091ca:	f7ff fe2f 	bl	8008e2c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 80091ce:	2100      	movs	r1, #0
 80091d0:	20ef      	movs	r0, #239	; 0xef
 80091d2:	f7ff fe2b 	bl	8008e2c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80091d6:	2100      	movs	r1, #0
 80091d8:	20d9      	movs	r0, #217	; 0xd9
 80091da:	f7ff fe27 	bl	8008e2c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80091de:	2100      	movs	r1, #0
 80091e0:	20f1      	movs	r0, #241	; 0xf1
 80091e2:	f7ff fe23 	bl	8008e2c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80091e6:	2100      	movs	r1, #0
 80091e8:	20db      	movs	r0, #219	; 0xdb
 80091ea:	f7ff fe1f 	bl	8008e2c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80091ee:	2100      	movs	r1, #0
 80091f0:	2030      	movs	r0, #48	; 0x30
 80091f2:	f7ff fe1b 	bl	8008e2c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80091f6:	2100      	movs	r1, #0
 80091f8:	20a4      	movs	r0, #164	; 0xa4
 80091fa:	f7ff fe17 	bl	8008e2c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 80091fe:	2100      	movs	r1, #0
 8009200:	20a6      	movs	r0, #166	; 0xa6
 8009202:	f7ff fe13 	bl	8008e2c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8009206:	2100      	movs	r1, #0
 8009208:	20af      	movs	r0, #175	; 0xaf
 800920a:	f7ff fe0f 	bl	8008e2c <OLED_WR_Byte>
	OLED_Clear(); 
 800920e:	f7ff fe57 	bl	8008ec0 <OLED_Clear>
 8009212:	bf00      	nop
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	40023800 	.word	0x40023800
 800921c:	40021000 	.word	0x40021000

08009220 <__errno>:
 8009220:	4b01      	ldr	r3, [pc, #4]	; (8009228 <__errno+0x8>)
 8009222:	6818      	ldr	r0, [r3, #0]
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	20000010 	.word	0x20000010

0800922c <__libc_init_array>:
 800922c:	b570      	push	{r4, r5, r6, lr}
 800922e:	4d0d      	ldr	r5, [pc, #52]	; (8009264 <__libc_init_array+0x38>)
 8009230:	4c0d      	ldr	r4, [pc, #52]	; (8009268 <__libc_init_array+0x3c>)
 8009232:	1b64      	subs	r4, r4, r5
 8009234:	10a4      	asrs	r4, r4, #2
 8009236:	2600      	movs	r6, #0
 8009238:	42a6      	cmp	r6, r4
 800923a:	d109      	bne.n	8009250 <__libc_init_array+0x24>
 800923c:	4d0b      	ldr	r5, [pc, #44]	; (800926c <__libc_init_array+0x40>)
 800923e:	4c0c      	ldr	r4, [pc, #48]	; (8009270 <__libc_init_array+0x44>)
 8009240:	f001 fc04 	bl	800aa4c <_init>
 8009244:	1b64      	subs	r4, r4, r5
 8009246:	10a4      	asrs	r4, r4, #2
 8009248:	2600      	movs	r6, #0
 800924a:	42a6      	cmp	r6, r4
 800924c:	d105      	bne.n	800925a <__libc_init_array+0x2e>
 800924e:	bd70      	pop	{r4, r5, r6, pc}
 8009250:	f855 3b04 	ldr.w	r3, [r5], #4
 8009254:	4798      	blx	r3
 8009256:	3601      	adds	r6, #1
 8009258:	e7ee      	b.n	8009238 <__libc_init_array+0xc>
 800925a:	f855 3b04 	ldr.w	r3, [r5], #4
 800925e:	4798      	blx	r3
 8009260:	3601      	adds	r6, #1
 8009262:	e7f2      	b.n	800924a <__libc_init_array+0x1e>
 8009264:	0800b618 	.word	0x0800b618
 8009268:	0800b618 	.word	0x0800b618
 800926c:	0800b618 	.word	0x0800b618
 8009270:	0800b61c 	.word	0x0800b61c

08009274 <memcpy>:
 8009274:	440a      	add	r2, r1
 8009276:	4291      	cmp	r1, r2
 8009278:	f100 33ff 	add.w	r3, r0, #4294967295
 800927c:	d100      	bne.n	8009280 <memcpy+0xc>
 800927e:	4770      	bx	lr
 8009280:	b510      	push	{r4, lr}
 8009282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009286:	f803 4f01 	strb.w	r4, [r3, #1]!
 800928a:	4291      	cmp	r1, r2
 800928c:	d1f9      	bne.n	8009282 <memcpy+0xe>
 800928e:	bd10      	pop	{r4, pc}

08009290 <memset>:
 8009290:	4402      	add	r2, r0
 8009292:	4603      	mov	r3, r0
 8009294:	4293      	cmp	r3, r2
 8009296:	d100      	bne.n	800929a <memset+0xa>
 8009298:	4770      	bx	lr
 800929a:	f803 1b01 	strb.w	r1, [r3], #1
 800929e:	e7f9      	b.n	8009294 <memset+0x4>

080092a0 <siprintf>:
 80092a0:	b40e      	push	{r1, r2, r3}
 80092a2:	b500      	push	{lr}
 80092a4:	b09c      	sub	sp, #112	; 0x70
 80092a6:	ab1d      	add	r3, sp, #116	; 0x74
 80092a8:	9002      	str	r0, [sp, #8]
 80092aa:	9006      	str	r0, [sp, #24]
 80092ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092b0:	4809      	ldr	r0, [pc, #36]	; (80092d8 <siprintf+0x38>)
 80092b2:	9107      	str	r1, [sp, #28]
 80092b4:	9104      	str	r1, [sp, #16]
 80092b6:	4909      	ldr	r1, [pc, #36]	; (80092dc <siprintf+0x3c>)
 80092b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80092bc:	9105      	str	r1, [sp, #20]
 80092be:	6800      	ldr	r0, [r0, #0]
 80092c0:	9301      	str	r3, [sp, #4]
 80092c2:	a902      	add	r1, sp, #8
 80092c4:	f000 f868 	bl	8009398 <_svfiprintf_r>
 80092c8:	9b02      	ldr	r3, [sp, #8]
 80092ca:	2200      	movs	r2, #0
 80092cc:	701a      	strb	r2, [r3, #0]
 80092ce:	b01c      	add	sp, #112	; 0x70
 80092d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80092d4:	b003      	add	sp, #12
 80092d6:	4770      	bx	lr
 80092d8:	20000010 	.word	0x20000010
 80092dc:	ffff0208 	.word	0xffff0208

080092e0 <__ssputs_r>:
 80092e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092e4:	688e      	ldr	r6, [r1, #8]
 80092e6:	429e      	cmp	r6, r3
 80092e8:	4682      	mov	sl, r0
 80092ea:	460c      	mov	r4, r1
 80092ec:	4690      	mov	r8, r2
 80092ee:	461f      	mov	r7, r3
 80092f0:	d838      	bhi.n	8009364 <__ssputs_r+0x84>
 80092f2:	898a      	ldrh	r2, [r1, #12]
 80092f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80092f8:	d032      	beq.n	8009360 <__ssputs_r+0x80>
 80092fa:	6825      	ldr	r5, [r4, #0]
 80092fc:	6909      	ldr	r1, [r1, #16]
 80092fe:	eba5 0901 	sub.w	r9, r5, r1
 8009302:	6965      	ldr	r5, [r4, #20]
 8009304:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009308:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800930c:	3301      	adds	r3, #1
 800930e:	444b      	add	r3, r9
 8009310:	106d      	asrs	r5, r5, #1
 8009312:	429d      	cmp	r5, r3
 8009314:	bf38      	it	cc
 8009316:	461d      	movcc	r5, r3
 8009318:	0553      	lsls	r3, r2, #21
 800931a:	d531      	bpl.n	8009380 <__ssputs_r+0xa0>
 800931c:	4629      	mov	r1, r5
 800931e:	f000 fb39 	bl	8009994 <_malloc_r>
 8009322:	4606      	mov	r6, r0
 8009324:	b950      	cbnz	r0, 800933c <__ssputs_r+0x5c>
 8009326:	230c      	movs	r3, #12
 8009328:	f8ca 3000 	str.w	r3, [sl]
 800932c:	89a3      	ldrh	r3, [r4, #12]
 800932e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009332:	81a3      	strh	r3, [r4, #12]
 8009334:	f04f 30ff 	mov.w	r0, #4294967295
 8009338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800933c:	6921      	ldr	r1, [r4, #16]
 800933e:	464a      	mov	r2, r9
 8009340:	f7ff ff98 	bl	8009274 <memcpy>
 8009344:	89a3      	ldrh	r3, [r4, #12]
 8009346:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800934a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800934e:	81a3      	strh	r3, [r4, #12]
 8009350:	6126      	str	r6, [r4, #16]
 8009352:	6165      	str	r5, [r4, #20]
 8009354:	444e      	add	r6, r9
 8009356:	eba5 0509 	sub.w	r5, r5, r9
 800935a:	6026      	str	r6, [r4, #0]
 800935c:	60a5      	str	r5, [r4, #8]
 800935e:	463e      	mov	r6, r7
 8009360:	42be      	cmp	r6, r7
 8009362:	d900      	bls.n	8009366 <__ssputs_r+0x86>
 8009364:	463e      	mov	r6, r7
 8009366:	4632      	mov	r2, r6
 8009368:	6820      	ldr	r0, [r4, #0]
 800936a:	4641      	mov	r1, r8
 800936c:	f000 faa8 	bl	80098c0 <memmove>
 8009370:	68a3      	ldr	r3, [r4, #8]
 8009372:	6822      	ldr	r2, [r4, #0]
 8009374:	1b9b      	subs	r3, r3, r6
 8009376:	4432      	add	r2, r6
 8009378:	60a3      	str	r3, [r4, #8]
 800937a:	6022      	str	r2, [r4, #0]
 800937c:	2000      	movs	r0, #0
 800937e:	e7db      	b.n	8009338 <__ssputs_r+0x58>
 8009380:	462a      	mov	r2, r5
 8009382:	f000 fb61 	bl	8009a48 <_realloc_r>
 8009386:	4606      	mov	r6, r0
 8009388:	2800      	cmp	r0, #0
 800938a:	d1e1      	bne.n	8009350 <__ssputs_r+0x70>
 800938c:	6921      	ldr	r1, [r4, #16]
 800938e:	4650      	mov	r0, sl
 8009390:	f000 fab0 	bl	80098f4 <_free_r>
 8009394:	e7c7      	b.n	8009326 <__ssputs_r+0x46>
	...

08009398 <_svfiprintf_r>:
 8009398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939c:	4698      	mov	r8, r3
 800939e:	898b      	ldrh	r3, [r1, #12]
 80093a0:	061b      	lsls	r3, r3, #24
 80093a2:	b09d      	sub	sp, #116	; 0x74
 80093a4:	4607      	mov	r7, r0
 80093a6:	460d      	mov	r5, r1
 80093a8:	4614      	mov	r4, r2
 80093aa:	d50e      	bpl.n	80093ca <_svfiprintf_r+0x32>
 80093ac:	690b      	ldr	r3, [r1, #16]
 80093ae:	b963      	cbnz	r3, 80093ca <_svfiprintf_r+0x32>
 80093b0:	2140      	movs	r1, #64	; 0x40
 80093b2:	f000 faef 	bl	8009994 <_malloc_r>
 80093b6:	6028      	str	r0, [r5, #0]
 80093b8:	6128      	str	r0, [r5, #16]
 80093ba:	b920      	cbnz	r0, 80093c6 <_svfiprintf_r+0x2e>
 80093bc:	230c      	movs	r3, #12
 80093be:	603b      	str	r3, [r7, #0]
 80093c0:	f04f 30ff 	mov.w	r0, #4294967295
 80093c4:	e0d1      	b.n	800956a <_svfiprintf_r+0x1d2>
 80093c6:	2340      	movs	r3, #64	; 0x40
 80093c8:	616b      	str	r3, [r5, #20]
 80093ca:	2300      	movs	r3, #0
 80093cc:	9309      	str	r3, [sp, #36]	; 0x24
 80093ce:	2320      	movs	r3, #32
 80093d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80093d8:	2330      	movs	r3, #48	; 0x30
 80093da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009584 <_svfiprintf_r+0x1ec>
 80093de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093e2:	f04f 0901 	mov.w	r9, #1
 80093e6:	4623      	mov	r3, r4
 80093e8:	469a      	mov	sl, r3
 80093ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093ee:	b10a      	cbz	r2, 80093f4 <_svfiprintf_r+0x5c>
 80093f0:	2a25      	cmp	r2, #37	; 0x25
 80093f2:	d1f9      	bne.n	80093e8 <_svfiprintf_r+0x50>
 80093f4:	ebba 0b04 	subs.w	fp, sl, r4
 80093f8:	d00b      	beq.n	8009412 <_svfiprintf_r+0x7a>
 80093fa:	465b      	mov	r3, fp
 80093fc:	4622      	mov	r2, r4
 80093fe:	4629      	mov	r1, r5
 8009400:	4638      	mov	r0, r7
 8009402:	f7ff ff6d 	bl	80092e0 <__ssputs_r>
 8009406:	3001      	adds	r0, #1
 8009408:	f000 80aa 	beq.w	8009560 <_svfiprintf_r+0x1c8>
 800940c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800940e:	445a      	add	r2, fp
 8009410:	9209      	str	r2, [sp, #36]	; 0x24
 8009412:	f89a 3000 	ldrb.w	r3, [sl]
 8009416:	2b00      	cmp	r3, #0
 8009418:	f000 80a2 	beq.w	8009560 <_svfiprintf_r+0x1c8>
 800941c:	2300      	movs	r3, #0
 800941e:	f04f 32ff 	mov.w	r2, #4294967295
 8009422:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009426:	f10a 0a01 	add.w	sl, sl, #1
 800942a:	9304      	str	r3, [sp, #16]
 800942c:	9307      	str	r3, [sp, #28]
 800942e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009432:	931a      	str	r3, [sp, #104]	; 0x68
 8009434:	4654      	mov	r4, sl
 8009436:	2205      	movs	r2, #5
 8009438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800943c:	4851      	ldr	r0, [pc, #324]	; (8009584 <_svfiprintf_r+0x1ec>)
 800943e:	f7f6 fec7 	bl	80001d0 <memchr>
 8009442:	9a04      	ldr	r2, [sp, #16]
 8009444:	b9d8      	cbnz	r0, 800947e <_svfiprintf_r+0xe6>
 8009446:	06d0      	lsls	r0, r2, #27
 8009448:	bf44      	itt	mi
 800944a:	2320      	movmi	r3, #32
 800944c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009450:	0711      	lsls	r1, r2, #28
 8009452:	bf44      	itt	mi
 8009454:	232b      	movmi	r3, #43	; 0x2b
 8009456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800945a:	f89a 3000 	ldrb.w	r3, [sl]
 800945e:	2b2a      	cmp	r3, #42	; 0x2a
 8009460:	d015      	beq.n	800948e <_svfiprintf_r+0xf6>
 8009462:	9a07      	ldr	r2, [sp, #28]
 8009464:	4654      	mov	r4, sl
 8009466:	2000      	movs	r0, #0
 8009468:	f04f 0c0a 	mov.w	ip, #10
 800946c:	4621      	mov	r1, r4
 800946e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009472:	3b30      	subs	r3, #48	; 0x30
 8009474:	2b09      	cmp	r3, #9
 8009476:	d94e      	bls.n	8009516 <_svfiprintf_r+0x17e>
 8009478:	b1b0      	cbz	r0, 80094a8 <_svfiprintf_r+0x110>
 800947a:	9207      	str	r2, [sp, #28]
 800947c:	e014      	b.n	80094a8 <_svfiprintf_r+0x110>
 800947e:	eba0 0308 	sub.w	r3, r0, r8
 8009482:	fa09 f303 	lsl.w	r3, r9, r3
 8009486:	4313      	orrs	r3, r2
 8009488:	9304      	str	r3, [sp, #16]
 800948a:	46a2      	mov	sl, r4
 800948c:	e7d2      	b.n	8009434 <_svfiprintf_r+0x9c>
 800948e:	9b03      	ldr	r3, [sp, #12]
 8009490:	1d19      	adds	r1, r3, #4
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	9103      	str	r1, [sp, #12]
 8009496:	2b00      	cmp	r3, #0
 8009498:	bfbb      	ittet	lt
 800949a:	425b      	neglt	r3, r3
 800949c:	f042 0202 	orrlt.w	r2, r2, #2
 80094a0:	9307      	strge	r3, [sp, #28]
 80094a2:	9307      	strlt	r3, [sp, #28]
 80094a4:	bfb8      	it	lt
 80094a6:	9204      	strlt	r2, [sp, #16]
 80094a8:	7823      	ldrb	r3, [r4, #0]
 80094aa:	2b2e      	cmp	r3, #46	; 0x2e
 80094ac:	d10c      	bne.n	80094c8 <_svfiprintf_r+0x130>
 80094ae:	7863      	ldrb	r3, [r4, #1]
 80094b0:	2b2a      	cmp	r3, #42	; 0x2a
 80094b2:	d135      	bne.n	8009520 <_svfiprintf_r+0x188>
 80094b4:	9b03      	ldr	r3, [sp, #12]
 80094b6:	1d1a      	adds	r2, r3, #4
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	9203      	str	r2, [sp, #12]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	bfb8      	it	lt
 80094c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80094c4:	3402      	adds	r4, #2
 80094c6:	9305      	str	r3, [sp, #20]
 80094c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009594 <_svfiprintf_r+0x1fc>
 80094cc:	7821      	ldrb	r1, [r4, #0]
 80094ce:	2203      	movs	r2, #3
 80094d0:	4650      	mov	r0, sl
 80094d2:	f7f6 fe7d 	bl	80001d0 <memchr>
 80094d6:	b140      	cbz	r0, 80094ea <_svfiprintf_r+0x152>
 80094d8:	2340      	movs	r3, #64	; 0x40
 80094da:	eba0 000a 	sub.w	r0, r0, sl
 80094de:	fa03 f000 	lsl.w	r0, r3, r0
 80094e2:	9b04      	ldr	r3, [sp, #16]
 80094e4:	4303      	orrs	r3, r0
 80094e6:	3401      	adds	r4, #1
 80094e8:	9304      	str	r3, [sp, #16]
 80094ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094ee:	4826      	ldr	r0, [pc, #152]	; (8009588 <_svfiprintf_r+0x1f0>)
 80094f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094f4:	2206      	movs	r2, #6
 80094f6:	f7f6 fe6b 	bl	80001d0 <memchr>
 80094fa:	2800      	cmp	r0, #0
 80094fc:	d038      	beq.n	8009570 <_svfiprintf_r+0x1d8>
 80094fe:	4b23      	ldr	r3, [pc, #140]	; (800958c <_svfiprintf_r+0x1f4>)
 8009500:	bb1b      	cbnz	r3, 800954a <_svfiprintf_r+0x1b2>
 8009502:	9b03      	ldr	r3, [sp, #12]
 8009504:	3307      	adds	r3, #7
 8009506:	f023 0307 	bic.w	r3, r3, #7
 800950a:	3308      	adds	r3, #8
 800950c:	9303      	str	r3, [sp, #12]
 800950e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009510:	4433      	add	r3, r6
 8009512:	9309      	str	r3, [sp, #36]	; 0x24
 8009514:	e767      	b.n	80093e6 <_svfiprintf_r+0x4e>
 8009516:	fb0c 3202 	mla	r2, ip, r2, r3
 800951a:	460c      	mov	r4, r1
 800951c:	2001      	movs	r0, #1
 800951e:	e7a5      	b.n	800946c <_svfiprintf_r+0xd4>
 8009520:	2300      	movs	r3, #0
 8009522:	3401      	adds	r4, #1
 8009524:	9305      	str	r3, [sp, #20]
 8009526:	4619      	mov	r1, r3
 8009528:	f04f 0c0a 	mov.w	ip, #10
 800952c:	4620      	mov	r0, r4
 800952e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009532:	3a30      	subs	r2, #48	; 0x30
 8009534:	2a09      	cmp	r2, #9
 8009536:	d903      	bls.n	8009540 <_svfiprintf_r+0x1a8>
 8009538:	2b00      	cmp	r3, #0
 800953a:	d0c5      	beq.n	80094c8 <_svfiprintf_r+0x130>
 800953c:	9105      	str	r1, [sp, #20]
 800953e:	e7c3      	b.n	80094c8 <_svfiprintf_r+0x130>
 8009540:	fb0c 2101 	mla	r1, ip, r1, r2
 8009544:	4604      	mov	r4, r0
 8009546:	2301      	movs	r3, #1
 8009548:	e7f0      	b.n	800952c <_svfiprintf_r+0x194>
 800954a:	ab03      	add	r3, sp, #12
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	462a      	mov	r2, r5
 8009550:	4b0f      	ldr	r3, [pc, #60]	; (8009590 <_svfiprintf_r+0x1f8>)
 8009552:	a904      	add	r1, sp, #16
 8009554:	4638      	mov	r0, r7
 8009556:	f3af 8000 	nop.w
 800955a:	1c42      	adds	r2, r0, #1
 800955c:	4606      	mov	r6, r0
 800955e:	d1d6      	bne.n	800950e <_svfiprintf_r+0x176>
 8009560:	89ab      	ldrh	r3, [r5, #12]
 8009562:	065b      	lsls	r3, r3, #25
 8009564:	f53f af2c 	bmi.w	80093c0 <_svfiprintf_r+0x28>
 8009568:	9809      	ldr	r0, [sp, #36]	; 0x24
 800956a:	b01d      	add	sp, #116	; 0x74
 800956c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009570:	ab03      	add	r3, sp, #12
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	462a      	mov	r2, r5
 8009576:	4b06      	ldr	r3, [pc, #24]	; (8009590 <_svfiprintf_r+0x1f8>)
 8009578:	a904      	add	r1, sp, #16
 800957a:	4638      	mov	r0, r7
 800957c:	f000 f87a 	bl	8009674 <_printf_i>
 8009580:	e7eb      	b.n	800955a <_svfiprintf_r+0x1c2>
 8009582:	bf00      	nop
 8009584:	0800b598 	.word	0x0800b598
 8009588:	0800b5a2 	.word	0x0800b5a2
 800958c:	00000000 	.word	0x00000000
 8009590:	080092e1 	.word	0x080092e1
 8009594:	0800b59e 	.word	0x0800b59e

08009598 <_printf_common>:
 8009598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800959c:	4616      	mov	r6, r2
 800959e:	4699      	mov	r9, r3
 80095a0:	688a      	ldr	r2, [r1, #8]
 80095a2:	690b      	ldr	r3, [r1, #16]
 80095a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095a8:	4293      	cmp	r3, r2
 80095aa:	bfb8      	it	lt
 80095ac:	4613      	movlt	r3, r2
 80095ae:	6033      	str	r3, [r6, #0]
 80095b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095b4:	4607      	mov	r7, r0
 80095b6:	460c      	mov	r4, r1
 80095b8:	b10a      	cbz	r2, 80095be <_printf_common+0x26>
 80095ba:	3301      	adds	r3, #1
 80095bc:	6033      	str	r3, [r6, #0]
 80095be:	6823      	ldr	r3, [r4, #0]
 80095c0:	0699      	lsls	r1, r3, #26
 80095c2:	bf42      	ittt	mi
 80095c4:	6833      	ldrmi	r3, [r6, #0]
 80095c6:	3302      	addmi	r3, #2
 80095c8:	6033      	strmi	r3, [r6, #0]
 80095ca:	6825      	ldr	r5, [r4, #0]
 80095cc:	f015 0506 	ands.w	r5, r5, #6
 80095d0:	d106      	bne.n	80095e0 <_printf_common+0x48>
 80095d2:	f104 0a19 	add.w	sl, r4, #25
 80095d6:	68e3      	ldr	r3, [r4, #12]
 80095d8:	6832      	ldr	r2, [r6, #0]
 80095da:	1a9b      	subs	r3, r3, r2
 80095dc:	42ab      	cmp	r3, r5
 80095de:	dc26      	bgt.n	800962e <_printf_common+0x96>
 80095e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095e4:	1e13      	subs	r3, r2, #0
 80095e6:	6822      	ldr	r2, [r4, #0]
 80095e8:	bf18      	it	ne
 80095ea:	2301      	movne	r3, #1
 80095ec:	0692      	lsls	r2, r2, #26
 80095ee:	d42b      	bmi.n	8009648 <_printf_common+0xb0>
 80095f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095f4:	4649      	mov	r1, r9
 80095f6:	4638      	mov	r0, r7
 80095f8:	47c0      	blx	r8
 80095fa:	3001      	adds	r0, #1
 80095fc:	d01e      	beq.n	800963c <_printf_common+0xa4>
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	68e5      	ldr	r5, [r4, #12]
 8009602:	6832      	ldr	r2, [r6, #0]
 8009604:	f003 0306 	and.w	r3, r3, #6
 8009608:	2b04      	cmp	r3, #4
 800960a:	bf08      	it	eq
 800960c:	1aad      	subeq	r5, r5, r2
 800960e:	68a3      	ldr	r3, [r4, #8]
 8009610:	6922      	ldr	r2, [r4, #16]
 8009612:	bf0c      	ite	eq
 8009614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009618:	2500      	movne	r5, #0
 800961a:	4293      	cmp	r3, r2
 800961c:	bfc4      	itt	gt
 800961e:	1a9b      	subgt	r3, r3, r2
 8009620:	18ed      	addgt	r5, r5, r3
 8009622:	2600      	movs	r6, #0
 8009624:	341a      	adds	r4, #26
 8009626:	42b5      	cmp	r5, r6
 8009628:	d11a      	bne.n	8009660 <_printf_common+0xc8>
 800962a:	2000      	movs	r0, #0
 800962c:	e008      	b.n	8009640 <_printf_common+0xa8>
 800962e:	2301      	movs	r3, #1
 8009630:	4652      	mov	r2, sl
 8009632:	4649      	mov	r1, r9
 8009634:	4638      	mov	r0, r7
 8009636:	47c0      	blx	r8
 8009638:	3001      	adds	r0, #1
 800963a:	d103      	bne.n	8009644 <_printf_common+0xac>
 800963c:	f04f 30ff 	mov.w	r0, #4294967295
 8009640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009644:	3501      	adds	r5, #1
 8009646:	e7c6      	b.n	80095d6 <_printf_common+0x3e>
 8009648:	18e1      	adds	r1, r4, r3
 800964a:	1c5a      	adds	r2, r3, #1
 800964c:	2030      	movs	r0, #48	; 0x30
 800964e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009652:	4422      	add	r2, r4
 8009654:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009658:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800965c:	3302      	adds	r3, #2
 800965e:	e7c7      	b.n	80095f0 <_printf_common+0x58>
 8009660:	2301      	movs	r3, #1
 8009662:	4622      	mov	r2, r4
 8009664:	4649      	mov	r1, r9
 8009666:	4638      	mov	r0, r7
 8009668:	47c0      	blx	r8
 800966a:	3001      	adds	r0, #1
 800966c:	d0e6      	beq.n	800963c <_printf_common+0xa4>
 800966e:	3601      	adds	r6, #1
 8009670:	e7d9      	b.n	8009626 <_printf_common+0x8e>
	...

08009674 <_printf_i>:
 8009674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009678:	460c      	mov	r4, r1
 800967a:	4691      	mov	r9, r2
 800967c:	7e27      	ldrb	r7, [r4, #24]
 800967e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009680:	2f78      	cmp	r7, #120	; 0x78
 8009682:	4680      	mov	r8, r0
 8009684:	469a      	mov	sl, r3
 8009686:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800968a:	d807      	bhi.n	800969c <_printf_i+0x28>
 800968c:	2f62      	cmp	r7, #98	; 0x62
 800968e:	d80a      	bhi.n	80096a6 <_printf_i+0x32>
 8009690:	2f00      	cmp	r7, #0
 8009692:	f000 80d8 	beq.w	8009846 <_printf_i+0x1d2>
 8009696:	2f58      	cmp	r7, #88	; 0x58
 8009698:	f000 80a3 	beq.w	80097e2 <_printf_i+0x16e>
 800969c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80096a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096a4:	e03a      	b.n	800971c <_printf_i+0xa8>
 80096a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096aa:	2b15      	cmp	r3, #21
 80096ac:	d8f6      	bhi.n	800969c <_printf_i+0x28>
 80096ae:	a001      	add	r0, pc, #4	; (adr r0, 80096b4 <_printf_i+0x40>)
 80096b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80096b4:	0800970d 	.word	0x0800970d
 80096b8:	08009721 	.word	0x08009721
 80096bc:	0800969d 	.word	0x0800969d
 80096c0:	0800969d 	.word	0x0800969d
 80096c4:	0800969d 	.word	0x0800969d
 80096c8:	0800969d 	.word	0x0800969d
 80096cc:	08009721 	.word	0x08009721
 80096d0:	0800969d 	.word	0x0800969d
 80096d4:	0800969d 	.word	0x0800969d
 80096d8:	0800969d 	.word	0x0800969d
 80096dc:	0800969d 	.word	0x0800969d
 80096e0:	0800982d 	.word	0x0800982d
 80096e4:	08009751 	.word	0x08009751
 80096e8:	0800980f 	.word	0x0800980f
 80096ec:	0800969d 	.word	0x0800969d
 80096f0:	0800969d 	.word	0x0800969d
 80096f4:	0800984f 	.word	0x0800984f
 80096f8:	0800969d 	.word	0x0800969d
 80096fc:	08009751 	.word	0x08009751
 8009700:	0800969d 	.word	0x0800969d
 8009704:	0800969d 	.word	0x0800969d
 8009708:	08009817 	.word	0x08009817
 800970c:	680b      	ldr	r3, [r1, #0]
 800970e:	1d1a      	adds	r2, r3, #4
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	600a      	str	r2, [r1, #0]
 8009714:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009718:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800971c:	2301      	movs	r3, #1
 800971e:	e0a3      	b.n	8009868 <_printf_i+0x1f4>
 8009720:	6825      	ldr	r5, [r4, #0]
 8009722:	6808      	ldr	r0, [r1, #0]
 8009724:	062e      	lsls	r6, r5, #24
 8009726:	f100 0304 	add.w	r3, r0, #4
 800972a:	d50a      	bpl.n	8009742 <_printf_i+0xce>
 800972c:	6805      	ldr	r5, [r0, #0]
 800972e:	600b      	str	r3, [r1, #0]
 8009730:	2d00      	cmp	r5, #0
 8009732:	da03      	bge.n	800973c <_printf_i+0xc8>
 8009734:	232d      	movs	r3, #45	; 0x2d
 8009736:	426d      	negs	r5, r5
 8009738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800973c:	485e      	ldr	r0, [pc, #376]	; (80098b8 <_printf_i+0x244>)
 800973e:	230a      	movs	r3, #10
 8009740:	e019      	b.n	8009776 <_printf_i+0x102>
 8009742:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009746:	6805      	ldr	r5, [r0, #0]
 8009748:	600b      	str	r3, [r1, #0]
 800974a:	bf18      	it	ne
 800974c:	b22d      	sxthne	r5, r5
 800974e:	e7ef      	b.n	8009730 <_printf_i+0xbc>
 8009750:	680b      	ldr	r3, [r1, #0]
 8009752:	6825      	ldr	r5, [r4, #0]
 8009754:	1d18      	adds	r0, r3, #4
 8009756:	6008      	str	r0, [r1, #0]
 8009758:	0628      	lsls	r0, r5, #24
 800975a:	d501      	bpl.n	8009760 <_printf_i+0xec>
 800975c:	681d      	ldr	r5, [r3, #0]
 800975e:	e002      	b.n	8009766 <_printf_i+0xf2>
 8009760:	0669      	lsls	r1, r5, #25
 8009762:	d5fb      	bpl.n	800975c <_printf_i+0xe8>
 8009764:	881d      	ldrh	r5, [r3, #0]
 8009766:	4854      	ldr	r0, [pc, #336]	; (80098b8 <_printf_i+0x244>)
 8009768:	2f6f      	cmp	r7, #111	; 0x6f
 800976a:	bf0c      	ite	eq
 800976c:	2308      	moveq	r3, #8
 800976e:	230a      	movne	r3, #10
 8009770:	2100      	movs	r1, #0
 8009772:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009776:	6866      	ldr	r6, [r4, #4]
 8009778:	60a6      	str	r6, [r4, #8]
 800977a:	2e00      	cmp	r6, #0
 800977c:	bfa2      	ittt	ge
 800977e:	6821      	ldrge	r1, [r4, #0]
 8009780:	f021 0104 	bicge.w	r1, r1, #4
 8009784:	6021      	strge	r1, [r4, #0]
 8009786:	b90d      	cbnz	r5, 800978c <_printf_i+0x118>
 8009788:	2e00      	cmp	r6, #0
 800978a:	d04d      	beq.n	8009828 <_printf_i+0x1b4>
 800978c:	4616      	mov	r6, r2
 800978e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009792:	fb03 5711 	mls	r7, r3, r1, r5
 8009796:	5dc7      	ldrb	r7, [r0, r7]
 8009798:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800979c:	462f      	mov	r7, r5
 800979e:	42bb      	cmp	r3, r7
 80097a0:	460d      	mov	r5, r1
 80097a2:	d9f4      	bls.n	800978e <_printf_i+0x11a>
 80097a4:	2b08      	cmp	r3, #8
 80097a6:	d10b      	bne.n	80097c0 <_printf_i+0x14c>
 80097a8:	6823      	ldr	r3, [r4, #0]
 80097aa:	07df      	lsls	r7, r3, #31
 80097ac:	d508      	bpl.n	80097c0 <_printf_i+0x14c>
 80097ae:	6923      	ldr	r3, [r4, #16]
 80097b0:	6861      	ldr	r1, [r4, #4]
 80097b2:	4299      	cmp	r1, r3
 80097b4:	bfde      	ittt	le
 80097b6:	2330      	movle	r3, #48	; 0x30
 80097b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80097bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80097c0:	1b92      	subs	r2, r2, r6
 80097c2:	6122      	str	r2, [r4, #16]
 80097c4:	f8cd a000 	str.w	sl, [sp]
 80097c8:	464b      	mov	r3, r9
 80097ca:	aa03      	add	r2, sp, #12
 80097cc:	4621      	mov	r1, r4
 80097ce:	4640      	mov	r0, r8
 80097d0:	f7ff fee2 	bl	8009598 <_printf_common>
 80097d4:	3001      	adds	r0, #1
 80097d6:	d14c      	bne.n	8009872 <_printf_i+0x1fe>
 80097d8:	f04f 30ff 	mov.w	r0, #4294967295
 80097dc:	b004      	add	sp, #16
 80097de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097e2:	4835      	ldr	r0, [pc, #212]	; (80098b8 <_printf_i+0x244>)
 80097e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80097e8:	6823      	ldr	r3, [r4, #0]
 80097ea:	680e      	ldr	r6, [r1, #0]
 80097ec:	061f      	lsls	r7, r3, #24
 80097ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80097f2:	600e      	str	r6, [r1, #0]
 80097f4:	d514      	bpl.n	8009820 <_printf_i+0x1ac>
 80097f6:	07d9      	lsls	r1, r3, #31
 80097f8:	bf44      	itt	mi
 80097fa:	f043 0320 	orrmi.w	r3, r3, #32
 80097fe:	6023      	strmi	r3, [r4, #0]
 8009800:	b91d      	cbnz	r5, 800980a <_printf_i+0x196>
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	f023 0320 	bic.w	r3, r3, #32
 8009808:	6023      	str	r3, [r4, #0]
 800980a:	2310      	movs	r3, #16
 800980c:	e7b0      	b.n	8009770 <_printf_i+0xfc>
 800980e:	6823      	ldr	r3, [r4, #0]
 8009810:	f043 0320 	orr.w	r3, r3, #32
 8009814:	6023      	str	r3, [r4, #0]
 8009816:	2378      	movs	r3, #120	; 0x78
 8009818:	4828      	ldr	r0, [pc, #160]	; (80098bc <_printf_i+0x248>)
 800981a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800981e:	e7e3      	b.n	80097e8 <_printf_i+0x174>
 8009820:	065e      	lsls	r6, r3, #25
 8009822:	bf48      	it	mi
 8009824:	b2ad      	uxthmi	r5, r5
 8009826:	e7e6      	b.n	80097f6 <_printf_i+0x182>
 8009828:	4616      	mov	r6, r2
 800982a:	e7bb      	b.n	80097a4 <_printf_i+0x130>
 800982c:	680b      	ldr	r3, [r1, #0]
 800982e:	6826      	ldr	r6, [r4, #0]
 8009830:	6960      	ldr	r0, [r4, #20]
 8009832:	1d1d      	adds	r5, r3, #4
 8009834:	600d      	str	r5, [r1, #0]
 8009836:	0635      	lsls	r5, r6, #24
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	d501      	bpl.n	8009840 <_printf_i+0x1cc>
 800983c:	6018      	str	r0, [r3, #0]
 800983e:	e002      	b.n	8009846 <_printf_i+0x1d2>
 8009840:	0671      	lsls	r1, r6, #25
 8009842:	d5fb      	bpl.n	800983c <_printf_i+0x1c8>
 8009844:	8018      	strh	r0, [r3, #0]
 8009846:	2300      	movs	r3, #0
 8009848:	6123      	str	r3, [r4, #16]
 800984a:	4616      	mov	r6, r2
 800984c:	e7ba      	b.n	80097c4 <_printf_i+0x150>
 800984e:	680b      	ldr	r3, [r1, #0]
 8009850:	1d1a      	adds	r2, r3, #4
 8009852:	600a      	str	r2, [r1, #0]
 8009854:	681e      	ldr	r6, [r3, #0]
 8009856:	6862      	ldr	r2, [r4, #4]
 8009858:	2100      	movs	r1, #0
 800985a:	4630      	mov	r0, r6
 800985c:	f7f6 fcb8 	bl	80001d0 <memchr>
 8009860:	b108      	cbz	r0, 8009866 <_printf_i+0x1f2>
 8009862:	1b80      	subs	r0, r0, r6
 8009864:	6060      	str	r0, [r4, #4]
 8009866:	6863      	ldr	r3, [r4, #4]
 8009868:	6123      	str	r3, [r4, #16]
 800986a:	2300      	movs	r3, #0
 800986c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009870:	e7a8      	b.n	80097c4 <_printf_i+0x150>
 8009872:	6923      	ldr	r3, [r4, #16]
 8009874:	4632      	mov	r2, r6
 8009876:	4649      	mov	r1, r9
 8009878:	4640      	mov	r0, r8
 800987a:	47d0      	blx	sl
 800987c:	3001      	adds	r0, #1
 800987e:	d0ab      	beq.n	80097d8 <_printf_i+0x164>
 8009880:	6823      	ldr	r3, [r4, #0]
 8009882:	079b      	lsls	r3, r3, #30
 8009884:	d413      	bmi.n	80098ae <_printf_i+0x23a>
 8009886:	68e0      	ldr	r0, [r4, #12]
 8009888:	9b03      	ldr	r3, [sp, #12]
 800988a:	4298      	cmp	r0, r3
 800988c:	bfb8      	it	lt
 800988e:	4618      	movlt	r0, r3
 8009890:	e7a4      	b.n	80097dc <_printf_i+0x168>
 8009892:	2301      	movs	r3, #1
 8009894:	4632      	mov	r2, r6
 8009896:	4649      	mov	r1, r9
 8009898:	4640      	mov	r0, r8
 800989a:	47d0      	blx	sl
 800989c:	3001      	adds	r0, #1
 800989e:	d09b      	beq.n	80097d8 <_printf_i+0x164>
 80098a0:	3501      	adds	r5, #1
 80098a2:	68e3      	ldr	r3, [r4, #12]
 80098a4:	9903      	ldr	r1, [sp, #12]
 80098a6:	1a5b      	subs	r3, r3, r1
 80098a8:	42ab      	cmp	r3, r5
 80098aa:	dcf2      	bgt.n	8009892 <_printf_i+0x21e>
 80098ac:	e7eb      	b.n	8009886 <_printf_i+0x212>
 80098ae:	2500      	movs	r5, #0
 80098b0:	f104 0619 	add.w	r6, r4, #25
 80098b4:	e7f5      	b.n	80098a2 <_printf_i+0x22e>
 80098b6:	bf00      	nop
 80098b8:	0800b5a9 	.word	0x0800b5a9
 80098bc:	0800b5ba 	.word	0x0800b5ba

080098c0 <memmove>:
 80098c0:	4288      	cmp	r0, r1
 80098c2:	b510      	push	{r4, lr}
 80098c4:	eb01 0402 	add.w	r4, r1, r2
 80098c8:	d902      	bls.n	80098d0 <memmove+0x10>
 80098ca:	4284      	cmp	r4, r0
 80098cc:	4623      	mov	r3, r4
 80098ce:	d807      	bhi.n	80098e0 <memmove+0x20>
 80098d0:	1e43      	subs	r3, r0, #1
 80098d2:	42a1      	cmp	r1, r4
 80098d4:	d008      	beq.n	80098e8 <memmove+0x28>
 80098d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098de:	e7f8      	b.n	80098d2 <memmove+0x12>
 80098e0:	4402      	add	r2, r0
 80098e2:	4601      	mov	r1, r0
 80098e4:	428a      	cmp	r2, r1
 80098e6:	d100      	bne.n	80098ea <memmove+0x2a>
 80098e8:	bd10      	pop	{r4, pc}
 80098ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098f2:	e7f7      	b.n	80098e4 <memmove+0x24>

080098f4 <_free_r>:
 80098f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098f6:	2900      	cmp	r1, #0
 80098f8:	d048      	beq.n	800998c <_free_r+0x98>
 80098fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098fe:	9001      	str	r0, [sp, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	f1a1 0404 	sub.w	r4, r1, #4
 8009906:	bfb8      	it	lt
 8009908:	18e4      	addlt	r4, r4, r3
 800990a:	f000 f8d3 	bl	8009ab4 <__malloc_lock>
 800990e:	4a20      	ldr	r2, [pc, #128]	; (8009990 <_free_r+0x9c>)
 8009910:	9801      	ldr	r0, [sp, #4]
 8009912:	6813      	ldr	r3, [r2, #0]
 8009914:	4615      	mov	r5, r2
 8009916:	b933      	cbnz	r3, 8009926 <_free_r+0x32>
 8009918:	6063      	str	r3, [r4, #4]
 800991a:	6014      	str	r4, [r2, #0]
 800991c:	b003      	add	sp, #12
 800991e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009922:	f000 b8cd 	b.w	8009ac0 <__malloc_unlock>
 8009926:	42a3      	cmp	r3, r4
 8009928:	d90b      	bls.n	8009942 <_free_r+0x4e>
 800992a:	6821      	ldr	r1, [r4, #0]
 800992c:	1862      	adds	r2, r4, r1
 800992e:	4293      	cmp	r3, r2
 8009930:	bf04      	itt	eq
 8009932:	681a      	ldreq	r2, [r3, #0]
 8009934:	685b      	ldreq	r3, [r3, #4]
 8009936:	6063      	str	r3, [r4, #4]
 8009938:	bf04      	itt	eq
 800993a:	1852      	addeq	r2, r2, r1
 800993c:	6022      	streq	r2, [r4, #0]
 800993e:	602c      	str	r4, [r5, #0]
 8009940:	e7ec      	b.n	800991c <_free_r+0x28>
 8009942:	461a      	mov	r2, r3
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	b10b      	cbz	r3, 800994c <_free_r+0x58>
 8009948:	42a3      	cmp	r3, r4
 800994a:	d9fa      	bls.n	8009942 <_free_r+0x4e>
 800994c:	6811      	ldr	r1, [r2, #0]
 800994e:	1855      	adds	r5, r2, r1
 8009950:	42a5      	cmp	r5, r4
 8009952:	d10b      	bne.n	800996c <_free_r+0x78>
 8009954:	6824      	ldr	r4, [r4, #0]
 8009956:	4421      	add	r1, r4
 8009958:	1854      	adds	r4, r2, r1
 800995a:	42a3      	cmp	r3, r4
 800995c:	6011      	str	r1, [r2, #0]
 800995e:	d1dd      	bne.n	800991c <_free_r+0x28>
 8009960:	681c      	ldr	r4, [r3, #0]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	6053      	str	r3, [r2, #4]
 8009966:	4421      	add	r1, r4
 8009968:	6011      	str	r1, [r2, #0]
 800996a:	e7d7      	b.n	800991c <_free_r+0x28>
 800996c:	d902      	bls.n	8009974 <_free_r+0x80>
 800996e:	230c      	movs	r3, #12
 8009970:	6003      	str	r3, [r0, #0]
 8009972:	e7d3      	b.n	800991c <_free_r+0x28>
 8009974:	6825      	ldr	r5, [r4, #0]
 8009976:	1961      	adds	r1, r4, r5
 8009978:	428b      	cmp	r3, r1
 800997a:	bf04      	itt	eq
 800997c:	6819      	ldreq	r1, [r3, #0]
 800997e:	685b      	ldreq	r3, [r3, #4]
 8009980:	6063      	str	r3, [r4, #4]
 8009982:	bf04      	itt	eq
 8009984:	1949      	addeq	r1, r1, r5
 8009986:	6021      	streq	r1, [r4, #0]
 8009988:	6054      	str	r4, [r2, #4]
 800998a:	e7c7      	b.n	800991c <_free_r+0x28>
 800998c:	b003      	add	sp, #12
 800998e:	bd30      	pop	{r4, r5, pc}
 8009990:	200049c0 	.word	0x200049c0

08009994 <_malloc_r>:
 8009994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009996:	1ccd      	adds	r5, r1, #3
 8009998:	f025 0503 	bic.w	r5, r5, #3
 800999c:	3508      	adds	r5, #8
 800999e:	2d0c      	cmp	r5, #12
 80099a0:	bf38      	it	cc
 80099a2:	250c      	movcc	r5, #12
 80099a4:	2d00      	cmp	r5, #0
 80099a6:	4606      	mov	r6, r0
 80099a8:	db01      	blt.n	80099ae <_malloc_r+0x1a>
 80099aa:	42a9      	cmp	r1, r5
 80099ac:	d903      	bls.n	80099b6 <_malloc_r+0x22>
 80099ae:	230c      	movs	r3, #12
 80099b0:	6033      	str	r3, [r6, #0]
 80099b2:	2000      	movs	r0, #0
 80099b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099b6:	f000 f87d 	bl	8009ab4 <__malloc_lock>
 80099ba:	4921      	ldr	r1, [pc, #132]	; (8009a40 <_malloc_r+0xac>)
 80099bc:	680a      	ldr	r2, [r1, #0]
 80099be:	4614      	mov	r4, r2
 80099c0:	b99c      	cbnz	r4, 80099ea <_malloc_r+0x56>
 80099c2:	4f20      	ldr	r7, [pc, #128]	; (8009a44 <_malloc_r+0xb0>)
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	b923      	cbnz	r3, 80099d2 <_malloc_r+0x3e>
 80099c8:	4621      	mov	r1, r4
 80099ca:	4630      	mov	r0, r6
 80099cc:	f000 f862 	bl	8009a94 <_sbrk_r>
 80099d0:	6038      	str	r0, [r7, #0]
 80099d2:	4629      	mov	r1, r5
 80099d4:	4630      	mov	r0, r6
 80099d6:	f000 f85d 	bl	8009a94 <_sbrk_r>
 80099da:	1c43      	adds	r3, r0, #1
 80099dc:	d123      	bne.n	8009a26 <_malloc_r+0x92>
 80099de:	230c      	movs	r3, #12
 80099e0:	6033      	str	r3, [r6, #0]
 80099e2:	4630      	mov	r0, r6
 80099e4:	f000 f86c 	bl	8009ac0 <__malloc_unlock>
 80099e8:	e7e3      	b.n	80099b2 <_malloc_r+0x1e>
 80099ea:	6823      	ldr	r3, [r4, #0]
 80099ec:	1b5b      	subs	r3, r3, r5
 80099ee:	d417      	bmi.n	8009a20 <_malloc_r+0x8c>
 80099f0:	2b0b      	cmp	r3, #11
 80099f2:	d903      	bls.n	80099fc <_malloc_r+0x68>
 80099f4:	6023      	str	r3, [r4, #0]
 80099f6:	441c      	add	r4, r3
 80099f8:	6025      	str	r5, [r4, #0]
 80099fa:	e004      	b.n	8009a06 <_malloc_r+0x72>
 80099fc:	6863      	ldr	r3, [r4, #4]
 80099fe:	42a2      	cmp	r2, r4
 8009a00:	bf0c      	ite	eq
 8009a02:	600b      	streq	r3, [r1, #0]
 8009a04:	6053      	strne	r3, [r2, #4]
 8009a06:	4630      	mov	r0, r6
 8009a08:	f000 f85a 	bl	8009ac0 <__malloc_unlock>
 8009a0c:	f104 000b 	add.w	r0, r4, #11
 8009a10:	1d23      	adds	r3, r4, #4
 8009a12:	f020 0007 	bic.w	r0, r0, #7
 8009a16:	1ac2      	subs	r2, r0, r3
 8009a18:	d0cc      	beq.n	80099b4 <_malloc_r+0x20>
 8009a1a:	1a1b      	subs	r3, r3, r0
 8009a1c:	50a3      	str	r3, [r4, r2]
 8009a1e:	e7c9      	b.n	80099b4 <_malloc_r+0x20>
 8009a20:	4622      	mov	r2, r4
 8009a22:	6864      	ldr	r4, [r4, #4]
 8009a24:	e7cc      	b.n	80099c0 <_malloc_r+0x2c>
 8009a26:	1cc4      	adds	r4, r0, #3
 8009a28:	f024 0403 	bic.w	r4, r4, #3
 8009a2c:	42a0      	cmp	r0, r4
 8009a2e:	d0e3      	beq.n	80099f8 <_malloc_r+0x64>
 8009a30:	1a21      	subs	r1, r4, r0
 8009a32:	4630      	mov	r0, r6
 8009a34:	f000 f82e 	bl	8009a94 <_sbrk_r>
 8009a38:	3001      	adds	r0, #1
 8009a3a:	d1dd      	bne.n	80099f8 <_malloc_r+0x64>
 8009a3c:	e7cf      	b.n	80099de <_malloc_r+0x4a>
 8009a3e:	bf00      	nop
 8009a40:	200049c0 	.word	0x200049c0
 8009a44:	200049c4 	.word	0x200049c4

08009a48 <_realloc_r>:
 8009a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a4a:	4607      	mov	r7, r0
 8009a4c:	4614      	mov	r4, r2
 8009a4e:	460e      	mov	r6, r1
 8009a50:	b921      	cbnz	r1, 8009a5c <_realloc_r+0x14>
 8009a52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009a56:	4611      	mov	r1, r2
 8009a58:	f7ff bf9c 	b.w	8009994 <_malloc_r>
 8009a5c:	b922      	cbnz	r2, 8009a68 <_realloc_r+0x20>
 8009a5e:	f7ff ff49 	bl	80098f4 <_free_r>
 8009a62:	4625      	mov	r5, r4
 8009a64:	4628      	mov	r0, r5
 8009a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a68:	f000 f830 	bl	8009acc <_malloc_usable_size_r>
 8009a6c:	42a0      	cmp	r0, r4
 8009a6e:	d20f      	bcs.n	8009a90 <_realloc_r+0x48>
 8009a70:	4621      	mov	r1, r4
 8009a72:	4638      	mov	r0, r7
 8009a74:	f7ff ff8e 	bl	8009994 <_malloc_r>
 8009a78:	4605      	mov	r5, r0
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	d0f2      	beq.n	8009a64 <_realloc_r+0x1c>
 8009a7e:	4631      	mov	r1, r6
 8009a80:	4622      	mov	r2, r4
 8009a82:	f7ff fbf7 	bl	8009274 <memcpy>
 8009a86:	4631      	mov	r1, r6
 8009a88:	4638      	mov	r0, r7
 8009a8a:	f7ff ff33 	bl	80098f4 <_free_r>
 8009a8e:	e7e9      	b.n	8009a64 <_realloc_r+0x1c>
 8009a90:	4635      	mov	r5, r6
 8009a92:	e7e7      	b.n	8009a64 <_realloc_r+0x1c>

08009a94 <_sbrk_r>:
 8009a94:	b538      	push	{r3, r4, r5, lr}
 8009a96:	4d06      	ldr	r5, [pc, #24]	; (8009ab0 <_sbrk_r+0x1c>)
 8009a98:	2300      	movs	r3, #0
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	4608      	mov	r0, r1
 8009a9e:	602b      	str	r3, [r5, #0]
 8009aa0:	f7f8 fa8c 	bl	8001fbc <_sbrk>
 8009aa4:	1c43      	adds	r3, r0, #1
 8009aa6:	d102      	bne.n	8009aae <_sbrk_r+0x1a>
 8009aa8:	682b      	ldr	r3, [r5, #0]
 8009aaa:	b103      	cbz	r3, 8009aae <_sbrk_r+0x1a>
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	bd38      	pop	{r3, r4, r5, pc}
 8009ab0:	2000508c 	.word	0x2000508c

08009ab4 <__malloc_lock>:
 8009ab4:	4801      	ldr	r0, [pc, #4]	; (8009abc <__malloc_lock+0x8>)
 8009ab6:	f000 b811 	b.w	8009adc <__retarget_lock_acquire_recursive>
 8009aba:	bf00      	nop
 8009abc:	20005094 	.word	0x20005094

08009ac0 <__malloc_unlock>:
 8009ac0:	4801      	ldr	r0, [pc, #4]	; (8009ac8 <__malloc_unlock+0x8>)
 8009ac2:	f000 b80c 	b.w	8009ade <__retarget_lock_release_recursive>
 8009ac6:	bf00      	nop
 8009ac8:	20005094 	.word	0x20005094

08009acc <_malloc_usable_size_r>:
 8009acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ad0:	1f18      	subs	r0, r3, #4
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	bfbc      	itt	lt
 8009ad6:	580b      	ldrlt	r3, [r1, r0]
 8009ad8:	18c0      	addlt	r0, r0, r3
 8009ada:	4770      	bx	lr

08009adc <__retarget_lock_acquire_recursive>:
 8009adc:	4770      	bx	lr

08009ade <__retarget_lock_release_recursive>:
 8009ade:	4770      	bx	lr

08009ae0 <pow>:
 8009ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ae4:	ec59 8b10 	vmov	r8, r9, d0
 8009ae8:	ec57 6b11 	vmov	r6, r7, d1
 8009aec:	f000 f8a8 	bl	8009c40 <__ieee754_pow>
 8009af0:	4b4e      	ldr	r3, [pc, #312]	; (8009c2c <pow+0x14c>)
 8009af2:	f993 3000 	ldrsb.w	r3, [r3]
 8009af6:	3301      	adds	r3, #1
 8009af8:	ec55 4b10 	vmov	r4, r5, d0
 8009afc:	d015      	beq.n	8009b2a <pow+0x4a>
 8009afe:	4632      	mov	r2, r6
 8009b00:	463b      	mov	r3, r7
 8009b02:	4630      	mov	r0, r6
 8009b04:	4639      	mov	r1, r7
 8009b06:	f7f7 f809 	bl	8000b1c <__aeabi_dcmpun>
 8009b0a:	b970      	cbnz	r0, 8009b2a <pow+0x4a>
 8009b0c:	4642      	mov	r2, r8
 8009b0e:	464b      	mov	r3, r9
 8009b10:	4640      	mov	r0, r8
 8009b12:	4649      	mov	r1, r9
 8009b14:	f7f7 f802 	bl	8000b1c <__aeabi_dcmpun>
 8009b18:	2200      	movs	r2, #0
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	b148      	cbz	r0, 8009b32 <pow+0x52>
 8009b1e:	4630      	mov	r0, r6
 8009b20:	4639      	mov	r1, r7
 8009b22:	f7f6 ffc9 	bl	8000ab8 <__aeabi_dcmpeq>
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d17d      	bne.n	8009c26 <pow+0x146>
 8009b2a:	ec45 4b10 	vmov	d0, r4, r5
 8009b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b32:	4640      	mov	r0, r8
 8009b34:	4649      	mov	r1, r9
 8009b36:	f7f6 ffbf 	bl	8000ab8 <__aeabi_dcmpeq>
 8009b3a:	b1e0      	cbz	r0, 8009b76 <pow+0x96>
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	2300      	movs	r3, #0
 8009b40:	4630      	mov	r0, r6
 8009b42:	4639      	mov	r1, r7
 8009b44:	f7f6 ffb8 	bl	8000ab8 <__aeabi_dcmpeq>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	d16c      	bne.n	8009c26 <pow+0x146>
 8009b4c:	ec47 6b10 	vmov	d0, r6, r7
 8009b50:	f000 fe55 	bl	800a7fe <finite>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	d0e8      	beq.n	8009b2a <pow+0x4a>
 8009b58:	2200      	movs	r2, #0
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	4639      	mov	r1, r7
 8009b60:	f7f6 ffb4 	bl	8000acc <__aeabi_dcmplt>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d0e0      	beq.n	8009b2a <pow+0x4a>
 8009b68:	f7ff fb5a 	bl	8009220 <__errno>
 8009b6c:	2321      	movs	r3, #33	; 0x21
 8009b6e:	6003      	str	r3, [r0, #0]
 8009b70:	2400      	movs	r4, #0
 8009b72:	4d2f      	ldr	r5, [pc, #188]	; (8009c30 <pow+0x150>)
 8009b74:	e7d9      	b.n	8009b2a <pow+0x4a>
 8009b76:	ec45 4b10 	vmov	d0, r4, r5
 8009b7a:	f000 fe40 	bl	800a7fe <finite>
 8009b7e:	bbb8      	cbnz	r0, 8009bf0 <pow+0x110>
 8009b80:	ec49 8b10 	vmov	d0, r8, r9
 8009b84:	f000 fe3b 	bl	800a7fe <finite>
 8009b88:	b390      	cbz	r0, 8009bf0 <pow+0x110>
 8009b8a:	ec47 6b10 	vmov	d0, r6, r7
 8009b8e:	f000 fe36 	bl	800a7fe <finite>
 8009b92:	b368      	cbz	r0, 8009bf0 <pow+0x110>
 8009b94:	4622      	mov	r2, r4
 8009b96:	462b      	mov	r3, r5
 8009b98:	4620      	mov	r0, r4
 8009b9a:	4629      	mov	r1, r5
 8009b9c:	f7f6 ffbe 	bl	8000b1c <__aeabi_dcmpun>
 8009ba0:	b160      	cbz	r0, 8009bbc <pow+0xdc>
 8009ba2:	f7ff fb3d 	bl	8009220 <__errno>
 8009ba6:	2321      	movs	r3, #33	; 0x21
 8009ba8:	6003      	str	r3, [r0, #0]
 8009baa:	2200      	movs	r2, #0
 8009bac:	2300      	movs	r3, #0
 8009bae:	4610      	mov	r0, r2
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	f7f6 fe43 	bl	800083c <__aeabi_ddiv>
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	460d      	mov	r5, r1
 8009bba:	e7b6      	b.n	8009b2a <pow+0x4a>
 8009bbc:	f7ff fb30 	bl	8009220 <__errno>
 8009bc0:	2322      	movs	r3, #34	; 0x22
 8009bc2:	6003      	str	r3, [r0, #0]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	4640      	mov	r0, r8
 8009bca:	4649      	mov	r1, r9
 8009bcc:	f7f6 ff7e 	bl	8000acc <__aeabi_dcmplt>
 8009bd0:	2400      	movs	r4, #0
 8009bd2:	b158      	cbz	r0, 8009bec <pow+0x10c>
 8009bd4:	ec47 6b10 	vmov	d0, r6, r7
 8009bd8:	f000 fe26 	bl	800a828 <rint>
 8009bdc:	4632      	mov	r2, r6
 8009bde:	ec51 0b10 	vmov	r0, r1, d0
 8009be2:	463b      	mov	r3, r7
 8009be4:	f7f6 ff68 	bl	8000ab8 <__aeabi_dcmpeq>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	d0c2      	beq.n	8009b72 <pow+0x92>
 8009bec:	4d11      	ldr	r5, [pc, #68]	; (8009c34 <pow+0x154>)
 8009bee:	e79c      	b.n	8009b2a <pow+0x4a>
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	4629      	mov	r1, r5
 8009bf8:	f7f6 ff5e 	bl	8000ab8 <__aeabi_dcmpeq>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d094      	beq.n	8009b2a <pow+0x4a>
 8009c00:	ec49 8b10 	vmov	d0, r8, r9
 8009c04:	f000 fdfb 	bl	800a7fe <finite>
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d08e      	beq.n	8009b2a <pow+0x4a>
 8009c0c:	ec47 6b10 	vmov	d0, r6, r7
 8009c10:	f000 fdf5 	bl	800a7fe <finite>
 8009c14:	2800      	cmp	r0, #0
 8009c16:	d088      	beq.n	8009b2a <pow+0x4a>
 8009c18:	f7ff fb02 	bl	8009220 <__errno>
 8009c1c:	2322      	movs	r3, #34	; 0x22
 8009c1e:	6003      	str	r3, [r0, #0]
 8009c20:	2400      	movs	r4, #0
 8009c22:	2500      	movs	r5, #0
 8009c24:	e781      	b.n	8009b2a <pow+0x4a>
 8009c26:	4d04      	ldr	r5, [pc, #16]	; (8009c38 <pow+0x158>)
 8009c28:	2400      	movs	r4, #0
 8009c2a:	e77e      	b.n	8009b2a <pow+0x4a>
 8009c2c:	20000074 	.word	0x20000074
 8009c30:	fff00000 	.word	0xfff00000
 8009c34:	7ff00000 	.word	0x7ff00000
 8009c38:	3ff00000 	.word	0x3ff00000
 8009c3c:	00000000 	.word	0x00000000

08009c40 <__ieee754_pow>:
 8009c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c44:	ed2d 8b06 	vpush	{d8-d10}
 8009c48:	b08d      	sub	sp, #52	; 0x34
 8009c4a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009c4e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8009c52:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009c56:	ea56 0100 	orrs.w	r1, r6, r0
 8009c5a:	ec53 2b10 	vmov	r2, r3, d0
 8009c5e:	f000 84d1 	beq.w	800a604 <__ieee754_pow+0x9c4>
 8009c62:	497f      	ldr	r1, [pc, #508]	; (8009e60 <__ieee754_pow+0x220>)
 8009c64:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8009c68:	428c      	cmp	r4, r1
 8009c6a:	ee10 8a10 	vmov	r8, s0
 8009c6e:	4699      	mov	r9, r3
 8009c70:	dc09      	bgt.n	8009c86 <__ieee754_pow+0x46>
 8009c72:	d103      	bne.n	8009c7c <__ieee754_pow+0x3c>
 8009c74:	b97a      	cbnz	r2, 8009c96 <__ieee754_pow+0x56>
 8009c76:	42a6      	cmp	r6, r4
 8009c78:	dd02      	ble.n	8009c80 <__ieee754_pow+0x40>
 8009c7a:	e00c      	b.n	8009c96 <__ieee754_pow+0x56>
 8009c7c:	428e      	cmp	r6, r1
 8009c7e:	dc02      	bgt.n	8009c86 <__ieee754_pow+0x46>
 8009c80:	428e      	cmp	r6, r1
 8009c82:	d110      	bne.n	8009ca6 <__ieee754_pow+0x66>
 8009c84:	b178      	cbz	r0, 8009ca6 <__ieee754_pow+0x66>
 8009c86:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009c8a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009c8e:	ea54 0308 	orrs.w	r3, r4, r8
 8009c92:	f000 84b7 	beq.w	800a604 <__ieee754_pow+0x9c4>
 8009c96:	4873      	ldr	r0, [pc, #460]	; (8009e64 <__ieee754_pow+0x224>)
 8009c98:	b00d      	add	sp, #52	; 0x34
 8009c9a:	ecbd 8b06 	vpop	{d8-d10}
 8009c9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca2:	f000 bdb9 	b.w	800a818 <nan>
 8009ca6:	f1b9 0f00 	cmp.w	r9, #0
 8009caa:	da36      	bge.n	8009d1a <__ieee754_pow+0xda>
 8009cac:	496e      	ldr	r1, [pc, #440]	; (8009e68 <__ieee754_pow+0x228>)
 8009cae:	428e      	cmp	r6, r1
 8009cb0:	dc51      	bgt.n	8009d56 <__ieee754_pow+0x116>
 8009cb2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8009cb6:	428e      	cmp	r6, r1
 8009cb8:	f340 84af 	ble.w	800a61a <__ieee754_pow+0x9da>
 8009cbc:	1531      	asrs	r1, r6, #20
 8009cbe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009cc2:	2914      	cmp	r1, #20
 8009cc4:	dd0f      	ble.n	8009ce6 <__ieee754_pow+0xa6>
 8009cc6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8009cca:	fa20 fc01 	lsr.w	ip, r0, r1
 8009cce:	fa0c f101 	lsl.w	r1, ip, r1
 8009cd2:	4281      	cmp	r1, r0
 8009cd4:	f040 84a1 	bne.w	800a61a <__ieee754_pow+0x9da>
 8009cd8:	f00c 0c01 	and.w	ip, ip, #1
 8009cdc:	f1cc 0102 	rsb	r1, ip, #2
 8009ce0:	9100      	str	r1, [sp, #0]
 8009ce2:	b180      	cbz	r0, 8009d06 <__ieee754_pow+0xc6>
 8009ce4:	e059      	b.n	8009d9a <__ieee754_pow+0x15a>
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	d155      	bne.n	8009d96 <__ieee754_pow+0x156>
 8009cea:	f1c1 0114 	rsb	r1, r1, #20
 8009cee:	fa46 fc01 	asr.w	ip, r6, r1
 8009cf2:	fa0c f101 	lsl.w	r1, ip, r1
 8009cf6:	42b1      	cmp	r1, r6
 8009cf8:	f040 848c 	bne.w	800a614 <__ieee754_pow+0x9d4>
 8009cfc:	f00c 0c01 	and.w	ip, ip, #1
 8009d00:	f1cc 0102 	rsb	r1, ip, #2
 8009d04:	9100      	str	r1, [sp, #0]
 8009d06:	4959      	ldr	r1, [pc, #356]	; (8009e6c <__ieee754_pow+0x22c>)
 8009d08:	428e      	cmp	r6, r1
 8009d0a:	d12d      	bne.n	8009d68 <__ieee754_pow+0x128>
 8009d0c:	2f00      	cmp	r7, #0
 8009d0e:	da79      	bge.n	8009e04 <__ieee754_pow+0x1c4>
 8009d10:	4956      	ldr	r1, [pc, #344]	; (8009e6c <__ieee754_pow+0x22c>)
 8009d12:	2000      	movs	r0, #0
 8009d14:	f7f6 fd92 	bl	800083c <__aeabi_ddiv>
 8009d18:	e016      	b.n	8009d48 <__ieee754_pow+0x108>
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	9100      	str	r1, [sp, #0]
 8009d1e:	2800      	cmp	r0, #0
 8009d20:	d13b      	bne.n	8009d9a <__ieee754_pow+0x15a>
 8009d22:	494f      	ldr	r1, [pc, #316]	; (8009e60 <__ieee754_pow+0x220>)
 8009d24:	428e      	cmp	r6, r1
 8009d26:	d1ee      	bne.n	8009d06 <__ieee754_pow+0xc6>
 8009d28:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009d2c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009d30:	ea53 0308 	orrs.w	r3, r3, r8
 8009d34:	f000 8466 	beq.w	800a604 <__ieee754_pow+0x9c4>
 8009d38:	4b4d      	ldr	r3, [pc, #308]	; (8009e70 <__ieee754_pow+0x230>)
 8009d3a:	429c      	cmp	r4, r3
 8009d3c:	dd0d      	ble.n	8009d5a <__ieee754_pow+0x11a>
 8009d3e:	2f00      	cmp	r7, #0
 8009d40:	f280 8464 	bge.w	800a60c <__ieee754_pow+0x9cc>
 8009d44:	2000      	movs	r0, #0
 8009d46:	2100      	movs	r1, #0
 8009d48:	ec41 0b10 	vmov	d0, r0, r1
 8009d4c:	b00d      	add	sp, #52	; 0x34
 8009d4e:	ecbd 8b06 	vpop	{d8-d10}
 8009d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d56:	2102      	movs	r1, #2
 8009d58:	e7e0      	b.n	8009d1c <__ieee754_pow+0xdc>
 8009d5a:	2f00      	cmp	r7, #0
 8009d5c:	daf2      	bge.n	8009d44 <__ieee754_pow+0x104>
 8009d5e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8009d62:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009d66:	e7ef      	b.n	8009d48 <__ieee754_pow+0x108>
 8009d68:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009d6c:	d104      	bne.n	8009d78 <__ieee754_pow+0x138>
 8009d6e:	4610      	mov	r0, r2
 8009d70:	4619      	mov	r1, r3
 8009d72:	f7f6 fc39 	bl	80005e8 <__aeabi_dmul>
 8009d76:	e7e7      	b.n	8009d48 <__ieee754_pow+0x108>
 8009d78:	493e      	ldr	r1, [pc, #248]	; (8009e74 <__ieee754_pow+0x234>)
 8009d7a:	428f      	cmp	r7, r1
 8009d7c:	d10d      	bne.n	8009d9a <__ieee754_pow+0x15a>
 8009d7e:	f1b9 0f00 	cmp.w	r9, #0
 8009d82:	db0a      	blt.n	8009d9a <__ieee754_pow+0x15a>
 8009d84:	ec43 2b10 	vmov	d0, r2, r3
 8009d88:	b00d      	add	sp, #52	; 0x34
 8009d8a:	ecbd 8b06 	vpop	{d8-d10}
 8009d8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d92:	f000 bc77 	b.w	800a684 <__ieee754_sqrt>
 8009d96:	2100      	movs	r1, #0
 8009d98:	9100      	str	r1, [sp, #0]
 8009d9a:	ec43 2b10 	vmov	d0, r2, r3
 8009d9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009da2:	f000 fd23 	bl	800a7ec <fabs>
 8009da6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009daa:	ec51 0b10 	vmov	r0, r1, d0
 8009dae:	f1b8 0f00 	cmp.w	r8, #0
 8009db2:	d12a      	bne.n	8009e0a <__ieee754_pow+0x1ca>
 8009db4:	b12c      	cbz	r4, 8009dc2 <__ieee754_pow+0x182>
 8009db6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8009e6c <__ieee754_pow+0x22c>
 8009dba:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8009dbe:	45e6      	cmp	lr, ip
 8009dc0:	d123      	bne.n	8009e0a <__ieee754_pow+0x1ca>
 8009dc2:	2f00      	cmp	r7, #0
 8009dc4:	da05      	bge.n	8009dd2 <__ieee754_pow+0x192>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	460b      	mov	r3, r1
 8009dca:	2000      	movs	r0, #0
 8009dcc:	4927      	ldr	r1, [pc, #156]	; (8009e6c <__ieee754_pow+0x22c>)
 8009dce:	f7f6 fd35 	bl	800083c <__aeabi_ddiv>
 8009dd2:	f1b9 0f00 	cmp.w	r9, #0
 8009dd6:	dab7      	bge.n	8009d48 <__ieee754_pow+0x108>
 8009dd8:	9b00      	ldr	r3, [sp, #0]
 8009dda:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009dde:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009de2:	4323      	orrs	r3, r4
 8009de4:	d108      	bne.n	8009df8 <__ieee754_pow+0x1b8>
 8009de6:	4602      	mov	r2, r0
 8009de8:	460b      	mov	r3, r1
 8009dea:	4610      	mov	r0, r2
 8009dec:	4619      	mov	r1, r3
 8009dee:	f7f6 fa43 	bl	8000278 <__aeabi_dsub>
 8009df2:	4602      	mov	r2, r0
 8009df4:	460b      	mov	r3, r1
 8009df6:	e78d      	b.n	8009d14 <__ieee754_pow+0xd4>
 8009df8:	9b00      	ldr	r3, [sp, #0]
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d1a4      	bne.n	8009d48 <__ieee754_pow+0x108>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e04:	4610      	mov	r0, r2
 8009e06:	4619      	mov	r1, r3
 8009e08:	e79e      	b.n	8009d48 <__ieee754_pow+0x108>
 8009e0a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8009e0e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8009e12:	950a      	str	r5, [sp, #40]	; 0x28
 8009e14:	9d00      	ldr	r5, [sp, #0]
 8009e16:	46ac      	mov	ip, r5
 8009e18:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009e1a:	ea5c 0505 	orrs.w	r5, ip, r5
 8009e1e:	d0e4      	beq.n	8009dea <__ieee754_pow+0x1aa>
 8009e20:	4b15      	ldr	r3, [pc, #84]	; (8009e78 <__ieee754_pow+0x238>)
 8009e22:	429e      	cmp	r6, r3
 8009e24:	f340 80fc 	ble.w	800a020 <__ieee754_pow+0x3e0>
 8009e28:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009e2c:	429e      	cmp	r6, r3
 8009e2e:	4b10      	ldr	r3, [pc, #64]	; (8009e70 <__ieee754_pow+0x230>)
 8009e30:	dd07      	ble.n	8009e42 <__ieee754_pow+0x202>
 8009e32:	429c      	cmp	r4, r3
 8009e34:	dc0a      	bgt.n	8009e4c <__ieee754_pow+0x20c>
 8009e36:	2f00      	cmp	r7, #0
 8009e38:	da84      	bge.n	8009d44 <__ieee754_pow+0x104>
 8009e3a:	a307      	add	r3, pc, #28	; (adr r3, 8009e58 <__ieee754_pow+0x218>)
 8009e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e40:	e795      	b.n	8009d6e <__ieee754_pow+0x12e>
 8009e42:	429c      	cmp	r4, r3
 8009e44:	dbf7      	blt.n	8009e36 <__ieee754_pow+0x1f6>
 8009e46:	4b09      	ldr	r3, [pc, #36]	; (8009e6c <__ieee754_pow+0x22c>)
 8009e48:	429c      	cmp	r4, r3
 8009e4a:	dd17      	ble.n	8009e7c <__ieee754_pow+0x23c>
 8009e4c:	2f00      	cmp	r7, #0
 8009e4e:	dcf4      	bgt.n	8009e3a <__ieee754_pow+0x1fa>
 8009e50:	e778      	b.n	8009d44 <__ieee754_pow+0x104>
 8009e52:	bf00      	nop
 8009e54:	f3af 8000 	nop.w
 8009e58:	8800759c 	.word	0x8800759c
 8009e5c:	7e37e43c 	.word	0x7e37e43c
 8009e60:	7ff00000 	.word	0x7ff00000
 8009e64:	0800b59d 	.word	0x0800b59d
 8009e68:	433fffff 	.word	0x433fffff
 8009e6c:	3ff00000 	.word	0x3ff00000
 8009e70:	3fefffff 	.word	0x3fefffff
 8009e74:	3fe00000 	.word	0x3fe00000
 8009e78:	41e00000 	.word	0x41e00000
 8009e7c:	4b64      	ldr	r3, [pc, #400]	; (800a010 <__ieee754_pow+0x3d0>)
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f7f6 f9fa 	bl	8000278 <__aeabi_dsub>
 8009e84:	a356      	add	r3, pc, #344	; (adr r3, 8009fe0 <__ieee754_pow+0x3a0>)
 8009e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	460d      	mov	r5, r1
 8009e8e:	f7f6 fbab 	bl	80005e8 <__aeabi_dmul>
 8009e92:	a355      	add	r3, pc, #340	; (adr r3, 8009fe8 <__ieee754_pow+0x3a8>)
 8009e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e98:	4606      	mov	r6, r0
 8009e9a:	460f      	mov	r7, r1
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	4629      	mov	r1, r5
 8009ea0:	f7f6 fba2 	bl	80005e8 <__aeabi_dmul>
 8009ea4:	4b5b      	ldr	r3, [pc, #364]	; (800a014 <__ieee754_pow+0x3d4>)
 8009ea6:	4682      	mov	sl, r0
 8009ea8:	468b      	mov	fp, r1
 8009eaa:	2200      	movs	r2, #0
 8009eac:	4620      	mov	r0, r4
 8009eae:	4629      	mov	r1, r5
 8009eb0:	f7f6 fb9a 	bl	80005e8 <__aeabi_dmul>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	a14d      	add	r1, pc, #308	; (adr r1, 8009ff0 <__ieee754_pow+0x3b0>)
 8009eba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ebe:	f7f6 f9db 	bl	8000278 <__aeabi_dsub>
 8009ec2:	4622      	mov	r2, r4
 8009ec4:	462b      	mov	r3, r5
 8009ec6:	f7f6 fb8f 	bl	80005e8 <__aeabi_dmul>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	460b      	mov	r3, r1
 8009ece:	2000      	movs	r0, #0
 8009ed0:	4951      	ldr	r1, [pc, #324]	; (800a018 <__ieee754_pow+0x3d8>)
 8009ed2:	f7f6 f9d1 	bl	8000278 <__aeabi_dsub>
 8009ed6:	4622      	mov	r2, r4
 8009ed8:	4680      	mov	r8, r0
 8009eda:	4689      	mov	r9, r1
 8009edc:	462b      	mov	r3, r5
 8009ede:	4620      	mov	r0, r4
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	f7f6 fb81 	bl	80005e8 <__aeabi_dmul>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	460b      	mov	r3, r1
 8009eea:	4640      	mov	r0, r8
 8009eec:	4649      	mov	r1, r9
 8009eee:	f7f6 fb7b 	bl	80005e8 <__aeabi_dmul>
 8009ef2:	a341      	add	r3, pc, #260	; (adr r3, 8009ff8 <__ieee754_pow+0x3b8>)
 8009ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef8:	f7f6 fb76 	bl	80005e8 <__aeabi_dmul>
 8009efc:	4602      	mov	r2, r0
 8009efe:	460b      	mov	r3, r1
 8009f00:	4650      	mov	r0, sl
 8009f02:	4659      	mov	r1, fp
 8009f04:	f7f6 f9b8 	bl	8000278 <__aeabi_dsub>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	4680      	mov	r8, r0
 8009f0e:	4689      	mov	r9, r1
 8009f10:	4630      	mov	r0, r6
 8009f12:	4639      	mov	r1, r7
 8009f14:	f7f6 f9b2 	bl	800027c <__adddf3>
 8009f18:	2400      	movs	r4, #0
 8009f1a:	4632      	mov	r2, r6
 8009f1c:	463b      	mov	r3, r7
 8009f1e:	4620      	mov	r0, r4
 8009f20:	460d      	mov	r5, r1
 8009f22:	f7f6 f9a9 	bl	8000278 <__aeabi_dsub>
 8009f26:	4602      	mov	r2, r0
 8009f28:	460b      	mov	r3, r1
 8009f2a:	4640      	mov	r0, r8
 8009f2c:	4649      	mov	r1, r9
 8009f2e:	f7f6 f9a3 	bl	8000278 <__aeabi_dsub>
 8009f32:	9b00      	ldr	r3, [sp, #0]
 8009f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f36:	3b01      	subs	r3, #1
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	4682      	mov	sl, r0
 8009f3c:	468b      	mov	fp, r1
 8009f3e:	f040 81f1 	bne.w	800a324 <__ieee754_pow+0x6e4>
 8009f42:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800a000 <__ieee754_pow+0x3c0>
 8009f46:	eeb0 8a47 	vmov.f32	s16, s14
 8009f4a:	eef0 8a67 	vmov.f32	s17, s15
 8009f4e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009f52:	2600      	movs	r6, #0
 8009f54:	4632      	mov	r2, r6
 8009f56:	463b      	mov	r3, r7
 8009f58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f5c:	f7f6 f98c 	bl	8000278 <__aeabi_dsub>
 8009f60:	4622      	mov	r2, r4
 8009f62:	462b      	mov	r3, r5
 8009f64:	f7f6 fb40 	bl	80005e8 <__aeabi_dmul>
 8009f68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f6c:	4680      	mov	r8, r0
 8009f6e:	4689      	mov	r9, r1
 8009f70:	4650      	mov	r0, sl
 8009f72:	4659      	mov	r1, fp
 8009f74:	f7f6 fb38 	bl	80005e8 <__aeabi_dmul>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	4640      	mov	r0, r8
 8009f7e:	4649      	mov	r1, r9
 8009f80:	f7f6 f97c 	bl	800027c <__adddf3>
 8009f84:	4632      	mov	r2, r6
 8009f86:	463b      	mov	r3, r7
 8009f88:	4680      	mov	r8, r0
 8009f8a:	4689      	mov	r9, r1
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	4629      	mov	r1, r5
 8009f90:	f7f6 fb2a 	bl	80005e8 <__aeabi_dmul>
 8009f94:	460b      	mov	r3, r1
 8009f96:	4604      	mov	r4, r0
 8009f98:	460d      	mov	r5, r1
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	4649      	mov	r1, r9
 8009f9e:	4640      	mov	r0, r8
 8009fa0:	f7f6 f96c 	bl	800027c <__adddf3>
 8009fa4:	4b1d      	ldr	r3, [pc, #116]	; (800a01c <__ieee754_pow+0x3dc>)
 8009fa6:	4299      	cmp	r1, r3
 8009fa8:	ec45 4b19 	vmov	d9, r4, r5
 8009fac:	4606      	mov	r6, r0
 8009fae:	460f      	mov	r7, r1
 8009fb0:	468b      	mov	fp, r1
 8009fb2:	f340 82fe 	ble.w	800a5b2 <__ieee754_pow+0x972>
 8009fb6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009fba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009fbe:	4303      	orrs	r3, r0
 8009fc0:	f000 81f0 	beq.w	800a3a4 <__ieee754_pow+0x764>
 8009fc4:	a310      	add	r3, pc, #64	; (adr r3, 800a008 <__ieee754_pow+0x3c8>)
 8009fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fca:	ec51 0b18 	vmov	r0, r1, d8
 8009fce:	f7f6 fb0b 	bl	80005e8 <__aeabi_dmul>
 8009fd2:	a30d      	add	r3, pc, #52	; (adr r3, 800a008 <__ieee754_pow+0x3c8>)
 8009fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd8:	e6cb      	b.n	8009d72 <__ieee754_pow+0x132>
 8009fda:	bf00      	nop
 8009fdc:	f3af 8000 	nop.w
 8009fe0:	60000000 	.word	0x60000000
 8009fe4:	3ff71547 	.word	0x3ff71547
 8009fe8:	f85ddf44 	.word	0xf85ddf44
 8009fec:	3e54ae0b 	.word	0x3e54ae0b
 8009ff0:	55555555 	.word	0x55555555
 8009ff4:	3fd55555 	.word	0x3fd55555
 8009ff8:	652b82fe 	.word	0x652b82fe
 8009ffc:	3ff71547 	.word	0x3ff71547
 800a000:	00000000 	.word	0x00000000
 800a004:	bff00000 	.word	0xbff00000
 800a008:	8800759c 	.word	0x8800759c
 800a00c:	7e37e43c 	.word	0x7e37e43c
 800a010:	3ff00000 	.word	0x3ff00000
 800a014:	3fd00000 	.word	0x3fd00000
 800a018:	3fe00000 	.word	0x3fe00000
 800a01c:	408fffff 	.word	0x408fffff
 800a020:	4bd7      	ldr	r3, [pc, #860]	; (800a380 <__ieee754_pow+0x740>)
 800a022:	ea03 0309 	and.w	r3, r3, r9
 800a026:	2200      	movs	r2, #0
 800a028:	b92b      	cbnz	r3, 800a036 <__ieee754_pow+0x3f6>
 800a02a:	4bd6      	ldr	r3, [pc, #856]	; (800a384 <__ieee754_pow+0x744>)
 800a02c:	f7f6 fadc 	bl	80005e8 <__aeabi_dmul>
 800a030:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a034:	460c      	mov	r4, r1
 800a036:	1523      	asrs	r3, r4, #20
 800a038:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a03c:	4413      	add	r3, r2
 800a03e:	9309      	str	r3, [sp, #36]	; 0x24
 800a040:	4bd1      	ldr	r3, [pc, #836]	; (800a388 <__ieee754_pow+0x748>)
 800a042:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a046:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a04a:	429c      	cmp	r4, r3
 800a04c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a050:	dd08      	ble.n	800a064 <__ieee754_pow+0x424>
 800a052:	4bce      	ldr	r3, [pc, #824]	; (800a38c <__ieee754_pow+0x74c>)
 800a054:	429c      	cmp	r4, r3
 800a056:	f340 8163 	ble.w	800a320 <__ieee754_pow+0x6e0>
 800a05a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a05c:	3301      	adds	r3, #1
 800a05e:	9309      	str	r3, [sp, #36]	; 0x24
 800a060:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a064:	2400      	movs	r4, #0
 800a066:	00e3      	lsls	r3, r4, #3
 800a068:	930b      	str	r3, [sp, #44]	; 0x2c
 800a06a:	4bc9      	ldr	r3, [pc, #804]	; (800a390 <__ieee754_pow+0x750>)
 800a06c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a070:	ed93 7b00 	vldr	d7, [r3]
 800a074:	4629      	mov	r1, r5
 800a076:	ec53 2b17 	vmov	r2, r3, d7
 800a07a:	eeb0 8a47 	vmov.f32	s16, s14
 800a07e:	eef0 8a67 	vmov.f32	s17, s15
 800a082:	4682      	mov	sl, r0
 800a084:	f7f6 f8f8 	bl	8000278 <__aeabi_dsub>
 800a088:	4652      	mov	r2, sl
 800a08a:	4606      	mov	r6, r0
 800a08c:	460f      	mov	r7, r1
 800a08e:	462b      	mov	r3, r5
 800a090:	ec51 0b18 	vmov	r0, r1, d8
 800a094:	f7f6 f8f2 	bl	800027c <__adddf3>
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	2000      	movs	r0, #0
 800a09e:	49bd      	ldr	r1, [pc, #756]	; (800a394 <__ieee754_pow+0x754>)
 800a0a0:	f7f6 fbcc 	bl	800083c <__aeabi_ddiv>
 800a0a4:	ec41 0b19 	vmov	d9, r0, r1
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	4639      	mov	r1, r7
 800a0b0:	f7f6 fa9a 	bl	80005e8 <__aeabi_dmul>
 800a0b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a0b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	9304      	str	r3, [sp, #16]
 800a0c4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a0c8:	46ab      	mov	fp, r5
 800a0ca:	106d      	asrs	r5, r5, #1
 800a0cc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a0d0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a0d4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a0d8:	2200      	movs	r2, #0
 800a0da:	4640      	mov	r0, r8
 800a0dc:	4649      	mov	r1, r9
 800a0de:	4614      	mov	r4, r2
 800a0e0:	461d      	mov	r5, r3
 800a0e2:	f7f6 fa81 	bl	80005e8 <__aeabi_dmul>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	4639      	mov	r1, r7
 800a0ee:	f7f6 f8c3 	bl	8000278 <__aeabi_dsub>
 800a0f2:	ec53 2b18 	vmov	r2, r3, d8
 800a0f6:	4606      	mov	r6, r0
 800a0f8:	460f      	mov	r7, r1
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	4629      	mov	r1, r5
 800a0fe:	f7f6 f8bb 	bl	8000278 <__aeabi_dsub>
 800a102:	4602      	mov	r2, r0
 800a104:	460b      	mov	r3, r1
 800a106:	4650      	mov	r0, sl
 800a108:	4659      	mov	r1, fp
 800a10a:	f7f6 f8b5 	bl	8000278 <__aeabi_dsub>
 800a10e:	4642      	mov	r2, r8
 800a110:	464b      	mov	r3, r9
 800a112:	f7f6 fa69 	bl	80005e8 <__aeabi_dmul>
 800a116:	4602      	mov	r2, r0
 800a118:	460b      	mov	r3, r1
 800a11a:	4630      	mov	r0, r6
 800a11c:	4639      	mov	r1, r7
 800a11e:	f7f6 f8ab 	bl	8000278 <__aeabi_dsub>
 800a122:	ec53 2b19 	vmov	r2, r3, d9
 800a126:	f7f6 fa5f 	bl	80005e8 <__aeabi_dmul>
 800a12a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a12e:	ec41 0b18 	vmov	d8, r0, r1
 800a132:	4610      	mov	r0, r2
 800a134:	4619      	mov	r1, r3
 800a136:	f7f6 fa57 	bl	80005e8 <__aeabi_dmul>
 800a13a:	a37d      	add	r3, pc, #500	; (adr r3, 800a330 <__ieee754_pow+0x6f0>)
 800a13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a140:	4604      	mov	r4, r0
 800a142:	460d      	mov	r5, r1
 800a144:	f7f6 fa50 	bl	80005e8 <__aeabi_dmul>
 800a148:	a37b      	add	r3, pc, #492	; (adr r3, 800a338 <__ieee754_pow+0x6f8>)
 800a14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14e:	f7f6 f895 	bl	800027c <__adddf3>
 800a152:	4622      	mov	r2, r4
 800a154:	462b      	mov	r3, r5
 800a156:	f7f6 fa47 	bl	80005e8 <__aeabi_dmul>
 800a15a:	a379      	add	r3, pc, #484	; (adr r3, 800a340 <__ieee754_pow+0x700>)
 800a15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a160:	f7f6 f88c 	bl	800027c <__adddf3>
 800a164:	4622      	mov	r2, r4
 800a166:	462b      	mov	r3, r5
 800a168:	f7f6 fa3e 	bl	80005e8 <__aeabi_dmul>
 800a16c:	a376      	add	r3, pc, #472	; (adr r3, 800a348 <__ieee754_pow+0x708>)
 800a16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a172:	f7f6 f883 	bl	800027c <__adddf3>
 800a176:	4622      	mov	r2, r4
 800a178:	462b      	mov	r3, r5
 800a17a:	f7f6 fa35 	bl	80005e8 <__aeabi_dmul>
 800a17e:	a374      	add	r3, pc, #464	; (adr r3, 800a350 <__ieee754_pow+0x710>)
 800a180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a184:	f7f6 f87a 	bl	800027c <__adddf3>
 800a188:	4622      	mov	r2, r4
 800a18a:	462b      	mov	r3, r5
 800a18c:	f7f6 fa2c 	bl	80005e8 <__aeabi_dmul>
 800a190:	a371      	add	r3, pc, #452	; (adr r3, 800a358 <__ieee754_pow+0x718>)
 800a192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a196:	f7f6 f871 	bl	800027c <__adddf3>
 800a19a:	4622      	mov	r2, r4
 800a19c:	4606      	mov	r6, r0
 800a19e:	460f      	mov	r7, r1
 800a1a0:	462b      	mov	r3, r5
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	4629      	mov	r1, r5
 800a1a6:	f7f6 fa1f 	bl	80005e8 <__aeabi_dmul>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	4639      	mov	r1, r7
 800a1b2:	f7f6 fa19 	bl	80005e8 <__aeabi_dmul>
 800a1b6:	4642      	mov	r2, r8
 800a1b8:	4604      	mov	r4, r0
 800a1ba:	460d      	mov	r5, r1
 800a1bc:	464b      	mov	r3, r9
 800a1be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1c2:	f7f6 f85b 	bl	800027c <__adddf3>
 800a1c6:	ec53 2b18 	vmov	r2, r3, d8
 800a1ca:	f7f6 fa0d 	bl	80005e8 <__aeabi_dmul>
 800a1ce:	4622      	mov	r2, r4
 800a1d0:	462b      	mov	r3, r5
 800a1d2:	f7f6 f853 	bl	800027c <__adddf3>
 800a1d6:	4642      	mov	r2, r8
 800a1d8:	4682      	mov	sl, r0
 800a1da:	468b      	mov	fp, r1
 800a1dc:	464b      	mov	r3, r9
 800a1de:	4640      	mov	r0, r8
 800a1e0:	4649      	mov	r1, r9
 800a1e2:	f7f6 fa01 	bl	80005e8 <__aeabi_dmul>
 800a1e6:	4b6c      	ldr	r3, [pc, #432]	; (800a398 <__ieee754_pow+0x758>)
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	4606      	mov	r6, r0
 800a1ec:	460f      	mov	r7, r1
 800a1ee:	f7f6 f845 	bl	800027c <__adddf3>
 800a1f2:	4652      	mov	r2, sl
 800a1f4:	465b      	mov	r3, fp
 800a1f6:	f7f6 f841 	bl	800027c <__adddf3>
 800a1fa:	9c04      	ldr	r4, [sp, #16]
 800a1fc:	460d      	mov	r5, r1
 800a1fe:	4622      	mov	r2, r4
 800a200:	460b      	mov	r3, r1
 800a202:	4640      	mov	r0, r8
 800a204:	4649      	mov	r1, r9
 800a206:	f7f6 f9ef 	bl	80005e8 <__aeabi_dmul>
 800a20a:	4b63      	ldr	r3, [pc, #396]	; (800a398 <__ieee754_pow+0x758>)
 800a20c:	4680      	mov	r8, r0
 800a20e:	4689      	mov	r9, r1
 800a210:	2200      	movs	r2, #0
 800a212:	4620      	mov	r0, r4
 800a214:	4629      	mov	r1, r5
 800a216:	f7f6 f82f 	bl	8000278 <__aeabi_dsub>
 800a21a:	4632      	mov	r2, r6
 800a21c:	463b      	mov	r3, r7
 800a21e:	f7f6 f82b 	bl	8000278 <__aeabi_dsub>
 800a222:	4602      	mov	r2, r0
 800a224:	460b      	mov	r3, r1
 800a226:	4650      	mov	r0, sl
 800a228:	4659      	mov	r1, fp
 800a22a:	f7f6 f825 	bl	8000278 <__aeabi_dsub>
 800a22e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a232:	f7f6 f9d9 	bl	80005e8 <__aeabi_dmul>
 800a236:	4622      	mov	r2, r4
 800a238:	4606      	mov	r6, r0
 800a23a:	460f      	mov	r7, r1
 800a23c:	462b      	mov	r3, r5
 800a23e:	ec51 0b18 	vmov	r0, r1, d8
 800a242:	f7f6 f9d1 	bl	80005e8 <__aeabi_dmul>
 800a246:	4602      	mov	r2, r0
 800a248:	460b      	mov	r3, r1
 800a24a:	4630      	mov	r0, r6
 800a24c:	4639      	mov	r1, r7
 800a24e:	f7f6 f815 	bl	800027c <__adddf3>
 800a252:	4606      	mov	r6, r0
 800a254:	460f      	mov	r7, r1
 800a256:	4602      	mov	r2, r0
 800a258:	460b      	mov	r3, r1
 800a25a:	4640      	mov	r0, r8
 800a25c:	4649      	mov	r1, r9
 800a25e:	f7f6 f80d 	bl	800027c <__adddf3>
 800a262:	9c04      	ldr	r4, [sp, #16]
 800a264:	a33e      	add	r3, pc, #248	; (adr r3, 800a360 <__ieee754_pow+0x720>)
 800a266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26a:	4620      	mov	r0, r4
 800a26c:	460d      	mov	r5, r1
 800a26e:	f7f6 f9bb 	bl	80005e8 <__aeabi_dmul>
 800a272:	4642      	mov	r2, r8
 800a274:	ec41 0b18 	vmov	d8, r0, r1
 800a278:	464b      	mov	r3, r9
 800a27a:	4620      	mov	r0, r4
 800a27c:	4629      	mov	r1, r5
 800a27e:	f7f5 fffb 	bl	8000278 <__aeabi_dsub>
 800a282:	4602      	mov	r2, r0
 800a284:	460b      	mov	r3, r1
 800a286:	4630      	mov	r0, r6
 800a288:	4639      	mov	r1, r7
 800a28a:	f7f5 fff5 	bl	8000278 <__aeabi_dsub>
 800a28e:	a336      	add	r3, pc, #216	; (adr r3, 800a368 <__ieee754_pow+0x728>)
 800a290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a294:	f7f6 f9a8 	bl	80005e8 <__aeabi_dmul>
 800a298:	a335      	add	r3, pc, #212	; (adr r3, 800a370 <__ieee754_pow+0x730>)
 800a29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29e:	4606      	mov	r6, r0
 800a2a0:	460f      	mov	r7, r1
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	4629      	mov	r1, r5
 800a2a6:	f7f6 f99f 	bl	80005e8 <__aeabi_dmul>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	4630      	mov	r0, r6
 800a2b0:	4639      	mov	r1, r7
 800a2b2:	f7f5 ffe3 	bl	800027c <__adddf3>
 800a2b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2b8:	4b38      	ldr	r3, [pc, #224]	; (800a39c <__ieee754_pow+0x75c>)
 800a2ba:	4413      	add	r3, r2
 800a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c0:	f7f5 ffdc 	bl	800027c <__adddf3>
 800a2c4:	4682      	mov	sl, r0
 800a2c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2c8:	468b      	mov	fp, r1
 800a2ca:	f7f6 f923 	bl	8000514 <__aeabi_i2d>
 800a2ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2d0:	4b33      	ldr	r3, [pc, #204]	; (800a3a0 <__ieee754_pow+0x760>)
 800a2d2:	4413      	add	r3, r2
 800a2d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2d8:	4606      	mov	r6, r0
 800a2da:	460f      	mov	r7, r1
 800a2dc:	4652      	mov	r2, sl
 800a2de:	465b      	mov	r3, fp
 800a2e0:	ec51 0b18 	vmov	r0, r1, d8
 800a2e4:	f7f5 ffca 	bl	800027c <__adddf3>
 800a2e8:	4642      	mov	r2, r8
 800a2ea:	464b      	mov	r3, r9
 800a2ec:	f7f5 ffc6 	bl	800027c <__adddf3>
 800a2f0:	4632      	mov	r2, r6
 800a2f2:	463b      	mov	r3, r7
 800a2f4:	f7f5 ffc2 	bl	800027c <__adddf3>
 800a2f8:	9c04      	ldr	r4, [sp, #16]
 800a2fa:	4632      	mov	r2, r6
 800a2fc:	463b      	mov	r3, r7
 800a2fe:	4620      	mov	r0, r4
 800a300:	460d      	mov	r5, r1
 800a302:	f7f5 ffb9 	bl	8000278 <__aeabi_dsub>
 800a306:	4642      	mov	r2, r8
 800a308:	464b      	mov	r3, r9
 800a30a:	f7f5 ffb5 	bl	8000278 <__aeabi_dsub>
 800a30e:	ec53 2b18 	vmov	r2, r3, d8
 800a312:	f7f5 ffb1 	bl	8000278 <__aeabi_dsub>
 800a316:	4602      	mov	r2, r0
 800a318:	460b      	mov	r3, r1
 800a31a:	4650      	mov	r0, sl
 800a31c:	4659      	mov	r1, fp
 800a31e:	e606      	b.n	8009f2e <__ieee754_pow+0x2ee>
 800a320:	2401      	movs	r4, #1
 800a322:	e6a0      	b.n	800a066 <__ieee754_pow+0x426>
 800a324:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a378 <__ieee754_pow+0x738>
 800a328:	e60d      	b.n	8009f46 <__ieee754_pow+0x306>
 800a32a:	bf00      	nop
 800a32c:	f3af 8000 	nop.w
 800a330:	4a454eef 	.word	0x4a454eef
 800a334:	3fca7e28 	.word	0x3fca7e28
 800a338:	93c9db65 	.word	0x93c9db65
 800a33c:	3fcd864a 	.word	0x3fcd864a
 800a340:	a91d4101 	.word	0xa91d4101
 800a344:	3fd17460 	.word	0x3fd17460
 800a348:	518f264d 	.word	0x518f264d
 800a34c:	3fd55555 	.word	0x3fd55555
 800a350:	db6fabff 	.word	0xdb6fabff
 800a354:	3fdb6db6 	.word	0x3fdb6db6
 800a358:	33333303 	.word	0x33333303
 800a35c:	3fe33333 	.word	0x3fe33333
 800a360:	e0000000 	.word	0xe0000000
 800a364:	3feec709 	.word	0x3feec709
 800a368:	dc3a03fd 	.word	0xdc3a03fd
 800a36c:	3feec709 	.word	0x3feec709
 800a370:	145b01f5 	.word	0x145b01f5
 800a374:	be3e2fe0 	.word	0xbe3e2fe0
 800a378:	00000000 	.word	0x00000000
 800a37c:	3ff00000 	.word	0x3ff00000
 800a380:	7ff00000 	.word	0x7ff00000
 800a384:	43400000 	.word	0x43400000
 800a388:	0003988e 	.word	0x0003988e
 800a38c:	000bb679 	.word	0x000bb679
 800a390:	0800b5d0 	.word	0x0800b5d0
 800a394:	3ff00000 	.word	0x3ff00000
 800a398:	40080000 	.word	0x40080000
 800a39c:	0800b5f0 	.word	0x0800b5f0
 800a3a0:	0800b5e0 	.word	0x0800b5e0
 800a3a4:	a3b5      	add	r3, pc, #724	; (adr r3, 800a67c <__ieee754_pow+0xa3c>)
 800a3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3aa:	4640      	mov	r0, r8
 800a3ac:	4649      	mov	r1, r9
 800a3ae:	f7f5 ff65 	bl	800027c <__adddf3>
 800a3b2:	4622      	mov	r2, r4
 800a3b4:	ec41 0b1a 	vmov	d10, r0, r1
 800a3b8:	462b      	mov	r3, r5
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	4639      	mov	r1, r7
 800a3be:	f7f5 ff5b 	bl	8000278 <__aeabi_dsub>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	ec51 0b1a 	vmov	r0, r1, d10
 800a3ca:	f7f6 fb9d 	bl	8000b08 <__aeabi_dcmpgt>
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	f47f adf8 	bne.w	8009fc4 <__ieee754_pow+0x384>
 800a3d4:	4aa4      	ldr	r2, [pc, #656]	; (800a668 <__ieee754_pow+0xa28>)
 800a3d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	f340 810b 	ble.w	800a5f6 <__ieee754_pow+0x9b6>
 800a3e0:	151b      	asrs	r3, r3, #20
 800a3e2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a3e6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a3ea:	fa4a f303 	asr.w	r3, sl, r3
 800a3ee:	445b      	add	r3, fp
 800a3f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a3f4:	4e9d      	ldr	r6, [pc, #628]	; (800a66c <__ieee754_pow+0xa2c>)
 800a3f6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a3fa:	4116      	asrs	r6, r2
 800a3fc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a400:	2000      	movs	r0, #0
 800a402:	ea23 0106 	bic.w	r1, r3, r6
 800a406:	f1c2 0214 	rsb	r2, r2, #20
 800a40a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a40e:	fa4a fa02 	asr.w	sl, sl, r2
 800a412:	f1bb 0f00 	cmp.w	fp, #0
 800a416:	4602      	mov	r2, r0
 800a418:	460b      	mov	r3, r1
 800a41a:	4620      	mov	r0, r4
 800a41c:	4629      	mov	r1, r5
 800a41e:	bfb8      	it	lt
 800a420:	f1ca 0a00 	rsblt	sl, sl, #0
 800a424:	f7f5 ff28 	bl	8000278 <__aeabi_dsub>
 800a428:	ec41 0b19 	vmov	d9, r0, r1
 800a42c:	4642      	mov	r2, r8
 800a42e:	464b      	mov	r3, r9
 800a430:	ec51 0b19 	vmov	r0, r1, d9
 800a434:	f7f5 ff22 	bl	800027c <__adddf3>
 800a438:	2400      	movs	r4, #0
 800a43a:	a379      	add	r3, pc, #484	; (adr r3, 800a620 <__ieee754_pow+0x9e0>)
 800a43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a440:	4620      	mov	r0, r4
 800a442:	460d      	mov	r5, r1
 800a444:	f7f6 f8d0 	bl	80005e8 <__aeabi_dmul>
 800a448:	ec53 2b19 	vmov	r2, r3, d9
 800a44c:	4606      	mov	r6, r0
 800a44e:	460f      	mov	r7, r1
 800a450:	4620      	mov	r0, r4
 800a452:	4629      	mov	r1, r5
 800a454:	f7f5 ff10 	bl	8000278 <__aeabi_dsub>
 800a458:	4602      	mov	r2, r0
 800a45a:	460b      	mov	r3, r1
 800a45c:	4640      	mov	r0, r8
 800a45e:	4649      	mov	r1, r9
 800a460:	f7f5 ff0a 	bl	8000278 <__aeabi_dsub>
 800a464:	a370      	add	r3, pc, #448	; (adr r3, 800a628 <__ieee754_pow+0x9e8>)
 800a466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46a:	f7f6 f8bd 	bl	80005e8 <__aeabi_dmul>
 800a46e:	a370      	add	r3, pc, #448	; (adr r3, 800a630 <__ieee754_pow+0x9f0>)
 800a470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a474:	4680      	mov	r8, r0
 800a476:	4689      	mov	r9, r1
 800a478:	4620      	mov	r0, r4
 800a47a:	4629      	mov	r1, r5
 800a47c:	f7f6 f8b4 	bl	80005e8 <__aeabi_dmul>
 800a480:	4602      	mov	r2, r0
 800a482:	460b      	mov	r3, r1
 800a484:	4640      	mov	r0, r8
 800a486:	4649      	mov	r1, r9
 800a488:	f7f5 fef8 	bl	800027c <__adddf3>
 800a48c:	4604      	mov	r4, r0
 800a48e:	460d      	mov	r5, r1
 800a490:	4602      	mov	r2, r0
 800a492:	460b      	mov	r3, r1
 800a494:	4630      	mov	r0, r6
 800a496:	4639      	mov	r1, r7
 800a498:	f7f5 fef0 	bl	800027c <__adddf3>
 800a49c:	4632      	mov	r2, r6
 800a49e:	463b      	mov	r3, r7
 800a4a0:	4680      	mov	r8, r0
 800a4a2:	4689      	mov	r9, r1
 800a4a4:	f7f5 fee8 	bl	8000278 <__aeabi_dsub>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	4629      	mov	r1, r5
 800a4b0:	f7f5 fee2 	bl	8000278 <__aeabi_dsub>
 800a4b4:	4642      	mov	r2, r8
 800a4b6:	4606      	mov	r6, r0
 800a4b8:	460f      	mov	r7, r1
 800a4ba:	464b      	mov	r3, r9
 800a4bc:	4640      	mov	r0, r8
 800a4be:	4649      	mov	r1, r9
 800a4c0:	f7f6 f892 	bl	80005e8 <__aeabi_dmul>
 800a4c4:	a35c      	add	r3, pc, #368	; (adr r3, 800a638 <__ieee754_pow+0x9f8>)
 800a4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	460d      	mov	r5, r1
 800a4ce:	f7f6 f88b 	bl	80005e8 <__aeabi_dmul>
 800a4d2:	a35b      	add	r3, pc, #364	; (adr r3, 800a640 <__ieee754_pow+0xa00>)
 800a4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d8:	f7f5 fece 	bl	8000278 <__aeabi_dsub>
 800a4dc:	4622      	mov	r2, r4
 800a4de:	462b      	mov	r3, r5
 800a4e0:	f7f6 f882 	bl	80005e8 <__aeabi_dmul>
 800a4e4:	a358      	add	r3, pc, #352	; (adr r3, 800a648 <__ieee754_pow+0xa08>)
 800a4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ea:	f7f5 fec7 	bl	800027c <__adddf3>
 800a4ee:	4622      	mov	r2, r4
 800a4f0:	462b      	mov	r3, r5
 800a4f2:	f7f6 f879 	bl	80005e8 <__aeabi_dmul>
 800a4f6:	a356      	add	r3, pc, #344	; (adr r3, 800a650 <__ieee754_pow+0xa10>)
 800a4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fc:	f7f5 febc 	bl	8000278 <__aeabi_dsub>
 800a500:	4622      	mov	r2, r4
 800a502:	462b      	mov	r3, r5
 800a504:	f7f6 f870 	bl	80005e8 <__aeabi_dmul>
 800a508:	a353      	add	r3, pc, #332	; (adr r3, 800a658 <__ieee754_pow+0xa18>)
 800a50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50e:	f7f5 feb5 	bl	800027c <__adddf3>
 800a512:	4622      	mov	r2, r4
 800a514:	462b      	mov	r3, r5
 800a516:	f7f6 f867 	bl	80005e8 <__aeabi_dmul>
 800a51a:	4602      	mov	r2, r0
 800a51c:	460b      	mov	r3, r1
 800a51e:	4640      	mov	r0, r8
 800a520:	4649      	mov	r1, r9
 800a522:	f7f5 fea9 	bl	8000278 <__aeabi_dsub>
 800a526:	4604      	mov	r4, r0
 800a528:	460d      	mov	r5, r1
 800a52a:	4602      	mov	r2, r0
 800a52c:	460b      	mov	r3, r1
 800a52e:	4640      	mov	r0, r8
 800a530:	4649      	mov	r1, r9
 800a532:	f7f6 f859 	bl	80005e8 <__aeabi_dmul>
 800a536:	2200      	movs	r2, #0
 800a538:	ec41 0b19 	vmov	d9, r0, r1
 800a53c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a540:	4620      	mov	r0, r4
 800a542:	4629      	mov	r1, r5
 800a544:	f7f5 fe98 	bl	8000278 <__aeabi_dsub>
 800a548:	4602      	mov	r2, r0
 800a54a:	460b      	mov	r3, r1
 800a54c:	ec51 0b19 	vmov	r0, r1, d9
 800a550:	f7f6 f974 	bl	800083c <__aeabi_ddiv>
 800a554:	4632      	mov	r2, r6
 800a556:	4604      	mov	r4, r0
 800a558:	460d      	mov	r5, r1
 800a55a:	463b      	mov	r3, r7
 800a55c:	4640      	mov	r0, r8
 800a55e:	4649      	mov	r1, r9
 800a560:	f7f6 f842 	bl	80005e8 <__aeabi_dmul>
 800a564:	4632      	mov	r2, r6
 800a566:	463b      	mov	r3, r7
 800a568:	f7f5 fe88 	bl	800027c <__adddf3>
 800a56c:	4602      	mov	r2, r0
 800a56e:	460b      	mov	r3, r1
 800a570:	4620      	mov	r0, r4
 800a572:	4629      	mov	r1, r5
 800a574:	f7f5 fe80 	bl	8000278 <__aeabi_dsub>
 800a578:	4642      	mov	r2, r8
 800a57a:	464b      	mov	r3, r9
 800a57c:	f7f5 fe7c 	bl	8000278 <__aeabi_dsub>
 800a580:	460b      	mov	r3, r1
 800a582:	4602      	mov	r2, r0
 800a584:	493a      	ldr	r1, [pc, #232]	; (800a670 <__ieee754_pow+0xa30>)
 800a586:	2000      	movs	r0, #0
 800a588:	f7f5 fe76 	bl	8000278 <__aeabi_dsub>
 800a58c:	e9cd 0100 	strd	r0, r1, [sp]
 800a590:	9b01      	ldr	r3, [sp, #4]
 800a592:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a59a:	da2f      	bge.n	800a5fc <__ieee754_pow+0x9bc>
 800a59c:	4650      	mov	r0, sl
 800a59e:	ed9d 0b00 	vldr	d0, [sp]
 800a5a2:	f000 f9cd 	bl	800a940 <scalbn>
 800a5a6:	ec51 0b10 	vmov	r0, r1, d0
 800a5aa:	ec53 2b18 	vmov	r2, r3, d8
 800a5ae:	f7ff bbe0 	b.w	8009d72 <__ieee754_pow+0x132>
 800a5b2:	4b30      	ldr	r3, [pc, #192]	; (800a674 <__ieee754_pow+0xa34>)
 800a5b4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a5b8:	429e      	cmp	r6, r3
 800a5ba:	f77f af0b 	ble.w	800a3d4 <__ieee754_pow+0x794>
 800a5be:	4b2e      	ldr	r3, [pc, #184]	; (800a678 <__ieee754_pow+0xa38>)
 800a5c0:	440b      	add	r3, r1
 800a5c2:	4303      	orrs	r3, r0
 800a5c4:	d00b      	beq.n	800a5de <__ieee754_pow+0x99e>
 800a5c6:	a326      	add	r3, pc, #152	; (adr r3, 800a660 <__ieee754_pow+0xa20>)
 800a5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5cc:	ec51 0b18 	vmov	r0, r1, d8
 800a5d0:	f7f6 f80a 	bl	80005e8 <__aeabi_dmul>
 800a5d4:	a322      	add	r3, pc, #136	; (adr r3, 800a660 <__ieee754_pow+0xa20>)
 800a5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5da:	f7ff bbca 	b.w	8009d72 <__ieee754_pow+0x132>
 800a5de:	4622      	mov	r2, r4
 800a5e0:	462b      	mov	r3, r5
 800a5e2:	f7f5 fe49 	bl	8000278 <__aeabi_dsub>
 800a5e6:	4642      	mov	r2, r8
 800a5e8:	464b      	mov	r3, r9
 800a5ea:	f7f6 fa83 	bl	8000af4 <__aeabi_dcmpge>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	f43f aef0 	beq.w	800a3d4 <__ieee754_pow+0x794>
 800a5f4:	e7e7      	b.n	800a5c6 <__ieee754_pow+0x986>
 800a5f6:	f04f 0a00 	mov.w	sl, #0
 800a5fa:	e717      	b.n	800a42c <__ieee754_pow+0x7ec>
 800a5fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a600:	4619      	mov	r1, r3
 800a602:	e7d2      	b.n	800a5aa <__ieee754_pow+0x96a>
 800a604:	491a      	ldr	r1, [pc, #104]	; (800a670 <__ieee754_pow+0xa30>)
 800a606:	2000      	movs	r0, #0
 800a608:	f7ff bb9e 	b.w	8009d48 <__ieee754_pow+0x108>
 800a60c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a610:	f7ff bb9a 	b.w	8009d48 <__ieee754_pow+0x108>
 800a614:	9000      	str	r0, [sp, #0]
 800a616:	f7ff bb76 	b.w	8009d06 <__ieee754_pow+0xc6>
 800a61a:	2100      	movs	r1, #0
 800a61c:	f7ff bb60 	b.w	8009ce0 <__ieee754_pow+0xa0>
 800a620:	00000000 	.word	0x00000000
 800a624:	3fe62e43 	.word	0x3fe62e43
 800a628:	fefa39ef 	.word	0xfefa39ef
 800a62c:	3fe62e42 	.word	0x3fe62e42
 800a630:	0ca86c39 	.word	0x0ca86c39
 800a634:	be205c61 	.word	0xbe205c61
 800a638:	72bea4d0 	.word	0x72bea4d0
 800a63c:	3e663769 	.word	0x3e663769
 800a640:	c5d26bf1 	.word	0xc5d26bf1
 800a644:	3ebbbd41 	.word	0x3ebbbd41
 800a648:	af25de2c 	.word	0xaf25de2c
 800a64c:	3f11566a 	.word	0x3f11566a
 800a650:	16bebd93 	.word	0x16bebd93
 800a654:	3f66c16c 	.word	0x3f66c16c
 800a658:	5555553e 	.word	0x5555553e
 800a65c:	3fc55555 	.word	0x3fc55555
 800a660:	c2f8f359 	.word	0xc2f8f359
 800a664:	01a56e1f 	.word	0x01a56e1f
 800a668:	3fe00000 	.word	0x3fe00000
 800a66c:	000fffff 	.word	0x000fffff
 800a670:	3ff00000 	.word	0x3ff00000
 800a674:	4090cbff 	.word	0x4090cbff
 800a678:	3f6f3400 	.word	0x3f6f3400
 800a67c:	652b82fe 	.word	0x652b82fe
 800a680:	3c971547 	.word	0x3c971547

0800a684 <__ieee754_sqrt>:
 800a684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a688:	ec55 4b10 	vmov	r4, r5, d0
 800a68c:	4e56      	ldr	r6, [pc, #344]	; (800a7e8 <__ieee754_sqrt+0x164>)
 800a68e:	43ae      	bics	r6, r5
 800a690:	ee10 0a10 	vmov	r0, s0
 800a694:	ee10 3a10 	vmov	r3, s0
 800a698:	4629      	mov	r1, r5
 800a69a:	462a      	mov	r2, r5
 800a69c:	d110      	bne.n	800a6c0 <__ieee754_sqrt+0x3c>
 800a69e:	ee10 2a10 	vmov	r2, s0
 800a6a2:	462b      	mov	r3, r5
 800a6a4:	f7f5 ffa0 	bl	80005e8 <__aeabi_dmul>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	f7f5 fde4 	bl	800027c <__adddf3>
 800a6b4:	4604      	mov	r4, r0
 800a6b6:	460d      	mov	r5, r1
 800a6b8:	ec45 4b10 	vmov	d0, r4, r5
 800a6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6c0:	2d00      	cmp	r5, #0
 800a6c2:	dc10      	bgt.n	800a6e6 <__ieee754_sqrt+0x62>
 800a6c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a6c8:	4330      	orrs	r0, r6
 800a6ca:	d0f5      	beq.n	800a6b8 <__ieee754_sqrt+0x34>
 800a6cc:	b15d      	cbz	r5, 800a6e6 <__ieee754_sqrt+0x62>
 800a6ce:	ee10 2a10 	vmov	r2, s0
 800a6d2:	462b      	mov	r3, r5
 800a6d4:	ee10 0a10 	vmov	r0, s0
 800a6d8:	f7f5 fdce 	bl	8000278 <__aeabi_dsub>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	460b      	mov	r3, r1
 800a6e0:	f7f6 f8ac 	bl	800083c <__aeabi_ddiv>
 800a6e4:	e7e6      	b.n	800a6b4 <__ieee754_sqrt+0x30>
 800a6e6:	1509      	asrs	r1, r1, #20
 800a6e8:	d076      	beq.n	800a7d8 <__ieee754_sqrt+0x154>
 800a6ea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a6ee:	07ce      	lsls	r6, r1, #31
 800a6f0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a6f4:	bf5e      	ittt	pl
 800a6f6:	0fda      	lsrpl	r2, r3, #31
 800a6f8:	005b      	lslpl	r3, r3, #1
 800a6fa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a6fe:	0fda      	lsrs	r2, r3, #31
 800a700:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a704:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a708:	2000      	movs	r0, #0
 800a70a:	106d      	asrs	r5, r5, #1
 800a70c:	005b      	lsls	r3, r3, #1
 800a70e:	f04f 0e16 	mov.w	lr, #22
 800a712:	4684      	mov	ip, r0
 800a714:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a718:	eb0c 0401 	add.w	r4, ip, r1
 800a71c:	4294      	cmp	r4, r2
 800a71e:	bfde      	ittt	le
 800a720:	1b12      	suble	r2, r2, r4
 800a722:	eb04 0c01 	addle.w	ip, r4, r1
 800a726:	1840      	addle	r0, r0, r1
 800a728:	0052      	lsls	r2, r2, #1
 800a72a:	f1be 0e01 	subs.w	lr, lr, #1
 800a72e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a732:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a736:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a73a:	d1ed      	bne.n	800a718 <__ieee754_sqrt+0x94>
 800a73c:	4671      	mov	r1, lr
 800a73e:	2720      	movs	r7, #32
 800a740:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a744:	4562      	cmp	r2, ip
 800a746:	eb04 060e 	add.w	r6, r4, lr
 800a74a:	dc02      	bgt.n	800a752 <__ieee754_sqrt+0xce>
 800a74c:	d113      	bne.n	800a776 <__ieee754_sqrt+0xf2>
 800a74e:	429e      	cmp	r6, r3
 800a750:	d811      	bhi.n	800a776 <__ieee754_sqrt+0xf2>
 800a752:	2e00      	cmp	r6, #0
 800a754:	eb06 0e04 	add.w	lr, r6, r4
 800a758:	da43      	bge.n	800a7e2 <__ieee754_sqrt+0x15e>
 800a75a:	f1be 0f00 	cmp.w	lr, #0
 800a75e:	db40      	blt.n	800a7e2 <__ieee754_sqrt+0x15e>
 800a760:	f10c 0801 	add.w	r8, ip, #1
 800a764:	eba2 020c 	sub.w	r2, r2, ip
 800a768:	429e      	cmp	r6, r3
 800a76a:	bf88      	it	hi
 800a76c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a770:	1b9b      	subs	r3, r3, r6
 800a772:	4421      	add	r1, r4
 800a774:	46c4      	mov	ip, r8
 800a776:	0052      	lsls	r2, r2, #1
 800a778:	3f01      	subs	r7, #1
 800a77a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a77e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a782:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a786:	d1dd      	bne.n	800a744 <__ieee754_sqrt+0xc0>
 800a788:	4313      	orrs	r3, r2
 800a78a:	d006      	beq.n	800a79a <__ieee754_sqrt+0x116>
 800a78c:	1c4c      	adds	r4, r1, #1
 800a78e:	bf13      	iteet	ne
 800a790:	3101      	addne	r1, #1
 800a792:	3001      	addeq	r0, #1
 800a794:	4639      	moveq	r1, r7
 800a796:	f021 0101 	bicne.w	r1, r1, #1
 800a79a:	1043      	asrs	r3, r0, #1
 800a79c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a7a0:	0849      	lsrs	r1, r1, #1
 800a7a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a7a6:	07c2      	lsls	r2, r0, #31
 800a7a8:	bf48      	it	mi
 800a7aa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a7ae:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a7b2:	460c      	mov	r4, r1
 800a7b4:	463d      	mov	r5, r7
 800a7b6:	e77f      	b.n	800a6b8 <__ieee754_sqrt+0x34>
 800a7b8:	0ada      	lsrs	r2, r3, #11
 800a7ba:	3815      	subs	r0, #21
 800a7bc:	055b      	lsls	r3, r3, #21
 800a7be:	2a00      	cmp	r2, #0
 800a7c0:	d0fa      	beq.n	800a7b8 <__ieee754_sqrt+0x134>
 800a7c2:	02d7      	lsls	r7, r2, #11
 800a7c4:	d50a      	bpl.n	800a7dc <__ieee754_sqrt+0x158>
 800a7c6:	f1c1 0420 	rsb	r4, r1, #32
 800a7ca:	fa23 f404 	lsr.w	r4, r3, r4
 800a7ce:	1e4d      	subs	r5, r1, #1
 800a7d0:	408b      	lsls	r3, r1
 800a7d2:	4322      	orrs	r2, r4
 800a7d4:	1b41      	subs	r1, r0, r5
 800a7d6:	e788      	b.n	800a6ea <__ieee754_sqrt+0x66>
 800a7d8:	4608      	mov	r0, r1
 800a7da:	e7f0      	b.n	800a7be <__ieee754_sqrt+0x13a>
 800a7dc:	0052      	lsls	r2, r2, #1
 800a7de:	3101      	adds	r1, #1
 800a7e0:	e7ef      	b.n	800a7c2 <__ieee754_sqrt+0x13e>
 800a7e2:	46e0      	mov	r8, ip
 800a7e4:	e7be      	b.n	800a764 <__ieee754_sqrt+0xe0>
 800a7e6:	bf00      	nop
 800a7e8:	7ff00000 	.word	0x7ff00000

0800a7ec <fabs>:
 800a7ec:	ec51 0b10 	vmov	r0, r1, d0
 800a7f0:	ee10 2a10 	vmov	r2, s0
 800a7f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a7f8:	ec43 2b10 	vmov	d0, r2, r3
 800a7fc:	4770      	bx	lr

0800a7fe <finite>:
 800a7fe:	b082      	sub	sp, #8
 800a800:	ed8d 0b00 	vstr	d0, [sp]
 800a804:	9801      	ldr	r0, [sp, #4]
 800a806:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a80a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a80e:	0fc0      	lsrs	r0, r0, #31
 800a810:	b002      	add	sp, #8
 800a812:	4770      	bx	lr
 800a814:	0000      	movs	r0, r0
	...

0800a818 <nan>:
 800a818:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a820 <nan+0x8>
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	00000000 	.word	0x00000000
 800a824:	7ff80000 	.word	0x7ff80000

0800a828 <rint>:
 800a828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a82a:	ec51 0b10 	vmov	r0, r1, d0
 800a82e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a832:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a836:	2e13      	cmp	r6, #19
 800a838:	ee10 4a10 	vmov	r4, s0
 800a83c:	460b      	mov	r3, r1
 800a83e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a842:	dc58      	bgt.n	800a8f6 <rint+0xce>
 800a844:	2e00      	cmp	r6, #0
 800a846:	da2b      	bge.n	800a8a0 <rint+0x78>
 800a848:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a84c:	4302      	orrs	r2, r0
 800a84e:	d023      	beq.n	800a898 <rint+0x70>
 800a850:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a854:	4302      	orrs	r2, r0
 800a856:	4254      	negs	r4, r2
 800a858:	4314      	orrs	r4, r2
 800a85a:	0c4b      	lsrs	r3, r1, #17
 800a85c:	0b24      	lsrs	r4, r4, #12
 800a85e:	045b      	lsls	r3, r3, #17
 800a860:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a864:	ea44 0103 	orr.w	r1, r4, r3
 800a868:	4b32      	ldr	r3, [pc, #200]	; (800a934 <rint+0x10c>)
 800a86a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a86e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a872:	4602      	mov	r2, r0
 800a874:	460b      	mov	r3, r1
 800a876:	4630      	mov	r0, r6
 800a878:	4639      	mov	r1, r7
 800a87a:	f7f5 fcff 	bl	800027c <__adddf3>
 800a87e:	e9cd 0100 	strd	r0, r1, [sp]
 800a882:	463b      	mov	r3, r7
 800a884:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a888:	4632      	mov	r2, r6
 800a88a:	f7f5 fcf5 	bl	8000278 <__aeabi_dsub>
 800a88e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a892:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a896:	4639      	mov	r1, r7
 800a898:	ec41 0b10 	vmov	d0, r0, r1
 800a89c:	b003      	add	sp, #12
 800a89e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8a0:	4a25      	ldr	r2, [pc, #148]	; (800a938 <rint+0x110>)
 800a8a2:	4132      	asrs	r2, r6
 800a8a4:	ea01 0702 	and.w	r7, r1, r2
 800a8a8:	4307      	orrs	r7, r0
 800a8aa:	d0f5      	beq.n	800a898 <rint+0x70>
 800a8ac:	0851      	lsrs	r1, r2, #1
 800a8ae:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800a8b2:	4314      	orrs	r4, r2
 800a8b4:	d00c      	beq.n	800a8d0 <rint+0xa8>
 800a8b6:	ea23 0201 	bic.w	r2, r3, r1
 800a8ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a8be:	2e13      	cmp	r6, #19
 800a8c0:	fa43 f606 	asr.w	r6, r3, r6
 800a8c4:	bf0c      	ite	eq
 800a8c6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a8ca:	2400      	movne	r4, #0
 800a8cc:	ea42 0306 	orr.w	r3, r2, r6
 800a8d0:	4918      	ldr	r1, [pc, #96]	; (800a934 <rint+0x10c>)
 800a8d2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a8d6:	4622      	mov	r2, r4
 800a8d8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a8dc:	4620      	mov	r0, r4
 800a8de:	4629      	mov	r1, r5
 800a8e0:	f7f5 fccc 	bl	800027c <__adddf3>
 800a8e4:	e9cd 0100 	strd	r0, r1, [sp]
 800a8e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8ec:	4622      	mov	r2, r4
 800a8ee:	462b      	mov	r3, r5
 800a8f0:	f7f5 fcc2 	bl	8000278 <__aeabi_dsub>
 800a8f4:	e7d0      	b.n	800a898 <rint+0x70>
 800a8f6:	2e33      	cmp	r6, #51	; 0x33
 800a8f8:	dd07      	ble.n	800a90a <rint+0xe2>
 800a8fa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a8fe:	d1cb      	bne.n	800a898 <rint+0x70>
 800a900:	ee10 2a10 	vmov	r2, s0
 800a904:	f7f5 fcba 	bl	800027c <__adddf3>
 800a908:	e7c6      	b.n	800a898 <rint+0x70>
 800a90a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800a90e:	f04f 36ff 	mov.w	r6, #4294967295
 800a912:	40d6      	lsrs	r6, r2
 800a914:	4230      	tst	r0, r6
 800a916:	d0bf      	beq.n	800a898 <rint+0x70>
 800a918:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800a91c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800a920:	bf1f      	itttt	ne
 800a922:	ea24 0101 	bicne.w	r1, r4, r1
 800a926:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a92a:	fa44 f202 	asrne.w	r2, r4, r2
 800a92e:	ea41 0402 	orrne.w	r4, r1, r2
 800a932:	e7cd      	b.n	800a8d0 <rint+0xa8>
 800a934:	0800b600 	.word	0x0800b600
 800a938:	000fffff 	.word	0x000fffff
 800a93c:	00000000 	.word	0x00000000

0800a940 <scalbn>:
 800a940:	b570      	push	{r4, r5, r6, lr}
 800a942:	ec55 4b10 	vmov	r4, r5, d0
 800a946:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a94a:	4606      	mov	r6, r0
 800a94c:	462b      	mov	r3, r5
 800a94e:	b99a      	cbnz	r2, 800a978 <scalbn+0x38>
 800a950:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a954:	4323      	orrs	r3, r4
 800a956:	d036      	beq.n	800a9c6 <scalbn+0x86>
 800a958:	4b39      	ldr	r3, [pc, #228]	; (800aa40 <scalbn+0x100>)
 800a95a:	4629      	mov	r1, r5
 800a95c:	ee10 0a10 	vmov	r0, s0
 800a960:	2200      	movs	r2, #0
 800a962:	f7f5 fe41 	bl	80005e8 <__aeabi_dmul>
 800a966:	4b37      	ldr	r3, [pc, #220]	; (800aa44 <scalbn+0x104>)
 800a968:	429e      	cmp	r6, r3
 800a96a:	4604      	mov	r4, r0
 800a96c:	460d      	mov	r5, r1
 800a96e:	da10      	bge.n	800a992 <scalbn+0x52>
 800a970:	a32b      	add	r3, pc, #172	; (adr r3, 800aa20 <scalbn+0xe0>)
 800a972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a976:	e03a      	b.n	800a9ee <scalbn+0xae>
 800a978:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a97c:	428a      	cmp	r2, r1
 800a97e:	d10c      	bne.n	800a99a <scalbn+0x5a>
 800a980:	ee10 2a10 	vmov	r2, s0
 800a984:	4620      	mov	r0, r4
 800a986:	4629      	mov	r1, r5
 800a988:	f7f5 fc78 	bl	800027c <__adddf3>
 800a98c:	4604      	mov	r4, r0
 800a98e:	460d      	mov	r5, r1
 800a990:	e019      	b.n	800a9c6 <scalbn+0x86>
 800a992:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a996:	460b      	mov	r3, r1
 800a998:	3a36      	subs	r2, #54	; 0x36
 800a99a:	4432      	add	r2, r6
 800a99c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a9a0:	428a      	cmp	r2, r1
 800a9a2:	dd08      	ble.n	800a9b6 <scalbn+0x76>
 800a9a4:	2d00      	cmp	r5, #0
 800a9a6:	a120      	add	r1, pc, #128	; (adr r1, 800aa28 <scalbn+0xe8>)
 800a9a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9ac:	da1c      	bge.n	800a9e8 <scalbn+0xa8>
 800a9ae:	a120      	add	r1, pc, #128	; (adr r1, 800aa30 <scalbn+0xf0>)
 800a9b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9b4:	e018      	b.n	800a9e8 <scalbn+0xa8>
 800a9b6:	2a00      	cmp	r2, #0
 800a9b8:	dd08      	ble.n	800a9cc <scalbn+0x8c>
 800a9ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a9be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a9c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a9c6:	ec45 4b10 	vmov	d0, r4, r5
 800a9ca:	bd70      	pop	{r4, r5, r6, pc}
 800a9cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a9d0:	da19      	bge.n	800aa06 <scalbn+0xc6>
 800a9d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a9d6:	429e      	cmp	r6, r3
 800a9d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a9dc:	dd0a      	ble.n	800a9f4 <scalbn+0xb4>
 800a9de:	a112      	add	r1, pc, #72	; (adr r1, 800aa28 <scalbn+0xe8>)
 800a9e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d1e2      	bne.n	800a9ae <scalbn+0x6e>
 800a9e8:	a30f      	add	r3, pc, #60	; (adr r3, 800aa28 <scalbn+0xe8>)
 800a9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ee:	f7f5 fdfb 	bl	80005e8 <__aeabi_dmul>
 800a9f2:	e7cb      	b.n	800a98c <scalbn+0x4c>
 800a9f4:	a10a      	add	r1, pc, #40	; (adr r1, 800aa20 <scalbn+0xe0>)
 800a9f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d0b8      	beq.n	800a970 <scalbn+0x30>
 800a9fe:	a10e      	add	r1, pc, #56	; (adr r1, 800aa38 <scalbn+0xf8>)
 800aa00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa04:	e7b4      	b.n	800a970 <scalbn+0x30>
 800aa06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aa0a:	3236      	adds	r2, #54	; 0x36
 800aa0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aa10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800aa14:	4620      	mov	r0, r4
 800aa16:	4b0c      	ldr	r3, [pc, #48]	; (800aa48 <scalbn+0x108>)
 800aa18:	2200      	movs	r2, #0
 800aa1a:	e7e8      	b.n	800a9ee <scalbn+0xae>
 800aa1c:	f3af 8000 	nop.w
 800aa20:	c2f8f359 	.word	0xc2f8f359
 800aa24:	01a56e1f 	.word	0x01a56e1f
 800aa28:	8800759c 	.word	0x8800759c
 800aa2c:	7e37e43c 	.word	0x7e37e43c
 800aa30:	8800759c 	.word	0x8800759c
 800aa34:	fe37e43c 	.word	0xfe37e43c
 800aa38:	c2f8f359 	.word	0xc2f8f359
 800aa3c:	81a56e1f 	.word	0x81a56e1f
 800aa40:	43500000 	.word	0x43500000
 800aa44:	ffff3cb0 	.word	0xffff3cb0
 800aa48:	3c900000 	.word	0x3c900000

0800aa4c <_init>:
 800aa4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa4e:	bf00      	nop
 800aa50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa52:	bc08      	pop	{r3}
 800aa54:	469e      	mov	lr, r3
 800aa56:	4770      	bx	lr

0800aa58 <_fini>:
 800aa58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa5a:	bf00      	nop
 800aa5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa5e:	bc08      	pop	{r3}
 800aa60:	469e      	mov	lr, r3
 800aa62:	4770      	bx	lr
