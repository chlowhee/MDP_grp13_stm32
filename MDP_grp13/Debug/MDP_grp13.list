
MDP_grp13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b224  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bb8  0800b3b8  0800b3b8  0001b3b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf70  0800bf70  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf70  0800bf70  0001bf70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf78  0800bf78  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf78  0800bf78  0001bf78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf7c  0800bf7c  0001bf7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800bf80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00005038  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200050b0  200050b0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eb60  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ab6  00000000  00000000  0003ec08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001700  00000000  00000000  000426c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015d0  00000000  00000000  00043dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000443d  00000000  00000000  00045390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001913c  00000000  00000000  000497cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2685  00000000  00000000  00062909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00144f8e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000068e8  00000000  00000000  00144fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b39c 	.word	0x0800b39c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800b39c 	.word	0x0800b39c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <delay>:
uint8_t aRxBuffer[1];
/* IR */
uint32_t ir1Dist = 0;
uint32_t ir2Dist = 0;

void delay(uint16_t time){  //provide us delay
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <delay+0x30>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim4) < time);
 8000ef2:	bf00      	nop
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <delay+0x30>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d3f9      	bcc.n	8000ef4 <delay+0x14>
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20004a28 	.word	0x20004a28
 8000f14:	00000000 	.word	0x00000000

08000f18 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)		//For HCSR04_Read();
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	7f1b      	ldrb	r3, [r3, #28]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	f040 8083 	bne.w	8001030 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000f2a:	4b45      	ldr	r3, [pc, #276]	; (8001040 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d11a      	bne.n	8000f68 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000f32:	2100      	movs	r1, #0
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f004 f8d1 	bl	80050dc <HAL_TIM_ReadCapturedValue>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4a41      	ldr	r2, [pc, #260]	; (8001044 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f3e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000f40:	4b3f      	ldr	r3, [pc, #252]	; (8001040 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	601a      	str	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6a1a      	ldr	r2, [r3, #32]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 020a 	bic.w	r2, r2, #10
 8000f54:	621a      	str	r2, [r3, #32]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6a1a      	ldr	r2, [r3, #32]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f042 0202 	orr.w	r2, r2, #2
 8000f64:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 8000f66:	e063      	b.n	8001030 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000f68:	4b35      	ldr	r3, [pc, #212]	; (8001040 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d15f      	bne.n	8001030 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000f70:	2100      	movs	r1, #0
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f004 f8b2 	bl	80050dc <HAL_TIM_ReadCapturedValue>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a33      	ldr	r2, [pc, #204]	; (8001048 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f7c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 8000f86:	4b30      	ldr	r3, [pc, #192]	; (8001048 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	4b2e      	ldr	r3, [pc, #184]	; (8001044 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d907      	bls.n	8000fa2 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000f92:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	4b2b      	ldr	r3, [pc, #172]	; (8001044 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	4a2b      	ldr	r2, [pc, #172]	; (800104c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	e00f      	b.n	8000fc2 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2) {
 8000fa2:	4b28      	ldr	r3, [pc, #160]	; (8001044 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	4b28      	ldr	r3, [pc, #160]	; (8001048 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d909      	bls.n	8000fc2 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000fae:	4b26      	ldr	r3, [pc, #152]	; (8001048 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	4b24      	ldr	r3, [pc, #144]	; (8001044 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000fbc:	33ff      	adds	r3, #255	; 0xff
 8000fbe:	4a23      	ldr	r2, [pc, #140]	; (800104c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000fc0:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000fc2:	4b22      	ldr	r3, [pc, #136]	; (800104c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fa9c 	bl	8000504 <__aeabi_ui2d>
 8000fcc:	a31a      	add	r3, pc, #104	; (adr r3, 8001038 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	f7ff fb11 	bl	80005f8 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fe6:	f7ff fc31 	bl	800084c <__aeabi_ddiv>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4610      	mov	r0, r2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f7ff fdd9 	bl	8000ba8 <__aeabi_d2uiz>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000ffc:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6a1a      	ldr	r2, [r3, #32]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 020a 	bic.w	r2, r2, #10
 8001012:	621a      	str	r2, [r3, #32]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6a12      	ldr	r2, [r2, #32]
 800101e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 0202 	bic.w	r2, r2, #2
 800102e:	60da      	str	r2, [r3, #12]
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	b020c49c 	.word	0xb020c49c
 800103c:	3fa16872 	.word	0x3fa16872
 8001040:	200000ac 	.word	0x200000ac
 8001044:	200000a0 	.word	0x200000a0
 8001048:	200000a4 	.word	0x200000a4
 800104c:	200000a8 	.word	0x200000a8
 8001050:	200000b0 	.word	0x200000b0
 8001054:	20004a28 	.word	0x20004a28

08001058 <HCSR04_Read>:

uint16_t HCSR04_Read (void)		//Read Ultrasonic Distance
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800105c:	2201      	movs	r2, #1
 800105e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001062:	480c      	ldr	r0, [pc, #48]	; (8001094 <HCSR04_Read+0x3c>)
 8001064:	f002 fc70 	bl	8003948 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8001068:	200a      	movs	r0, #10
 800106a:	f7ff ff39 	bl	8000ee0 <delay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001074:	4807      	ldr	r0, [pc, #28]	; (8001094 <HCSR04_Read+0x3c>)
 8001076:	f002 fc67 	bl	8003948 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <HCSR04_Read+0x40>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <HCSR04_Read+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f042 0202 	orr.w	r2, r2, #2
 8001088:	60da      	str	r2, [r3, #12]
	return Distance;
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <HCSR04_Read+0x44>)
 800108c:	881b      	ldrh	r3, [r3, #0]
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40020c00 	.word	0x40020c00
 8001098:	20004a28 	.word	0x20004a28
 800109c:	200000b0 	.word	0x200000b0

080010a0 <ultraDistCheck>:

void ultraDistCheck (void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	uDistCheck1 = HCSR04_Read();
 80010a4:	f7ff ffd8 	bl	8001058 <HCSR04_Read>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b26      	ldr	r3, [pc, #152]	; (8001148 <ultraDistCheck+0xa8>)
 80010ae:	801a      	strh	r2, [r3, #0]
	HAL_Delay(100);
 80010b0:	2064      	movs	r0, #100	; 0x64
 80010b2:	f001 fda3 	bl	8002bfc <HAL_Delay>
	uDistCheck2 = HCSR04_Read();
 80010b6:	f7ff ffcf 	bl	8001058 <HCSR04_Read>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	4b23      	ldr	r3, [pc, #140]	; (800114c <ultraDistCheck+0xac>)
 80010c0:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 80010c2:	2064      	movs	r0, #100	; 0x64
 80010c4:	f001 fd9a 	bl	8002bfc <HAL_Delay>

	while (uDistCheck1 - uDistCheck2 >= 5 || uDistCheck2 - uDistCheck1 >= 5) {
 80010c8:	e020      	b.n	800110c <ultraDistCheck+0x6c>
		uDistCheck1 = HCSR04_Read();
 80010ca:	f7ff ffc5 	bl	8001058 <HCSR04_Read>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <ultraDistCheck+0xa8>)
 80010d4:	801a      	strh	r2, [r3, #0]
		HAL_Delay(100);
 80010d6:	2064      	movs	r0, #100	; 0x64
 80010d8:	f001 fd90 	bl	8002bfc <HAL_Delay>
		uDistCheck2 = HCSR04_Read();
 80010dc:	f7ff ffbc 	bl	8001058 <HCSR04_Read>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <ultraDistCheck+0xac>)
 80010e6:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 80010e8:	2064      	movs	r0, #100	; 0x64
 80010ea:	f001 fd87 	bl	8002bfc <HAL_Delay>

		if (uDistCheck1 - uDistCheck2 < 5 || uDistCheck2 - uDistCheck1 < 5) {
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <ultraDistCheck+0xa8>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <ultraDistCheck+0xac>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	dd15      	ble.n	800112a <ultraDistCheck+0x8a>
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <ultraDistCheck+0xac>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a11      	ldr	r2, [pc, #68]	; (8001148 <ultraDistCheck+0xa8>)
 8001104:	8812      	ldrh	r2, [r2, #0]
 8001106:	1a9b      	subs	r3, r3, r2
 8001108:	2b04      	cmp	r3, #4
 800110a:	dd0e      	ble.n	800112a <ultraDistCheck+0x8a>
	while (uDistCheck1 - uDistCheck2 >= 5 || uDistCheck2 - uDistCheck1 >= 5) {
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <ultraDistCheck+0xa8>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <ultraDistCheck+0xac>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b04      	cmp	r3, #4
 800111a:	dcd6      	bgt.n	80010ca <ultraDistCheck+0x2a>
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <ultraDistCheck+0xac>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a09      	ldr	r2, [pc, #36]	; (8001148 <ultraDistCheck+0xa8>)
 8001122:	8812      	ldrh	r2, [r2, #0]
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	2b04      	cmp	r3, #4
 8001128:	dccf      	bgt.n	80010ca <ultraDistCheck+0x2a>
			break;
		}
	}
	uDistFinal = (uDistCheck1 + uDistCheck2)/2;
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <ultraDistCheck+0xa8>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <ultraDistCheck+0xac>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4413      	add	r3, r2
 8001136:	0fda      	lsrs	r2, r3, #31
 8001138:	4413      	add	r3, r2
 800113a:	105b      	asrs	r3, r3, #1
 800113c:	461a      	mov	r2, r3
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <ultraDistCheck+0xb0>)
 8001140:	601a      	str	r2, [r3, #0]
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200000b2 	.word	0x200000b2
 800114c:	200000b4 	.word	0x200000b4
 8001150:	200000b8 	.word	0x200000b8
 8001154:	00000000 	.word	0x00000000

08001158 <irRight>:


	ir1Dist = 31.13125 * pow(V, -1.08797);
}

void irRight (void) { //ADC2
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
	uint32_t adc2 = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	603b      	str	r3, [r7, #0]
	float V = 0;
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
	HAL_ADC_Start(&hadc2);
 8001168:	482d      	ldr	r0, [pc, #180]	; (8001220 <irRight+0xc8>)
 800116a:	f001 fdaf 	bl	8002ccc <HAL_ADC_Start>
	adc2 = HAL_ADC_GetValue(&hadc2);
 800116e:	482c      	ldr	r0, [pc, #176]	; (8001220 <irRight+0xc8>)
 8001170:	f001 fe7e 	bl	8002e70 <HAL_ADC_GetValue>
 8001174:	6038      	str	r0, [r7, #0]
	V = (float)adc2/1000;
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	ee07 3a90 	vmov	s15, r3
 800117c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001180:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001224 <irRight+0xcc>
 8001184:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001188:	edc7 7a01 	vstr	s15, [r7, #4]

	if (V <= 0.42) V = 0.44; //cap at 80 cm
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff f9db 	bl	8000548 <__aeabi_f2d>
 8001192:	a31b      	add	r3, pc, #108	; (adr r3, 8001200 <irRight+0xa8>)
 8001194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001198:	f7ff fcaa 	bl	8000af0 <__aeabi_dcmple>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <irRight+0x50>
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <irRight+0xd0>)
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	e00c      	b.n	80011c2 <irRight+0x6a>
	else if (V >= 2.9) V = 2.95; //cap at 10 cm
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff f9cd 	bl	8000548 <__aeabi_f2d>
 80011ae:	a316      	add	r3, pc, #88	; (adr r3, 8001208 <irRight+0xb0>)
 80011b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b4:	f7ff fca6 	bl	8000b04 <__aeabi_dcmpge>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <irRight+0x6a>
 80011be:	4b1b      	ldr	r3, [pc, #108]	; (800122c <irRight+0xd4>)
 80011c0:	607b      	str	r3, [r7, #4]


	ir2Dist = 32.6167 * pow(V, -1.0928);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff f9c0 	bl	8000548 <__aeabi_f2d>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8001210 <irRight+0xb8>
 80011d0:	ec43 2b10 	vmov	d0, r2, r3
 80011d4:	f009 f92c 	bl	800a430 <pow>
 80011d8:	ec51 0b10 	vmov	r0, r1, d0
 80011dc:	a30e      	add	r3, pc, #56	; (adr r3, 8001218 <irRight+0xc0>)
 80011de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e2:	f7ff fa09 	bl	80005f8 <__aeabi_dmul>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fcdb 	bl	8000ba8 <__aeabi_d2uiz>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <irRight+0xd8>)
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	ae147ae1 	.word	0xae147ae1
 8001204:	3fdae147 	.word	0x3fdae147
 8001208:	33333333 	.word	0x33333333
 800120c:	40073333 	.word	0x40073333
 8001210:	da5119ce 	.word	0xda5119ce
 8001214:	bff17c1b 	.word	0xbff17c1b
 8001218:	068db8bb 	.word	0x068db8bb
 800121c:	40404ef0 	.word	0x40404ef0
 8001220:	20004ab8 	.word	0x20004ab8
 8001224:	447a0000 	.word	0x447a0000
 8001228:	3ee147ae 	.word	0x3ee147ae
 800122c:	403ccccd 	.word	0x403ccccd
 8001230:	200000bc 	.word	0x200000bc

08001234 <waitCmd>:

void waitCmd (void) {	//not complete
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	while (*aRxBuffer == 'R') {
 8001238:	e004      	b.n	8001244 <waitCmd+0x10>
		HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 1);
 800123a:	2201      	movs	r2, #1
 800123c:	4905      	ldr	r1, [pc, #20]	; (8001254 <waitCmd+0x20>)
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <waitCmd+0x24>)
 8001240:	f004 fdf8 	bl	8005e34 <HAL_UART_Receive_IT>
	while (*aRxBuffer == 'R') {
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <waitCmd+0x20>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b52      	cmp	r3, #82	; 0x52
 800124a:	d0f6      	beq.n	800123a <waitCmd+0x6>
	}
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20004bfc 	.word	0x20004bfc
 8001258:	20004a74 	.word	0x20004a74
 800125c:	00000000 	.word	0x00000000

08001260 <motorControl>:

//Master function for all motor functions
int motorControl(int speedL, int speedR, char dirL, char dirR, int turn, int time, double dist){
 8001260:	b5b0      	push	{r4, r5, r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6178      	str	r0, [r7, #20]
 8001268:	6139      	str	r1, [r7, #16]
 800126a:	4611      	mov	r1, r2
 800126c:	461a      	mov	r2, r3
 800126e:	ed87 0b00 	vstr	d0, [r7]
 8001272:	460b      	mov	r3, r1
 8001274:	73fb      	strb	r3, [r7, #15]
 8001276:	4613      	mov	r3, r2
 8001278:	73bb      	strb	r3, [r7, #14]

	//declaration
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);		//left encoder(MotorA) start
 800127a:	213c      	movs	r1, #60	; 0x3c
 800127c:	483c      	ldr	r0, [pc, #240]	; (8001370 <motorControl+0x110>)
 800127e:	f003 fb71 	bl	8004964 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		//right encoder(MotorB) start
 8001282:	213c      	movs	r1, #60	; 0x3c
 8001284:	483b      	ldr	r0, [pc, #236]	; (8001374 <motorControl+0x114>)
 8001286:	f003 fb6d 	bl	8004964 <HAL_TIM_Encoder_Start>
	cntl1 = __HAL_TIM_GET_COUNTER(&htim2);
 800128a:	4b39      	ldr	r3, [pc, #228]	; (8001370 <motorControl+0x110>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	b21a      	sxth	r2, r3
 8001292:	4b39      	ldr	r3, [pc, #228]	; (8001378 <motorControl+0x118>)
 8001294:	801a      	strh	r2, [r3, #0]
	cntr1 = __HAL_TIM_GET_COUNTER(&htim3);
 8001296:	4b37      	ldr	r3, [pc, #220]	; (8001374 <motorControl+0x114>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	b21a      	sxth	r2, r3
 800129e:	4b37      	ldr	r3, [pc, #220]	; (800137c <motorControl+0x11c>)
 80012a0:	801a      	strh	r2, [r3, #0]
	tick = HAL_GetTick();
 80012a2:	f001 fc9f 	bl	8002be4 <HAL_GetTick>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b35      	ldr	r3, [pc, #212]	; (8001380 <motorControl+0x120>)
 80012ac:	601a      	str	r2, [r3, #0]
	double encDist = dist * 68;
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	4b34      	ldr	r3, [pc, #208]	; (8001384 <motorControl+0x124>)
 80012b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012b8:	f7ff f99e 	bl	80005f8 <__aeabi_dmul>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	e9c7 2308 	strd	r2, r3, [r7, #32]

	int currTime = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]

	//Select direction of motor//

	switch(dirL){
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	2b46      	cmp	r3, #70	; 0x46
 80012cc:	d002      	beq.n	80012d4 <motorControl+0x74>
 80012ce:	2b52      	cmp	r3, #82	; 0x52
 80012d0:	d00b      	beq.n	80012ea <motorControl+0x8a>
 80012d2:	e015      	b.n	8001300 <motorControl+0xa0>
		case 'F':
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80012d4:	2201      	movs	r2, #1
 80012d6:	2108      	movs	r1, #8
 80012d8:	482b      	ldr	r0, [pc, #172]	; (8001388 <motorControl+0x128>)
 80012da:	f002 fb35 	bl	8003948 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2104      	movs	r1, #4
 80012e2:	4829      	ldr	r0, [pc, #164]	; (8001388 <motorControl+0x128>)
 80012e4:	f002 fb30 	bl	8003948 <HAL_GPIO_WritePin>
			break;
 80012e8:	e00a      	b.n	8001300 <motorControl+0xa0>

		case 'R':
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2108      	movs	r1, #8
 80012ee:	4826      	ldr	r0, [pc, #152]	; (8001388 <motorControl+0x128>)
 80012f0:	f002 fb2a 	bl	8003948 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80012f4:	2201      	movs	r2, #1
 80012f6:	2104      	movs	r1, #4
 80012f8:	4823      	ldr	r0, [pc, #140]	; (8001388 <motorControl+0x128>)
 80012fa:	f002 fb25 	bl	8003948 <HAL_GPIO_WritePin>
			break;
 80012fe:	bf00      	nop
	}

	switch(dirR){
 8001300:	7bbb      	ldrb	r3, [r7, #14]
 8001302:	2b46      	cmp	r3, #70	; 0x46
 8001304:	d002      	beq.n	800130c <motorControl+0xac>
 8001306:	2b52      	cmp	r3, #82	; 0x52
 8001308:	d00b      	beq.n	8001322 <motorControl+0xc2>
 800130a:	e015      	b.n	8001338 <motorControl+0xd8>
		case 'F':
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 800130c:	2201      	movs	r2, #1
 800130e:	2110      	movs	r1, #16
 8001310:	481d      	ldr	r0, [pc, #116]	; (8001388 <motorControl+0x128>)
 8001312:	f002 fb19 	bl	8003948 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	2120      	movs	r1, #32
 800131a:	481b      	ldr	r0, [pc, #108]	; (8001388 <motorControl+0x128>)
 800131c:	f002 fb14 	bl	8003948 <HAL_GPIO_WritePin>
			break;
 8001320:	e00a      	b.n	8001338 <motorControl+0xd8>

		case 'R':
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	2110      	movs	r1, #16
 8001326:	4818      	ldr	r0, [pc, #96]	; (8001388 <motorControl+0x128>)
 8001328:	f002 fb0e 	bl	8003948 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 800132c:	2201      	movs	r2, #1
 800132e:	2120      	movs	r1, #32
 8001330:	4815      	ldr	r0, [pc, #84]	; (8001388 <motorControl+0x128>)
 8001332:	f002 fb09 	bl	8003948 <HAL_GPIO_WritePin>
			break;
 8001336:	bf00      	nop
	}
	//End of motor direction selection//

	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, speedL*1.08);
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff f8f3 	bl	8000524 <__aeabi_i2d>
 800133e:	a30a      	add	r3, pc, #40	; (adr r3, 8001368 <motorControl+0x108>)
 8001340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001344:	f7ff f958 	bl	80005f8 <__aeabi_dmul>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	490f      	ldr	r1, [pc, #60]	; (800138c <motorControl+0x12c>)
 800134e:	680c      	ldr	r4, [r1, #0]
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fc28 	bl	8000ba8 <__aeabi_d2uiz>
 8001358:	4603      	mov	r3, r0
 800135a:	6363      	str	r3, [r4, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, speedR);
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <motorControl+0x12c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	639a      	str	r2, [r3, #56]	; 0x38


	while(currTime<time){
 8001364:	e221      	b.n	80017aa <motorControl+0x54a>
 8001366:	bf00      	nop
 8001368:	147ae148 	.word	0x147ae148
 800136c:	3ff147ae 	.word	0x3ff147ae
 8001370:	20004c00 	.word	0x20004c00
 8001374:	20004b20 	.word	0x20004b20
 8001378:	20004a70 	.word	0x20004a70
 800137c:	20004bf8 	.word	0x20004bf8
 8001380:	2000009c 	.word	0x2000009c
 8001384:	40510000 	.word	0x40510000
 8001388:	40020000 	.word	0x40020000
 800138c:	200049e0 	.word	0x200049e0
			cntl2 = __HAL_TIM_GET_COUNTER(&htim2);
 8001390:	4baf      	ldr	r3, [pc, #700]	; (8001650 <motorControl+0x3f0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001396:	b21a      	sxth	r2, r3
 8001398:	4bae      	ldr	r3, [pc, #696]	; (8001654 <motorControl+0x3f4>)
 800139a:	801a      	strh	r2, [r3, #0]
			cntr2 = __HAL_TIM_GET_COUNTER(&htim3);
 800139c:	4bae      	ldr	r3, [pc, #696]	; (8001658 <motorControl+0x3f8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	4bad      	ldr	r3, [pc, #692]	; (800165c <motorControl+0x3fc>)
 80013a6:	801a      	strh	r2, [r3, #0]
			diffl = abs(cntl2);
 80013a8:	4baa      	ldr	r3, [pc, #680]	; (8001654 <motorControl+0x3f4>)
 80013aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	bfb8      	it	lt
 80013b2:	425b      	neglt	r3, r3
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	b21a      	sxth	r2, r3
 80013b8:	4ba9      	ldr	r3, [pc, #676]	; (8001660 <motorControl+0x400>)
 80013ba:	801a      	strh	r2, [r3, #0]
			diffr =abs(cntr2);
 80013bc:	4ba7      	ldr	r3, [pc, #668]	; (800165c <motorControl+0x3fc>)
 80013be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	bfb8      	it	lt
 80013c6:	425b      	neglt	r3, r3
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	b21a      	sxth	r2, r3
 80013cc:	4ba5      	ldr	r3, [pc, #660]	; (8001664 <motorControl+0x404>)
 80013ce:	801a      	strh	r2, [r3, #0]
			diffr =abs(cntr2);
 80013d0:	4ba2      	ldr	r3, [pc, #648]	; (800165c <motorControl+0x3fc>)
 80013d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	bfb8      	it	lt
 80013da:	425b      	neglt	r3, r3
 80013dc:	b29b      	uxth	r3, r3
 80013de:	b21a      	sxth	r2, r3
 80013e0:	4ba0      	ldr	r3, [pc, #640]	; (8001664 <motorControl+0x404>)
 80013e2:	801a      	strh	r2, [r3, #0]
			avg = abs((diffl+diffr)/2);
 80013e4:	4b9e      	ldr	r3, [pc, #632]	; (8001660 <motorControl+0x400>)
 80013e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b9d      	ldr	r3, [pc, #628]	; (8001664 <motorControl+0x404>)
 80013ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f2:	4413      	add	r3, r2
 80013f4:	0fda      	lsrs	r2, r3, #31
 80013f6:	4413      	add	r3, r2
 80013f8:	105b      	asrs	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	bfb8      	it	lt
 80013fe:	425b      	neglt	r3, r3
 8001400:	b21a      	sxth	r2, r3
 8001402:	4b99      	ldr	r3, [pc, #612]	; (8001668 <motorControl+0x408>)
 8001404:	801a      	strh	r2, [r3, #0]
			sprintf(display,"Left:%5d\0", diffl/68);
 8001406:	4b96      	ldr	r3, [pc, #600]	; (8001660 <motorControl+0x400>)
 8001408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140c:	4a97      	ldr	r2, [pc, #604]	; (800166c <motorControl+0x40c>)
 800140e:	fb82 1203 	smull	r1, r2, r2, r3
 8001412:	1152      	asrs	r2, r2, #5
 8001414:	17db      	asrs	r3, r3, #31
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	b21b      	sxth	r3, r3
 800141a:	461a      	mov	r2, r3
 800141c:	4994      	ldr	r1, [pc, #592]	; (8001670 <motorControl+0x410>)
 800141e:	4895      	ldr	r0, [pc, #596]	; (8001674 <motorControl+0x414>)
 8001420:	f008 fbe6 	bl	8009bf0 <siprintf>
			OLED_ShowString(10,35,display);
 8001424:	4a93      	ldr	r2, [pc, #588]	; (8001674 <motorControl+0x414>)
 8001426:	2123      	movs	r1, #35	; 0x23
 8001428:	200a      	movs	r0, #10
 800142a:	f008 fae3 	bl	80099f4 <OLED_ShowString>
			sprintf(display,"Right:%5d\0", diffr/68);
 800142e:	4b8d      	ldr	r3, [pc, #564]	; (8001664 <motorControl+0x404>)
 8001430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001434:	4a8d      	ldr	r2, [pc, #564]	; (800166c <motorControl+0x40c>)
 8001436:	fb82 1203 	smull	r1, r2, r2, r3
 800143a:	1152      	asrs	r2, r2, #5
 800143c:	17db      	asrs	r3, r3, #31
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	b21b      	sxth	r3, r3
 8001442:	461a      	mov	r2, r3
 8001444:	498c      	ldr	r1, [pc, #560]	; (8001678 <motorControl+0x418>)
 8001446:	488b      	ldr	r0, [pc, #556]	; (8001674 <motorControl+0x414>)
 8001448:	f008 fbd2 	bl	8009bf0 <siprintf>
			OLED_ShowString(10,50,display);
 800144c:	4a89      	ldr	r2, [pc, #548]	; (8001674 <motorControl+0x414>)
 800144e:	2132      	movs	r1, #50	; 0x32
 8001450:	200a      	movs	r0, #10
 8001452:	f008 facf 	bl	80099f4 <OLED_ShowString>
			OLED_Refresh_Gram();
 8001456:	f008 f959 	bl	800970c <OLED_Refresh_Gram>

			if(avg>=encDist*pow(0.8,30/dist)&&turn==0){
 800145a:	4b83      	ldr	r3, [pc, #524]	; (8001668 <motorControl+0x408>)
 800145c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff f85f 	bl	8000524 <__aeabi_i2d>
 8001466:	4604      	mov	r4, r0
 8001468:	460d      	mov	r5, r1
 800146a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800146e:	f04f 0000 	mov.w	r0, #0
 8001472:	4982      	ldr	r1, [pc, #520]	; (800167c <motorControl+0x41c>)
 8001474:	f7ff f9ea 	bl	800084c <__aeabi_ddiv>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	ec43 2b17 	vmov	d7, r2, r3
 8001480:	eeb0 1a47 	vmov.f32	s2, s14
 8001484:	eef0 1a67 	vmov.f32	s3, s15
 8001488:	ed9f 0b6d 	vldr	d0, [pc, #436]	; 8001640 <motorControl+0x3e0>
 800148c:	f008 ffd0 	bl	800a430 <pow>
 8001490:	ec51 0b10 	vmov	r0, r1, d0
 8001494:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001498:	f7ff f8ae 	bl	80005f8 <__aeabi_dmul>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4620      	mov	r0, r4
 80014a2:	4629      	mov	r1, r5
 80014a4:	f7ff fb2e 	bl	8000b04 <__aeabi_dcmpge>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d056      	beq.n	800155c <motorControl+0x2fc>
 80014ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d153      	bne.n	800155c <motorControl+0x2fc>
				speedL = speedL*pow(0.9,1+speedL/1000);
 80014b4:	6978      	ldr	r0, [r7, #20]
 80014b6:	f7ff f835 	bl	8000524 <__aeabi_i2d>
 80014ba:	4604      	mov	r4, r0
 80014bc:	460d      	mov	r5, r1
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	4a6f      	ldr	r2, [pc, #444]	; (8001680 <motorControl+0x420>)
 80014c2:	fb82 1203 	smull	r1, r2, r2, r3
 80014c6:	1192      	asrs	r2, r2, #6
 80014c8:	17db      	asrs	r3, r3, #31
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	3301      	adds	r3, #1
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff f828 	bl	8000524 <__aeabi_i2d>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	ec43 2b11 	vmov	d1, r2, r3
 80014dc:	ed9f 0b5a 	vldr	d0, [pc, #360]	; 8001648 <motorControl+0x3e8>
 80014e0:	f008 ffa6 	bl	800a430 <pow>
 80014e4:	ec53 2b10 	vmov	r2, r3, d0
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7ff f884 	bl	80005f8 <__aeabi_dmul>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fb2e 	bl	8000b58 <__aeabi_d2iz>
 80014fc:	4603      	mov	r3, r0
 80014fe:	617b      	str	r3, [r7, #20]
				speedR = speedR*pow(0.9,1+speedR/1000);
 8001500:	6938      	ldr	r0, [r7, #16]
 8001502:	f7ff f80f 	bl	8000524 <__aeabi_i2d>
 8001506:	4604      	mov	r4, r0
 8001508:	460d      	mov	r5, r1
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4a5c      	ldr	r2, [pc, #368]	; (8001680 <motorControl+0x420>)
 800150e:	fb82 1203 	smull	r1, r2, r2, r3
 8001512:	1192      	asrs	r2, r2, #6
 8001514:	17db      	asrs	r3, r3, #31
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	3301      	adds	r3, #1
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff f802 	bl	8000524 <__aeabi_i2d>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	ec43 2b11 	vmov	d1, r2, r3
 8001528:	ed9f 0b47 	vldr	d0, [pc, #284]	; 8001648 <motorControl+0x3e8>
 800152c:	f008 ff80 	bl	800a430 <pow>
 8001530:	ec53 2b10 	vmov	r2, r3, d0
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7ff f85e 	bl	80005f8 <__aeabi_dmul>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	f7ff fb08 	bl	8000b58 <__aeabi_d2iz>
 8001548:	4603      	mov	r3, r0
 800154a:	613b      	str	r3, [r7, #16]
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, speedL);
 800154c:	4b4d      	ldr	r3, [pc, #308]	; (8001684 <motorControl+0x424>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, speedR);
 8001554:	4b4b      	ldr	r3, [pc, #300]	; (8001684 <motorControl+0x424>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	639a      	str	r2, [r3, #56]	; 0x38
			}
			if(avg>=encDist && turn==0 && dirL=='F'){
 800155c:	4b42      	ldr	r3, [pc, #264]	; (8001668 <motorControl+0x408>)
 800155e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe ffde 	bl	8000524 <__aeabi_i2d>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001570:	f7ff fabe 	bl	8000af0 <__aeabi_dcmple>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d029      	beq.n	80015ce <motorControl+0x36e>
 800157a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800157c:	2b00      	cmp	r3, #0
 800157e:	d126      	bne.n	80015ce <motorControl+0x36e>
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	2b46      	cmp	r3, #70	; 0x46
 8001584:	d123      	bne.n	80015ce <motorControl+0x36e>
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	2108      	movs	r1, #8
 800158a:	483f      	ldr	r0, [pc, #252]	; (8001688 <motorControl+0x428>)
 800158c:	f002 f9dc 	bl	8003948 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001590:	2201      	movs	r2, #1
 8001592:	2104      	movs	r1, #4
 8001594:	483c      	ldr	r0, [pc, #240]	; (8001688 <motorControl+0x428>)
 8001596:	f002 f9d7 	bl	8003948 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	2110      	movs	r1, #16
 800159e:	483a      	ldr	r0, [pc, #232]	; (8001688 <motorControl+0x428>)
 80015a0:	f002 f9d2 	bl	8003948 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	2120      	movs	r1, #32
 80015a8:	4837      	ldr	r0, [pc, #220]	; (8001688 <motorControl+0x428>)
 80015aa:	f002 f9cd 	bl	8003948 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 80015ae:	2064      	movs	r0, #100	; 0x64
 80015b0:	f001 fb24 	bl	8002bfc <HAL_Delay>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80015b4:	4b33      	ldr	r3, [pc, #204]	; (8001684 <motorControl+0x424>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2200      	movs	r2, #0
 80015ba:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 80015bc:	4b31      	ldr	r3, [pc, #196]	; (8001684 <motorControl+0x424>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2200      	movs	r2, #0
 80015c2:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(500);
 80015c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015c8:	f001 fb18 	bl	8002bfc <HAL_Delay>
				break;
 80015cc:	e0f4      	b.n	80017b8 <motorControl+0x558>
			}

			if(avg>=encDist && turn==0 && dirL=='R'){
 80015ce:	4b26      	ldr	r3, [pc, #152]	; (8001668 <motorControl+0x408>)
 80015d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ffa5 	bl	8000524 <__aeabi_i2d>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80015e2:	f7ff fa85 	bl	8000af0 <__aeabi_dcmple>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d04f      	beq.n	800168c <motorControl+0x42c>
 80015ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d14c      	bne.n	800168c <motorControl+0x42c>
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	2b52      	cmp	r3, #82	; 0x52
 80015f6:	d149      	bne.n	800168c <motorControl+0x42c>
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80015f8:	2201      	movs	r2, #1
 80015fa:	2108      	movs	r1, #8
 80015fc:	4822      	ldr	r0, [pc, #136]	; (8001688 <motorControl+0x428>)
 80015fe:	f002 f9a3 	bl	8003948 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	2104      	movs	r1, #4
 8001606:	4820      	ldr	r0, [pc, #128]	; (8001688 <motorControl+0x428>)
 8001608:	f002 f99e 	bl	8003948 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 800160c:	2201      	movs	r2, #1
 800160e:	2110      	movs	r1, #16
 8001610:	481d      	ldr	r0, [pc, #116]	; (8001688 <motorControl+0x428>)
 8001612:	f002 f999 	bl	8003948 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	2120      	movs	r1, #32
 800161a:	481b      	ldr	r0, [pc, #108]	; (8001688 <motorControl+0x428>)
 800161c:	f002 f994 	bl	8003948 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 8001620:	2064      	movs	r0, #100	; 0x64
 8001622:	f001 faeb 	bl	8002bfc <HAL_Delay>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <motorControl+0x424>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2200      	movs	r2, #0
 800162c:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <motorControl+0x424>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2200      	movs	r2, #0
 8001634:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(500);
 8001636:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800163a:	f001 fadf 	bl	8002bfc <HAL_Delay>
				break;
 800163e:	e0bb      	b.n	80017b8 <motorControl+0x558>
 8001640:	9999999a 	.word	0x9999999a
 8001644:	3fe99999 	.word	0x3fe99999
 8001648:	cccccccd 	.word	0xcccccccd
 800164c:	3feccccc 	.word	0x3feccccc
 8001650:	20004c00 	.word	0x20004c00
 8001654:	20004b08 	.word	0x20004b08
 8001658:	20004b20 	.word	0x20004b20
 800165c:	200049dc 	.word	0x200049dc
 8001660:	20000094 	.word	0x20000094
 8001664:	20000096 	.word	0x20000096
 8001668:	20000098 	.word	0x20000098
 800166c:	78787879 	.word	0x78787879
 8001670:	0800b3d0 	.word	0x0800b3d0
 8001674:	20004b0c 	.word	0x20004b0c
 8001678:	0800b3dc 	.word	0x0800b3dc
 800167c:	403e0000 	.word	0x403e0000
 8001680:	10624dd3 	.word	0x10624dd3
 8001684:	200049e0 	.word	0x200049e0
 8001688:	40020000 	.word	0x40020000
			}

			if((diffl>=encDist*0.7 || diffr>=encDist*0.8)&&turn==1){
 800168c:	4b64      	ldr	r3, [pc, #400]	; (8001820 <motorControl+0x5c0>)
 800168e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe ff46 	bl	8000524 <__aeabi_i2d>
 8001698:	4604      	mov	r4, r0
 800169a:	460d      	mov	r5, r1
 800169c:	a35a      	add	r3, pc, #360	; (adr r3, 8001808 <motorControl+0x5a8>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016a6:	f7fe ffa7 	bl	80005f8 <__aeabi_dmul>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4620      	mov	r0, r4
 80016b0:	4629      	mov	r1, r5
 80016b2:	f7ff fa27 	bl	8000b04 <__aeabi_dcmpge>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d117      	bne.n	80016ec <motorControl+0x48c>
 80016bc:	4b59      	ldr	r3, [pc, #356]	; (8001824 <motorControl+0x5c4>)
 80016be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe ff2e 	bl	8000524 <__aeabi_i2d>
 80016c8:	4604      	mov	r4, r0
 80016ca:	460d      	mov	r5, r1
 80016cc:	a350      	add	r3, pc, #320	; (adr r3, 8001810 <motorControl+0x5b0>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016d6:	f7fe ff8f 	bl	80005f8 <__aeabi_dmul>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4620      	mov	r0, r4
 80016e0:	4629      	mov	r1, r5
 80016e2:	f7ff fa0f 	bl	8000b04 <__aeabi_dcmpge>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d02a      	beq.n	8001742 <motorControl+0x4e2>
 80016ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d127      	bne.n	8001742 <motorControl+0x4e2>
				speedL = speedL*0.9;
 80016f2:	6978      	ldr	r0, [r7, #20]
 80016f4:	f7fe ff16 	bl	8000524 <__aeabi_i2d>
 80016f8:	a347      	add	r3, pc, #284	; (adr r3, 8001818 <motorControl+0x5b8>)
 80016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fe:	f7fe ff7b 	bl	80005f8 <__aeabi_dmul>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	f7ff fa25 	bl	8000b58 <__aeabi_d2iz>
 800170e:	4603      	mov	r3, r0
 8001710:	617b      	str	r3, [r7, #20]
				speedR = speedR*0.9;
 8001712:	6938      	ldr	r0, [r7, #16]
 8001714:	f7fe ff06 	bl	8000524 <__aeabi_i2d>
 8001718:	a33f      	add	r3, pc, #252	; (adr r3, 8001818 <motorControl+0x5b8>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	f7fe ff6b 	bl	80005f8 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	f7ff fa15 	bl	8000b58 <__aeabi_d2iz>
 800172e:	4603      	mov	r3, r0
 8001730:	613b      	str	r3, [r7, #16]
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, speedL);
 8001732:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <motorControl+0x5c8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, speedR);
 800173a:	4b3b      	ldr	r3, [pc, #236]	; (8001828 <motorControl+0x5c8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	639a      	str	r2, [r3, #56]	; 0x38
			}

			if((diffl>=encDist*0.9 || diffr>=encDist*0.9)&&turn==1){
 8001742:	4b37      	ldr	r3, [pc, #220]	; (8001820 <motorControl+0x5c0>)
 8001744:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe feeb 	bl	8000524 <__aeabi_i2d>
 800174e:	4604      	mov	r4, r0
 8001750:	460d      	mov	r5, r1
 8001752:	a331      	add	r3, pc, #196	; (adr r3, 8001818 <motorControl+0x5b8>)
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800175c:	f7fe ff4c 	bl	80005f8 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4620      	mov	r0, r4
 8001766:	4629      	mov	r1, r5
 8001768:	f7ff f9cc 	bl	8000b04 <__aeabi_dcmpge>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d118      	bne.n	80017a4 <motorControl+0x544>
 8001772:	4b2c      	ldr	r3, [pc, #176]	; (8001824 <motorControl+0x5c4>)
 8001774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fed3 	bl	8000524 <__aeabi_i2d>
 800177e:	4604      	mov	r4, r0
 8001780:	460d      	mov	r5, r1
 8001782:	a325      	add	r3, pc, #148	; (adr r3, 8001818 <motorControl+0x5b8>)
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800178c:	f7fe ff34 	bl	80005f8 <__aeabi_dmul>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4620      	mov	r0, r4
 8001796:	4629      	mov	r1, r5
 8001798:	f7ff f9b4 	bl	8000b04 <__aeabi_dcmpge>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d100      	bne.n	80017a4 <motorControl+0x544>
 80017a2:	e002      	b.n	80017aa <motorControl+0x54a>
 80017a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d005      	beq.n	80017b6 <motorControl+0x556>
	while(currTime<time){
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017ae:	429a      	cmp	r2, r3
 80017b0:	f6ff adee 	blt.w	8001390 <motorControl+0x130>
 80017b4:	e000      	b.n	80017b8 <motorControl+0x558>

				break;
 80017b6:	bf00      	nop
			}

		}
		__HAL_TIM_SET_COUNTER(&htim2,0);
 80017b8:	4b1c      	ldr	r3, [pc, #112]	; (800182c <motorControl+0x5cc>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2200      	movs	r2, #0
 80017be:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim3,0);
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <motorControl+0x5d0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2200      	movs	r2, #0
 80017c6:	625a      	str	r2, [r3, #36]	; 0x24

		speedL=speedR=tick=diffl=diffr=0;
 80017c8:	4b16      	ldr	r3, [pc, #88]	; (8001824 <motorControl+0x5c4>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	801a      	strh	r2, [r3, #0]
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <motorControl+0x5c4>)
 80017d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <motorControl+0x5c0>)
 80017d6:	801a      	strh	r2, [r3, #0]
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <motorControl+0x5c0>)
 80017da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017de:	461a      	mov	r2, r3
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <motorControl+0x5d4>)
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <motorControl+0x5d4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	617b      	str	r3, [r7, #20]
		OLED_Refresh_Gram();
 80017ee:	f007 ff8d 	bl	800970c <OLED_Refresh_Gram>
		*aRxBuffer = 'R';
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <motorControl+0x5d8>)
 80017f4:	2252      	movs	r2, #82	; 0x52
 80017f6:	701a      	strb	r2, [r3, #0]
}
 80017f8:	bf00      	nop
 80017fa:	4618      	mov	r0, r3
 80017fc:	3728      	adds	r7, #40	; 0x28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bdb0      	pop	{r4, r5, r7, pc}
 8001802:	bf00      	nop
 8001804:	f3af 8000 	nop.w
 8001808:	66666666 	.word	0x66666666
 800180c:	3fe66666 	.word	0x3fe66666
 8001810:	9999999a 	.word	0x9999999a
 8001814:	3fe99999 	.word	0x3fe99999
 8001818:	cccccccd 	.word	0xcccccccd
 800181c:	3feccccc 	.word	0x3feccccc
 8001820:	20000094 	.word	0x20000094
 8001824:	20000096 	.word	0x20000096
 8001828:	200049e0 	.word	0x200049e0
 800182c:	20004c00 	.word	0x20004c00
 8001830:	20004b20 	.word	0x20004b20
 8001834:	2000009c 	.word	0x2000009c
 8001838:	20004bfc 	.word	0x20004bfc
 800183c:	00000000 	.word	0x00000000

08001840 <Fleft>:

void Fleft(int deg){
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af02      	add	r7, sp, #8
 8001846:	6078      	str	r0, [r7, #4]
	double dist = 0.585 * deg;
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7fe fe6b 	bl	8000524 <__aeabi_i2d>
 800184e:	a31f      	add	r3, pc, #124	; (adr r3, 80018cc <Fleft+0x8c>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	f7fe fed0 	bl	80005f8 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	htim1.Instance->CCR4 = 56;
 8001860:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <Fleft+0x88>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2238      	movs	r2, #56	; 0x38
 8001866:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(500);
 8001868:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800186c:	f001 f9c6 	bl	8002bfc <HAL_Delay>
	motorControl(800, 4000, 'F', 'F', 1, 1000, dist);
 8001870:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	2301      	movs	r3, #1
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	ed97 0b02 	vldr	d0, [r7, #8]
 800187e:	2346      	movs	r3, #70	; 0x46
 8001880:	2246      	movs	r2, #70	; 0x46
 8001882:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001886:	f44f 7048 	mov.w	r0, #800	; 0x320
 800188a:	f7ff fce9 	bl	8001260 <motorControl>
	htim1.Instance->CCR4 = 74;
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <Fleft+0x88>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	224a      	movs	r2, #74	; 0x4a
 8001894:	641a      	str	r2, [r3, #64]	; 0x40
	motorControl(2000, 2000, 'F', 'F', 0, 1000, 13);
 8001896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189a:	9301      	str	r3, [sp, #4]
 800189c:	2300      	movs	r3, #0
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	ed9f 0b07 	vldr	d0, [pc, #28]	; 80018c0 <Fleft+0x80>
 80018a4:	2346      	movs	r3, #70	; 0x46
 80018a6:	2246      	movs	r2, #70	; 0x46
 80018a8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80018ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018b0:	f7ff fcd6 	bl	8001260 <motorControl>
}
 80018b4:	bf00      	nop
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	f3af 8000 	nop.w
 80018c0:	00000000 	.word	0x00000000
 80018c4:	402a0000 	.word	0x402a0000
 80018c8:	20004bb0 	.word	0x20004bb0
 80018cc:	eb851eb8 	.word	0xeb851eb8
 80018d0:	3fe2b851 	.word	0x3fe2b851

080018d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d8:	f001 f91e 	bl	8002b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018dc:	f000 f844 	bl	8001968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e0:	f000 fb96 	bl	8002010 <MX_GPIO_Init>
  MX_TIM8_Init();
 80018e4:	f000 fade 	bl	8001ea4 <MX_TIM8_Init>
  MX_TIM2_Init();
 80018e8:	f000 f9e0 	bl	8001cac <MX_TIM2_Init>
  MX_TIM1_Init();
 80018ec:	f000 f93e 	bl	8001b6c <MX_TIM1_Init>
  MX_TIM3_Init();
 80018f0:	f000 fa30 	bl	8001d54 <MX_TIM3_Init>
  MX_TIM4_Init();
 80018f4:	f000 fa82 	bl	8001dfc <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80018f8:	f000 fb60 	bl	8001fbc <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80018fc:	f000 f892 	bl	8001a24 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001900:	f000 f8e2 	bl	8001ac8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001904:	2100      	movs	r1, #0
 8001906:	480f      	ldr	r0, [pc, #60]	; (8001944 <main+0x70>)
 8001908:	f002 fe5e 	bl	80045c8 <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 1);
 800190c:	2201      	movs	r2, #1
 800190e:	490e      	ldr	r1, [pc, #56]	; (8001948 <main+0x74>)
 8001910:	480e      	ldr	r0, [pc, #56]	; (800194c <main+0x78>)
 8001912:	f004 fa8f 	bl	8005e34 <HAL_UART_Receive_IT>
  OLED_Init();
 8001916:	f008 f89f 	bl	8009a58 <OLED_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800191a:	f005 f9a7 	bl	8006c6c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LED_Toggle */
  LED_ToggleHandle = osThreadNew(StartDefaultTask, NULL, &LED_Toggle_attributes);
 800191e:	4a0c      	ldr	r2, [pc, #48]	; (8001950 <main+0x7c>)
 8001920:	2100      	movs	r1, #0
 8001922:	480c      	ldr	r0, [pc, #48]	; (8001954 <main+0x80>)
 8001924:	f005 f9ec 	bl	8006d00 <osThreadNew>
 8001928:	4603      	mov	r3, r0
 800192a:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <main+0x84>)
 800192c:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 800192e:	4a0b      	ldr	r2, [pc, #44]	; (800195c <main+0x88>)
 8001930:	2100      	movs	r1, #0
 8001932:	480b      	ldr	r0, [pc, #44]	; (8001960 <main+0x8c>)
 8001934:	f005 f9e4 	bl	8006d00 <osThreadNew>
 8001938:	4603      	mov	r3, r0
 800193a:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <main+0x90>)
 800193c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800193e:	f005 f9b9 	bl	8006cb4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001942:	e7fe      	b.n	8001942 <main+0x6e>
 8001944:	20004a28 	.word	0x20004a28
 8001948:	20004bfc 	.word	0x20004bfc
 800194c:	20004a74 	.word	0x20004a74
 8001950:	0800b438 	.word	0x0800b438
 8001954:	08002189 	.word	0x08002189
 8001958:	20004b00 	.word	0x20004b00
 800195c:	0800b45c 	.word	0x0800b45c
 8001960:	08002201 	.word	0x08002201
 8001964:	20004b04 	.word	0x20004b04

08001968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b094      	sub	sp, #80	; 0x50
 800196c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196e:	f107 0320 	add.w	r3, r7, #32
 8001972:	2230      	movs	r2, #48	; 0x30
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f008 f932 	bl	8009be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800197c:	f107 030c 	add.w	r3, r7, #12
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <SystemClock_Config+0xb4>)
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	4a21      	ldr	r2, [pc, #132]	; (8001a1c <SystemClock_Config+0xb4>)
 8001996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199a:	6413      	str	r3, [r2, #64]	; 0x40
 800199c:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <SystemClock_Config+0xb4>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a8:	2300      	movs	r3, #0
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <SystemClock_Config+0xb8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a1b      	ldr	r2, [pc, #108]	; (8001a20 <SystemClock_Config+0xb8>)
 80019b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <SystemClock_Config+0xb8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019c4:	2302      	movs	r3, #2
 80019c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019c8:	2301      	movs	r3, #1
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019cc:	2310      	movs	r3, #16
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d4:	f107 0320 	add.w	r3, r7, #32
 80019d8:	4618      	mov	r0, r3
 80019da:	f001 fff7 	bl	80039cc <HAL_RCC_OscConfig>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80019e4:	f000 fd6a 	bl	80024bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e8:	230f      	movs	r3, #15
 80019ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019ec:	2300      	movs	r3, #0
 80019ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f002 fa5a 	bl	8003ebc <HAL_RCC_ClockConfig>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001a0e:	f000 fd55 	bl	80024bc <Error_Handler>
  }
}
 8001a12:	bf00      	nop
 8001a14:	3750      	adds	r7, #80	; 0x50
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40007000 	.word	0x40007000

08001a24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a2a:	463b      	mov	r3, r7
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a36:	4b21      	ldr	r3, [pc, #132]	; (8001abc <MX_ADC1_Init+0x98>)
 8001a38:	4a21      	ldr	r2, [pc, #132]	; (8001ac0 <MX_ADC1_Init+0x9c>)
 8001a3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a3c:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <MX_ADC1_Init+0x98>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a42:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <MX_ADC1_Init+0x98>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a48:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <MX_ADC1_Init+0x98>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <MX_ADC1_Init+0x98>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a54:	4b19      	ldr	r3, [pc, #100]	; (8001abc <MX_ADC1_Init+0x98>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a5c:	4b17      	ldr	r3, [pc, #92]	; (8001abc <MX_ADC1_Init+0x98>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <MX_ADC1_Init+0x98>)
 8001a64:	4a17      	ldr	r2, [pc, #92]	; (8001ac4 <MX_ADC1_Init+0xa0>)
 8001a66:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a68:	4b14      	ldr	r3, [pc, #80]	; (8001abc <MX_ADC1_Init+0x98>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <MX_ADC1_Init+0x98>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <MX_ADC1_Init+0x98>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <MX_ADC1_Init+0x98>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a82:	480e      	ldr	r0, [pc, #56]	; (8001abc <MX_ADC1_Init+0x98>)
 8001a84:	f001 f8de 	bl	8002c44 <HAL_ADC_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001a8e:	f000 fd15 	bl	80024bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001a92:	230b      	movs	r3, #11
 8001a94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4806      	ldr	r0, [pc, #24]	; (8001abc <MX_ADC1_Init+0x98>)
 8001aa4:	f001 f9f2 	bl	8002e8c <HAL_ADC_ConfigChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001aae:	f000 fd05 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20004b68 	.word	0x20004b68
 8001ac0:	40012000 	.word	0x40012000
 8001ac4:	0f000001 	.word	0x0f000001

08001ac8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ace:	463b      	mov	r3, r7
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001ada:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <MX_ADC2_Init+0x98>)
 8001adc:	4a21      	ldr	r2, [pc, #132]	; (8001b64 <MX_ADC2_Init+0x9c>)
 8001ade:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <MX_ADC2_Init+0x98>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001ae6:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <MX_ADC2_Init+0x98>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001aec:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <MX_ADC2_Init+0x98>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001af2:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <MX_ADC2_Init+0x98>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <MX_ADC2_Init+0x98>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b00:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <MX_ADC2_Init+0x98>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <MX_ADC2_Init+0x98>)
 8001b08:	4a17      	ldr	r2, [pc, #92]	; (8001b68 <MX_ADC2_Init+0xa0>)
 8001b0a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b0c:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <MX_ADC2_Init+0x98>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001b12:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <MX_ADC2_Init+0x98>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <MX_ADC2_Init+0x98>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_ADC2_Init+0x98>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001b26:	480e      	ldr	r0, [pc, #56]	; (8001b60 <MX_ADC2_Init+0x98>)
 8001b28:	f001 f88c 	bl	8002c44 <HAL_ADC_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001b32:	f000 fcc3 	bl	80024bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001b36:	230c      	movs	r3, #12
 8001b38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b42:	463b      	mov	r3, r7
 8001b44:	4619      	mov	r1, r3
 8001b46:	4806      	ldr	r0, [pc, #24]	; (8001b60 <MX_ADC2_Init+0x98>)
 8001b48:	f001 f9a0 	bl	8002e8c <HAL_ADC_ConfigChannel>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001b52:	f000 fcb3 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20004ab8 	.word	0x20004ab8
 8001b64:	40012100 	.word	0x40012100
 8001b68:	0f000001 	.word	0x0f000001

08001b6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b096      	sub	sp, #88	; 0x58
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
 8001b98:	611a      	str	r2, [r3, #16]
 8001b9a:	615a      	str	r2, [r3, #20]
 8001b9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f008 f81b 	bl	8009be0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001baa:	4b3e      	ldr	r3, [pc, #248]	; (8001ca4 <MX_TIM1_Init+0x138>)
 8001bac:	4a3e      	ldr	r2, [pc, #248]	; (8001ca8 <MX_TIM1_Init+0x13c>)
 8001bae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320;
 8001bb0:	4b3c      	ldr	r3, [pc, #240]	; (8001ca4 <MX_TIM1_Init+0x138>)
 8001bb2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb8:	4b3a      	ldr	r3, [pc, #232]	; (8001ca4 <MX_TIM1_Init+0x138>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001bbe:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <MX_TIM1_Init+0x138>)
 8001bc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc6:	4b37      	ldr	r3, [pc, #220]	; (8001ca4 <MX_TIM1_Init+0x138>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bcc:	4b35      	ldr	r3, [pc, #212]	; (8001ca4 <MX_TIM1_Init+0x138>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bd2:	4b34      	ldr	r3, [pc, #208]	; (8001ca4 <MX_TIM1_Init+0x138>)
 8001bd4:	2280      	movs	r2, #128	; 0x80
 8001bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bd8:	4832      	ldr	r0, [pc, #200]	; (8001ca4 <MX_TIM1_Init+0x138>)
 8001bda:	f002 fb3f 	bl	800425c <HAL_TIM_Base_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001be4:	f000 fc6a 	bl	80024bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	482b      	ldr	r0, [pc, #172]	; (8001ca4 <MX_TIM1_Init+0x138>)
 8001bf6:	f003 f9a9 	bl	8004f4c <HAL_TIM_ConfigClockSource>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001c00:	f000 fc5c 	bl	80024bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c04:	4827      	ldr	r0, [pc, #156]	; (8001ca4 <MX_TIM1_Init+0x138>)
 8001c06:	f002 fb78 	bl	80042fa <HAL_TIM_PWM_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001c10:	f000 fc54 	bl	80024bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c14:	2300      	movs	r3, #0
 8001c16:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c20:	4619      	mov	r1, r3
 8001c22:	4820      	ldr	r0, [pc, #128]	; (8001ca4 <MX_TIM1_Init+0x138>)
 8001c24:	f003 ff00 	bl	8005a28 <HAL_TIMEx_MasterConfigSynchronization>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001c2e:	f000 fc45 	bl	80024bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c32:	2360      	movs	r3, #96	; 0x60
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4e:	220c      	movs	r2, #12
 8001c50:	4619      	mov	r1, r3
 8001c52:	4814      	ldr	r0, [pc, #80]	; (8001ca4 <MX_TIM1_Init+0x138>)
 8001c54:	f003 f8b8 	bl	8004dc8 <HAL_TIM_PWM_ConfigChannel>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001c5e:	f000 fc2d 	bl	80024bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c7a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	4619      	mov	r1, r3
 8001c84:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <MX_TIM1_Init+0x138>)
 8001c86:	f003 ff4b 	bl	8005b20 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001c90:	f000 fc14 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c94:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <MX_TIM1_Init+0x138>)
 8001c96:	f000 fe0b 	bl	80028b0 <HAL_TIM_MspPostInit>

}
 8001c9a:	bf00      	nop
 8001c9c:	3758      	adds	r7, #88	; 0x58
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20004bb0 	.word	0x20004bb0
 8001ca8:	40010000 	.word	0x40010000

08001cac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08c      	sub	sp, #48	; 0x30
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cb2:	f107 030c 	add.w	r3, r7, #12
 8001cb6:	2224      	movs	r2, #36	; 0x24
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f007 ff90 	bl	8009be0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cc8:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <MX_TIM2_Init+0xa4>)
 8001cca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <MX_TIM2_Init+0xa4>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <MX_TIM2_Init+0xa4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001cdc:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <MX_TIM2_Init+0xa4>)
 8001cde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ce2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <MX_TIM2_Init+0xa4>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <MX_TIM2_Init+0xa4>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001d00:	230a      	movs	r3, #10
 8001d02:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d04:	2300      	movs	r3, #0
 8001d06:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001d10:	230a      	movs	r3, #10
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	4619      	mov	r1, r3
 8001d1a:	480d      	ldr	r0, [pc, #52]	; (8001d50 <MX_TIM2_Init+0xa4>)
 8001d1c:	f002 fd7c 	bl	8004818 <HAL_TIM_Encoder_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001d26:	f000 fbc9 	bl	80024bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	4619      	mov	r1, r3
 8001d36:	4806      	ldr	r0, [pc, #24]	; (8001d50 <MX_TIM2_Init+0xa4>)
 8001d38:	f003 fe76 	bl	8005a28 <HAL_TIMEx_MasterConfigSynchronization>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001d42:	f000 fbbb 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d46:	bf00      	nop
 8001d48:	3730      	adds	r7, #48	; 0x30
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20004c00 	.word	0x20004c00

08001d54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08c      	sub	sp, #48	; 0x30
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	2224      	movs	r2, #36	; 0x24
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f007 ff3c 	bl	8009be0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d70:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <MX_TIM3_Init+0xa0>)
 8001d72:	4a21      	ldr	r2, [pc, #132]	; (8001df8 <MX_TIM3_Init+0xa4>)
 8001d74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d76:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <MX_TIM3_Init+0xa0>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <MX_TIM3_Init+0xa0>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d82:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <MX_TIM3_Init+0xa0>)
 8001d84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <MX_TIM3_Init+0xa0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d90:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <MX_TIM3_Init+0xa0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d96:	2303      	movs	r3, #3
 8001d98:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001da6:	230a      	movs	r3, #10
 8001da8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001daa:	2300      	movs	r3, #0
 8001dac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dae:	2301      	movs	r3, #1
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001db6:	230a      	movs	r3, #10
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001dba:	f107 030c 	add.w	r3, r7, #12
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	480c      	ldr	r0, [pc, #48]	; (8001df4 <MX_TIM3_Init+0xa0>)
 8001dc2:	f002 fd29 	bl	8004818 <HAL_TIM_Encoder_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001dcc:	f000 fb76 	bl	80024bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dd8:	1d3b      	adds	r3, r7, #4
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4805      	ldr	r0, [pc, #20]	; (8001df4 <MX_TIM3_Init+0xa0>)
 8001dde:	f003 fe23 	bl	8005a28 <HAL_TIMEx_MasterConfigSynchronization>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001de8:	f000 fb68 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001dec:	bf00      	nop
 8001dee:	3730      	adds	r7, #48	; 0x30
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20004b20 	.word	0x20004b20
 8001df8:	40000400 	.word	0x40000400

08001dfc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e02:	f107 0310 	add.w	r3, r7, #16
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e0c:	463b      	mov	r3, r7
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e18:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <MX_TIM4_Init+0xa0>)
 8001e1a:	4a21      	ldr	r2, [pc, #132]	; (8001ea0 <MX_TIM4_Init+0xa4>)
 8001e1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001e1e:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <MX_TIM4_Init+0xa0>)
 8001e20:	220f      	movs	r2, #15
 8001e22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e24:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <MX_TIM4_Init+0xa0>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8001e2a:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <MX_TIM4_Init+0xa0>)
 8001e2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e32:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <MX_TIM4_Init+0xa0>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e38:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <MX_TIM4_Init+0xa0>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001e3e:	4817      	ldr	r0, [pc, #92]	; (8001e9c <MX_TIM4_Init+0xa0>)
 8001e40:	f002 fb72 	bl	8004528 <HAL_TIM_IC_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001e4a:	f000 fb37 	bl	80024bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e56:	f107 0310 	add.w	r3, r7, #16
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	480f      	ldr	r0, [pc, #60]	; (8001e9c <MX_TIM4_Init+0xa0>)
 8001e5e:	f003 fde3 	bl	8005a28 <HAL_TIMEx_MasterConfigSynchronization>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001e68:	f000 fb28 	bl	80024bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e70:	2301      	movs	r3, #1
 8001e72:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	2200      	movs	r2, #0
 8001e80:	4619      	mov	r1, r3
 8001e82:	4806      	ldr	r0, [pc, #24]	; (8001e9c <MX_TIM4_Init+0xa0>)
 8001e84:	f002 ff04 	bl	8004c90 <HAL_TIM_IC_ConfigChannel>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001e8e:	f000 fb15 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e92:	bf00      	nop
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20004a28 	.word	0x20004a28
 8001ea0:	40000800 	.word	0x40000800

08001ea4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b092      	sub	sp, #72	; 0x48
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
 8001ec4:	615a      	str	r2, [r3, #20]
 8001ec6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	2220      	movs	r2, #32
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f007 fe86 	bl	8009be0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ed4:	4b37      	ldr	r3, [pc, #220]	; (8001fb4 <MX_TIM8_Init+0x110>)
 8001ed6:	4a38      	ldr	r2, [pc, #224]	; (8001fb8 <MX_TIM8_Init+0x114>)
 8001ed8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001eda:	4b36      	ldr	r3, [pc, #216]	; (8001fb4 <MX_TIM8_Init+0x110>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee0:	4b34      	ldr	r3, [pc, #208]	; (8001fb4 <MX_TIM8_Init+0x110>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001ee6:	4b33      	ldr	r3, [pc, #204]	; (8001fb4 <MX_TIM8_Init+0x110>)
 8001ee8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001eec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eee:	4b31      	ldr	r3, [pc, #196]	; (8001fb4 <MX_TIM8_Init+0x110>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ef4:	4b2f      	ldr	r3, [pc, #188]	; (8001fb4 <MX_TIM8_Init+0x110>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efa:	4b2e      	ldr	r3, [pc, #184]	; (8001fb4 <MX_TIM8_Init+0x110>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001f00:	482c      	ldr	r0, [pc, #176]	; (8001fb4 <MX_TIM8_Init+0x110>)
 8001f02:	f002 f9fa 	bl	80042fa <HAL_TIM_PWM_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001f0c:	f000 fad6 	bl	80024bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f10:	2300      	movs	r3, #0
 8001f12:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4825      	ldr	r0, [pc, #148]	; (8001fb4 <MX_TIM8_Init+0x110>)
 8001f20:	f003 fd82 	bl	8005a28 <HAL_TIMEx_MasterConfigSynchronization>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8001f2a:	f000 fac7 	bl	80024bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f2e:	2360      	movs	r3, #96	; 0x60
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f36:	2300      	movs	r3, #0
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f46:	2300      	movs	r3, #0
 8001f48:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f4e:	2200      	movs	r2, #0
 8001f50:	4619      	mov	r1, r3
 8001f52:	4818      	ldr	r0, [pc, #96]	; (8001fb4 <MX_TIM8_Init+0x110>)
 8001f54:	f002 ff38 	bl	8004dc8 <HAL_TIM_PWM_ConfigChannel>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8001f5e:	f000 faad 	bl	80024bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f66:	2204      	movs	r2, #4
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4812      	ldr	r0, [pc, #72]	; (8001fb4 <MX_TIM8_Init+0x110>)
 8001f6c:	f002 ff2c 	bl	8004dc8 <HAL_TIM_PWM_ConfigChannel>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8001f76:	f000 faa1 	bl	80024bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <MX_TIM8_Init+0x110>)
 8001f9e:	f003 fdbf 	bl	8005b20 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001fa8:	f000 fa88 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001fac:	bf00      	nop
 8001fae:	3748      	adds	r7, #72	; 0x48
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	200049e0 	.word	0x200049e0
 8001fb8:	40010400 	.word	0x40010400

08001fbc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fc0:	4b11      	ldr	r3, [pc, #68]	; (8002008 <MX_USART3_UART_Init+0x4c>)
 8001fc2:	4a12      	ldr	r2, [pc, #72]	; (800200c <MX_USART3_UART_Init+0x50>)
 8001fc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <MX_USART3_UART_Init+0x4c>)
 8001fc8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fcc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <MX_USART3_UART_Init+0x4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <MX_USART3_UART_Init+0x4c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fda:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <MX_USART3_UART_Init+0x4c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fe0:	4b09      	ldr	r3, [pc, #36]	; (8002008 <MX_USART3_UART_Init+0x4c>)
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <MX_USART3_UART_Init+0x4c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <MX_USART3_UART_Init+0x4c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ff2:	4805      	ldr	r0, [pc, #20]	; (8002008 <MX_USART3_UART_Init+0x4c>)
 8001ff4:	f003 fdfa 	bl	8005bec <HAL_UART_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ffe:	f000 fa5d 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20004a74 	.word	0x20004a74
 800200c:	40004800 	.word	0x40004800

08002010 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	; 0x28
 8002014:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
 8002024:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	4b49      	ldr	r3, [pc, #292]	; (8002150 <MX_GPIO_Init+0x140>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a48      	ldr	r2, [pc, #288]	; (8002150 <MX_GPIO_Init+0x140>)
 8002030:	f043 0310 	orr.w	r3, r3, #16
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b46      	ldr	r3, [pc, #280]	; (8002150 <MX_GPIO_Init+0x140>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	4b42      	ldr	r3, [pc, #264]	; (8002150 <MX_GPIO_Init+0x140>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a41      	ldr	r2, [pc, #260]	; (8002150 <MX_GPIO_Init+0x140>)
 800204c:	f043 0304 	orr.w	r3, r3, #4
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b3f      	ldr	r3, [pc, #252]	; (8002150 <MX_GPIO_Init+0x140>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	4b3b      	ldr	r3, [pc, #236]	; (8002150 <MX_GPIO_Init+0x140>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a3a      	ldr	r2, [pc, #232]	; (8002150 <MX_GPIO_Init+0x140>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b38      	ldr	r3, [pc, #224]	; (8002150 <MX_GPIO_Init+0x140>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]
 800207e:	4b34      	ldr	r3, [pc, #208]	; (8002150 <MX_GPIO_Init+0x140>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a33      	ldr	r2, [pc, #204]	; (8002150 <MX_GPIO_Init+0x140>)
 8002084:	f043 0308 	orr.w	r3, r3, #8
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b31      	ldr	r3, [pc, #196]	; (8002150 <MX_GPIO_Init+0x140>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	603b      	str	r3, [r7, #0]
 800209a:	4b2d      	ldr	r3, [pc, #180]	; (8002150 <MX_GPIO_Init+0x140>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a2c      	ldr	r2, [pc, #176]	; (8002150 <MX_GPIO_Init+0x140>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b2a      	ldr	r3, [pc, #168]	; (8002150 <MX_GPIO_Init+0x140>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80020b2:	2200      	movs	r2, #0
 80020b4:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 80020b8:	4826      	ldr	r0, [pc, #152]	; (8002154 <MX_GPIO_Init+0x144>)
 80020ba:	f001 fc45 	bl	8003948 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80020be:	2200      	movs	r2, #0
 80020c0:	213c      	movs	r1, #60	; 0x3c
 80020c2:	4825      	ldr	r0, [pc, #148]	; (8002158 <MX_GPIO_Init+0x148>)
 80020c4:	f001 fc40 	bl	8003948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80020c8:	2200      	movs	r2, #0
 80020ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020ce:	4823      	ldr	r0, [pc, #140]	; (800215c <MX_GPIO_Init+0x14c>)
 80020d0:	f001 fc3a 	bl	8003948 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80020d4:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 80020d8:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020da:	2301      	movs	r3, #1
 80020dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	4619      	mov	r1, r3
 80020ec:	4819      	ldr	r0, [pc, #100]	; (8002154 <MX_GPIO_Init+0x144>)
 80020ee:	f001 fa8f 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 80020f2:	233c      	movs	r3, #60	; 0x3c
 80020f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f6:	2301      	movs	r3, #1
 80020f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020fe:	2302      	movs	r3, #2
 8002100:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002102:	f107 0314 	add.w	r3, r7, #20
 8002106:	4619      	mov	r1, r3
 8002108:	4813      	ldr	r0, [pc, #76]	; (8002158 <MX_GPIO_Init+0x148>)
 800210a:	f001 fa81 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pin : USRBUT_Pin */
  GPIO_InitStruct.Pin = USRBUT_Pin;
 800210e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002114:	2300      	movs	r3, #0
 8002116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USRBUT_GPIO_Port, &GPIO_InitStruct);
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	4619      	mov	r1, r3
 8002122:	480e      	ldr	r0, [pc, #56]	; (800215c <MX_GPIO_Init+0x14c>)
 8002124:	f001 fa74 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8002128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800212c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212e:	2301      	movs	r3, #1
 8002130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 800213a:	f107 0314 	add.w	r3, r7, #20
 800213e:	4619      	mov	r1, r3
 8002140:	4806      	ldr	r0, [pc, #24]	; (800215c <MX_GPIO_Init+0x14c>)
 8002142:	f001 fa65 	bl	8003610 <HAL_GPIO_Init>

}
 8002146:	bf00      	nop
 8002148:	3728      	adds	r7, #40	; 0x28
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800
 8002154:	40021000 	.word	0x40021000
 8002158:	40020000 	.word	0x40020000
 800215c:	40020c00 	.word	0x40020c00

08002160 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
	/*Prevent unused argument(s) compilation warning*/
	UNUSED(huart);
	HAL_UART_Transmit(&huart3,(uint8_t *)aRxBuffer,10,0xFFFF); //might not nd
 8002168:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800216c:	220a      	movs	r2, #10
 800216e:	4904      	ldr	r1, [pc, #16]	; (8002180 <HAL_UART_RxCpltCallback+0x20>)
 8002170:	4804      	ldr	r0, [pc, #16]	; (8002184 <HAL_UART_RxCpltCallback+0x24>)
 8002172:	f003 fd88 	bl	8005c86 <HAL_UART_Transmit>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20004bfc 	.word	0x20004bfc
 8002184:	20004a74 	.word	0x20004a74

08002188 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08e      	sub	sp, #56	; 0x38
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t test[20] = "Testing Pi";
 8002190:	4a17      	ldr	r2, [pc, #92]	; (80021f0 <StartDefaultTask+0x68>)
 8002192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002196:	ca07      	ldmia	r2, {r0, r1, r2}
 8002198:	c303      	stmia	r3!, {r0, r1}
 800219a:	801a      	strh	r2, [r3, #0]
 800219c:	3302      	adds	r3, #2
 800219e:	0c12      	lsrs	r2, r2, #16
 80021a0:	701a      	strb	r2, [r3, #0]
 80021a2:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	721a      	strb	r2, [r3, #8]
	uint8_t ultra[20];
	uint8_t checkPi[1];
	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 1);
 80021ae:	2201      	movs	r2, #1
 80021b0:	4910      	ldr	r1, [pc, #64]	; (80021f4 <StartDefaultTask+0x6c>)
 80021b2:	4811      	ldr	r0, [pc, #68]	; (80021f8 <StartDefaultTask+0x70>)
 80021b4:	f003 fe3e 	bl	8005e34 <HAL_UART_Receive_IT>
		OLED_ShowString(5,5,test);
 80021b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021bc:	461a      	mov	r2, r3
 80021be:	2105      	movs	r1, #5
 80021c0:	2005      	movs	r0, #5
 80021c2:	f007 fc17 	bl	80099f4 <OLED_ShowString>
		sprintf(checkPi, "Pi cmd: %s\0", aRxBuffer);
 80021c6:	f107 030c 	add.w	r3, r7, #12
 80021ca:	4a0a      	ldr	r2, [pc, #40]	; (80021f4 <StartDefaultTask+0x6c>)
 80021cc:	490b      	ldr	r1, [pc, #44]	; (80021fc <StartDefaultTask+0x74>)
 80021ce:	4618      	mov	r0, r3
 80021d0:	f007 fd0e 	bl	8009bf0 <siprintf>
		OLED_ShowString(10, 20, checkPi);
 80021d4:	f107 030c 	add.w	r3, r7, #12
 80021d8:	461a      	mov	r2, r3
 80021da:	2114      	movs	r1, #20
 80021dc:	200a      	movs	r0, #10
 80021de:	f007 fc09 	bl	80099f4 <OLED_ShowString>
//		HAL_Delay(200);
//		sprintf(ultra, "IR dist: %u\0", ir2Dist);
//		OLED_ShowString(10, 30, ultra);


		OLED_Refresh_Gram();
 80021e2:	f007 fa93 	bl	800970c <OLED_Refresh_Gram>
		//	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
		osDelay(100);
 80021e6:	2064      	movs	r0, #100	; 0x64
 80021e8:	f004 fe1c 	bl	8006e24 <osDelay>
	{
 80021ec:	e7df      	b.n	80021ae <StartDefaultTask+0x26>
 80021ee:	bf00      	nop
 80021f0:	0800b3f4 	.word	0x0800b3f4
 80021f4:	20004bfc 	.word	0x20004bfc
 80021f8:	20004a74 	.word	0x20004a74
 80021fc:	0800b3e8 	.word	0x0800b3e8

08002200 <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	; 0x28
 8002204:	af02      	add	r7, sp, #8
 8002206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002208:	2100      	movs	r1, #0
 800220a:	489f      	ldr	r0, [pc, #636]	; (8002488 <motor+0x288>)
 800220c:	f002 f8c4 	bl	8004398 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002210:	2104      	movs	r1, #4
 8002212:	489d      	ldr	r0, [pc, #628]	; (8002488 <motor+0x288>)
 8002214:	f002 f8c0 	bl	8004398 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002218:	210c      	movs	r1, #12
 800221a:	489c      	ldr	r0, [pc, #624]	; (800248c <motor+0x28c>)
 800221c:	f002 f8bc 	bl	8004398 <HAL_TIM_PWM_Start>
	int x = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]

	*aRxBuffer = '\0';
 8002224:	4b9a      	ldr	r3, [pc, #616]	; (8002490 <motor+0x290>)
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]

	uint8_t toRpiTest[6] = "NiHao";
 800222a:	4a9a      	ldr	r2, [pc, #616]	; (8002494 <motor+0x294>)
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002234:	6018      	str	r0, [r3, #0]
 8002236:	3304      	adds	r3, #4
 8002238:	8019      	strh	r1, [r3, #0]
		for(;;)
		  {
			switch (*aRxBuffer)
 800223a:	4b95      	ldr	r3, [pc, #596]	; (8002490 <motor+0x290>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d030      	beq.n	80022a4 <motor+0xa4>
 8002242:	2b00      	cmp	r3, #0
 8002244:	f2c0 810f 	blt.w	8002466 <motor+0x266>
 8002248:	2b55      	cmp	r3, #85	; 0x55
 800224a:	f300 810c 	bgt.w	8002466 <motor+0x266>
 800224e:	2b46      	cmp	r3, #70	; 0x46
 8002250:	f2c0 8109 	blt.w	8002466 <motor+0x266>
 8002254:	3b46      	subs	r3, #70	; 0x46
 8002256:	2b0f      	cmp	r3, #15
 8002258:	f200 8105 	bhi.w	8002466 <motor+0x266>
 800225c:	a201      	add	r2, pc, #4	; (adr r2, 8002264 <motor+0x64>)
 800225e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002262:	bf00      	nop
 8002264:	080022f5 	.word	0x080022f5
 8002268:	08002467 	.word	0x08002467
 800226c:	080022b9 	.word	0x080022b9
 8002270:	08002467 	.word	0x08002467
 8002274:	08002467 	.word	0x08002467
 8002278:	080022d5 	.word	0x080022d5
 800227c:	080022ed 	.word	0x080022ed
 8002280:	08002467 	.word	0x08002467
 8002284:	08002467 	.word	0x08002467
 8002288:	08002467 	.word	0x08002467
 800228c:	08002467 	.word	0x08002467
 8002290:	08002467 	.word	0x08002467
 8002294:	08002461 	.word	0x08002461
 8002298:	080023e9 	.word	0x080023e9
 800229c:	08002467 	.word	0x08002467
 80022a0:	08002315 	.word	0x08002315
			{
			case '\0': // initialize
				htim1.Instance->CCR4 = 74;
 80022a4:	4b79      	ldr	r3, [pc, #484]	; (800248c <motor+0x28c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	224a      	movs	r2, #74	; 0x4a
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 1);
 80022ac:	2201      	movs	r2, #1
 80022ae:	4978      	ldr	r1, [pc, #480]	; (8002490 <motor+0x290>)
 80022b0:	4879      	ldr	r0, [pc, #484]	; (8002498 <motor+0x298>)
 80022b2:	f003 fdbf 	bl	8005e34 <HAL_UART_Receive_IT>
				break;
 80022b6:	e0dc      	b.n	8002472 <motor+0x272>
			case 'H':
				HAL_UART_Transmit_IT(&huart3,(uint8_t *)&toRpiTest,6);
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	2206      	movs	r2, #6
 80022be:	4619      	mov	r1, r3
 80022c0:	4875      	ldr	r0, [pc, #468]	; (8002498 <motor+0x298>)
 80022c2:	f003 fd72 	bl	8005daa <HAL_UART_Transmit_IT>
				osDelay(50);
 80022c6:	2032      	movs	r0, #50	; 0x32
 80022c8:	f004 fdac 	bl	8006e24 <osDelay>
				*aRxBuffer = 'R';
 80022cc:	4b70      	ldr	r3, [pc, #448]	; (8002490 <motor+0x290>)
 80022ce:	2252      	movs	r2, #82	; 0x52
 80022d0:	701a      	strb	r2, [r3, #0]
				break;
 80022d2:	e0ce      	b.n	8002472 <motor+0x272>
			case 'K':
				HAL_UART_Transmit_IT(&huart3,(uint8_t *)"OK?\n",4);
 80022d4:	2204      	movs	r2, #4
 80022d6:	4971      	ldr	r1, [pc, #452]	; (800249c <motor+0x29c>)
 80022d8:	486f      	ldr	r0, [pc, #444]	; (8002498 <motor+0x298>)
 80022da:	f003 fd66 	bl	8005daa <HAL_UART_Transmit_IT>
				osDelay(50);
 80022de:	2032      	movs	r0, #50	; 0x32
 80022e0:	f004 fda0 	bl	8006e24 <osDelay>
				*aRxBuffer = 'R';
 80022e4:	4b6a      	ldr	r3, [pc, #424]	; (8002490 <motor+0x290>)
 80022e6:	2252      	movs	r2, #82	; 0x52
 80022e8:	701a      	strb	r2, [r3, #0]
				break;
 80022ea:	e0c2      	b.n	8002472 <motor+0x272>
			case 'L':
				Fleft(90);
 80022ec:	205a      	movs	r0, #90	; 0x5a
 80022ee:	f7ff faa7 	bl	8001840 <Fleft>
//				*aRxBuffer = 'R'; //put in motorControl(). cuz wun come back here
				break;
 80022f2:	e0be      	b.n	8002472 <motor+0x272>
			case 'F':
				motorControl(3000, 3000, 'F', 'F', 0, 10000, 90);
 80022f4:	f242 7310 	movw	r3, #10000	; 0x2710
 80022f8:	9301      	str	r3, [sp, #4]
 80022fa:	2300      	movs	r3, #0
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	ed9f 0b60 	vldr	d0, [pc, #384]	; 8002480 <motor+0x280>
 8002302:	2346      	movs	r3, #70	; 0x46
 8002304:	2246      	movs	r2, #70	; 0x46
 8002306:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800230a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800230e:	f7fe ffa7 	bl	8001260 <motorControl>
//				*aRxBuffer = 'R';
				break;
 8002312:	e0ae      	b.n	8002472 <motor+0x272>
			case 'U':
				ultraDistCheck();
 8002314:	f7fe fec4 	bl	80010a0 <ultraDistCheck>
				HAL_Delay(200);
 8002318:	20c8      	movs	r0, #200	; 0xc8
 800231a:	f000 fc6f 	bl	8002bfc <HAL_Delay>
				char reply[] = "000\n";
 800231e:	4a60      	ldr	r2, [pc, #384]	; (80024a0 <motor+0x2a0>)
 8002320:	f107 030c 	add.w	r3, r7, #12
 8002324:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002328:	6018      	str	r0, [r3, #0]
 800232a:	3304      	adds	r3, #4
 800232c:	7019      	strb	r1, [r3, #0]
				reply[0] += uDistFinal / 100 % 10;
 800232e:	7b38      	ldrb	r0, [r7, #12]
 8002330:	4b5c      	ldr	r3, [pc, #368]	; (80024a4 <motor+0x2a4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a5c      	ldr	r2, [pc, #368]	; (80024a8 <motor+0x2a8>)
 8002336:	fb82 1203 	smull	r1, r2, r2, r3
 800233a:	1152      	asrs	r2, r2, #5
 800233c:	17db      	asrs	r3, r3, #31
 800233e:	1ad2      	subs	r2, r2, r3
 8002340:	4b5a      	ldr	r3, [pc, #360]	; (80024ac <motor+0x2ac>)
 8002342:	fb83 1302 	smull	r1, r3, r3, r2
 8002346:	1099      	asrs	r1, r3, #2
 8002348:	17d3      	asrs	r3, r2, #31
 800234a:	1ac9      	subs	r1, r1, r3
 800234c:	460b      	mov	r3, r1
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	1ad1      	subs	r1, r2, r3
 8002356:	b2cb      	uxtb	r3, r1
 8002358:	4403      	add	r3, r0
 800235a:	b2db      	uxtb	r3, r3
 800235c:	733b      	strb	r3, [r7, #12]
				reply[1] += uDistFinal / 10 % 10;
 800235e:	7b78      	ldrb	r0, [r7, #13]
 8002360:	4b50      	ldr	r3, [pc, #320]	; (80024a4 <motor+0x2a4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a51      	ldr	r2, [pc, #324]	; (80024ac <motor+0x2ac>)
 8002366:	fb82 1203 	smull	r1, r2, r2, r3
 800236a:	1092      	asrs	r2, r2, #2
 800236c:	17db      	asrs	r3, r3, #31
 800236e:	1ad2      	subs	r2, r2, r3
 8002370:	4b4e      	ldr	r3, [pc, #312]	; (80024ac <motor+0x2ac>)
 8002372:	fb83 1302 	smull	r1, r3, r3, r2
 8002376:	1099      	asrs	r1, r3, #2
 8002378:	17d3      	asrs	r3, r2, #31
 800237a:	1ac9      	subs	r1, r1, r3
 800237c:	460b      	mov	r3, r1
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	1ad1      	subs	r1, r2, r3
 8002386:	b2cb      	uxtb	r3, r1
 8002388:	4403      	add	r3, r0
 800238a:	b2db      	uxtb	r3, r3
 800238c:	737b      	strb	r3, [r7, #13]
				reply[2] += uDistFinal % 10;
 800238e:	7bb8      	ldrb	r0, [r7, #14]
 8002390:	4b44      	ldr	r3, [pc, #272]	; (80024a4 <motor+0x2a4>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b45      	ldr	r3, [pc, #276]	; (80024ac <motor+0x2ac>)
 8002396:	fb83 1302 	smull	r1, r3, r3, r2
 800239a:	1099      	asrs	r1, r3, #2
 800239c:	17d3      	asrs	r3, r2, #31
 800239e:	1ac9      	subs	r1, r1, r3
 80023a0:	460b      	mov	r3, r1
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	1ad1      	subs	r1, r2, r3
 80023aa:	b2cb      	uxtb	r3, r1
 80023ac:	4403      	add	r3, r0
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	73bb      	strb	r3, [r7, #14]
				if (uDistFinal > 999)
 80023b2:	4b3c      	ldr	r3, [pc, #240]	; (80024a4 <motor+0x2a4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023ba:	db01      	blt.n	80023c0 <motor+0x1c0>
					reply[0] = '9';
 80023bc:	2339      	movs	r3, #57	; 0x39
 80023be:	733b      	strb	r3, [r7, #12]
				HAL_UART_Transmit_IT(&huart3, (uint8_t *)reply, strlen(reply));
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fd ff03 	bl	80001d0 <strlen>
 80023ca:	4603      	mov	r3, r0
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	f107 030c 	add.w	r3, r7, #12
 80023d2:	4619      	mov	r1, r3
 80023d4:	4830      	ldr	r0, [pc, #192]	; (8002498 <motor+0x298>)
 80023d6:	f003 fce8 	bl	8005daa <HAL_UART_Transmit_IT>
				osDelay(50);
 80023da:	2032      	movs	r0, #50	; 0x32
 80023dc:	f004 fd22 	bl	8006e24 <osDelay>
				*aRxBuffer = 'R';
 80023e0:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <motor+0x290>)
 80023e2:	2252      	movs	r2, #82	; 0x52
 80023e4:	701a      	strb	r2, [r3, #0]
				break;
 80023e6:	e044      	b.n	8002472 <motor+0x272>
			case 'S':
				irRight();
 80023e8:	f7fe feb6 	bl	8001158 <irRight>
				char reply2[] = "00\n";
 80023ec:	4b30      	ldr	r3, [pc, #192]	; (80024b0 <motor+0x2b0>)
 80023ee:	60bb      	str	r3, [r7, #8]
				reply2[0] += ir2Dist / 10 % 10;
 80023f0:	7a38      	ldrb	r0, [r7, #8]
 80023f2:	4b30      	ldr	r3, [pc, #192]	; (80024b4 <motor+0x2b4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a30      	ldr	r2, [pc, #192]	; (80024b8 <motor+0x2b8>)
 80023f8:	fba2 2303 	umull	r2, r3, r2, r3
 80023fc:	08d9      	lsrs	r1, r3, #3
 80023fe:	4b2e      	ldr	r3, [pc, #184]	; (80024b8 <motor+0x2b8>)
 8002400:	fba3 2301 	umull	r2, r3, r3, r1
 8002404:	08da      	lsrs	r2, r3, #3
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	1aca      	subs	r2, r1, r3
 8002410:	b2d3      	uxtb	r3, r2
 8002412:	4403      	add	r3, r0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	723b      	strb	r3, [r7, #8]
				reply2[1] += ir2Dist % 10;
 8002418:	7a78      	ldrb	r0, [r7, #9]
 800241a:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <motor+0x2b4>)
 800241c:	6819      	ldr	r1, [r3, #0]
 800241e:	4b26      	ldr	r3, [pc, #152]	; (80024b8 <motor+0x2b8>)
 8002420:	fba3 2301 	umull	r2, r3, r3, r1
 8002424:	08da      	lsrs	r2, r3, #3
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	1aca      	subs	r2, r1, r3
 8002430:	b2d3      	uxtb	r3, r2
 8002432:	4403      	add	r3, r0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	727b      	strb	r3, [r7, #9]
				HAL_UART_Transmit_IT(&huart3, (uint8_t *)reply2, strlen(reply2));
 8002438:	f107 0308 	add.w	r3, r7, #8
 800243c:	4618      	mov	r0, r3
 800243e:	f7fd fec7 	bl	80001d0 <strlen>
 8002442:	4603      	mov	r3, r0
 8002444:	b29a      	uxth	r2, r3
 8002446:	f107 0308 	add.w	r3, r7, #8
 800244a:	4619      	mov	r1, r3
 800244c:	4812      	ldr	r0, [pc, #72]	; (8002498 <motor+0x298>)
 800244e:	f003 fcac 	bl	8005daa <HAL_UART_Transmit_IT>
				osDelay(50);
 8002452:	2032      	movs	r0, #50	; 0x32
 8002454:	f004 fce6 	bl	8006e24 <osDelay>
				*aRxBuffer = 'R';
 8002458:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <motor+0x290>)
 800245a:	2252      	movs	r2, #82	; 0x52
 800245c:	701a      	strb	r2, [r3, #0]
				break;
 800245e:	e008      	b.n	8002472 <motor+0x272>
			case 'R':
				waitCmd();
 8002460:	f7fe fee8 	bl	8001234 <waitCmd>
				break;
 8002464:	e005      	b.n	8002472 <motor+0x272>
			default:
//				*aRxBuffer = 'R';
				HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 1);
 8002466:	2201      	movs	r2, #1
 8002468:	4909      	ldr	r1, [pc, #36]	; (8002490 <motor+0x290>)
 800246a:	480b      	ldr	r0, [pc, #44]	; (8002498 <motor+0x298>)
 800246c:	f003 fce2 	bl	8005e34 <HAL_UART_Receive_IT>
				break;
 8002470:	bf00      	nop
			}
			osDelay(100);
 8002472:	2064      	movs	r0, #100	; 0x64
 8002474:	f004 fcd6 	bl	8006e24 <osDelay>
			switch (*aRxBuffer)
 8002478:	e6df      	b.n	800223a <motor+0x3a>
 800247a:	bf00      	nop
 800247c:	f3af 8000 	nop.w
 8002480:	00000000 	.word	0x00000000
 8002484:	40568000 	.word	0x40568000
 8002488:	200049e0 	.word	0x200049e0
 800248c:	20004bb0 	.word	0x20004bb0
 8002490:	20004bfc 	.word	0x20004bfc
 8002494:	0800b410 	.word	0x0800b410
 8002498:	20004a74 	.word	0x20004a74
 800249c:	0800b408 	.word	0x0800b408
 80024a0:	0800b418 	.word	0x0800b418
 80024a4:	200000b8 	.word	0x200000b8
 80024a8:	51eb851f 	.word	0x51eb851f
 80024ac:	66666667 	.word	0x66666667
 80024b0:	000a3030 	.word	0x000a3030
 80024b4:	200000bc 	.word	0x200000bc
 80024b8:	cccccccd 	.word	0xcccccccd

080024bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024c0:	b672      	cpsid	i
}
 80024c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024c4:	e7fe      	b.n	80024c4 <Error_Handler+0x8>
	...

080024c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]
 80024d2:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_MspInit+0x54>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	4a11      	ldr	r2, [pc, #68]	; (800251c <HAL_MspInit+0x54>)
 80024d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024dc:	6453      	str	r3, [r2, #68]	; 0x44
 80024de:	4b0f      	ldr	r3, [pc, #60]	; (800251c <HAL_MspInit+0x54>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e6:	607b      	str	r3, [r7, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	603b      	str	r3, [r7, #0]
 80024ee:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_MspInit+0x54>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	4a0a      	ldr	r2, [pc, #40]	; (800251c <HAL_MspInit+0x54>)
 80024f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f8:	6413      	str	r3, [r2, #64]	; 0x40
 80024fa:	4b08      	ldr	r3, [pc, #32]	; (800251c <HAL_MspInit+0x54>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002506:	2200      	movs	r2, #0
 8002508:	210f      	movs	r1, #15
 800250a:	f06f 0001 	mvn.w	r0, #1
 800250e:	f000 ffb6 	bl	800347e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800

08002520 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	; 0x30
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	f107 031c 	add.w	r3, r7, #28
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a2e      	ldr	r2, [pc, #184]	; (80025f8 <HAL_ADC_MspInit+0xd8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d128      	bne.n	8002594 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
 8002546:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <HAL_ADC_MspInit+0xdc>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	4a2c      	ldr	r2, [pc, #176]	; (80025fc <HAL_ADC_MspInit+0xdc>)
 800254c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002550:	6453      	str	r3, [r2, #68]	; 0x44
 8002552:	4b2a      	ldr	r3, [pc, #168]	; (80025fc <HAL_ADC_MspInit+0xdc>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	4b26      	ldr	r3, [pc, #152]	; (80025fc <HAL_ADC_MspInit+0xdc>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a25      	ldr	r2, [pc, #148]	; (80025fc <HAL_ADC_MspInit+0xdc>)
 8002568:	f043 0304 	orr.w	r3, r3, #4
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b23      	ldr	r3, [pc, #140]	; (80025fc <HAL_ADC_MspInit+0xdc>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800257a:	2302      	movs	r3, #2
 800257c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800257e:	2303      	movs	r3, #3
 8002580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002586:	f107 031c 	add.w	r3, r7, #28
 800258a:	4619      	mov	r1, r3
 800258c:	481c      	ldr	r0, [pc, #112]	; (8002600 <HAL_ADC_MspInit+0xe0>)
 800258e:	f001 f83f 	bl	8003610 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002592:	e02c      	b.n	80025ee <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1a      	ldr	r2, [pc, #104]	; (8002604 <HAL_ADC_MspInit+0xe4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d127      	bne.n	80025ee <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	4b16      	ldr	r3, [pc, #88]	; (80025fc <HAL_ADC_MspInit+0xdc>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	4a15      	ldr	r2, [pc, #84]	; (80025fc <HAL_ADC_MspInit+0xdc>)
 80025a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ac:	6453      	str	r3, [r2, #68]	; 0x44
 80025ae:	4b13      	ldr	r3, [pc, #76]	; (80025fc <HAL_ADC_MspInit+0xdc>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <HAL_ADC_MspInit+0xdc>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4a0e      	ldr	r2, [pc, #56]	; (80025fc <HAL_ADC_MspInit+0xdc>)
 80025c4:	f043 0304 	orr.w	r3, r3, #4
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <HAL_ADC_MspInit+0xdc>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025d6:	2304      	movs	r3, #4
 80025d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025da:	2303      	movs	r3, #3
 80025dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e2:	f107 031c 	add.w	r3, r7, #28
 80025e6:	4619      	mov	r1, r3
 80025e8:	4805      	ldr	r0, [pc, #20]	; (8002600 <HAL_ADC_MspInit+0xe0>)
 80025ea:	f001 f811 	bl	8003610 <HAL_GPIO_Init>
}
 80025ee:	bf00      	nop
 80025f0:	3730      	adds	r7, #48	; 0x30
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40012000 	.word	0x40012000
 80025fc:	40023800 	.word	0x40023800
 8002600:	40020800 	.word	0x40020800
 8002604:	40012100 	.word	0x40012100

08002608 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <HAL_TIM_Base_MspInit+0x3c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d10d      	bne.n	8002636 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <HAL_TIM_Base_MspInit+0x40>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	4a09      	ldr	r2, [pc, #36]	; (8002648 <HAL_TIM_Base_MspInit+0x40>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	6453      	str	r3, [r2, #68]	; 0x44
 800262a:	4b07      	ldr	r3, [pc, #28]	; (8002648 <HAL_TIM_Base_MspInit+0x40>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40010000 	.word	0x40010000
 8002648:	40023800 	.word	0x40023800

0800264c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08c      	sub	sp, #48	; 0x30
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 031c 	add.w	r3, r7, #28
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266c:	d14b      	bne.n	8002706 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	4b3f      	ldr	r3, [pc, #252]	; (8002770 <HAL_TIM_Encoder_MspInit+0x124>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a3e      	ldr	r2, [pc, #248]	; (8002770 <HAL_TIM_Encoder_MspInit+0x124>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
 800267e:	4b3c      	ldr	r3, [pc, #240]	; (8002770 <HAL_TIM_Encoder_MspInit+0x124>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	61bb      	str	r3, [r7, #24]
 8002688:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	4b38      	ldr	r3, [pc, #224]	; (8002770 <HAL_TIM_Encoder_MspInit+0x124>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4a37      	ldr	r2, [pc, #220]	; (8002770 <HAL_TIM_Encoder_MspInit+0x124>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6313      	str	r3, [r2, #48]	; 0x30
 800269a:	4b35      	ldr	r3, [pc, #212]	; (8002770 <HAL_TIM_Encoder_MspInit+0x124>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	4b31      	ldr	r3, [pc, #196]	; (8002770 <HAL_TIM_Encoder_MspInit+0x124>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	4a30      	ldr	r2, [pc, #192]	; (8002770 <HAL_TIM_Encoder_MspInit+0x124>)
 80026b0:	f043 0302 	orr.w	r3, r3, #2
 80026b4:	6313      	str	r3, [r2, #48]	; 0x30
 80026b6:	4b2e      	ldr	r3, [pc, #184]	; (8002770 <HAL_TIM_Encoder_MspInit+0x124>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c8:	2302      	movs	r3, #2
 80026ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d0:	2300      	movs	r3, #0
 80026d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026d4:	2301      	movs	r3, #1
 80026d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d8:	f107 031c 	add.w	r3, r7, #28
 80026dc:	4619      	mov	r1, r3
 80026de:	4825      	ldr	r0, [pc, #148]	; (8002774 <HAL_TIM_Encoder_MspInit+0x128>)
 80026e0:	f000 ff96 	bl	8003610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026e4:	2308      	movs	r3, #8
 80026e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e8:	2302      	movs	r3, #2
 80026ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f0:	2300      	movs	r3, #0
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026f4:	2301      	movs	r3, #1
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f8:	f107 031c 	add.w	r3, r7, #28
 80026fc:	4619      	mov	r1, r3
 80026fe:	481e      	ldr	r0, [pc, #120]	; (8002778 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002700:	f000 ff86 	bl	8003610 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002704:	e030      	b.n	8002768 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a1c      	ldr	r2, [pc, #112]	; (800277c <HAL_TIM_Encoder_MspInit+0x130>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d12b      	bne.n	8002768 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	4b16      	ldr	r3, [pc, #88]	; (8002770 <HAL_TIM_Encoder_MspInit+0x124>)
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	4a15      	ldr	r2, [pc, #84]	; (8002770 <HAL_TIM_Encoder_MspInit+0x124>)
 800271a:	f043 0302 	orr.w	r3, r3, #2
 800271e:	6413      	str	r3, [r2, #64]	; 0x40
 8002720:	4b13      	ldr	r3, [pc, #76]	; (8002770 <HAL_TIM_Encoder_MspInit+0x124>)
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800272c:	2300      	movs	r3, #0
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <HAL_TIM_Encoder_MspInit+0x124>)
 8002732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002734:	4a0e      	ldr	r2, [pc, #56]	; (8002770 <HAL_TIM_Encoder_MspInit+0x124>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	6313      	str	r3, [r2, #48]	; 0x30
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <HAL_TIM_Encoder_MspInit+0x124>)
 800273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002748:	23c0      	movs	r3, #192	; 0xc0
 800274a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274c:	2302      	movs	r3, #2
 800274e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002754:	2300      	movs	r3, #0
 8002756:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002758:	2302      	movs	r3, #2
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275c:	f107 031c 	add.w	r3, r7, #28
 8002760:	4619      	mov	r1, r3
 8002762:	4804      	ldr	r0, [pc, #16]	; (8002774 <HAL_TIM_Encoder_MspInit+0x128>)
 8002764:	f000 ff54 	bl	8003610 <HAL_GPIO_Init>
}
 8002768:	bf00      	nop
 800276a:	3730      	adds	r7, #48	; 0x30
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40023800 	.word	0x40023800
 8002774:	40020000 	.word	0x40020000
 8002778:	40020400 	.word	0x40020400
 800277c:	40000400 	.word	0x40000400

08002780 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	; 0x28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a1d      	ldr	r2, [pc, #116]	; (8002814 <HAL_TIM_IC_MspInit+0x94>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d134      	bne.n	800280c <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	4b1c      	ldr	r3, [pc, #112]	; (8002818 <HAL_TIM_IC_MspInit+0x98>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	4a1b      	ldr	r2, [pc, #108]	; (8002818 <HAL_TIM_IC_MspInit+0x98>)
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	6413      	str	r3, [r2, #64]	; 0x40
 80027b2:	4b19      	ldr	r3, [pc, #100]	; (8002818 <HAL_TIM_IC_MspInit+0x98>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	4b15      	ldr	r3, [pc, #84]	; (8002818 <HAL_TIM_IC_MspInit+0x98>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	4a14      	ldr	r2, [pc, #80]	; (8002818 <HAL_TIM_IC_MspInit+0x98>)
 80027c8:	f043 0308 	orr.w	r3, r3, #8
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
 80027ce:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_TIM_IC_MspInit+0x98>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80027da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e0:	2302      	movs	r3, #2
 80027e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e8:	2300      	movs	r3, #0
 80027ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027ec:	2302      	movs	r3, #2
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027f0:	f107 0314 	add.w	r3, r7, #20
 80027f4:	4619      	mov	r1, r3
 80027f6:	4809      	ldr	r0, [pc, #36]	; (800281c <HAL_TIM_IC_MspInit+0x9c>)
 80027f8:	f000 ff0a 	bl	8003610 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80027fc:	2200      	movs	r2, #0
 80027fe:	2105      	movs	r1, #5
 8002800:	201e      	movs	r0, #30
 8002802:	f000 fe3c 	bl	800347e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002806:	201e      	movs	r0, #30
 8002808:	f000 fe55 	bl	80034b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800280c:	bf00      	nop
 800280e:	3728      	adds	r7, #40	; 0x28
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40000800 	.word	0x40000800
 8002818:	40023800 	.word	0x40023800
 800281c:	40020c00 	.word	0x40020c00

08002820 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	; 0x28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	f107 0314 	add.w	r3, r7, #20
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM8)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a19      	ldr	r2, [pc, #100]	; (80028a4 <HAL_TIM_PWM_MspInit+0x84>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d12b      	bne.n	800289a <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <HAL_TIM_PWM_MspInit+0x88>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	4a17      	ldr	r2, [pc, #92]	; (80028a8 <HAL_TIM_PWM_MspInit+0x88>)
 800284c:	f043 0302 	orr.w	r3, r3, #2
 8002850:	6453      	str	r3, [r2, #68]	; 0x44
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <HAL_TIM_PWM_MspInit+0x88>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <HAL_TIM_PWM_MspInit+0x88>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	4a10      	ldr	r2, [pc, #64]	; (80028a8 <HAL_TIM_PWM_MspInit+0x88>)
 8002868:	f043 0304 	orr.w	r3, r3, #4
 800286c:	6313      	str	r3, [r2, #48]	; 0x30
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <HAL_TIM_PWM_MspInit+0x88>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 800287a:	23c0      	movs	r3, #192	; 0xc0
 800287c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287e:	2302      	movs	r3, #2
 8002880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002886:	2300      	movs	r3, #0
 8002888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800288a:	2303      	movs	r3, #3
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	4619      	mov	r1, r3
 8002894:	4805      	ldr	r0, [pc, #20]	; (80028ac <HAL_TIM_PWM_MspInit+0x8c>)
 8002896:	f000 febb 	bl	8003610 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800289a:	bf00      	nop
 800289c:	3728      	adds	r7, #40	; 0x28
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40010400 	.word	0x40010400
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40020800 	.word	0x40020800

080028b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 030c 	add.w	r3, r7, #12
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a12      	ldr	r2, [pc, #72]	; (8002918 <HAL_TIM_MspPostInit+0x68>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d11e      	bne.n	8002910 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	4b11      	ldr	r3, [pc, #68]	; (800291c <HAL_TIM_MspPostInit+0x6c>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	4a10      	ldr	r2, [pc, #64]	; (800291c <HAL_TIM_MspPostInit+0x6c>)
 80028dc:	f043 0310 	orr.w	r3, r3, #16
 80028e0:	6313      	str	r3, [r2, #48]	; 0x30
 80028e2:	4b0e      	ldr	r3, [pc, #56]	; (800291c <HAL_TIM_MspPostInit+0x6c>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80028ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002900:	2301      	movs	r3, #1
 8002902:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002904:	f107 030c 	add.w	r3, r7, #12
 8002908:	4619      	mov	r1, r3
 800290a:	4805      	ldr	r0, [pc, #20]	; (8002920 <HAL_TIM_MspPostInit+0x70>)
 800290c:	f000 fe80 	bl	8003610 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002910:	bf00      	nop
 8002912:	3720      	adds	r7, #32
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40010000 	.word	0x40010000
 800291c:	40023800 	.word	0x40023800
 8002920:	40021000 	.word	0x40021000

08002924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	; 0x28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1d      	ldr	r2, [pc, #116]	; (80029b8 <HAL_UART_MspInit+0x94>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d134      	bne.n	80029b0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	4b1c      	ldr	r3, [pc, #112]	; (80029bc <HAL_UART_MspInit+0x98>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	4a1b      	ldr	r2, [pc, #108]	; (80029bc <HAL_UART_MspInit+0x98>)
 8002950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002954:	6413      	str	r3, [r2, #64]	; 0x40
 8002956:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_UART_MspInit+0x98>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <HAL_UART_MspInit+0x98>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	4a14      	ldr	r2, [pc, #80]	; (80029bc <HAL_UART_MspInit+0x98>)
 800296c:	f043 0304 	orr.w	r3, r3, #4
 8002970:	6313      	str	r3, [r2, #48]	; 0x30
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_UART_MspInit+0x98>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800297e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298c:	2303      	movs	r3, #3
 800298e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002990:	2307      	movs	r3, #7
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002994:	f107 0314 	add.w	r3, r7, #20
 8002998:	4619      	mov	r1, r3
 800299a:	4809      	ldr	r0, [pc, #36]	; (80029c0 <HAL_UART_MspInit+0x9c>)
 800299c:	f000 fe38 	bl	8003610 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80029a0:	2200      	movs	r2, #0
 80029a2:	2105      	movs	r1, #5
 80029a4:	2027      	movs	r0, #39	; 0x27
 80029a6:	f000 fd6a 	bl	800347e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029aa:	2027      	movs	r0, #39	; 0x27
 80029ac:	f000 fd83 	bl	80034b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80029b0:	bf00      	nop
 80029b2:	3728      	adds	r7, #40	; 0x28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40004800 	.word	0x40004800
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40020800 	.word	0x40020800

080029c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029c8:	e7fe      	b.n	80029c8 <NMI_Handler+0x4>

080029ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ce:	e7fe      	b.n	80029ce <HardFault_Handler+0x4>

080029d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029d4:	e7fe      	b.n	80029d4 <MemManage_Handler+0x4>

080029d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029d6:	b480      	push	{r7}
 80029d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029da:	e7fe      	b.n	80029da <BusFault_Handler+0x4>

080029dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029e0:	e7fe      	b.n	80029e0 <UsageFault_Handler+0x4>

080029e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029e2:	b480      	push	{r7}
 80029e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029f4:	f000 f8e2 	bl	8002bbc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80029f8:	f005 fe22 	bl	8008640 <xTaskGetSchedulerState>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d001      	beq.n	8002a06 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002a02:	f006 fc09 	bl	8009218 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a10:	4802      	ldr	r0, [pc, #8]	; (8002a1c <TIM4_IRQHandler+0x10>)
 8002a12:	f002 f835 	bl	8004a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20004a28 	.word	0x20004a28

08002a20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002a24:	4802      	ldr	r0, [pc, #8]	; (8002a30 <USART3_IRQHandler+0x10>)
 8002a26:	f003 fa35 	bl	8005e94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20004a74 	.word	0x20004a74

08002a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a3c:	4a14      	ldr	r2, [pc, #80]	; (8002a90 <_sbrk+0x5c>)
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <_sbrk+0x60>)
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a48:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <_sbrk+0x64>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d102      	bne.n	8002a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <_sbrk+0x64>)
 8002a52:	4a12      	ldr	r2, [pc, #72]	; (8002a9c <_sbrk+0x68>)
 8002a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <_sbrk+0x64>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d207      	bcs.n	8002a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a64:	f007 f884 	bl	8009b70 <__errno>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	220c      	movs	r2, #12
 8002a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a72:	e009      	b.n	8002a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <_sbrk+0x64>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a7a:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <_sbrk+0x64>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	4a05      	ldr	r2, [pc, #20]	; (8002a98 <_sbrk+0x64>)
 8002a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a86:	68fb      	ldr	r3, [r7, #12]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20020000 	.word	0x20020000
 8002a94:	00000400 	.word	0x00000400
 8002a98:	200000c0 	.word	0x200000c0
 8002a9c:	200050b0 	.word	0x200050b0

08002aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <SystemInit+0x20>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aaa:	4a05      	ldr	r2, [pc, #20]	; (8002ac0 <SystemInit+0x20>)
 8002aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <Reset_Handler>:
 8002ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002afc <LoopFillZerobss+0x12>
 8002ac8:	480d      	ldr	r0, [pc, #52]	; (8002b00 <LoopFillZerobss+0x16>)
 8002aca:	490e      	ldr	r1, [pc, #56]	; (8002b04 <LoopFillZerobss+0x1a>)
 8002acc:	4a0e      	ldr	r2, [pc, #56]	; (8002b08 <LoopFillZerobss+0x1e>)
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e002      	b.n	8002ad8 <LoopCopyDataInit>

08002ad2 <CopyDataInit>:
 8002ad2:	58d4      	ldr	r4, [r2, r3]
 8002ad4:	50c4      	str	r4, [r0, r3]
 8002ad6:	3304      	adds	r3, #4

08002ad8 <LoopCopyDataInit>:
 8002ad8:	18c4      	adds	r4, r0, r3
 8002ada:	428c      	cmp	r4, r1
 8002adc:	d3f9      	bcc.n	8002ad2 <CopyDataInit>
 8002ade:	4a0b      	ldr	r2, [pc, #44]	; (8002b0c <LoopFillZerobss+0x22>)
 8002ae0:	4c0b      	ldr	r4, [pc, #44]	; (8002b10 <LoopFillZerobss+0x26>)
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e001      	b.n	8002aea <LoopFillZerobss>

08002ae6 <FillZerobss>:
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	3204      	adds	r2, #4

08002aea <LoopFillZerobss>:
 8002aea:	42a2      	cmp	r2, r4
 8002aec:	d3fb      	bcc.n	8002ae6 <FillZerobss>
 8002aee:	f7ff ffd7 	bl	8002aa0 <SystemInit>
 8002af2:	f007 f843 	bl	8009b7c <__libc_init_array>
 8002af6:	f7fe feed 	bl	80018d4 <main>
 8002afa:	4770      	bx	lr
 8002afc:	20020000 	.word	0x20020000
 8002b00:	20000000 	.word	0x20000000
 8002b04:	20000078 	.word	0x20000078
 8002b08:	0800bf80 	.word	0x0800bf80
 8002b0c:	20000078 	.word	0x20000078
 8002b10:	200050b0 	.word	0x200050b0

08002b14 <ADC_IRQHandler>:
 8002b14:	e7fe      	b.n	8002b14 <ADC_IRQHandler>
	...

08002b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b1c:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <HAL_Init+0x40>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a0d      	ldr	r2, [pc, #52]	; (8002b58 <HAL_Init+0x40>)
 8002b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <HAL_Init+0x40>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <HAL_Init+0x40>)
 8002b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b34:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <HAL_Init+0x40>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a07      	ldr	r2, [pc, #28]	; (8002b58 <HAL_Init+0x40>)
 8002b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b40:	2003      	movs	r0, #3
 8002b42:	f000 fc91 	bl	8003468 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b46:	200f      	movs	r0, #15
 8002b48:	f000 f808 	bl	8002b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b4c:	f7ff fcbc 	bl	80024c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40023c00 	.word	0x40023c00

08002b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b64:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <HAL_InitTick+0x54>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_InitTick+0x58>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fca9 	bl	80034d2 <HAL_SYSTICK_Config>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e00e      	b.n	8002ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b0f      	cmp	r3, #15
 8002b8e:	d80a      	bhi.n	8002ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b90:	2200      	movs	r2, #0
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	f04f 30ff 	mov.w	r0, #4294967295
 8002b98:	f000 fc71 	bl	800347e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b9c:	4a06      	ldr	r2, [pc, #24]	; (8002bb8 <HAL_InitTick+0x5c>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e000      	b.n	8002ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000000 	.word	0x20000000
 8002bb4:	20000008 	.word	0x20000008
 8002bb8:	20000004 	.word	0x20000004

08002bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_IncTick+0x20>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_IncTick+0x24>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4413      	add	r3, r2
 8002bcc:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <HAL_IncTick+0x24>)
 8002bce:	6013      	str	r3, [r2, #0]
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	20000008 	.word	0x20000008
 8002be0:	20004c5c 	.word	0x20004c5c

08002be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return uwTick;
 8002be8:	4b03      	ldr	r3, [pc, #12]	; (8002bf8 <HAL_GetTick+0x14>)
 8002bea:	681b      	ldr	r3, [r3, #0]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20004c5c 	.word	0x20004c5c

08002bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c04:	f7ff ffee 	bl	8002be4 <HAL_GetTick>
 8002c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c14:	d005      	beq.n	8002c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c16:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <HAL_Delay+0x44>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4413      	add	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c22:	bf00      	nop
 8002c24:	f7ff ffde 	bl	8002be4 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d8f7      	bhi.n	8002c24 <HAL_Delay+0x28>
  {
  }
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000008 	.word	0x20000008

08002c44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e033      	b.n	8002cc2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d109      	bne.n	8002c76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff fc5c 	bl	8002520 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d118      	bne.n	8002cb4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c8a:	f023 0302 	bic.w	r3, r3, #2
 8002c8e:	f043 0202 	orr.w	r2, r3, #2
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fa1a 	bl	80030d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f023 0303 	bic.w	r3, r3, #3
 8002caa:	f043 0201 	orr.w	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40
 8002cb2:	e001      	b.n	8002cb8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <HAL_ADC_Start+0x1a>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e0b2      	b.n	8002e4c <HAL_ADC_Start+0x180>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d018      	beq.n	8002d2e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0201 	orr.w	r2, r2, #1
 8002d0a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d0c:	4b52      	ldr	r3, [pc, #328]	; (8002e58 <HAL_ADC_Start+0x18c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a52      	ldr	r2, [pc, #328]	; (8002e5c <HAL_ADC_Start+0x190>)
 8002d12:	fba2 2303 	umull	r2, r3, r2, r3
 8002d16:	0c9a      	lsrs	r2, r3, #18
 8002d18:	4613      	mov	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002d20:	e002      	b.n	8002d28 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f9      	bne.n	8002d22 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d17a      	bne.n	8002e32 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d007      	beq.n	8002d6e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d7a:	d106      	bne.n	8002d8a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d80:	f023 0206 	bic.w	r2, r3, #6
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	645a      	str	r2, [r3, #68]	; 0x44
 8002d88:	e002      	b.n	8002d90 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d98:	4b31      	ldr	r3, [pc, #196]	; (8002e60 <HAL_ADC_Start+0x194>)
 8002d9a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002da4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f003 031f 	and.w	r3, r3, #31
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d12a      	bne.n	8002e08 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a2b      	ldr	r2, [pc, #172]	; (8002e64 <HAL_ADC_Start+0x198>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d015      	beq.n	8002de8 <HAL_ADC_Start+0x11c>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a29      	ldr	r2, [pc, #164]	; (8002e68 <HAL_ADC_Start+0x19c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d105      	bne.n	8002dd2 <HAL_ADC_Start+0x106>
 8002dc6:	4b26      	ldr	r3, [pc, #152]	; (8002e60 <HAL_ADC_Start+0x194>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 031f 	and.w	r3, r3, #31
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a25      	ldr	r2, [pc, #148]	; (8002e6c <HAL_ADC_Start+0x1a0>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d136      	bne.n	8002e4a <HAL_ADC_Start+0x17e>
 8002ddc:	4b20      	ldr	r3, [pc, #128]	; (8002e60 <HAL_ADC_Start+0x194>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d130      	bne.n	8002e4a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d129      	bne.n	8002e4a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e04:	609a      	str	r2, [r3, #8]
 8002e06:	e020      	b.n	8002e4a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a15      	ldr	r2, [pc, #84]	; (8002e64 <HAL_ADC_Start+0x198>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d11b      	bne.n	8002e4a <HAL_ADC_Start+0x17e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d114      	bne.n	8002e4a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	e00b      	b.n	8002e4a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f043 0210 	orr.w	r2, r3, #16
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e42:	f043 0201 	orr.w	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	20000000 	.word	0x20000000
 8002e5c:	431bde83 	.word	0x431bde83
 8002e60:	40012300 	.word	0x40012300
 8002e64:	40012000 	.word	0x40012000
 8002e68:	40012100 	.word	0x40012100
 8002e6c:	40012200 	.word	0x40012200

08002e70 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x1c>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e105      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x228>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b09      	cmp	r3, #9
 8002eb6:	d925      	bls.n	8002f04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68d9      	ldr	r1, [r3, #12]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4413      	add	r3, r2
 8002ecc:	3b1e      	subs	r3, #30
 8002ece:	2207      	movs	r2, #7
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43da      	mvns	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	400a      	ands	r2, r1
 8002edc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68d9      	ldr	r1, [r3, #12]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	4618      	mov	r0, r3
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	4403      	add	r3, r0
 8002ef6:	3b1e      	subs	r3, #30
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	e022      	b.n	8002f4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6919      	ldr	r1, [r3, #16]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	2207      	movs	r2, #7
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43da      	mvns	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	400a      	ands	r2, r1
 8002f26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6919      	ldr	r1, [r3, #16]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	4618      	mov	r0, r3
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	4403      	add	r3, r0
 8002f40:	409a      	lsls	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b06      	cmp	r3, #6
 8002f50:	d824      	bhi.n	8002f9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	3b05      	subs	r3, #5
 8002f64:	221f      	movs	r2, #31
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43da      	mvns	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	400a      	ands	r2, r1
 8002f72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	4618      	mov	r0, r3
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3b05      	subs	r3, #5
 8002f8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	635a      	str	r2, [r3, #52]	; 0x34
 8002f9a:	e04c      	b.n	8003036 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b0c      	cmp	r3, #12
 8002fa2:	d824      	bhi.n	8002fee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3b23      	subs	r3, #35	; 0x23
 8002fb6:	221f      	movs	r2, #31
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43da      	mvns	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	400a      	ands	r2, r1
 8002fc4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	3b23      	subs	r3, #35	; 0x23
 8002fe0:	fa00 f203 	lsl.w	r2, r0, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
 8002fec:	e023      	b.n	8003036 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3b41      	subs	r3, #65	; 0x41
 8003000:	221f      	movs	r2, #31
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43da      	mvns	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	400a      	ands	r2, r1
 800300e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	b29b      	uxth	r3, r3
 800301c:	4618      	mov	r0, r3
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	3b41      	subs	r3, #65	; 0x41
 800302a:	fa00 f203 	lsl.w	r2, r0, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003036:	4b22      	ldr	r3, [pc, #136]	; (80030c0 <HAL_ADC_ConfigChannel+0x234>)
 8003038:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a21      	ldr	r2, [pc, #132]	; (80030c4 <HAL_ADC_ConfigChannel+0x238>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d109      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x1cc>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b12      	cmp	r3, #18
 800304a:	d105      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a19      	ldr	r2, [pc, #100]	; (80030c4 <HAL_ADC_ConfigChannel+0x238>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d123      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x21e>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b10      	cmp	r3, #16
 8003068:	d003      	beq.n	8003072 <HAL_ADC_ConfigChannel+0x1e6>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b11      	cmp	r3, #17
 8003070:	d11b      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b10      	cmp	r3, #16
 8003084:	d111      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003086:	4b10      	ldr	r3, [pc, #64]	; (80030c8 <HAL_ADC_ConfigChannel+0x23c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a10      	ldr	r2, [pc, #64]	; (80030cc <HAL_ADC_ConfigChannel+0x240>)
 800308c:	fba2 2303 	umull	r2, r3, r2, r3
 8003090:	0c9a      	lsrs	r2, r3, #18
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800309c:	e002      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	3b01      	subs	r3, #1
 80030a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f9      	bne.n	800309e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	40012300 	.word	0x40012300
 80030c4:	40012000 	.word	0x40012000
 80030c8:	20000000 	.word	0x20000000
 80030cc:	431bde83 	.word	0x431bde83

080030d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030d8:	4b79      	ldr	r3, [pc, #484]	; (80032c0 <ADC_Init+0x1f0>)
 80030da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	431a      	orrs	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003104:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	021a      	lsls	r2, r3, #8
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003128:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800314a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6899      	ldr	r1, [r3, #8]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	4a58      	ldr	r2, [pc, #352]	; (80032c4 <ADC_Init+0x1f4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d022      	beq.n	80031ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003176:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6899      	ldr	r1, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003198:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6899      	ldr	r1, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	e00f      	b.n	80031ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0202 	bic.w	r2, r2, #2
 80031dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6899      	ldr	r1, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	7e1b      	ldrb	r3, [r3, #24]
 80031e8:	005a      	lsls	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d01b      	beq.n	8003234 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800320a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800321a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6859      	ldr	r1, [r3, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	3b01      	subs	r3, #1
 8003228:	035a      	lsls	r2, r3, #13
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	e007      	b.n	8003244 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003242:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003252:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	3b01      	subs	r3, #1
 8003260:	051a      	lsls	r2, r3, #20
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003278:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6899      	ldr	r1, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003286:	025a      	lsls	r2, r3, #9
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800329e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6899      	ldr	r1, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	029a      	lsls	r2, r3, #10
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	609a      	str	r2, [r3, #8]
}
 80032b4:	bf00      	nop
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	40012300 	.word	0x40012300
 80032c4:	0f000001 	.word	0x0f000001

080032c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032d8:	4b0c      	ldr	r3, [pc, #48]	; (800330c <__NVIC_SetPriorityGrouping+0x44>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032e4:	4013      	ands	r3, r2
 80032e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032fa:	4a04      	ldr	r2, [pc, #16]	; (800330c <__NVIC_SetPriorityGrouping+0x44>)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	60d3      	str	r3, [r2, #12]
}
 8003300:	bf00      	nop
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	e000ed00 	.word	0xe000ed00

08003310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003314:	4b04      	ldr	r3, [pc, #16]	; (8003328 <__NVIC_GetPriorityGrouping+0x18>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	0a1b      	lsrs	r3, r3, #8
 800331a:	f003 0307 	and.w	r3, r3, #7
}
 800331e:	4618      	mov	r0, r3
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333a:	2b00      	cmp	r3, #0
 800333c:	db0b      	blt.n	8003356 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	f003 021f 	and.w	r2, r3, #31
 8003344:	4907      	ldr	r1, [pc, #28]	; (8003364 <__NVIC_EnableIRQ+0x38>)
 8003346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	2001      	movs	r0, #1
 800334e:	fa00 f202 	lsl.w	r2, r0, r2
 8003352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	e000e100 	.word	0xe000e100

08003368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	6039      	str	r1, [r7, #0]
 8003372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003378:	2b00      	cmp	r3, #0
 800337a:	db0a      	blt.n	8003392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	b2da      	uxtb	r2, r3
 8003380:	490c      	ldr	r1, [pc, #48]	; (80033b4 <__NVIC_SetPriority+0x4c>)
 8003382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003386:	0112      	lsls	r2, r2, #4
 8003388:	b2d2      	uxtb	r2, r2
 800338a:	440b      	add	r3, r1
 800338c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003390:	e00a      	b.n	80033a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	b2da      	uxtb	r2, r3
 8003396:	4908      	ldr	r1, [pc, #32]	; (80033b8 <__NVIC_SetPriority+0x50>)
 8003398:	79fb      	ldrb	r3, [r7, #7]
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	3b04      	subs	r3, #4
 80033a0:	0112      	lsls	r2, r2, #4
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	440b      	add	r3, r1
 80033a6:	761a      	strb	r2, [r3, #24]
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	e000e100 	.word	0xe000e100
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033bc:	b480      	push	{r7}
 80033be:	b089      	sub	sp, #36	; 0x24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f1c3 0307 	rsb	r3, r3, #7
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	bf28      	it	cs
 80033da:	2304      	movcs	r3, #4
 80033dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	3304      	adds	r3, #4
 80033e2:	2b06      	cmp	r3, #6
 80033e4:	d902      	bls.n	80033ec <NVIC_EncodePriority+0x30>
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	3b03      	subs	r3, #3
 80033ea:	e000      	b.n	80033ee <NVIC_EncodePriority+0x32>
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f0:	f04f 32ff 	mov.w	r2, #4294967295
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43da      	mvns	r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	401a      	ands	r2, r3
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003404:	f04f 31ff 	mov.w	r1, #4294967295
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	fa01 f303 	lsl.w	r3, r1, r3
 800340e:	43d9      	mvns	r1, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003414:	4313      	orrs	r3, r2
         );
}
 8003416:	4618      	mov	r0, r3
 8003418:	3724      	adds	r7, #36	; 0x24
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3b01      	subs	r3, #1
 8003430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003434:	d301      	bcc.n	800343a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003436:	2301      	movs	r3, #1
 8003438:	e00f      	b.n	800345a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800343a:	4a0a      	ldr	r2, [pc, #40]	; (8003464 <SysTick_Config+0x40>)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3b01      	subs	r3, #1
 8003440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003442:	210f      	movs	r1, #15
 8003444:	f04f 30ff 	mov.w	r0, #4294967295
 8003448:	f7ff ff8e 	bl	8003368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800344c:	4b05      	ldr	r3, [pc, #20]	; (8003464 <SysTick_Config+0x40>)
 800344e:	2200      	movs	r2, #0
 8003450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003452:	4b04      	ldr	r3, [pc, #16]	; (8003464 <SysTick_Config+0x40>)
 8003454:	2207      	movs	r2, #7
 8003456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	e000e010 	.word	0xe000e010

08003468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff ff29 	bl	80032c8 <__NVIC_SetPriorityGrouping>
}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800347e:	b580      	push	{r7, lr}
 8003480:	b086      	sub	sp, #24
 8003482:	af00      	add	r7, sp, #0
 8003484:	4603      	mov	r3, r0
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	607a      	str	r2, [r7, #4]
 800348a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003490:	f7ff ff3e 	bl	8003310 <__NVIC_GetPriorityGrouping>
 8003494:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	6978      	ldr	r0, [r7, #20]
 800349c:	f7ff ff8e 	bl	80033bc <NVIC_EncodePriority>
 80034a0:	4602      	mov	r2, r0
 80034a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034a6:	4611      	mov	r1, r2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff ff5d 	bl	8003368 <__NVIC_SetPriority>
}
 80034ae:	bf00      	nop
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	4603      	mov	r3, r0
 80034be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff ff31 	bl	800332c <__NVIC_EnableIRQ>
}
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff ffa2 	bl	8003424 <SysTick_Config>
 80034e0:	4603      	mov	r3, r0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b084      	sub	sp, #16
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034f8:	f7ff fb74 	bl	8002be4 <HAL_GetTick>
 80034fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d008      	beq.n	800351c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2280      	movs	r2, #128	; 0x80
 800350e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e052      	b.n	80035c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0216 	bic.w	r2, r2, #22
 800352a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800353a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	2b00      	cmp	r3, #0
 8003542:	d103      	bne.n	800354c <HAL_DMA_Abort+0x62>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003548:	2b00      	cmp	r3, #0
 800354a:	d007      	beq.n	800355c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0208 	bic.w	r2, r2, #8
 800355a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0201 	bic.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800356c:	e013      	b.n	8003596 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800356e:	f7ff fb39 	bl	8002be4 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b05      	cmp	r3, #5
 800357a:	d90c      	bls.n	8003596 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2203      	movs	r2, #3
 8003586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e015      	b.n	80035c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1e4      	bne.n	800356e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a8:	223f      	movs	r2, #63	; 0x3f
 80035aa:	409a      	lsls	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d004      	beq.n	80035e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2280      	movs	r2, #128	; 0x80
 80035e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e00c      	b.n	8003602 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2205      	movs	r2, #5
 80035ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0201 	bic.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
	...

08003610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003610:	b480      	push	{r7}
 8003612:	b089      	sub	sp, #36	; 0x24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800361e:	2300      	movs	r3, #0
 8003620:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003622:	2300      	movs	r3, #0
 8003624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003626:	2300      	movs	r3, #0
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	e16b      	b.n	8003904 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800362c:	2201      	movs	r2, #1
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4013      	ands	r3, r2
 800363e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	429a      	cmp	r2, r3
 8003646:	f040 815a 	bne.w	80038fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	2b01      	cmp	r3, #1
 8003654:	d005      	beq.n	8003662 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800365e:	2b02      	cmp	r3, #2
 8003660:	d130      	bne.n	80036c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	2203      	movs	r2, #3
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43db      	mvns	r3, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4013      	ands	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4313      	orrs	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003698:	2201      	movs	r2, #1
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	43db      	mvns	r3, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4013      	ands	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	091b      	lsrs	r3, r3, #4
 80036ae:	f003 0201 	and.w	r2, r3, #1
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d017      	beq.n	8003700 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	2203      	movs	r2, #3
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d123      	bne.n	8003754 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	08da      	lsrs	r2, r3, #3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3208      	adds	r2, #8
 8003714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003718:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	220f      	movs	r2, #15
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	43db      	mvns	r3, r3
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4013      	ands	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4313      	orrs	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	08da      	lsrs	r2, r3, #3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3208      	adds	r2, #8
 800374e:	69b9      	ldr	r1, [r7, #24]
 8003750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	2203      	movs	r2, #3
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 0203 	and.w	r2, r3, #3
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4313      	orrs	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 80b4 	beq.w	80038fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	4b60      	ldr	r3, [pc, #384]	; (800391c <HAL_GPIO_Init+0x30c>)
 800379c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379e:	4a5f      	ldr	r2, [pc, #380]	; (800391c <HAL_GPIO_Init+0x30c>)
 80037a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037a4:	6453      	str	r3, [r2, #68]	; 0x44
 80037a6:	4b5d      	ldr	r3, [pc, #372]	; (800391c <HAL_GPIO_Init+0x30c>)
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037b2:	4a5b      	ldr	r2, [pc, #364]	; (8003920 <HAL_GPIO_Init+0x310>)
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	089b      	lsrs	r3, r3, #2
 80037b8:	3302      	adds	r3, #2
 80037ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	220f      	movs	r2, #15
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	43db      	mvns	r3, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4013      	ands	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a52      	ldr	r2, [pc, #328]	; (8003924 <HAL_GPIO_Init+0x314>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d02b      	beq.n	8003836 <HAL_GPIO_Init+0x226>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a51      	ldr	r2, [pc, #324]	; (8003928 <HAL_GPIO_Init+0x318>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d025      	beq.n	8003832 <HAL_GPIO_Init+0x222>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a50      	ldr	r2, [pc, #320]	; (800392c <HAL_GPIO_Init+0x31c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d01f      	beq.n	800382e <HAL_GPIO_Init+0x21e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a4f      	ldr	r2, [pc, #316]	; (8003930 <HAL_GPIO_Init+0x320>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d019      	beq.n	800382a <HAL_GPIO_Init+0x21a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a4e      	ldr	r2, [pc, #312]	; (8003934 <HAL_GPIO_Init+0x324>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d013      	beq.n	8003826 <HAL_GPIO_Init+0x216>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a4d      	ldr	r2, [pc, #308]	; (8003938 <HAL_GPIO_Init+0x328>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d00d      	beq.n	8003822 <HAL_GPIO_Init+0x212>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a4c      	ldr	r2, [pc, #304]	; (800393c <HAL_GPIO_Init+0x32c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d007      	beq.n	800381e <HAL_GPIO_Init+0x20e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a4b      	ldr	r2, [pc, #300]	; (8003940 <HAL_GPIO_Init+0x330>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d101      	bne.n	800381a <HAL_GPIO_Init+0x20a>
 8003816:	2307      	movs	r3, #7
 8003818:	e00e      	b.n	8003838 <HAL_GPIO_Init+0x228>
 800381a:	2308      	movs	r3, #8
 800381c:	e00c      	b.n	8003838 <HAL_GPIO_Init+0x228>
 800381e:	2306      	movs	r3, #6
 8003820:	e00a      	b.n	8003838 <HAL_GPIO_Init+0x228>
 8003822:	2305      	movs	r3, #5
 8003824:	e008      	b.n	8003838 <HAL_GPIO_Init+0x228>
 8003826:	2304      	movs	r3, #4
 8003828:	e006      	b.n	8003838 <HAL_GPIO_Init+0x228>
 800382a:	2303      	movs	r3, #3
 800382c:	e004      	b.n	8003838 <HAL_GPIO_Init+0x228>
 800382e:	2302      	movs	r3, #2
 8003830:	e002      	b.n	8003838 <HAL_GPIO_Init+0x228>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <HAL_GPIO_Init+0x228>
 8003836:	2300      	movs	r3, #0
 8003838:	69fa      	ldr	r2, [r7, #28]
 800383a:	f002 0203 	and.w	r2, r2, #3
 800383e:	0092      	lsls	r2, r2, #2
 8003840:	4093      	lsls	r3, r2
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003848:	4935      	ldr	r1, [pc, #212]	; (8003920 <HAL_GPIO_Init+0x310>)
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	089b      	lsrs	r3, r3, #2
 800384e:	3302      	adds	r3, #2
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003856:	4b3b      	ldr	r3, [pc, #236]	; (8003944 <HAL_GPIO_Init+0x334>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	43db      	mvns	r3, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4013      	ands	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800387a:	4a32      	ldr	r2, [pc, #200]	; (8003944 <HAL_GPIO_Init+0x334>)
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003880:	4b30      	ldr	r3, [pc, #192]	; (8003944 <HAL_GPIO_Init+0x334>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	43db      	mvns	r3, r3
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4013      	ands	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038a4:	4a27      	ldr	r2, [pc, #156]	; (8003944 <HAL_GPIO_Init+0x334>)
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038aa:	4b26      	ldr	r3, [pc, #152]	; (8003944 <HAL_GPIO_Init+0x334>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	43db      	mvns	r3, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4013      	ands	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ce:	4a1d      	ldr	r2, [pc, #116]	; (8003944 <HAL_GPIO_Init+0x334>)
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038d4:	4b1b      	ldr	r3, [pc, #108]	; (8003944 <HAL_GPIO_Init+0x334>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038f8:	4a12      	ldr	r2, [pc, #72]	; (8003944 <HAL_GPIO_Init+0x334>)
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3301      	adds	r3, #1
 8003902:	61fb      	str	r3, [r7, #28]
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	2b0f      	cmp	r3, #15
 8003908:	f67f ae90 	bls.w	800362c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800390c:	bf00      	nop
 800390e:	bf00      	nop
 8003910:	3724      	adds	r7, #36	; 0x24
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800
 8003920:	40013800 	.word	0x40013800
 8003924:	40020000 	.word	0x40020000
 8003928:	40020400 	.word	0x40020400
 800392c:	40020800 	.word	0x40020800
 8003930:	40020c00 	.word	0x40020c00
 8003934:	40021000 	.word	0x40021000
 8003938:	40021400 	.word	0x40021400
 800393c:	40021800 	.word	0x40021800
 8003940:	40021c00 	.word	0x40021c00
 8003944:	40013c00 	.word	0x40013c00

08003948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	807b      	strh	r3, [r7, #2]
 8003954:	4613      	mov	r3, r2
 8003956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003958:	787b      	ldrb	r3, [r7, #1]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800395e:	887a      	ldrh	r2, [r7, #2]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003964:	e003      	b.n	800396e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003966:	887b      	ldrh	r3, [r7, #2]
 8003968:	041a      	lsls	r2, r3, #16
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	619a      	str	r2, [r3, #24]
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
	...

0800397c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003982:	4b06      	ldr	r3, [pc, #24]	; (800399c <HAL_PWR_EnableBkUpAccess+0x20>)
 8003984:	2201      	movs	r2, #1
 8003986:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <HAL_PWR_EnableBkUpAccess+0x24>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800398e:	687b      	ldr	r3, [r7, #4]
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	420e0020 	.word	0x420e0020
 80039a0:	40007000 	.word	0x40007000

080039a4 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80039aa:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <HAL_PWR_DisableBkUpAccess+0x20>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80039b0:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <HAL_PWR_DisableBkUpAccess+0x24>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80039b6:	687b      	ldr	r3, [r7, #4]
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	420e0020 	.word	0x420e0020
 80039c8:	40007000 	.word	0x40007000

080039cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e264      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d075      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ea:	4ba3      	ldr	r3, [pc, #652]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d00c      	beq.n	8003a10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039f6:	4ba0      	ldr	r3, [pc, #640]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d112      	bne.n	8003a28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a02:	4b9d      	ldr	r3, [pc, #628]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a0e:	d10b      	bne.n	8003a28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a10:	4b99      	ldr	r3, [pc, #612]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d05b      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x108>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d157      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e23f      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a30:	d106      	bne.n	8003a40 <HAL_RCC_OscConfig+0x74>
 8003a32:	4b91      	ldr	r3, [pc, #580]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a90      	ldr	r2, [pc, #576]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	e01d      	b.n	8003a7c <HAL_RCC_OscConfig+0xb0>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a48:	d10c      	bne.n	8003a64 <HAL_RCC_OscConfig+0x98>
 8003a4a:	4b8b      	ldr	r3, [pc, #556]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a8a      	ldr	r2, [pc, #552]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	4b88      	ldr	r3, [pc, #544]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a87      	ldr	r2, [pc, #540]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	e00b      	b.n	8003a7c <HAL_RCC_OscConfig+0xb0>
 8003a64:	4b84      	ldr	r3, [pc, #528]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a83      	ldr	r2, [pc, #524]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	4b81      	ldr	r3, [pc, #516]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a80      	ldr	r2, [pc, #512]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d013      	beq.n	8003aac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a84:	f7ff f8ae 	bl	8002be4 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a8c:	f7ff f8aa 	bl	8002be4 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b64      	cmp	r3, #100	; 0x64
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e204      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9e:	4b76      	ldr	r3, [pc, #472]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCC_OscConfig+0xc0>
 8003aaa:	e014      	b.n	8003ad6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aac:	f7ff f89a 	bl	8002be4 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab4:	f7ff f896 	bl	8002be4 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b64      	cmp	r3, #100	; 0x64
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e1f0      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac6:	4b6c      	ldr	r3, [pc, #432]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0xe8>
 8003ad2:	e000      	b.n	8003ad6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d063      	beq.n	8003baa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ae2:	4b65      	ldr	r3, [pc, #404]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00b      	beq.n	8003b06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aee:	4b62      	ldr	r3, [pc, #392]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d11c      	bne.n	8003b34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003afa:	4b5f      	ldr	r3, [pc, #380]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d116      	bne.n	8003b34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b06:	4b5c      	ldr	r3, [pc, #368]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <HAL_RCC_OscConfig+0x152>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d001      	beq.n	8003b1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e1c4      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1e:	4b56      	ldr	r3, [pc, #344]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	4952      	ldr	r1, [pc, #328]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b32:	e03a      	b.n	8003baa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d020      	beq.n	8003b7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b3c:	4b4f      	ldr	r3, [pc, #316]	; (8003c7c <HAL_RCC_OscConfig+0x2b0>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b42:	f7ff f84f 	bl	8002be4 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b4a:	f7ff f84b 	bl	8002be4 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e1a5      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5c:	4b46      	ldr	r3, [pc, #280]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b68:	4b43      	ldr	r3, [pc, #268]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	4940      	ldr	r1, [pc, #256]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	600b      	str	r3, [r1, #0]
 8003b7c:	e015      	b.n	8003baa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b7e:	4b3f      	ldr	r3, [pc, #252]	; (8003c7c <HAL_RCC_OscConfig+0x2b0>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7ff f82e 	bl	8002be4 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b8c:	f7ff f82a 	bl	8002be4 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e184      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b9e:	4b36      	ldr	r3, [pc, #216]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d030      	beq.n	8003c18 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d016      	beq.n	8003bec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bbe:	4b30      	ldr	r3, [pc, #192]	; (8003c80 <HAL_RCC_OscConfig+0x2b4>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc4:	f7ff f80e 	bl	8002be4 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bcc:	f7ff f80a 	bl	8002be4 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e164      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bde:	4b26      	ldr	r3, [pc, #152]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0x200>
 8003bea:	e015      	b.n	8003c18 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bec:	4b24      	ldr	r3, [pc, #144]	; (8003c80 <HAL_RCC_OscConfig+0x2b4>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf2:	f7fe fff7 	bl	8002be4 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bfa:	f7fe fff3 	bl	8002be4 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e14d      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c0c:	4b1a      	ldr	r3, [pc, #104]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1f0      	bne.n	8003bfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 80a0 	beq.w	8003d66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c26:	2300      	movs	r3, #0
 8003c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c2a:	4b13      	ldr	r3, [pc, #76]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10f      	bne.n	8003c56 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	4b0f      	ldr	r3, [pc, #60]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	4a0e      	ldr	r2, [pc, #56]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c44:	6413      	str	r3, [r2, #64]	; 0x40
 8003c46:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <HAL_RCC_OscConfig+0x2ac>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	60bb      	str	r3, [r7, #8]
 8003c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c52:	2301      	movs	r3, #1
 8003c54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c56:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_RCC_OscConfig+0x2b8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d121      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c62:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <HAL_RCC_OscConfig+0x2b8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a07      	ldr	r2, [pc, #28]	; (8003c84 <HAL_RCC_OscConfig+0x2b8>)
 8003c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c6e:	f7fe ffb9 	bl	8002be4 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c74:	e011      	b.n	8003c9a <HAL_RCC_OscConfig+0x2ce>
 8003c76:	bf00      	nop
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	42470000 	.word	0x42470000
 8003c80:	42470e80 	.word	0x42470e80
 8003c84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c88:	f7fe ffac 	bl	8002be4 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e106      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9a:	4b85      	ldr	r3, [pc, #532]	; (8003eb0 <HAL_RCC_OscConfig+0x4e4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d106      	bne.n	8003cbc <HAL_RCC_OscConfig+0x2f0>
 8003cae:	4b81      	ldr	r3, [pc, #516]	; (8003eb4 <HAL_RCC_OscConfig+0x4e8>)
 8003cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb2:	4a80      	ldr	r2, [pc, #512]	; (8003eb4 <HAL_RCC_OscConfig+0x4e8>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cba:	e01c      	b.n	8003cf6 <HAL_RCC_OscConfig+0x32a>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2b05      	cmp	r3, #5
 8003cc2:	d10c      	bne.n	8003cde <HAL_RCC_OscConfig+0x312>
 8003cc4:	4b7b      	ldr	r3, [pc, #492]	; (8003eb4 <HAL_RCC_OscConfig+0x4e8>)
 8003cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc8:	4a7a      	ldr	r2, [pc, #488]	; (8003eb4 <HAL_RCC_OscConfig+0x4e8>)
 8003cca:	f043 0304 	orr.w	r3, r3, #4
 8003cce:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd0:	4b78      	ldr	r3, [pc, #480]	; (8003eb4 <HAL_RCC_OscConfig+0x4e8>)
 8003cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd4:	4a77      	ldr	r2, [pc, #476]	; (8003eb4 <HAL_RCC_OscConfig+0x4e8>)
 8003cd6:	f043 0301 	orr.w	r3, r3, #1
 8003cda:	6713      	str	r3, [r2, #112]	; 0x70
 8003cdc:	e00b      	b.n	8003cf6 <HAL_RCC_OscConfig+0x32a>
 8003cde:	4b75      	ldr	r3, [pc, #468]	; (8003eb4 <HAL_RCC_OscConfig+0x4e8>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce2:	4a74      	ldr	r2, [pc, #464]	; (8003eb4 <HAL_RCC_OscConfig+0x4e8>)
 8003ce4:	f023 0301 	bic.w	r3, r3, #1
 8003ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cea:	4b72      	ldr	r3, [pc, #456]	; (8003eb4 <HAL_RCC_OscConfig+0x4e8>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cee:	4a71      	ldr	r2, [pc, #452]	; (8003eb4 <HAL_RCC_OscConfig+0x4e8>)
 8003cf0:	f023 0304 	bic.w	r3, r3, #4
 8003cf4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d015      	beq.n	8003d2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfe:	f7fe ff71 	bl	8002be4 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d04:	e00a      	b.n	8003d1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d06:	f7fe ff6d 	bl	8002be4 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e0c5      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1c:	4b65      	ldr	r3, [pc, #404]	; (8003eb4 <HAL_RCC_OscConfig+0x4e8>)
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0ee      	beq.n	8003d06 <HAL_RCC_OscConfig+0x33a>
 8003d28:	e014      	b.n	8003d54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d2a:	f7fe ff5b 	bl	8002be4 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d30:	e00a      	b.n	8003d48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d32:	f7fe ff57 	bl	8002be4 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e0af      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d48:	4b5a      	ldr	r3, [pc, #360]	; (8003eb4 <HAL_RCC_OscConfig+0x4e8>)
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1ee      	bne.n	8003d32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d54:	7dfb      	ldrb	r3, [r7, #23]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d105      	bne.n	8003d66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d5a:	4b56      	ldr	r3, [pc, #344]	; (8003eb4 <HAL_RCC_OscConfig+0x4e8>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	4a55      	ldr	r2, [pc, #340]	; (8003eb4 <HAL_RCC_OscConfig+0x4e8>)
 8003d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 809b 	beq.w	8003ea6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d70:	4b50      	ldr	r3, [pc, #320]	; (8003eb4 <HAL_RCC_OscConfig+0x4e8>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 030c 	and.w	r3, r3, #12
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d05c      	beq.n	8003e36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d141      	bne.n	8003e08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d84:	4b4c      	ldr	r3, [pc, #304]	; (8003eb8 <HAL_RCC_OscConfig+0x4ec>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8a:	f7fe ff2b 	bl	8002be4 <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d92:	f7fe ff27 	bl	8002be4 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e081      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da4:	4b43      	ldr	r3, [pc, #268]	; (8003eb4 <HAL_RCC_OscConfig+0x4e8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1f0      	bne.n	8003d92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69da      	ldr	r2, [r3, #28]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	431a      	orrs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	019b      	lsls	r3, r3, #6
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc6:	085b      	lsrs	r3, r3, #1
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	041b      	lsls	r3, r3, #16
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	061b      	lsls	r3, r3, #24
 8003dd4:	4937      	ldr	r1, [pc, #220]	; (8003eb4 <HAL_RCC_OscConfig+0x4e8>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dda:	4b37      	ldr	r3, [pc, #220]	; (8003eb8 <HAL_RCC_OscConfig+0x4ec>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de0:	f7fe ff00 	bl	8002be4 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fe fefc 	bl	8002be4 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e056      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dfa:	4b2e      	ldr	r3, [pc, #184]	; (8003eb4 <HAL_RCC_OscConfig+0x4e8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0f0      	beq.n	8003de8 <HAL_RCC_OscConfig+0x41c>
 8003e06:	e04e      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e08:	4b2b      	ldr	r3, [pc, #172]	; (8003eb8 <HAL_RCC_OscConfig+0x4ec>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0e:	f7fe fee9 	bl	8002be4 <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e16:	f7fe fee5 	bl	8002be4 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e03f      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e28:	4b22      	ldr	r3, [pc, #136]	; (8003eb4 <HAL_RCC_OscConfig+0x4e8>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f0      	bne.n	8003e16 <HAL_RCC_OscConfig+0x44a>
 8003e34:	e037      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e032      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e42:	4b1c      	ldr	r3, [pc, #112]	; (8003eb4 <HAL_RCC_OscConfig+0x4e8>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d028      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d121      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d11a      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e72:	4013      	ands	r3, r2
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e78:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d111      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	085b      	lsrs	r3, r3, #1
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d107      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d001      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40007000 	.word	0x40007000
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	42470060 	.word	0x42470060

08003ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0cc      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed0:	4b68      	ldr	r3, [pc, #416]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d90c      	bls.n	8003ef8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ede:	4b65      	ldr	r3, [pc, #404]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee6:	4b63      	ldr	r3, [pc, #396]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0b8      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d020      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f10:	4b59      	ldr	r3, [pc, #356]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4a58      	ldr	r2, [pc, #352]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f28:	4b53      	ldr	r3, [pc, #332]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a52      	ldr	r2, [pc, #328]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f34:	4b50      	ldr	r3, [pc, #320]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	494d      	ldr	r1, [pc, #308]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d044      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d107      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5a:	4b47      	ldr	r3, [pc, #284]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d119      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e07f      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d003      	beq.n	8003f7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d107      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7a:	4b3f      	ldr	r3, [pc, #252]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d109      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e06f      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f8a:	4b3b      	ldr	r3, [pc, #236]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e067      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f9a:	4b37      	ldr	r3, [pc, #220]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f023 0203 	bic.w	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	4934      	ldr	r1, [pc, #208]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fac:	f7fe fe1a 	bl	8002be4 <HAL_GetTick>
 8003fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb2:	e00a      	b.n	8003fca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb4:	f7fe fe16 	bl	8002be4 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e04f      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fca:	4b2b      	ldr	r3, [pc, #172]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 020c 	and.w	r2, r3, #12
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d1eb      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fdc:	4b25      	ldr	r3, [pc, #148]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d20c      	bcs.n	8004004 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fea:	4b22      	ldr	r3, [pc, #136]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff2:	4b20      	ldr	r3, [pc, #128]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e032      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004010:	4b19      	ldr	r3, [pc, #100]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4916      	ldr	r1, [pc, #88]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	4313      	orrs	r3, r2
 8004020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800402e:	4b12      	ldr	r3, [pc, #72]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	490e      	ldr	r1, [pc, #56]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004042:	f000 f821 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8004046:	4602      	mov	r2, r0
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	091b      	lsrs	r3, r3, #4
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	490a      	ldr	r1, [pc, #40]	; (800407c <HAL_RCC_ClockConfig+0x1c0>)
 8004054:	5ccb      	ldrb	r3, [r1, r3]
 8004056:	fa22 f303 	lsr.w	r3, r2, r3
 800405a:	4a09      	ldr	r2, [pc, #36]	; (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 800405c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800405e:	4b09      	ldr	r3, [pc, #36]	; (8004084 <HAL_RCC_ClockConfig+0x1c8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe fd7a 	bl	8002b5c <HAL_InitTick>

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40023c00 	.word	0x40023c00
 8004078:	40023800 	.word	0x40023800
 800407c:	0800b480 	.word	0x0800b480
 8004080:	20000000 	.word	0x20000000
 8004084:	20000004 	.word	0x20000004

08004088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004088:	b5b0      	push	{r4, r5, r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800408e:	2100      	movs	r1, #0
 8004090:	6079      	str	r1, [r7, #4]
 8004092:	2100      	movs	r1, #0
 8004094:	60f9      	str	r1, [r7, #12]
 8004096:	2100      	movs	r1, #0
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800409a:	2100      	movs	r1, #0
 800409c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800409e:	4952      	ldr	r1, [pc, #328]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80040a0:	6889      	ldr	r1, [r1, #8]
 80040a2:	f001 010c 	and.w	r1, r1, #12
 80040a6:	2908      	cmp	r1, #8
 80040a8:	d00d      	beq.n	80040c6 <HAL_RCC_GetSysClockFreq+0x3e>
 80040aa:	2908      	cmp	r1, #8
 80040ac:	f200 8094 	bhi.w	80041d8 <HAL_RCC_GetSysClockFreq+0x150>
 80040b0:	2900      	cmp	r1, #0
 80040b2:	d002      	beq.n	80040ba <HAL_RCC_GetSysClockFreq+0x32>
 80040b4:	2904      	cmp	r1, #4
 80040b6:	d003      	beq.n	80040c0 <HAL_RCC_GetSysClockFreq+0x38>
 80040b8:	e08e      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040ba:	4b4c      	ldr	r3, [pc, #304]	; (80041ec <HAL_RCC_GetSysClockFreq+0x164>)
 80040bc:	60bb      	str	r3, [r7, #8]
       break;
 80040be:	e08e      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040c0:	4b4b      	ldr	r3, [pc, #300]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x168>)
 80040c2:	60bb      	str	r3, [r7, #8]
      break;
 80040c4:	e08b      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040c6:	4948      	ldr	r1, [pc, #288]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80040c8:	6849      	ldr	r1, [r1, #4]
 80040ca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80040ce:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040d0:	4945      	ldr	r1, [pc, #276]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80040d2:	6849      	ldr	r1, [r1, #4]
 80040d4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80040d8:	2900      	cmp	r1, #0
 80040da:	d024      	beq.n	8004126 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040dc:	4942      	ldr	r1, [pc, #264]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80040de:	6849      	ldr	r1, [r1, #4]
 80040e0:	0989      	lsrs	r1, r1, #6
 80040e2:	4608      	mov	r0, r1
 80040e4:	f04f 0100 	mov.w	r1, #0
 80040e8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80040ec:	f04f 0500 	mov.w	r5, #0
 80040f0:	ea00 0204 	and.w	r2, r0, r4
 80040f4:	ea01 0305 	and.w	r3, r1, r5
 80040f8:	493d      	ldr	r1, [pc, #244]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x168>)
 80040fa:	fb01 f003 	mul.w	r0, r1, r3
 80040fe:	2100      	movs	r1, #0
 8004100:	fb01 f102 	mul.w	r1, r1, r2
 8004104:	1844      	adds	r4, r0, r1
 8004106:	493a      	ldr	r1, [pc, #232]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x168>)
 8004108:	fba2 0101 	umull	r0, r1, r2, r1
 800410c:	1863      	adds	r3, r4, r1
 800410e:	4619      	mov	r1, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	461a      	mov	r2, r3
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	f7fc fd66 	bl	8000be8 <__aeabi_uldivmod>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4613      	mov	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	e04a      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004126:	4b30      	ldr	r3, [pc, #192]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	099b      	lsrs	r3, r3, #6
 800412c:	461a      	mov	r2, r3
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004136:	f04f 0100 	mov.w	r1, #0
 800413a:	ea02 0400 	and.w	r4, r2, r0
 800413e:	ea03 0501 	and.w	r5, r3, r1
 8004142:	4620      	mov	r0, r4
 8004144:	4629      	mov	r1, r5
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	014b      	lsls	r3, r1, #5
 8004150:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004154:	0142      	lsls	r2, r0, #5
 8004156:	4610      	mov	r0, r2
 8004158:	4619      	mov	r1, r3
 800415a:	1b00      	subs	r0, r0, r4
 800415c:	eb61 0105 	sbc.w	r1, r1, r5
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	018b      	lsls	r3, r1, #6
 800416a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800416e:	0182      	lsls	r2, r0, #6
 8004170:	1a12      	subs	r2, r2, r0
 8004172:	eb63 0301 	sbc.w	r3, r3, r1
 8004176:	f04f 0000 	mov.w	r0, #0
 800417a:	f04f 0100 	mov.w	r1, #0
 800417e:	00d9      	lsls	r1, r3, #3
 8004180:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004184:	00d0      	lsls	r0, r2, #3
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	1912      	adds	r2, r2, r4
 800418c:	eb45 0303 	adc.w	r3, r5, r3
 8004190:	f04f 0000 	mov.w	r0, #0
 8004194:	f04f 0100 	mov.w	r1, #0
 8004198:	0299      	lsls	r1, r3, #10
 800419a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800419e:	0290      	lsls	r0, r2, #10
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4610      	mov	r0, r2
 80041a6:	4619      	mov	r1, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	461a      	mov	r2, r3
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	f7fc fd1a 	bl	8000be8 <__aeabi_uldivmod>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4613      	mov	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041bc:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	0c1b      	lsrs	r3, r3, #16
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	3301      	adds	r3, #1
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d4:	60bb      	str	r3, [r7, #8]
      break;
 80041d6:	e002      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041d8:	4b04      	ldr	r3, [pc, #16]	; (80041ec <HAL_RCC_GetSysClockFreq+0x164>)
 80041da:	60bb      	str	r3, [r7, #8]
      break;
 80041dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041de:	68bb      	ldr	r3, [r7, #8]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bdb0      	pop	{r4, r5, r7, pc}
 80041e8:	40023800 	.word	0x40023800
 80041ec:	00f42400 	.word	0x00f42400
 80041f0:	017d7840 	.word	0x017d7840

080041f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f8:	4b03      	ldr	r3, [pc, #12]	; (8004208 <HAL_RCC_GetHCLKFreq+0x14>)
 80041fa:	681b      	ldr	r3, [r3, #0]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	20000000 	.word	0x20000000

0800420c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004210:	f7ff fff0 	bl	80041f4 <HAL_RCC_GetHCLKFreq>
 8004214:	4602      	mov	r2, r0
 8004216:	4b05      	ldr	r3, [pc, #20]	; (800422c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	0a9b      	lsrs	r3, r3, #10
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	4903      	ldr	r1, [pc, #12]	; (8004230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004222:	5ccb      	ldrb	r3, [r1, r3]
 8004224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004228:	4618      	mov	r0, r3
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40023800 	.word	0x40023800
 8004230:	0800b490 	.word	0x0800b490

08004234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004238:	f7ff ffdc 	bl	80041f4 <HAL_RCC_GetHCLKFreq>
 800423c:	4602      	mov	r2, r0
 800423e:	4b05      	ldr	r3, [pc, #20]	; (8004254 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	0b5b      	lsrs	r3, r3, #13
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	4903      	ldr	r1, [pc, #12]	; (8004258 <HAL_RCC_GetPCLK2Freq+0x24>)
 800424a:	5ccb      	ldrb	r3, [r1, r3]
 800424c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004250:	4618      	mov	r0, r3
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40023800 	.word	0x40023800
 8004258:	0800b490 	.word	0x0800b490

0800425c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e041      	b.n	80042f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fe f9c0 	bl	8002608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3304      	adds	r3, #4
 8004298:	4619      	mov	r1, r3
 800429a:	4610      	mov	r0, r2
 800429c:	f000 ff8a 	bl	80051b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b082      	sub	sp, #8
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e041      	b.n	8004390 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d106      	bne.n	8004326 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7fe fa7d 	bl	8002820 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2202      	movs	r2, #2
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3304      	adds	r3, #4
 8004336:	4619      	mov	r1, r3
 8004338:	4610      	mov	r0, r2
 800433a:	f000 ff3b 	bl	80051b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d109      	bne.n	80043bc <HAL_TIM_PWM_Start+0x24>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	bf14      	ite	ne
 80043b4:	2301      	movne	r3, #1
 80043b6:	2300      	moveq	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	e022      	b.n	8004402 <HAL_TIM_PWM_Start+0x6a>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d109      	bne.n	80043d6 <HAL_TIM_PWM_Start+0x3e>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	bf14      	ite	ne
 80043ce:	2301      	movne	r3, #1
 80043d0:	2300      	moveq	r3, #0
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	e015      	b.n	8004402 <HAL_TIM_PWM_Start+0x6a>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d109      	bne.n	80043f0 <HAL_TIM_PWM_Start+0x58>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	bf14      	ite	ne
 80043e8:	2301      	movne	r3, #1
 80043ea:	2300      	moveq	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	e008      	b.n	8004402 <HAL_TIM_PWM_Start+0x6a>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	bf14      	ite	ne
 80043fc:	2301      	movne	r3, #1
 80043fe:	2300      	moveq	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e07c      	b.n	8004504 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d104      	bne.n	800441a <HAL_TIM_PWM_Start+0x82>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004418:	e013      	b.n	8004442 <HAL_TIM_PWM_Start+0xaa>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b04      	cmp	r3, #4
 800441e:	d104      	bne.n	800442a <HAL_TIM_PWM_Start+0x92>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004428:	e00b      	b.n	8004442 <HAL_TIM_PWM_Start+0xaa>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b08      	cmp	r3, #8
 800442e:	d104      	bne.n	800443a <HAL_TIM_PWM_Start+0xa2>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004438:	e003      	b.n	8004442 <HAL_TIM_PWM_Start+0xaa>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2202      	movs	r2, #2
 800443e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2201      	movs	r2, #1
 8004448:	6839      	ldr	r1, [r7, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f001 fac6 	bl	80059dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a2d      	ldr	r2, [pc, #180]	; (800450c <HAL_TIM_PWM_Start+0x174>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d004      	beq.n	8004464 <HAL_TIM_PWM_Start+0xcc>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a2c      	ldr	r2, [pc, #176]	; (8004510 <HAL_TIM_PWM_Start+0x178>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d101      	bne.n	8004468 <HAL_TIM_PWM_Start+0xd0>
 8004464:	2301      	movs	r3, #1
 8004466:	e000      	b.n	800446a <HAL_TIM_PWM_Start+0xd2>
 8004468:	2300      	movs	r3, #0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d007      	beq.n	800447e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800447c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a22      	ldr	r2, [pc, #136]	; (800450c <HAL_TIM_PWM_Start+0x174>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d022      	beq.n	80044ce <HAL_TIM_PWM_Start+0x136>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004490:	d01d      	beq.n	80044ce <HAL_TIM_PWM_Start+0x136>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1f      	ldr	r2, [pc, #124]	; (8004514 <HAL_TIM_PWM_Start+0x17c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d018      	beq.n	80044ce <HAL_TIM_PWM_Start+0x136>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1d      	ldr	r2, [pc, #116]	; (8004518 <HAL_TIM_PWM_Start+0x180>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d013      	beq.n	80044ce <HAL_TIM_PWM_Start+0x136>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1c      	ldr	r2, [pc, #112]	; (800451c <HAL_TIM_PWM_Start+0x184>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d00e      	beq.n	80044ce <HAL_TIM_PWM_Start+0x136>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a16      	ldr	r2, [pc, #88]	; (8004510 <HAL_TIM_PWM_Start+0x178>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d009      	beq.n	80044ce <HAL_TIM_PWM_Start+0x136>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a18      	ldr	r2, [pc, #96]	; (8004520 <HAL_TIM_PWM_Start+0x188>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d004      	beq.n	80044ce <HAL_TIM_PWM_Start+0x136>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a16      	ldr	r2, [pc, #88]	; (8004524 <HAL_TIM_PWM_Start+0x18c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d111      	bne.n	80044f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b06      	cmp	r3, #6
 80044de:	d010      	beq.n	8004502 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0201 	orr.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f0:	e007      	b.n	8004502 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f042 0201 	orr.w	r2, r2, #1
 8004500:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	40010000 	.word	0x40010000
 8004510:	40010400 	.word	0x40010400
 8004514:	40000400 	.word	0x40000400
 8004518:	40000800 	.word	0x40000800
 800451c:	40000c00 	.word	0x40000c00
 8004520:	40014000 	.word	0x40014000
 8004524:	40001800 	.word	0x40001800

08004528 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e041      	b.n	80045be <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fe f916 	bl	8002780 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3304      	adds	r3, #4
 8004564:	4619      	mov	r1, r3
 8004566:	4610      	mov	r0, r2
 8004568:	f000 fe24 	bl	80051b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d104      	bne.n	80045e6 <HAL_TIM_IC_Start_IT+0x1e>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	e013      	b.n	800460e <HAL_TIM_IC_Start_IT+0x46>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b04      	cmp	r3, #4
 80045ea:	d104      	bne.n	80045f6 <HAL_TIM_IC_Start_IT+0x2e>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	e00b      	b.n	800460e <HAL_TIM_IC_Start_IT+0x46>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d104      	bne.n	8004606 <HAL_TIM_IC_Start_IT+0x3e>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004602:	b2db      	uxtb	r3, r3
 8004604:	e003      	b.n	800460e <HAL_TIM_IC_Start_IT+0x46>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800460c:	b2db      	uxtb	r3, r3
 800460e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d104      	bne.n	8004620 <HAL_TIM_IC_Start_IT+0x58>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800461c:	b2db      	uxtb	r3, r3
 800461e:	e013      	b.n	8004648 <HAL_TIM_IC_Start_IT+0x80>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	2b04      	cmp	r3, #4
 8004624:	d104      	bne.n	8004630 <HAL_TIM_IC_Start_IT+0x68>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800462c:	b2db      	uxtb	r3, r3
 800462e:	e00b      	b.n	8004648 <HAL_TIM_IC_Start_IT+0x80>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b08      	cmp	r3, #8
 8004634:	d104      	bne.n	8004640 <HAL_TIM_IC_Start_IT+0x78>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800463c:	b2db      	uxtb	r3, r3
 800463e:	e003      	b.n	8004648 <HAL_TIM_IC_Start_IT+0x80>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004646:	b2db      	uxtb	r3, r3
 8004648:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800464a:	7bbb      	ldrb	r3, [r7, #14]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d102      	bne.n	8004656 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004650:	7b7b      	ldrb	r3, [r7, #13]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d001      	beq.n	800465a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e0cc      	b.n	80047f4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d104      	bne.n	800466a <HAL_TIM_IC_Start_IT+0xa2>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004668:	e013      	b.n	8004692 <HAL_TIM_IC_Start_IT+0xca>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b04      	cmp	r3, #4
 800466e:	d104      	bne.n	800467a <HAL_TIM_IC_Start_IT+0xb2>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004678:	e00b      	b.n	8004692 <HAL_TIM_IC_Start_IT+0xca>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b08      	cmp	r3, #8
 800467e:	d104      	bne.n	800468a <HAL_TIM_IC_Start_IT+0xc2>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004688:	e003      	b.n	8004692 <HAL_TIM_IC_Start_IT+0xca>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2202      	movs	r2, #2
 800468e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d104      	bne.n	80046a2 <HAL_TIM_IC_Start_IT+0xda>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046a0:	e013      	b.n	80046ca <HAL_TIM_IC_Start_IT+0x102>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d104      	bne.n	80046b2 <HAL_TIM_IC_Start_IT+0xea>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046b0:	e00b      	b.n	80046ca <HAL_TIM_IC_Start_IT+0x102>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d104      	bne.n	80046c2 <HAL_TIM_IC_Start_IT+0xfa>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046c0:	e003      	b.n	80046ca <HAL_TIM_IC_Start_IT+0x102>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b0c      	cmp	r3, #12
 80046ce:	d841      	bhi.n	8004754 <HAL_TIM_IC_Start_IT+0x18c>
 80046d0:	a201      	add	r2, pc, #4	; (adr r2, 80046d8 <HAL_TIM_IC_Start_IT+0x110>)
 80046d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d6:	bf00      	nop
 80046d8:	0800470d 	.word	0x0800470d
 80046dc:	08004755 	.word	0x08004755
 80046e0:	08004755 	.word	0x08004755
 80046e4:	08004755 	.word	0x08004755
 80046e8:	0800471f 	.word	0x0800471f
 80046ec:	08004755 	.word	0x08004755
 80046f0:	08004755 	.word	0x08004755
 80046f4:	08004755 	.word	0x08004755
 80046f8:	08004731 	.word	0x08004731
 80046fc:	08004755 	.word	0x08004755
 8004700:	08004755 	.word	0x08004755
 8004704:	08004755 	.word	0x08004755
 8004708:	08004743 	.word	0x08004743
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0202 	orr.w	r2, r2, #2
 800471a:	60da      	str	r2, [r3, #12]
      break;
 800471c:	e01d      	b.n	800475a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f042 0204 	orr.w	r2, r2, #4
 800472c:	60da      	str	r2, [r3, #12]
      break;
 800472e:	e014      	b.n	800475a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0208 	orr.w	r2, r2, #8
 800473e:	60da      	str	r2, [r3, #12]
      break;
 8004740:	e00b      	b.n	800475a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f042 0210 	orr.w	r2, r2, #16
 8004750:	60da      	str	r2, [r3, #12]
      break;
 8004752:	e002      	b.n	800475a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	73fb      	strb	r3, [r7, #15]
      break;
 8004758:	bf00      	nop
  }

  if (status == HAL_OK)
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d148      	bne.n	80047f2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2201      	movs	r2, #1
 8004766:	6839      	ldr	r1, [r7, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f001 f937 	bl	80059dc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a22      	ldr	r2, [pc, #136]	; (80047fc <HAL_TIM_IC_Start_IT+0x234>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d022      	beq.n	80047be <HAL_TIM_IC_Start_IT+0x1f6>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004780:	d01d      	beq.n	80047be <HAL_TIM_IC_Start_IT+0x1f6>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1e      	ldr	r2, [pc, #120]	; (8004800 <HAL_TIM_IC_Start_IT+0x238>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d018      	beq.n	80047be <HAL_TIM_IC_Start_IT+0x1f6>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1c      	ldr	r2, [pc, #112]	; (8004804 <HAL_TIM_IC_Start_IT+0x23c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d013      	beq.n	80047be <HAL_TIM_IC_Start_IT+0x1f6>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1b      	ldr	r2, [pc, #108]	; (8004808 <HAL_TIM_IC_Start_IT+0x240>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00e      	beq.n	80047be <HAL_TIM_IC_Start_IT+0x1f6>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a19      	ldr	r2, [pc, #100]	; (800480c <HAL_TIM_IC_Start_IT+0x244>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d009      	beq.n	80047be <HAL_TIM_IC_Start_IT+0x1f6>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a18      	ldr	r2, [pc, #96]	; (8004810 <HAL_TIM_IC_Start_IT+0x248>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d004      	beq.n	80047be <HAL_TIM_IC_Start_IT+0x1f6>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a16      	ldr	r2, [pc, #88]	; (8004814 <HAL_TIM_IC_Start_IT+0x24c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d111      	bne.n	80047e2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2b06      	cmp	r3, #6
 80047ce:	d010      	beq.n	80047f2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0201 	orr.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e0:	e007      	b.n	80047f2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0201 	orr.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40010000 	.word	0x40010000
 8004800:	40000400 	.word	0x40000400
 8004804:	40000800 	.word	0x40000800
 8004808:	40000c00 	.word	0x40000c00
 800480c:	40010400 	.word	0x40010400
 8004810:	40014000 	.word	0x40014000
 8004814:	40001800 	.word	0x40001800

08004818 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e097      	b.n	800495c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d106      	bne.n	8004846 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7fd ff03 	bl	800264c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2202      	movs	r2, #2
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800485c:	f023 0307 	bic.w	r3, r3, #7
 8004860:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	3304      	adds	r3, #4
 800486a:	4619      	mov	r1, r3
 800486c:	4610      	mov	r0, r2
 800486e:	f000 fca1 	bl	80051b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4313      	orrs	r3, r2
 8004892:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800489a:	f023 0303 	bic.w	r3, r3, #3
 800489e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	021b      	lsls	r3, r3, #8
 80048aa:	4313      	orrs	r3, r2
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80048b8:	f023 030c 	bic.w	r3, r3, #12
 80048bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	021b      	lsls	r3, r3, #8
 80048d4:	4313      	orrs	r3, r2
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	011a      	lsls	r2, r3, #4
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	031b      	lsls	r3, r3, #12
 80048e8:	4313      	orrs	r3, r2
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80048f6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80048fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	4313      	orrs	r3, r2
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004974:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800497c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004984:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800498c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d110      	bne.n	80049b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d102      	bne.n	80049a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800499a:	7b7b      	ldrb	r3, [r7, #13]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d001      	beq.n	80049a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e069      	b.n	8004a78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049b4:	e031      	b.n	8004a1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d110      	bne.n	80049de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049bc:	7bbb      	ldrb	r3, [r7, #14]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d102      	bne.n	80049c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049c2:	7b3b      	ldrb	r3, [r7, #12]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d001      	beq.n	80049cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e055      	b.n	8004a78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049dc:	e01d      	b.n	8004a1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d108      	bne.n	80049f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049e4:	7bbb      	ldrb	r3, [r7, #14]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d105      	bne.n	80049f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049ea:	7b7b      	ldrb	r3, [r7, #13]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d102      	bne.n	80049f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049f0:	7b3b      	ldrb	r3, [r7, #12]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d001      	beq.n	80049fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e03e      	b.n	8004a78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2202      	movs	r2, #2
 80049fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2202      	movs	r2, #2
 8004a06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2202      	movs	r2, #2
 8004a16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_TIM_Encoder_Start+0xc4>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d008      	beq.n	8004a38 <HAL_TIM_Encoder_Start+0xd4>
 8004a26:	e00f      	b.n	8004a48 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	2100      	movs	r1, #0
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 ffd3 	bl	80059dc <TIM_CCxChannelCmd>
      break;
 8004a36:	e016      	b.n	8004a66 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	2104      	movs	r1, #4
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 ffcb 	bl	80059dc <TIM_CCxChannelCmd>
      break;
 8004a46:	e00e      	b.n	8004a66 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	2100      	movs	r1, #0
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 ffc3 	bl	80059dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	2104      	movs	r1, #4
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 ffbc 	bl	80059dc <TIM_CCxChannelCmd>
      break;
 8004a64:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f042 0201 	orr.w	r2, r2, #1
 8004a74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d122      	bne.n	8004adc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d11b      	bne.n	8004adc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0202 	mvn.w	r2, #2
 8004aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fc fa28 	bl	8000f18 <HAL_TIM_IC_CaptureCallback>
 8004ac8:	e005      	b.n	8004ad6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fb54 	bl	8005178 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fb5b 	bl	800518c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0304 	and.w	r3, r3, #4
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d122      	bne.n	8004b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d11b      	bne.n	8004b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0204 	mvn.w	r2, #4
 8004b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2202      	movs	r2, #2
 8004b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fc f9fe 	bl	8000f18 <HAL_TIM_IC_CaptureCallback>
 8004b1c:	e005      	b.n	8004b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fb2a 	bl	8005178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 fb31 	bl	800518c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f003 0308 	and.w	r3, r3, #8
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	d122      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d11b      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0208 	mvn.w	r2, #8
 8004b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2204      	movs	r2, #4
 8004b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fc f9d4 	bl	8000f18 <HAL_TIM_IC_CaptureCallback>
 8004b70:	e005      	b.n	8004b7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 fb00 	bl	8005178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 fb07 	bl	800518c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f003 0310 	and.w	r3, r3, #16
 8004b8e:	2b10      	cmp	r3, #16
 8004b90:	d122      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f003 0310 	and.w	r3, r3, #16
 8004b9c:	2b10      	cmp	r3, #16
 8004b9e:	d11b      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0210 	mvn.w	r2, #16
 8004ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2208      	movs	r2, #8
 8004bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7fc f9aa 	bl	8000f18 <HAL_TIM_IC_CaptureCallback>
 8004bc4:	e005      	b.n	8004bd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fad6 	bl	8005178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 fadd 	bl	800518c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d10e      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d107      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0201 	mvn.w	r2, #1
 8004bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fab0 	bl	8005164 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0e:	2b80      	cmp	r3, #128	; 0x80
 8004c10:	d10e      	bne.n	8004c30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1c:	2b80      	cmp	r3, #128	; 0x80
 8004c1e:	d107      	bne.n	8004c30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 ffd4 	bl	8005bd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3a:	2b40      	cmp	r3, #64	; 0x40
 8004c3c:	d10e      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c48:	2b40      	cmp	r3, #64	; 0x40
 8004c4a:	d107      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 faa2 	bl	80051a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b20      	cmp	r3, #32
 8004c68:	d10e      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f003 0320 	and.w	r3, r3, #32
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d107      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0220 	mvn.w	r2, #32
 8004c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 ff9e 	bl	8005bc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c88:	bf00      	nop
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <HAL_TIM_IC_ConfigChannel+0x1e>
 8004caa:	2302      	movs	r3, #2
 8004cac:	e088      	b.n	8004dc0 <HAL_TIM_IC_ConfigChannel+0x130>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d11b      	bne.n	8004cf4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	6819      	ldr	r1, [r3, #0]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f000 fcc2 	bl	8005654 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699a      	ldr	r2, [r3, #24]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 020c 	bic.w	r2, r2, #12
 8004cde:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6999      	ldr	r1, [r3, #24]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	619a      	str	r2, [r3, #24]
 8004cf2:	e060      	b.n	8004db6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d11c      	bne.n	8004d34 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6818      	ldr	r0, [r3, #0]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	6819      	ldr	r1, [r3, #0]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f000 fd46 	bl	800579a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699a      	ldr	r2, [r3, #24]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d1c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6999      	ldr	r1, [r3, #24]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	021a      	lsls	r2, r3, #8
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	619a      	str	r2, [r3, #24]
 8004d32:	e040      	b.n	8004db6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d11b      	bne.n	8004d72 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6818      	ldr	r0, [r3, #0]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	6819      	ldr	r1, [r3, #0]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f000 fd93 	bl	8005874 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69da      	ldr	r2, [r3, #28]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 020c 	bic.w	r2, r2, #12
 8004d5c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69d9      	ldr	r1, [r3, #28]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	61da      	str	r2, [r3, #28]
 8004d70:	e021      	b.n	8004db6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b0c      	cmp	r3, #12
 8004d76:	d11c      	bne.n	8004db2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	6819      	ldr	r1, [r3, #0]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f000 fdb0 	bl	80058ec <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	69da      	ldr	r2, [r3, #28]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d9a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	69d9      	ldr	r1, [r3, #28]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	021a      	lsls	r2, r3, #8
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	61da      	str	r2, [r3, #28]
 8004db0:	e001      	b.n	8004db6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3718      	adds	r7, #24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d101      	bne.n	8004de6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004de2:	2302      	movs	r3, #2
 8004de4:	e0ae      	b.n	8004f44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b0c      	cmp	r3, #12
 8004df2:	f200 809f 	bhi.w	8004f34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004df6:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfc:	08004e31 	.word	0x08004e31
 8004e00:	08004f35 	.word	0x08004f35
 8004e04:	08004f35 	.word	0x08004f35
 8004e08:	08004f35 	.word	0x08004f35
 8004e0c:	08004e71 	.word	0x08004e71
 8004e10:	08004f35 	.word	0x08004f35
 8004e14:	08004f35 	.word	0x08004f35
 8004e18:	08004f35 	.word	0x08004f35
 8004e1c:	08004eb3 	.word	0x08004eb3
 8004e20:	08004f35 	.word	0x08004f35
 8004e24:	08004f35 	.word	0x08004f35
 8004e28:	08004f35 	.word	0x08004f35
 8004e2c:	08004ef3 	.word	0x08004ef3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fa5c 	bl	80052f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0208 	orr.w	r2, r2, #8
 8004e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0204 	bic.w	r2, r2, #4
 8004e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6999      	ldr	r1, [r3, #24]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	691a      	ldr	r2, [r3, #16]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	619a      	str	r2, [r3, #24]
      break;
 8004e6e:	e064      	b.n	8004f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68b9      	ldr	r1, [r7, #8]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 faac 	bl	80053d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699a      	ldr	r2, [r3, #24]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699a      	ldr	r2, [r3, #24]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6999      	ldr	r1, [r3, #24]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	021a      	lsls	r2, r3, #8
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	619a      	str	r2, [r3, #24]
      break;
 8004eb0:	e043      	b.n	8004f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 fb01 	bl	80054c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69da      	ldr	r2, [r3, #28]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f042 0208 	orr.w	r2, r2, #8
 8004ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69da      	ldr	r2, [r3, #28]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0204 	bic.w	r2, r2, #4
 8004edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69d9      	ldr	r1, [r3, #28]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	61da      	str	r2, [r3, #28]
      break;
 8004ef0:	e023      	b.n	8004f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68b9      	ldr	r1, [r7, #8]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 fb55 	bl	80055a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69da      	ldr	r2, [r3, #28]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69da      	ldr	r2, [r3, #28]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69d9      	ldr	r1, [r3, #28]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	021a      	lsls	r2, r3, #8
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	61da      	str	r2, [r3, #28]
      break;
 8004f32:	e002      	b.n	8004f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	75fb      	strb	r3, [r7, #23]
      break;
 8004f38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d101      	bne.n	8004f68 <HAL_TIM_ConfigClockSource+0x1c>
 8004f64:	2302      	movs	r3, #2
 8004f66:	e0b4      	b.n	80050d2 <HAL_TIM_ConfigClockSource+0x186>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa0:	d03e      	beq.n	8005020 <HAL_TIM_ConfigClockSource+0xd4>
 8004fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa6:	f200 8087 	bhi.w	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
 8004faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fae:	f000 8086 	beq.w	80050be <HAL_TIM_ConfigClockSource+0x172>
 8004fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb6:	d87f      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb8:	2b70      	cmp	r3, #112	; 0x70
 8004fba:	d01a      	beq.n	8004ff2 <HAL_TIM_ConfigClockSource+0xa6>
 8004fbc:	2b70      	cmp	r3, #112	; 0x70
 8004fbe:	d87b      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc0:	2b60      	cmp	r3, #96	; 0x60
 8004fc2:	d050      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x11a>
 8004fc4:	2b60      	cmp	r3, #96	; 0x60
 8004fc6:	d877      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc8:	2b50      	cmp	r3, #80	; 0x50
 8004fca:	d03c      	beq.n	8005046 <HAL_TIM_ConfigClockSource+0xfa>
 8004fcc:	2b50      	cmp	r3, #80	; 0x50
 8004fce:	d873      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd0:	2b40      	cmp	r3, #64	; 0x40
 8004fd2:	d058      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x13a>
 8004fd4:	2b40      	cmp	r3, #64	; 0x40
 8004fd6:	d86f      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd8:	2b30      	cmp	r3, #48	; 0x30
 8004fda:	d064      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x15a>
 8004fdc:	2b30      	cmp	r3, #48	; 0x30
 8004fde:	d86b      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	d060      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x15a>
 8004fe4:	2b20      	cmp	r3, #32
 8004fe6:	d867      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d05c      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x15a>
 8004fec:	2b10      	cmp	r3, #16
 8004fee:	d05a      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x15a>
 8004ff0:	e062      	b.n	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	6899      	ldr	r1, [r3, #8]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f000 fccb 	bl	800599c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005014:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	609a      	str	r2, [r3, #8]
      break;
 800501e:	e04f      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6818      	ldr	r0, [r3, #0]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	6899      	ldr	r1, [r3, #8]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f000 fcb4 	bl	800599c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005042:	609a      	str	r2, [r3, #8]
      break;
 8005044:	e03c      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	6859      	ldr	r1, [r3, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	461a      	mov	r2, r3
 8005054:	f000 fb72 	bl	800573c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2150      	movs	r1, #80	; 0x50
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fc81 	bl	8005966 <TIM_ITRx_SetConfig>
      break;
 8005064:	e02c      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6859      	ldr	r1, [r3, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	461a      	mov	r2, r3
 8005074:	f000 fbce 	bl	8005814 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2160      	movs	r1, #96	; 0x60
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fc71 	bl	8005966 <TIM_ITRx_SetConfig>
      break;
 8005084:	e01c      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	6859      	ldr	r1, [r3, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	461a      	mov	r2, r3
 8005094:	f000 fb52 	bl	800573c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2140      	movs	r1, #64	; 0x40
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fc61 	bl	8005966 <TIM_ITRx_SetConfig>
      break;
 80050a4:	e00c      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4619      	mov	r1, r3
 80050b0:	4610      	mov	r0, r2
 80050b2:	f000 fc58 	bl	8005966 <TIM_ITRx_SetConfig>
      break;
 80050b6:	e003      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	73fb      	strb	r3, [r7, #15]
      break;
 80050bc:	e000      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b0c      	cmp	r3, #12
 80050ee:	d831      	bhi.n	8005154 <HAL_TIM_ReadCapturedValue+0x78>
 80050f0:	a201      	add	r2, pc, #4	; (adr r2, 80050f8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80050f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f6:	bf00      	nop
 80050f8:	0800512d 	.word	0x0800512d
 80050fc:	08005155 	.word	0x08005155
 8005100:	08005155 	.word	0x08005155
 8005104:	08005155 	.word	0x08005155
 8005108:	08005137 	.word	0x08005137
 800510c:	08005155 	.word	0x08005155
 8005110:	08005155 	.word	0x08005155
 8005114:	08005155 	.word	0x08005155
 8005118:	08005141 	.word	0x08005141
 800511c:	08005155 	.word	0x08005155
 8005120:	08005155 	.word	0x08005155
 8005124:	08005155 	.word	0x08005155
 8005128:	0800514b 	.word	0x0800514b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005132:	60fb      	str	r3, [r7, #12]

      break;
 8005134:	e00f      	b.n	8005156 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513c:	60fb      	str	r3, [r7, #12]

      break;
 800513e:	e00a      	b.n	8005156 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005146:	60fb      	str	r3, [r7, #12]

      break;
 8005148:	e005      	b.n	8005156 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005150:	60fb      	str	r3, [r7, #12]

      break;
 8005152:	e000      	b.n	8005156 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005154:	bf00      	nop
  }

  return tmpreg;
 8005156:	68fb      	ldr	r3, [r7, #12]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a40      	ldr	r2, [pc, #256]	; (80052c8 <TIM_Base_SetConfig+0x114>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d013      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d2:	d00f      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a3d      	ldr	r2, [pc, #244]	; (80052cc <TIM_Base_SetConfig+0x118>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00b      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a3c      	ldr	r2, [pc, #240]	; (80052d0 <TIM_Base_SetConfig+0x11c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d007      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a3b      	ldr	r2, [pc, #236]	; (80052d4 <TIM_Base_SetConfig+0x120>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d003      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a3a      	ldr	r2, [pc, #232]	; (80052d8 <TIM_Base_SetConfig+0x124>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d108      	bne.n	8005206 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a2f      	ldr	r2, [pc, #188]	; (80052c8 <TIM_Base_SetConfig+0x114>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d02b      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005214:	d027      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a2c      	ldr	r2, [pc, #176]	; (80052cc <TIM_Base_SetConfig+0x118>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d023      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a2b      	ldr	r2, [pc, #172]	; (80052d0 <TIM_Base_SetConfig+0x11c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d01f      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a2a      	ldr	r2, [pc, #168]	; (80052d4 <TIM_Base_SetConfig+0x120>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d01b      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a29      	ldr	r2, [pc, #164]	; (80052d8 <TIM_Base_SetConfig+0x124>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d017      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a28      	ldr	r2, [pc, #160]	; (80052dc <TIM_Base_SetConfig+0x128>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d013      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a27      	ldr	r2, [pc, #156]	; (80052e0 <TIM_Base_SetConfig+0x12c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00f      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a26      	ldr	r2, [pc, #152]	; (80052e4 <TIM_Base_SetConfig+0x130>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00b      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a25      	ldr	r2, [pc, #148]	; (80052e8 <TIM_Base_SetConfig+0x134>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d007      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a24      	ldr	r2, [pc, #144]	; (80052ec <TIM_Base_SetConfig+0x138>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d003      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a23      	ldr	r2, [pc, #140]	; (80052f0 <TIM_Base_SetConfig+0x13c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d108      	bne.n	8005278 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800526c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a0a      	ldr	r2, [pc, #40]	; (80052c8 <TIM_Base_SetConfig+0x114>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d003      	beq.n	80052ac <TIM_Base_SetConfig+0xf8>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a0c      	ldr	r2, [pc, #48]	; (80052d8 <TIM_Base_SetConfig+0x124>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d103      	bne.n	80052b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	615a      	str	r2, [r3, #20]
}
 80052ba:	bf00      	nop
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40010000 	.word	0x40010000
 80052cc:	40000400 	.word	0x40000400
 80052d0:	40000800 	.word	0x40000800
 80052d4:	40000c00 	.word	0x40000c00
 80052d8:	40010400 	.word	0x40010400
 80052dc:	40014000 	.word	0x40014000
 80052e0:	40014400 	.word	0x40014400
 80052e4:	40014800 	.word	0x40014800
 80052e8:	40001800 	.word	0x40001800
 80052ec:	40001c00 	.word	0x40001c00
 80052f0:	40002000 	.word	0x40002000

080052f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b087      	sub	sp, #28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	f023 0201 	bic.w	r2, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0303 	bic.w	r3, r3, #3
 800532a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f023 0302 	bic.w	r3, r3, #2
 800533c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a20      	ldr	r2, [pc, #128]	; (80053cc <TIM_OC1_SetConfig+0xd8>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d003      	beq.n	8005358 <TIM_OC1_SetConfig+0x64>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a1f      	ldr	r2, [pc, #124]	; (80053d0 <TIM_OC1_SetConfig+0xdc>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d10c      	bne.n	8005372 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f023 0308 	bic.w	r3, r3, #8
 800535e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f023 0304 	bic.w	r3, r3, #4
 8005370:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a15      	ldr	r2, [pc, #84]	; (80053cc <TIM_OC1_SetConfig+0xd8>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d003      	beq.n	8005382 <TIM_OC1_SetConfig+0x8e>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a14      	ldr	r2, [pc, #80]	; (80053d0 <TIM_OC1_SetConfig+0xdc>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d111      	bne.n	80053a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	4313      	orrs	r3, r2
 800539a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	621a      	str	r2, [r3, #32]
}
 80053c0:	bf00      	nop
 80053c2:	371c      	adds	r7, #28
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	40010000 	.word	0x40010000
 80053d0:	40010400 	.word	0x40010400

080053d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	f023 0210 	bic.w	r2, r3, #16
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800540a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	021b      	lsls	r3, r3, #8
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4313      	orrs	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f023 0320 	bic.w	r3, r3, #32
 800541e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	4313      	orrs	r3, r2
 800542a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a22      	ldr	r2, [pc, #136]	; (80054b8 <TIM_OC2_SetConfig+0xe4>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d003      	beq.n	800543c <TIM_OC2_SetConfig+0x68>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a21      	ldr	r2, [pc, #132]	; (80054bc <TIM_OC2_SetConfig+0xe8>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d10d      	bne.n	8005458 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	4313      	orrs	r3, r2
 800544e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005456:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a17      	ldr	r2, [pc, #92]	; (80054b8 <TIM_OC2_SetConfig+0xe4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d003      	beq.n	8005468 <TIM_OC2_SetConfig+0x94>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a16      	ldr	r2, [pc, #88]	; (80054bc <TIM_OC2_SetConfig+0xe8>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d113      	bne.n	8005490 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800546e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005476:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	4313      	orrs	r3, r2
 8005482:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	621a      	str	r2, [r3, #32]
}
 80054aa:	bf00      	nop
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40010000 	.word	0x40010000
 80054bc:	40010400 	.word	0x40010400

080054c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f023 0303 	bic.w	r3, r3, #3
 80054f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	021b      	lsls	r3, r3, #8
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a21      	ldr	r2, [pc, #132]	; (80055a0 <TIM_OC3_SetConfig+0xe0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d003      	beq.n	8005526 <TIM_OC3_SetConfig+0x66>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a20      	ldr	r2, [pc, #128]	; (80055a4 <TIM_OC3_SetConfig+0xe4>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d10d      	bne.n	8005542 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800552c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	021b      	lsls	r3, r3, #8
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a16      	ldr	r2, [pc, #88]	; (80055a0 <TIM_OC3_SetConfig+0xe0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d003      	beq.n	8005552 <TIM_OC3_SetConfig+0x92>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a15      	ldr	r2, [pc, #84]	; (80055a4 <TIM_OC3_SetConfig+0xe4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d113      	bne.n	800557a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	621a      	str	r2, [r3, #32]
}
 8005594:	bf00      	nop
 8005596:	371c      	adds	r7, #28
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	40010000 	.word	0x40010000
 80055a4:	40010400 	.word	0x40010400

080055a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	021b      	lsls	r3, r3, #8
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	031b      	lsls	r3, r3, #12
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a12      	ldr	r2, [pc, #72]	; (800564c <TIM_OC4_SetConfig+0xa4>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d003      	beq.n	8005610 <TIM_OC4_SetConfig+0x68>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a11      	ldr	r2, [pc, #68]	; (8005650 <TIM_OC4_SetConfig+0xa8>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d109      	bne.n	8005624 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005616:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	019b      	lsls	r3, r3, #6
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	621a      	str	r2, [r3, #32]
}
 800563e:	bf00      	nop
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40010000 	.word	0x40010000
 8005650:	40010400 	.word	0x40010400

08005654 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	f023 0201 	bic.w	r2, r3, #1
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4a28      	ldr	r2, [pc, #160]	; (8005720 <TIM_TI1_SetConfig+0xcc>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d01b      	beq.n	80056ba <TIM_TI1_SetConfig+0x66>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005688:	d017      	beq.n	80056ba <TIM_TI1_SetConfig+0x66>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4a25      	ldr	r2, [pc, #148]	; (8005724 <TIM_TI1_SetConfig+0xd0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d013      	beq.n	80056ba <TIM_TI1_SetConfig+0x66>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4a24      	ldr	r2, [pc, #144]	; (8005728 <TIM_TI1_SetConfig+0xd4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00f      	beq.n	80056ba <TIM_TI1_SetConfig+0x66>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4a23      	ldr	r2, [pc, #140]	; (800572c <TIM_TI1_SetConfig+0xd8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00b      	beq.n	80056ba <TIM_TI1_SetConfig+0x66>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4a22      	ldr	r2, [pc, #136]	; (8005730 <TIM_TI1_SetConfig+0xdc>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d007      	beq.n	80056ba <TIM_TI1_SetConfig+0x66>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4a21      	ldr	r2, [pc, #132]	; (8005734 <TIM_TI1_SetConfig+0xe0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d003      	beq.n	80056ba <TIM_TI1_SetConfig+0x66>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4a20      	ldr	r2, [pc, #128]	; (8005738 <TIM_TI1_SetConfig+0xe4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d101      	bne.n	80056be <TIM_TI1_SetConfig+0x6a>
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <TIM_TI1_SetConfig+0x6c>
 80056be:	2300      	movs	r3, #0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d008      	beq.n	80056d6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f023 0303 	bic.w	r3, r3, #3
 80056ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	e003      	b.n	80056de <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f043 0301 	orr.w	r3, r3, #1
 80056dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	011b      	lsls	r3, r3, #4
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f023 030a 	bic.w	r3, r3, #10
 80056f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f003 030a 	and.w	r3, r3, #10
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	4313      	orrs	r3, r2
 8005704:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	621a      	str	r2, [r3, #32]
}
 8005712:	bf00      	nop
 8005714:	371c      	adds	r7, #28
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	40010000 	.word	0x40010000
 8005724:	40000400 	.word	0x40000400
 8005728:	40000800 	.word	0x40000800
 800572c:	40000c00 	.word	0x40000c00
 8005730:	40010400 	.word	0x40010400
 8005734:	40014000 	.word	0x40014000
 8005738:	40001800 	.word	0x40001800

0800573c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	f023 0201 	bic.w	r2, r3, #1
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	011b      	lsls	r3, r3, #4
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	4313      	orrs	r3, r2
 8005770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f023 030a 	bic.w	r3, r3, #10
 8005778:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	4313      	orrs	r3, r2
 8005780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	621a      	str	r2, [r3, #32]
}
 800578e:	bf00      	nop
 8005790:	371c      	adds	r7, #28
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800579a:	b480      	push	{r7}
 800579c:	b087      	sub	sp, #28
 800579e:	af00      	add	r7, sp, #0
 80057a0:	60f8      	str	r0, [r7, #12]
 80057a2:	60b9      	str	r1, [r7, #8]
 80057a4:	607a      	str	r2, [r7, #4]
 80057a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	f023 0210 	bic.w	r2, r3, #16
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	031b      	lsls	r3, r3, #12
 80057de:	b29b      	uxth	r3, r3
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	011b      	lsls	r3, r3, #4
 80057f2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	621a      	str	r2, [r3, #32]
}
 8005808:	bf00      	nop
 800580a:	371c      	adds	r7, #28
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	f023 0210 	bic.w	r2, r3, #16
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800583e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	031b      	lsls	r3, r3, #12
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	4313      	orrs	r3, r2
 8005848:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005850:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	011b      	lsls	r3, r3, #4
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	4313      	orrs	r3, r2
 800585a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	621a      	str	r2, [r3, #32]
}
 8005868:	bf00      	nop
 800586a:	371c      	adds	r7, #28
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f023 0303 	bic.w	r3, r3, #3
 80058a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	011b      	lsls	r3, r3, #4
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80058c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	021b      	lsls	r3, r3, #8
 80058ca:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	621a      	str	r2, [r3, #32]
}
 80058e0:	bf00      	nop
 80058e2:	371c      	adds	r7, #28
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005918:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	021b      	lsls	r3, r3, #8
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	4313      	orrs	r3, r2
 8005922:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800592a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	031b      	lsls	r3, r3, #12
 8005930:	b29b      	uxth	r3, r3
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	4313      	orrs	r3, r2
 8005936:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800593e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	031b      	lsls	r3, r3, #12
 8005944:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	4313      	orrs	r3, r2
 800594c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	621a      	str	r2, [r3, #32]
}
 800595a:	bf00      	nop
 800595c:	371c      	adds	r7, #28
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005966:	b480      	push	{r7}
 8005968:	b085      	sub	sp, #20
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	f043 0307 	orr.w	r3, r3, #7
 8005988:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	609a      	str	r2, [r3, #8]
}
 8005990:	bf00      	nop
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
 80059a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	021a      	lsls	r2, r3, #8
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	431a      	orrs	r2, r3
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	609a      	str	r2, [r3, #8]
}
 80059d0:	bf00      	nop
 80059d2:	371c      	adds	r7, #28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f003 031f 	and.w	r3, r3, #31
 80059ee:	2201      	movs	r2, #1
 80059f0:	fa02 f303 	lsl.w	r3, r2, r3
 80059f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6a1a      	ldr	r2, [r3, #32]
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	43db      	mvns	r3, r3
 80059fe:	401a      	ands	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a1a      	ldr	r2, [r3, #32]
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	f003 031f 	and.w	r3, r3, #31
 8005a0e:	6879      	ldr	r1, [r7, #4]
 8005a10:	fa01 f303 	lsl.w	r3, r1, r3
 8005a14:	431a      	orrs	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	621a      	str	r2, [r3, #32]
}
 8005a1a:	bf00      	nop
 8005a1c:	371c      	adds	r7, #28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
	...

08005a28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d101      	bne.n	8005a40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	e05a      	b.n	8005af6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a21      	ldr	r2, [pc, #132]	; (8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d022      	beq.n	8005aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a8c:	d01d      	beq.n	8005aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a1d      	ldr	r2, [pc, #116]	; (8005b08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d018      	beq.n	8005aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a1b      	ldr	r2, [pc, #108]	; (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d013      	beq.n	8005aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a1a      	ldr	r2, [pc, #104]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d00e      	beq.n	8005aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a18      	ldr	r2, [pc, #96]	; (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d009      	beq.n	8005aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a17      	ldr	r2, [pc, #92]	; (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d004      	beq.n	8005aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a15      	ldr	r2, [pc, #84]	; (8005b1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d10c      	bne.n	8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ad0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	40010000 	.word	0x40010000
 8005b08:	40000400 	.word	0x40000400
 8005b0c:	40000800 	.word	0x40000800
 8005b10:	40000c00 	.word	0x40000c00
 8005b14:	40010400 	.word	0x40010400
 8005b18:	40014000 	.word	0x40014000
 8005b1c:	40001800 	.word	0x40001800

08005b20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d101      	bne.n	8005b3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	e03d      	b.n	8005bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e03f      	b.n	8005c7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d106      	bne.n	8005c18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7fc fe86 	bl	8002924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2224      	movs	r2, #36	; 0x24
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68da      	ldr	r2, [r3, #12]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fe1f 	bl	8006874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691a      	ldr	r2, [r3, #16]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	695a      	ldr	r2, [r3, #20]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b08a      	sub	sp, #40	; 0x28
 8005c8a:	af02      	add	r7, sp, #8
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	60b9      	str	r1, [r7, #8]
 8005c90:	603b      	str	r3, [r7, #0]
 8005c92:	4613      	mov	r3, r2
 8005c94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c96:	2300      	movs	r3, #0
 8005c98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b20      	cmp	r3, #32
 8005ca4:	d17c      	bne.n	8005da0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <HAL_UART_Transmit+0x2c>
 8005cac:	88fb      	ldrh	r3, [r7, #6]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e075      	b.n	8005da2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_UART_Transmit+0x3e>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e06e      	b.n	8005da2 <HAL_UART_Transmit+0x11c>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2221      	movs	r2, #33	; 0x21
 8005cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cda:	f7fc ff83 	bl	8002be4 <HAL_GetTick>
 8005cde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	88fa      	ldrh	r2, [r7, #6]
 8005ce4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	88fa      	ldrh	r2, [r7, #6]
 8005cea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf4:	d108      	bne.n	8005d08 <HAL_UART_Transmit+0x82>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d104      	bne.n	8005d08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	61bb      	str	r3, [r7, #24]
 8005d06:	e003      	b.n	8005d10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d18:	e02a      	b.n	8005d70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2200      	movs	r2, #0
 8005d22:	2180      	movs	r1, #128	; 0x80
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 fb63 	bl	80063f0 <UART_WaitOnFlagUntilTimeout>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e036      	b.n	8005da2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10b      	bne.n	8005d52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	3302      	adds	r3, #2
 8005d4e:	61bb      	str	r3, [r7, #24]
 8005d50:	e007      	b.n	8005d62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	781a      	ldrb	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1cf      	bne.n	8005d1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2200      	movs	r2, #0
 8005d82:	2140      	movs	r1, #64	; 0x40
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 fb33 	bl	80063f0 <UART_WaitOnFlagUntilTimeout>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d001      	beq.n	8005d94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e006      	b.n	8005da2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2220      	movs	r2, #32
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	e000      	b.n	8005da2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005da0:	2302      	movs	r3, #2
  }
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3720      	adds	r7, #32
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b085      	sub	sp, #20
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	4613      	mov	r3, r2
 8005db6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b20      	cmp	r3, #32
 8005dc2:	d130      	bne.n	8005e26 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <HAL_UART_Transmit_IT+0x26>
 8005dca:	88fb      	ldrh	r3, [r7, #6]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e029      	b.n	8005e28 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d101      	bne.n	8005de2 <HAL_UART_Transmit_IT+0x38>
 8005dde:	2302      	movs	r3, #2
 8005de0:	e022      	b.n	8005e28 <HAL_UART_Transmit_IT+0x7e>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	88fa      	ldrh	r2, [r7, #6]
 8005df4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	88fa      	ldrh	r2, [r7, #6]
 8005dfa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2221      	movs	r2, #33	; 0x21
 8005e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68da      	ldr	r2, [r3, #12]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e20:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	e000      	b.n	8005e28 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005e26:	2302      	movs	r3, #2
  }
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b20      	cmp	r3, #32
 8005e4c:	d11d      	bne.n	8005e8a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <HAL_UART_Receive_IT+0x26>
 8005e54:	88fb      	ldrh	r3, [r7, #6]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e016      	b.n	8005e8c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_UART_Receive_IT+0x38>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e00f      	b.n	8005e8c <HAL_UART_Receive_IT+0x58>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e7a:	88fb      	ldrh	r3, [r7, #6]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	68b9      	ldr	r1, [r7, #8]
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 fb23 	bl	80064cc <UART_Start_Receive_IT>
 8005e86:	4603      	mov	r3, r0
 8005e88:	e000      	b.n	8005e8c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005e8a:	2302      	movs	r3, #2
  }
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b0ba      	sub	sp, #232	; 0xe8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005ed2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10f      	bne.n	8005efa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ede:	f003 0320 	and.w	r3, r3, #32
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d009      	beq.n	8005efa <HAL_UART_IRQHandler+0x66>
 8005ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eea:	f003 0320 	and.w	r3, r3, #32
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fc03 	bl	80066fe <UART_Receive_IT>
      return;
 8005ef8:	e256      	b.n	80063a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005efa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 80de 	beq.w	80060c0 <HAL_UART_IRQHandler+0x22c>
 8005f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d106      	bne.n	8005f1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f14:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 80d1 	beq.w	80060c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00b      	beq.n	8005f42 <HAL_UART_IRQHandler+0xae>
 8005f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d005      	beq.n	8005f42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	f043 0201 	orr.w	r2, r3, #1
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f46:	f003 0304 	and.w	r3, r3, #4
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00b      	beq.n	8005f66 <HAL_UART_IRQHandler+0xd2>
 8005f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d005      	beq.n	8005f66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	f043 0202 	orr.w	r2, r3, #2
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00b      	beq.n	8005f8a <HAL_UART_IRQHandler+0xf6>
 8005f72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d005      	beq.n	8005f8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	f043 0204 	orr.w	r2, r3, #4
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f8e:	f003 0308 	and.w	r3, r3, #8
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d011      	beq.n	8005fba <HAL_UART_IRQHandler+0x126>
 8005f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d105      	bne.n	8005fae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d005      	beq.n	8005fba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	f043 0208 	orr.w	r2, r3, #8
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 81ed 	beq.w	800639e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fc8:	f003 0320 	and.w	r3, r3, #32
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d008      	beq.n	8005fe2 <HAL_UART_IRQHandler+0x14e>
 8005fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fd4:	f003 0320 	and.w	r3, r3, #32
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d002      	beq.n	8005fe2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fb8e 	bl	80066fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fec:	2b40      	cmp	r3, #64	; 0x40
 8005fee:	bf0c      	ite	eq
 8005ff0:	2301      	moveq	r3, #1
 8005ff2:	2300      	movne	r3, #0
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	f003 0308 	and.w	r3, r3, #8
 8006002:	2b00      	cmp	r3, #0
 8006004:	d103      	bne.n	800600e <HAL_UART_IRQHandler+0x17a>
 8006006:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800600a:	2b00      	cmp	r3, #0
 800600c:	d04f      	beq.n	80060ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fa96 	bl	8006540 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601e:	2b40      	cmp	r3, #64	; 0x40
 8006020:	d141      	bne.n	80060a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3314      	adds	r3, #20
 8006028:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006030:	e853 3f00 	ldrex	r3, [r3]
 8006034:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006038:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800603c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	3314      	adds	r3, #20
 800604a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800604e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006052:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006056:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800605a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800605e:	e841 2300 	strex	r3, r2, [r1]
 8006062:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006066:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1d9      	bne.n	8006022 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006072:	2b00      	cmp	r3, #0
 8006074:	d013      	beq.n	800609e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607a:	4a7d      	ldr	r2, [pc, #500]	; (8006270 <HAL_UART_IRQHandler+0x3dc>)
 800607c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006082:	4618      	mov	r0, r3
 8006084:	f7fd faa1 	bl	80035ca <HAL_DMA_Abort_IT>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d016      	beq.n	80060bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006098:	4610      	mov	r0, r2
 800609a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800609c:	e00e      	b.n	80060bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f990 	bl	80063c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a4:	e00a      	b.n	80060bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f98c 	bl	80063c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ac:	e006      	b.n	80060bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f988 	bl	80063c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80060ba:	e170      	b.n	800639e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060bc:	bf00      	nop
    return;
 80060be:	e16e      	b.n	800639e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	f040 814a 	bne.w	800635e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80060ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ce:	f003 0310 	and.w	r3, r3, #16
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 8143 	beq.w	800635e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80060d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060dc:	f003 0310 	and.w	r3, r3, #16
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 813c 	beq.w	800635e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060e6:	2300      	movs	r3, #0
 80060e8:	60bb      	str	r3, [r7, #8]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	60bb      	str	r3, [r7, #8]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	60bb      	str	r3, [r7, #8]
 80060fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006106:	2b40      	cmp	r3, #64	; 0x40
 8006108:	f040 80b4 	bne.w	8006274 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006118:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 8140 	beq.w	80063a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006126:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800612a:	429a      	cmp	r2, r3
 800612c:	f080 8139 	bcs.w	80063a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006136:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006142:	f000 8088 	beq.w	8006256 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	330c      	adds	r3, #12
 800614c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006150:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006154:	e853 3f00 	ldrex	r3, [r3]
 8006158:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800615c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006164:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	330c      	adds	r3, #12
 800616e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006172:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800617e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006182:	e841 2300 	strex	r3, r2, [r1]
 8006186:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800618a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1d9      	bne.n	8006146 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3314      	adds	r3, #20
 8006198:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800619c:	e853 3f00 	ldrex	r3, [r3]
 80061a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061a4:	f023 0301 	bic.w	r3, r3, #1
 80061a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3314      	adds	r3, #20
 80061b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061c2:	e841 2300 	strex	r3, r2, [r1]
 80061c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1e1      	bne.n	8006192 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3314      	adds	r3, #20
 80061d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061d8:	e853 3f00 	ldrex	r3, [r3]
 80061dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3314      	adds	r3, #20
 80061ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061fa:	e841 2300 	strex	r3, r2, [r1]
 80061fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1e3      	bne.n	80061ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2220      	movs	r2, #32
 800620a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	330c      	adds	r3, #12
 800621a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800621e:	e853 3f00 	ldrex	r3, [r3]
 8006222:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006226:	f023 0310 	bic.w	r3, r3, #16
 800622a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	330c      	adds	r3, #12
 8006234:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006238:	65ba      	str	r2, [r7, #88]	; 0x58
 800623a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800623e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006240:	e841 2300 	strex	r3, r2, [r1]
 8006244:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1e3      	bne.n	8006214 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006250:	4618      	mov	r0, r3
 8006252:	f7fd f94a 	bl	80034ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800625e:	b29b      	uxth	r3, r3
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	b29b      	uxth	r3, r3
 8006264:	4619      	mov	r1, r3
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f8b6 	bl	80063d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800626c:	e099      	b.n	80063a2 <HAL_UART_IRQHandler+0x50e>
 800626e:	bf00      	nop
 8006270:	08006607 	.word	0x08006607
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800627c:	b29b      	uxth	r3, r3
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006288:	b29b      	uxth	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 808b 	beq.w	80063a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006290:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 8086 	beq.w	80063a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	330c      	adds	r3, #12
 80062a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	330c      	adds	r3, #12
 80062ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80062be:	647a      	str	r2, [r7, #68]	; 0x44
 80062c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062c6:	e841 2300 	strex	r3, r2, [r1]
 80062ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1e3      	bne.n	800629a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3314      	adds	r3, #20
 80062d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	623b      	str	r3, [r7, #32]
   return(result);
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	f023 0301 	bic.w	r3, r3, #1
 80062e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	3314      	adds	r3, #20
 80062f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062f6:	633a      	str	r2, [r7, #48]	; 0x30
 80062f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e3      	bne.n	80062d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2220      	movs	r2, #32
 800630e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	330c      	adds	r3, #12
 800631e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	e853 3f00 	ldrex	r3, [r3]
 8006326:	60fb      	str	r3, [r7, #12]
   return(result);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 0310 	bic.w	r3, r3, #16
 800632e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	330c      	adds	r3, #12
 8006338:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800633c:	61fa      	str	r2, [r7, #28]
 800633e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006340:	69b9      	ldr	r1, [r7, #24]
 8006342:	69fa      	ldr	r2, [r7, #28]
 8006344:	e841 2300 	strex	r3, r2, [r1]
 8006348:	617b      	str	r3, [r7, #20]
   return(result);
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1e3      	bne.n	8006318 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006350:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006354:	4619      	mov	r1, r3
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f83e 	bl	80063d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800635c:	e023      	b.n	80063a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800635e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006366:	2b00      	cmp	r3, #0
 8006368:	d009      	beq.n	800637e <HAL_UART_IRQHandler+0x4ea>
 800636a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800636e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f959 	bl	800662e <UART_Transmit_IT>
    return;
 800637c:	e014      	b.n	80063a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800637e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00e      	beq.n	80063a8 <HAL_UART_IRQHandler+0x514>
 800638a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800638e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006392:	2b00      	cmp	r3, #0
 8006394:	d008      	beq.n	80063a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f999 	bl	80066ce <UART_EndTransmit_IT>
    return;
 800639c:	e004      	b.n	80063a8 <HAL_UART_IRQHandler+0x514>
    return;
 800639e:	bf00      	nop
 80063a0:	e002      	b.n	80063a8 <HAL_UART_IRQHandler+0x514>
      return;
 80063a2:	bf00      	nop
 80063a4:	e000      	b.n	80063a8 <HAL_UART_IRQHandler+0x514>
      return;
 80063a6:	bf00      	nop
  }
}
 80063a8:	37e8      	adds	r7, #232	; 0xe8
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop

080063b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	460b      	mov	r3, r1
 80063e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b090      	sub	sp, #64	; 0x40
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	603b      	str	r3, [r7, #0]
 80063fc:	4613      	mov	r3, r2
 80063fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006400:	e050      	b.n	80064a4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006408:	d04c      	beq.n	80064a4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800640a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800640c:	2b00      	cmp	r3, #0
 800640e:	d007      	beq.n	8006420 <UART_WaitOnFlagUntilTimeout+0x30>
 8006410:	f7fc fbe8 	bl	8002be4 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800641c:	429a      	cmp	r2, r3
 800641e:	d241      	bcs.n	80064a4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	330c      	adds	r3, #12
 8006426:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	e853 3f00 	ldrex	r3, [r3]
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	330c      	adds	r3, #12
 800643e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006440:	637a      	str	r2, [r7, #52]	; 0x34
 8006442:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006444:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006448:	e841 2300 	strex	r3, r2, [r1]
 800644c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e5      	bne.n	8006420 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3314      	adds	r3, #20
 800645a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	e853 3f00 	ldrex	r3, [r3]
 8006462:	613b      	str	r3, [r7, #16]
   return(result);
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	f023 0301 	bic.w	r3, r3, #1
 800646a:	63bb      	str	r3, [r7, #56]	; 0x38
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3314      	adds	r3, #20
 8006472:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006474:	623a      	str	r2, [r7, #32]
 8006476:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006478:	69f9      	ldr	r1, [r7, #28]
 800647a:	6a3a      	ldr	r2, [r7, #32]
 800647c:	e841 2300 	strex	r3, r2, [r1]
 8006480:	61bb      	str	r3, [r7, #24]
   return(result);
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1e5      	bne.n	8006454 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2220      	movs	r2, #32
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2220      	movs	r2, #32
 8006494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e00f      	b.n	80064c4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	4013      	ands	r3, r2
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	bf0c      	ite	eq
 80064b4:	2301      	moveq	r3, #1
 80064b6:	2300      	movne	r3, #0
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	461a      	mov	r2, r3
 80064bc:	79fb      	ldrb	r3, [r7, #7]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d09f      	beq.n	8006402 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3740      	adds	r7, #64	; 0x40
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	4613      	mov	r3, r2
 80064d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	88fa      	ldrh	r2, [r7, #6]
 80064e4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	88fa      	ldrh	r2, [r7, #6]
 80064ea:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2222      	movs	r2, #34	; 0x22
 80064f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68da      	ldr	r2, [r3, #12]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006510:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	695a      	ldr	r2, [r3, #20]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f042 0201 	orr.w	r2, r2, #1
 8006520:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68da      	ldr	r2, [r3, #12]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f042 0220 	orr.w	r2, r2, #32
 8006530:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006540:	b480      	push	{r7}
 8006542:	b095      	sub	sp, #84	; 0x54
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	330c      	adds	r3, #12
 800654e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006552:	e853 3f00 	ldrex	r3, [r3]
 8006556:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800655e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	330c      	adds	r3, #12
 8006566:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006568:	643a      	str	r2, [r7, #64]	; 0x40
 800656a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800656e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006570:	e841 2300 	strex	r3, r2, [r1]
 8006574:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1e5      	bne.n	8006548 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3314      	adds	r3, #20
 8006582:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	e853 3f00 	ldrex	r3, [r3]
 800658a:	61fb      	str	r3, [r7, #28]
   return(result);
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	f023 0301 	bic.w	r3, r3, #1
 8006592:	64bb      	str	r3, [r7, #72]	; 0x48
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	3314      	adds	r3, #20
 800659a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800659c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800659e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065a4:	e841 2300 	strex	r3, r2, [r1]
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e5      	bne.n	800657c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d119      	bne.n	80065ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	330c      	adds	r3, #12
 80065be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	e853 3f00 	ldrex	r3, [r3]
 80065c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	f023 0310 	bic.w	r3, r3, #16
 80065ce:	647b      	str	r3, [r7, #68]	; 0x44
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	330c      	adds	r3, #12
 80065d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065d8:	61ba      	str	r2, [r7, #24]
 80065da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065dc:	6979      	ldr	r1, [r7, #20]
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	e841 2300 	strex	r3, r2, [r1]
 80065e4:	613b      	str	r3, [r7, #16]
   return(result);
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1e5      	bne.n	80065b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80065fa:	bf00      	nop
 80065fc:	3754      	adds	r7, #84	; 0x54
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b084      	sub	sp, #16
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006612:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f7ff fecf 	bl	80063c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006626:	bf00      	nop
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800662e:	b480      	push	{r7}
 8006630:	b085      	sub	sp, #20
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b21      	cmp	r3, #33	; 0x21
 8006640:	d13e      	bne.n	80066c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800664a:	d114      	bne.n	8006676 <UART_Transmit_IT+0x48>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d110      	bne.n	8006676 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	461a      	mov	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006668:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	1c9a      	adds	r2, r3, #2
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	621a      	str	r2, [r3, #32]
 8006674:	e008      	b.n	8006688 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	1c59      	adds	r1, r3, #1
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	6211      	str	r1, [r2, #32]
 8006680:	781a      	ldrb	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800668c:	b29b      	uxth	r3, r3
 800668e:	3b01      	subs	r3, #1
 8006690:	b29b      	uxth	r3, r3
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	4619      	mov	r1, r3
 8006696:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10f      	bne.n	80066bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68da      	ldr	r2, [r3, #12]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066bc:	2300      	movs	r3, #0
 80066be:	e000      	b.n	80066c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066c0:	2302      	movs	r3, #2
  }
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b082      	sub	sp, #8
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2220      	movs	r2, #32
 80066ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7ff fe5e 	bl	80063b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b08c      	sub	sp, #48	; 0x30
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b22      	cmp	r3, #34	; 0x22
 8006710:	f040 80ab 	bne.w	800686a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800671c:	d117      	bne.n	800674e <UART_Receive_IT+0x50>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d113      	bne.n	800674e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006726:	2300      	movs	r3, #0
 8006728:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	b29b      	uxth	r3, r3
 8006738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800673c:	b29a      	uxth	r2, r3
 800673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006740:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006746:	1c9a      	adds	r2, r3, #2
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	629a      	str	r2, [r3, #40]	; 0x28
 800674c:	e026      	b.n	800679c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006752:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006754:	2300      	movs	r3, #0
 8006756:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006760:	d007      	beq.n	8006772 <UART_Receive_IT+0x74>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10a      	bne.n	8006780 <UART_Receive_IT+0x82>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d106      	bne.n	8006780 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	b2da      	uxtb	r2, r3
 800677a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	e008      	b.n	8006792 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	b2db      	uxtb	r3, r3
 8006788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800678c:	b2da      	uxtb	r2, r3
 800678e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006790:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	3b01      	subs	r3, #1
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	4619      	mov	r1, r3
 80067aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d15a      	bne.n	8006866 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 0220 	bic.w	r2, r2, #32
 80067be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	695a      	ldr	r2, [r3, #20]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0201 	bic.w	r2, r2, #1
 80067de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2220      	movs	r2, #32
 80067e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d135      	bne.n	800685c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	330c      	adds	r3, #12
 80067fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	e853 3f00 	ldrex	r3, [r3]
 8006804:	613b      	str	r3, [r7, #16]
   return(result);
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f023 0310 	bic.w	r3, r3, #16
 800680c:	627b      	str	r3, [r7, #36]	; 0x24
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	330c      	adds	r3, #12
 8006814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006816:	623a      	str	r2, [r7, #32]
 8006818:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681a:	69f9      	ldr	r1, [r7, #28]
 800681c:	6a3a      	ldr	r2, [r7, #32]
 800681e:	e841 2300 	strex	r3, r2, [r1]
 8006822:	61bb      	str	r3, [r7, #24]
   return(result);
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1e5      	bne.n	80067f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0310 	and.w	r3, r3, #16
 8006834:	2b10      	cmp	r3, #16
 8006836:	d10a      	bne.n	800684e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006838:	2300      	movs	r3, #0
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006852:	4619      	mov	r1, r3
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f7ff fdbf 	bl	80063d8 <HAL_UARTEx_RxEventCallback>
 800685a:	e002      	b.n	8006862 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7fb fc7f 	bl	8002160 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	e002      	b.n	800686c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	e000      	b.n	800686c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800686a:	2302      	movs	r3, #2
  }
}
 800686c:	4618      	mov	r0, r3
 800686e:	3730      	adds	r7, #48	; 0x30
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006878:	b09f      	sub	sp, #124	; 0x7c
 800687a:	af00      	add	r7, sp, #0
 800687c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800687e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800688a:	68d9      	ldr	r1, [r3, #12]
 800688c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	ea40 0301 	orr.w	r3, r0, r1
 8006894:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006898:	689a      	ldr	r2, [r3, #8]
 800689a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	431a      	orrs	r2, r3
 80068a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	431a      	orrs	r2, r3
 80068a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80068ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80068b8:	f021 010c 	bic.w	r1, r1, #12
 80068bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068c2:	430b      	orrs	r3, r1
 80068c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80068d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d2:	6999      	ldr	r1, [r3, #24]
 80068d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	ea40 0301 	orr.w	r3, r0, r1
 80068dc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	4bc5      	ldr	r3, [pc, #788]	; (8006bf8 <UART_SetConfig+0x384>)
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d004      	beq.n	80068f2 <UART_SetConfig+0x7e>
 80068e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	4bc3      	ldr	r3, [pc, #780]	; (8006bfc <UART_SetConfig+0x388>)
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d103      	bne.n	80068fa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068f2:	f7fd fc9f 	bl	8004234 <HAL_RCC_GetPCLK2Freq>
 80068f6:	6778      	str	r0, [r7, #116]	; 0x74
 80068f8:	e002      	b.n	8006900 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068fa:	f7fd fc87 	bl	800420c <HAL_RCC_GetPCLK1Freq>
 80068fe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006902:	69db      	ldr	r3, [r3, #28]
 8006904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006908:	f040 80b6 	bne.w	8006a78 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800690c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800690e:	461c      	mov	r4, r3
 8006910:	f04f 0500 	mov.w	r5, #0
 8006914:	4622      	mov	r2, r4
 8006916:	462b      	mov	r3, r5
 8006918:	1891      	adds	r1, r2, r2
 800691a:	6439      	str	r1, [r7, #64]	; 0x40
 800691c:	415b      	adcs	r3, r3
 800691e:	647b      	str	r3, [r7, #68]	; 0x44
 8006920:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006924:	1912      	adds	r2, r2, r4
 8006926:	eb45 0303 	adc.w	r3, r5, r3
 800692a:	f04f 0000 	mov.w	r0, #0
 800692e:	f04f 0100 	mov.w	r1, #0
 8006932:	00d9      	lsls	r1, r3, #3
 8006934:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006938:	00d0      	lsls	r0, r2, #3
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	1911      	adds	r1, r2, r4
 8006940:	6639      	str	r1, [r7, #96]	; 0x60
 8006942:	416b      	adcs	r3, r5
 8006944:	667b      	str	r3, [r7, #100]	; 0x64
 8006946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	461a      	mov	r2, r3
 800694c:	f04f 0300 	mov.w	r3, #0
 8006950:	1891      	adds	r1, r2, r2
 8006952:	63b9      	str	r1, [r7, #56]	; 0x38
 8006954:	415b      	adcs	r3, r3
 8006956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006958:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800695c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006960:	f7fa f942 	bl	8000be8 <__aeabi_uldivmod>
 8006964:	4602      	mov	r2, r0
 8006966:	460b      	mov	r3, r1
 8006968:	4ba5      	ldr	r3, [pc, #660]	; (8006c00 <UART_SetConfig+0x38c>)
 800696a:	fba3 2302 	umull	r2, r3, r3, r2
 800696e:	095b      	lsrs	r3, r3, #5
 8006970:	011e      	lsls	r6, r3, #4
 8006972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006974:	461c      	mov	r4, r3
 8006976:	f04f 0500 	mov.w	r5, #0
 800697a:	4622      	mov	r2, r4
 800697c:	462b      	mov	r3, r5
 800697e:	1891      	adds	r1, r2, r2
 8006980:	6339      	str	r1, [r7, #48]	; 0x30
 8006982:	415b      	adcs	r3, r3
 8006984:	637b      	str	r3, [r7, #52]	; 0x34
 8006986:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800698a:	1912      	adds	r2, r2, r4
 800698c:	eb45 0303 	adc.w	r3, r5, r3
 8006990:	f04f 0000 	mov.w	r0, #0
 8006994:	f04f 0100 	mov.w	r1, #0
 8006998:	00d9      	lsls	r1, r3, #3
 800699a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800699e:	00d0      	lsls	r0, r2, #3
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	1911      	adds	r1, r2, r4
 80069a6:	65b9      	str	r1, [r7, #88]	; 0x58
 80069a8:	416b      	adcs	r3, r5
 80069aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	461a      	mov	r2, r3
 80069b2:	f04f 0300 	mov.w	r3, #0
 80069b6:	1891      	adds	r1, r2, r2
 80069b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80069ba:	415b      	adcs	r3, r3
 80069bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80069c6:	f7fa f90f 	bl	8000be8 <__aeabi_uldivmod>
 80069ca:	4602      	mov	r2, r0
 80069cc:	460b      	mov	r3, r1
 80069ce:	4b8c      	ldr	r3, [pc, #560]	; (8006c00 <UART_SetConfig+0x38c>)
 80069d0:	fba3 1302 	umull	r1, r3, r3, r2
 80069d4:	095b      	lsrs	r3, r3, #5
 80069d6:	2164      	movs	r1, #100	; 0x64
 80069d8:	fb01 f303 	mul.w	r3, r1, r3
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	00db      	lsls	r3, r3, #3
 80069e0:	3332      	adds	r3, #50	; 0x32
 80069e2:	4a87      	ldr	r2, [pc, #540]	; (8006c00 <UART_SetConfig+0x38c>)
 80069e4:	fba2 2303 	umull	r2, r3, r2, r3
 80069e8:	095b      	lsrs	r3, r3, #5
 80069ea:	005b      	lsls	r3, r3, #1
 80069ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069f0:	441e      	add	r6, r3
 80069f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069f4:	4618      	mov	r0, r3
 80069f6:	f04f 0100 	mov.w	r1, #0
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	1894      	adds	r4, r2, r2
 8006a00:	623c      	str	r4, [r7, #32]
 8006a02:	415b      	adcs	r3, r3
 8006a04:	627b      	str	r3, [r7, #36]	; 0x24
 8006a06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a0a:	1812      	adds	r2, r2, r0
 8006a0c:	eb41 0303 	adc.w	r3, r1, r3
 8006a10:	f04f 0400 	mov.w	r4, #0
 8006a14:	f04f 0500 	mov.w	r5, #0
 8006a18:	00dd      	lsls	r5, r3, #3
 8006a1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a1e:	00d4      	lsls	r4, r2, #3
 8006a20:	4622      	mov	r2, r4
 8006a22:	462b      	mov	r3, r5
 8006a24:	1814      	adds	r4, r2, r0
 8006a26:	653c      	str	r4, [r7, #80]	; 0x50
 8006a28:	414b      	adcs	r3, r1
 8006a2a:	657b      	str	r3, [r7, #84]	; 0x54
 8006a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	461a      	mov	r2, r3
 8006a32:	f04f 0300 	mov.w	r3, #0
 8006a36:	1891      	adds	r1, r2, r2
 8006a38:	61b9      	str	r1, [r7, #24]
 8006a3a:	415b      	adcs	r3, r3
 8006a3c:	61fb      	str	r3, [r7, #28]
 8006a3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a42:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006a46:	f7fa f8cf 	bl	8000be8 <__aeabi_uldivmod>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4b6c      	ldr	r3, [pc, #432]	; (8006c00 <UART_SetConfig+0x38c>)
 8006a50:	fba3 1302 	umull	r1, r3, r3, r2
 8006a54:	095b      	lsrs	r3, r3, #5
 8006a56:	2164      	movs	r1, #100	; 0x64
 8006a58:	fb01 f303 	mul.w	r3, r1, r3
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	3332      	adds	r3, #50	; 0x32
 8006a62:	4a67      	ldr	r2, [pc, #412]	; (8006c00 <UART_SetConfig+0x38c>)
 8006a64:	fba2 2303 	umull	r2, r3, r2, r3
 8006a68:	095b      	lsrs	r3, r3, #5
 8006a6a:	f003 0207 	and.w	r2, r3, #7
 8006a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4432      	add	r2, r6
 8006a74:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a76:	e0b9      	b.n	8006bec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a7a:	461c      	mov	r4, r3
 8006a7c:	f04f 0500 	mov.w	r5, #0
 8006a80:	4622      	mov	r2, r4
 8006a82:	462b      	mov	r3, r5
 8006a84:	1891      	adds	r1, r2, r2
 8006a86:	6139      	str	r1, [r7, #16]
 8006a88:	415b      	adcs	r3, r3
 8006a8a:	617b      	str	r3, [r7, #20]
 8006a8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006a90:	1912      	adds	r2, r2, r4
 8006a92:	eb45 0303 	adc.w	r3, r5, r3
 8006a96:	f04f 0000 	mov.w	r0, #0
 8006a9a:	f04f 0100 	mov.w	r1, #0
 8006a9e:	00d9      	lsls	r1, r3, #3
 8006aa0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006aa4:	00d0      	lsls	r0, r2, #3
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	eb12 0804 	adds.w	r8, r2, r4
 8006aae:	eb43 0905 	adc.w	r9, r3, r5
 8006ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f04f 0100 	mov.w	r1, #0
 8006abc:	f04f 0200 	mov.w	r2, #0
 8006ac0:	f04f 0300 	mov.w	r3, #0
 8006ac4:	008b      	lsls	r3, r1, #2
 8006ac6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006aca:	0082      	lsls	r2, r0, #2
 8006acc:	4640      	mov	r0, r8
 8006ace:	4649      	mov	r1, r9
 8006ad0:	f7fa f88a 	bl	8000be8 <__aeabi_uldivmod>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	4b49      	ldr	r3, [pc, #292]	; (8006c00 <UART_SetConfig+0x38c>)
 8006ada:	fba3 2302 	umull	r2, r3, r3, r2
 8006ade:	095b      	lsrs	r3, r3, #5
 8006ae0:	011e      	lsls	r6, r3, #4
 8006ae2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f04f 0100 	mov.w	r1, #0
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	1894      	adds	r4, r2, r2
 8006af0:	60bc      	str	r4, [r7, #8]
 8006af2:	415b      	adcs	r3, r3
 8006af4:	60fb      	str	r3, [r7, #12]
 8006af6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006afa:	1812      	adds	r2, r2, r0
 8006afc:	eb41 0303 	adc.w	r3, r1, r3
 8006b00:	f04f 0400 	mov.w	r4, #0
 8006b04:	f04f 0500 	mov.w	r5, #0
 8006b08:	00dd      	lsls	r5, r3, #3
 8006b0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b0e:	00d4      	lsls	r4, r2, #3
 8006b10:	4622      	mov	r2, r4
 8006b12:	462b      	mov	r3, r5
 8006b14:	1814      	adds	r4, r2, r0
 8006b16:	64bc      	str	r4, [r7, #72]	; 0x48
 8006b18:	414b      	adcs	r3, r1
 8006b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f04f 0100 	mov.w	r1, #0
 8006b26:	f04f 0200 	mov.w	r2, #0
 8006b2a:	f04f 0300 	mov.w	r3, #0
 8006b2e:	008b      	lsls	r3, r1, #2
 8006b30:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b34:	0082      	lsls	r2, r0, #2
 8006b36:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006b3a:	f7fa f855 	bl	8000be8 <__aeabi_uldivmod>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	460b      	mov	r3, r1
 8006b42:	4b2f      	ldr	r3, [pc, #188]	; (8006c00 <UART_SetConfig+0x38c>)
 8006b44:	fba3 1302 	umull	r1, r3, r3, r2
 8006b48:	095b      	lsrs	r3, r3, #5
 8006b4a:	2164      	movs	r1, #100	; 0x64
 8006b4c:	fb01 f303 	mul.w	r3, r1, r3
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	011b      	lsls	r3, r3, #4
 8006b54:	3332      	adds	r3, #50	; 0x32
 8006b56:	4a2a      	ldr	r2, [pc, #168]	; (8006c00 <UART_SetConfig+0x38c>)
 8006b58:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5c:	095b      	lsrs	r3, r3, #5
 8006b5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b62:	441e      	add	r6, r3
 8006b64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b66:	4618      	mov	r0, r3
 8006b68:	f04f 0100 	mov.w	r1, #0
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	1894      	adds	r4, r2, r2
 8006b72:	603c      	str	r4, [r7, #0]
 8006b74:	415b      	adcs	r3, r3
 8006b76:	607b      	str	r3, [r7, #4]
 8006b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b7c:	1812      	adds	r2, r2, r0
 8006b7e:	eb41 0303 	adc.w	r3, r1, r3
 8006b82:	f04f 0400 	mov.w	r4, #0
 8006b86:	f04f 0500 	mov.w	r5, #0
 8006b8a:	00dd      	lsls	r5, r3, #3
 8006b8c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b90:	00d4      	lsls	r4, r2, #3
 8006b92:	4622      	mov	r2, r4
 8006b94:	462b      	mov	r3, r5
 8006b96:	eb12 0a00 	adds.w	sl, r2, r0
 8006b9a:	eb43 0b01 	adc.w	fp, r3, r1
 8006b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f04f 0100 	mov.w	r1, #0
 8006ba8:	f04f 0200 	mov.w	r2, #0
 8006bac:	f04f 0300 	mov.w	r3, #0
 8006bb0:	008b      	lsls	r3, r1, #2
 8006bb2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006bb6:	0082      	lsls	r2, r0, #2
 8006bb8:	4650      	mov	r0, sl
 8006bba:	4659      	mov	r1, fp
 8006bbc:	f7fa f814 	bl	8000be8 <__aeabi_uldivmod>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4b0e      	ldr	r3, [pc, #56]	; (8006c00 <UART_SetConfig+0x38c>)
 8006bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8006bca:	095b      	lsrs	r3, r3, #5
 8006bcc:	2164      	movs	r1, #100	; 0x64
 8006bce:	fb01 f303 	mul.w	r3, r1, r3
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	011b      	lsls	r3, r3, #4
 8006bd6:	3332      	adds	r3, #50	; 0x32
 8006bd8:	4a09      	ldr	r2, [pc, #36]	; (8006c00 <UART_SetConfig+0x38c>)
 8006bda:	fba2 2303 	umull	r2, r3, r2, r3
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	f003 020f 	and.w	r2, r3, #15
 8006be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4432      	add	r2, r6
 8006bea:	609a      	str	r2, [r3, #8]
}
 8006bec:	bf00      	nop
 8006bee:	377c      	adds	r7, #124	; 0x7c
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf6:	bf00      	nop
 8006bf8:	40011000 	.word	0x40011000
 8006bfc:	40011400 	.word	0x40011400
 8006c00:	51eb851f 	.word	0x51eb851f

08006c04 <__NVIC_SetPriority>:
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	6039      	str	r1, [r7, #0]
 8006c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	db0a      	blt.n	8006c2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	b2da      	uxtb	r2, r3
 8006c1c:	490c      	ldr	r1, [pc, #48]	; (8006c50 <__NVIC_SetPriority+0x4c>)
 8006c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c22:	0112      	lsls	r2, r2, #4
 8006c24:	b2d2      	uxtb	r2, r2
 8006c26:	440b      	add	r3, r1
 8006c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006c2c:	e00a      	b.n	8006c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	4908      	ldr	r1, [pc, #32]	; (8006c54 <__NVIC_SetPriority+0x50>)
 8006c34:	79fb      	ldrb	r3, [r7, #7]
 8006c36:	f003 030f 	and.w	r3, r3, #15
 8006c3a:	3b04      	subs	r3, #4
 8006c3c:	0112      	lsls	r2, r2, #4
 8006c3e:	b2d2      	uxtb	r2, r2
 8006c40:	440b      	add	r3, r1
 8006c42:	761a      	strb	r2, [r3, #24]
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	e000e100 	.word	0xe000e100
 8006c54:	e000ed00 	.word	0xe000ed00

08006c58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	f06f 0004 	mvn.w	r0, #4
 8006c62:	f7ff ffcf 	bl	8006c04 <__NVIC_SetPriority>
#endif
}
 8006c66:	bf00      	nop
 8006c68:	bd80      	pop	{r7, pc}
	...

08006c6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c72:	f3ef 8305 	mrs	r3, IPSR
 8006c76:	603b      	str	r3, [r7, #0]
  return(result);
 8006c78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006c7e:	f06f 0305 	mvn.w	r3, #5
 8006c82:	607b      	str	r3, [r7, #4]
 8006c84:	e00c      	b.n	8006ca0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006c86:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <osKernelInitialize+0x44>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d105      	bne.n	8006c9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006c8e:	4b08      	ldr	r3, [pc, #32]	; (8006cb0 <osKernelInitialize+0x44>)
 8006c90:	2201      	movs	r2, #1
 8006c92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006c94:	2300      	movs	r3, #0
 8006c96:	607b      	str	r3, [r7, #4]
 8006c98:	e002      	b.n	8006ca0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ca0:	687b      	ldr	r3, [r7, #4]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	200000c4 	.word	0x200000c4

08006cb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cba:	f3ef 8305 	mrs	r3, IPSR
 8006cbe:	603b      	str	r3, [r7, #0]
  return(result);
 8006cc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d003      	beq.n	8006cce <osKernelStart+0x1a>
    stat = osErrorISR;
 8006cc6:	f06f 0305 	mvn.w	r3, #5
 8006cca:	607b      	str	r3, [r7, #4]
 8006ccc:	e010      	b.n	8006cf0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006cce:	4b0b      	ldr	r3, [pc, #44]	; (8006cfc <osKernelStart+0x48>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d109      	bne.n	8006cea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006cd6:	f7ff ffbf 	bl	8006c58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006cda:	4b08      	ldr	r3, [pc, #32]	; (8006cfc <osKernelStart+0x48>)
 8006cdc:	2202      	movs	r2, #2
 8006cde:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006ce0:	f001 f866 	bl	8007db0 <vTaskStartScheduler>
      stat = osOK;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	607b      	str	r3, [r7, #4]
 8006ce8:	e002      	b.n	8006cf0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006cea:	f04f 33ff 	mov.w	r3, #4294967295
 8006cee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006cf0:	687b      	ldr	r3, [r7, #4]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	200000c4 	.word	0x200000c4

08006d00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b08e      	sub	sp, #56	; 0x38
 8006d04:	af04      	add	r7, sp, #16
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d10:	f3ef 8305 	mrs	r3, IPSR
 8006d14:	617b      	str	r3, [r7, #20]
  return(result);
 8006d16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d17e      	bne.n	8006e1a <osThreadNew+0x11a>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d07b      	beq.n	8006e1a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006d22:	2380      	movs	r3, #128	; 0x80
 8006d24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006d26:	2318      	movs	r3, #24
 8006d28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d045      	beq.n	8006dc6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d002      	beq.n	8006d48 <osThreadNew+0x48>
        name = attr->name;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d002      	beq.n	8006d56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d008      	beq.n	8006d6e <osThreadNew+0x6e>
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	2b38      	cmp	r3, #56	; 0x38
 8006d60:	d805      	bhi.n	8006d6e <osThreadNew+0x6e>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <osThreadNew+0x72>
        return (NULL);
 8006d6e:	2300      	movs	r3, #0
 8006d70:	e054      	b.n	8006e1c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	089b      	lsrs	r3, r3, #2
 8006d80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00e      	beq.n	8006da8 <osThreadNew+0xa8>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	2b5b      	cmp	r3, #91	; 0x5b
 8006d90:	d90a      	bls.n	8006da8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d006      	beq.n	8006da8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <osThreadNew+0xa8>
        mem = 1;
 8006da2:	2301      	movs	r3, #1
 8006da4:	61bb      	str	r3, [r7, #24]
 8006da6:	e010      	b.n	8006dca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10c      	bne.n	8006dca <osThreadNew+0xca>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d108      	bne.n	8006dca <osThreadNew+0xca>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d104      	bne.n	8006dca <osThreadNew+0xca>
          mem = 0;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	61bb      	str	r3, [r7, #24]
 8006dc4:	e001      	b.n	8006dca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d110      	bne.n	8006df2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006dd8:	9202      	str	r2, [sp, #8]
 8006dda:	9301      	str	r3, [sp, #4]
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	6a3a      	ldr	r2, [r7, #32]
 8006de4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 fe0c 	bl	8007a04 <xTaskCreateStatic>
 8006dec:	4603      	mov	r3, r0
 8006dee:	613b      	str	r3, [r7, #16]
 8006df0:	e013      	b.n	8006e1a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d110      	bne.n	8006e1a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006df8:	6a3b      	ldr	r3, [r7, #32]
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	f107 0310 	add.w	r3, r7, #16
 8006e00:	9301      	str	r3, [sp, #4]
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f000 fe57 	bl	8007abe <xTaskCreate>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d001      	beq.n	8006e1a <osThreadNew+0x11a>
            hTask = NULL;
 8006e16:	2300      	movs	r3, #0
 8006e18:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006e1a:	693b      	ldr	r3, [r7, #16]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3728      	adds	r7, #40	; 0x28
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e2c:	f3ef 8305 	mrs	r3, IPSR
 8006e30:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e32:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <osDelay+0x1c>
    stat = osErrorISR;
 8006e38:	f06f 0305 	mvn.w	r3, #5
 8006e3c:	60fb      	str	r3, [r7, #12]
 8006e3e:	e007      	b.n	8006e50 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 ff7c 	bl	8007d48 <vTaskDelay>
    }
  }

  return (stat);
 8006e50:	68fb      	ldr	r3, [r7, #12]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
	...

08006e5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	4a07      	ldr	r2, [pc, #28]	; (8006e88 <vApplicationGetIdleTaskMemory+0x2c>)
 8006e6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	4a06      	ldr	r2, [pc, #24]	; (8006e8c <vApplicationGetIdleTaskMemory+0x30>)
 8006e72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2280      	movs	r2, #128	; 0x80
 8006e78:	601a      	str	r2, [r3, #0]
}
 8006e7a:	bf00      	nop
 8006e7c:	3714      	adds	r7, #20
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	200000c8 	.word	0x200000c8
 8006e8c:	20000124 	.word	0x20000124

08006e90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4a07      	ldr	r2, [pc, #28]	; (8006ebc <vApplicationGetTimerTaskMemory+0x2c>)
 8006ea0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	4a06      	ldr	r2, [pc, #24]	; (8006ec0 <vApplicationGetTimerTaskMemory+0x30>)
 8006ea6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006eae:	601a      	str	r2, [r3, #0]
}
 8006eb0:	bf00      	nop
 8006eb2:	3714      	adds	r7, #20
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	20000324 	.word	0x20000324
 8006ec0:	20000380 	.word	0x20000380

08006ec4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f103 0208 	add.w	r2, r3, #8
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8006edc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f103 0208 	add.w	r2, r3, #8
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f103 0208 	add.w	r2, r3, #8
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f12:	bf00      	nop
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b085      	sub	sp, #20
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	689a      	ldr	r2, [r3, #8]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	683a      	ldr	r2, [r7, #0]
 8006f42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	683a      	ldr	r2, [r7, #0]
 8006f48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	1c5a      	adds	r2, r3, #1
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	601a      	str	r2, [r3, #0]
}
 8006f5a:	bf00      	nop
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f66:	b480      	push	{r7}
 8006f68:	b085      	sub	sp, #20
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
 8006f6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7c:	d103      	bne.n	8006f86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	e00c      	b.n	8006fa0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	3308      	adds	r3, #8
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	e002      	b.n	8006f94 <vListInsert+0x2e>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d2f6      	bcs.n	8006f8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	683a      	ldr	r2, [r7, #0]
 8006fba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	1c5a      	adds	r2, r3, #1
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	601a      	str	r2, [r3, #0]
}
 8006fcc:	bf00      	nop
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	6892      	ldr	r2, [r2, #8]
 8006fee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	6852      	ldr	r2, [r2, #4]
 8006ff8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	429a      	cmp	r2, r3
 8007002:	d103      	bne.n	800700c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	689a      	ldr	r2, [r3, #8]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	1e5a      	subs	r2, r3, #1
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3714      	adds	r7, #20
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10a      	bne.n	8007056 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007044:	f383 8811 	msr	BASEPRI, r3
 8007048:	f3bf 8f6f 	isb	sy
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007052:	bf00      	nop
 8007054:	e7fe      	b.n	8007054 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007056:	f002 f84d 	bl	80090f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007062:	68f9      	ldr	r1, [r7, #12]
 8007064:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007066:	fb01 f303 	mul.w	r3, r1, r3
 800706a:	441a      	add	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007086:	3b01      	subs	r3, #1
 8007088:	68f9      	ldr	r1, [r7, #12]
 800708a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800708c:	fb01 f303 	mul.w	r3, r1, r3
 8007090:	441a      	add	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	22ff      	movs	r2, #255	; 0xff
 800709a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	22ff      	movs	r2, #255	; 0xff
 80070a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d114      	bne.n	80070d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d01a      	beq.n	80070ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	3310      	adds	r3, #16
 80070b8:	4618      	mov	r0, r3
 80070ba:	f001 f903 	bl	80082c4 <xTaskRemoveFromEventList>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d012      	beq.n	80070ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80070c4:	4b0c      	ldr	r3, [pc, #48]	; (80070f8 <xQueueGenericReset+0xcc>)
 80070c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	e009      	b.n	80070ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3310      	adds	r3, #16
 80070da:	4618      	mov	r0, r3
 80070dc:	f7ff fef2 	bl	8006ec4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	3324      	adds	r3, #36	; 0x24
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7ff feed 	bl	8006ec4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80070ea:	f002 f833 	bl	8009154 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80070ee:	2301      	movs	r3, #1
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	e000ed04 	.word	0xe000ed04

080070fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08e      	sub	sp, #56	; 0x38
 8007100:	af02      	add	r7, sp, #8
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
 8007108:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10a      	bne.n	8007126 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007122:	bf00      	nop
 8007124:	e7fe      	b.n	8007124 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10a      	bne.n	8007142 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800712c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800713e:	bf00      	nop
 8007140:	e7fe      	b.n	8007140 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <xQueueGenericCreateStatic+0x52>
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d001      	beq.n	8007152 <xQueueGenericCreateStatic+0x56>
 800714e:	2301      	movs	r3, #1
 8007150:	e000      	b.n	8007154 <xQueueGenericCreateStatic+0x58>
 8007152:	2300      	movs	r3, #0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10a      	bne.n	800716e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715c:	f383 8811 	msr	BASEPRI, r3
 8007160:	f3bf 8f6f 	isb	sy
 8007164:	f3bf 8f4f 	dsb	sy
 8007168:	623b      	str	r3, [r7, #32]
}
 800716a:	bf00      	nop
 800716c:	e7fe      	b.n	800716c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d102      	bne.n	800717a <xQueueGenericCreateStatic+0x7e>
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <xQueueGenericCreateStatic+0x82>
 800717a:	2301      	movs	r3, #1
 800717c:	e000      	b.n	8007180 <xQueueGenericCreateStatic+0x84>
 800717e:	2300      	movs	r3, #0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10a      	bne.n	800719a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	61fb      	str	r3, [r7, #28]
}
 8007196:	bf00      	nop
 8007198:	e7fe      	b.n	8007198 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800719a:	2350      	movs	r3, #80	; 0x50
 800719c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	2b50      	cmp	r3, #80	; 0x50
 80071a2:	d00a      	beq.n	80071ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80071a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a8:	f383 8811 	msr	BASEPRI, r3
 80071ac:	f3bf 8f6f 	isb	sy
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	61bb      	str	r3, [r7, #24]
}
 80071b6:	bf00      	nop
 80071b8:	e7fe      	b.n	80071b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80071ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80071c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00d      	beq.n	80071e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80071c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80071ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80071d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	4613      	mov	r3, r2
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	68b9      	ldr	r1, [r7, #8]
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 f805 	bl	80071ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80071e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3730      	adds	r7, #48	; 0x30
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d103      	bne.n	8007208 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	601a      	str	r2, [r3, #0]
 8007206:	e002      	b.n	800720e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800721a:	2101      	movs	r1, #1
 800721c:	69b8      	ldr	r0, [r7, #24]
 800721e:	f7ff ff05 	bl	800702c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	78fa      	ldrb	r2, [r7, #3]
 8007226:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800722a:	bf00      	nop
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
	...

08007234 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b08e      	sub	sp, #56	; 0x38
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007242:	2300      	movs	r3, #0
 8007244:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10a      	bne.n	8007266 <xQueueGenericSend+0x32>
	__asm volatile
 8007250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007262:	bf00      	nop
 8007264:	e7fe      	b.n	8007264 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d103      	bne.n	8007274 <xQueueGenericSend+0x40>
 800726c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <xQueueGenericSend+0x44>
 8007274:	2301      	movs	r3, #1
 8007276:	e000      	b.n	800727a <xQueueGenericSend+0x46>
 8007278:	2300      	movs	r3, #0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10a      	bne.n	8007294 <xQueueGenericSend+0x60>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007290:	bf00      	nop
 8007292:	e7fe      	b.n	8007292 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	2b02      	cmp	r3, #2
 8007298:	d103      	bne.n	80072a2 <xQueueGenericSend+0x6e>
 800729a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d101      	bne.n	80072a6 <xQueueGenericSend+0x72>
 80072a2:	2301      	movs	r3, #1
 80072a4:	e000      	b.n	80072a8 <xQueueGenericSend+0x74>
 80072a6:	2300      	movs	r3, #0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10a      	bne.n	80072c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80072ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b0:	f383 8811 	msr	BASEPRI, r3
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	623b      	str	r3, [r7, #32]
}
 80072be:	bf00      	nop
 80072c0:	e7fe      	b.n	80072c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072c2:	f001 f9bd 	bl	8008640 <xTaskGetSchedulerState>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d102      	bne.n	80072d2 <xQueueGenericSend+0x9e>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <xQueueGenericSend+0xa2>
 80072d2:	2301      	movs	r3, #1
 80072d4:	e000      	b.n	80072d8 <xQueueGenericSend+0xa4>
 80072d6:	2300      	movs	r3, #0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10a      	bne.n	80072f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80072dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	61fb      	str	r3, [r7, #28]
}
 80072ee:	bf00      	nop
 80072f0:	e7fe      	b.n	80072f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072f2:	f001 feff 	bl	80090f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072fe:	429a      	cmp	r2, r3
 8007300:	d302      	bcc.n	8007308 <xQueueGenericSend+0xd4>
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	2b02      	cmp	r3, #2
 8007306:	d129      	bne.n	800735c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007308:	683a      	ldr	r2, [r7, #0]
 800730a:	68b9      	ldr	r1, [r7, #8]
 800730c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800730e:	f000 fa0b 	bl	8007728 <prvCopyDataToQueue>
 8007312:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	2b00      	cmp	r3, #0
 800731a:	d010      	beq.n	800733e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800731c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731e:	3324      	adds	r3, #36	; 0x24
 8007320:	4618      	mov	r0, r3
 8007322:	f000 ffcf 	bl	80082c4 <xTaskRemoveFromEventList>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d013      	beq.n	8007354 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800732c:	4b3f      	ldr	r3, [pc, #252]	; (800742c <xQueueGenericSend+0x1f8>)
 800732e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	e00a      	b.n	8007354 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800733e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007340:	2b00      	cmp	r3, #0
 8007342:	d007      	beq.n	8007354 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007344:	4b39      	ldr	r3, [pc, #228]	; (800742c <xQueueGenericSend+0x1f8>)
 8007346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007354:	f001 fefe 	bl	8009154 <vPortExitCritical>
				return pdPASS;
 8007358:	2301      	movs	r3, #1
 800735a:	e063      	b.n	8007424 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d103      	bne.n	800736a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007362:	f001 fef7 	bl	8009154 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007366:	2300      	movs	r3, #0
 8007368:	e05c      	b.n	8007424 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800736a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800736c:	2b00      	cmp	r3, #0
 800736e:	d106      	bne.n	800737e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007370:	f107 0314 	add.w	r3, r7, #20
 8007374:	4618      	mov	r0, r3
 8007376:	f001 f809 	bl	800838c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800737a:	2301      	movs	r3, #1
 800737c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800737e:	f001 fee9 	bl	8009154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007382:	f000 fd7b 	bl	8007e7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007386:	f001 feb5 	bl	80090f4 <vPortEnterCritical>
 800738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007390:	b25b      	sxtb	r3, r3
 8007392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007396:	d103      	bne.n	80073a0 <xQueueGenericSend+0x16c>
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	2200      	movs	r2, #0
 800739c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073a6:	b25b      	sxtb	r3, r3
 80073a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ac:	d103      	bne.n	80073b6 <xQueueGenericSend+0x182>
 80073ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073b6:	f001 fecd 	bl	8009154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073ba:	1d3a      	adds	r2, r7, #4
 80073bc:	f107 0314 	add.w	r3, r7, #20
 80073c0:	4611      	mov	r1, r2
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fff8 	bl	80083b8 <xTaskCheckForTimeOut>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d124      	bne.n	8007418 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80073ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073d0:	f000 faa2 	bl	8007918 <prvIsQueueFull>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d018      	beq.n	800740c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80073da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073dc:	3310      	adds	r3, #16
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	4611      	mov	r1, r2
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 ff1e 	bl	8008224 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80073e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073ea:	f000 fa2d 	bl	8007848 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80073ee:	f000 fd53 	bl	8007e98 <xTaskResumeAll>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f47f af7c 	bne.w	80072f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80073fa:	4b0c      	ldr	r3, [pc, #48]	; (800742c <xQueueGenericSend+0x1f8>)
 80073fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007400:	601a      	str	r2, [r3, #0]
 8007402:	f3bf 8f4f 	dsb	sy
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	e772      	b.n	80072f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800740c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800740e:	f000 fa1b 	bl	8007848 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007412:	f000 fd41 	bl	8007e98 <xTaskResumeAll>
 8007416:	e76c      	b.n	80072f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800741a:	f000 fa15 	bl	8007848 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800741e:	f000 fd3b 	bl	8007e98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007422:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007424:	4618      	mov	r0, r3
 8007426:	3738      	adds	r7, #56	; 0x38
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	e000ed04 	.word	0xe000ed04

08007430 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b090      	sub	sp, #64	; 0x40
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
 800743c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10a      	bne.n	800745e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800745a:	bf00      	nop
 800745c:	e7fe      	b.n	800745c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d103      	bne.n	800746c <xQueueGenericSendFromISR+0x3c>
 8007464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007468:	2b00      	cmp	r3, #0
 800746a:	d101      	bne.n	8007470 <xQueueGenericSendFromISR+0x40>
 800746c:	2301      	movs	r3, #1
 800746e:	e000      	b.n	8007472 <xQueueGenericSendFromISR+0x42>
 8007470:	2300      	movs	r3, #0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10a      	bne.n	800748c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007488:	bf00      	nop
 800748a:	e7fe      	b.n	800748a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	2b02      	cmp	r3, #2
 8007490:	d103      	bne.n	800749a <xQueueGenericSendFromISR+0x6a>
 8007492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007496:	2b01      	cmp	r3, #1
 8007498:	d101      	bne.n	800749e <xQueueGenericSendFromISR+0x6e>
 800749a:	2301      	movs	r3, #1
 800749c:	e000      	b.n	80074a0 <xQueueGenericSendFromISR+0x70>
 800749e:	2300      	movs	r3, #0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d10a      	bne.n	80074ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80074a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a8:	f383 8811 	msr	BASEPRI, r3
 80074ac:	f3bf 8f6f 	isb	sy
 80074b0:	f3bf 8f4f 	dsb	sy
 80074b4:	623b      	str	r3, [r7, #32]
}
 80074b6:	bf00      	nop
 80074b8:	e7fe      	b.n	80074b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074ba:	f001 fefd 	bl	80092b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80074be:	f3ef 8211 	mrs	r2, BASEPRI
 80074c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	61fa      	str	r2, [r7, #28]
 80074d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80074d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d302      	bcc.n	80074ec <xQueueGenericSendFromISR+0xbc>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d12f      	bne.n	800754c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80074ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	68b9      	ldr	r1, [r7, #8]
 8007500:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007502:	f000 f911 	bl	8007728 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007506:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800750a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800750e:	d112      	bne.n	8007536 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	2b00      	cmp	r3, #0
 8007516:	d016      	beq.n	8007546 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751a:	3324      	adds	r3, #36	; 0x24
 800751c:	4618      	mov	r0, r3
 800751e:	f000 fed1 	bl	80082c4 <xTaskRemoveFromEventList>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00e      	beq.n	8007546 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00b      	beq.n	8007546 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	e007      	b.n	8007546 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007536:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800753a:	3301      	adds	r3, #1
 800753c:	b2db      	uxtb	r3, r3
 800753e:	b25a      	sxtb	r2, r3
 8007540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007546:	2301      	movs	r3, #1
 8007548:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800754a:	e001      	b.n	8007550 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800754c:	2300      	movs	r3, #0
 800754e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007552:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800755a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800755c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800755e:	4618      	mov	r0, r3
 8007560:	3740      	adds	r7, #64	; 0x40
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
	...

08007568 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b08c      	sub	sp, #48	; 0x30
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007574:	2300      	movs	r3, #0
 8007576:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800757c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10a      	bne.n	8007598 <xQueueReceive+0x30>
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	623b      	str	r3, [r7, #32]
}
 8007594:	bf00      	nop
 8007596:	e7fe      	b.n	8007596 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d103      	bne.n	80075a6 <xQueueReceive+0x3e>
 800759e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <xQueueReceive+0x42>
 80075a6:	2301      	movs	r3, #1
 80075a8:	e000      	b.n	80075ac <xQueueReceive+0x44>
 80075aa:	2300      	movs	r3, #0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10a      	bne.n	80075c6 <xQueueReceive+0x5e>
	__asm volatile
 80075b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	61fb      	str	r3, [r7, #28]
}
 80075c2:	bf00      	nop
 80075c4:	e7fe      	b.n	80075c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075c6:	f001 f83b 	bl	8008640 <xTaskGetSchedulerState>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d102      	bne.n	80075d6 <xQueueReceive+0x6e>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <xQueueReceive+0x72>
 80075d6:	2301      	movs	r3, #1
 80075d8:	e000      	b.n	80075dc <xQueueReceive+0x74>
 80075da:	2300      	movs	r3, #0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10a      	bne.n	80075f6 <xQueueReceive+0x8e>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	61bb      	str	r3, [r7, #24]
}
 80075f2:	bf00      	nop
 80075f4:	e7fe      	b.n	80075f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075f6:	f001 fd7d 	bl	80090f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007602:	2b00      	cmp	r3, #0
 8007604:	d01f      	beq.n	8007646 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007606:	68b9      	ldr	r1, [r7, #8]
 8007608:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800760a:	f000 f8f7 	bl	80077fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	1e5a      	subs	r2, r3, #1
 8007612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007614:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00f      	beq.n	800763e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800761e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007620:	3310      	adds	r3, #16
 8007622:	4618      	mov	r0, r3
 8007624:	f000 fe4e 	bl	80082c4 <xTaskRemoveFromEventList>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d007      	beq.n	800763e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800762e:	4b3d      	ldr	r3, [pc, #244]	; (8007724 <xQueueReceive+0x1bc>)
 8007630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007634:	601a      	str	r2, [r3, #0]
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800763e:	f001 fd89 	bl	8009154 <vPortExitCritical>
				return pdPASS;
 8007642:	2301      	movs	r3, #1
 8007644:	e069      	b.n	800771a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d103      	bne.n	8007654 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800764c:	f001 fd82 	bl	8009154 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007650:	2300      	movs	r3, #0
 8007652:	e062      	b.n	800771a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007656:	2b00      	cmp	r3, #0
 8007658:	d106      	bne.n	8007668 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800765a:	f107 0310 	add.w	r3, r7, #16
 800765e:	4618      	mov	r0, r3
 8007660:	f000 fe94 	bl	800838c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007664:	2301      	movs	r3, #1
 8007666:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007668:	f001 fd74 	bl	8009154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800766c:	f000 fc06 	bl	8007e7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007670:	f001 fd40 	bl	80090f4 <vPortEnterCritical>
 8007674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007676:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800767a:	b25b      	sxtb	r3, r3
 800767c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007680:	d103      	bne.n	800768a <xQueueReceive+0x122>
 8007682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007684:	2200      	movs	r2, #0
 8007686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800768a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007690:	b25b      	sxtb	r3, r3
 8007692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007696:	d103      	bne.n	80076a0 <xQueueReceive+0x138>
 8007698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769a:	2200      	movs	r2, #0
 800769c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076a0:	f001 fd58 	bl	8009154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076a4:	1d3a      	adds	r2, r7, #4
 80076a6:	f107 0310 	add.w	r3, r7, #16
 80076aa:	4611      	mov	r1, r2
 80076ac:	4618      	mov	r0, r3
 80076ae:	f000 fe83 	bl	80083b8 <xTaskCheckForTimeOut>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d123      	bne.n	8007700 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076ba:	f000 f917 	bl	80078ec <prvIsQueueEmpty>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d017      	beq.n	80076f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80076c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c6:	3324      	adds	r3, #36	; 0x24
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	4611      	mov	r1, r2
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 fda9 	bl	8008224 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80076d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076d4:	f000 f8b8 	bl	8007848 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80076d8:	f000 fbde 	bl	8007e98 <xTaskResumeAll>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d189      	bne.n	80075f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80076e2:	4b10      	ldr	r3, [pc, #64]	; (8007724 <xQueueReceive+0x1bc>)
 80076e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	e780      	b.n	80075f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80076f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076f6:	f000 f8a7 	bl	8007848 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076fa:	f000 fbcd 	bl	8007e98 <xTaskResumeAll>
 80076fe:	e77a      	b.n	80075f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007702:	f000 f8a1 	bl	8007848 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007706:	f000 fbc7 	bl	8007e98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800770a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800770c:	f000 f8ee 	bl	80078ec <prvIsQueueEmpty>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	f43f af6f 	beq.w	80075f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007718:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800771a:	4618      	mov	r0, r3
 800771c:	3730      	adds	r7, #48	; 0x30
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	e000ed04 	.word	0xe000ed04

08007728 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007734:	2300      	movs	r3, #0
 8007736:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10d      	bne.n	8007762 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d14d      	bne.n	80077ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	4618      	mov	r0, r3
 8007754:	f000 ff92 	bl	800867c <xTaskPriorityDisinherit>
 8007758:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	609a      	str	r2, [r3, #8]
 8007760:	e043      	b.n	80077ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d119      	bne.n	800779c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6858      	ldr	r0, [r3, #4]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007770:	461a      	mov	r2, r3
 8007772:	68b9      	ldr	r1, [r7, #8]
 8007774:	f002 fa26 	bl	8009bc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007780:	441a      	add	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	429a      	cmp	r2, r3
 8007790:	d32b      	bcc.n	80077ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	605a      	str	r2, [r3, #4]
 800779a:	e026      	b.n	80077ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	68d8      	ldr	r0, [r3, #12]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a4:	461a      	mov	r2, r3
 80077a6:	68b9      	ldr	r1, [r7, #8]
 80077a8:	f002 fa0c 	bl	8009bc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	68da      	ldr	r2, [r3, #12]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b4:	425b      	negs	r3, r3
 80077b6:	441a      	add	r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	68da      	ldr	r2, [r3, #12]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d207      	bcs.n	80077d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	689a      	ldr	r2, [r3, #8]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d0:	425b      	negs	r3, r3
 80077d2:	441a      	add	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d105      	bne.n	80077ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	3b01      	subs	r3, #1
 80077e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	1c5a      	adds	r2, r3, #1
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80077f2:	697b      	ldr	r3, [r7, #20]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3718      	adds	r7, #24
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780a:	2b00      	cmp	r3, #0
 800780c:	d018      	beq.n	8007840 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	68da      	ldr	r2, [r3, #12]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007816:	441a      	add	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68da      	ldr	r2, [r3, #12]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	429a      	cmp	r2, r3
 8007826:	d303      	bcc.n	8007830 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68d9      	ldr	r1, [r3, #12]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007838:	461a      	mov	r2, r3
 800783a:	6838      	ldr	r0, [r7, #0]
 800783c:	f002 f9c2 	bl	8009bc4 <memcpy>
	}
}
 8007840:	bf00      	nop
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007850:	f001 fc50 	bl	80090f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800785a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800785c:	e011      	b.n	8007882 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007862:	2b00      	cmp	r3, #0
 8007864:	d012      	beq.n	800788c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	3324      	adds	r3, #36	; 0x24
 800786a:	4618      	mov	r0, r3
 800786c:	f000 fd2a 	bl	80082c4 <xTaskRemoveFromEventList>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007876:	f000 fe01 	bl	800847c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800787a:	7bfb      	ldrb	r3, [r7, #15]
 800787c:	3b01      	subs	r3, #1
 800787e:	b2db      	uxtb	r3, r3
 8007880:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007886:	2b00      	cmp	r3, #0
 8007888:	dce9      	bgt.n	800785e <prvUnlockQueue+0x16>
 800788a:	e000      	b.n	800788e <prvUnlockQueue+0x46>
					break;
 800788c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	22ff      	movs	r2, #255	; 0xff
 8007892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007896:	f001 fc5d 	bl	8009154 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800789a:	f001 fc2b 	bl	80090f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078a6:	e011      	b.n	80078cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d012      	beq.n	80078d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	3310      	adds	r3, #16
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 fd05 	bl	80082c4 <xTaskRemoveFromEventList>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80078c0:	f000 fddc 	bl	800847c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80078c4:	7bbb      	ldrb	r3, [r7, #14]
 80078c6:	3b01      	subs	r3, #1
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	dce9      	bgt.n	80078a8 <prvUnlockQueue+0x60>
 80078d4:	e000      	b.n	80078d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80078d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	22ff      	movs	r2, #255	; 0xff
 80078dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80078e0:	f001 fc38 	bl	8009154 <vPortExitCritical>
}
 80078e4:	bf00      	nop
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078f4:	f001 fbfe 	bl	80090f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d102      	bne.n	8007906 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007900:	2301      	movs	r3, #1
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	e001      	b.n	800790a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007906:	2300      	movs	r3, #0
 8007908:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800790a:	f001 fc23 	bl	8009154 <vPortExitCritical>

	return xReturn;
 800790e:	68fb      	ldr	r3, [r7, #12]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007920:	f001 fbe8 	bl	80090f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800792c:	429a      	cmp	r2, r3
 800792e:	d102      	bne.n	8007936 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007930:	2301      	movs	r3, #1
 8007932:	60fb      	str	r3, [r7, #12]
 8007934:	e001      	b.n	800793a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007936:	2300      	movs	r3, #0
 8007938:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800793a:	f001 fc0b 	bl	8009154 <vPortExitCritical>

	return xReturn;
 800793e:	68fb      	ldr	r3, [r7, #12]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007952:	2300      	movs	r3, #0
 8007954:	60fb      	str	r3, [r7, #12]
 8007956:	e014      	b.n	8007982 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007958:	4a0f      	ldr	r2, [pc, #60]	; (8007998 <vQueueAddToRegistry+0x50>)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10b      	bne.n	800797c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007964:	490c      	ldr	r1, [pc, #48]	; (8007998 <vQueueAddToRegistry+0x50>)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800796e:	4a0a      	ldr	r2, [pc, #40]	; (8007998 <vQueueAddToRegistry+0x50>)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	00db      	lsls	r3, r3, #3
 8007974:	4413      	add	r3, r2
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800797a:	e006      	b.n	800798a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3301      	adds	r3, #1
 8007980:	60fb      	str	r3, [r7, #12]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2b07      	cmp	r3, #7
 8007986:	d9e7      	bls.n	8007958 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007988:	bf00      	nop
 800798a:	bf00      	nop
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	20004c60 	.word	0x20004c60

0800799c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80079ac:	f001 fba2 	bl	80090f4 <vPortEnterCritical>
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079b6:	b25b      	sxtb	r3, r3
 80079b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079bc:	d103      	bne.n	80079c6 <vQueueWaitForMessageRestricted+0x2a>
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079cc:	b25b      	sxtb	r3, r3
 80079ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d2:	d103      	bne.n	80079dc <vQueueWaitForMessageRestricted+0x40>
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079dc:	f001 fbba 	bl	8009154 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d106      	bne.n	80079f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	3324      	adds	r3, #36	; 0x24
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	68b9      	ldr	r1, [r7, #8]
 80079f0:	4618      	mov	r0, r3
 80079f2:	f000 fc3b 	bl	800826c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80079f6:	6978      	ldr	r0, [r7, #20]
 80079f8:	f7ff ff26 	bl	8007848 <prvUnlockQueue>
	}
 80079fc:	bf00      	nop
 80079fe:	3718      	adds	r7, #24
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b08e      	sub	sp, #56	; 0x38
 8007a08:	af04      	add	r7, sp, #16
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
 8007a10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10a      	bne.n	8007a2e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	623b      	str	r3, [r7, #32]
}
 8007a2a:	bf00      	nop
 8007a2c:	e7fe      	b.n	8007a2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10a      	bne.n	8007a4a <xTaskCreateStatic+0x46>
	__asm volatile
 8007a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a38:	f383 8811 	msr	BASEPRI, r3
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	61fb      	str	r3, [r7, #28]
}
 8007a46:	bf00      	nop
 8007a48:	e7fe      	b.n	8007a48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a4a:	235c      	movs	r3, #92	; 0x5c
 8007a4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	2b5c      	cmp	r3, #92	; 0x5c
 8007a52:	d00a      	beq.n	8007a6a <xTaskCreateStatic+0x66>
	__asm volatile
 8007a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	61bb      	str	r3, [r7, #24]
}
 8007a66:	bf00      	nop
 8007a68:	e7fe      	b.n	8007a68 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007a6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d01e      	beq.n	8007ab0 <xTaskCreateStatic+0xac>
 8007a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d01b      	beq.n	8007ab0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	2202      	movs	r2, #2
 8007a86:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	9303      	str	r3, [sp, #12]
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	9302      	str	r3, [sp, #8]
 8007a92:	f107 0314 	add.w	r3, r7, #20
 8007a96:	9301      	str	r3, [sp, #4]
 8007a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	68b9      	ldr	r1, [r7, #8]
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f000 f850 	bl	8007b48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007aa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007aaa:	f000 f8dd 	bl	8007c68 <prvAddNewTaskToReadyList>
 8007aae:	e001      	b.n	8007ab4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ab4:	697b      	ldr	r3, [r7, #20]
	}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3728      	adds	r7, #40	; 0x28
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b08c      	sub	sp, #48	; 0x30
 8007ac2:	af04      	add	r7, sp, #16
 8007ac4:	60f8      	str	r0, [r7, #12]
 8007ac6:	60b9      	str	r1, [r7, #8]
 8007ac8:	603b      	str	r3, [r7, #0]
 8007aca:	4613      	mov	r3, r2
 8007acc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ace:	88fb      	ldrh	r3, [r7, #6]
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f001 fc30 	bl	8009338 <pvPortMalloc>
 8007ad8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00e      	beq.n	8007afe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ae0:	205c      	movs	r0, #92	; 0x5c
 8007ae2:	f001 fc29 	bl	8009338 <pvPortMalloc>
 8007ae6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	697a      	ldr	r2, [r7, #20]
 8007af2:	631a      	str	r2, [r3, #48]	; 0x30
 8007af4:	e005      	b.n	8007b02 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007af6:	6978      	ldr	r0, [r7, #20]
 8007af8:	f001 fcea 	bl	80094d0 <vPortFree>
 8007afc:	e001      	b.n	8007b02 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007afe:	2300      	movs	r3, #0
 8007b00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d017      	beq.n	8007b38 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b10:	88fa      	ldrh	r2, [r7, #6]
 8007b12:	2300      	movs	r3, #0
 8007b14:	9303      	str	r3, [sp, #12]
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	9302      	str	r3, [sp, #8]
 8007b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1c:	9301      	str	r3, [sp, #4]
 8007b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	68b9      	ldr	r1, [r7, #8]
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f000 f80e 	bl	8007b48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b2c:	69f8      	ldr	r0, [r7, #28]
 8007b2e:	f000 f89b 	bl	8007c68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b32:	2301      	movs	r3, #1
 8007b34:	61bb      	str	r3, [r7, #24]
 8007b36:	e002      	b.n	8007b3e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b38:	f04f 33ff 	mov.w	r3, #4294967295
 8007b3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b3e:	69bb      	ldr	r3, [r7, #24]
	}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3720      	adds	r7, #32
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b088      	sub	sp, #32
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
 8007b54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	461a      	mov	r2, r3
 8007b60:	21a5      	movs	r1, #165	; 0xa5
 8007b62:	f002 f83d 	bl	8009be0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007b70:	3b01      	subs	r3, #1
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4413      	add	r3, r2
 8007b76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	f023 0307 	bic.w	r3, r3, #7
 8007b7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	f003 0307 	and.w	r3, r3, #7
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00a      	beq.n	8007ba0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	617b      	str	r3, [r7, #20]
}
 8007b9c:	bf00      	nop
 8007b9e:	e7fe      	b.n	8007b9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d01f      	beq.n	8007be6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	61fb      	str	r3, [r7, #28]
 8007baa:	e012      	b.n	8007bd2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	7819      	ldrb	r1, [r3, #0]
 8007bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	4413      	add	r3, r2
 8007bba:	3334      	adds	r3, #52	; 0x34
 8007bbc:	460a      	mov	r2, r1
 8007bbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d006      	beq.n	8007bda <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	61fb      	str	r3, [r7, #28]
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	2b0f      	cmp	r3, #15
 8007bd6:	d9e9      	bls.n	8007bac <prvInitialiseNewTask+0x64>
 8007bd8:	e000      	b.n	8007bdc <prvInitialiseNewTask+0x94>
			{
				break;
 8007bda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007be4:	e003      	b.n	8007bee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf0:	2b37      	cmp	r3, #55	; 0x37
 8007bf2:	d901      	bls.n	8007bf8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007bf4:	2337      	movs	r3, #55	; 0x37
 8007bf6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bfc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c06:	2200      	movs	r2, #0
 8007c08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7ff f978 	bl	8006f04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c16:	3318      	adds	r3, #24
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7ff f973 	bl	8006f04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c36:	2200      	movs	r2, #0
 8007c38:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	68f9      	ldr	r1, [r7, #12]
 8007c46:	69b8      	ldr	r0, [r7, #24]
 8007c48:	f001 f928 	bl	8008e9c <pxPortInitialiseStack>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c50:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d002      	beq.n	8007c5e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c5e:	bf00      	nop
 8007c60:	3720      	adds	r7, #32
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
	...

08007c68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c70:	f001 fa40 	bl	80090f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c74:	4b2d      	ldr	r3, [pc, #180]	; (8007d2c <prvAddNewTaskToReadyList+0xc4>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	4a2c      	ldr	r2, [pc, #176]	; (8007d2c <prvAddNewTaskToReadyList+0xc4>)
 8007c7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c7e:	4b2c      	ldr	r3, [pc, #176]	; (8007d30 <prvAddNewTaskToReadyList+0xc8>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d109      	bne.n	8007c9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c86:	4a2a      	ldr	r2, [pc, #168]	; (8007d30 <prvAddNewTaskToReadyList+0xc8>)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c8c:	4b27      	ldr	r3, [pc, #156]	; (8007d2c <prvAddNewTaskToReadyList+0xc4>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d110      	bne.n	8007cb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c94:	f000 fc16 	bl	80084c4 <prvInitialiseTaskLists>
 8007c98:	e00d      	b.n	8007cb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c9a:	4b26      	ldr	r3, [pc, #152]	; (8007d34 <prvAddNewTaskToReadyList+0xcc>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d109      	bne.n	8007cb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ca2:	4b23      	ldr	r3, [pc, #140]	; (8007d30 <prvAddNewTaskToReadyList+0xc8>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d802      	bhi.n	8007cb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007cb0:	4a1f      	ldr	r2, [pc, #124]	; (8007d30 <prvAddNewTaskToReadyList+0xc8>)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007cb6:	4b20      	ldr	r3, [pc, #128]	; (8007d38 <prvAddNewTaskToReadyList+0xd0>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	4a1e      	ldr	r2, [pc, #120]	; (8007d38 <prvAddNewTaskToReadyList+0xd0>)
 8007cbe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007cc0:	4b1d      	ldr	r3, [pc, #116]	; (8007d38 <prvAddNewTaskToReadyList+0xd0>)
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ccc:	4b1b      	ldr	r3, [pc, #108]	; (8007d3c <prvAddNewTaskToReadyList+0xd4>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d903      	bls.n	8007cdc <prvAddNewTaskToReadyList+0x74>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd8:	4a18      	ldr	r2, [pc, #96]	; (8007d3c <prvAddNewTaskToReadyList+0xd4>)
 8007cda:	6013      	str	r3, [r2, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4413      	add	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4a15      	ldr	r2, [pc, #84]	; (8007d40 <prvAddNewTaskToReadyList+0xd8>)
 8007cea:	441a      	add	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	3304      	adds	r3, #4
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	4610      	mov	r0, r2
 8007cf4:	f7ff f913 	bl	8006f1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007cf8:	f001 fa2c 	bl	8009154 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007cfc:	4b0d      	ldr	r3, [pc, #52]	; (8007d34 <prvAddNewTaskToReadyList+0xcc>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00e      	beq.n	8007d22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d04:	4b0a      	ldr	r3, [pc, #40]	; (8007d30 <prvAddNewTaskToReadyList+0xc8>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d207      	bcs.n	8007d22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d12:	4b0c      	ldr	r3, [pc, #48]	; (8007d44 <prvAddNewTaskToReadyList+0xdc>)
 8007d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d18:	601a      	str	r2, [r3, #0]
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d22:	bf00      	nop
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20000c54 	.word	0x20000c54
 8007d30:	20000780 	.word	0x20000780
 8007d34:	20000c60 	.word	0x20000c60
 8007d38:	20000c70 	.word	0x20000c70
 8007d3c:	20000c5c 	.word	0x20000c5c
 8007d40:	20000784 	.word	0x20000784
 8007d44:	e000ed04 	.word	0xe000ed04

08007d48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007d50:	2300      	movs	r3, #0
 8007d52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d017      	beq.n	8007d8a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007d5a:	4b13      	ldr	r3, [pc, #76]	; (8007da8 <vTaskDelay+0x60>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00a      	beq.n	8007d78 <vTaskDelay+0x30>
	__asm volatile
 8007d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	60bb      	str	r3, [r7, #8]
}
 8007d74:	bf00      	nop
 8007d76:	e7fe      	b.n	8007d76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007d78:	f000 f880 	bl	8007e7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fcea 	bl	8008758 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d84:	f000 f888 	bl	8007e98 <xTaskResumeAll>
 8007d88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d107      	bne.n	8007da0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007d90:	4b06      	ldr	r3, [pc, #24]	; (8007dac <vTaskDelay+0x64>)
 8007d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d96:	601a      	str	r2, [r3, #0]
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007da0:	bf00      	nop
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	20000c7c 	.word	0x20000c7c
 8007dac:	e000ed04 	.word	0xe000ed04

08007db0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b08a      	sub	sp, #40	; 0x28
 8007db4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007db6:	2300      	movs	r3, #0
 8007db8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007dbe:	463a      	mov	r2, r7
 8007dc0:	1d39      	adds	r1, r7, #4
 8007dc2:	f107 0308 	add.w	r3, r7, #8
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7ff f848 	bl	8006e5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68ba      	ldr	r2, [r7, #8]
 8007dd2:	9202      	str	r2, [sp, #8]
 8007dd4:	9301      	str	r3, [sp, #4]
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	2300      	movs	r3, #0
 8007ddc:	460a      	mov	r2, r1
 8007dde:	4921      	ldr	r1, [pc, #132]	; (8007e64 <vTaskStartScheduler+0xb4>)
 8007de0:	4821      	ldr	r0, [pc, #132]	; (8007e68 <vTaskStartScheduler+0xb8>)
 8007de2:	f7ff fe0f 	bl	8007a04 <xTaskCreateStatic>
 8007de6:	4603      	mov	r3, r0
 8007de8:	4a20      	ldr	r2, [pc, #128]	; (8007e6c <vTaskStartScheduler+0xbc>)
 8007dea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007dec:	4b1f      	ldr	r3, [pc, #124]	; (8007e6c <vTaskStartScheduler+0xbc>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d002      	beq.n	8007dfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007df4:	2301      	movs	r3, #1
 8007df6:	617b      	str	r3, [r7, #20]
 8007df8:	e001      	b.n	8007dfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d102      	bne.n	8007e0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007e04:	f000 fcfc 	bl	8008800 <xTimerCreateTimerTask>
 8007e08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d116      	bne.n	8007e3e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	613b      	str	r3, [r7, #16]
}
 8007e22:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007e24:	4b12      	ldr	r3, [pc, #72]	; (8007e70 <vTaskStartScheduler+0xc0>)
 8007e26:	f04f 32ff 	mov.w	r2, #4294967295
 8007e2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007e2c:	4b11      	ldr	r3, [pc, #68]	; (8007e74 <vTaskStartScheduler+0xc4>)
 8007e2e:	2201      	movs	r2, #1
 8007e30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007e32:	4b11      	ldr	r3, [pc, #68]	; (8007e78 <vTaskStartScheduler+0xc8>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007e38:	f001 f8ba 	bl	8008fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007e3c:	e00e      	b.n	8007e5c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e44:	d10a      	bne.n	8007e5c <vTaskStartScheduler+0xac>
	__asm volatile
 8007e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	60fb      	str	r3, [r7, #12]
}
 8007e58:	bf00      	nop
 8007e5a:	e7fe      	b.n	8007e5a <vTaskStartScheduler+0xaa>
}
 8007e5c:	bf00      	nop
 8007e5e:	3718      	adds	r7, #24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	0800b420 	.word	0x0800b420
 8007e68:	08008495 	.word	0x08008495
 8007e6c:	20000c78 	.word	0x20000c78
 8007e70:	20000c74 	.word	0x20000c74
 8007e74:	20000c60 	.word	0x20000c60
 8007e78:	20000c58 	.word	0x20000c58

08007e7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007e80:	4b04      	ldr	r3, [pc, #16]	; (8007e94 <vTaskSuspendAll+0x18>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	3301      	adds	r3, #1
 8007e86:	4a03      	ldr	r2, [pc, #12]	; (8007e94 <vTaskSuspendAll+0x18>)
 8007e88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007e8a:	bf00      	nop
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr
 8007e94:	20000c7c 	.word	0x20000c7c

08007e98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007ea6:	4b42      	ldr	r3, [pc, #264]	; (8007fb0 <xTaskResumeAll+0x118>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10a      	bne.n	8007ec4 <xTaskResumeAll+0x2c>
	__asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	603b      	str	r3, [r7, #0]
}
 8007ec0:	bf00      	nop
 8007ec2:	e7fe      	b.n	8007ec2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ec4:	f001 f916 	bl	80090f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ec8:	4b39      	ldr	r3, [pc, #228]	; (8007fb0 <xTaskResumeAll+0x118>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	4a38      	ldr	r2, [pc, #224]	; (8007fb0 <xTaskResumeAll+0x118>)
 8007ed0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ed2:	4b37      	ldr	r3, [pc, #220]	; (8007fb0 <xTaskResumeAll+0x118>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d162      	bne.n	8007fa0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007eda:	4b36      	ldr	r3, [pc, #216]	; (8007fb4 <xTaskResumeAll+0x11c>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d05e      	beq.n	8007fa0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ee2:	e02f      	b.n	8007f44 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ee4:	4b34      	ldr	r3, [pc, #208]	; (8007fb8 <xTaskResumeAll+0x120>)
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	3318      	adds	r3, #24
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7ff f871 	bl	8006fd8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	3304      	adds	r3, #4
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7ff f86c 	bl	8006fd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f04:	4b2d      	ldr	r3, [pc, #180]	; (8007fbc <xTaskResumeAll+0x124>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d903      	bls.n	8007f14 <xTaskResumeAll+0x7c>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f10:	4a2a      	ldr	r2, [pc, #168]	; (8007fbc <xTaskResumeAll+0x124>)
 8007f12:	6013      	str	r3, [r2, #0]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f18:	4613      	mov	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4413      	add	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4a27      	ldr	r2, [pc, #156]	; (8007fc0 <xTaskResumeAll+0x128>)
 8007f22:	441a      	add	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	3304      	adds	r3, #4
 8007f28:	4619      	mov	r1, r3
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	f7fe fff7 	bl	8006f1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f34:	4b23      	ldr	r3, [pc, #140]	; (8007fc4 <xTaskResumeAll+0x12c>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d302      	bcc.n	8007f44 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007f3e:	4b22      	ldr	r3, [pc, #136]	; (8007fc8 <xTaskResumeAll+0x130>)
 8007f40:	2201      	movs	r2, #1
 8007f42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f44:	4b1c      	ldr	r3, [pc, #112]	; (8007fb8 <xTaskResumeAll+0x120>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1cb      	bne.n	8007ee4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007f52:	f000 fb55 	bl	8008600 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007f56:	4b1d      	ldr	r3, [pc, #116]	; (8007fcc <xTaskResumeAll+0x134>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d010      	beq.n	8007f84 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f62:	f000 f847 	bl	8007ff4 <xTaskIncrementTick>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d002      	beq.n	8007f72 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007f6c:	4b16      	ldr	r3, [pc, #88]	; (8007fc8 <xTaskResumeAll+0x130>)
 8007f6e:	2201      	movs	r2, #1
 8007f70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	3b01      	subs	r3, #1
 8007f76:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1f1      	bne.n	8007f62 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007f7e:	4b13      	ldr	r3, [pc, #76]	; (8007fcc <xTaskResumeAll+0x134>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f84:	4b10      	ldr	r3, [pc, #64]	; (8007fc8 <xTaskResumeAll+0x130>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d009      	beq.n	8007fa0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f90:	4b0f      	ldr	r3, [pc, #60]	; (8007fd0 <xTaskResumeAll+0x138>)
 8007f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f96:	601a      	str	r2, [r3, #0]
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007fa0:	f001 f8d8 	bl	8009154 <vPortExitCritical>

	return xAlreadyYielded;
 8007fa4:	68bb      	ldr	r3, [r7, #8]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	20000c7c 	.word	0x20000c7c
 8007fb4:	20000c54 	.word	0x20000c54
 8007fb8:	20000c14 	.word	0x20000c14
 8007fbc:	20000c5c 	.word	0x20000c5c
 8007fc0:	20000784 	.word	0x20000784
 8007fc4:	20000780 	.word	0x20000780
 8007fc8:	20000c68 	.word	0x20000c68
 8007fcc:	20000c64 	.word	0x20000c64
 8007fd0:	e000ed04 	.word	0xe000ed04

08007fd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007fda:	4b05      	ldr	r3, [pc, #20]	; (8007ff0 <xTaskGetTickCount+0x1c>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007fe0:	687b      	ldr	r3, [r7, #4]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	20000c58 	.word	0x20000c58

08007ff4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ffe:	4b4f      	ldr	r3, [pc, #316]	; (800813c <xTaskIncrementTick+0x148>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	f040 808f 	bne.w	8008126 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008008:	4b4d      	ldr	r3, [pc, #308]	; (8008140 <xTaskIncrementTick+0x14c>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	3301      	adds	r3, #1
 800800e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008010:	4a4b      	ldr	r2, [pc, #300]	; (8008140 <xTaskIncrementTick+0x14c>)
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d120      	bne.n	800805e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800801c:	4b49      	ldr	r3, [pc, #292]	; (8008144 <xTaskIncrementTick+0x150>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00a      	beq.n	800803c <xTaskIncrementTick+0x48>
	__asm volatile
 8008026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802a:	f383 8811 	msr	BASEPRI, r3
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	603b      	str	r3, [r7, #0]
}
 8008038:	bf00      	nop
 800803a:	e7fe      	b.n	800803a <xTaskIncrementTick+0x46>
 800803c:	4b41      	ldr	r3, [pc, #260]	; (8008144 <xTaskIncrementTick+0x150>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	60fb      	str	r3, [r7, #12]
 8008042:	4b41      	ldr	r3, [pc, #260]	; (8008148 <xTaskIncrementTick+0x154>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a3f      	ldr	r2, [pc, #252]	; (8008144 <xTaskIncrementTick+0x150>)
 8008048:	6013      	str	r3, [r2, #0]
 800804a:	4a3f      	ldr	r2, [pc, #252]	; (8008148 <xTaskIncrementTick+0x154>)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6013      	str	r3, [r2, #0]
 8008050:	4b3e      	ldr	r3, [pc, #248]	; (800814c <xTaskIncrementTick+0x158>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	3301      	adds	r3, #1
 8008056:	4a3d      	ldr	r2, [pc, #244]	; (800814c <xTaskIncrementTick+0x158>)
 8008058:	6013      	str	r3, [r2, #0]
 800805a:	f000 fad1 	bl	8008600 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800805e:	4b3c      	ldr	r3, [pc, #240]	; (8008150 <xTaskIncrementTick+0x15c>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	429a      	cmp	r2, r3
 8008066:	d349      	bcc.n	80080fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008068:	4b36      	ldr	r3, [pc, #216]	; (8008144 <xTaskIncrementTick+0x150>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d104      	bne.n	800807c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008072:	4b37      	ldr	r3, [pc, #220]	; (8008150 <xTaskIncrementTick+0x15c>)
 8008074:	f04f 32ff 	mov.w	r2, #4294967295
 8008078:	601a      	str	r2, [r3, #0]
					break;
 800807a:	e03f      	b.n	80080fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800807c:	4b31      	ldr	r3, [pc, #196]	; (8008144 <xTaskIncrementTick+0x150>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	429a      	cmp	r2, r3
 8008092:	d203      	bcs.n	800809c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008094:	4a2e      	ldr	r2, [pc, #184]	; (8008150 <xTaskIncrementTick+0x15c>)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800809a:	e02f      	b.n	80080fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	3304      	adds	r3, #4
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7fe ff99 	bl	8006fd8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d004      	beq.n	80080b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	3318      	adds	r3, #24
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fe ff90 	bl	8006fd8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080bc:	4b25      	ldr	r3, [pc, #148]	; (8008154 <xTaskIncrementTick+0x160>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d903      	bls.n	80080cc <xTaskIncrementTick+0xd8>
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c8:	4a22      	ldr	r2, [pc, #136]	; (8008154 <xTaskIncrementTick+0x160>)
 80080ca:	6013      	str	r3, [r2, #0]
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d0:	4613      	mov	r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	4413      	add	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4a1f      	ldr	r2, [pc, #124]	; (8008158 <xTaskIncrementTick+0x164>)
 80080da:	441a      	add	r2, r3
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	3304      	adds	r3, #4
 80080e0:	4619      	mov	r1, r3
 80080e2:	4610      	mov	r0, r2
 80080e4:	f7fe ff1b 	bl	8006f1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ec:	4b1b      	ldr	r3, [pc, #108]	; (800815c <xTaskIncrementTick+0x168>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d3b8      	bcc.n	8008068 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80080f6:	2301      	movs	r3, #1
 80080f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080fa:	e7b5      	b.n	8008068 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80080fc:	4b17      	ldr	r3, [pc, #92]	; (800815c <xTaskIncrementTick+0x168>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008102:	4915      	ldr	r1, [pc, #84]	; (8008158 <xTaskIncrementTick+0x164>)
 8008104:	4613      	mov	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	440b      	add	r3, r1
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d901      	bls.n	8008118 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008114:	2301      	movs	r3, #1
 8008116:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008118:	4b11      	ldr	r3, [pc, #68]	; (8008160 <xTaskIncrementTick+0x16c>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d007      	beq.n	8008130 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008120:	2301      	movs	r3, #1
 8008122:	617b      	str	r3, [r7, #20]
 8008124:	e004      	b.n	8008130 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008126:	4b0f      	ldr	r3, [pc, #60]	; (8008164 <xTaskIncrementTick+0x170>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3301      	adds	r3, #1
 800812c:	4a0d      	ldr	r2, [pc, #52]	; (8008164 <xTaskIncrementTick+0x170>)
 800812e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008130:	697b      	ldr	r3, [r7, #20]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3718      	adds	r7, #24
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	20000c7c 	.word	0x20000c7c
 8008140:	20000c58 	.word	0x20000c58
 8008144:	20000c0c 	.word	0x20000c0c
 8008148:	20000c10 	.word	0x20000c10
 800814c:	20000c6c 	.word	0x20000c6c
 8008150:	20000c74 	.word	0x20000c74
 8008154:	20000c5c 	.word	0x20000c5c
 8008158:	20000784 	.word	0x20000784
 800815c:	20000780 	.word	0x20000780
 8008160:	20000c68 	.word	0x20000c68
 8008164:	20000c64 	.word	0x20000c64

08008168 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800816e:	4b28      	ldr	r3, [pc, #160]	; (8008210 <vTaskSwitchContext+0xa8>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008176:	4b27      	ldr	r3, [pc, #156]	; (8008214 <vTaskSwitchContext+0xac>)
 8008178:	2201      	movs	r2, #1
 800817a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800817c:	e041      	b.n	8008202 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800817e:	4b25      	ldr	r3, [pc, #148]	; (8008214 <vTaskSwitchContext+0xac>)
 8008180:	2200      	movs	r2, #0
 8008182:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008184:	4b24      	ldr	r3, [pc, #144]	; (8008218 <vTaskSwitchContext+0xb0>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	60fb      	str	r3, [r7, #12]
 800818a:	e010      	b.n	80081ae <vTaskSwitchContext+0x46>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10a      	bne.n	80081a8 <vTaskSwitchContext+0x40>
	__asm volatile
 8008192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008196:	f383 8811 	msr	BASEPRI, r3
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	607b      	str	r3, [r7, #4]
}
 80081a4:	bf00      	nop
 80081a6:	e7fe      	b.n	80081a6 <vTaskSwitchContext+0x3e>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	60fb      	str	r3, [r7, #12]
 80081ae:	491b      	ldr	r1, [pc, #108]	; (800821c <vTaskSwitchContext+0xb4>)
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	4613      	mov	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4413      	add	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	440b      	add	r3, r1
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d0e4      	beq.n	800818c <vTaskSwitchContext+0x24>
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	4613      	mov	r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	4413      	add	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4a13      	ldr	r2, [pc, #76]	; (800821c <vTaskSwitchContext+0xb4>)
 80081ce:	4413      	add	r3, r2
 80081d0:	60bb      	str	r3, [r7, #8]
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	685a      	ldr	r2, [r3, #4]
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	605a      	str	r2, [r3, #4]
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	685a      	ldr	r2, [r3, #4]
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	3308      	adds	r3, #8
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d104      	bne.n	80081f2 <vTaskSwitchContext+0x8a>
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	605a      	str	r2, [r3, #4]
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	4a09      	ldr	r2, [pc, #36]	; (8008220 <vTaskSwitchContext+0xb8>)
 80081fa:	6013      	str	r3, [r2, #0]
 80081fc:	4a06      	ldr	r2, [pc, #24]	; (8008218 <vTaskSwitchContext+0xb0>)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6013      	str	r3, [r2, #0]
}
 8008202:	bf00      	nop
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	20000c7c 	.word	0x20000c7c
 8008214:	20000c68 	.word	0x20000c68
 8008218:	20000c5c 	.word	0x20000c5c
 800821c:	20000784 	.word	0x20000784
 8008220:	20000780 	.word	0x20000780

08008224 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10a      	bne.n	800824a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	60fb      	str	r3, [r7, #12]
}
 8008246:	bf00      	nop
 8008248:	e7fe      	b.n	8008248 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800824a:	4b07      	ldr	r3, [pc, #28]	; (8008268 <vTaskPlaceOnEventList+0x44>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3318      	adds	r3, #24
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f7fe fe87 	bl	8006f66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008258:	2101      	movs	r1, #1
 800825a:	6838      	ldr	r0, [r7, #0]
 800825c:	f000 fa7c 	bl	8008758 <prvAddCurrentTaskToDelayedList>
}
 8008260:	bf00      	nop
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	20000780 	.word	0x20000780

0800826c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10a      	bne.n	8008294 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	617b      	str	r3, [r7, #20]
}
 8008290:	bf00      	nop
 8008292:	e7fe      	b.n	8008292 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008294:	4b0a      	ldr	r3, [pc, #40]	; (80082c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	3318      	adds	r3, #24
 800829a:	4619      	mov	r1, r3
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f7fe fe3e 	bl	8006f1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d002      	beq.n	80082ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80082a8:	f04f 33ff 	mov.w	r3, #4294967295
 80082ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80082ae:	6879      	ldr	r1, [r7, #4]
 80082b0:	68b8      	ldr	r0, [r7, #8]
 80082b2:	f000 fa51 	bl	8008758 <prvAddCurrentTaskToDelayedList>
	}
 80082b6:	bf00      	nop
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	20000780 	.word	0x20000780

080082c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10a      	bne.n	80082f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80082da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	60fb      	str	r3, [r7, #12]
}
 80082ec:	bf00      	nop
 80082ee:	e7fe      	b.n	80082ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	3318      	adds	r3, #24
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fe fe6f 	bl	8006fd8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082fa:	4b1e      	ldr	r3, [pc, #120]	; (8008374 <xTaskRemoveFromEventList+0xb0>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d11d      	bne.n	800833e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	3304      	adds	r3, #4
 8008306:	4618      	mov	r0, r3
 8008308:	f7fe fe66 	bl	8006fd8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008310:	4b19      	ldr	r3, [pc, #100]	; (8008378 <xTaskRemoveFromEventList+0xb4>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	429a      	cmp	r2, r3
 8008316:	d903      	bls.n	8008320 <xTaskRemoveFromEventList+0x5c>
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831c:	4a16      	ldr	r2, [pc, #88]	; (8008378 <xTaskRemoveFromEventList+0xb4>)
 800831e:	6013      	str	r3, [r2, #0]
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008324:	4613      	mov	r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4413      	add	r3, r2
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4a13      	ldr	r2, [pc, #76]	; (800837c <xTaskRemoveFromEventList+0xb8>)
 800832e:	441a      	add	r2, r3
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	3304      	adds	r3, #4
 8008334:	4619      	mov	r1, r3
 8008336:	4610      	mov	r0, r2
 8008338:	f7fe fdf1 	bl	8006f1e <vListInsertEnd>
 800833c:	e005      	b.n	800834a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	3318      	adds	r3, #24
 8008342:	4619      	mov	r1, r3
 8008344:	480e      	ldr	r0, [pc, #56]	; (8008380 <xTaskRemoveFromEventList+0xbc>)
 8008346:	f7fe fdea 	bl	8006f1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834e:	4b0d      	ldr	r3, [pc, #52]	; (8008384 <xTaskRemoveFromEventList+0xc0>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008354:	429a      	cmp	r2, r3
 8008356:	d905      	bls.n	8008364 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008358:	2301      	movs	r3, #1
 800835a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800835c:	4b0a      	ldr	r3, [pc, #40]	; (8008388 <xTaskRemoveFromEventList+0xc4>)
 800835e:	2201      	movs	r2, #1
 8008360:	601a      	str	r2, [r3, #0]
 8008362:	e001      	b.n	8008368 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008364:	2300      	movs	r3, #0
 8008366:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008368:	697b      	ldr	r3, [r7, #20]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3718      	adds	r7, #24
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	20000c7c 	.word	0x20000c7c
 8008378:	20000c5c 	.word	0x20000c5c
 800837c:	20000784 	.word	0x20000784
 8008380:	20000c14 	.word	0x20000c14
 8008384:	20000780 	.word	0x20000780
 8008388:	20000c68 	.word	0x20000c68

0800838c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008394:	4b06      	ldr	r3, [pc, #24]	; (80083b0 <vTaskInternalSetTimeOutState+0x24>)
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800839c:	4b05      	ldr	r3, [pc, #20]	; (80083b4 <vTaskInternalSetTimeOutState+0x28>)
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	605a      	str	r2, [r3, #4]
}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr
 80083b0:	20000c6c 	.word	0x20000c6c
 80083b4:	20000c58 	.word	0x20000c58

080083b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b088      	sub	sp, #32
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10a      	bne.n	80083de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80083c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083cc:	f383 8811 	msr	BASEPRI, r3
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	613b      	str	r3, [r7, #16]
}
 80083da:	bf00      	nop
 80083dc:	e7fe      	b.n	80083dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10a      	bne.n	80083fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80083e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e8:	f383 8811 	msr	BASEPRI, r3
 80083ec:	f3bf 8f6f 	isb	sy
 80083f0:	f3bf 8f4f 	dsb	sy
 80083f4:	60fb      	str	r3, [r7, #12]
}
 80083f6:	bf00      	nop
 80083f8:	e7fe      	b.n	80083f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80083fa:	f000 fe7b 	bl	80090f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80083fe:	4b1d      	ldr	r3, [pc, #116]	; (8008474 <xTaskCheckForTimeOut+0xbc>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	69ba      	ldr	r2, [r7, #24]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008416:	d102      	bne.n	800841e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008418:	2300      	movs	r3, #0
 800841a:	61fb      	str	r3, [r7, #28]
 800841c:	e023      	b.n	8008466 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	4b15      	ldr	r3, [pc, #84]	; (8008478 <xTaskCheckForTimeOut+0xc0>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	429a      	cmp	r2, r3
 8008428:	d007      	beq.n	800843a <xTaskCheckForTimeOut+0x82>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	69ba      	ldr	r2, [r7, #24]
 8008430:	429a      	cmp	r2, r3
 8008432:	d302      	bcc.n	800843a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008434:	2301      	movs	r3, #1
 8008436:	61fb      	str	r3, [r7, #28]
 8008438:	e015      	b.n	8008466 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	429a      	cmp	r2, r3
 8008442:	d20b      	bcs.n	800845c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	1ad2      	subs	r2, r2, r3
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f7ff ff9b 	bl	800838c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008456:	2300      	movs	r3, #0
 8008458:	61fb      	str	r3, [r7, #28]
 800845a:	e004      	b.n	8008466 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	2200      	movs	r2, #0
 8008460:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008462:	2301      	movs	r3, #1
 8008464:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008466:	f000 fe75 	bl	8009154 <vPortExitCritical>

	return xReturn;
 800846a:	69fb      	ldr	r3, [r7, #28]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3720      	adds	r7, #32
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	20000c58 	.word	0x20000c58
 8008478:	20000c6c 	.word	0x20000c6c

0800847c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800847c:	b480      	push	{r7}
 800847e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008480:	4b03      	ldr	r3, [pc, #12]	; (8008490 <vTaskMissedYield+0x14>)
 8008482:	2201      	movs	r2, #1
 8008484:	601a      	str	r2, [r3, #0]
}
 8008486:	bf00      	nop
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr
 8008490:	20000c68 	.word	0x20000c68

08008494 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800849c:	f000 f852 	bl	8008544 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80084a0:	4b06      	ldr	r3, [pc, #24]	; (80084bc <prvIdleTask+0x28>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d9f9      	bls.n	800849c <prvIdleTask+0x8>
			{
				taskYIELD();
 80084a8:	4b05      	ldr	r3, [pc, #20]	; (80084c0 <prvIdleTask+0x2c>)
 80084aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ae:	601a      	str	r2, [r3, #0]
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80084b8:	e7f0      	b.n	800849c <prvIdleTask+0x8>
 80084ba:	bf00      	nop
 80084bc:	20000784 	.word	0x20000784
 80084c0:	e000ed04 	.word	0xe000ed04

080084c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084ca:	2300      	movs	r3, #0
 80084cc:	607b      	str	r3, [r7, #4]
 80084ce:	e00c      	b.n	80084ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	4613      	mov	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4a12      	ldr	r2, [pc, #72]	; (8008524 <prvInitialiseTaskLists+0x60>)
 80084dc:	4413      	add	r3, r2
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fe fcf0 	bl	8006ec4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	3301      	adds	r3, #1
 80084e8:	607b      	str	r3, [r7, #4]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2b37      	cmp	r3, #55	; 0x37
 80084ee:	d9ef      	bls.n	80084d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80084f0:	480d      	ldr	r0, [pc, #52]	; (8008528 <prvInitialiseTaskLists+0x64>)
 80084f2:	f7fe fce7 	bl	8006ec4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80084f6:	480d      	ldr	r0, [pc, #52]	; (800852c <prvInitialiseTaskLists+0x68>)
 80084f8:	f7fe fce4 	bl	8006ec4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80084fc:	480c      	ldr	r0, [pc, #48]	; (8008530 <prvInitialiseTaskLists+0x6c>)
 80084fe:	f7fe fce1 	bl	8006ec4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008502:	480c      	ldr	r0, [pc, #48]	; (8008534 <prvInitialiseTaskLists+0x70>)
 8008504:	f7fe fcde 	bl	8006ec4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008508:	480b      	ldr	r0, [pc, #44]	; (8008538 <prvInitialiseTaskLists+0x74>)
 800850a:	f7fe fcdb 	bl	8006ec4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800850e:	4b0b      	ldr	r3, [pc, #44]	; (800853c <prvInitialiseTaskLists+0x78>)
 8008510:	4a05      	ldr	r2, [pc, #20]	; (8008528 <prvInitialiseTaskLists+0x64>)
 8008512:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008514:	4b0a      	ldr	r3, [pc, #40]	; (8008540 <prvInitialiseTaskLists+0x7c>)
 8008516:	4a05      	ldr	r2, [pc, #20]	; (800852c <prvInitialiseTaskLists+0x68>)
 8008518:	601a      	str	r2, [r3, #0]
}
 800851a:	bf00      	nop
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	20000784 	.word	0x20000784
 8008528:	20000be4 	.word	0x20000be4
 800852c:	20000bf8 	.word	0x20000bf8
 8008530:	20000c14 	.word	0x20000c14
 8008534:	20000c28 	.word	0x20000c28
 8008538:	20000c40 	.word	0x20000c40
 800853c:	20000c0c 	.word	0x20000c0c
 8008540:	20000c10 	.word	0x20000c10

08008544 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800854a:	e019      	b.n	8008580 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800854c:	f000 fdd2 	bl	80090f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008550:	4b10      	ldr	r3, [pc, #64]	; (8008594 <prvCheckTasksWaitingTermination+0x50>)
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3304      	adds	r3, #4
 800855c:	4618      	mov	r0, r3
 800855e:	f7fe fd3b 	bl	8006fd8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008562:	4b0d      	ldr	r3, [pc, #52]	; (8008598 <prvCheckTasksWaitingTermination+0x54>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	3b01      	subs	r3, #1
 8008568:	4a0b      	ldr	r2, [pc, #44]	; (8008598 <prvCheckTasksWaitingTermination+0x54>)
 800856a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800856c:	4b0b      	ldr	r3, [pc, #44]	; (800859c <prvCheckTasksWaitingTermination+0x58>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	3b01      	subs	r3, #1
 8008572:	4a0a      	ldr	r2, [pc, #40]	; (800859c <prvCheckTasksWaitingTermination+0x58>)
 8008574:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008576:	f000 fded 	bl	8009154 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f810 	bl	80085a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008580:	4b06      	ldr	r3, [pc, #24]	; (800859c <prvCheckTasksWaitingTermination+0x58>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e1      	bne.n	800854c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008588:	bf00      	nop
 800858a:	bf00      	nop
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	20000c28 	.word	0x20000c28
 8008598:	20000c54 	.word	0x20000c54
 800859c:	20000c3c 	.word	0x20000c3c

080085a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d108      	bne.n	80085c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 ff8a 	bl	80094d0 <vPortFree>
				vPortFree( pxTCB );
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 ff87 	bl	80094d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80085c2:	e018      	b.n	80085f6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d103      	bne.n	80085d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 ff7e 	bl	80094d0 <vPortFree>
	}
 80085d4:	e00f      	b.n	80085f6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d00a      	beq.n	80085f6 <prvDeleteTCB+0x56>
	__asm volatile
 80085e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	60fb      	str	r3, [r7, #12]
}
 80085f2:	bf00      	nop
 80085f4:	e7fe      	b.n	80085f4 <prvDeleteTCB+0x54>
	}
 80085f6:	bf00      	nop
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008606:	4b0c      	ldr	r3, [pc, #48]	; (8008638 <prvResetNextTaskUnblockTime+0x38>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d104      	bne.n	800861a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008610:	4b0a      	ldr	r3, [pc, #40]	; (800863c <prvResetNextTaskUnblockTime+0x3c>)
 8008612:	f04f 32ff 	mov.w	r2, #4294967295
 8008616:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008618:	e008      	b.n	800862c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800861a:	4b07      	ldr	r3, [pc, #28]	; (8008638 <prvResetNextTaskUnblockTime+0x38>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	4a04      	ldr	r2, [pc, #16]	; (800863c <prvResetNextTaskUnblockTime+0x3c>)
 800862a:	6013      	str	r3, [r2, #0]
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr
 8008638:	20000c0c 	.word	0x20000c0c
 800863c:	20000c74 	.word	0x20000c74

08008640 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008646:	4b0b      	ldr	r3, [pc, #44]	; (8008674 <xTaskGetSchedulerState+0x34>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d102      	bne.n	8008654 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800864e:	2301      	movs	r3, #1
 8008650:	607b      	str	r3, [r7, #4]
 8008652:	e008      	b.n	8008666 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008654:	4b08      	ldr	r3, [pc, #32]	; (8008678 <xTaskGetSchedulerState+0x38>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d102      	bne.n	8008662 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800865c:	2302      	movs	r3, #2
 800865e:	607b      	str	r3, [r7, #4]
 8008660:	e001      	b.n	8008666 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008662:	2300      	movs	r3, #0
 8008664:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008666:	687b      	ldr	r3, [r7, #4]
	}
 8008668:	4618      	mov	r0, r3
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr
 8008674:	20000c60 	.word	0x20000c60
 8008678:	20000c7c 	.word	0x20000c7c

0800867c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008688:	2300      	movs	r3, #0
 800868a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d056      	beq.n	8008740 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008692:	4b2e      	ldr	r3, [pc, #184]	; (800874c <xTaskPriorityDisinherit+0xd0>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	693a      	ldr	r2, [r7, #16]
 8008698:	429a      	cmp	r2, r3
 800869a:	d00a      	beq.n	80086b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800869c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a0:	f383 8811 	msr	BASEPRI, r3
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	60fb      	str	r3, [r7, #12]
}
 80086ae:	bf00      	nop
 80086b0:	e7fe      	b.n	80086b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10a      	bne.n	80086d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80086ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	60bb      	str	r3, [r7, #8]
}
 80086cc:	bf00      	nop
 80086ce:	e7fe      	b.n	80086ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086d4:	1e5a      	subs	r2, r3, #1
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d02c      	beq.n	8008740 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d128      	bne.n	8008740 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	3304      	adds	r3, #4
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fe fc70 	bl	8006fd8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008704:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008710:	4b0f      	ldr	r3, [pc, #60]	; (8008750 <xTaskPriorityDisinherit+0xd4>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	429a      	cmp	r2, r3
 8008716:	d903      	bls.n	8008720 <xTaskPriorityDisinherit+0xa4>
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871c:	4a0c      	ldr	r2, [pc, #48]	; (8008750 <xTaskPriorityDisinherit+0xd4>)
 800871e:	6013      	str	r3, [r2, #0]
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008724:	4613      	mov	r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	4413      	add	r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	4a09      	ldr	r2, [pc, #36]	; (8008754 <xTaskPriorityDisinherit+0xd8>)
 800872e:	441a      	add	r2, r3
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	3304      	adds	r3, #4
 8008734:	4619      	mov	r1, r3
 8008736:	4610      	mov	r0, r2
 8008738:	f7fe fbf1 	bl	8006f1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800873c:	2301      	movs	r3, #1
 800873e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008740:	697b      	ldr	r3, [r7, #20]
	}
 8008742:	4618      	mov	r0, r3
 8008744:	3718      	adds	r7, #24
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	20000780 	.word	0x20000780
 8008750:	20000c5c 	.word	0x20000c5c
 8008754:	20000784 	.word	0x20000784

08008758 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008762:	4b21      	ldr	r3, [pc, #132]	; (80087e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008768:	4b20      	ldr	r3, [pc, #128]	; (80087ec <prvAddCurrentTaskToDelayedList+0x94>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	3304      	adds	r3, #4
 800876e:	4618      	mov	r0, r3
 8008770:	f7fe fc32 	bl	8006fd8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800877a:	d10a      	bne.n	8008792 <prvAddCurrentTaskToDelayedList+0x3a>
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d007      	beq.n	8008792 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008782:	4b1a      	ldr	r3, [pc, #104]	; (80087ec <prvAddCurrentTaskToDelayedList+0x94>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	3304      	adds	r3, #4
 8008788:	4619      	mov	r1, r3
 800878a:	4819      	ldr	r0, [pc, #100]	; (80087f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800878c:	f7fe fbc7 	bl	8006f1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008790:	e026      	b.n	80087e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4413      	add	r3, r2
 8008798:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800879a:	4b14      	ldr	r3, [pc, #80]	; (80087ec <prvAddCurrentTaskToDelayedList+0x94>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d209      	bcs.n	80087be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087aa:	4b12      	ldr	r3, [pc, #72]	; (80087f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	4b0f      	ldr	r3, [pc, #60]	; (80087ec <prvAddCurrentTaskToDelayedList+0x94>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3304      	adds	r3, #4
 80087b4:	4619      	mov	r1, r3
 80087b6:	4610      	mov	r0, r2
 80087b8:	f7fe fbd5 	bl	8006f66 <vListInsert>
}
 80087bc:	e010      	b.n	80087e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087be:	4b0e      	ldr	r3, [pc, #56]	; (80087f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	4b0a      	ldr	r3, [pc, #40]	; (80087ec <prvAddCurrentTaskToDelayedList+0x94>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	3304      	adds	r3, #4
 80087c8:	4619      	mov	r1, r3
 80087ca:	4610      	mov	r0, r2
 80087cc:	f7fe fbcb 	bl	8006f66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80087d0:	4b0a      	ldr	r3, [pc, #40]	; (80087fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d202      	bcs.n	80087e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80087da:	4a08      	ldr	r2, [pc, #32]	; (80087fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	6013      	str	r3, [r2, #0]
}
 80087e0:	bf00      	nop
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	20000c58 	.word	0x20000c58
 80087ec:	20000780 	.word	0x20000780
 80087f0:	20000c40 	.word	0x20000c40
 80087f4:	20000c10 	.word	0x20000c10
 80087f8:	20000c0c 	.word	0x20000c0c
 80087fc:	20000c74 	.word	0x20000c74

08008800 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b08a      	sub	sp, #40	; 0x28
 8008804:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008806:	2300      	movs	r3, #0
 8008808:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800880a:	f000 fb07 	bl	8008e1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800880e:	4b1c      	ldr	r3, [pc, #112]	; (8008880 <xTimerCreateTimerTask+0x80>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d021      	beq.n	800885a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008816:	2300      	movs	r3, #0
 8008818:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800881a:	2300      	movs	r3, #0
 800881c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800881e:	1d3a      	adds	r2, r7, #4
 8008820:	f107 0108 	add.w	r1, r7, #8
 8008824:	f107 030c 	add.w	r3, r7, #12
 8008828:	4618      	mov	r0, r3
 800882a:	f7fe fb31 	bl	8006e90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800882e:	6879      	ldr	r1, [r7, #4]
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	9202      	str	r2, [sp, #8]
 8008836:	9301      	str	r3, [sp, #4]
 8008838:	2302      	movs	r3, #2
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	2300      	movs	r3, #0
 800883e:	460a      	mov	r2, r1
 8008840:	4910      	ldr	r1, [pc, #64]	; (8008884 <xTimerCreateTimerTask+0x84>)
 8008842:	4811      	ldr	r0, [pc, #68]	; (8008888 <xTimerCreateTimerTask+0x88>)
 8008844:	f7ff f8de 	bl	8007a04 <xTaskCreateStatic>
 8008848:	4603      	mov	r3, r0
 800884a:	4a10      	ldr	r2, [pc, #64]	; (800888c <xTimerCreateTimerTask+0x8c>)
 800884c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800884e:	4b0f      	ldr	r3, [pc, #60]	; (800888c <xTimerCreateTimerTask+0x8c>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d001      	beq.n	800885a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008856:	2301      	movs	r3, #1
 8008858:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10a      	bne.n	8008876 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008864:	f383 8811 	msr	BASEPRI, r3
 8008868:	f3bf 8f6f 	isb	sy
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	613b      	str	r3, [r7, #16]
}
 8008872:	bf00      	nop
 8008874:	e7fe      	b.n	8008874 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008876:	697b      	ldr	r3, [r7, #20]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3718      	adds	r7, #24
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	20000cb0 	.word	0x20000cb0
 8008884:	0800b428 	.word	0x0800b428
 8008888:	080089c5 	.word	0x080089c5
 800888c:	20000cb4 	.word	0x20000cb4

08008890 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b08a      	sub	sp, #40	; 0x28
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]
 800889c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800889e:	2300      	movs	r3, #0
 80088a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10a      	bne.n	80088be <xTimerGenericCommand+0x2e>
	__asm volatile
 80088a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ac:	f383 8811 	msr	BASEPRI, r3
 80088b0:	f3bf 8f6f 	isb	sy
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	623b      	str	r3, [r7, #32]
}
 80088ba:	bf00      	nop
 80088bc:	e7fe      	b.n	80088bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80088be:	4b1a      	ldr	r3, [pc, #104]	; (8008928 <xTimerGenericCommand+0x98>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d02a      	beq.n	800891c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	2b05      	cmp	r3, #5
 80088d6:	dc18      	bgt.n	800890a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80088d8:	f7ff feb2 	bl	8008640 <xTaskGetSchedulerState>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d109      	bne.n	80088f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80088e2:	4b11      	ldr	r3, [pc, #68]	; (8008928 <xTimerGenericCommand+0x98>)
 80088e4:	6818      	ldr	r0, [r3, #0]
 80088e6:	f107 0110 	add.w	r1, r7, #16
 80088ea:	2300      	movs	r3, #0
 80088ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ee:	f7fe fca1 	bl	8007234 <xQueueGenericSend>
 80088f2:	6278      	str	r0, [r7, #36]	; 0x24
 80088f4:	e012      	b.n	800891c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80088f6:	4b0c      	ldr	r3, [pc, #48]	; (8008928 <xTimerGenericCommand+0x98>)
 80088f8:	6818      	ldr	r0, [r3, #0]
 80088fa:	f107 0110 	add.w	r1, r7, #16
 80088fe:	2300      	movs	r3, #0
 8008900:	2200      	movs	r2, #0
 8008902:	f7fe fc97 	bl	8007234 <xQueueGenericSend>
 8008906:	6278      	str	r0, [r7, #36]	; 0x24
 8008908:	e008      	b.n	800891c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800890a:	4b07      	ldr	r3, [pc, #28]	; (8008928 <xTimerGenericCommand+0x98>)
 800890c:	6818      	ldr	r0, [r3, #0]
 800890e:	f107 0110 	add.w	r1, r7, #16
 8008912:	2300      	movs	r3, #0
 8008914:	683a      	ldr	r2, [r7, #0]
 8008916:	f7fe fd8b 	bl	8007430 <xQueueGenericSendFromISR>
 800891a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800891e:	4618      	mov	r0, r3
 8008920:	3728      	adds	r7, #40	; 0x28
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20000cb0 	.word	0x20000cb0

0800892c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b088      	sub	sp, #32
 8008930:	af02      	add	r7, sp, #8
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008936:	4b22      	ldr	r3, [pc, #136]	; (80089c0 <prvProcessExpiredTimer+0x94>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	3304      	adds	r3, #4
 8008944:	4618      	mov	r0, r3
 8008946:	f7fe fb47 	bl	8006fd8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008950:	f003 0304 	and.w	r3, r3, #4
 8008954:	2b00      	cmp	r3, #0
 8008956:	d022      	beq.n	800899e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	699a      	ldr	r2, [r3, #24]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	18d1      	adds	r1, r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	683a      	ldr	r2, [r7, #0]
 8008964:	6978      	ldr	r0, [r7, #20]
 8008966:	f000 f8d1 	bl	8008b0c <prvInsertTimerInActiveList>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d01f      	beq.n	80089b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008970:	2300      	movs	r3, #0
 8008972:	9300      	str	r3, [sp, #0]
 8008974:	2300      	movs	r3, #0
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	2100      	movs	r1, #0
 800897a:	6978      	ldr	r0, [r7, #20]
 800897c:	f7ff ff88 	bl	8008890 <xTimerGenericCommand>
 8008980:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d113      	bne.n	80089b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898c:	f383 8811 	msr	BASEPRI, r3
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	60fb      	str	r3, [r7, #12]
}
 800899a:	bf00      	nop
 800899c:	e7fe      	b.n	800899c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089a4:	f023 0301 	bic.w	r3, r3, #1
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	6a1b      	ldr	r3, [r3, #32]
 80089b4:	6978      	ldr	r0, [r7, #20]
 80089b6:	4798      	blx	r3
}
 80089b8:	bf00      	nop
 80089ba:	3718      	adds	r7, #24
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	20000ca8 	.word	0x20000ca8

080089c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80089cc:	f107 0308 	add.w	r3, r7, #8
 80089d0:	4618      	mov	r0, r3
 80089d2:	f000 f857 	bl	8008a84 <prvGetNextExpireTime>
 80089d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	4619      	mov	r1, r3
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 f803 	bl	80089e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80089e2:	f000 f8d5 	bl	8008b90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80089e6:	e7f1      	b.n	80089cc <prvTimerTask+0x8>

080089e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80089f2:	f7ff fa43 	bl	8007e7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80089f6:	f107 0308 	add.w	r3, r7, #8
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 f866 	bl	8008acc <prvSampleTimeNow>
 8008a00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d130      	bne.n	8008a6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d10a      	bne.n	8008a24 <prvProcessTimerOrBlockTask+0x3c>
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d806      	bhi.n	8008a24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008a16:	f7ff fa3f 	bl	8007e98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008a1a:	68f9      	ldr	r1, [r7, #12]
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f7ff ff85 	bl	800892c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008a22:	e024      	b.n	8008a6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d008      	beq.n	8008a3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008a2a:	4b13      	ldr	r3, [pc, #76]	; (8008a78 <prvProcessTimerOrBlockTask+0x90>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d101      	bne.n	8008a38 <prvProcessTimerOrBlockTask+0x50>
 8008a34:	2301      	movs	r3, #1
 8008a36:	e000      	b.n	8008a3a <prvProcessTimerOrBlockTask+0x52>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008a3c:	4b0f      	ldr	r3, [pc, #60]	; (8008a7c <prvProcessTimerOrBlockTask+0x94>)
 8008a3e:	6818      	ldr	r0, [r3, #0]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	683a      	ldr	r2, [r7, #0]
 8008a48:	4619      	mov	r1, r3
 8008a4a:	f7fe ffa7 	bl	800799c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008a4e:	f7ff fa23 	bl	8007e98 <xTaskResumeAll>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10a      	bne.n	8008a6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008a58:	4b09      	ldr	r3, [pc, #36]	; (8008a80 <prvProcessTimerOrBlockTask+0x98>)
 8008a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a5e:	601a      	str	r2, [r3, #0]
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	f3bf 8f6f 	isb	sy
}
 8008a68:	e001      	b.n	8008a6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008a6a:	f7ff fa15 	bl	8007e98 <xTaskResumeAll>
}
 8008a6e:	bf00      	nop
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	20000cac 	.word	0x20000cac
 8008a7c:	20000cb0 	.word	0x20000cb0
 8008a80:	e000ed04 	.word	0xe000ed04

08008a84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008a84:	b480      	push	{r7}
 8008a86:	b085      	sub	sp, #20
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a8c:	4b0e      	ldr	r3, [pc, #56]	; (8008ac8 <prvGetNextExpireTime+0x44>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d101      	bne.n	8008a9a <prvGetNextExpireTime+0x16>
 8008a96:	2201      	movs	r2, #1
 8008a98:	e000      	b.n	8008a9c <prvGetNextExpireTime+0x18>
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d105      	bne.n	8008ab4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008aa8:	4b07      	ldr	r3, [pc, #28]	; (8008ac8 <prvGetNextExpireTime+0x44>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	60fb      	str	r3, [r7, #12]
 8008ab2:	e001      	b.n	8008ab8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3714      	adds	r7, #20
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	20000ca8 	.word	0x20000ca8

08008acc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008ad4:	f7ff fa7e 	bl	8007fd4 <xTaskGetTickCount>
 8008ad8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008ada:	4b0b      	ldr	r3, [pc, #44]	; (8008b08 <prvSampleTimeNow+0x3c>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d205      	bcs.n	8008af0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008ae4:	f000 f936 	bl	8008d54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	601a      	str	r2, [r3, #0]
 8008aee:	e002      	b.n	8008af6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008af6:	4a04      	ldr	r2, [pc, #16]	; (8008b08 <prvSampleTimeNow+0x3c>)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008afc:	68fb      	ldr	r3, [r7, #12]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	20000cb8 	.word	0x20000cb8

08008b0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b086      	sub	sp, #24
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
 8008b18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008b2a:	68ba      	ldr	r2, [r7, #8]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d812      	bhi.n	8008b58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	1ad2      	subs	r2, r2, r3
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d302      	bcc.n	8008b46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008b40:	2301      	movs	r3, #1
 8008b42:	617b      	str	r3, [r7, #20]
 8008b44:	e01b      	b.n	8008b7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008b46:	4b10      	ldr	r3, [pc, #64]	; (8008b88 <prvInsertTimerInActiveList+0x7c>)
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	3304      	adds	r3, #4
 8008b4e:	4619      	mov	r1, r3
 8008b50:	4610      	mov	r0, r2
 8008b52:	f7fe fa08 	bl	8006f66 <vListInsert>
 8008b56:	e012      	b.n	8008b7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d206      	bcs.n	8008b6e <prvInsertTimerInActiveList+0x62>
 8008b60:	68ba      	ldr	r2, [r7, #8]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d302      	bcc.n	8008b6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	617b      	str	r3, [r7, #20]
 8008b6c:	e007      	b.n	8008b7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b6e:	4b07      	ldr	r3, [pc, #28]	; (8008b8c <prvInsertTimerInActiveList+0x80>)
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	3304      	adds	r3, #4
 8008b76:	4619      	mov	r1, r3
 8008b78:	4610      	mov	r0, r2
 8008b7a:	f7fe f9f4 	bl	8006f66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008b7e:	697b      	ldr	r3, [r7, #20]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3718      	adds	r7, #24
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	20000cac 	.word	0x20000cac
 8008b8c:	20000ca8 	.word	0x20000ca8

08008b90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b08e      	sub	sp, #56	; 0x38
 8008b94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b96:	e0ca      	b.n	8008d2e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	da18      	bge.n	8008bd0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008b9e:	1d3b      	adds	r3, r7, #4
 8008ba0:	3304      	adds	r3, #4
 8008ba2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10a      	bne.n	8008bc0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	61fb      	str	r3, [r7, #28]
}
 8008bbc:	bf00      	nop
 8008bbe:	e7fe      	b.n	8008bbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bc6:	6850      	ldr	r0, [r2, #4]
 8008bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bca:	6892      	ldr	r2, [r2, #8]
 8008bcc:	4611      	mov	r1, r2
 8008bce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	f2c0 80aa 	blt.w	8008d2c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bde:	695b      	ldr	r3, [r3, #20]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d004      	beq.n	8008bee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be6:	3304      	adds	r3, #4
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7fe f9f5 	bl	8006fd8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008bee:	463b      	mov	r3, r7
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7ff ff6b 	bl	8008acc <prvSampleTimeNow>
 8008bf6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b09      	cmp	r3, #9
 8008bfc:	f200 8097 	bhi.w	8008d2e <prvProcessReceivedCommands+0x19e>
 8008c00:	a201      	add	r2, pc, #4	; (adr r2, 8008c08 <prvProcessReceivedCommands+0x78>)
 8008c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c06:	bf00      	nop
 8008c08:	08008c31 	.word	0x08008c31
 8008c0c:	08008c31 	.word	0x08008c31
 8008c10:	08008c31 	.word	0x08008c31
 8008c14:	08008ca5 	.word	0x08008ca5
 8008c18:	08008cb9 	.word	0x08008cb9
 8008c1c:	08008d03 	.word	0x08008d03
 8008c20:	08008c31 	.word	0x08008c31
 8008c24:	08008c31 	.word	0x08008c31
 8008c28:	08008ca5 	.word	0x08008ca5
 8008c2c:	08008cb9 	.word	0x08008cb9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c36:	f043 0301 	orr.w	r3, r3, #1
 8008c3a:	b2da      	uxtb	r2, r3
 8008c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	18d1      	adds	r1, r2, r3
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c50:	f7ff ff5c 	bl	8008b0c <prvInsertTimerInActiveList>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d069      	beq.n	8008d2e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c68:	f003 0304 	and.w	r3, r3, #4
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d05e      	beq.n	8008d2e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c74:	699b      	ldr	r3, [r3, #24]
 8008c76:	441a      	add	r2, r3
 8008c78:	2300      	movs	r3, #0
 8008c7a:	9300      	str	r3, [sp, #0]
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	2100      	movs	r1, #0
 8008c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c82:	f7ff fe05 	bl	8008890 <xTimerGenericCommand>
 8008c86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008c88:	6a3b      	ldr	r3, [r7, #32]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d14f      	bne.n	8008d2e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c92:	f383 8811 	msr	BASEPRI, r3
 8008c96:	f3bf 8f6f 	isb	sy
 8008c9a:	f3bf 8f4f 	dsb	sy
 8008c9e:	61bb      	str	r3, [r7, #24]
}
 8008ca0:	bf00      	nop
 8008ca2:	e7fe      	b.n	8008ca2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008caa:	f023 0301 	bic.w	r3, r3, #1
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008cb6:	e03a      	b.n	8008d2e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cbe:	f043 0301 	orr.w	r3, r3, #1
 8008cc2:	b2da      	uxtb	r2, r3
 8008cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d10a      	bne.n	8008cee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cdc:	f383 8811 	msr	BASEPRI, r3
 8008ce0:	f3bf 8f6f 	isb	sy
 8008ce4:	f3bf 8f4f 	dsb	sy
 8008ce8:	617b      	str	r3, [r7, #20]
}
 8008cea:	bf00      	nop
 8008cec:	e7fe      	b.n	8008cec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf0:	699a      	ldr	r2, [r3, #24]
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf4:	18d1      	adds	r1, r2, r3
 8008cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cfc:	f7ff ff06 	bl	8008b0c <prvInsertTimerInActiveList>
					break;
 8008d00:	e015      	b.n	8008d2e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d08:	f003 0302 	and.w	r3, r3, #2
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d103      	bne.n	8008d18 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d12:	f000 fbdd 	bl	80094d0 <vPortFree>
 8008d16:	e00a      	b.n	8008d2e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d1e:	f023 0301 	bic.w	r3, r3, #1
 8008d22:	b2da      	uxtb	r2, r3
 8008d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008d2a:	e000      	b.n	8008d2e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008d2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d2e:	4b08      	ldr	r3, [pc, #32]	; (8008d50 <prvProcessReceivedCommands+0x1c0>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	1d39      	adds	r1, r7, #4
 8008d34:	2200      	movs	r2, #0
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7fe fc16 	bl	8007568 <xQueueReceive>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f47f af2a 	bne.w	8008b98 <prvProcessReceivedCommands+0x8>
	}
}
 8008d44:	bf00      	nop
 8008d46:	bf00      	nop
 8008d48:	3730      	adds	r7, #48	; 0x30
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	20000cb0 	.word	0x20000cb0

08008d54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b088      	sub	sp, #32
 8008d58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d5a:	e048      	b.n	8008dee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d5c:	4b2d      	ldr	r3, [pc, #180]	; (8008e14 <prvSwitchTimerLists+0xc0>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d66:	4b2b      	ldr	r3, [pc, #172]	; (8008e14 <prvSwitchTimerLists+0xc0>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	3304      	adds	r3, #4
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7fe f92f 	bl	8006fd8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6a1b      	ldr	r3, [r3, #32]
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d88:	f003 0304 	and.w	r3, r3, #4
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d02e      	beq.n	8008dee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	699b      	ldr	r3, [r3, #24]
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	4413      	add	r3, r2
 8008d98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d90e      	bls.n	8008dc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	68ba      	ldr	r2, [r7, #8]
 8008da6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008dae:	4b19      	ldr	r3, [pc, #100]	; (8008e14 <prvSwitchTimerLists+0xc0>)
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	3304      	adds	r3, #4
 8008db6:	4619      	mov	r1, r3
 8008db8:	4610      	mov	r0, r2
 8008dba:	f7fe f8d4 	bl	8006f66 <vListInsert>
 8008dbe:	e016      	b.n	8008dee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	9300      	str	r3, [sp, #0]
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	693a      	ldr	r2, [r7, #16]
 8008dc8:	2100      	movs	r1, #0
 8008dca:	68f8      	ldr	r0, [r7, #12]
 8008dcc:	f7ff fd60 	bl	8008890 <xTimerGenericCommand>
 8008dd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d10a      	bne.n	8008dee <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ddc:	f383 8811 	msr	BASEPRI, r3
 8008de0:	f3bf 8f6f 	isb	sy
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	603b      	str	r3, [r7, #0]
}
 8008dea:	bf00      	nop
 8008dec:	e7fe      	b.n	8008dec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008dee:	4b09      	ldr	r3, [pc, #36]	; (8008e14 <prvSwitchTimerLists+0xc0>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d1b1      	bne.n	8008d5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008df8:	4b06      	ldr	r3, [pc, #24]	; (8008e14 <prvSwitchTimerLists+0xc0>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008dfe:	4b06      	ldr	r3, [pc, #24]	; (8008e18 <prvSwitchTimerLists+0xc4>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a04      	ldr	r2, [pc, #16]	; (8008e14 <prvSwitchTimerLists+0xc0>)
 8008e04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008e06:	4a04      	ldr	r2, [pc, #16]	; (8008e18 <prvSwitchTimerLists+0xc4>)
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	6013      	str	r3, [r2, #0]
}
 8008e0c:	bf00      	nop
 8008e0e:	3718      	adds	r7, #24
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	20000ca8 	.word	0x20000ca8
 8008e18:	20000cac 	.word	0x20000cac

08008e1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008e22:	f000 f967 	bl	80090f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008e26:	4b15      	ldr	r3, [pc, #84]	; (8008e7c <prvCheckForValidListAndQueue+0x60>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d120      	bne.n	8008e70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008e2e:	4814      	ldr	r0, [pc, #80]	; (8008e80 <prvCheckForValidListAndQueue+0x64>)
 8008e30:	f7fe f848 	bl	8006ec4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008e34:	4813      	ldr	r0, [pc, #76]	; (8008e84 <prvCheckForValidListAndQueue+0x68>)
 8008e36:	f7fe f845 	bl	8006ec4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008e3a:	4b13      	ldr	r3, [pc, #76]	; (8008e88 <prvCheckForValidListAndQueue+0x6c>)
 8008e3c:	4a10      	ldr	r2, [pc, #64]	; (8008e80 <prvCheckForValidListAndQueue+0x64>)
 8008e3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008e40:	4b12      	ldr	r3, [pc, #72]	; (8008e8c <prvCheckForValidListAndQueue+0x70>)
 8008e42:	4a10      	ldr	r2, [pc, #64]	; (8008e84 <prvCheckForValidListAndQueue+0x68>)
 8008e44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008e46:	2300      	movs	r3, #0
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	4b11      	ldr	r3, [pc, #68]	; (8008e90 <prvCheckForValidListAndQueue+0x74>)
 8008e4c:	4a11      	ldr	r2, [pc, #68]	; (8008e94 <prvCheckForValidListAndQueue+0x78>)
 8008e4e:	2110      	movs	r1, #16
 8008e50:	200a      	movs	r0, #10
 8008e52:	f7fe f953 	bl	80070fc <xQueueGenericCreateStatic>
 8008e56:	4603      	mov	r3, r0
 8008e58:	4a08      	ldr	r2, [pc, #32]	; (8008e7c <prvCheckForValidListAndQueue+0x60>)
 8008e5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008e5c:	4b07      	ldr	r3, [pc, #28]	; (8008e7c <prvCheckForValidListAndQueue+0x60>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d005      	beq.n	8008e70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008e64:	4b05      	ldr	r3, [pc, #20]	; (8008e7c <prvCheckForValidListAndQueue+0x60>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	490b      	ldr	r1, [pc, #44]	; (8008e98 <prvCheckForValidListAndQueue+0x7c>)
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fe fd6c 	bl	8007948 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e70:	f000 f970 	bl	8009154 <vPortExitCritical>
}
 8008e74:	bf00      	nop
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	20000cb0 	.word	0x20000cb0
 8008e80:	20000c80 	.word	0x20000c80
 8008e84:	20000c94 	.word	0x20000c94
 8008e88:	20000ca8 	.word	0x20000ca8
 8008e8c:	20000cac 	.word	0x20000cac
 8008e90:	20000d5c 	.word	0x20000d5c
 8008e94:	20000cbc 	.word	0x20000cbc
 8008e98:	0800b430 	.word	0x0800b430

08008e9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	3b04      	subs	r3, #4
 8008eac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008eb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	3b04      	subs	r3, #4
 8008eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f023 0201 	bic.w	r2, r3, #1
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	3b04      	subs	r3, #4
 8008eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ecc:	4a0c      	ldr	r2, [pc, #48]	; (8008f00 <pxPortInitialiseStack+0x64>)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	3b14      	subs	r3, #20
 8008ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	3b04      	subs	r3, #4
 8008ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f06f 0202 	mvn.w	r2, #2
 8008eea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	3b20      	subs	r3, #32
 8008ef0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3714      	adds	r7, #20
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr
 8008f00:	08008f05 	.word	0x08008f05

08008f04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008f0e:	4b12      	ldr	r3, [pc, #72]	; (8008f58 <prvTaskExitError+0x54>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f16:	d00a      	beq.n	8008f2e <prvTaskExitError+0x2a>
	__asm volatile
 8008f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1c:	f383 8811 	msr	BASEPRI, r3
 8008f20:	f3bf 8f6f 	isb	sy
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	60fb      	str	r3, [r7, #12]
}
 8008f2a:	bf00      	nop
 8008f2c:	e7fe      	b.n	8008f2c <prvTaskExitError+0x28>
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	60bb      	str	r3, [r7, #8]
}
 8008f40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f42:	bf00      	nop
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d0fc      	beq.n	8008f44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f4a:	bf00      	nop
 8008f4c:	bf00      	nop
 8008f4e:	3714      	adds	r7, #20
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr
 8008f58:	2000000c 	.word	0x2000000c
 8008f5c:	00000000 	.word	0x00000000

08008f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f60:	4b07      	ldr	r3, [pc, #28]	; (8008f80 <pxCurrentTCBConst2>)
 8008f62:	6819      	ldr	r1, [r3, #0]
 8008f64:	6808      	ldr	r0, [r1, #0]
 8008f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f6a:	f380 8809 	msr	PSP, r0
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f04f 0000 	mov.w	r0, #0
 8008f76:	f380 8811 	msr	BASEPRI, r0
 8008f7a:	4770      	bx	lr
 8008f7c:	f3af 8000 	nop.w

08008f80 <pxCurrentTCBConst2>:
 8008f80:	20000780 	.word	0x20000780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f84:	bf00      	nop
 8008f86:	bf00      	nop

08008f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f88:	4808      	ldr	r0, [pc, #32]	; (8008fac <prvPortStartFirstTask+0x24>)
 8008f8a:	6800      	ldr	r0, [r0, #0]
 8008f8c:	6800      	ldr	r0, [r0, #0]
 8008f8e:	f380 8808 	msr	MSP, r0
 8008f92:	f04f 0000 	mov.w	r0, #0
 8008f96:	f380 8814 	msr	CONTROL, r0
 8008f9a:	b662      	cpsie	i
 8008f9c:	b661      	cpsie	f
 8008f9e:	f3bf 8f4f 	dsb	sy
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	df00      	svc	0
 8008fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008faa:	bf00      	nop
 8008fac:	e000ed08 	.word	0xe000ed08

08008fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b086      	sub	sp, #24
 8008fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008fb6:	4b46      	ldr	r3, [pc, #280]	; (80090d0 <xPortStartScheduler+0x120>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a46      	ldr	r2, [pc, #280]	; (80090d4 <xPortStartScheduler+0x124>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d10a      	bne.n	8008fd6 <xPortStartScheduler+0x26>
	__asm volatile
 8008fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc4:	f383 8811 	msr	BASEPRI, r3
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	f3bf 8f4f 	dsb	sy
 8008fd0:	613b      	str	r3, [r7, #16]
}
 8008fd2:	bf00      	nop
 8008fd4:	e7fe      	b.n	8008fd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008fd6:	4b3e      	ldr	r3, [pc, #248]	; (80090d0 <xPortStartScheduler+0x120>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a3f      	ldr	r2, [pc, #252]	; (80090d8 <xPortStartScheduler+0x128>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d10a      	bne.n	8008ff6 <xPortStartScheduler+0x46>
	__asm volatile
 8008fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe4:	f383 8811 	msr	BASEPRI, r3
 8008fe8:	f3bf 8f6f 	isb	sy
 8008fec:	f3bf 8f4f 	dsb	sy
 8008ff0:	60fb      	str	r3, [r7, #12]
}
 8008ff2:	bf00      	nop
 8008ff4:	e7fe      	b.n	8008ff4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ff6:	4b39      	ldr	r3, [pc, #228]	; (80090dc <xPortStartScheduler+0x12c>)
 8008ff8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	22ff      	movs	r2, #255	; 0xff
 8009006:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	b2db      	uxtb	r3, r3
 800900e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009010:	78fb      	ldrb	r3, [r7, #3]
 8009012:	b2db      	uxtb	r3, r3
 8009014:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009018:	b2da      	uxtb	r2, r3
 800901a:	4b31      	ldr	r3, [pc, #196]	; (80090e0 <xPortStartScheduler+0x130>)
 800901c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800901e:	4b31      	ldr	r3, [pc, #196]	; (80090e4 <xPortStartScheduler+0x134>)
 8009020:	2207      	movs	r2, #7
 8009022:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009024:	e009      	b.n	800903a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009026:	4b2f      	ldr	r3, [pc, #188]	; (80090e4 <xPortStartScheduler+0x134>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3b01      	subs	r3, #1
 800902c:	4a2d      	ldr	r2, [pc, #180]	; (80090e4 <xPortStartScheduler+0x134>)
 800902e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009030:	78fb      	ldrb	r3, [r7, #3]
 8009032:	b2db      	uxtb	r3, r3
 8009034:	005b      	lsls	r3, r3, #1
 8009036:	b2db      	uxtb	r3, r3
 8009038:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800903a:	78fb      	ldrb	r3, [r7, #3]
 800903c:	b2db      	uxtb	r3, r3
 800903e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009042:	2b80      	cmp	r3, #128	; 0x80
 8009044:	d0ef      	beq.n	8009026 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009046:	4b27      	ldr	r3, [pc, #156]	; (80090e4 <xPortStartScheduler+0x134>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f1c3 0307 	rsb	r3, r3, #7
 800904e:	2b04      	cmp	r3, #4
 8009050:	d00a      	beq.n	8009068 <xPortStartScheduler+0xb8>
	__asm volatile
 8009052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009056:	f383 8811 	msr	BASEPRI, r3
 800905a:	f3bf 8f6f 	isb	sy
 800905e:	f3bf 8f4f 	dsb	sy
 8009062:	60bb      	str	r3, [r7, #8]
}
 8009064:	bf00      	nop
 8009066:	e7fe      	b.n	8009066 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009068:	4b1e      	ldr	r3, [pc, #120]	; (80090e4 <xPortStartScheduler+0x134>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	021b      	lsls	r3, r3, #8
 800906e:	4a1d      	ldr	r2, [pc, #116]	; (80090e4 <xPortStartScheduler+0x134>)
 8009070:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009072:	4b1c      	ldr	r3, [pc, #112]	; (80090e4 <xPortStartScheduler+0x134>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800907a:	4a1a      	ldr	r2, [pc, #104]	; (80090e4 <xPortStartScheduler+0x134>)
 800907c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	b2da      	uxtb	r2, r3
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009086:	4b18      	ldr	r3, [pc, #96]	; (80090e8 <xPortStartScheduler+0x138>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a17      	ldr	r2, [pc, #92]	; (80090e8 <xPortStartScheduler+0x138>)
 800908c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009090:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009092:	4b15      	ldr	r3, [pc, #84]	; (80090e8 <xPortStartScheduler+0x138>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a14      	ldr	r2, [pc, #80]	; (80090e8 <xPortStartScheduler+0x138>)
 8009098:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800909c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800909e:	f000 f8dd 	bl	800925c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80090a2:	4b12      	ldr	r3, [pc, #72]	; (80090ec <xPortStartScheduler+0x13c>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80090a8:	f000 f8fc 	bl	80092a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80090ac:	4b10      	ldr	r3, [pc, #64]	; (80090f0 <xPortStartScheduler+0x140>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a0f      	ldr	r2, [pc, #60]	; (80090f0 <xPortStartScheduler+0x140>)
 80090b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80090b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80090b8:	f7ff ff66 	bl	8008f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80090bc:	f7ff f854 	bl	8008168 <vTaskSwitchContext>
	prvTaskExitError();
 80090c0:	f7ff ff20 	bl	8008f04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3718      	adds	r7, #24
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	e000ed00 	.word	0xe000ed00
 80090d4:	410fc271 	.word	0x410fc271
 80090d8:	410fc270 	.word	0x410fc270
 80090dc:	e000e400 	.word	0xe000e400
 80090e0:	20000dac 	.word	0x20000dac
 80090e4:	20000db0 	.word	0x20000db0
 80090e8:	e000ed20 	.word	0xe000ed20
 80090ec:	2000000c 	.word	0x2000000c
 80090f0:	e000ef34 	.word	0xe000ef34

080090f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
	__asm volatile
 80090fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fe:	f383 8811 	msr	BASEPRI, r3
 8009102:	f3bf 8f6f 	isb	sy
 8009106:	f3bf 8f4f 	dsb	sy
 800910a:	607b      	str	r3, [r7, #4]
}
 800910c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800910e:	4b0f      	ldr	r3, [pc, #60]	; (800914c <vPortEnterCritical+0x58>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	3301      	adds	r3, #1
 8009114:	4a0d      	ldr	r2, [pc, #52]	; (800914c <vPortEnterCritical+0x58>)
 8009116:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009118:	4b0c      	ldr	r3, [pc, #48]	; (800914c <vPortEnterCritical+0x58>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d10f      	bne.n	8009140 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009120:	4b0b      	ldr	r3, [pc, #44]	; (8009150 <vPortEnterCritical+0x5c>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00a      	beq.n	8009140 <vPortEnterCritical+0x4c>
	__asm volatile
 800912a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	603b      	str	r3, [r7, #0]
}
 800913c:	bf00      	nop
 800913e:	e7fe      	b.n	800913e <vPortEnterCritical+0x4a>
	}
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr
 800914c:	2000000c 	.word	0x2000000c
 8009150:	e000ed04 	.word	0xe000ed04

08009154 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800915a:	4b12      	ldr	r3, [pc, #72]	; (80091a4 <vPortExitCritical+0x50>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10a      	bne.n	8009178 <vPortExitCritical+0x24>
	__asm volatile
 8009162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009166:	f383 8811 	msr	BASEPRI, r3
 800916a:	f3bf 8f6f 	isb	sy
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	607b      	str	r3, [r7, #4]
}
 8009174:	bf00      	nop
 8009176:	e7fe      	b.n	8009176 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009178:	4b0a      	ldr	r3, [pc, #40]	; (80091a4 <vPortExitCritical+0x50>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	3b01      	subs	r3, #1
 800917e:	4a09      	ldr	r2, [pc, #36]	; (80091a4 <vPortExitCritical+0x50>)
 8009180:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009182:	4b08      	ldr	r3, [pc, #32]	; (80091a4 <vPortExitCritical+0x50>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d105      	bne.n	8009196 <vPortExitCritical+0x42>
 800918a:	2300      	movs	r3, #0
 800918c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	f383 8811 	msr	BASEPRI, r3
}
 8009194:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009196:	bf00      	nop
 8009198:	370c      	adds	r7, #12
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	2000000c 	.word	0x2000000c
	...

080091b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80091b0:	f3ef 8009 	mrs	r0, PSP
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	4b15      	ldr	r3, [pc, #84]	; (8009210 <pxCurrentTCBConst>)
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	f01e 0f10 	tst.w	lr, #16
 80091c0:	bf08      	it	eq
 80091c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80091c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ca:	6010      	str	r0, [r2, #0]
 80091cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80091d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80091d4:	f380 8811 	msr	BASEPRI, r0
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	f7fe ffc2 	bl	8008168 <vTaskSwitchContext>
 80091e4:	f04f 0000 	mov.w	r0, #0
 80091e8:	f380 8811 	msr	BASEPRI, r0
 80091ec:	bc09      	pop	{r0, r3}
 80091ee:	6819      	ldr	r1, [r3, #0]
 80091f0:	6808      	ldr	r0, [r1, #0]
 80091f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f6:	f01e 0f10 	tst.w	lr, #16
 80091fa:	bf08      	it	eq
 80091fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009200:	f380 8809 	msr	PSP, r0
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	f3af 8000 	nop.w

08009210 <pxCurrentTCBConst>:
 8009210:	20000780 	.word	0x20000780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009214:	bf00      	nop
 8009216:	bf00      	nop

08009218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
	__asm volatile
 800921e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009222:	f383 8811 	msr	BASEPRI, r3
 8009226:	f3bf 8f6f 	isb	sy
 800922a:	f3bf 8f4f 	dsb	sy
 800922e:	607b      	str	r3, [r7, #4]
}
 8009230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009232:	f7fe fedf 	bl	8007ff4 <xTaskIncrementTick>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d003      	beq.n	8009244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800923c:	4b06      	ldr	r3, [pc, #24]	; (8009258 <xPortSysTickHandler+0x40>)
 800923e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009242:	601a      	str	r2, [r3, #0]
 8009244:	2300      	movs	r3, #0
 8009246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	f383 8811 	msr	BASEPRI, r3
}
 800924e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009250:	bf00      	nop
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	e000ed04 	.word	0xe000ed04

0800925c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800925c:	b480      	push	{r7}
 800925e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009260:	4b0b      	ldr	r3, [pc, #44]	; (8009290 <vPortSetupTimerInterrupt+0x34>)
 8009262:	2200      	movs	r2, #0
 8009264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009266:	4b0b      	ldr	r3, [pc, #44]	; (8009294 <vPortSetupTimerInterrupt+0x38>)
 8009268:	2200      	movs	r2, #0
 800926a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800926c:	4b0a      	ldr	r3, [pc, #40]	; (8009298 <vPortSetupTimerInterrupt+0x3c>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a0a      	ldr	r2, [pc, #40]	; (800929c <vPortSetupTimerInterrupt+0x40>)
 8009272:	fba2 2303 	umull	r2, r3, r2, r3
 8009276:	099b      	lsrs	r3, r3, #6
 8009278:	4a09      	ldr	r2, [pc, #36]	; (80092a0 <vPortSetupTimerInterrupt+0x44>)
 800927a:	3b01      	subs	r3, #1
 800927c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800927e:	4b04      	ldr	r3, [pc, #16]	; (8009290 <vPortSetupTimerInterrupt+0x34>)
 8009280:	2207      	movs	r2, #7
 8009282:	601a      	str	r2, [r3, #0]
}
 8009284:	bf00      	nop
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	e000e010 	.word	0xe000e010
 8009294:	e000e018 	.word	0xe000e018
 8009298:	20000000 	.word	0x20000000
 800929c:	10624dd3 	.word	0x10624dd3
 80092a0:	e000e014 	.word	0xe000e014

080092a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80092a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80092b4 <vPortEnableVFP+0x10>
 80092a8:	6801      	ldr	r1, [r0, #0]
 80092aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80092ae:	6001      	str	r1, [r0, #0]
 80092b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80092b2:	bf00      	nop
 80092b4:	e000ed88 	.word	0xe000ed88

080092b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80092b8:	b480      	push	{r7}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80092be:	f3ef 8305 	mrs	r3, IPSR
 80092c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2b0f      	cmp	r3, #15
 80092c8:	d914      	bls.n	80092f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80092ca:	4a17      	ldr	r2, [pc, #92]	; (8009328 <vPortValidateInterruptPriority+0x70>)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	4413      	add	r3, r2
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80092d4:	4b15      	ldr	r3, [pc, #84]	; (800932c <vPortValidateInterruptPriority+0x74>)
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	7afa      	ldrb	r2, [r7, #11]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d20a      	bcs.n	80092f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	607b      	str	r3, [r7, #4]
}
 80092f0:	bf00      	nop
 80092f2:	e7fe      	b.n	80092f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80092f4:	4b0e      	ldr	r3, [pc, #56]	; (8009330 <vPortValidateInterruptPriority+0x78>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80092fc:	4b0d      	ldr	r3, [pc, #52]	; (8009334 <vPortValidateInterruptPriority+0x7c>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	429a      	cmp	r2, r3
 8009302:	d90a      	bls.n	800931a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	603b      	str	r3, [r7, #0]
}
 8009316:	bf00      	nop
 8009318:	e7fe      	b.n	8009318 <vPortValidateInterruptPriority+0x60>
	}
 800931a:	bf00      	nop
 800931c:	3714      	adds	r7, #20
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr
 8009326:	bf00      	nop
 8009328:	e000e3f0 	.word	0xe000e3f0
 800932c:	20000dac 	.word	0x20000dac
 8009330:	e000ed0c 	.word	0xe000ed0c
 8009334:	20000db0 	.word	0x20000db0

08009338 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b08a      	sub	sp, #40	; 0x28
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009340:	2300      	movs	r3, #0
 8009342:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009344:	f7fe fd9a 	bl	8007e7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009348:	4b5b      	ldr	r3, [pc, #364]	; (80094b8 <pvPortMalloc+0x180>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d101      	bne.n	8009354 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009350:	f000 f920 	bl	8009594 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009354:	4b59      	ldr	r3, [pc, #356]	; (80094bc <pvPortMalloc+0x184>)
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4013      	ands	r3, r2
 800935c:	2b00      	cmp	r3, #0
 800935e:	f040 8093 	bne.w	8009488 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d01d      	beq.n	80093a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009368:	2208      	movs	r2, #8
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4413      	add	r3, r2
 800936e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f003 0307 	and.w	r3, r3, #7
 8009376:	2b00      	cmp	r3, #0
 8009378:	d014      	beq.n	80093a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f023 0307 	bic.w	r3, r3, #7
 8009380:	3308      	adds	r3, #8
 8009382:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f003 0307 	and.w	r3, r3, #7
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00a      	beq.n	80093a4 <pvPortMalloc+0x6c>
	__asm volatile
 800938e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	617b      	str	r3, [r7, #20]
}
 80093a0:	bf00      	nop
 80093a2:	e7fe      	b.n	80093a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d06e      	beq.n	8009488 <pvPortMalloc+0x150>
 80093aa:	4b45      	ldr	r3, [pc, #276]	; (80094c0 <pvPortMalloc+0x188>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d869      	bhi.n	8009488 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80093b4:	4b43      	ldr	r3, [pc, #268]	; (80094c4 <pvPortMalloc+0x18c>)
 80093b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80093b8:	4b42      	ldr	r3, [pc, #264]	; (80094c4 <pvPortMalloc+0x18c>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093be:	e004      	b.n	80093ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80093c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d903      	bls.n	80093dc <pvPortMalloc+0xa4>
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1f1      	bne.n	80093c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80093dc:	4b36      	ldr	r3, [pc, #216]	; (80094b8 <pvPortMalloc+0x180>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d050      	beq.n	8009488 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2208      	movs	r2, #8
 80093ec:	4413      	add	r3, r2
 80093ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80093f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	6a3b      	ldr	r3, [r7, #32]
 80093f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80093f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fa:	685a      	ldr	r2, [r3, #4]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	1ad2      	subs	r2, r2, r3
 8009400:	2308      	movs	r3, #8
 8009402:	005b      	lsls	r3, r3, #1
 8009404:	429a      	cmp	r2, r3
 8009406:	d91f      	bls.n	8009448 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4413      	add	r3, r2
 800940e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	f003 0307 	and.w	r3, r3, #7
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00a      	beq.n	8009430 <pvPortMalloc+0xf8>
	__asm volatile
 800941a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941e:	f383 8811 	msr	BASEPRI, r3
 8009422:	f3bf 8f6f 	isb	sy
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	613b      	str	r3, [r7, #16]
}
 800942c:	bf00      	nop
 800942e:	e7fe      	b.n	800942e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009432:	685a      	ldr	r2, [r3, #4]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	1ad2      	subs	r2, r2, r3
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009442:	69b8      	ldr	r0, [r7, #24]
 8009444:	f000 f908 	bl	8009658 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009448:	4b1d      	ldr	r3, [pc, #116]	; (80094c0 <pvPortMalloc+0x188>)
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	4a1b      	ldr	r2, [pc, #108]	; (80094c0 <pvPortMalloc+0x188>)
 8009454:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009456:	4b1a      	ldr	r3, [pc, #104]	; (80094c0 <pvPortMalloc+0x188>)
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	4b1b      	ldr	r3, [pc, #108]	; (80094c8 <pvPortMalloc+0x190>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	429a      	cmp	r2, r3
 8009460:	d203      	bcs.n	800946a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009462:	4b17      	ldr	r3, [pc, #92]	; (80094c0 <pvPortMalloc+0x188>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a18      	ldr	r2, [pc, #96]	; (80094c8 <pvPortMalloc+0x190>)
 8009468:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800946a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	4b13      	ldr	r3, [pc, #76]	; (80094bc <pvPortMalloc+0x184>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	431a      	orrs	r2, r3
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947a:	2200      	movs	r2, #0
 800947c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800947e:	4b13      	ldr	r3, [pc, #76]	; (80094cc <pvPortMalloc+0x194>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3301      	adds	r3, #1
 8009484:	4a11      	ldr	r2, [pc, #68]	; (80094cc <pvPortMalloc+0x194>)
 8009486:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009488:	f7fe fd06 	bl	8007e98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	f003 0307 	and.w	r3, r3, #7
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00a      	beq.n	80094ac <pvPortMalloc+0x174>
	__asm volatile
 8009496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949a:	f383 8811 	msr	BASEPRI, r3
 800949e:	f3bf 8f6f 	isb	sy
 80094a2:	f3bf 8f4f 	dsb	sy
 80094a6:	60fb      	str	r3, [r7, #12]
}
 80094a8:	bf00      	nop
 80094aa:	e7fe      	b.n	80094aa <pvPortMalloc+0x172>
	return pvReturn;
 80094ac:	69fb      	ldr	r3, [r7, #28]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3728      	adds	r7, #40	; 0x28
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	200049bc 	.word	0x200049bc
 80094bc:	200049d0 	.word	0x200049d0
 80094c0:	200049c0 	.word	0x200049c0
 80094c4:	200049b4 	.word	0x200049b4
 80094c8:	200049c4 	.word	0x200049c4
 80094cc:	200049c8 	.word	0x200049c8

080094d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d04d      	beq.n	800957e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80094e2:	2308      	movs	r3, #8
 80094e4:	425b      	negs	r3, r3
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	4413      	add	r3, r2
 80094ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	685a      	ldr	r2, [r3, #4]
 80094f4:	4b24      	ldr	r3, [pc, #144]	; (8009588 <vPortFree+0xb8>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4013      	ands	r3, r2
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10a      	bne.n	8009514 <vPortFree+0x44>
	__asm volatile
 80094fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	60fb      	str	r3, [r7, #12]
}
 8009510:	bf00      	nop
 8009512:	e7fe      	b.n	8009512 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00a      	beq.n	8009532 <vPortFree+0x62>
	__asm volatile
 800951c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	60bb      	str	r3, [r7, #8]
}
 800952e:	bf00      	nop
 8009530:	e7fe      	b.n	8009530 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	685a      	ldr	r2, [r3, #4]
 8009536:	4b14      	ldr	r3, [pc, #80]	; (8009588 <vPortFree+0xb8>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4013      	ands	r3, r2
 800953c:	2b00      	cmp	r3, #0
 800953e:	d01e      	beq.n	800957e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d11a      	bne.n	800957e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	685a      	ldr	r2, [r3, #4]
 800954c:	4b0e      	ldr	r3, [pc, #56]	; (8009588 <vPortFree+0xb8>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	43db      	mvns	r3, r3
 8009552:	401a      	ands	r2, r3
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009558:	f7fe fc90 	bl	8007e7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	685a      	ldr	r2, [r3, #4]
 8009560:	4b0a      	ldr	r3, [pc, #40]	; (800958c <vPortFree+0xbc>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4413      	add	r3, r2
 8009566:	4a09      	ldr	r2, [pc, #36]	; (800958c <vPortFree+0xbc>)
 8009568:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800956a:	6938      	ldr	r0, [r7, #16]
 800956c:	f000 f874 	bl	8009658 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009570:	4b07      	ldr	r3, [pc, #28]	; (8009590 <vPortFree+0xc0>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	3301      	adds	r3, #1
 8009576:	4a06      	ldr	r2, [pc, #24]	; (8009590 <vPortFree+0xc0>)
 8009578:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800957a:	f7fe fc8d 	bl	8007e98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800957e:	bf00      	nop
 8009580:	3718      	adds	r7, #24
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	200049d0 	.word	0x200049d0
 800958c:	200049c0 	.word	0x200049c0
 8009590:	200049cc 	.word	0x200049cc

08009594 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800959a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800959e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80095a0:	4b27      	ldr	r3, [pc, #156]	; (8009640 <prvHeapInit+0xac>)
 80095a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f003 0307 	and.w	r3, r3, #7
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00c      	beq.n	80095c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	3307      	adds	r3, #7
 80095b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f023 0307 	bic.w	r3, r3, #7
 80095ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80095bc:	68ba      	ldr	r2, [r7, #8]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	4a1f      	ldr	r2, [pc, #124]	; (8009640 <prvHeapInit+0xac>)
 80095c4:	4413      	add	r3, r2
 80095c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80095cc:	4a1d      	ldr	r2, [pc, #116]	; (8009644 <prvHeapInit+0xb0>)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80095d2:	4b1c      	ldr	r3, [pc, #112]	; (8009644 <prvHeapInit+0xb0>)
 80095d4:	2200      	movs	r2, #0
 80095d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	4413      	add	r3, r2
 80095de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80095e0:	2208      	movs	r2, #8
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	1a9b      	subs	r3, r3, r2
 80095e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f023 0307 	bic.w	r3, r3, #7
 80095ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	4a15      	ldr	r2, [pc, #84]	; (8009648 <prvHeapInit+0xb4>)
 80095f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80095f6:	4b14      	ldr	r3, [pc, #80]	; (8009648 <prvHeapInit+0xb4>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2200      	movs	r2, #0
 80095fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80095fe:	4b12      	ldr	r3, [pc, #72]	; (8009648 <prvHeapInit+0xb4>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2200      	movs	r2, #0
 8009604:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	1ad2      	subs	r2, r2, r3
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009614:	4b0c      	ldr	r3, [pc, #48]	; (8009648 <prvHeapInit+0xb4>)
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	4a0a      	ldr	r2, [pc, #40]	; (800964c <prvHeapInit+0xb8>)
 8009622:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	4a09      	ldr	r2, [pc, #36]	; (8009650 <prvHeapInit+0xbc>)
 800962a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800962c:	4b09      	ldr	r3, [pc, #36]	; (8009654 <prvHeapInit+0xc0>)
 800962e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009632:	601a      	str	r2, [r3, #0]
}
 8009634:	bf00      	nop
 8009636:	3714      	adds	r7, #20
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr
 8009640:	20000db4 	.word	0x20000db4
 8009644:	200049b4 	.word	0x200049b4
 8009648:	200049bc 	.word	0x200049bc
 800964c:	200049c4 	.word	0x200049c4
 8009650:	200049c0 	.word	0x200049c0
 8009654:	200049d0 	.word	0x200049d0

08009658 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009660:	4b28      	ldr	r3, [pc, #160]	; (8009704 <prvInsertBlockIntoFreeList+0xac>)
 8009662:	60fb      	str	r3, [r7, #12]
 8009664:	e002      	b.n	800966c <prvInsertBlockIntoFreeList+0x14>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	60fb      	str	r3, [r7, #12]
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	429a      	cmp	r2, r3
 8009674:	d8f7      	bhi.n	8009666 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	68ba      	ldr	r2, [r7, #8]
 8009680:	4413      	add	r3, r2
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	429a      	cmp	r2, r3
 8009686:	d108      	bne.n	800969a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	685a      	ldr	r2, [r3, #4]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	441a      	add	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	441a      	add	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d118      	bne.n	80096e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	4b15      	ldr	r3, [pc, #84]	; (8009708 <prvInsertBlockIntoFreeList+0xb0>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d00d      	beq.n	80096d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	685a      	ldr	r2, [r3, #4]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	441a      	add	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	601a      	str	r2, [r3, #0]
 80096d4:	e008      	b.n	80096e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80096d6:	4b0c      	ldr	r3, [pc, #48]	; (8009708 <prvInsertBlockIntoFreeList+0xb0>)
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	601a      	str	r2, [r3, #0]
 80096de:	e003      	b.n	80096e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d002      	beq.n	80096f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096f6:	bf00      	nop
 80096f8:	3714      	adds	r7, #20
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	200049b4 	.word	0x200049b4
 8009708:	200049bc 	.word	0x200049bc

0800970c <OLED_Refresh_Gram>:
#include "stdlib.h"
#include "oledfont.h"  

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8009712:	2300      	movs	r3, #0
 8009714:	71fb      	strb	r3, [r7, #7]
 8009716:	e026      	b.n	8009766 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8009718:	79fb      	ldrb	r3, [r7, #7]
 800971a:	3b50      	subs	r3, #80	; 0x50
 800971c:	b2db      	uxtb	r3, r3
 800971e:	2100      	movs	r1, #0
 8009720:	4618      	mov	r0, r3
 8009722:	f000 f82b 	bl	800977c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8009726:	2100      	movs	r1, #0
 8009728:	2000      	movs	r0, #0
 800972a:	f000 f827 	bl	800977c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800972e:	2100      	movs	r1, #0
 8009730:	2010      	movs	r0, #16
 8009732:	f000 f823 	bl	800977c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8009736:	2300      	movs	r3, #0
 8009738:	71bb      	strb	r3, [r7, #6]
 800973a:	e00d      	b.n	8009758 <OLED_Refresh_Gram+0x4c>
 800973c:	79ba      	ldrb	r2, [r7, #6]
 800973e:	79fb      	ldrb	r3, [r7, #7]
 8009740:	490d      	ldr	r1, [pc, #52]	; (8009778 <OLED_Refresh_Gram+0x6c>)
 8009742:	00d2      	lsls	r2, r2, #3
 8009744:	440a      	add	r2, r1
 8009746:	4413      	add	r3, r2
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	2101      	movs	r1, #1
 800974c:	4618      	mov	r0, r3
 800974e:	f000 f815 	bl	800977c <OLED_WR_Byte>
 8009752:	79bb      	ldrb	r3, [r7, #6]
 8009754:	3301      	adds	r3, #1
 8009756:	71bb      	strb	r3, [r7, #6]
 8009758:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800975c:	2b00      	cmp	r3, #0
 800975e:	daed      	bge.n	800973c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8009760:	79fb      	ldrb	r3, [r7, #7]
 8009762:	3301      	adds	r3, #1
 8009764:	71fb      	strb	r3, [r7, #7]
 8009766:	79fb      	ldrb	r3, [r7, #7]
 8009768:	2b07      	cmp	r3, #7
 800976a:	d9d5      	bls.n	8009718 <OLED_Refresh_Gram+0xc>
	}   
}
 800976c:	bf00      	nop
 800976e:	bf00      	nop
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	20004ca0 	.word	0x20004ca0

0800977c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	4603      	mov	r3, r0
 8009784:	460a      	mov	r2, r1
 8009786:	71fb      	strb	r3, [r7, #7]
 8009788:	4613      	mov	r3, r2
 800978a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800978c:	79bb      	ldrb	r3, [r7, #6]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d006      	beq.n	80097a0 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8009792:	2201      	movs	r2, #1
 8009794:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009798:	481c      	ldr	r0, [pc, #112]	; (800980c <OLED_WR_Byte+0x90>)
 800979a:	f7fa f8d5 	bl	8003948 <HAL_GPIO_WritePin>
 800979e:	e005      	b.n	80097ac <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 80097a0:	2200      	movs	r2, #0
 80097a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80097a6:	4819      	ldr	r0, [pc, #100]	; (800980c <OLED_WR_Byte+0x90>)
 80097a8:	f7fa f8ce 	bl	8003948 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80097ac:	2300      	movs	r3, #0
 80097ae:	73fb      	strb	r3, [r7, #15]
 80097b0:	e01e      	b.n	80097f0 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 80097b2:	2200      	movs	r2, #0
 80097b4:	2120      	movs	r1, #32
 80097b6:	4815      	ldr	r0, [pc, #84]	; (800980c <OLED_WR_Byte+0x90>)
 80097b8:	f7fa f8c6 	bl	8003948 <HAL_GPIO_WritePin>
		if(dat&0x80)
 80097bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	da05      	bge.n	80097d0 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 80097c4:	2201      	movs	r2, #1
 80097c6:	2140      	movs	r1, #64	; 0x40
 80097c8:	4810      	ldr	r0, [pc, #64]	; (800980c <OLED_WR_Byte+0x90>)
 80097ca:	f7fa f8bd 	bl	8003948 <HAL_GPIO_WritePin>
 80097ce:	e004      	b.n	80097da <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 80097d0:	2200      	movs	r2, #0
 80097d2:	2140      	movs	r1, #64	; 0x40
 80097d4:	480d      	ldr	r0, [pc, #52]	; (800980c <OLED_WR_Byte+0x90>)
 80097d6:	f7fa f8b7 	bl	8003948 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80097da:	2201      	movs	r2, #1
 80097dc:	2120      	movs	r1, #32
 80097de:	480b      	ldr	r0, [pc, #44]	; (800980c <OLED_WR_Byte+0x90>)
 80097e0:	f7fa f8b2 	bl	8003948 <HAL_GPIO_WritePin>
		dat<<=1;   
 80097e4:	79fb      	ldrb	r3, [r7, #7]
 80097e6:	005b      	lsls	r3, r3, #1
 80097e8:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80097ea:	7bfb      	ldrb	r3, [r7, #15]
 80097ec:	3301      	adds	r3, #1
 80097ee:	73fb      	strb	r3, [r7, #15]
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
 80097f2:	2b07      	cmp	r3, #7
 80097f4:	d9dd      	bls.n	80097b2 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 80097f6:	2201      	movs	r2, #1
 80097f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80097fc:	4803      	ldr	r0, [pc, #12]	; (800980c <OLED_WR_Byte+0x90>)
 80097fe:	f7fa f8a3 	bl	8003948 <HAL_GPIO_WritePin>
} 
 8009802:	bf00      	nop
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	40021000 	.word	0x40021000

08009810 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8009816:	2300      	movs	r3, #0
 8009818:	71fb      	strb	r3, [r7, #7]
 800981a:	e014      	b.n	8009846 <OLED_Clear+0x36>
 800981c:	2300      	movs	r3, #0
 800981e:	71bb      	strb	r3, [r7, #6]
 8009820:	e00a      	b.n	8009838 <OLED_Clear+0x28>
 8009822:	79ba      	ldrb	r2, [r7, #6]
 8009824:	79fb      	ldrb	r3, [r7, #7]
 8009826:	490c      	ldr	r1, [pc, #48]	; (8009858 <OLED_Clear+0x48>)
 8009828:	00d2      	lsls	r2, r2, #3
 800982a:	440a      	add	r2, r1
 800982c:	4413      	add	r3, r2
 800982e:	2200      	movs	r2, #0
 8009830:	701a      	strb	r2, [r3, #0]
 8009832:	79bb      	ldrb	r3, [r7, #6]
 8009834:	3301      	adds	r3, #1
 8009836:	71bb      	strb	r3, [r7, #6]
 8009838:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800983c:	2b00      	cmp	r3, #0
 800983e:	daf0      	bge.n	8009822 <OLED_Clear+0x12>
 8009840:	79fb      	ldrb	r3, [r7, #7]
 8009842:	3301      	adds	r3, #1
 8009844:	71fb      	strb	r3, [r7, #7]
 8009846:	79fb      	ldrb	r3, [r7, #7]
 8009848:	2b07      	cmp	r3, #7
 800984a:	d9e7      	bls.n	800981c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800984c:	f7ff ff5e 	bl	800970c <OLED_Refresh_Gram>
}
 8009850:	bf00      	nop
 8009852:	3708      	adds	r7, #8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	20004ca0 	.word	0x20004ca0

0800985c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	4603      	mov	r3, r0
 8009864:	71fb      	strb	r3, [r7, #7]
 8009866:	460b      	mov	r3, r1
 8009868:	71bb      	strb	r3, [r7, #6]
 800986a:	4613      	mov	r3, r2
 800986c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800986e:	2300      	movs	r3, #0
 8009870:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8009872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009876:	2b00      	cmp	r3, #0
 8009878:	db41      	blt.n	80098fe <OLED_DrawPoint+0xa2>
 800987a:	79bb      	ldrb	r3, [r7, #6]
 800987c:	2b3f      	cmp	r3, #63	; 0x3f
 800987e:	d83e      	bhi.n	80098fe <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8009880:	79bb      	ldrb	r3, [r7, #6]
 8009882:	08db      	lsrs	r3, r3, #3
 8009884:	b2db      	uxtb	r3, r3
 8009886:	f1c3 0307 	rsb	r3, r3, #7
 800988a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800988c:	79bb      	ldrb	r3, [r7, #6]
 800988e:	f003 0307 	and.w	r3, r3, #7
 8009892:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8009894:	7b7b      	ldrb	r3, [r7, #13]
 8009896:	f1c3 0307 	rsb	r3, r3, #7
 800989a:	2201      	movs	r2, #1
 800989c:	fa02 f303 	lsl.w	r3, r2, r3
 80098a0:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80098a2:	797b      	ldrb	r3, [r7, #5]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d012      	beq.n	80098ce <OLED_DrawPoint+0x72>
 80098a8:	79fa      	ldrb	r2, [r7, #7]
 80098aa:	7bbb      	ldrb	r3, [r7, #14]
 80098ac:	4917      	ldr	r1, [pc, #92]	; (800990c <OLED_DrawPoint+0xb0>)
 80098ae:	00d2      	lsls	r2, r2, #3
 80098b0:	440a      	add	r2, r1
 80098b2:	4413      	add	r3, r2
 80098b4:	7818      	ldrb	r0, [r3, #0]
 80098b6:	79fa      	ldrb	r2, [r7, #7]
 80098b8:	7bbb      	ldrb	r3, [r7, #14]
 80098ba:	7bf9      	ldrb	r1, [r7, #15]
 80098bc:	4301      	orrs	r1, r0
 80098be:	b2c8      	uxtb	r0, r1
 80098c0:	4912      	ldr	r1, [pc, #72]	; (800990c <OLED_DrawPoint+0xb0>)
 80098c2:	00d2      	lsls	r2, r2, #3
 80098c4:	440a      	add	r2, r1
 80098c6:	4413      	add	r3, r2
 80098c8:	4602      	mov	r2, r0
 80098ca:	701a      	strb	r2, [r3, #0]
 80098cc:	e018      	b.n	8009900 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 80098ce:	79fa      	ldrb	r2, [r7, #7]
 80098d0:	7bbb      	ldrb	r3, [r7, #14]
 80098d2:	490e      	ldr	r1, [pc, #56]	; (800990c <OLED_DrawPoint+0xb0>)
 80098d4:	00d2      	lsls	r2, r2, #3
 80098d6:	440a      	add	r2, r1
 80098d8:	4413      	add	r3, r2
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	b25a      	sxtb	r2, r3
 80098de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098e2:	43db      	mvns	r3, r3
 80098e4:	b25b      	sxtb	r3, r3
 80098e6:	4013      	ands	r3, r2
 80098e8:	b259      	sxtb	r1, r3
 80098ea:	79fa      	ldrb	r2, [r7, #7]
 80098ec:	7bbb      	ldrb	r3, [r7, #14]
 80098ee:	b2c8      	uxtb	r0, r1
 80098f0:	4906      	ldr	r1, [pc, #24]	; (800990c <OLED_DrawPoint+0xb0>)
 80098f2:	00d2      	lsls	r2, r2, #3
 80098f4:	440a      	add	r2, r1
 80098f6:	4413      	add	r3, r2
 80098f8:	4602      	mov	r2, r0
 80098fa:	701a      	strb	r2, [r3, #0]
 80098fc:	e000      	b.n	8009900 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 80098fe:	bf00      	nop
}
 8009900:	3714      	adds	r7, #20
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	20004ca0 	.word	0x20004ca0

08009910 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8009910:	b590      	push	{r4, r7, lr}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	4604      	mov	r4, r0
 8009918:	4608      	mov	r0, r1
 800991a:	4611      	mov	r1, r2
 800991c:	461a      	mov	r2, r3
 800991e:	4623      	mov	r3, r4
 8009920:	71fb      	strb	r3, [r7, #7]
 8009922:	4603      	mov	r3, r0
 8009924:	71bb      	strb	r3, [r7, #6]
 8009926:	460b      	mov	r3, r1
 8009928:	717b      	strb	r3, [r7, #5]
 800992a:	4613      	mov	r3, r2
 800992c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800992e:	79bb      	ldrb	r3, [r7, #6]
 8009930:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8009932:	797b      	ldrb	r3, [r7, #5]
 8009934:	3b20      	subs	r3, #32
 8009936:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8009938:	2300      	movs	r3, #0
 800993a:	73bb      	strb	r3, [r7, #14]
 800993c:	e04d      	b.n	80099da <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800993e:	793b      	ldrb	r3, [r7, #4]
 8009940:	2b0c      	cmp	r3, #12
 8009942:	d10b      	bne.n	800995c <OLED_ShowChar+0x4c>
 8009944:	797a      	ldrb	r2, [r7, #5]
 8009946:	7bb9      	ldrb	r1, [r7, #14]
 8009948:	4828      	ldr	r0, [pc, #160]	; (80099ec <OLED_ShowChar+0xdc>)
 800994a:	4613      	mov	r3, r2
 800994c:	005b      	lsls	r3, r3, #1
 800994e:	4413      	add	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	4403      	add	r3, r0
 8009954:	440b      	add	r3, r1
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	73fb      	strb	r3, [r7, #15]
 800995a:	e007      	b.n	800996c <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800995c:	797a      	ldrb	r2, [r7, #5]
 800995e:	7bbb      	ldrb	r3, [r7, #14]
 8009960:	4923      	ldr	r1, [pc, #140]	; (80099f0 <OLED_ShowChar+0xe0>)
 8009962:	0112      	lsls	r2, r2, #4
 8009964:	440a      	add	r2, r1
 8009966:	4413      	add	r3, r2
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800996c:	2300      	movs	r3, #0
 800996e:	737b      	strb	r3, [r7, #13]
 8009970:	e02d      	b.n	80099ce <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8009972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009976:	2b00      	cmp	r3, #0
 8009978:	da07      	bge.n	800998a <OLED_ShowChar+0x7a>
 800997a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800997e:	79b9      	ldrb	r1, [r7, #6]
 8009980:	79fb      	ldrb	r3, [r7, #7]
 8009982:	4618      	mov	r0, r3
 8009984:	f7ff ff6a 	bl	800985c <OLED_DrawPoint>
 8009988:	e00c      	b.n	80099a4 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800998a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800998e:	2b00      	cmp	r3, #0
 8009990:	bf0c      	ite	eq
 8009992:	2301      	moveq	r3, #1
 8009994:	2300      	movne	r3, #0
 8009996:	b2db      	uxtb	r3, r3
 8009998:	461a      	mov	r2, r3
 800999a:	79b9      	ldrb	r1, [r7, #6]
 800999c:	79fb      	ldrb	r3, [r7, #7]
 800999e:	4618      	mov	r0, r3
 80099a0:	f7ff ff5c 	bl	800985c <OLED_DrawPoint>
			temp<<=1;
 80099a4:	7bfb      	ldrb	r3, [r7, #15]
 80099a6:	005b      	lsls	r3, r3, #1
 80099a8:	73fb      	strb	r3, [r7, #15]
			y++;
 80099aa:	79bb      	ldrb	r3, [r7, #6]
 80099ac:	3301      	adds	r3, #1
 80099ae:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80099b0:	79ba      	ldrb	r2, [r7, #6]
 80099b2:	7b3b      	ldrb	r3, [r7, #12]
 80099b4:	1ad2      	subs	r2, r2, r3
 80099b6:	793b      	ldrb	r3, [r7, #4]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d105      	bne.n	80099c8 <OLED_ShowChar+0xb8>
			{
				y=y0;
 80099bc:	7b3b      	ldrb	r3, [r7, #12]
 80099be:	71bb      	strb	r3, [r7, #6]
				x++;
 80099c0:	79fb      	ldrb	r3, [r7, #7]
 80099c2:	3301      	adds	r3, #1
 80099c4:	71fb      	strb	r3, [r7, #7]
				break;
 80099c6:	e005      	b.n	80099d4 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80099c8:	7b7b      	ldrb	r3, [r7, #13]
 80099ca:	3301      	adds	r3, #1
 80099cc:	737b      	strb	r3, [r7, #13]
 80099ce:	7b7b      	ldrb	r3, [r7, #13]
 80099d0:	2b07      	cmp	r3, #7
 80099d2:	d9ce      	bls.n	8009972 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80099d4:	7bbb      	ldrb	r3, [r7, #14]
 80099d6:	3301      	adds	r3, #1
 80099d8:	73bb      	strb	r3, [r7, #14]
 80099da:	7bba      	ldrb	r2, [r7, #14]
 80099dc:	793b      	ldrb	r3, [r7, #4]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d3ad      	bcc.n	800993e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 80099e2:	bf00      	nop
 80099e4:	bf00      	nop
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd90      	pop	{r4, r7, pc}
 80099ec:	0800b498 	.word	0x0800b498
 80099f0:	0800b90c 	.word	0x0800b90c

080099f4 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af02      	add	r7, sp, #8
 80099fa:	4603      	mov	r3, r0
 80099fc:	603a      	str	r2, [r7, #0]
 80099fe:	71fb      	strb	r3, [r7, #7]
 8009a00:	460b      	mov	r3, r1
 8009a02:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8009a04:	e01f      	b.n	8009a46 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8009a06:	79fb      	ldrb	r3, [r7, #7]
 8009a08:	2b7a      	cmp	r3, #122	; 0x7a
 8009a0a:	d904      	bls.n	8009a16 <OLED_ShowString+0x22>
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	71fb      	strb	r3, [r7, #7]
 8009a10:	79bb      	ldrb	r3, [r7, #6]
 8009a12:	3310      	adds	r3, #16
 8009a14:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8009a16:	79bb      	ldrb	r3, [r7, #6]
 8009a18:	2b3a      	cmp	r3, #58	; 0x3a
 8009a1a:	d905      	bls.n	8009a28 <OLED_ShowString+0x34>
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	71fb      	strb	r3, [r7, #7]
 8009a20:	79fb      	ldrb	r3, [r7, #7]
 8009a22:	71bb      	strb	r3, [r7, #6]
 8009a24:	f7ff fef4 	bl	8009810 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	781a      	ldrb	r2, [r3, #0]
 8009a2c:	79b9      	ldrb	r1, [r7, #6]
 8009a2e:	79f8      	ldrb	r0, [r7, #7]
 8009a30:	2301      	movs	r3, #1
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	230c      	movs	r3, #12
 8009a36:	f7ff ff6b 	bl	8009910 <OLED_ShowChar>
        x+=8;
 8009a3a:	79fb      	ldrb	r3, [r7, #7]
 8009a3c:	3308      	adds	r3, #8
 8009a3e:	71fb      	strb	r3, [r7, #7]
        p++;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	3301      	adds	r3, #1
 8009a44:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1db      	bne.n	8009a06 <OLED_ShowString+0x12>
    }  
}	 
 8009a4e:	bf00      	nop
 8009a50:	bf00      	nop
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <OLED_Init>:

void OLED_Init(void)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8009a5c:	f7f9 ff8e 	bl	800397c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8009a60:	4b41      	ldr	r3, [pc, #260]	; (8009b68 <OLED_Init+0x110>)
 8009a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a64:	4a40      	ldr	r2, [pc, #256]	; (8009b68 <OLED_Init+0x110>)
 8009a66:	f023 0301 	bic.w	r3, r3, #1
 8009a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8009a6c:	4b3e      	ldr	r3, [pc, #248]	; (8009b68 <OLED_Init+0x110>)
 8009a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a70:	4a3d      	ldr	r2, [pc, #244]	; (8009b68 <OLED_Init+0x110>)
 8009a72:	f023 0304 	bic.w	r3, r3, #4
 8009a76:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8009a78:	f7f9 ff94 	bl	80039a4 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	2180      	movs	r1, #128	; 0x80
 8009a80:	483a      	ldr	r0, [pc, #232]	; (8009b6c <OLED_Init+0x114>)
 8009a82:	f7f9 ff61 	bl	8003948 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8009a86:	2064      	movs	r0, #100	; 0x64
 8009a88:	f7f9 f8b8 	bl	8002bfc <HAL_Delay>
	OLED_RST_Set();
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	2180      	movs	r1, #128	; 0x80
 8009a90:	4836      	ldr	r0, [pc, #216]	; (8009b6c <OLED_Init+0x114>)
 8009a92:	f7f9 ff59 	bl	8003948 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8009a96:	2100      	movs	r1, #0
 8009a98:	20ae      	movs	r0, #174	; 0xae
 8009a9a:	f7ff fe6f 	bl	800977c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	20d5      	movs	r0, #213	; 0xd5
 8009aa2:	f7ff fe6b 	bl	800977c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	2050      	movs	r0, #80	; 0x50
 8009aaa:	f7ff fe67 	bl	800977c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8009aae:	2100      	movs	r1, #0
 8009ab0:	20a8      	movs	r0, #168	; 0xa8
 8009ab2:	f7ff fe63 	bl	800977c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	203f      	movs	r0, #63	; 0x3f
 8009aba:	f7ff fe5f 	bl	800977c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8009abe:	2100      	movs	r1, #0
 8009ac0:	20d3      	movs	r0, #211	; 0xd3
 8009ac2:	f7ff fe5b 	bl	800977c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8009ac6:	2100      	movs	r1, #0
 8009ac8:	2000      	movs	r0, #0
 8009aca:	f7ff fe57 	bl	800977c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8009ace:	2100      	movs	r1, #0
 8009ad0:	2040      	movs	r0, #64	; 0x40
 8009ad2:	f7ff fe53 	bl	800977c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	208d      	movs	r0, #141	; 0x8d
 8009ada:	f7ff fe4f 	bl	800977c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8009ade:	2100      	movs	r1, #0
 8009ae0:	2014      	movs	r0, #20
 8009ae2:	f7ff fe4b 	bl	800977c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	2020      	movs	r0, #32
 8009aea:	f7ff fe47 	bl	800977c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8009aee:	2100      	movs	r1, #0
 8009af0:	2002      	movs	r0, #2
 8009af2:	f7ff fe43 	bl	800977c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8009af6:	2100      	movs	r1, #0
 8009af8:	20a1      	movs	r0, #161	; 0xa1
 8009afa:	f7ff fe3f 	bl	800977c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8009afe:	2100      	movs	r1, #0
 8009b00:	20c0      	movs	r0, #192	; 0xc0
 8009b02:	f7ff fe3b 	bl	800977c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8009b06:	2100      	movs	r1, #0
 8009b08:	20da      	movs	r0, #218	; 0xda
 8009b0a:	f7ff fe37 	bl	800977c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8009b0e:	2100      	movs	r1, #0
 8009b10:	2012      	movs	r0, #18
 8009b12:	f7ff fe33 	bl	800977c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8009b16:	2100      	movs	r1, #0
 8009b18:	2081      	movs	r0, #129	; 0x81
 8009b1a:	f7ff fe2f 	bl	800977c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8009b1e:	2100      	movs	r1, #0
 8009b20:	20ef      	movs	r0, #239	; 0xef
 8009b22:	f7ff fe2b 	bl	800977c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8009b26:	2100      	movs	r1, #0
 8009b28:	20d9      	movs	r0, #217	; 0xd9
 8009b2a:	f7ff fe27 	bl	800977c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8009b2e:	2100      	movs	r1, #0
 8009b30:	20f1      	movs	r0, #241	; 0xf1
 8009b32:	f7ff fe23 	bl	800977c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8009b36:	2100      	movs	r1, #0
 8009b38:	20db      	movs	r0, #219	; 0xdb
 8009b3a:	f7ff fe1f 	bl	800977c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8009b3e:	2100      	movs	r1, #0
 8009b40:	2030      	movs	r0, #48	; 0x30
 8009b42:	f7ff fe1b 	bl	800977c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8009b46:	2100      	movs	r1, #0
 8009b48:	20a4      	movs	r0, #164	; 0xa4
 8009b4a:	f7ff fe17 	bl	800977c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8009b4e:	2100      	movs	r1, #0
 8009b50:	20a6      	movs	r0, #166	; 0xa6
 8009b52:	f7ff fe13 	bl	800977c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8009b56:	2100      	movs	r1, #0
 8009b58:	20af      	movs	r0, #175	; 0xaf
 8009b5a:	f7ff fe0f 	bl	800977c <OLED_WR_Byte>
	OLED_Clear(); 
 8009b5e:	f7ff fe57 	bl	8009810 <OLED_Clear>
 8009b62:	bf00      	nop
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	40023800 	.word	0x40023800
 8009b6c:	40021000 	.word	0x40021000

08009b70 <__errno>:
 8009b70:	4b01      	ldr	r3, [pc, #4]	; (8009b78 <__errno+0x8>)
 8009b72:	6818      	ldr	r0, [r3, #0]
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	20000010 	.word	0x20000010

08009b7c <__libc_init_array>:
 8009b7c:	b570      	push	{r4, r5, r6, lr}
 8009b7e:	4d0d      	ldr	r5, [pc, #52]	; (8009bb4 <__libc_init_array+0x38>)
 8009b80:	4c0d      	ldr	r4, [pc, #52]	; (8009bb8 <__libc_init_array+0x3c>)
 8009b82:	1b64      	subs	r4, r4, r5
 8009b84:	10a4      	asrs	r4, r4, #2
 8009b86:	2600      	movs	r6, #0
 8009b88:	42a6      	cmp	r6, r4
 8009b8a:	d109      	bne.n	8009ba0 <__libc_init_array+0x24>
 8009b8c:	4d0b      	ldr	r5, [pc, #44]	; (8009bbc <__libc_init_array+0x40>)
 8009b8e:	4c0c      	ldr	r4, [pc, #48]	; (8009bc0 <__libc_init_array+0x44>)
 8009b90:	f001 fc04 	bl	800b39c <_init>
 8009b94:	1b64      	subs	r4, r4, r5
 8009b96:	10a4      	asrs	r4, r4, #2
 8009b98:	2600      	movs	r6, #0
 8009b9a:	42a6      	cmp	r6, r4
 8009b9c:	d105      	bne.n	8009baa <__libc_init_array+0x2e>
 8009b9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ba4:	4798      	blx	r3
 8009ba6:	3601      	adds	r6, #1
 8009ba8:	e7ee      	b.n	8009b88 <__libc_init_array+0xc>
 8009baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bae:	4798      	blx	r3
 8009bb0:	3601      	adds	r6, #1
 8009bb2:	e7f2      	b.n	8009b9a <__libc_init_array+0x1e>
 8009bb4:	0800bf78 	.word	0x0800bf78
 8009bb8:	0800bf78 	.word	0x0800bf78
 8009bbc:	0800bf78 	.word	0x0800bf78
 8009bc0:	0800bf7c 	.word	0x0800bf7c

08009bc4 <memcpy>:
 8009bc4:	440a      	add	r2, r1
 8009bc6:	4291      	cmp	r1, r2
 8009bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bcc:	d100      	bne.n	8009bd0 <memcpy+0xc>
 8009bce:	4770      	bx	lr
 8009bd0:	b510      	push	{r4, lr}
 8009bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bda:	4291      	cmp	r1, r2
 8009bdc:	d1f9      	bne.n	8009bd2 <memcpy+0xe>
 8009bde:	bd10      	pop	{r4, pc}

08009be0 <memset>:
 8009be0:	4402      	add	r2, r0
 8009be2:	4603      	mov	r3, r0
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d100      	bne.n	8009bea <memset+0xa>
 8009be8:	4770      	bx	lr
 8009bea:	f803 1b01 	strb.w	r1, [r3], #1
 8009bee:	e7f9      	b.n	8009be4 <memset+0x4>

08009bf0 <siprintf>:
 8009bf0:	b40e      	push	{r1, r2, r3}
 8009bf2:	b500      	push	{lr}
 8009bf4:	b09c      	sub	sp, #112	; 0x70
 8009bf6:	ab1d      	add	r3, sp, #116	; 0x74
 8009bf8:	9002      	str	r0, [sp, #8]
 8009bfa:	9006      	str	r0, [sp, #24]
 8009bfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c00:	4809      	ldr	r0, [pc, #36]	; (8009c28 <siprintf+0x38>)
 8009c02:	9107      	str	r1, [sp, #28]
 8009c04:	9104      	str	r1, [sp, #16]
 8009c06:	4909      	ldr	r1, [pc, #36]	; (8009c2c <siprintf+0x3c>)
 8009c08:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c0c:	9105      	str	r1, [sp, #20]
 8009c0e:	6800      	ldr	r0, [r0, #0]
 8009c10:	9301      	str	r3, [sp, #4]
 8009c12:	a902      	add	r1, sp, #8
 8009c14:	f000 f868 	bl	8009ce8 <_svfiprintf_r>
 8009c18:	9b02      	ldr	r3, [sp, #8]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	701a      	strb	r2, [r3, #0]
 8009c1e:	b01c      	add	sp, #112	; 0x70
 8009c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c24:	b003      	add	sp, #12
 8009c26:	4770      	bx	lr
 8009c28:	20000010 	.word	0x20000010
 8009c2c:	ffff0208 	.word	0xffff0208

08009c30 <__ssputs_r>:
 8009c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c34:	688e      	ldr	r6, [r1, #8]
 8009c36:	429e      	cmp	r6, r3
 8009c38:	4682      	mov	sl, r0
 8009c3a:	460c      	mov	r4, r1
 8009c3c:	4690      	mov	r8, r2
 8009c3e:	461f      	mov	r7, r3
 8009c40:	d838      	bhi.n	8009cb4 <__ssputs_r+0x84>
 8009c42:	898a      	ldrh	r2, [r1, #12]
 8009c44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c48:	d032      	beq.n	8009cb0 <__ssputs_r+0x80>
 8009c4a:	6825      	ldr	r5, [r4, #0]
 8009c4c:	6909      	ldr	r1, [r1, #16]
 8009c4e:	eba5 0901 	sub.w	r9, r5, r1
 8009c52:	6965      	ldr	r5, [r4, #20]
 8009c54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	444b      	add	r3, r9
 8009c60:	106d      	asrs	r5, r5, #1
 8009c62:	429d      	cmp	r5, r3
 8009c64:	bf38      	it	cc
 8009c66:	461d      	movcc	r5, r3
 8009c68:	0553      	lsls	r3, r2, #21
 8009c6a:	d531      	bpl.n	8009cd0 <__ssputs_r+0xa0>
 8009c6c:	4629      	mov	r1, r5
 8009c6e:	f000 fb39 	bl	800a2e4 <_malloc_r>
 8009c72:	4606      	mov	r6, r0
 8009c74:	b950      	cbnz	r0, 8009c8c <__ssputs_r+0x5c>
 8009c76:	230c      	movs	r3, #12
 8009c78:	f8ca 3000 	str.w	r3, [sl]
 8009c7c:	89a3      	ldrh	r3, [r4, #12]
 8009c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c82:	81a3      	strh	r3, [r4, #12]
 8009c84:	f04f 30ff 	mov.w	r0, #4294967295
 8009c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c8c:	6921      	ldr	r1, [r4, #16]
 8009c8e:	464a      	mov	r2, r9
 8009c90:	f7ff ff98 	bl	8009bc4 <memcpy>
 8009c94:	89a3      	ldrh	r3, [r4, #12]
 8009c96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c9e:	81a3      	strh	r3, [r4, #12]
 8009ca0:	6126      	str	r6, [r4, #16]
 8009ca2:	6165      	str	r5, [r4, #20]
 8009ca4:	444e      	add	r6, r9
 8009ca6:	eba5 0509 	sub.w	r5, r5, r9
 8009caa:	6026      	str	r6, [r4, #0]
 8009cac:	60a5      	str	r5, [r4, #8]
 8009cae:	463e      	mov	r6, r7
 8009cb0:	42be      	cmp	r6, r7
 8009cb2:	d900      	bls.n	8009cb6 <__ssputs_r+0x86>
 8009cb4:	463e      	mov	r6, r7
 8009cb6:	4632      	mov	r2, r6
 8009cb8:	6820      	ldr	r0, [r4, #0]
 8009cba:	4641      	mov	r1, r8
 8009cbc:	f000 faa8 	bl	800a210 <memmove>
 8009cc0:	68a3      	ldr	r3, [r4, #8]
 8009cc2:	6822      	ldr	r2, [r4, #0]
 8009cc4:	1b9b      	subs	r3, r3, r6
 8009cc6:	4432      	add	r2, r6
 8009cc8:	60a3      	str	r3, [r4, #8]
 8009cca:	6022      	str	r2, [r4, #0]
 8009ccc:	2000      	movs	r0, #0
 8009cce:	e7db      	b.n	8009c88 <__ssputs_r+0x58>
 8009cd0:	462a      	mov	r2, r5
 8009cd2:	f000 fb61 	bl	800a398 <_realloc_r>
 8009cd6:	4606      	mov	r6, r0
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	d1e1      	bne.n	8009ca0 <__ssputs_r+0x70>
 8009cdc:	6921      	ldr	r1, [r4, #16]
 8009cde:	4650      	mov	r0, sl
 8009ce0:	f000 fab0 	bl	800a244 <_free_r>
 8009ce4:	e7c7      	b.n	8009c76 <__ssputs_r+0x46>
	...

08009ce8 <_svfiprintf_r>:
 8009ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cec:	4698      	mov	r8, r3
 8009cee:	898b      	ldrh	r3, [r1, #12]
 8009cf0:	061b      	lsls	r3, r3, #24
 8009cf2:	b09d      	sub	sp, #116	; 0x74
 8009cf4:	4607      	mov	r7, r0
 8009cf6:	460d      	mov	r5, r1
 8009cf8:	4614      	mov	r4, r2
 8009cfa:	d50e      	bpl.n	8009d1a <_svfiprintf_r+0x32>
 8009cfc:	690b      	ldr	r3, [r1, #16]
 8009cfe:	b963      	cbnz	r3, 8009d1a <_svfiprintf_r+0x32>
 8009d00:	2140      	movs	r1, #64	; 0x40
 8009d02:	f000 faef 	bl	800a2e4 <_malloc_r>
 8009d06:	6028      	str	r0, [r5, #0]
 8009d08:	6128      	str	r0, [r5, #16]
 8009d0a:	b920      	cbnz	r0, 8009d16 <_svfiprintf_r+0x2e>
 8009d0c:	230c      	movs	r3, #12
 8009d0e:	603b      	str	r3, [r7, #0]
 8009d10:	f04f 30ff 	mov.w	r0, #4294967295
 8009d14:	e0d1      	b.n	8009eba <_svfiprintf_r+0x1d2>
 8009d16:	2340      	movs	r3, #64	; 0x40
 8009d18:	616b      	str	r3, [r5, #20]
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d1e:	2320      	movs	r3, #32
 8009d20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d24:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d28:	2330      	movs	r3, #48	; 0x30
 8009d2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ed4 <_svfiprintf_r+0x1ec>
 8009d2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d32:	f04f 0901 	mov.w	r9, #1
 8009d36:	4623      	mov	r3, r4
 8009d38:	469a      	mov	sl, r3
 8009d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d3e:	b10a      	cbz	r2, 8009d44 <_svfiprintf_r+0x5c>
 8009d40:	2a25      	cmp	r2, #37	; 0x25
 8009d42:	d1f9      	bne.n	8009d38 <_svfiprintf_r+0x50>
 8009d44:	ebba 0b04 	subs.w	fp, sl, r4
 8009d48:	d00b      	beq.n	8009d62 <_svfiprintf_r+0x7a>
 8009d4a:	465b      	mov	r3, fp
 8009d4c:	4622      	mov	r2, r4
 8009d4e:	4629      	mov	r1, r5
 8009d50:	4638      	mov	r0, r7
 8009d52:	f7ff ff6d 	bl	8009c30 <__ssputs_r>
 8009d56:	3001      	adds	r0, #1
 8009d58:	f000 80aa 	beq.w	8009eb0 <_svfiprintf_r+0x1c8>
 8009d5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d5e:	445a      	add	r2, fp
 8009d60:	9209      	str	r2, [sp, #36]	; 0x24
 8009d62:	f89a 3000 	ldrb.w	r3, [sl]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f000 80a2 	beq.w	8009eb0 <_svfiprintf_r+0x1c8>
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d76:	f10a 0a01 	add.w	sl, sl, #1
 8009d7a:	9304      	str	r3, [sp, #16]
 8009d7c:	9307      	str	r3, [sp, #28]
 8009d7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d82:	931a      	str	r3, [sp, #104]	; 0x68
 8009d84:	4654      	mov	r4, sl
 8009d86:	2205      	movs	r2, #5
 8009d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d8c:	4851      	ldr	r0, [pc, #324]	; (8009ed4 <_svfiprintf_r+0x1ec>)
 8009d8e:	f7f6 fa27 	bl	80001e0 <memchr>
 8009d92:	9a04      	ldr	r2, [sp, #16]
 8009d94:	b9d8      	cbnz	r0, 8009dce <_svfiprintf_r+0xe6>
 8009d96:	06d0      	lsls	r0, r2, #27
 8009d98:	bf44      	itt	mi
 8009d9a:	2320      	movmi	r3, #32
 8009d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009da0:	0711      	lsls	r1, r2, #28
 8009da2:	bf44      	itt	mi
 8009da4:	232b      	movmi	r3, #43	; 0x2b
 8009da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009daa:	f89a 3000 	ldrb.w	r3, [sl]
 8009dae:	2b2a      	cmp	r3, #42	; 0x2a
 8009db0:	d015      	beq.n	8009dde <_svfiprintf_r+0xf6>
 8009db2:	9a07      	ldr	r2, [sp, #28]
 8009db4:	4654      	mov	r4, sl
 8009db6:	2000      	movs	r0, #0
 8009db8:	f04f 0c0a 	mov.w	ip, #10
 8009dbc:	4621      	mov	r1, r4
 8009dbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dc2:	3b30      	subs	r3, #48	; 0x30
 8009dc4:	2b09      	cmp	r3, #9
 8009dc6:	d94e      	bls.n	8009e66 <_svfiprintf_r+0x17e>
 8009dc8:	b1b0      	cbz	r0, 8009df8 <_svfiprintf_r+0x110>
 8009dca:	9207      	str	r2, [sp, #28]
 8009dcc:	e014      	b.n	8009df8 <_svfiprintf_r+0x110>
 8009dce:	eba0 0308 	sub.w	r3, r0, r8
 8009dd2:	fa09 f303 	lsl.w	r3, r9, r3
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	9304      	str	r3, [sp, #16]
 8009dda:	46a2      	mov	sl, r4
 8009ddc:	e7d2      	b.n	8009d84 <_svfiprintf_r+0x9c>
 8009dde:	9b03      	ldr	r3, [sp, #12]
 8009de0:	1d19      	adds	r1, r3, #4
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	9103      	str	r1, [sp, #12]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	bfbb      	ittet	lt
 8009dea:	425b      	neglt	r3, r3
 8009dec:	f042 0202 	orrlt.w	r2, r2, #2
 8009df0:	9307      	strge	r3, [sp, #28]
 8009df2:	9307      	strlt	r3, [sp, #28]
 8009df4:	bfb8      	it	lt
 8009df6:	9204      	strlt	r2, [sp, #16]
 8009df8:	7823      	ldrb	r3, [r4, #0]
 8009dfa:	2b2e      	cmp	r3, #46	; 0x2e
 8009dfc:	d10c      	bne.n	8009e18 <_svfiprintf_r+0x130>
 8009dfe:	7863      	ldrb	r3, [r4, #1]
 8009e00:	2b2a      	cmp	r3, #42	; 0x2a
 8009e02:	d135      	bne.n	8009e70 <_svfiprintf_r+0x188>
 8009e04:	9b03      	ldr	r3, [sp, #12]
 8009e06:	1d1a      	adds	r2, r3, #4
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	9203      	str	r2, [sp, #12]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	bfb8      	it	lt
 8009e10:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e14:	3402      	adds	r4, #2
 8009e16:	9305      	str	r3, [sp, #20]
 8009e18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ee4 <_svfiprintf_r+0x1fc>
 8009e1c:	7821      	ldrb	r1, [r4, #0]
 8009e1e:	2203      	movs	r2, #3
 8009e20:	4650      	mov	r0, sl
 8009e22:	f7f6 f9dd 	bl	80001e0 <memchr>
 8009e26:	b140      	cbz	r0, 8009e3a <_svfiprintf_r+0x152>
 8009e28:	2340      	movs	r3, #64	; 0x40
 8009e2a:	eba0 000a 	sub.w	r0, r0, sl
 8009e2e:	fa03 f000 	lsl.w	r0, r3, r0
 8009e32:	9b04      	ldr	r3, [sp, #16]
 8009e34:	4303      	orrs	r3, r0
 8009e36:	3401      	adds	r4, #1
 8009e38:	9304      	str	r3, [sp, #16]
 8009e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e3e:	4826      	ldr	r0, [pc, #152]	; (8009ed8 <_svfiprintf_r+0x1f0>)
 8009e40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e44:	2206      	movs	r2, #6
 8009e46:	f7f6 f9cb 	bl	80001e0 <memchr>
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	d038      	beq.n	8009ec0 <_svfiprintf_r+0x1d8>
 8009e4e:	4b23      	ldr	r3, [pc, #140]	; (8009edc <_svfiprintf_r+0x1f4>)
 8009e50:	bb1b      	cbnz	r3, 8009e9a <_svfiprintf_r+0x1b2>
 8009e52:	9b03      	ldr	r3, [sp, #12]
 8009e54:	3307      	adds	r3, #7
 8009e56:	f023 0307 	bic.w	r3, r3, #7
 8009e5a:	3308      	adds	r3, #8
 8009e5c:	9303      	str	r3, [sp, #12]
 8009e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e60:	4433      	add	r3, r6
 8009e62:	9309      	str	r3, [sp, #36]	; 0x24
 8009e64:	e767      	b.n	8009d36 <_svfiprintf_r+0x4e>
 8009e66:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e6a:	460c      	mov	r4, r1
 8009e6c:	2001      	movs	r0, #1
 8009e6e:	e7a5      	b.n	8009dbc <_svfiprintf_r+0xd4>
 8009e70:	2300      	movs	r3, #0
 8009e72:	3401      	adds	r4, #1
 8009e74:	9305      	str	r3, [sp, #20]
 8009e76:	4619      	mov	r1, r3
 8009e78:	f04f 0c0a 	mov.w	ip, #10
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e82:	3a30      	subs	r2, #48	; 0x30
 8009e84:	2a09      	cmp	r2, #9
 8009e86:	d903      	bls.n	8009e90 <_svfiprintf_r+0x1a8>
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d0c5      	beq.n	8009e18 <_svfiprintf_r+0x130>
 8009e8c:	9105      	str	r1, [sp, #20]
 8009e8e:	e7c3      	b.n	8009e18 <_svfiprintf_r+0x130>
 8009e90:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e94:	4604      	mov	r4, r0
 8009e96:	2301      	movs	r3, #1
 8009e98:	e7f0      	b.n	8009e7c <_svfiprintf_r+0x194>
 8009e9a:	ab03      	add	r3, sp, #12
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	462a      	mov	r2, r5
 8009ea0:	4b0f      	ldr	r3, [pc, #60]	; (8009ee0 <_svfiprintf_r+0x1f8>)
 8009ea2:	a904      	add	r1, sp, #16
 8009ea4:	4638      	mov	r0, r7
 8009ea6:	f3af 8000 	nop.w
 8009eaa:	1c42      	adds	r2, r0, #1
 8009eac:	4606      	mov	r6, r0
 8009eae:	d1d6      	bne.n	8009e5e <_svfiprintf_r+0x176>
 8009eb0:	89ab      	ldrh	r3, [r5, #12]
 8009eb2:	065b      	lsls	r3, r3, #25
 8009eb4:	f53f af2c 	bmi.w	8009d10 <_svfiprintf_r+0x28>
 8009eb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009eba:	b01d      	add	sp, #116	; 0x74
 8009ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec0:	ab03      	add	r3, sp, #12
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	462a      	mov	r2, r5
 8009ec6:	4b06      	ldr	r3, [pc, #24]	; (8009ee0 <_svfiprintf_r+0x1f8>)
 8009ec8:	a904      	add	r1, sp, #16
 8009eca:	4638      	mov	r0, r7
 8009ecc:	f000 f87a 	bl	8009fc4 <_printf_i>
 8009ed0:	e7eb      	b.n	8009eaa <_svfiprintf_r+0x1c2>
 8009ed2:	bf00      	nop
 8009ed4:	0800befc 	.word	0x0800befc
 8009ed8:	0800bf06 	.word	0x0800bf06
 8009edc:	00000000 	.word	0x00000000
 8009ee0:	08009c31 	.word	0x08009c31
 8009ee4:	0800bf02 	.word	0x0800bf02

08009ee8 <_printf_common>:
 8009ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eec:	4616      	mov	r6, r2
 8009eee:	4699      	mov	r9, r3
 8009ef0:	688a      	ldr	r2, [r1, #8]
 8009ef2:	690b      	ldr	r3, [r1, #16]
 8009ef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	bfb8      	it	lt
 8009efc:	4613      	movlt	r3, r2
 8009efe:	6033      	str	r3, [r6, #0]
 8009f00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f04:	4607      	mov	r7, r0
 8009f06:	460c      	mov	r4, r1
 8009f08:	b10a      	cbz	r2, 8009f0e <_printf_common+0x26>
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	6033      	str	r3, [r6, #0]
 8009f0e:	6823      	ldr	r3, [r4, #0]
 8009f10:	0699      	lsls	r1, r3, #26
 8009f12:	bf42      	ittt	mi
 8009f14:	6833      	ldrmi	r3, [r6, #0]
 8009f16:	3302      	addmi	r3, #2
 8009f18:	6033      	strmi	r3, [r6, #0]
 8009f1a:	6825      	ldr	r5, [r4, #0]
 8009f1c:	f015 0506 	ands.w	r5, r5, #6
 8009f20:	d106      	bne.n	8009f30 <_printf_common+0x48>
 8009f22:	f104 0a19 	add.w	sl, r4, #25
 8009f26:	68e3      	ldr	r3, [r4, #12]
 8009f28:	6832      	ldr	r2, [r6, #0]
 8009f2a:	1a9b      	subs	r3, r3, r2
 8009f2c:	42ab      	cmp	r3, r5
 8009f2e:	dc26      	bgt.n	8009f7e <_printf_common+0x96>
 8009f30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f34:	1e13      	subs	r3, r2, #0
 8009f36:	6822      	ldr	r2, [r4, #0]
 8009f38:	bf18      	it	ne
 8009f3a:	2301      	movne	r3, #1
 8009f3c:	0692      	lsls	r2, r2, #26
 8009f3e:	d42b      	bmi.n	8009f98 <_printf_common+0xb0>
 8009f40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f44:	4649      	mov	r1, r9
 8009f46:	4638      	mov	r0, r7
 8009f48:	47c0      	blx	r8
 8009f4a:	3001      	adds	r0, #1
 8009f4c:	d01e      	beq.n	8009f8c <_printf_common+0xa4>
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	68e5      	ldr	r5, [r4, #12]
 8009f52:	6832      	ldr	r2, [r6, #0]
 8009f54:	f003 0306 	and.w	r3, r3, #6
 8009f58:	2b04      	cmp	r3, #4
 8009f5a:	bf08      	it	eq
 8009f5c:	1aad      	subeq	r5, r5, r2
 8009f5e:	68a3      	ldr	r3, [r4, #8]
 8009f60:	6922      	ldr	r2, [r4, #16]
 8009f62:	bf0c      	ite	eq
 8009f64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f68:	2500      	movne	r5, #0
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	bfc4      	itt	gt
 8009f6e:	1a9b      	subgt	r3, r3, r2
 8009f70:	18ed      	addgt	r5, r5, r3
 8009f72:	2600      	movs	r6, #0
 8009f74:	341a      	adds	r4, #26
 8009f76:	42b5      	cmp	r5, r6
 8009f78:	d11a      	bne.n	8009fb0 <_printf_common+0xc8>
 8009f7a:	2000      	movs	r0, #0
 8009f7c:	e008      	b.n	8009f90 <_printf_common+0xa8>
 8009f7e:	2301      	movs	r3, #1
 8009f80:	4652      	mov	r2, sl
 8009f82:	4649      	mov	r1, r9
 8009f84:	4638      	mov	r0, r7
 8009f86:	47c0      	blx	r8
 8009f88:	3001      	adds	r0, #1
 8009f8a:	d103      	bne.n	8009f94 <_printf_common+0xac>
 8009f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f94:	3501      	adds	r5, #1
 8009f96:	e7c6      	b.n	8009f26 <_printf_common+0x3e>
 8009f98:	18e1      	adds	r1, r4, r3
 8009f9a:	1c5a      	adds	r2, r3, #1
 8009f9c:	2030      	movs	r0, #48	; 0x30
 8009f9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009fa2:	4422      	add	r2, r4
 8009fa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fac:	3302      	adds	r3, #2
 8009fae:	e7c7      	b.n	8009f40 <_printf_common+0x58>
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	4622      	mov	r2, r4
 8009fb4:	4649      	mov	r1, r9
 8009fb6:	4638      	mov	r0, r7
 8009fb8:	47c0      	blx	r8
 8009fba:	3001      	adds	r0, #1
 8009fbc:	d0e6      	beq.n	8009f8c <_printf_common+0xa4>
 8009fbe:	3601      	adds	r6, #1
 8009fc0:	e7d9      	b.n	8009f76 <_printf_common+0x8e>
	...

08009fc4 <_printf_i>:
 8009fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc8:	460c      	mov	r4, r1
 8009fca:	4691      	mov	r9, r2
 8009fcc:	7e27      	ldrb	r7, [r4, #24]
 8009fce:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009fd0:	2f78      	cmp	r7, #120	; 0x78
 8009fd2:	4680      	mov	r8, r0
 8009fd4:	469a      	mov	sl, r3
 8009fd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fda:	d807      	bhi.n	8009fec <_printf_i+0x28>
 8009fdc:	2f62      	cmp	r7, #98	; 0x62
 8009fde:	d80a      	bhi.n	8009ff6 <_printf_i+0x32>
 8009fe0:	2f00      	cmp	r7, #0
 8009fe2:	f000 80d8 	beq.w	800a196 <_printf_i+0x1d2>
 8009fe6:	2f58      	cmp	r7, #88	; 0x58
 8009fe8:	f000 80a3 	beq.w	800a132 <_printf_i+0x16e>
 8009fec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009ff0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ff4:	e03a      	b.n	800a06c <_printf_i+0xa8>
 8009ff6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ffa:	2b15      	cmp	r3, #21
 8009ffc:	d8f6      	bhi.n	8009fec <_printf_i+0x28>
 8009ffe:	a001      	add	r0, pc, #4	; (adr r0, 800a004 <_printf_i+0x40>)
 800a000:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a004:	0800a05d 	.word	0x0800a05d
 800a008:	0800a071 	.word	0x0800a071
 800a00c:	08009fed 	.word	0x08009fed
 800a010:	08009fed 	.word	0x08009fed
 800a014:	08009fed 	.word	0x08009fed
 800a018:	08009fed 	.word	0x08009fed
 800a01c:	0800a071 	.word	0x0800a071
 800a020:	08009fed 	.word	0x08009fed
 800a024:	08009fed 	.word	0x08009fed
 800a028:	08009fed 	.word	0x08009fed
 800a02c:	08009fed 	.word	0x08009fed
 800a030:	0800a17d 	.word	0x0800a17d
 800a034:	0800a0a1 	.word	0x0800a0a1
 800a038:	0800a15f 	.word	0x0800a15f
 800a03c:	08009fed 	.word	0x08009fed
 800a040:	08009fed 	.word	0x08009fed
 800a044:	0800a19f 	.word	0x0800a19f
 800a048:	08009fed 	.word	0x08009fed
 800a04c:	0800a0a1 	.word	0x0800a0a1
 800a050:	08009fed 	.word	0x08009fed
 800a054:	08009fed 	.word	0x08009fed
 800a058:	0800a167 	.word	0x0800a167
 800a05c:	680b      	ldr	r3, [r1, #0]
 800a05e:	1d1a      	adds	r2, r3, #4
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	600a      	str	r2, [r1, #0]
 800a064:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a068:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a06c:	2301      	movs	r3, #1
 800a06e:	e0a3      	b.n	800a1b8 <_printf_i+0x1f4>
 800a070:	6825      	ldr	r5, [r4, #0]
 800a072:	6808      	ldr	r0, [r1, #0]
 800a074:	062e      	lsls	r6, r5, #24
 800a076:	f100 0304 	add.w	r3, r0, #4
 800a07a:	d50a      	bpl.n	800a092 <_printf_i+0xce>
 800a07c:	6805      	ldr	r5, [r0, #0]
 800a07e:	600b      	str	r3, [r1, #0]
 800a080:	2d00      	cmp	r5, #0
 800a082:	da03      	bge.n	800a08c <_printf_i+0xc8>
 800a084:	232d      	movs	r3, #45	; 0x2d
 800a086:	426d      	negs	r5, r5
 800a088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a08c:	485e      	ldr	r0, [pc, #376]	; (800a208 <_printf_i+0x244>)
 800a08e:	230a      	movs	r3, #10
 800a090:	e019      	b.n	800a0c6 <_printf_i+0x102>
 800a092:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a096:	6805      	ldr	r5, [r0, #0]
 800a098:	600b      	str	r3, [r1, #0]
 800a09a:	bf18      	it	ne
 800a09c:	b22d      	sxthne	r5, r5
 800a09e:	e7ef      	b.n	800a080 <_printf_i+0xbc>
 800a0a0:	680b      	ldr	r3, [r1, #0]
 800a0a2:	6825      	ldr	r5, [r4, #0]
 800a0a4:	1d18      	adds	r0, r3, #4
 800a0a6:	6008      	str	r0, [r1, #0]
 800a0a8:	0628      	lsls	r0, r5, #24
 800a0aa:	d501      	bpl.n	800a0b0 <_printf_i+0xec>
 800a0ac:	681d      	ldr	r5, [r3, #0]
 800a0ae:	e002      	b.n	800a0b6 <_printf_i+0xf2>
 800a0b0:	0669      	lsls	r1, r5, #25
 800a0b2:	d5fb      	bpl.n	800a0ac <_printf_i+0xe8>
 800a0b4:	881d      	ldrh	r5, [r3, #0]
 800a0b6:	4854      	ldr	r0, [pc, #336]	; (800a208 <_printf_i+0x244>)
 800a0b8:	2f6f      	cmp	r7, #111	; 0x6f
 800a0ba:	bf0c      	ite	eq
 800a0bc:	2308      	moveq	r3, #8
 800a0be:	230a      	movne	r3, #10
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0c6:	6866      	ldr	r6, [r4, #4]
 800a0c8:	60a6      	str	r6, [r4, #8]
 800a0ca:	2e00      	cmp	r6, #0
 800a0cc:	bfa2      	ittt	ge
 800a0ce:	6821      	ldrge	r1, [r4, #0]
 800a0d0:	f021 0104 	bicge.w	r1, r1, #4
 800a0d4:	6021      	strge	r1, [r4, #0]
 800a0d6:	b90d      	cbnz	r5, 800a0dc <_printf_i+0x118>
 800a0d8:	2e00      	cmp	r6, #0
 800a0da:	d04d      	beq.n	800a178 <_printf_i+0x1b4>
 800a0dc:	4616      	mov	r6, r2
 800a0de:	fbb5 f1f3 	udiv	r1, r5, r3
 800a0e2:	fb03 5711 	mls	r7, r3, r1, r5
 800a0e6:	5dc7      	ldrb	r7, [r0, r7]
 800a0e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0ec:	462f      	mov	r7, r5
 800a0ee:	42bb      	cmp	r3, r7
 800a0f0:	460d      	mov	r5, r1
 800a0f2:	d9f4      	bls.n	800a0de <_printf_i+0x11a>
 800a0f4:	2b08      	cmp	r3, #8
 800a0f6:	d10b      	bne.n	800a110 <_printf_i+0x14c>
 800a0f8:	6823      	ldr	r3, [r4, #0]
 800a0fa:	07df      	lsls	r7, r3, #31
 800a0fc:	d508      	bpl.n	800a110 <_printf_i+0x14c>
 800a0fe:	6923      	ldr	r3, [r4, #16]
 800a100:	6861      	ldr	r1, [r4, #4]
 800a102:	4299      	cmp	r1, r3
 800a104:	bfde      	ittt	le
 800a106:	2330      	movle	r3, #48	; 0x30
 800a108:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a10c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a110:	1b92      	subs	r2, r2, r6
 800a112:	6122      	str	r2, [r4, #16]
 800a114:	f8cd a000 	str.w	sl, [sp]
 800a118:	464b      	mov	r3, r9
 800a11a:	aa03      	add	r2, sp, #12
 800a11c:	4621      	mov	r1, r4
 800a11e:	4640      	mov	r0, r8
 800a120:	f7ff fee2 	bl	8009ee8 <_printf_common>
 800a124:	3001      	adds	r0, #1
 800a126:	d14c      	bne.n	800a1c2 <_printf_i+0x1fe>
 800a128:	f04f 30ff 	mov.w	r0, #4294967295
 800a12c:	b004      	add	sp, #16
 800a12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a132:	4835      	ldr	r0, [pc, #212]	; (800a208 <_printf_i+0x244>)
 800a134:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a138:	6823      	ldr	r3, [r4, #0]
 800a13a:	680e      	ldr	r6, [r1, #0]
 800a13c:	061f      	lsls	r7, r3, #24
 800a13e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a142:	600e      	str	r6, [r1, #0]
 800a144:	d514      	bpl.n	800a170 <_printf_i+0x1ac>
 800a146:	07d9      	lsls	r1, r3, #31
 800a148:	bf44      	itt	mi
 800a14a:	f043 0320 	orrmi.w	r3, r3, #32
 800a14e:	6023      	strmi	r3, [r4, #0]
 800a150:	b91d      	cbnz	r5, 800a15a <_printf_i+0x196>
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	f023 0320 	bic.w	r3, r3, #32
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	2310      	movs	r3, #16
 800a15c:	e7b0      	b.n	800a0c0 <_printf_i+0xfc>
 800a15e:	6823      	ldr	r3, [r4, #0]
 800a160:	f043 0320 	orr.w	r3, r3, #32
 800a164:	6023      	str	r3, [r4, #0]
 800a166:	2378      	movs	r3, #120	; 0x78
 800a168:	4828      	ldr	r0, [pc, #160]	; (800a20c <_printf_i+0x248>)
 800a16a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a16e:	e7e3      	b.n	800a138 <_printf_i+0x174>
 800a170:	065e      	lsls	r6, r3, #25
 800a172:	bf48      	it	mi
 800a174:	b2ad      	uxthmi	r5, r5
 800a176:	e7e6      	b.n	800a146 <_printf_i+0x182>
 800a178:	4616      	mov	r6, r2
 800a17a:	e7bb      	b.n	800a0f4 <_printf_i+0x130>
 800a17c:	680b      	ldr	r3, [r1, #0]
 800a17e:	6826      	ldr	r6, [r4, #0]
 800a180:	6960      	ldr	r0, [r4, #20]
 800a182:	1d1d      	adds	r5, r3, #4
 800a184:	600d      	str	r5, [r1, #0]
 800a186:	0635      	lsls	r5, r6, #24
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	d501      	bpl.n	800a190 <_printf_i+0x1cc>
 800a18c:	6018      	str	r0, [r3, #0]
 800a18e:	e002      	b.n	800a196 <_printf_i+0x1d2>
 800a190:	0671      	lsls	r1, r6, #25
 800a192:	d5fb      	bpl.n	800a18c <_printf_i+0x1c8>
 800a194:	8018      	strh	r0, [r3, #0]
 800a196:	2300      	movs	r3, #0
 800a198:	6123      	str	r3, [r4, #16]
 800a19a:	4616      	mov	r6, r2
 800a19c:	e7ba      	b.n	800a114 <_printf_i+0x150>
 800a19e:	680b      	ldr	r3, [r1, #0]
 800a1a0:	1d1a      	adds	r2, r3, #4
 800a1a2:	600a      	str	r2, [r1, #0]
 800a1a4:	681e      	ldr	r6, [r3, #0]
 800a1a6:	6862      	ldr	r2, [r4, #4]
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	4630      	mov	r0, r6
 800a1ac:	f7f6 f818 	bl	80001e0 <memchr>
 800a1b0:	b108      	cbz	r0, 800a1b6 <_printf_i+0x1f2>
 800a1b2:	1b80      	subs	r0, r0, r6
 800a1b4:	6060      	str	r0, [r4, #4]
 800a1b6:	6863      	ldr	r3, [r4, #4]
 800a1b8:	6123      	str	r3, [r4, #16]
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1c0:	e7a8      	b.n	800a114 <_printf_i+0x150>
 800a1c2:	6923      	ldr	r3, [r4, #16]
 800a1c4:	4632      	mov	r2, r6
 800a1c6:	4649      	mov	r1, r9
 800a1c8:	4640      	mov	r0, r8
 800a1ca:	47d0      	blx	sl
 800a1cc:	3001      	adds	r0, #1
 800a1ce:	d0ab      	beq.n	800a128 <_printf_i+0x164>
 800a1d0:	6823      	ldr	r3, [r4, #0]
 800a1d2:	079b      	lsls	r3, r3, #30
 800a1d4:	d413      	bmi.n	800a1fe <_printf_i+0x23a>
 800a1d6:	68e0      	ldr	r0, [r4, #12]
 800a1d8:	9b03      	ldr	r3, [sp, #12]
 800a1da:	4298      	cmp	r0, r3
 800a1dc:	bfb8      	it	lt
 800a1de:	4618      	movlt	r0, r3
 800a1e0:	e7a4      	b.n	800a12c <_printf_i+0x168>
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	4632      	mov	r2, r6
 800a1e6:	4649      	mov	r1, r9
 800a1e8:	4640      	mov	r0, r8
 800a1ea:	47d0      	blx	sl
 800a1ec:	3001      	adds	r0, #1
 800a1ee:	d09b      	beq.n	800a128 <_printf_i+0x164>
 800a1f0:	3501      	adds	r5, #1
 800a1f2:	68e3      	ldr	r3, [r4, #12]
 800a1f4:	9903      	ldr	r1, [sp, #12]
 800a1f6:	1a5b      	subs	r3, r3, r1
 800a1f8:	42ab      	cmp	r3, r5
 800a1fa:	dcf2      	bgt.n	800a1e2 <_printf_i+0x21e>
 800a1fc:	e7eb      	b.n	800a1d6 <_printf_i+0x212>
 800a1fe:	2500      	movs	r5, #0
 800a200:	f104 0619 	add.w	r6, r4, #25
 800a204:	e7f5      	b.n	800a1f2 <_printf_i+0x22e>
 800a206:	bf00      	nop
 800a208:	0800bf0d 	.word	0x0800bf0d
 800a20c:	0800bf1e 	.word	0x0800bf1e

0800a210 <memmove>:
 800a210:	4288      	cmp	r0, r1
 800a212:	b510      	push	{r4, lr}
 800a214:	eb01 0402 	add.w	r4, r1, r2
 800a218:	d902      	bls.n	800a220 <memmove+0x10>
 800a21a:	4284      	cmp	r4, r0
 800a21c:	4623      	mov	r3, r4
 800a21e:	d807      	bhi.n	800a230 <memmove+0x20>
 800a220:	1e43      	subs	r3, r0, #1
 800a222:	42a1      	cmp	r1, r4
 800a224:	d008      	beq.n	800a238 <memmove+0x28>
 800a226:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a22a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a22e:	e7f8      	b.n	800a222 <memmove+0x12>
 800a230:	4402      	add	r2, r0
 800a232:	4601      	mov	r1, r0
 800a234:	428a      	cmp	r2, r1
 800a236:	d100      	bne.n	800a23a <memmove+0x2a>
 800a238:	bd10      	pop	{r4, pc}
 800a23a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a23e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a242:	e7f7      	b.n	800a234 <memmove+0x24>

0800a244 <_free_r>:
 800a244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a246:	2900      	cmp	r1, #0
 800a248:	d048      	beq.n	800a2dc <_free_r+0x98>
 800a24a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a24e:	9001      	str	r0, [sp, #4]
 800a250:	2b00      	cmp	r3, #0
 800a252:	f1a1 0404 	sub.w	r4, r1, #4
 800a256:	bfb8      	it	lt
 800a258:	18e4      	addlt	r4, r4, r3
 800a25a:	f000 f8d3 	bl	800a404 <__malloc_lock>
 800a25e:	4a20      	ldr	r2, [pc, #128]	; (800a2e0 <_free_r+0x9c>)
 800a260:	9801      	ldr	r0, [sp, #4]
 800a262:	6813      	ldr	r3, [r2, #0]
 800a264:	4615      	mov	r5, r2
 800a266:	b933      	cbnz	r3, 800a276 <_free_r+0x32>
 800a268:	6063      	str	r3, [r4, #4]
 800a26a:	6014      	str	r4, [r2, #0]
 800a26c:	b003      	add	sp, #12
 800a26e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a272:	f000 b8cd 	b.w	800a410 <__malloc_unlock>
 800a276:	42a3      	cmp	r3, r4
 800a278:	d90b      	bls.n	800a292 <_free_r+0x4e>
 800a27a:	6821      	ldr	r1, [r4, #0]
 800a27c:	1862      	adds	r2, r4, r1
 800a27e:	4293      	cmp	r3, r2
 800a280:	bf04      	itt	eq
 800a282:	681a      	ldreq	r2, [r3, #0]
 800a284:	685b      	ldreq	r3, [r3, #4]
 800a286:	6063      	str	r3, [r4, #4]
 800a288:	bf04      	itt	eq
 800a28a:	1852      	addeq	r2, r2, r1
 800a28c:	6022      	streq	r2, [r4, #0]
 800a28e:	602c      	str	r4, [r5, #0]
 800a290:	e7ec      	b.n	800a26c <_free_r+0x28>
 800a292:	461a      	mov	r2, r3
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	b10b      	cbz	r3, 800a29c <_free_r+0x58>
 800a298:	42a3      	cmp	r3, r4
 800a29a:	d9fa      	bls.n	800a292 <_free_r+0x4e>
 800a29c:	6811      	ldr	r1, [r2, #0]
 800a29e:	1855      	adds	r5, r2, r1
 800a2a0:	42a5      	cmp	r5, r4
 800a2a2:	d10b      	bne.n	800a2bc <_free_r+0x78>
 800a2a4:	6824      	ldr	r4, [r4, #0]
 800a2a6:	4421      	add	r1, r4
 800a2a8:	1854      	adds	r4, r2, r1
 800a2aa:	42a3      	cmp	r3, r4
 800a2ac:	6011      	str	r1, [r2, #0]
 800a2ae:	d1dd      	bne.n	800a26c <_free_r+0x28>
 800a2b0:	681c      	ldr	r4, [r3, #0]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	6053      	str	r3, [r2, #4]
 800a2b6:	4421      	add	r1, r4
 800a2b8:	6011      	str	r1, [r2, #0]
 800a2ba:	e7d7      	b.n	800a26c <_free_r+0x28>
 800a2bc:	d902      	bls.n	800a2c4 <_free_r+0x80>
 800a2be:	230c      	movs	r3, #12
 800a2c0:	6003      	str	r3, [r0, #0]
 800a2c2:	e7d3      	b.n	800a26c <_free_r+0x28>
 800a2c4:	6825      	ldr	r5, [r4, #0]
 800a2c6:	1961      	adds	r1, r4, r5
 800a2c8:	428b      	cmp	r3, r1
 800a2ca:	bf04      	itt	eq
 800a2cc:	6819      	ldreq	r1, [r3, #0]
 800a2ce:	685b      	ldreq	r3, [r3, #4]
 800a2d0:	6063      	str	r3, [r4, #4]
 800a2d2:	bf04      	itt	eq
 800a2d4:	1949      	addeq	r1, r1, r5
 800a2d6:	6021      	streq	r1, [r4, #0]
 800a2d8:	6054      	str	r4, [r2, #4]
 800a2da:	e7c7      	b.n	800a26c <_free_r+0x28>
 800a2dc:	b003      	add	sp, #12
 800a2de:	bd30      	pop	{r4, r5, pc}
 800a2e0:	200049d4 	.word	0x200049d4

0800a2e4 <_malloc_r>:
 800a2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2e6:	1ccd      	adds	r5, r1, #3
 800a2e8:	f025 0503 	bic.w	r5, r5, #3
 800a2ec:	3508      	adds	r5, #8
 800a2ee:	2d0c      	cmp	r5, #12
 800a2f0:	bf38      	it	cc
 800a2f2:	250c      	movcc	r5, #12
 800a2f4:	2d00      	cmp	r5, #0
 800a2f6:	4606      	mov	r6, r0
 800a2f8:	db01      	blt.n	800a2fe <_malloc_r+0x1a>
 800a2fa:	42a9      	cmp	r1, r5
 800a2fc:	d903      	bls.n	800a306 <_malloc_r+0x22>
 800a2fe:	230c      	movs	r3, #12
 800a300:	6033      	str	r3, [r6, #0]
 800a302:	2000      	movs	r0, #0
 800a304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a306:	f000 f87d 	bl	800a404 <__malloc_lock>
 800a30a:	4921      	ldr	r1, [pc, #132]	; (800a390 <_malloc_r+0xac>)
 800a30c:	680a      	ldr	r2, [r1, #0]
 800a30e:	4614      	mov	r4, r2
 800a310:	b99c      	cbnz	r4, 800a33a <_malloc_r+0x56>
 800a312:	4f20      	ldr	r7, [pc, #128]	; (800a394 <_malloc_r+0xb0>)
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	b923      	cbnz	r3, 800a322 <_malloc_r+0x3e>
 800a318:	4621      	mov	r1, r4
 800a31a:	4630      	mov	r0, r6
 800a31c:	f000 f862 	bl	800a3e4 <_sbrk_r>
 800a320:	6038      	str	r0, [r7, #0]
 800a322:	4629      	mov	r1, r5
 800a324:	4630      	mov	r0, r6
 800a326:	f000 f85d 	bl	800a3e4 <_sbrk_r>
 800a32a:	1c43      	adds	r3, r0, #1
 800a32c:	d123      	bne.n	800a376 <_malloc_r+0x92>
 800a32e:	230c      	movs	r3, #12
 800a330:	6033      	str	r3, [r6, #0]
 800a332:	4630      	mov	r0, r6
 800a334:	f000 f86c 	bl	800a410 <__malloc_unlock>
 800a338:	e7e3      	b.n	800a302 <_malloc_r+0x1e>
 800a33a:	6823      	ldr	r3, [r4, #0]
 800a33c:	1b5b      	subs	r3, r3, r5
 800a33e:	d417      	bmi.n	800a370 <_malloc_r+0x8c>
 800a340:	2b0b      	cmp	r3, #11
 800a342:	d903      	bls.n	800a34c <_malloc_r+0x68>
 800a344:	6023      	str	r3, [r4, #0]
 800a346:	441c      	add	r4, r3
 800a348:	6025      	str	r5, [r4, #0]
 800a34a:	e004      	b.n	800a356 <_malloc_r+0x72>
 800a34c:	6863      	ldr	r3, [r4, #4]
 800a34e:	42a2      	cmp	r2, r4
 800a350:	bf0c      	ite	eq
 800a352:	600b      	streq	r3, [r1, #0]
 800a354:	6053      	strne	r3, [r2, #4]
 800a356:	4630      	mov	r0, r6
 800a358:	f000 f85a 	bl	800a410 <__malloc_unlock>
 800a35c:	f104 000b 	add.w	r0, r4, #11
 800a360:	1d23      	adds	r3, r4, #4
 800a362:	f020 0007 	bic.w	r0, r0, #7
 800a366:	1ac2      	subs	r2, r0, r3
 800a368:	d0cc      	beq.n	800a304 <_malloc_r+0x20>
 800a36a:	1a1b      	subs	r3, r3, r0
 800a36c:	50a3      	str	r3, [r4, r2]
 800a36e:	e7c9      	b.n	800a304 <_malloc_r+0x20>
 800a370:	4622      	mov	r2, r4
 800a372:	6864      	ldr	r4, [r4, #4]
 800a374:	e7cc      	b.n	800a310 <_malloc_r+0x2c>
 800a376:	1cc4      	adds	r4, r0, #3
 800a378:	f024 0403 	bic.w	r4, r4, #3
 800a37c:	42a0      	cmp	r0, r4
 800a37e:	d0e3      	beq.n	800a348 <_malloc_r+0x64>
 800a380:	1a21      	subs	r1, r4, r0
 800a382:	4630      	mov	r0, r6
 800a384:	f000 f82e 	bl	800a3e4 <_sbrk_r>
 800a388:	3001      	adds	r0, #1
 800a38a:	d1dd      	bne.n	800a348 <_malloc_r+0x64>
 800a38c:	e7cf      	b.n	800a32e <_malloc_r+0x4a>
 800a38e:	bf00      	nop
 800a390:	200049d4 	.word	0x200049d4
 800a394:	200049d8 	.word	0x200049d8

0800a398 <_realloc_r>:
 800a398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a39a:	4607      	mov	r7, r0
 800a39c:	4614      	mov	r4, r2
 800a39e:	460e      	mov	r6, r1
 800a3a0:	b921      	cbnz	r1, 800a3ac <_realloc_r+0x14>
 800a3a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a3a6:	4611      	mov	r1, r2
 800a3a8:	f7ff bf9c 	b.w	800a2e4 <_malloc_r>
 800a3ac:	b922      	cbnz	r2, 800a3b8 <_realloc_r+0x20>
 800a3ae:	f7ff ff49 	bl	800a244 <_free_r>
 800a3b2:	4625      	mov	r5, r4
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3b8:	f000 f830 	bl	800a41c <_malloc_usable_size_r>
 800a3bc:	42a0      	cmp	r0, r4
 800a3be:	d20f      	bcs.n	800a3e0 <_realloc_r+0x48>
 800a3c0:	4621      	mov	r1, r4
 800a3c2:	4638      	mov	r0, r7
 800a3c4:	f7ff ff8e 	bl	800a2e4 <_malloc_r>
 800a3c8:	4605      	mov	r5, r0
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	d0f2      	beq.n	800a3b4 <_realloc_r+0x1c>
 800a3ce:	4631      	mov	r1, r6
 800a3d0:	4622      	mov	r2, r4
 800a3d2:	f7ff fbf7 	bl	8009bc4 <memcpy>
 800a3d6:	4631      	mov	r1, r6
 800a3d8:	4638      	mov	r0, r7
 800a3da:	f7ff ff33 	bl	800a244 <_free_r>
 800a3de:	e7e9      	b.n	800a3b4 <_realloc_r+0x1c>
 800a3e0:	4635      	mov	r5, r6
 800a3e2:	e7e7      	b.n	800a3b4 <_realloc_r+0x1c>

0800a3e4 <_sbrk_r>:
 800a3e4:	b538      	push	{r3, r4, r5, lr}
 800a3e6:	4d06      	ldr	r5, [pc, #24]	; (800a400 <_sbrk_r+0x1c>)
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	4608      	mov	r0, r1
 800a3ee:	602b      	str	r3, [r5, #0]
 800a3f0:	f7f8 fb20 	bl	8002a34 <_sbrk>
 800a3f4:	1c43      	adds	r3, r0, #1
 800a3f6:	d102      	bne.n	800a3fe <_sbrk_r+0x1a>
 800a3f8:	682b      	ldr	r3, [r5, #0]
 800a3fa:	b103      	cbz	r3, 800a3fe <_sbrk_r+0x1a>
 800a3fc:	6023      	str	r3, [r4, #0]
 800a3fe:	bd38      	pop	{r3, r4, r5, pc}
 800a400:	200050a0 	.word	0x200050a0

0800a404 <__malloc_lock>:
 800a404:	4801      	ldr	r0, [pc, #4]	; (800a40c <__malloc_lock+0x8>)
 800a406:	f000 b811 	b.w	800a42c <__retarget_lock_acquire_recursive>
 800a40a:	bf00      	nop
 800a40c:	200050a8 	.word	0x200050a8

0800a410 <__malloc_unlock>:
 800a410:	4801      	ldr	r0, [pc, #4]	; (800a418 <__malloc_unlock+0x8>)
 800a412:	f000 b80c 	b.w	800a42e <__retarget_lock_release_recursive>
 800a416:	bf00      	nop
 800a418:	200050a8 	.word	0x200050a8

0800a41c <_malloc_usable_size_r>:
 800a41c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a420:	1f18      	subs	r0, r3, #4
 800a422:	2b00      	cmp	r3, #0
 800a424:	bfbc      	itt	lt
 800a426:	580b      	ldrlt	r3, [r1, r0]
 800a428:	18c0      	addlt	r0, r0, r3
 800a42a:	4770      	bx	lr

0800a42c <__retarget_lock_acquire_recursive>:
 800a42c:	4770      	bx	lr

0800a42e <__retarget_lock_release_recursive>:
 800a42e:	4770      	bx	lr

0800a430 <pow>:
 800a430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a434:	ec59 8b10 	vmov	r8, r9, d0
 800a438:	ec57 6b11 	vmov	r6, r7, d1
 800a43c:	f000 f8a8 	bl	800a590 <__ieee754_pow>
 800a440:	4b4e      	ldr	r3, [pc, #312]	; (800a57c <pow+0x14c>)
 800a442:	f993 3000 	ldrsb.w	r3, [r3]
 800a446:	3301      	adds	r3, #1
 800a448:	ec55 4b10 	vmov	r4, r5, d0
 800a44c:	d015      	beq.n	800a47a <pow+0x4a>
 800a44e:	4632      	mov	r2, r6
 800a450:	463b      	mov	r3, r7
 800a452:	4630      	mov	r0, r6
 800a454:	4639      	mov	r1, r7
 800a456:	f7f6 fb69 	bl	8000b2c <__aeabi_dcmpun>
 800a45a:	b970      	cbnz	r0, 800a47a <pow+0x4a>
 800a45c:	4642      	mov	r2, r8
 800a45e:	464b      	mov	r3, r9
 800a460:	4640      	mov	r0, r8
 800a462:	4649      	mov	r1, r9
 800a464:	f7f6 fb62 	bl	8000b2c <__aeabi_dcmpun>
 800a468:	2200      	movs	r2, #0
 800a46a:	2300      	movs	r3, #0
 800a46c:	b148      	cbz	r0, 800a482 <pow+0x52>
 800a46e:	4630      	mov	r0, r6
 800a470:	4639      	mov	r1, r7
 800a472:	f7f6 fb29 	bl	8000ac8 <__aeabi_dcmpeq>
 800a476:	2800      	cmp	r0, #0
 800a478:	d17d      	bne.n	800a576 <pow+0x146>
 800a47a:	ec45 4b10 	vmov	d0, r4, r5
 800a47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a482:	4640      	mov	r0, r8
 800a484:	4649      	mov	r1, r9
 800a486:	f7f6 fb1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a48a:	b1e0      	cbz	r0, 800a4c6 <pow+0x96>
 800a48c:	2200      	movs	r2, #0
 800a48e:	2300      	movs	r3, #0
 800a490:	4630      	mov	r0, r6
 800a492:	4639      	mov	r1, r7
 800a494:	f7f6 fb18 	bl	8000ac8 <__aeabi_dcmpeq>
 800a498:	2800      	cmp	r0, #0
 800a49a:	d16c      	bne.n	800a576 <pow+0x146>
 800a49c:	ec47 6b10 	vmov	d0, r6, r7
 800a4a0:	f000 fe55 	bl	800b14e <finite>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	d0e8      	beq.n	800a47a <pow+0x4a>
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	4639      	mov	r1, r7
 800a4b0:	f7f6 fb14 	bl	8000adc <__aeabi_dcmplt>
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	d0e0      	beq.n	800a47a <pow+0x4a>
 800a4b8:	f7ff fb5a 	bl	8009b70 <__errno>
 800a4bc:	2321      	movs	r3, #33	; 0x21
 800a4be:	6003      	str	r3, [r0, #0]
 800a4c0:	2400      	movs	r4, #0
 800a4c2:	4d2f      	ldr	r5, [pc, #188]	; (800a580 <pow+0x150>)
 800a4c4:	e7d9      	b.n	800a47a <pow+0x4a>
 800a4c6:	ec45 4b10 	vmov	d0, r4, r5
 800a4ca:	f000 fe40 	bl	800b14e <finite>
 800a4ce:	bbb8      	cbnz	r0, 800a540 <pow+0x110>
 800a4d0:	ec49 8b10 	vmov	d0, r8, r9
 800a4d4:	f000 fe3b 	bl	800b14e <finite>
 800a4d8:	b390      	cbz	r0, 800a540 <pow+0x110>
 800a4da:	ec47 6b10 	vmov	d0, r6, r7
 800a4de:	f000 fe36 	bl	800b14e <finite>
 800a4e2:	b368      	cbz	r0, 800a540 <pow+0x110>
 800a4e4:	4622      	mov	r2, r4
 800a4e6:	462b      	mov	r3, r5
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	4629      	mov	r1, r5
 800a4ec:	f7f6 fb1e 	bl	8000b2c <__aeabi_dcmpun>
 800a4f0:	b160      	cbz	r0, 800a50c <pow+0xdc>
 800a4f2:	f7ff fb3d 	bl	8009b70 <__errno>
 800a4f6:	2321      	movs	r3, #33	; 0x21
 800a4f8:	6003      	str	r3, [r0, #0]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	4610      	mov	r0, r2
 800a500:	4619      	mov	r1, r3
 800a502:	f7f6 f9a3 	bl	800084c <__aeabi_ddiv>
 800a506:	4604      	mov	r4, r0
 800a508:	460d      	mov	r5, r1
 800a50a:	e7b6      	b.n	800a47a <pow+0x4a>
 800a50c:	f7ff fb30 	bl	8009b70 <__errno>
 800a510:	2322      	movs	r3, #34	; 0x22
 800a512:	6003      	str	r3, [r0, #0]
 800a514:	2200      	movs	r2, #0
 800a516:	2300      	movs	r3, #0
 800a518:	4640      	mov	r0, r8
 800a51a:	4649      	mov	r1, r9
 800a51c:	f7f6 fade 	bl	8000adc <__aeabi_dcmplt>
 800a520:	2400      	movs	r4, #0
 800a522:	b158      	cbz	r0, 800a53c <pow+0x10c>
 800a524:	ec47 6b10 	vmov	d0, r6, r7
 800a528:	f000 fe26 	bl	800b178 <rint>
 800a52c:	4632      	mov	r2, r6
 800a52e:	ec51 0b10 	vmov	r0, r1, d0
 800a532:	463b      	mov	r3, r7
 800a534:	f7f6 fac8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a538:	2800      	cmp	r0, #0
 800a53a:	d0c2      	beq.n	800a4c2 <pow+0x92>
 800a53c:	4d11      	ldr	r5, [pc, #68]	; (800a584 <pow+0x154>)
 800a53e:	e79c      	b.n	800a47a <pow+0x4a>
 800a540:	2200      	movs	r2, #0
 800a542:	2300      	movs	r3, #0
 800a544:	4620      	mov	r0, r4
 800a546:	4629      	mov	r1, r5
 800a548:	f7f6 fabe 	bl	8000ac8 <__aeabi_dcmpeq>
 800a54c:	2800      	cmp	r0, #0
 800a54e:	d094      	beq.n	800a47a <pow+0x4a>
 800a550:	ec49 8b10 	vmov	d0, r8, r9
 800a554:	f000 fdfb 	bl	800b14e <finite>
 800a558:	2800      	cmp	r0, #0
 800a55a:	d08e      	beq.n	800a47a <pow+0x4a>
 800a55c:	ec47 6b10 	vmov	d0, r6, r7
 800a560:	f000 fdf5 	bl	800b14e <finite>
 800a564:	2800      	cmp	r0, #0
 800a566:	d088      	beq.n	800a47a <pow+0x4a>
 800a568:	f7ff fb02 	bl	8009b70 <__errno>
 800a56c:	2322      	movs	r3, #34	; 0x22
 800a56e:	6003      	str	r3, [r0, #0]
 800a570:	2400      	movs	r4, #0
 800a572:	2500      	movs	r5, #0
 800a574:	e781      	b.n	800a47a <pow+0x4a>
 800a576:	4d04      	ldr	r5, [pc, #16]	; (800a588 <pow+0x158>)
 800a578:	2400      	movs	r4, #0
 800a57a:	e77e      	b.n	800a47a <pow+0x4a>
 800a57c:	20000074 	.word	0x20000074
 800a580:	fff00000 	.word	0xfff00000
 800a584:	7ff00000 	.word	0x7ff00000
 800a588:	3ff00000 	.word	0x3ff00000
 800a58c:	00000000 	.word	0x00000000

0800a590 <__ieee754_pow>:
 800a590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a594:	ed2d 8b06 	vpush	{d8-d10}
 800a598:	b08d      	sub	sp, #52	; 0x34
 800a59a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a59e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800a5a2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800a5a6:	ea56 0100 	orrs.w	r1, r6, r0
 800a5aa:	ec53 2b10 	vmov	r2, r3, d0
 800a5ae:	f000 84d1 	beq.w	800af54 <__ieee754_pow+0x9c4>
 800a5b2:	497f      	ldr	r1, [pc, #508]	; (800a7b0 <__ieee754_pow+0x220>)
 800a5b4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800a5b8:	428c      	cmp	r4, r1
 800a5ba:	ee10 8a10 	vmov	r8, s0
 800a5be:	4699      	mov	r9, r3
 800a5c0:	dc09      	bgt.n	800a5d6 <__ieee754_pow+0x46>
 800a5c2:	d103      	bne.n	800a5cc <__ieee754_pow+0x3c>
 800a5c4:	b97a      	cbnz	r2, 800a5e6 <__ieee754_pow+0x56>
 800a5c6:	42a6      	cmp	r6, r4
 800a5c8:	dd02      	ble.n	800a5d0 <__ieee754_pow+0x40>
 800a5ca:	e00c      	b.n	800a5e6 <__ieee754_pow+0x56>
 800a5cc:	428e      	cmp	r6, r1
 800a5ce:	dc02      	bgt.n	800a5d6 <__ieee754_pow+0x46>
 800a5d0:	428e      	cmp	r6, r1
 800a5d2:	d110      	bne.n	800a5f6 <__ieee754_pow+0x66>
 800a5d4:	b178      	cbz	r0, 800a5f6 <__ieee754_pow+0x66>
 800a5d6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a5da:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a5de:	ea54 0308 	orrs.w	r3, r4, r8
 800a5e2:	f000 84b7 	beq.w	800af54 <__ieee754_pow+0x9c4>
 800a5e6:	4873      	ldr	r0, [pc, #460]	; (800a7b4 <__ieee754_pow+0x224>)
 800a5e8:	b00d      	add	sp, #52	; 0x34
 800a5ea:	ecbd 8b06 	vpop	{d8-d10}
 800a5ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f2:	f000 bdb9 	b.w	800b168 <nan>
 800a5f6:	f1b9 0f00 	cmp.w	r9, #0
 800a5fa:	da36      	bge.n	800a66a <__ieee754_pow+0xda>
 800a5fc:	496e      	ldr	r1, [pc, #440]	; (800a7b8 <__ieee754_pow+0x228>)
 800a5fe:	428e      	cmp	r6, r1
 800a600:	dc51      	bgt.n	800a6a6 <__ieee754_pow+0x116>
 800a602:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800a606:	428e      	cmp	r6, r1
 800a608:	f340 84af 	ble.w	800af6a <__ieee754_pow+0x9da>
 800a60c:	1531      	asrs	r1, r6, #20
 800a60e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a612:	2914      	cmp	r1, #20
 800a614:	dd0f      	ble.n	800a636 <__ieee754_pow+0xa6>
 800a616:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800a61a:	fa20 fc01 	lsr.w	ip, r0, r1
 800a61e:	fa0c f101 	lsl.w	r1, ip, r1
 800a622:	4281      	cmp	r1, r0
 800a624:	f040 84a1 	bne.w	800af6a <__ieee754_pow+0x9da>
 800a628:	f00c 0c01 	and.w	ip, ip, #1
 800a62c:	f1cc 0102 	rsb	r1, ip, #2
 800a630:	9100      	str	r1, [sp, #0]
 800a632:	b180      	cbz	r0, 800a656 <__ieee754_pow+0xc6>
 800a634:	e059      	b.n	800a6ea <__ieee754_pow+0x15a>
 800a636:	2800      	cmp	r0, #0
 800a638:	d155      	bne.n	800a6e6 <__ieee754_pow+0x156>
 800a63a:	f1c1 0114 	rsb	r1, r1, #20
 800a63e:	fa46 fc01 	asr.w	ip, r6, r1
 800a642:	fa0c f101 	lsl.w	r1, ip, r1
 800a646:	42b1      	cmp	r1, r6
 800a648:	f040 848c 	bne.w	800af64 <__ieee754_pow+0x9d4>
 800a64c:	f00c 0c01 	and.w	ip, ip, #1
 800a650:	f1cc 0102 	rsb	r1, ip, #2
 800a654:	9100      	str	r1, [sp, #0]
 800a656:	4959      	ldr	r1, [pc, #356]	; (800a7bc <__ieee754_pow+0x22c>)
 800a658:	428e      	cmp	r6, r1
 800a65a:	d12d      	bne.n	800a6b8 <__ieee754_pow+0x128>
 800a65c:	2f00      	cmp	r7, #0
 800a65e:	da79      	bge.n	800a754 <__ieee754_pow+0x1c4>
 800a660:	4956      	ldr	r1, [pc, #344]	; (800a7bc <__ieee754_pow+0x22c>)
 800a662:	2000      	movs	r0, #0
 800a664:	f7f6 f8f2 	bl	800084c <__aeabi_ddiv>
 800a668:	e016      	b.n	800a698 <__ieee754_pow+0x108>
 800a66a:	2100      	movs	r1, #0
 800a66c:	9100      	str	r1, [sp, #0]
 800a66e:	2800      	cmp	r0, #0
 800a670:	d13b      	bne.n	800a6ea <__ieee754_pow+0x15a>
 800a672:	494f      	ldr	r1, [pc, #316]	; (800a7b0 <__ieee754_pow+0x220>)
 800a674:	428e      	cmp	r6, r1
 800a676:	d1ee      	bne.n	800a656 <__ieee754_pow+0xc6>
 800a678:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a67c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a680:	ea53 0308 	orrs.w	r3, r3, r8
 800a684:	f000 8466 	beq.w	800af54 <__ieee754_pow+0x9c4>
 800a688:	4b4d      	ldr	r3, [pc, #308]	; (800a7c0 <__ieee754_pow+0x230>)
 800a68a:	429c      	cmp	r4, r3
 800a68c:	dd0d      	ble.n	800a6aa <__ieee754_pow+0x11a>
 800a68e:	2f00      	cmp	r7, #0
 800a690:	f280 8464 	bge.w	800af5c <__ieee754_pow+0x9cc>
 800a694:	2000      	movs	r0, #0
 800a696:	2100      	movs	r1, #0
 800a698:	ec41 0b10 	vmov	d0, r0, r1
 800a69c:	b00d      	add	sp, #52	; 0x34
 800a69e:	ecbd 8b06 	vpop	{d8-d10}
 800a6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a6:	2102      	movs	r1, #2
 800a6a8:	e7e0      	b.n	800a66c <__ieee754_pow+0xdc>
 800a6aa:	2f00      	cmp	r7, #0
 800a6ac:	daf2      	bge.n	800a694 <__ieee754_pow+0x104>
 800a6ae:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800a6b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a6b6:	e7ef      	b.n	800a698 <__ieee754_pow+0x108>
 800a6b8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800a6bc:	d104      	bne.n	800a6c8 <__ieee754_pow+0x138>
 800a6be:	4610      	mov	r0, r2
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	f7f5 ff99 	bl	80005f8 <__aeabi_dmul>
 800a6c6:	e7e7      	b.n	800a698 <__ieee754_pow+0x108>
 800a6c8:	493e      	ldr	r1, [pc, #248]	; (800a7c4 <__ieee754_pow+0x234>)
 800a6ca:	428f      	cmp	r7, r1
 800a6cc:	d10d      	bne.n	800a6ea <__ieee754_pow+0x15a>
 800a6ce:	f1b9 0f00 	cmp.w	r9, #0
 800a6d2:	db0a      	blt.n	800a6ea <__ieee754_pow+0x15a>
 800a6d4:	ec43 2b10 	vmov	d0, r2, r3
 800a6d8:	b00d      	add	sp, #52	; 0x34
 800a6da:	ecbd 8b06 	vpop	{d8-d10}
 800a6de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e2:	f000 bc77 	b.w	800afd4 <__ieee754_sqrt>
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	9100      	str	r1, [sp, #0]
 800a6ea:	ec43 2b10 	vmov	d0, r2, r3
 800a6ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a6f2:	f000 fd23 	bl	800b13c <fabs>
 800a6f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6fa:	ec51 0b10 	vmov	r0, r1, d0
 800a6fe:	f1b8 0f00 	cmp.w	r8, #0
 800a702:	d12a      	bne.n	800a75a <__ieee754_pow+0x1ca>
 800a704:	b12c      	cbz	r4, 800a712 <__ieee754_pow+0x182>
 800a706:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800a7bc <__ieee754_pow+0x22c>
 800a70a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800a70e:	45e6      	cmp	lr, ip
 800a710:	d123      	bne.n	800a75a <__ieee754_pow+0x1ca>
 800a712:	2f00      	cmp	r7, #0
 800a714:	da05      	bge.n	800a722 <__ieee754_pow+0x192>
 800a716:	4602      	mov	r2, r0
 800a718:	460b      	mov	r3, r1
 800a71a:	2000      	movs	r0, #0
 800a71c:	4927      	ldr	r1, [pc, #156]	; (800a7bc <__ieee754_pow+0x22c>)
 800a71e:	f7f6 f895 	bl	800084c <__aeabi_ddiv>
 800a722:	f1b9 0f00 	cmp.w	r9, #0
 800a726:	dab7      	bge.n	800a698 <__ieee754_pow+0x108>
 800a728:	9b00      	ldr	r3, [sp, #0]
 800a72a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a72e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a732:	4323      	orrs	r3, r4
 800a734:	d108      	bne.n	800a748 <__ieee754_pow+0x1b8>
 800a736:	4602      	mov	r2, r0
 800a738:	460b      	mov	r3, r1
 800a73a:	4610      	mov	r0, r2
 800a73c:	4619      	mov	r1, r3
 800a73e:	f7f5 fda3 	bl	8000288 <__aeabi_dsub>
 800a742:	4602      	mov	r2, r0
 800a744:	460b      	mov	r3, r1
 800a746:	e78d      	b.n	800a664 <__ieee754_pow+0xd4>
 800a748:	9b00      	ldr	r3, [sp, #0]
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d1a4      	bne.n	800a698 <__ieee754_pow+0x108>
 800a74e:	4602      	mov	r2, r0
 800a750:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a754:	4610      	mov	r0, r2
 800a756:	4619      	mov	r1, r3
 800a758:	e79e      	b.n	800a698 <__ieee754_pow+0x108>
 800a75a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800a75e:	f10c 35ff 	add.w	r5, ip, #4294967295
 800a762:	950a      	str	r5, [sp, #40]	; 0x28
 800a764:	9d00      	ldr	r5, [sp, #0]
 800a766:	46ac      	mov	ip, r5
 800a768:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a76a:	ea5c 0505 	orrs.w	r5, ip, r5
 800a76e:	d0e4      	beq.n	800a73a <__ieee754_pow+0x1aa>
 800a770:	4b15      	ldr	r3, [pc, #84]	; (800a7c8 <__ieee754_pow+0x238>)
 800a772:	429e      	cmp	r6, r3
 800a774:	f340 80fc 	ble.w	800a970 <__ieee754_pow+0x3e0>
 800a778:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a77c:	429e      	cmp	r6, r3
 800a77e:	4b10      	ldr	r3, [pc, #64]	; (800a7c0 <__ieee754_pow+0x230>)
 800a780:	dd07      	ble.n	800a792 <__ieee754_pow+0x202>
 800a782:	429c      	cmp	r4, r3
 800a784:	dc0a      	bgt.n	800a79c <__ieee754_pow+0x20c>
 800a786:	2f00      	cmp	r7, #0
 800a788:	da84      	bge.n	800a694 <__ieee754_pow+0x104>
 800a78a:	a307      	add	r3, pc, #28	; (adr r3, 800a7a8 <__ieee754_pow+0x218>)
 800a78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a790:	e795      	b.n	800a6be <__ieee754_pow+0x12e>
 800a792:	429c      	cmp	r4, r3
 800a794:	dbf7      	blt.n	800a786 <__ieee754_pow+0x1f6>
 800a796:	4b09      	ldr	r3, [pc, #36]	; (800a7bc <__ieee754_pow+0x22c>)
 800a798:	429c      	cmp	r4, r3
 800a79a:	dd17      	ble.n	800a7cc <__ieee754_pow+0x23c>
 800a79c:	2f00      	cmp	r7, #0
 800a79e:	dcf4      	bgt.n	800a78a <__ieee754_pow+0x1fa>
 800a7a0:	e778      	b.n	800a694 <__ieee754_pow+0x104>
 800a7a2:	bf00      	nop
 800a7a4:	f3af 8000 	nop.w
 800a7a8:	8800759c 	.word	0x8800759c
 800a7ac:	7e37e43c 	.word	0x7e37e43c
 800a7b0:	7ff00000 	.word	0x7ff00000
 800a7b4:	0800bf01 	.word	0x0800bf01
 800a7b8:	433fffff 	.word	0x433fffff
 800a7bc:	3ff00000 	.word	0x3ff00000
 800a7c0:	3fefffff 	.word	0x3fefffff
 800a7c4:	3fe00000 	.word	0x3fe00000
 800a7c8:	41e00000 	.word	0x41e00000
 800a7cc:	4b64      	ldr	r3, [pc, #400]	; (800a960 <__ieee754_pow+0x3d0>)
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f7f5 fd5a 	bl	8000288 <__aeabi_dsub>
 800a7d4:	a356      	add	r3, pc, #344	; (adr r3, 800a930 <__ieee754_pow+0x3a0>)
 800a7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7da:	4604      	mov	r4, r0
 800a7dc:	460d      	mov	r5, r1
 800a7de:	f7f5 ff0b 	bl	80005f8 <__aeabi_dmul>
 800a7e2:	a355      	add	r3, pc, #340	; (adr r3, 800a938 <__ieee754_pow+0x3a8>)
 800a7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e8:	4606      	mov	r6, r0
 800a7ea:	460f      	mov	r7, r1
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	f7f5 ff02 	bl	80005f8 <__aeabi_dmul>
 800a7f4:	4b5b      	ldr	r3, [pc, #364]	; (800a964 <__ieee754_pow+0x3d4>)
 800a7f6:	4682      	mov	sl, r0
 800a7f8:	468b      	mov	fp, r1
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	4629      	mov	r1, r5
 800a800:	f7f5 fefa 	bl	80005f8 <__aeabi_dmul>
 800a804:	4602      	mov	r2, r0
 800a806:	460b      	mov	r3, r1
 800a808:	a14d      	add	r1, pc, #308	; (adr r1, 800a940 <__ieee754_pow+0x3b0>)
 800a80a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a80e:	f7f5 fd3b 	bl	8000288 <__aeabi_dsub>
 800a812:	4622      	mov	r2, r4
 800a814:	462b      	mov	r3, r5
 800a816:	f7f5 feef 	bl	80005f8 <__aeabi_dmul>
 800a81a:	4602      	mov	r2, r0
 800a81c:	460b      	mov	r3, r1
 800a81e:	2000      	movs	r0, #0
 800a820:	4951      	ldr	r1, [pc, #324]	; (800a968 <__ieee754_pow+0x3d8>)
 800a822:	f7f5 fd31 	bl	8000288 <__aeabi_dsub>
 800a826:	4622      	mov	r2, r4
 800a828:	4680      	mov	r8, r0
 800a82a:	4689      	mov	r9, r1
 800a82c:	462b      	mov	r3, r5
 800a82e:	4620      	mov	r0, r4
 800a830:	4629      	mov	r1, r5
 800a832:	f7f5 fee1 	bl	80005f8 <__aeabi_dmul>
 800a836:	4602      	mov	r2, r0
 800a838:	460b      	mov	r3, r1
 800a83a:	4640      	mov	r0, r8
 800a83c:	4649      	mov	r1, r9
 800a83e:	f7f5 fedb 	bl	80005f8 <__aeabi_dmul>
 800a842:	a341      	add	r3, pc, #260	; (adr r3, 800a948 <__ieee754_pow+0x3b8>)
 800a844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a848:	f7f5 fed6 	bl	80005f8 <__aeabi_dmul>
 800a84c:	4602      	mov	r2, r0
 800a84e:	460b      	mov	r3, r1
 800a850:	4650      	mov	r0, sl
 800a852:	4659      	mov	r1, fp
 800a854:	f7f5 fd18 	bl	8000288 <__aeabi_dsub>
 800a858:	4602      	mov	r2, r0
 800a85a:	460b      	mov	r3, r1
 800a85c:	4680      	mov	r8, r0
 800a85e:	4689      	mov	r9, r1
 800a860:	4630      	mov	r0, r6
 800a862:	4639      	mov	r1, r7
 800a864:	f7f5 fd12 	bl	800028c <__adddf3>
 800a868:	2400      	movs	r4, #0
 800a86a:	4632      	mov	r2, r6
 800a86c:	463b      	mov	r3, r7
 800a86e:	4620      	mov	r0, r4
 800a870:	460d      	mov	r5, r1
 800a872:	f7f5 fd09 	bl	8000288 <__aeabi_dsub>
 800a876:	4602      	mov	r2, r0
 800a878:	460b      	mov	r3, r1
 800a87a:	4640      	mov	r0, r8
 800a87c:	4649      	mov	r1, r9
 800a87e:	f7f5 fd03 	bl	8000288 <__aeabi_dsub>
 800a882:	9b00      	ldr	r3, [sp, #0]
 800a884:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a886:	3b01      	subs	r3, #1
 800a888:	4313      	orrs	r3, r2
 800a88a:	4682      	mov	sl, r0
 800a88c:	468b      	mov	fp, r1
 800a88e:	f040 81f1 	bne.w	800ac74 <__ieee754_pow+0x6e4>
 800a892:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800a950 <__ieee754_pow+0x3c0>
 800a896:	eeb0 8a47 	vmov.f32	s16, s14
 800a89a:	eef0 8a67 	vmov.f32	s17, s15
 800a89e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a8a2:	2600      	movs	r6, #0
 800a8a4:	4632      	mov	r2, r6
 800a8a6:	463b      	mov	r3, r7
 800a8a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8ac:	f7f5 fcec 	bl	8000288 <__aeabi_dsub>
 800a8b0:	4622      	mov	r2, r4
 800a8b2:	462b      	mov	r3, r5
 800a8b4:	f7f5 fea0 	bl	80005f8 <__aeabi_dmul>
 800a8b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8bc:	4680      	mov	r8, r0
 800a8be:	4689      	mov	r9, r1
 800a8c0:	4650      	mov	r0, sl
 800a8c2:	4659      	mov	r1, fp
 800a8c4:	f7f5 fe98 	bl	80005f8 <__aeabi_dmul>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4640      	mov	r0, r8
 800a8ce:	4649      	mov	r1, r9
 800a8d0:	f7f5 fcdc 	bl	800028c <__adddf3>
 800a8d4:	4632      	mov	r2, r6
 800a8d6:	463b      	mov	r3, r7
 800a8d8:	4680      	mov	r8, r0
 800a8da:	4689      	mov	r9, r1
 800a8dc:	4620      	mov	r0, r4
 800a8de:	4629      	mov	r1, r5
 800a8e0:	f7f5 fe8a 	bl	80005f8 <__aeabi_dmul>
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	4604      	mov	r4, r0
 800a8e8:	460d      	mov	r5, r1
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	4649      	mov	r1, r9
 800a8ee:	4640      	mov	r0, r8
 800a8f0:	f7f5 fccc 	bl	800028c <__adddf3>
 800a8f4:	4b1d      	ldr	r3, [pc, #116]	; (800a96c <__ieee754_pow+0x3dc>)
 800a8f6:	4299      	cmp	r1, r3
 800a8f8:	ec45 4b19 	vmov	d9, r4, r5
 800a8fc:	4606      	mov	r6, r0
 800a8fe:	460f      	mov	r7, r1
 800a900:	468b      	mov	fp, r1
 800a902:	f340 82fe 	ble.w	800af02 <__ieee754_pow+0x972>
 800a906:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a90a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a90e:	4303      	orrs	r3, r0
 800a910:	f000 81f0 	beq.w	800acf4 <__ieee754_pow+0x764>
 800a914:	a310      	add	r3, pc, #64	; (adr r3, 800a958 <__ieee754_pow+0x3c8>)
 800a916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91a:	ec51 0b18 	vmov	r0, r1, d8
 800a91e:	f7f5 fe6b 	bl	80005f8 <__aeabi_dmul>
 800a922:	a30d      	add	r3, pc, #52	; (adr r3, 800a958 <__ieee754_pow+0x3c8>)
 800a924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a928:	e6cb      	b.n	800a6c2 <__ieee754_pow+0x132>
 800a92a:	bf00      	nop
 800a92c:	f3af 8000 	nop.w
 800a930:	60000000 	.word	0x60000000
 800a934:	3ff71547 	.word	0x3ff71547
 800a938:	f85ddf44 	.word	0xf85ddf44
 800a93c:	3e54ae0b 	.word	0x3e54ae0b
 800a940:	55555555 	.word	0x55555555
 800a944:	3fd55555 	.word	0x3fd55555
 800a948:	652b82fe 	.word	0x652b82fe
 800a94c:	3ff71547 	.word	0x3ff71547
 800a950:	00000000 	.word	0x00000000
 800a954:	bff00000 	.word	0xbff00000
 800a958:	8800759c 	.word	0x8800759c
 800a95c:	7e37e43c 	.word	0x7e37e43c
 800a960:	3ff00000 	.word	0x3ff00000
 800a964:	3fd00000 	.word	0x3fd00000
 800a968:	3fe00000 	.word	0x3fe00000
 800a96c:	408fffff 	.word	0x408fffff
 800a970:	4bd7      	ldr	r3, [pc, #860]	; (800acd0 <__ieee754_pow+0x740>)
 800a972:	ea03 0309 	and.w	r3, r3, r9
 800a976:	2200      	movs	r2, #0
 800a978:	b92b      	cbnz	r3, 800a986 <__ieee754_pow+0x3f6>
 800a97a:	4bd6      	ldr	r3, [pc, #856]	; (800acd4 <__ieee754_pow+0x744>)
 800a97c:	f7f5 fe3c 	bl	80005f8 <__aeabi_dmul>
 800a980:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a984:	460c      	mov	r4, r1
 800a986:	1523      	asrs	r3, r4, #20
 800a988:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a98c:	4413      	add	r3, r2
 800a98e:	9309      	str	r3, [sp, #36]	; 0x24
 800a990:	4bd1      	ldr	r3, [pc, #836]	; (800acd8 <__ieee754_pow+0x748>)
 800a992:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a996:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a99a:	429c      	cmp	r4, r3
 800a99c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a9a0:	dd08      	ble.n	800a9b4 <__ieee754_pow+0x424>
 800a9a2:	4bce      	ldr	r3, [pc, #824]	; (800acdc <__ieee754_pow+0x74c>)
 800a9a4:	429c      	cmp	r4, r3
 800a9a6:	f340 8163 	ble.w	800ac70 <__ieee754_pow+0x6e0>
 800a9aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a9b0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a9b4:	2400      	movs	r4, #0
 800a9b6:	00e3      	lsls	r3, r4, #3
 800a9b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9ba:	4bc9      	ldr	r3, [pc, #804]	; (800ace0 <__ieee754_pow+0x750>)
 800a9bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a9c0:	ed93 7b00 	vldr	d7, [r3]
 800a9c4:	4629      	mov	r1, r5
 800a9c6:	ec53 2b17 	vmov	r2, r3, d7
 800a9ca:	eeb0 8a47 	vmov.f32	s16, s14
 800a9ce:	eef0 8a67 	vmov.f32	s17, s15
 800a9d2:	4682      	mov	sl, r0
 800a9d4:	f7f5 fc58 	bl	8000288 <__aeabi_dsub>
 800a9d8:	4652      	mov	r2, sl
 800a9da:	4606      	mov	r6, r0
 800a9dc:	460f      	mov	r7, r1
 800a9de:	462b      	mov	r3, r5
 800a9e0:	ec51 0b18 	vmov	r0, r1, d8
 800a9e4:	f7f5 fc52 	bl	800028c <__adddf3>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	2000      	movs	r0, #0
 800a9ee:	49bd      	ldr	r1, [pc, #756]	; (800ace4 <__ieee754_pow+0x754>)
 800a9f0:	f7f5 ff2c 	bl	800084c <__aeabi_ddiv>
 800a9f4:	ec41 0b19 	vmov	d9, r0, r1
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	4639      	mov	r1, r7
 800aa00:	f7f5 fdfa 	bl	80005f8 <__aeabi_dmul>
 800aa04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aa08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aa10:	2300      	movs	r3, #0
 800aa12:	9304      	str	r3, [sp, #16]
 800aa14:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800aa18:	46ab      	mov	fp, r5
 800aa1a:	106d      	asrs	r5, r5, #1
 800aa1c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800aa20:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800aa24:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800aa28:	2200      	movs	r2, #0
 800aa2a:	4640      	mov	r0, r8
 800aa2c:	4649      	mov	r1, r9
 800aa2e:	4614      	mov	r4, r2
 800aa30:	461d      	mov	r5, r3
 800aa32:	f7f5 fde1 	bl	80005f8 <__aeabi_dmul>
 800aa36:	4602      	mov	r2, r0
 800aa38:	460b      	mov	r3, r1
 800aa3a:	4630      	mov	r0, r6
 800aa3c:	4639      	mov	r1, r7
 800aa3e:	f7f5 fc23 	bl	8000288 <__aeabi_dsub>
 800aa42:	ec53 2b18 	vmov	r2, r3, d8
 800aa46:	4606      	mov	r6, r0
 800aa48:	460f      	mov	r7, r1
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	4629      	mov	r1, r5
 800aa4e:	f7f5 fc1b 	bl	8000288 <__aeabi_dsub>
 800aa52:	4602      	mov	r2, r0
 800aa54:	460b      	mov	r3, r1
 800aa56:	4650      	mov	r0, sl
 800aa58:	4659      	mov	r1, fp
 800aa5a:	f7f5 fc15 	bl	8000288 <__aeabi_dsub>
 800aa5e:	4642      	mov	r2, r8
 800aa60:	464b      	mov	r3, r9
 800aa62:	f7f5 fdc9 	bl	80005f8 <__aeabi_dmul>
 800aa66:	4602      	mov	r2, r0
 800aa68:	460b      	mov	r3, r1
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	4639      	mov	r1, r7
 800aa6e:	f7f5 fc0b 	bl	8000288 <__aeabi_dsub>
 800aa72:	ec53 2b19 	vmov	r2, r3, d9
 800aa76:	f7f5 fdbf 	bl	80005f8 <__aeabi_dmul>
 800aa7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa7e:	ec41 0b18 	vmov	d8, r0, r1
 800aa82:	4610      	mov	r0, r2
 800aa84:	4619      	mov	r1, r3
 800aa86:	f7f5 fdb7 	bl	80005f8 <__aeabi_dmul>
 800aa8a:	a37d      	add	r3, pc, #500	; (adr r3, 800ac80 <__ieee754_pow+0x6f0>)
 800aa8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa90:	4604      	mov	r4, r0
 800aa92:	460d      	mov	r5, r1
 800aa94:	f7f5 fdb0 	bl	80005f8 <__aeabi_dmul>
 800aa98:	a37b      	add	r3, pc, #492	; (adr r3, 800ac88 <__ieee754_pow+0x6f8>)
 800aa9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9e:	f7f5 fbf5 	bl	800028c <__adddf3>
 800aaa2:	4622      	mov	r2, r4
 800aaa4:	462b      	mov	r3, r5
 800aaa6:	f7f5 fda7 	bl	80005f8 <__aeabi_dmul>
 800aaaa:	a379      	add	r3, pc, #484	; (adr r3, 800ac90 <__ieee754_pow+0x700>)
 800aaac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab0:	f7f5 fbec 	bl	800028c <__adddf3>
 800aab4:	4622      	mov	r2, r4
 800aab6:	462b      	mov	r3, r5
 800aab8:	f7f5 fd9e 	bl	80005f8 <__aeabi_dmul>
 800aabc:	a376      	add	r3, pc, #472	; (adr r3, 800ac98 <__ieee754_pow+0x708>)
 800aabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac2:	f7f5 fbe3 	bl	800028c <__adddf3>
 800aac6:	4622      	mov	r2, r4
 800aac8:	462b      	mov	r3, r5
 800aaca:	f7f5 fd95 	bl	80005f8 <__aeabi_dmul>
 800aace:	a374      	add	r3, pc, #464	; (adr r3, 800aca0 <__ieee754_pow+0x710>)
 800aad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad4:	f7f5 fbda 	bl	800028c <__adddf3>
 800aad8:	4622      	mov	r2, r4
 800aada:	462b      	mov	r3, r5
 800aadc:	f7f5 fd8c 	bl	80005f8 <__aeabi_dmul>
 800aae0:	a371      	add	r3, pc, #452	; (adr r3, 800aca8 <__ieee754_pow+0x718>)
 800aae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae6:	f7f5 fbd1 	bl	800028c <__adddf3>
 800aaea:	4622      	mov	r2, r4
 800aaec:	4606      	mov	r6, r0
 800aaee:	460f      	mov	r7, r1
 800aaf0:	462b      	mov	r3, r5
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	4629      	mov	r1, r5
 800aaf6:	f7f5 fd7f 	bl	80005f8 <__aeabi_dmul>
 800aafa:	4602      	mov	r2, r0
 800aafc:	460b      	mov	r3, r1
 800aafe:	4630      	mov	r0, r6
 800ab00:	4639      	mov	r1, r7
 800ab02:	f7f5 fd79 	bl	80005f8 <__aeabi_dmul>
 800ab06:	4642      	mov	r2, r8
 800ab08:	4604      	mov	r4, r0
 800ab0a:	460d      	mov	r5, r1
 800ab0c:	464b      	mov	r3, r9
 800ab0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab12:	f7f5 fbbb 	bl	800028c <__adddf3>
 800ab16:	ec53 2b18 	vmov	r2, r3, d8
 800ab1a:	f7f5 fd6d 	bl	80005f8 <__aeabi_dmul>
 800ab1e:	4622      	mov	r2, r4
 800ab20:	462b      	mov	r3, r5
 800ab22:	f7f5 fbb3 	bl	800028c <__adddf3>
 800ab26:	4642      	mov	r2, r8
 800ab28:	4682      	mov	sl, r0
 800ab2a:	468b      	mov	fp, r1
 800ab2c:	464b      	mov	r3, r9
 800ab2e:	4640      	mov	r0, r8
 800ab30:	4649      	mov	r1, r9
 800ab32:	f7f5 fd61 	bl	80005f8 <__aeabi_dmul>
 800ab36:	4b6c      	ldr	r3, [pc, #432]	; (800ace8 <__ieee754_pow+0x758>)
 800ab38:	2200      	movs	r2, #0
 800ab3a:	4606      	mov	r6, r0
 800ab3c:	460f      	mov	r7, r1
 800ab3e:	f7f5 fba5 	bl	800028c <__adddf3>
 800ab42:	4652      	mov	r2, sl
 800ab44:	465b      	mov	r3, fp
 800ab46:	f7f5 fba1 	bl	800028c <__adddf3>
 800ab4a:	9c04      	ldr	r4, [sp, #16]
 800ab4c:	460d      	mov	r5, r1
 800ab4e:	4622      	mov	r2, r4
 800ab50:	460b      	mov	r3, r1
 800ab52:	4640      	mov	r0, r8
 800ab54:	4649      	mov	r1, r9
 800ab56:	f7f5 fd4f 	bl	80005f8 <__aeabi_dmul>
 800ab5a:	4b63      	ldr	r3, [pc, #396]	; (800ace8 <__ieee754_pow+0x758>)
 800ab5c:	4680      	mov	r8, r0
 800ab5e:	4689      	mov	r9, r1
 800ab60:	2200      	movs	r2, #0
 800ab62:	4620      	mov	r0, r4
 800ab64:	4629      	mov	r1, r5
 800ab66:	f7f5 fb8f 	bl	8000288 <__aeabi_dsub>
 800ab6a:	4632      	mov	r2, r6
 800ab6c:	463b      	mov	r3, r7
 800ab6e:	f7f5 fb8b 	bl	8000288 <__aeabi_dsub>
 800ab72:	4602      	mov	r2, r0
 800ab74:	460b      	mov	r3, r1
 800ab76:	4650      	mov	r0, sl
 800ab78:	4659      	mov	r1, fp
 800ab7a:	f7f5 fb85 	bl	8000288 <__aeabi_dsub>
 800ab7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab82:	f7f5 fd39 	bl	80005f8 <__aeabi_dmul>
 800ab86:	4622      	mov	r2, r4
 800ab88:	4606      	mov	r6, r0
 800ab8a:	460f      	mov	r7, r1
 800ab8c:	462b      	mov	r3, r5
 800ab8e:	ec51 0b18 	vmov	r0, r1, d8
 800ab92:	f7f5 fd31 	bl	80005f8 <__aeabi_dmul>
 800ab96:	4602      	mov	r2, r0
 800ab98:	460b      	mov	r3, r1
 800ab9a:	4630      	mov	r0, r6
 800ab9c:	4639      	mov	r1, r7
 800ab9e:	f7f5 fb75 	bl	800028c <__adddf3>
 800aba2:	4606      	mov	r6, r0
 800aba4:	460f      	mov	r7, r1
 800aba6:	4602      	mov	r2, r0
 800aba8:	460b      	mov	r3, r1
 800abaa:	4640      	mov	r0, r8
 800abac:	4649      	mov	r1, r9
 800abae:	f7f5 fb6d 	bl	800028c <__adddf3>
 800abb2:	9c04      	ldr	r4, [sp, #16]
 800abb4:	a33e      	add	r3, pc, #248	; (adr r3, 800acb0 <__ieee754_pow+0x720>)
 800abb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abba:	4620      	mov	r0, r4
 800abbc:	460d      	mov	r5, r1
 800abbe:	f7f5 fd1b 	bl	80005f8 <__aeabi_dmul>
 800abc2:	4642      	mov	r2, r8
 800abc4:	ec41 0b18 	vmov	d8, r0, r1
 800abc8:	464b      	mov	r3, r9
 800abca:	4620      	mov	r0, r4
 800abcc:	4629      	mov	r1, r5
 800abce:	f7f5 fb5b 	bl	8000288 <__aeabi_dsub>
 800abd2:	4602      	mov	r2, r0
 800abd4:	460b      	mov	r3, r1
 800abd6:	4630      	mov	r0, r6
 800abd8:	4639      	mov	r1, r7
 800abda:	f7f5 fb55 	bl	8000288 <__aeabi_dsub>
 800abde:	a336      	add	r3, pc, #216	; (adr r3, 800acb8 <__ieee754_pow+0x728>)
 800abe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe4:	f7f5 fd08 	bl	80005f8 <__aeabi_dmul>
 800abe8:	a335      	add	r3, pc, #212	; (adr r3, 800acc0 <__ieee754_pow+0x730>)
 800abea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abee:	4606      	mov	r6, r0
 800abf0:	460f      	mov	r7, r1
 800abf2:	4620      	mov	r0, r4
 800abf4:	4629      	mov	r1, r5
 800abf6:	f7f5 fcff 	bl	80005f8 <__aeabi_dmul>
 800abfa:	4602      	mov	r2, r0
 800abfc:	460b      	mov	r3, r1
 800abfe:	4630      	mov	r0, r6
 800ac00:	4639      	mov	r1, r7
 800ac02:	f7f5 fb43 	bl	800028c <__adddf3>
 800ac06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac08:	4b38      	ldr	r3, [pc, #224]	; (800acec <__ieee754_pow+0x75c>)
 800ac0a:	4413      	add	r3, r2
 800ac0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac10:	f7f5 fb3c 	bl	800028c <__adddf3>
 800ac14:	4682      	mov	sl, r0
 800ac16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac18:	468b      	mov	fp, r1
 800ac1a:	f7f5 fc83 	bl	8000524 <__aeabi_i2d>
 800ac1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac20:	4b33      	ldr	r3, [pc, #204]	; (800acf0 <__ieee754_pow+0x760>)
 800ac22:	4413      	add	r3, r2
 800ac24:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac28:	4606      	mov	r6, r0
 800ac2a:	460f      	mov	r7, r1
 800ac2c:	4652      	mov	r2, sl
 800ac2e:	465b      	mov	r3, fp
 800ac30:	ec51 0b18 	vmov	r0, r1, d8
 800ac34:	f7f5 fb2a 	bl	800028c <__adddf3>
 800ac38:	4642      	mov	r2, r8
 800ac3a:	464b      	mov	r3, r9
 800ac3c:	f7f5 fb26 	bl	800028c <__adddf3>
 800ac40:	4632      	mov	r2, r6
 800ac42:	463b      	mov	r3, r7
 800ac44:	f7f5 fb22 	bl	800028c <__adddf3>
 800ac48:	9c04      	ldr	r4, [sp, #16]
 800ac4a:	4632      	mov	r2, r6
 800ac4c:	463b      	mov	r3, r7
 800ac4e:	4620      	mov	r0, r4
 800ac50:	460d      	mov	r5, r1
 800ac52:	f7f5 fb19 	bl	8000288 <__aeabi_dsub>
 800ac56:	4642      	mov	r2, r8
 800ac58:	464b      	mov	r3, r9
 800ac5a:	f7f5 fb15 	bl	8000288 <__aeabi_dsub>
 800ac5e:	ec53 2b18 	vmov	r2, r3, d8
 800ac62:	f7f5 fb11 	bl	8000288 <__aeabi_dsub>
 800ac66:	4602      	mov	r2, r0
 800ac68:	460b      	mov	r3, r1
 800ac6a:	4650      	mov	r0, sl
 800ac6c:	4659      	mov	r1, fp
 800ac6e:	e606      	b.n	800a87e <__ieee754_pow+0x2ee>
 800ac70:	2401      	movs	r4, #1
 800ac72:	e6a0      	b.n	800a9b6 <__ieee754_pow+0x426>
 800ac74:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800acc8 <__ieee754_pow+0x738>
 800ac78:	e60d      	b.n	800a896 <__ieee754_pow+0x306>
 800ac7a:	bf00      	nop
 800ac7c:	f3af 8000 	nop.w
 800ac80:	4a454eef 	.word	0x4a454eef
 800ac84:	3fca7e28 	.word	0x3fca7e28
 800ac88:	93c9db65 	.word	0x93c9db65
 800ac8c:	3fcd864a 	.word	0x3fcd864a
 800ac90:	a91d4101 	.word	0xa91d4101
 800ac94:	3fd17460 	.word	0x3fd17460
 800ac98:	518f264d 	.word	0x518f264d
 800ac9c:	3fd55555 	.word	0x3fd55555
 800aca0:	db6fabff 	.word	0xdb6fabff
 800aca4:	3fdb6db6 	.word	0x3fdb6db6
 800aca8:	33333303 	.word	0x33333303
 800acac:	3fe33333 	.word	0x3fe33333
 800acb0:	e0000000 	.word	0xe0000000
 800acb4:	3feec709 	.word	0x3feec709
 800acb8:	dc3a03fd 	.word	0xdc3a03fd
 800acbc:	3feec709 	.word	0x3feec709
 800acc0:	145b01f5 	.word	0x145b01f5
 800acc4:	be3e2fe0 	.word	0xbe3e2fe0
 800acc8:	00000000 	.word	0x00000000
 800accc:	3ff00000 	.word	0x3ff00000
 800acd0:	7ff00000 	.word	0x7ff00000
 800acd4:	43400000 	.word	0x43400000
 800acd8:	0003988e 	.word	0x0003988e
 800acdc:	000bb679 	.word	0x000bb679
 800ace0:	0800bf30 	.word	0x0800bf30
 800ace4:	3ff00000 	.word	0x3ff00000
 800ace8:	40080000 	.word	0x40080000
 800acec:	0800bf50 	.word	0x0800bf50
 800acf0:	0800bf40 	.word	0x0800bf40
 800acf4:	a3b5      	add	r3, pc, #724	; (adr r3, 800afcc <__ieee754_pow+0xa3c>)
 800acf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfa:	4640      	mov	r0, r8
 800acfc:	4649      	mov	r1, r9
 800acfe:	f7f5 fac5 	bl	800028c <__adddf3>
 800ad02:	4622      	mov	r2, r4
 800ad04:	ec41 0b1a 	vmov	d10, r0, r1
 800ad08:	462b      	mov	r3, r5
 800ad0a:	4630      	mov	r0, r6
 800ad0c:	4639      	mov	r1, r7
 800ad0e:	f7f5 fabb 	bl	8000288 <__aeabi_dsub>
 800ad12:	4602      	mov	r2, r0
 800ad14:	460b      	mov	r3, r1
 800ad16:	ec51 0b1a 	vmov	r0, r1, d10
 800ad1a:	f7f5 fefd 	bl	8000b18 <__aeabi_dcmpgt>
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	f47f adf8 	bne.w	800a914 <__ieee754_pow+0x384>
 800ad24:	4aa4      	ldr	r2, [pc, #656]	; (800afb8 <__ieee754_pow+0xa28>)
 800ad26:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	f340 810b 	ble.w	800af46 <__ieee754_pow+0x9b6>
 800ad30:	151b      	asrs	r3, r3, #20
 800ad32:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ad36:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ad3a:	fa4a f303 	asr.w	r3, sl, r3
 800ad3e:	445b      	add	r3, fp
 800ad40:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ad44:	4e9d      	ldr	r6, [pc, #628]	; (800afbc <__ieee754_pow+0xa2c>)
 800ad46:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ad4a:	4116      	asrs	r6, r2
 800ad4c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ad50:	2000      	movs	r0, #0
 800ad52:	ea23 0106 	bic.w	r1, r3, r6
 800ad56:	f1c2 0214 	rsb	r2, r2, #20
 800ad5a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ad5e:	fa4a fa02 	asr.w	sl, sl, r2
 800ad62:	f1bb 0f00 	cmp.w	fp, #0
 800ad66:	4602      	mov	r2, r0
 800ad68:	460b      	mov	r3, r1
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	4629      	mov	r1, r5
 800ad6e:	bfb8      	it	lt
 800ad70:	f1ca 0a00 	rsblt	sl, sl, #0
 800ad74:	f7f5 fa88 	bl	8000288 <__aeabi_dsub>
 800ad78:	ec41 0b19 	vmov	d9, r0, r1
 800ad7c:	4642      	mov	r2, r8
 800ad7e:	464b      	mov	r3, r9
 800ad80:	ec51 0b19 	vmov	r0, r1, d9
 800ad84:	f7f5 fa82 	bl	800028c <__adddf3>
 800ad88:	2400      	movs	r4, #0
 800ad8a:	a379      	add	r3, pc, #484	; (adr r3, 800af70 <__ieee754_pow+0x9e0>)
 800ad8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad90:	4620      	mov	r0, r4
 800ad92:	460d      	mov	r5, r1
 800ad94:	f7f5 fc30 	bl	80005f8 <__aeabi_dmul>
 800ad98:	ec53 2b19 	vmov	r2, r3, d9
 800ad9c:	4606      	mov	r6, r0
 800ad9e:	460f      	mov	r7, r1
 800ada0:	4620      	mov	r0, r4
 800ada2:	4629      	mov	r1, r5
 800ada4:	f7f5 fa70 	bl	8000288 <__aeabi_dsub>
 800ada8:	4602      	mov	r2, r0
 800adaa:	460b      	mov	r3, r1
 800adac:	4640      	mov	r0, r8
 800adae:	4649      	mov	r1, r9
 800adb0:	f7f5 fa6a 	bl	8000288 <__aeabi_dsub>
 800adb4:	a370      	add	r3, pc, #448	; (adr r3, 800af78 <__ieee754_pow+0x9e8>)
 800adb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adba:	f7f5 fc1d 	bl	80005f8 <__aeabi_dmul>
 800adbe:	a370      	add	r3, pc, #448	; (adr r3, 800af80 <__ieee754_pow+0x9f0>)
 800adc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc4:	4680      	mov	r8, r0
 800adc6:	4689      	mov	r9, r1
 800adc8:	4620      	mov	r0, r4
 800adca:	4629      	mov	r1, r5
 800adcc:	f7f5 fc14 	bl	80005f8 <__aeabi_dmul>
 800add0:	4602      	mov	r2, r0
 800add2:	460b      	mov	r3, r1
 800add4:	4640      	mov	r0, r8
 800add6:	4649      	mov	r1, r9
 800add8:	f7f5 fa58 	bl	800028c <__adddf3>
 800addc:	4604      	mov	r4, r0
 800adde:	460d      	mov	r5, r1
 800ade0:	4602      	mov	r2, r0
 800ade2:	460b      	mov	r3, r1
 800ade4:	4630      	mov	r0, r6
 800ade6:	4639      	mov	r1, r7
 800ade8:	f7f5 fa50 	bl	800028c <__adddf3>
 800adec:	4632      	mov	r2, r6
 800adee:	463b      	mov	r3, r7
 800adf0:	4680      	mov	r8, r0
 800adf2:	4689      	mov	r9, r1
 800adf4:	f7f5 fa48 	bl	8000288 <__aeabi_dsub>
 800adf8:	4602      	mov	r2, r0
 800adfa:	460b      	mov	r3, r1
 800adfc:	4620      	mov	r0, r4
 800adfe:	4629      	mov	r1, r5
 800ae00:	f7f5 fa42 	bl	8000288 <__aeabi_dsub>
 800ae04:	4642      	mov	r2, r8
 800ae06:	4606      	mov	r6, r0
 800ae08:	460f      	mov	r7, r1
 800ae0a:	464b      	mov	r3, r9
 800ae0c:	4640      	mov	r0, r8
 800ae0e:	4649      	mov	r1, r9
 800ae10:	f7f5 fbf2 	bl	80005f8 <__aeabi_dmul>
 800ae14:	a35c      	add	r3, pc, #368	; (adr r3, 800af88 <__ieee754_pow+0x9f8>)
 800ae16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	460d      	mov	r5, r1
 800ae1e:	f7f5 fbeb 	bl	80005f8 <__aeabi_dmul>
 800ae22:	a35b      	add	r3, pc, #364	; (adr r3, 800af90 <__ieee754_pow+0xa00>)
 800ae24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae28:	f7f5 fa2e 	bl	8000288 <__aeabi_dsub>
 800ae2c:	4622      	mov	r2, r4
 800ae2e:	462b      	mov	r3, r5
 800ae30:	f7f5 fbe2 	bl	80005f8 <__aeabi_dmul>
 800ae34:	a358      	add	r3, pc, #352	; (adr r3, 800af98 <__ieee754_pow+0xa08>)
 800ae36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3a:	f7f5 fa27 	bl	800028c <__adddf3>
 800ae3e:	4622      	mov	r2, r4
 800ae40:	462b      	mov	r3, r5
 800ae42:	f7f5 fbd9 	bl	80005f8 <__aeabi_dmul>
 800ae46:	a356      	add	r3, pc, #344	; (adr r3, 800afa0 <__ieee754_pow+0xa10>)
 800ae48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4c:	f7f5 fa1c 	bl	8000288 <__aeabi_dsub>
 800ae50:	4622      	mov	r2, r4
 800ae52:	462b      	mov	r3, r5
 800ae54:	f7f5 fbd0 	bl	80005f8 <__aeabi_dmul>
 800ae58:	a353      	add	r3, pc, #332	; (adr r3, 800afa8 <__ieee754_pow+0xa18>)
 800ae5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5e:	f7f5 fa15 	bl	800028c <__adddf3>
 800ae62:	4622      	mov	r2, r4
 800ae64:	462b      	mov	r3, r5
 800ae66:	f7f5 fbc7 	bl	80005f8 <__aeabi_dmul>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	4640      	mov	r0, r8
 800ae70:	4649      	mov	r1, r9
 800ae72:	f7f5 fa09 	bl	8000288 <__aeabi_dsub>
 800ae76:	4604      	mov	r4, r0
 800ae78:	460d      	mov	r5, r1
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	4640      	mov	r0, r8
 800ae80:	4649      	mov	r1, r9
 800ae82:	f7f5 fbb9 	bl	80005f8 <__aeabi_dmul>
 800ae86:	2200      	movs	r2, #0
 800ae88:	ec41 0b19 	vmov	d9, r0, r1
 800ae8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae90:	4620      	mov	r0, r4
 800ae92:	4629      	mov	r1, r5
 800ae94:	f7f5 f9f8 	bl	8000288 <__aeabi_dsub>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	460b      	mov	r3, r1
 800ae9c:	ec51 0b19 	vmov	r0, r1, d9
 800aea0:	f7f5 fcd4 	bl	800084c <__aeabi_ddiv>
 800aea4:	4632      	mov	r2, r6
 800aea6:	4604      	mov	r4, r0
 800aea8:	460d      	mov	r5, r1
 800aeaa:	463b      	mov	r3, r7
 800aeac:	4640      	mov	r0, r8
 800aeae:	4649      	mov	r1, r9
 800aeb0:	f7f5 fba2 	bl	80005f8 <__aeabi_dmul>
 800aeb4:	4632      	mov	r2, r6
 800aeb6:	463b      	mov	r3, r7
 800aeb8:	f7f5 f9e8 	bl	800028c <__adddf3>
 800aebc:	4602      	mov	r2, r0
 800aebe:	460b      	mov	r3, r1
 800aec0:	4620      	mov	r0, r4
 800aec2:	4629      	mov	r1, r5
 800aec4:	f7f5 f9e0 	bl	8000288 <__aeabi_dsub>
 800aec8:	4642      	mov	r2, r8
 800aeca:	464b      	mov	r3, r9
 800aecc:	f7f5 f9dc 	bl	8000288 <__aeabi_dsub>
 800aed0:	460b      	mov	r3, r1
 800aed2:	4602      	mov	r2, r0
 800aed4:	493a      	ldr	r1, [pc, #232]	; (800afc0 <__ieee754_pow+0xa30>)
 800aed6:	2000      	movs	r0, #0
 800aed8:	f7f5 f9d6 	bl	8000288 <__aeabi_dsub>
 800aedc:	e9cd 0100 	strd	r0, r1, [sp]
 800aee0:	9b01      	ldr	r3, [sp, #4]
 800aee2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800aee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aeea:	da2f      	bge.n	800af4c <__ieee754_pow+0x9bc>
 800aeec:	4650      	mov	r0, sl
 800aeee:	ed9d 0b00 	vldr	d0, [sp]
 800aef2:	f000 f9cd 	bl	800b290 <scalbn>
 800aef6:	ec51 0b10 	vmov	r0, r1, d0
 800aefa:	ec53 2b18 	vmov	r2, r3, d8
 800aefe:	f7ff bbe0 	b.w	800a6c2 <__ieee754_pow+0x132>
 800af02:	4b30      	ldr	r3, [pc, #192]	; (800afc4 <__ieee754_pow+0xa34>)
 800af04:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800af08:	429e      	cmp	r6, r3
 800af0a:	f77f af0b 	ble.w	800ad24 <__ieee754_pow+0x794>
 800af0e:	4b2e      	ldr	r3, [pc, #184]	; (800afc8 <__ieee754_pow+0xa38>)
 800af10:	440b      	add	r3, r1
 800af12:	4303      	orrs	r3, r0
 800af14:	d00b      	beq.n	800af2e <__ieee754_pow+0x99e>
 800af16:	a326      	add	r3, pc, #152	; (adr r3, 800afb0 <__ieee754_pow+0xa20>)
 800af18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1c:	ec51 0b18 	vmov	r0, r1, d8
 800af20:	f7f5 fb6a 	bl	80005f8 <__aeabi_dmul>
 800af24:	a322      	add	r3, pc, #136	; (adr r3, 800afb0 <__ieee754_pow+0xa20>)
 800af26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2a:	f7ff bbca 	b.w	800a6c2 <__ieee754_pow+0x132>
 800af2e:	4622      	mov	r2, r4
 800af30:	462b      	mov	r3, r5
 800af32:	f7f5 f9a9 	bl	8000288 <__aeabi_dsub>
 800af36:	4642      	mov	r2, r8
 800af38:	464b      	mov	r3, r9
 800af3a:	f7f5 fde3 	bl	8000b04 <__aeabi_dcmpge>
 800af3e:	2800      	cmp	r0, #0
 800af40:	f43f aef0 	beq.w	800ad24 <__ieee754_pow+0x794>
 800af44:	e7e7      	b.n	800af16 <__ieee754_pow+0x986>
 800af46:	f04f 0a00 	mov.w	sl, #0
 800af4a:	e717      	b.n	800ad7c <__ieee754_pow+0x7ec>
 800af4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af50:	4619      	mov	r1, r3
 800af52:	e7d2      	b.n	800aefa <__ieee754_pow+0x96a>
 800af54:	491a      	ldr	r1, [pc, #104]	; (800afc0 <__ieee754_pow+0xa30>)
 800af56:	2000      	movs	r0, #0
 800af58:	f7ff bb9e 	b.w	800a698 <__ieee754_pow+0x108>
 800af5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af60:	f7ff bb9a 	b.w	800a698 <__ieee754_pow+0x108>
 800af64:	9000      	str	r0, [sp, #0]
 800af66:	f7ff bb76 	b.w	800a656 <__ieee754_pow+0xc6>
 800af6a:	2100      	movs	r1, #0
 800af6c:	f7ff bb60 	b.w	800a630 <__ieee754_pow+0xa0>
 800af70:	00000000 	.word	0x00000000
 800af74:	3fe62e43 	.word	0x3fe62e43
 800af78:	fefa39ef 	.word	0xfefa39ef
 800af7c:	3fe62e42 	.word	0x3fe62e42
 800af80:	0ca86c39 	.word	0x0ca86c39
 800af84:	be205c61 	.word	0xbe205c61
 800af88:	72bea4d0 	.word	0x72bea4d0
 800af8c:	3e663769 	.word	0x3e663769
 800af90:	c5d26bf1 	.word	0xc5d26bf1
 800af94:	3ebbbd41 	.word	0x3ebbbd41
 800af98:	af25de2c 	.word	0xaf25de2c
 800af9c:	3f11566a 	.word	0x3f11566a
 800afa0:	16bebd93 	.word	0x16bebd93
 800afa4:	3f66c16c 	.word	0x3f66c16c
 800afa8:	5555553e 	.word	0x5555553e
 800afac:	3fc55555 	.word	0x3fc55555
 800afb0:	c2f8f359 	.word	0xc2f8f359
 800afb4:	01a56e1f 	.word	0x01a56e1f
 800afb8:	3fe00000 	.word	0x3fe00000
 800afbc:	000fffff 	.word	0x000fffff
 800afc0:	3ff00000 	.word	0x3ff00000
 800afc4:	4090cbff 	.word	0x4090cbff
 800afc8:	3f6f3400 	.word	0x3f6f3400
 800afcc:	652b82fe 	.word	0x652b82fe
 800afd0:	3c971547 	.word	0x3c971547

0800afd4 <__ieee754_sqrt>:
 800afd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afd8:	ec55 4b10 	vmov	r4, r5, d0
 800afdc:	4e56      	ldr	r6, [pc, #344]	; (800b138 <__ieee754_sqrt+0x164>)
 800afde:	43ae      	bics	r6, r5
 800afe0:	ee10 0a10 	vmov	r0, s0
 800afe4:	ee10 3a10 	vmov	r3, s0
 800afe8:	4629      	mov	r1, r5
 800afea:	462a      	mov	r2, r5
 800afec:	d110      	bne.n	800b010 <__ieee754_sqrt+0x3c>
 800afee:	ee10 2a10 	vmov	r2, s0
 800aff2:	462b      	mov	r3, r5
 800aff4:	f7f5 fb00 	bl	80005f8 <__aeabi_dmul>
 800aff8:	4602      	mov	r2, r0
 800affa:	460b      	mov	r3, r1
 800affc:	4620      	mov	r0, r4
 800affe:	4629      	mov	r1, r5
 800b000:	f7f5 f944 	bl	800028c <__adddf3>
 800b004:	4604      	mov	r4, r0
 800b006:	460d      	mov	r5, r1
 800b008:	ec45 4b10 	vmov	d0, r4, r5
 800b00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b010:	2d00      	cmp	r5, #0
 800b012:	dc10      	bgt.n	800b036 <__ieee754_sqrt+0x62>
 800b014:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b018:	4330      	orrs	r0, r6
 800b01a:	d0f5      	beq.n	800b008 <__ieee754_sqrt+0x34>
 800b01c:	b15d      	cbz	r5, 800b036 <__ieee754_sqrt+0x62>
 800b01e:	ee10 2a10 	vmov	r2, s0
 800b022:	462b      	mov	r3, r5
 800b024:	ee10 0a10 	vmov	r0, s0
 800b028:	f7f5 f92e 	bl	8000288 <__aeabi_dsub>
 800b02c:	4602      	mov	r2, r0
 800b02e:	460b      	mov	r3, r1
 800b030:	f7f5 fc0c 	bl	800084c <__aeabi_ddiv>
 800b034:	e7e6      	b.n	800b004 <__ieee754_sqrt+0x30>
 800b036:	1509      	asrs	r1, r1, #20
 800b038:	d076      	beq.n	800b128 <__ieee754_sqrt+0x154>
 800b03a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b03e:	07ce      	lsls	r6, r1, #31
 800b040:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800b044:	bf5e      	ittt	pl
 800b046:	0fda      	lsrpl	r2, r3, #31
 800b048:	005b      	lslpl	r3, r3, #1
 800b04a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800b04e:	0fda      	lsrs	r2, r3, #31
 800b050:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800b054:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800b058:	2000      	movs	r0, #0
 800b05a:	106d      	asrs	r5, r5, #1
 800b05c:	005b      	lsls	r3, r3, #1
 800b05e:	f04f 0e16 	mov.w	lr, #22
 800b062:	4684      	mov	ip, r0
 800b064:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b068:	eb0c 0401 	add.w	r4, ip, r1
 800b06c:	4294      	cmp	r4, r2
 800b06e:	bfde      	ittt	le
 800b070:	1b12      	suble	r2, r2, r4
 800b072:	eb04 0c01 	addle.w	ip, r4, r1
 800b076:	1840      	addle	r0, r0, r1
 800b078:	0052      	lsls	r2, r2, #1
 800b07a:	f1be 0e01 	subs.w	lr, lr, #1
 800b07e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b082:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b086:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b08a:	d1ed      	bne.n	800b068 <__ieee754_sqrt+0x94>
 800b08c:	4671      	mov	r1, lr
 800b08e:	2720      	movs	r7, #32
 800b090:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b094:	4562      	cmp	r2, ip
 800b096:	eb04 060e 	add.w	r6, r4, lr
 800b09a:	dc02      	bgt.n	800b0a2 <__ieee754_sqrt+0xce>
 800b09c:	d113      	bne.n	800b0c6 <__ieee754_sqrt+0xf2>
 800b09e:	429e      	cmp	r6, r3
 800b0a0:	d811      	bhi.n	800b0c6 <__ieee754_sqrt+0xf2>
 800b0a2:	2e00      	cmp	r6, #0
 800b0a4:	eb06 0e04 	add.w	lr, r6, r4
 800b0a8:	da43      	bge.n	800b132 <__ieee754_sqrt+0x15e>
 800b0aa:	f1be 0f00 	cmp.w	lr, #0
 800b0ae:	db40      	blt.n	800b132 <__ieee754_sqrt+0x15e>
 800b0b0:	f10c 0801 	add.w	r8, ip, #1
 800b0b4:	eba2 020c 	sub.w	r2, r2, ip
 800b0b8:	429e      	cmp	r6, r3
 800b0ba:	bf88      	it	hi
 800b0bc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800b0c0:	1b9b      	subs	r3, r3, r6
 800b0c2:	4421      	add	r1, r4
 800b0c4:	46c4      	mov	ip, r8
 800b0c6:	0052      	lsls	r2, r2, #1
 800b0c8:	3f01      	subs	r7, #1
 800b0ca:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b0ce:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b0d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b0d6:	d1dd      	bne.n	800b094 <__ieee754_sqrt+0xc0>
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	d006      	beq.n	800b0ea <__ieee754_sqrt+0x116>
 800b0dc:	1c4c      	adds	r4, r1, #1
 800b0de:	bf13      	iteet	ne
 800b0e0:	3101      	addne	r1, #1
 800b0e2:	3001      	addeq	r0, #1
 800b0e4:	4639      	moveq	r1, r7
 800b0e6:	f021 0101 	bicne.w	r1, r1, #1
 800b0ea:	1043      	asrs	r3, r0, #1
 800b0ec:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b0f0:	0849      	lsrs	r1, r1, #1
 800b0f2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b0f6:	07c2      	lsls	r2, r0, #31
 800b0f8:	bf48      	it	mi
 800b0fa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b0fe:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800b102:	460c      	mov	r4, r1
 800b104:	463d      	mov	r5, r7
 800b106:	e77f      	b.n	800b008 <__ieee754_sqrt+0x34>
 800b108:	0ada      	lsrs	r2, r3, #11
 800b10a:	3815      	subs	r0, #21
 800b10c:	055b      	lsls	r3, r3, #21
 800b10e:	2a00      	cmp	r2, #0
 800b110:	d0fa      	beq.n	800b108 <__ieee754_sqrt+0x134>
 800b112:	02d7      	lsls	r7, r2, #11
 800b114:	d50a      	bpl.n	800b12c <__ieee754_sqrt+0x158>
 800b116:	f1c1 0420 	rsb	r4, r1, #32
 800b11a:	fa23 f404 	lsr.w	r4, r3, r4
 800b11e:	1e4d      	subs	r5, r1, #1
 800b120:	408b      	lsls	r3, r1
 800b122:	4322      	orrs	r2, r4
 800b124:	1b41      	subs	r1, r0, r5
 800b126:	e788      	b.n	800b03a <__ieee754_sqrt+0x66>
 800b128:	4608      	mov	r0, r1
 800b12a:	e7f0      	b.n	800b10e <__ieee754_sqrt+0x13a>
 800b12c:	0052      	lsls	r2, r2, #1
 800b12e:	3101      	adds	r1, #1
 800b130:	e7ef      	b.n	800b112 <__ieee754_sqrt+0x13e>
 800b132:	46e0      	mov	r8, ip
 800b134:	e7be      	b.n	800b0b4 <__ieee754_sqrt+0xe0>
 800b136:	bf00      	nop
 800b138:	7ff00000 	.word	0x7ff00000

0800b13c <fabs>:
 800b13c:	ec51 0b10 	vmov	r0, r1, d0
 800b140:	ee10 2a10 	vmov	r2, s0
 800b144:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b148:	ec43 2b10 	vmov	d0, r2, r3
 800b14c:	4770      	bx	lr

0800b14e <finite>:
 800b14e:	b082      	sub	sp, #8
 800b150:	ed8d 0b00 	vstr	d0, [sp]
 800b154:	9801      	ldr	r0, [sp, #4]
 800b156:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b15a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b15e:	0fc0      	lsrs	r0, r0, #31
 800b160:	b002      	add	sp, #8
 800b162:	4770      	bx	lr
 800b164:	0000      	movs	r0, r0
	...

0800b168 <nan>:
 800b168:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b170 <nan+0x8>
 800b16c:	4770      	bx	lr
 800b16e:	bf00      	nop
 800b170:	00000000 	.word	0x00000000
 800b174:	7ff80000 	.word	0x7ff80000

0800b178 <rint>:
 800b178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b17a:	ec51 0b10 	vmov	r0, r1, d0
 800b17e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b182:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b186:	2e13      	cmp	r6, #19
 800b188:	ee10 4a10 	vmov	r4, s0
 800b18c:	460b      	mov	r3, r1
 800b18e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800b192:	dc58      	bgt.n	800b246 <rint+0xce>
 800b194:	2e00      	cmp	r6, #0
 800b196:	da2b      	bge.n	800b1f0 <rint+0x78>
 800b198:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b19c:	4302      	orrs	r2, r0
 800b19e:	d023      	beq.n	800b1e8 <rint+0x70>
 800b1a0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800b1a4:	4302      	orrs	r2, r0
 800b1a6:	4254      	negs	r4, r2
 800b1a8:	4314      	orrs	r4, r2
 800b1aa:	0c4b      	lsrs	r3, r1, #17
 800b1ac:	0b24      	lsrs	r4, r4, #12
 800b1ae:	045b      	lsls	r3, r3, #17
 800b1b0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800b1b4:	ea44 0103 	orr.w	r1, r4, r3
 800b1b8:	4b32      	ldr	r3, [pc, #200]	; (800b284 <rint+0x10c>)
 800b1ba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b1be:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	4639      	mov	r1, r7
 800b1ca:	f7f5 f85f 	bl	800028c <__adddf3>
 800b1ce:	e9cd 0100 	strd	r0, r1, [sp]
 800b1d2:	463b      	mov	r3, r7
 800b1d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1d8:	4632      	mov	r2, r6
 800b1da:	f7f5 f855 	bl	8000288 <__aeabi_dsub>
 800b1de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b1e2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800b1e6:	4639      	mov	r1, r7
 800b1e8:	ec41 0b10 	vmov	d0, r0, r1
 800b1ec:	b003      	add	sp, #12
 800b1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1f0:	4a25      	ldr	r2, [pc, #148]	; (800b288 <rint+0x110>)
 800b1f2:	4132      	asrs	r2, r6
 800b1f4:	ea01 0702 	and.w	r7, r1, r2
 800b1f8:	4307      	orrs	r7, r0
 800b1fa:	d0f5      	beq.n	800b1e8 <rint+0x70>
 800b1fc:	0851      	lsrs	r1, r2, #1
 800b1fe:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800b202:	4314      	orrs	r4, r2
 800b204:	d00c      	beq.n	800b220 <rint+0xa8>
 800b206:	ea23 0201 	bic.w	r2, r3, r1
 800b20a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b20e:	2e13      	cmp	r6, #19
 800b210:	fa43 f606 	asr.w	r6, r3, r6
 800b214:	bf0c      	ite	eq
 800b216:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800b21a:	2400      	movne	r4, #0
 800b21c:	ea42 0306 	orr.w	r3, r2, r6
 800b220:	4918      	ldr	r1, [pc, #96]	; (800b284 <rint+0x10c>)
 800b222:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800b226:	4622      	mov	r2, r4
 800b228:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b22c:	4620      	mov	r0, r4
 800b22e:	4629      	mov	r1, r5
 800b230:	f7f5 f82c 	bl	800028c <__adddf3>
 800b234:	e9cd 0100 	strd	r0, r1, [sp]
 800b238:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b23c:	4622      	mov	r2, r4
 800b23e:	462b      	mov	r3, r5
 800b240:	f7f5 f822 	bl	8000288 <__aeabi_dsub>
 800b244:	e7d0      	b.n	800b1e8 <rint+0x70>
 800b246:	2e33      	cmp	r6, #51	; 0x33
 800b248:	dd07      	ble.n	800b25a <rint+0xe2>
 800b24a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b24e:	d1cb      	bne.n	800b1e8 <rint+0x70>
 800b250:	ee10 2a10 	vmov	r2, s0
 800b254:	f7f5 f81a 	bl	800028c <__adddf3>
 800b258:	e7c6      	b.n	800b1e8 <rint+0x70>
 800b25a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800b25e:	f04f 36ff 	mov.w	r6, #4294967295
 800b262:	40d6      	lsrs	r6, r2
 800b264:	4230      	tst	r0, r6
 800b266:	d0bf      	beq.n	800b1e8 <rint+0x70>
 800b268:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800b26c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800b270:	bf1f      	itttt	ne
 800b272:	ea24 0101 	bicne.w	r1, r4, r1
 800b276:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800b27a:	fa44 f202 	asrne.w	r2, r4, r2
 800b27e:	ea41 0402 	orrne.w	r4, r1, r2
 800b282:	e7cd      	b.n	800b220 <rint+0xa8>
 800b284:	0800bf60 	.word	0x0800bf60
 800b288:	000fffff 	.word	0x000fffff
 800b28c:	00000000 	.word	0x00000000

0800b290 <scalbn>:
 800b290:	b570      	push	{r4, r5, r6, lr}
 800b292:	ec55 4b10 	vmov	r4, r5, d0
 800b296:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b29a:	4606      	mov	r6, r0
 800b29c:	462b      	mov	r3, r5
 800b29e:	b99a      	cbnz	r2, 800b2c8 <scalbn+0x38>
 800b2a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b2a4:	4323      	orrs	r3, r4
 800b2a6:	d036      	beq.n	800b316 <scalbn+0x86>
 800b2a8:	4b39      	ldr	r3, [pc, #228]	; (800b390 <scalbn+0x100>)
 800b2aa:	4629      	mov	r1, r5
 800b2ac:	ee10 0a10 	vmov	r0, s0
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f7f5 f9a1 	bl	80005f8 <__aeabi_dmul>
 800b2b6:	4b37      	ldr	r3, [pc, #220]	; (800b394 <scalbn+0x104>)
 800b2b8:	429e      	cmp	r6, r3
 800b2ba:	4604      	mov	r4, r0
 800b2bc:	460d      	mov	r5, r1
 800b2be:	da10      	bge.n	800b2e2 <scalbn+0x52>
 800b2c0:	a32b      	add	r3, pc, #172	; (adr r3, 800b370 <scalbn+0xe0>)
 800b2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c6:	e03a      	b.n	800b33e <scalbn+0xae>
 800b2c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b2cc:	428a      	cmp	r2, r1
 800b2ce:	d10c      	bne.n	800b2ea <scalbn+0x5a>
 800b2d0:	ee10 2a10 	vmov	r2, s0
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	4629      	mov	r1, r5
 800b2d8:	f7f4 ffd8 	bl	800028c <__adddf3>
 800b2dc:	4604      	mov	r4, r0
 800b2de:	460d      	mov	r5, r1
 800b2e0:	e019      	b.n	800b316 <scalbn+0x86>
 800b2e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	3a36      	subs	r2, #54	; 0x36
 800b2ea:	4432      	add	r2, r6
 800b2ec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b2f0:	428a      	cmp	r2, r1
 800b2f2:	dd08      	ble.n	800b306 <scalbn+0x76>
 800b2f4:	2d00      	cmp	r5, #0
 800b2f6:	a120      	add	r1, pc, #128	; (adr r1, 800b378 <scalbn+0xe8>)
 800b2f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2fc:	da1c      	bge.n	800b338 <scalbn+0xa8>
 800b2fe:	a120      	add	r1, pc, #128	; (adr r1, 800b380 <scalbn+0xf0>)
 800b300:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b304:	e018      	b.n	800b338 <scalbn+0xa8>
 800b306:	2a00      	cmp	r2, #0
 800b308:	dd08      	ble.n	800b31c <scalbn+0x8c>
 800b30a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b30e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b312:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b316:	ec45 4b10 	vmov	d0, r4, r5
 800b31a:	bd70      	pop	{r4, r5, r6, pc}
 800b31c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b320:	da19      	bge.n	800b356 <scalbn+0xc6>
 800b322:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b326:	429e      	cmp	r6, r3
 800b328:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b32c:	dd0a      	ble.n	800b344 <scalbn+0xb4>
 800b32e:	a112      	add	r1, pc, #72	; (adr r1, 800b378 <scalbn+0xe8>)
 800b330:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d1e2      	bne.n	800b2fe <scalbn+0x6e>
 800b338:	a30f      	add	r3, pc, #60	; (adr r3, 800b378 <scalbn+0xe8>)
 800b33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33e:	f7f5 f95b 	bl	80005f8 <__aeabi_dmul>
 800b342:	e7cb      	b.n	800b2dc <scalbn+0x4c>
 800b344:	a10a      	add	r1, pc, #40	; (adr r1, 800b370 <scalbn+0xe0>)
 800b346:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d0b8      	beq.n	800b2c0 <scalbn+0x30>
 800b34e:	a10e      	add	r1, pc, #56	; (adr r1, 800b388 <scalbn+0xf8>)
 800b350:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b354:	e7b4      	b.n	800b2c0 <scalbn+0x30>
 800b356:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b35a:	3236      	adds	r2, #54	; 0x36
 800b35c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b360:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b364:	4620      	mov	r0, r4
 800b366:	4b0c      	ldr	r3, [pc, #48]	; (800b398 <scalbn+0x108>)
 800b368:	2200      	movs	r2, #0
 800b36a:	e7e8      	b.n	800b33e <scalbn+0xae>
 800b36c:	f3af 8000 	nop.w
 800b370:	c2f8f359 	.word	0xc2f8f359
 800b374:	01a56e1f 	.word	0x01a56e1f
 800b378:	8800759c 	.word	0x8800759c
 800b37c:	7e37e43c 	.word	0x7e37e43c
 800b380:	8800759c 	.word	0x8800759c
 800b384:	fe37e43c 	.word	0xfe37e43c
 800b388:	c2f8f359 	.word	0xc2f8f359
 800b38c:	81a56e1f 	.word	0x81a56e1f
 800b390:	43500000 	.word	0x43500000
 800b394:	ffff3cb0 	.word	0xffff3cb0
 800b398:	3c900000 	.word	0x3c900000

0800b39c <_init>:
 800b39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b39e:	bf00      	nop
 800b3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3a2:	bc08      	pop	{r3}
 800b3a4:	469e      	mov	lr, r3
 800b3a6:	4770      	bx	lr

0800b3a8 <_fini>:
 800b3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3aa:	bf00      	nop
 800b3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ae:	bc08      	pop	{r3}
 800b3b0:	469e      	mov	lr, r3
 800b3b2:	4770      	bx	lr
