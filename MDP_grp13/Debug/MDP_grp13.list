
MDP_grp13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c744  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be0  0800c8d8  0800c8d8  0001c8d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4b8  0800d4b8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800d4b8  0800d4b8  0001d4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4c0  0800d4c0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4c0  0800d4c0  0001d4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4c4  0800d4c4  0001d4c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800d4c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000050d4  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005154  20005154  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021b4d  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000419b  00000000  00000000  00041bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019f8  00000000  00000000  00045d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001870  00000000  00000000  00047790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005a53  00000000  00000000  00049000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d0d7  00000000  00000000  0004ea53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e92c6  00000000  00000000  0006bb2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00154df0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007518  00000000  00000000  00154e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c8bc 	.word	0x0800c8bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800c8bc 	.word	0x0800c8bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bac:	f000 b96e 	b.w	8000e8c <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468c      	mov	ip, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f040 8083 	bne.w	8000cde <__udivmoddi4+0x116>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4617      	mov	r7, r2
 8000bdc:	d947      	bls.n	8000c6e <__udivmoddi4+0xa6>
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	b142      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be4:	f1c2 0020 	rsb	r0, r2, #32
 8000be8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bec:	4091      	lsls	r1, r2
 8000bee:	4097      	lsls	r7, r2
 8000bf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000c00:	fa1f fe87 	uxth.w	lr, r7
 8000c04:	fb08 c116 	mls	r1, r8, r6, ip
 8000c08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c1a:	f080 8119 	bcs.w	8000e50 <__udivmoddi4+0x288>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8116 	bls.w	8000e50 <__udivmoddi4+0x288>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c30:	fb08 3310 	mls	r3, r8, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c46:	f080 8105 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f240 8102 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c50:	3802      	subs	r0, #2
 8000c52:	443c      	add	r4, r7
 8000c54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c58:	eba4 040e 	sub.w	r4, r4, lr
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	b11d      	cbz	r5, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c5 4300 	strd	r4, r3, [r5]
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xaa>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f282 	clz	r2, r2
 8000c76:	2a00      	cmp	r2, #0
 8000c78:	d150      	bne.n	8000d1c <__udivmoddi4+0x154>
 8000c7a:	1bcb      	subs	r3, r1, r7
 8000c7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c80:	fa1f f887 	uxth.w	r8, r7
 8000c84:	2601      	movs	r6, #1
 8000c86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8a:	0c21      	lsrs	r1, r4, #16
 8000c8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c94:	fb08 f30c 	mul.w	r3, r8, ip
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000c9c:	1879      	adds	r1, r7, r1
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0xe2>
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	f200 80e9 	bhi.w	8000e7c <__udivmoddi4+0x2b4>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1ac9      	subs	r1, r1, r3
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x10c>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x10a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80d9 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e7bf      	b.n	8000c5e <__udivmoddi4+0x96>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0x12e>
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	f000 80b1 	beq.w	8000e4a <__udivmoddi4+0x282>
 8000ce8:	2600      	movs	r6, #0
 8000cea:	e9c5 0100 	strd	r0, r1, [r5]
 8000cee:	4630      	mov	r0, r6
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	fab3 f683 	clz	r6, r3
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d14a      	bne.n	8000d94 <__udivmoddi4+0x1cc>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0x140>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 80b8 	bhi.w	8000e78 <__udivmoddi4+0x2b0>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	468c      	mov	ip, r1
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	d0a8      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000d16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d1a:	e7a5      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000d1c:	f1c2 0320 	rsb	r3, r2, #32
 8000d20:	fa20 f603 	lsr.w	r6, r0, r3
 8000d24:	4097      	lsls	r7, r2
 8000d26:	fa01 f002 	lsl.w	r0, r1, r2
 8000d2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2e:	40d9      	lsrs	r1, r3
 8000d30:	4330      	orrs	r0, r6
 8000d32:	0c03      	lsrs	r3, r0, #16
 8000d34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d38:	fa1f f887 	uxth.w	r8, r7
 8000d3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d44:	fb06 f108 	mul.w	r1, r6, r8
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x19c>
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d56:	f080 808d 	bcs.w	8000e74 <__udivmoddi4+0x2ac>
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	f240 808a 	bls.w	8000e74 <__udivmoddi4+0x2ac>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	443b      	add	r3, r7
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	b281      	uxth	r1, r0
 8000d68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb00 f308 	mul.w	r3, r0, r8
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x1c4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d82:	d273      	bcs.n	8000e6c <__udivmoddi4+0x2a4>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d971      	bls.n	8000e6c <__udivmoddi4+0x2a4>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4439      	add	r1, r7
 8000d8c:	1acb      	subs	r3, r1, r3
 8000d8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d92:	e778      	b.n	8000c86 <__udivmoddi4+0xbe>
 8000d94:	f1c6 0c20 	rsb	ip, r6, #32
 8000d98:	fa03 f406 	lsl.w	r4, r3, r6
 8000d9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000da0:	431c      	orrs	r4, r3
 8000da2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000da6:	fa01 f306 	lsl.w	r3, r1, r6
 8000daa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000db2:	431f      	orrs	r7, r3
 8000db4:	0c3b      	lsrs	r3, r7, #16
 8000db6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dba:	fa1f f884 	uxth.w	r8, r4
 8000dbe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dc2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dc6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dca:	458a      	cmp	sl, r1
 8000dcc:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd0:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x220>
 8000dd6:	1861      	adds	r1, r4, r1
 8000dd8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ddc:	d248      	bcs.n	8000e70 <__udivmoddi4+0x2a8>
 8000dde:	458a      	cmp	sl, r1
 8000de0:	d946      	bls.n	8000e70 <__udivmoddi4+0x2a8>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	4421      	add	r1, r4
 8000de8:	eba1 010a 	sub.w	r1, r1, sl
 8000dec:	b2bf      	uxth	r7, r7
 8000dee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dfa:	fb00 f808 	mul.w	r8, r0, r8
 8000dfe:	45b8      	cmp	r8, r7
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x24a>
 8000e02:	19e7      	adds	r7, r4, r7
 8000e04:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e08:	d22e      	bcs.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0a:	45b8      	cmp	r8, r7
 8000e0c:	d92c      	bls.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4427      	add	r7, r4
 8000e12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e16:	eba7 0708 	sub.w	r7, r7, r8
 8000e1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1e:	454f      	cmp	r7, r9
 8000e20:	46c6      	mov	lr, r8
 8000e22:	4649      	mov	r1, r9
 8000e24:	d31a      	bcc.n	8000e5c <__udivmoddi4+0x294>
 8000e26:	d017      	beq.n	8000e58 <__udivmoddi4+0x290>
 8000e28:	b15d      	cbz	r5, 8000e42 <__udivmoddi4+0x27a>
 8000e2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e36:	40f2      	lsrs	r2, r6
 8000e38:	ea4c 0202 	orr.w	r2, ip, r2
 8000e3c:	40f7      	lsrs	r7, r6
 8000e3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e42:	2600      	movs	r6, #0
 8000e44:	4631      	mov	r1, r6
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	462e      	mov	r6, r5
 8000e4c:	4628      	mov	r0, r5
 8000e4e:	e70b      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e50:	4606      	mov	r6, r0
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e54:	4618      	mov	r0, r3
 8000e56:	e6fd      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e58:	4543      	cmp	r3, r8
 8000e5a:	d2e5      	bcs.n	8000e28 <__udivmoddi4+0x260>
 8000e5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e60:	eb69 0104 	sbc.w	r1, r9, r4
 8000e64:	3801      	subs	r0, #1
 8000e66:	e7df      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e68:	4608      	mov	r0, r1
 8000e6a:	e7d2      	b.n	8000e12 <__udivmoddi4+0x24a>
 8000e6c:	4660      	mov	r0, ip
 8000e6e:	e78d      	b.n	8000d8c <__udivmoddi4+0x1c4>
 8000e70:	4681      	mov	r9, r0
 8000e72:	e7b9      	b.n	8000de8 <__udivmoddi4+0x220>
 8000e74:	4666      	mov	r6, ip
 8000e76:	e775      	b.n	8000d64 <__udivmoddi4+0x19c>
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e74a      	b.n	8000d12 <__udivmoddi4+0x14a>
 8000e7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e80:	4439      	add	r1, r7
 8000e82:	e713      	b.n	8000cac <__udivmoddi4+0xe4>
 8000e84:	3802      	subs	r0, #2
 8000e86:	443c      	add	r4, r7
 8000e88:	e724      	b.n	8000cd4 <__udivmoddi4+0x10c>
 8000e8a:	bf00      	nop

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid) {
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f04f 0200 	mov.w	r2, #0
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0f;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0f;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f04f 0200 	mov.w	r2, #0
 8000eae:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f04f 0200 	mov.w	r2, #0
 8000eb6:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0f;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f04f 0200 	mov.w	r2, #0
 8000ebe:	635a      	str	r2, [r3, #52]	; 0x34

}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000ed8:	edc7 0a01 	vstr	s1, [r7, #4]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 8000edc:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ee0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ee4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ee8:	edc7 7a05 	vstr	s15, [r7, #20]


	/*
	* Proportional
	*/
    float proportional = pid->Kp * error;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	edd3 7a00 	vldr	s15, [r3]
 8000ef2:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000efa:	edc7 7a04 	vstr	s15, [r7, #16]


	/*
	* Integral
	*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f0a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8000f0e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	edd3 7a08 	vldr	s15, [r3, #32]
 8000f18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 8000f22:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f26:	ee76 7a27 	vadd.f32	s15, s12, s15
 8000f2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMaxInt) {
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4c:	dd04      	ble.n	8000f58 <PIDController_Update+0x8c>

        pid->integrator = pid->limMaxInt;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	69da      	ldr	r2, [r3, #28]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
 8000f56:	e00e      	b.n	8000f76 <PIDController_Update+0xaa>

    } else if (pid->integrator < pid->limMinInt) {
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6c:	d503      	bpl.n	8000f76 <PIDController_Update+0xaa>

        pid->integrator = pid->limMinInt;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	699a      	ldr	r2, [r3, #24]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24


	/*
	* Compute output and apply limits
	*/
    pid->out = proportional + pid->integrator;// + pid->differentiator;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000f7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (pid->out > pid->limMax) {
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	dd04      	ble.n	8000faa <PIDController_Update+0xde>

        pid->out = pid->limMax;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	695a      	ldr	r2, [r3, #20]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	635a      	str	r2, [r3, #52]	; 0x34
 8000fa8:	e00e      	b.n	8000fc8 <PIDController_Update+0xfc>

    } else if (pid->out < pid->limMin) {
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbe:	d503      	bpl.n	8000fc8 <PIDController_Update+0xfc>

        pid->out = pid->limMin;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	691a      	ldr	r2, [r3, #16]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	635a      	str	r2, [r3, #52]	; 0x34

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28
    pid->prevMeasurement = measurement;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	631a      	str	r2, [r3, #48]	; 0x30

	/* Return controller output */
    return pid->out;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd8:	ee07 3a90 	vmov	s15, r3

}
 8000fdc:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe0:	371c      	adds	r7, #28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <delay>:

/* Timer variables */
float startSec;
float currSec;

void delay(uint16_t time){  //provide us delay
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <delay+0x30>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim4) < time);
 8000ffe:	bf00      	nop
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <delay+0x30>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	429a      	cmp	r2, r3
 800100a:	d3f9      	bcc.n	8001000 <delay+0x14>
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20004a50 	.word	0x20004a50

08001020 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)		//For HCSR04_Read();
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7f1b      	ldrb	r3, [r3, #28]
 800102c:	2b01      	cmp	r3, #1
 800102e:	f040 8083 	bne.w	8001138 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8001032:	4b45      	ldr	r3, [pc, #276]	; (8001148 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d11a      	bne.n	8001070 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800103a:	2100      	movs	r1, #0
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f005 fadb 	bl	80065f8 <HAL_TIM_ReadCapturedValue>
 8001042:	4603      	mov	r3, r0
 8001044:	4a41      	ldr	r2, [pc, #260]	; (800114c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001046:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001048:	4b3f      	ldr	r3, [pc, #252]	; (8001148 <HAL_TIM_IC_CaptureCallback+0x128>)
 800104a:	2201      	movs	r2, #1
 800104c:	601a      	str	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6a1a      	ldr	r2, [r3, #32]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 020a 	bic.w	r2, r2, #10
 800105c:	621a      	str	r2, [r3, #32]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6a1a      	ldr	r2, [r3, #32]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f042 0202 	orr.w	r2, r2, #2
 800106c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 800106e:	e063      	b.n	8001138 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001070:	4b35      	ldr	r3, [pc, #212]	; (8001148 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d15f      	bne.n	8001138 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001078:	2100      	movs	r1, #0
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f005 fabc 	bl	80065f8 <HAL_TIM_ReadCapturedValue>
 8001080:	4603      	mov	r3, r0
 8001082:	4a33      	ldr	r2, [pc, #204]	; (8001150 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001084:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 800108e:	4b30      	ldr	r3, [pc, #192]	; (8001150 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4b2e      	ldr	r3, [pc, #184]	; (800114c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	429a      	cmp	r2, r3
 8001098:	d907      	bls.n	80010aa <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 800109a:	4b2d      	ldr	r3, [pc, #180]	; (8001150 <HAL_TIM_IC_CaptureCallback+0x130>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	4b2b      	ldr	r3, [pc, #172]	; (800114c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	4a2b      	ldr	r2, [pc, #172]	; (8001154 <HAL_TIM_IC_CaptureCallback+0x134>)
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	e00f      	b.n	80010ca <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2) {
 80010aa:	4b28      	ldr	r3, [pc, #160]	; (800114c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	4b28      	ldr	r3, [pc, #160]	; (8001150 <HAL_TIM_IC_CaptureCallback+0x130>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d909      	bls.n	80010ca <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 80010b6:	4b26      	ldr	r3, [pc, #152]	; (8001150 <HAL_TIM_IC_CaptureCallback+0x130>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	4b24      	ldr	r3, [pc, #144]	; (800114c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80010c4:	33ff      	adds	r3, #255	; 0xff
 80010c6:	4a23      	ldr	r2, [pc, #140]	; (8001154 <HAL_TIM_IC_CaptureCallback+0x134>)
 80010c8:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 80010ca:	4b22      	ldr	r3, [pc, #136]	; (8001154 <HAL_TIM_IC_CaptureCallback+0x134>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fa18 	bl	8000504 <__aeabi_ui2d>
 80010d4:	a31a      	add	r3, pc, #104	; (adr r3, 8001140 <HAL_TIM_IC_CaptureCallback+0x120>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	f7ff fa8d 	bl	80005f8 <__aeabi_dmul>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010ee:	f7ff fbad 	bl	800084c <__aeabi_ddiv>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	f7ff fd2d 	bl	8000b58 <__aeabi_d2uiz>
 80010fe:	4603      	mov	r3, r0
 8001100:	b29a      	uxth	r2, r3
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001104:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6a1a      	ldr	r2, [r3, #32]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f022 020a 	bic.w	r2, r2, #10
 800111a:	621a      	str	r2, [r3, #32]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6a12      	ldr	r2, [r2, #32]
 8001126:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68da      	ldr	r2, [r3, #12]
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 0202 	bic.w	r2, r2, #2
 8001136:	60da      	str	r2, [r3, #12]
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	b020c49c 	.word	0xb020c49c
 8001144:	3fa16872 	.word	0x3fa16872
 8001148:	200000b4 	.word	0x200000b4
 800114c:	200000a8 	.word	0x200000a8
 8001150:	200000ac 	.word	0x200000ac
 8001154:	200000b0 	.word	0x200000b0
 8001158:	200000b8 	.word	0x200000b8
 800115c:	20004a50 	.word	0x20004a50

08001160 <HCSR04_Read>:

uint16_t HCSR04_Read (void)		//Read Ultrasonic Distance
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001164:	2201      	movs	r2, #1
 8001166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800116a:	480c      	ldr	r0, [pc, #48]	; (800119c <HCSR04_Read+0x3c>)
 800116c:	f003 fc08 	bl	8004980 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8001170:	200a      	movs	r0, #10
 8001172:	f7ff ff3b 	bl	8000fec <delay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800117c:	4807      	ldr	r0, [pc, #28]	; (800119c <HCSR04_Read+0x3c>)
 800117e:	f003 fbff 	bl	8004980 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8001182:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <HCSR04_Read+0x40>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <HCSR04_Read+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f042 0202 	orr.w	r2, r2, #2
 8001190:	60da      	str	r2, [r3, #12]
	return Distance;
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <HCSR04_Read+0x44>)
 8001194:	881b      	ldrh	r3, [r3, #0]
}
 8001196:	4618      	mov	r0, r3
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40020c00 	.word	0x40020c00
 80011a0:	20004a50 	.word	0x20004a50
 80011a4:	200000b8 	.word	0x200000b8

080011a8 <ultraDistCheck>:

void ultraDistCheck (void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	uDistCheck1 = HCSR04_Read();
 80011ac:	f7ff ffd8 	bl	8001160 <HCSR04_Read>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <ultraDistCheck+0x80>)
 80011b6:	801a      	strh	r2, [r3, #0]
	HAL_Delay(100);
 80011b8:	2064      	movs	r0, #100	; 0x64
 80011ba:	f002 fd3b 	bl	8003c34 <HAL_Delay>
	uDistCheck2 = HCSR04_Read();
 80011be:	f7ff ffcf 	bl	8001160 <HCSR04_Read>
 80011c2:	4603      	mov	r3, r0
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <ultraDistCheck+0x84>)
 80011c8:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 80011ca:	2064      	movs	r0, #100	; 0x64
 80011cc:	f002 fd32 	bl	8003c34 <HAL_Delay>
	while (abs(uDistCheck1 - uDistCheck2) >= 5) { // || uDistCheck2 - uDistCheck1 >= 5) {
 80011d0:	e011      	b.n	80011f6 <ultraDistCheck+0x4e>
		uDistCheck1 = HCSR04_Read();
 80011d2:	f7ff ffc5 	bl	8001160 <HCSR04_Read>
 80011d6:	4603      	mov	r3, r0
 80011d8:	461a      	mov	r2, r3
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <ultraDistCheck+0x80>)
 80011dc:	801a      	strh	r2, [r3, #0]
		HAL_Delay(100);
 80011de:	2064      	movs	r0, #100	; 0x64
 80011e0:	f002 fd28 	bl	8003c34 <HAL_Delay>
		uDistCheck2 = HCSR04_Read();
 80011e4:	f7ff ffbc 	bl	8001160 <HCSR04_Read>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <ultraDistCheck+0x84>)
 80011ee:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 80011f0:	2064      	movs	r0, #100	; 0x64
 80011f2:	f002 fd1f 	bl	8003c34 <HAL_Delay>
	while (abs(uDistCheck1 - uDistCheck2) >= 5) { // || uDistCheck2 - uDistCheck1 >= 5) {
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <ultraDistCheck+0x80>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <ultraDistCheck+0x84>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	bfb8      	it	lt
 8001206:	425b      	neglt	r3, r3
 8001208:	2b04      	cmp	r3, #4
 800120a:	dce2      	bgt.n	80011d2 <ultraDistCheck+0x2a>
	}
	uDistFinal = (uDistCheck1 + uDistCheck2)/2;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <ultraDistCheck+0x80>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <ultraDistCheck+0x84>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4413      	add	r3, r2
 8001218:	0fda      	lsrs	r2, r3, #31
 800121a:	4413      	add	r3, r2
 800121c:	105b      	asrs	r3, r3, #1
 800121e:	461a      	mov	r2, r3
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <ultraDistCheck+0x88>)
 8001222:	601a      	str	r2, [r3, #0]
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200000ba 	.word	0x200000ba
 800122c:	200000bc 	.word	0x200000bc
 8001230:	200000c0 	.word	0x200000c0
 8001234:	00000000 	.word	0x00000000

08001238 <irLeft>:

uint32_t irLeft (void) { //ADC1 (a bit more wonky)
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
	adc1 = 0;
 800123e:	4b32      	ldr	r3, [pc, #200]	; (8001308 <irLeft+0xd0>)
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
	float V = 0;
 8001244:	f04f 0300 	mov.w	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
	HAL_ADC_Start(&hadc1);
 800124a:	4830      	ldr	r0, [pc, #192]	; (800130c <irLeft+0xd4>)
 800124c:	f002 fd5a 	bl	8003d04 <HAL_ADC_Start>
	adc1 = HAL_ADC_GetValue(&hadc1);
 8001250:	482e      	ldr	r0, [pc, #184]	; (800130c <irLeft+0xd4>)
 8001252:	f002 fe29 	bl	8003ea8 <HAL_ADC_GetValue>
 8001256:	4603      	mov	r3, r0
 8001258:	4a2b      	ldr	r2, [pc, #172]	; (8001308 <irLeft+0xd0>)
 800125a:	6013      	str	r3, [r2, #0]
	V = (float)adc1/1000;
 800125c:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <irLeft+0xd0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	ee07 3a90 	vmov	s15, r3
 8001264:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001268:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001310 <irLeft+0xd8>
 800126c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001270:	edc7 7a01 	vstr	s15, [r7, #4]

	if (V <= 0.5) V = 0.5; //cap at 80 cm
 8001274:	edd7 7a01 	vldr	s15, [r7, #4]
 8001278:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800127c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001284:	d803      	bhi.n	800128e <irLeft+0x56>
 8001286:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	e00c      	b.n	80012a8 <irLeft+0x70>
	else if (V >= 2.84) V = 2.84; //cap at 10 cm
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff f95a 	bl	8000548 <__aeabi_f2d>
 8001294:	a316      	add	r3, pc, #88	; (adr r3, 80012f0 <irLeft+0xb8>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	f7ff fc33 	bl	8000b04 <__aeabi_dcmpge>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <irLeft+0x70>
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <irLeft+0xdc>)
 80012a6:	607b      	str	r3, [r7, #4]


	ir1Dist = 34.96332 * pow(V, -1.19878);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff f94d 	bl	8000548 <__aeabi_f2d>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80012f8 <irLeft+0xc0>
 80012b6:	ec43 2b10 	vmov	d0, r2, r3
 80012ba:	f00a fb49 	bl	800b950 <pow>
 80012be:	ec51 0b10 	vmov	r0, r1, d0
 80012c2:	a30f      	add	r3, pc, #60	; (adr r3, 8001300 <irLeft+0xc8>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7ff f996 	bl	80005f8 <__aeabi_dmul>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff fc40 	bl	8000b58 <__aeabi_d2uiz>
 80012d8:	4603      	mov	r3, r0
 80012da:	4a0f      	ldr	r2, [pc, #60]	; (8001318 <irLeft+0xe0>)
 80012dc:	6013      	str	r3, [r2, #0]
	return ir1Dist;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <irLeft+0xe0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	f3af 8000 	nop.w
 80012f0:	eb851eb8 	.word	0xeb851eb8
 80012f4:	4006b851 	.word	0x4006b851
 80012f8:	eff19503 	.word	0xeff19503
 80012fc:	bff32e33 	.word	0xbff32e33
 8001300:	11dbca97 	.word	0x11dbca97
 8001304:	40417b4e 	.word	0x40417b4e
 8001308:	20004c28 	.word	0x20004c28
 800130c:	20004be0 	.word	0x20004be0
 8001310:	447a0000 	.word	0x447a0000
 8001314:	4035c28f 	.word	0x4035c28f
 8001318:	200000c4 	.word	0x200000c4
 800131c:	00000000 	.word	0x00000000

08001320 <irRight>:

uint32_t irRight (void) { //ADC2
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
	adc2 = 0;
 8001326:	4b34      	ldr	r3, [pc, #208]	; (80013f8 <irRight+0xd8>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
	float V = 0;
 800132c:	f04f 0300 	mov.w	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
	HAL_ADC_Start(&hadc2);
 8001332:	4832      	ldr	r0, [pc, #200]	; (80013fc <irRight+0xdc>)
 8001334:	f002 fce6 	bl	8003d04 <HAL_ADC_Start>
	adc2 = HAL_ADC_GetValue(&hadc2);
 8001338:	4830      	ldr	r0, [pc, #192]	; (80013fc <irRight+0xdc>)
 800133a:	f002 fdb5 	bl	8003ea8 <HAL_ADC_GetValue>
 800133e:	4603      	mov	r3, r0
 8001340:	4a2d      	ldr	r2, [pc, #180]	; (80013f8 <irRight+0xd8>)
 8001342:	6013      	str	r3, [r2, #0]
	V = (float)adc2/1000;
 8001344:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <irRight+0xd8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	ee07 3a90 	vmov	s15, r3
 800134c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001350:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8001400 <irRight+0xe0>
 8001354:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001358:	edc7 7a01 	vstr	s15, [r7, #4]

	if (V <= 0.42) V = 0.44; //cap at 80 cm
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff f8f3 	bl	8000548 <__aeabi_f2d>
 8001362:	a31d      	add	r3, pc, #116	; (adr r3, 80013d8 <irRight+0xb8>)
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	f7ff fbc2 	bl	8000af0 <__aeabi_dcmple>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <irRight+0x58>
 8001372:	4b24      	ldr	r3, [pc, #144]	; (8001404 <irRight+0xe4>)
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	e00c      	b.n	8001392 <irRight+0x72>
	else if (V >= 2.9) V = 2.95; //cap at 10 cm
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff f8e5 	bl	8000548 <__aeabi_f2d>
 800137e:	a318      	add	r3, pc, #96	; (adr r3, 80013e0 <irRight+0xc0>)
 8001380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001384:	f7ff fbbe 	bl	8000b04 <__aeabi_dcmpge>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <irRight+0x72>
 800138e:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <irRight+0xe8>)
 8001390:	607b      	str	r3, [r7, #4]


	ir2Dist = 32.6167 * pow(V, -1.0928);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff f8d8 	bl	8000548 <__aeabi_f2d>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	ed9f 1b12 	vldr	d1, [pc, #72]	; 80013e8 <irRight+0xc8>
 80013a0:	ec43 2b10 	vmov	d0, r2, r3
 80013a4:	f00a fad4 	bl	800b950 <pow>
 80013a8:	ec51 0b10 	vmov	r0, r1, d0
 80013ac:	a310      	add	r3, pc, #64	; (adr r3, 80013f0 <irRight+0xd0>)
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	f7ff f921 	bl	80005f8 <__aeabi_dmul>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	f7ff fbcb 	bl	8000b58 <__aeabi_d2uiz>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4a11      	ldr	r2, [pc, #68]	; (800140c <irRight+0xec>)
 80013c6:	6013      	str	r3, [r2, #0]
	return ir2Dist;
 80013c8:	4b10      	ldr	r3, [pc, #64]	; (800140c <irRight+0xec>)
 80013ca:	681b      	ldr	r3, [r3, #0]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	f3af 8000 	nop.w
 80013d8:	ae147ae1 	.word	0xae147ae1
 80013dc:	3fdae147 	.word	0x3fdae147
 80013e0:	33333333 	.word	0x33333333
 80013e4:	40073333 	.word	0x40073333
 80013e8:	da5119ce 	.word	0xda5119ce
 80013ec:	bff17c1b 	.word	0xbff17c1b
 80013f0:	068db8bb 	.word	0x068db8bb
 80013f4:	40404ef0 	.word	0x40404ef0
 80013f8:	20004c98 	.word	0x20004c98
 80013fc:	20004ae0 	.word	0x20004ae0
 8001400:	447a0000 	.word	0x447a0000
 8001404:	3ee147ae 	.word	0x3ee147ae
 8001408:	403ccccd 	.word	0x403ccccd
 800140c:	200000c8 	.word	0x200000c8

08001410 <waitCmd>:

void waitCmd (void) {	//not complete
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit_IT(&huart3,(uint8_t *)"OK",2);
	while (*aRxBuffer == 'Z') {
 8001414:	e007      	b.n	8001426 <waitCmd+0x16>
		//HAL_UART_Transmit_IT(&huart3,(uint8_t *)"OK",2);
		HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 1);
 8001416:	2201      	movs	r2, #1
 8001418:	4906      	ldr	r1, [pc, #24]	; (8001434 <waitCmd+0x24>)
 800141a:	4807      	ldr	r0, [pc, #28]	; (8001438 <waitCmd+0x28>)
 800141c:	f005 ff98 	bl	8007350 <HAL_UART_Receive_IT>
		HAL_Delay(100);
 8001420:	2064      	movs	r0, #100	; 0x64
 8001422:	f002 fc07 	bl	8003c34 <HAL_Delay>
	while (*aRxBuffer == 'Z') {
 8001426:	4b03      	ldr	r3, [pc, #12]	; (8001434 <waitCmd+0x24>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b5a      	cmp	r3, #90	; 0x5a
 800142c:	d0f3      	beq.n	8001416 <waitCmd+0x6>
	}
}
 800142e:	bf00      	nop
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20004c9c 	.word	0x20004c9c
 8001438:	20004a98 	.word	0x20004a98

0800143c <preCorr>:
		}
	}

}

void preCorr(){
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
		while(uDistFinal>15 && uDistFinal<40){
 8001440:	e01f      	b.n	8001482 <preCorr+0x46>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	2108      	movs	r1, #8
 8001446:	4818      	ldr	r0, [pc, #96]	; (80014a8 <preCorr+0x6c>)
 8001448:	f003 fa9a 	bl	8004980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	2104      	movs	r1, #4
 8001450:	4815      	ldr	r0, [pc, #84]	; (80014a8 <preCorr+0x6c>)
 8001452:	f003 fa95 	bl	8004980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8001456:	2201      	movs	r2, #1
 8001458:	2110      	movs	r1, #16
 800145a:	4813      	ldr	r0, [pc, #76]	; (80014a8 <preCorr+0x6c>)
 800145c:	f003 fa90 	bl	8004980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	2120      	movs	r1, #32
 8001464:	4810      	ldr	r0, [pc, #64]	; (80014a8 <preCorr+0x6c>)
 8001466:	f003 fa8b 	bl	8004980 <HAL_GPIO_WritePin>
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 600);
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <preCorr+0x70>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001472:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 600);
 8001474:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <preCorr+0x70>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f44f 7216 	mov.w	r2, #600	; 0x258
 800147c:	639a      	str	r2, [r3, #56]	; 0x38
			ultraDistCheck();
 800147e:	f7ff fe93 	bl	80011a8 <ultraDistCheck>
		while(uDistFinal>15 && uDistFinal<40){
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <preCorr+0x74>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b0f      	cmp	r3, #15
 8001488:	dd03      	ble.n	8001492 <preCorr+0x56>
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <preCorr+0x74>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b27      	cmp	r3, #39	; 0x27
 8001490:	ddd7      	ble.n	8001442 <preCorr+0x6>
		}
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <preCorr+0x70>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2200      	movs	r2, #0
 8001498:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <preCorr+0x70>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2200      	movs	r2, #0
 80014a0:	639a      	str	r2, [r3, #56]	; 0x38

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40020000 	.word	0x40020000
 80014ac:	20004a08 	.word	0x20004a08
 80014b0:	200000c0 	.word	0x200000c0

080014b4 <corrMotor>:

void corrMotor(int mode){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	if(mode==1){
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d131      	bne.n	8001526 <corrMotor+0x72>
		while(uDistFinal>22 || uDistFinal>40){
 80014c2:	e01f      	b.n	8001504 <corrMotor+0x50>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	2108      	movs	r1, #8
 80014c8:	4831      	ldr	r0, [pc, #196]	; (8001590 <corrMotor+0xdc>)
 80014ca:	f003 fa59 	bl	8004980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2104      	movs	r1, #4
 80014d2:	482f      	ldr	r0, [pc, #188]	; (8001590 <corrMotor+0xdc>)
 80014d4:	f003 fa54 	bl	8004980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80014d8:	2201      	movs	r2, #1
 80014da:	2110      	movs	r1, #16
 80014dc:	482c      	ldr	r0, [pc, #176]	; (8001590 <corrMotor+0xdc>)
 80014de:	f003 fa4f 	bl	8004980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2120      	movs	r1, #32
 80014e6:	482a      	ldr	r0, [pc, #168]	; (8001590 <corrMotor+0xdc>)
 80014e8:	f003 fa4a 	bl	8004980 <HAL_GPIO_WritePin>
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 600);
 80014ec:	4b29      	ldr	r3, [pc, #164]	; (8001594 <corrMotor+0xe0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80014f4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 600);
 80014f6:	4b27      	ldr	r3, [pc, #156]	; (8001594 <corrMotor+0xe0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f44f 7216 	mov.w	r2, #600	; 0x258
 80014fe:	639a      	str	r2, [r3, #56]	; 0x38
			ultraDistCheck();
 8001500:	f7ff fe52 	bl	80011a8 <ultraDistCheck>
		while(uDistFinal>22 || uDistFinal>40){
 8001504:	4b24      	ldr	r3, [pc, #144]	; (8001598 <corrMotor+0xe4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b16      	cmp	r3, #22
 800150a:	dcdb      	bgt.n	80014c4 <corrMotor+0x10>
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <corrMotor+0xe4>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b28      	cmp	r3, #40	; 0x28
 8001512:	dcd7      	bgt.n	80014c4 <corrMotor+0x10>

		}
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001514:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <corrMotor+0xe0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2200      	movs	r2, #0
 800151a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 800151c:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <corrMotor+0xe0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2200      	movs	r2, #0
 8001522:	639a      	str	r2, [r3, #56]	; 0x38
			ultraDistCheck();
		}
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
	}
}
 8001524:	e02f      	b.n	8001586 <corrMotor+0xd2>
	else if(mode==2){
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d12c      	bne.n	8001586 <corrMotor+0xd2>
		while(uDistFinal<24){
 800152c:	e01f      	b.n	800156e <corrMotor+0xba>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	2108      	movs	r1, #8
 8001532:	4817      	ldr	r0, [pc, #92]	; (8001590 <corrMotor+0xdc>)
 8001534:	f003 fa24 	bl	8004980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001538:	2201      	movs	r2, #1
 800153a:	2104      	movs	r1, #4
 800153c:	4814      	ldr	r0, [pc, #80]	; (8001590 <corrMotor+0xdc>)
 800153e:	f003 fa1f 	bl	8004980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2110      	movs	r1, #16
 8001546:	4812      	ldr	r0, [pc, #72]	; (8001590 <corrMotor+0xdc>)
 8001548:	f003 fa1a 	bl	8004980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 800154c:	2201      	movs	r2, #1
 800154e:	2120      	movs	r1, #32
 8001550:	480f      	ldr	r0, [pc, #60]	; (8001590 <corrMotor+0xdc>)
 8001552:	f003 fa15 	bl	8004980 <HAL_GPIO_WritePin>
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 600);
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <corrMotor+0xe0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800155e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 600);
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <corrMotor+0xe0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001568:	639a      	str	r2, [r3, #56]	; 0x38
			ultraDistCheck();
 800156a:	f7ff fe1d 	bl	80011a8 <ultraDistCheck>
		while(uDistFinal<24){
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <corrMotor+0xe4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b17      	cmp	r3, #23
 8001574:	dddb      	ble.n	800152e <corrMotor+0x7a>
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <corrMotor+0xe0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2200      	movs	r2, #0
 800157c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 800157e:	4b05      	ldr	r3, [pc, #20]	; (8001594 <corrMotor+0xe0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2200      	movs	r2, #0
 8001584:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40020000 	.word	0x40020000
 8001594:	20004a08 	.word	0x20004a08
 8001598:	200000c0 	.word	0x200000c0
 800159c:	00000000 	.word	0x00000000

080015a0 <correction>:

void correction(){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
	*aRxBuffer = 'Z';
 80015a6:	4b92      	ldr	r3, [pc, #584]	; (80017f0 <correction+0x250>)
 80015a8:	225a      	movs	r2, #90	; 0x5a
 80015aa:	701a      	strb	r2, [r3, #0]
	irLeft();
 80015ac:	f7ff fe44 	bl	8001238 <irLeft>
	irRight();
 80015b0:	f7ff feb6 	bl	8001320 <irRight>
	ultraDistCheck();
 80015b4:	f7ff fdf8 	bl	80011a8 <ultraDistCheck>
	if(uDistFinal>40){
 80015b8:	4b8e      	ldr	r3, [pc, #568]	; (80017f4 <correction+0x254>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b28      	cmp	r3, #40	; 0x28
 80015be:	dd1c      	ble.n	80015fa <correction+0x5a>
		while(irLeft()<=35 && irRight()<=35){
 80015c0:	e009      	b.n	80015d6 <correction+0x36>
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 600);
 80015c2:	4b8d      	ldr	r3, [pc, #564]	; (80017f8 <correction+0x258>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f44f 7216 	mov.w	r2, #600	; 0x258
 80015ca:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 600);
 80015cc:	4b8a      	ldr	r3, [pc, #552]	; (80017f8 <correction+0x258>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80015d4:	639a      	str	r2, [r3, #56]	; 0x38
		while(irLeft()<=35 && irRight()<=35){
 80015d6:	f7ff fe2f 	bl	8001238 <irLeft>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b23      	cmp	r3, #35	; 0x23
 80015de:	d804      	bhi.n	80015ea <correction+0x4a>
 80015e0:	f7ff fe9e 	bl	8001320 <irRight>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b23      	cmp	r3, #35	; 0x23
 80015e8:	d9eb      	bls.n	80015c2 <correction+0x22>
		}
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80015ea:	4b83      	ldr	r3, [pc, #524]	; (80017f8 <correction+0x258>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2200      	movs	r2, #0
 80015f0:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 80015f2:	4b81      	ldr	r3, [pc, #516]	; (80017f8 <correction+0x258>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2200      	movs	r2, #0
 80015f8:	639a      	str	r2, [r3, #56]	; 0x38
	}
	int mode = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
	if(irLeft()<=35 || irRight()<=35){
 80015fe:	f7ff fe1b 	bl	8001238 <irLeft>
 8001602:	4603      	mov	r3, r0
 8001604:	2b23      	cmp	r3, #35	; 0x23
 8001606:	d904      	bls.n	8001612 <correction+0x72>
 8001608:	f7ff fe8a 	bl	8001320 <irRight>
 800160c:	4603      	mov	r3, r0
 800160e:	2b23      	cmp	r3, #35	; 0x23
 8001610:	d808      	bhi.n	8001624 <correction+0x84>
		if(irLeft<irRight)mode =1;
 8001612:	4a7a      	ldr	r2, [pc, #488]	; (80017fc <correction+0x25c>)
 8001614:	4b7a      	ldr	r3, [pc, #488]	; (8001800 <correction+0x260>)
 8001616:	429a      	cmp	r2, r3
 8001618:	d202      	bcs.n	8001620 <correction+0x80>
 800161a:	2301      	movs	r3, #1
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	e001      	b.n	8001624 <correction+0x84>
		else mode=2;
 8001620:	2302      	movs	r3, #2
 8001622:	607b      	str	r3, [r7, #4]
	}
	if(mode==1){
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d15b      	bne.n	80016e2 <correction+0x142>
		preCorr();
 800162a:	f7ff ff07 	bl	800143c <preCorr>
		while(irLeft()<=35){
 800162e:	e04e      	b.n	80016ce <correction+0x12e>
			htim1.Instance->CCR4 = 104;
 8001630:	4b74      	ldr	r3, [pc, #464]	; (8001804 <correction+0x264>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2268      	movs	r2, #104	; 0x68
 8001636:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 8001638:	2064      	movs	r0, #100	; 0x64
 800163a:	f002 fafb 	bl	8003c34 <HAL_Delay>
			motorCont(1000, 1000, 'R', 'R', 1);
 800163e:	ed9f 0b68 	vldr	d0, [pc, #416]	; 80017e0 <correction+0x240>
 8001642:	2352      	movs	r3, #82	; 0x52
 8001644:	2252      	movs	r2, #82	; 0x52
 8001646:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800164a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800164e:	f000 fad3 	bl	8001bf8 <motorCont>
			htim1.Instance->CCR4 = 56;
 8001652:	4b6c      	ldr	r3, [pc, #432]	; (8001804 <correction+0x264>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2238      	movs	r2, #56	; 0x38
 8001658:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 800165a:	2064      	movs	r0, #100	; 0x64
 800165c:	f002 faea 	bl	8003c34 <HAL_Delay>
			motorCont(1000, 1000, 'F', 'F', 1);
 8001660:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 80017e0 <correction+0x240>
 8001664:	2346      	movs	r3, #70	; 0x46
 8001666:	2246      	movs	r2, #70	; 0x46
 8001668:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800166c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001670:	f000 fac2 	bl	8001bf8 <motorCont>
			irLeft();
 8001674:	f7ff fde0 	bl	8001238 <irLeft>
			htim1.Instance->CCR4 = 76;
 8001678:	4b62      	ldr	r3, [pc, #392]	; (8001804 <correction+0x264>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	224c      	movs	r2, #76	; 0x4c
 800167e:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(50);
 8001680:	2032      	movs	r0, #50	; 0x32
 8001682:	f002 fad7 	bl	8003c34 <HAL_Delay>
			ultraDistCheck();
 8001686:	f7ff fd8f 	bl	80011a8 <ultraDistCheck>
			if(uDistFinal<15){
 800168a:	4b5a      	ldr	r3, [pc, #360]	; (80017f4 <correction+0x254>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b0e      	cmp	r3, #14
 8001690:	dc0b      	bgt.n	80016aa <correction+0x10a>
				motorCont(1000, 1000, 'R', 'R', 2);
 8001692:	ed9f 0b55 	vldr	d0, [pc, #340]	; 80017e8 <correction+0x248>
 8001696:	2352      	movs	r3, #82	; 0x52
 8001698:	2252      	movs	r2, #82	; 0x52
 800169a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800169e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016a2:	f000 faa9 	bl	8001bf8 <motorCont>
				ultraDistCheck();
 80016a6:	f7ff fd7f 	bl	80011a8 <ultraDistCheck>
			}
			if(uDistFinal>15 && uDistFinal<40){
 80016aa:	4b52      	ldr	r3, [pc, #328]	; (80017f4 <correction+0x254>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b0f      	cmp	r3, #15
 80016b0:	dd0d      	ble.n	80016ce <correction+0x12e>
 80016b2:	4b50      	ldr	r3, [pc, #320]	; (80017f4 <correction+0x254>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b27      	cmp	r3, #39	; 0x27
 80016b8:	dc09      	bgt.n	80016ce <correction+0x12e>
				motorCont(1000, 1000, 'F', 'F', 2);
 80016ba:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80017e8 <correction+0x248>
 80016be:	2346      	movs	r3, #70	; 0x46
 80016c0:	2246      	movs	r2, #70	; 0x46
 80016c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ca:	f000 fa95 	bl	8001bf8 <motorCont>
		while(irLeft()<=35){
 80016ce:	f7ff fdb3 	bl	8001238 <irLeft>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b23      	cmp	r3, #35	; 0x23
 80016d6:	d9ab      	bls.n	8001630 <correction+0x90>
			}
		}
		htim1.Instance->CCR4 = 76;
 80016d8:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <correction+0x264>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	224c      	movs	r2, #76	; 0x4c
 80016de:	641a      	str	r2, [r3, #64]	; 0x40
 80016e0:	e060      	b.n	80017a4 <correction+0x204>
	}
	else if(mode==2){
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d15d      	bne.n	80017a4 <correction+0x204>
		preCorr();
 80016e8:	f7ff fea8 	bl	800143c <preCorr>
		while(irRight()<=35){
 80016ec:	e04e      	b.n	800178c <correction+0x1ec>
			htim1.Instance->CCR4 =56;
 80016ee:	4b45      	ldr	r3, [pc, #276]	; (8001804 <correction+0x264>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2238      	movs	r2, #56	; 0x38
 80016f4:	641a      	str	r2, [r3, #64]	; 0x40

			HAL_Delay(100);
 80016f6:	2064      	movs	r0, #100	; 0x64
 80016f8:	f002 fa9c 	bl	8003c34 <HAL_Delay>
			motorCont(1000, 1000, 'R', 'R', 1);
 80016fc:	ed9f 0b38 	vldr	d0, [pc, #224]	; 80017e0 <correction+0x240>
 8001700:	2352      	movs	r3, #82	; 0x52
 8001702:	2252      	movs	r2, #82	; 0x52
 8001704:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800170c:	f000 fa74 	bl	8001bf8 <motorCont>
			htim1.Instance->CCR4 = 104;
 8001710:	4b3c      	ldr	r3, [pc, #240]	; (8001804 <correction+0x264>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2268      	movs	r2, #104	; 0x68
 8001716:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 8001718:	2064      	movs	r0, #100	; 0x64
 800171a:	f002 fa8b 	bl	8003c34 <HAL_Delay>
			motorCont(1000, 1000, 'F', 'F', 1);
 800171e:	ed9f 0b30 	vldr	d0, [pc, #192]	; 80017e0 <correction+0x240>
 8001722:	2346      	movs	r3, #70	; 0x46
 8001724:	2246      	movs	r2, #70	; 0x46
 8001726:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800172a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800172e:	f000 fa63 	bl	8001bf8 <motorCont>
			irRight();
 8001732:	f7ff fdf5 	bl	8001320 <irRight>
			htim1.Instance->CCR4 = 73;
 8001736:	4b33      	ldr	r3, [pc, #204]	; (8001804 <correction+0x264>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2249      	movs	r2, #73	; 0x49
 800173c:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(50);
 800173e:	2032      	movs	r0, #50	; 0x32
 8001740:	f002 fa78 	bl	8003c34 <HAL_Delay>
			ultraDistCheck();
 8001744:	f7ff fd30 	bl	80011a8 <ultraDistCheck>
			if(uDistFinal<15){
 8001748:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <correction+0x254>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b0e      	cmp	r3, #14
 800174e:	dc0b      	bgt.n	8001768 <correction+0x1c8>
				motorCont(1000, 1000, 'R', 'R', 2);
 8001750:	ed9f 0b25 	vldr	d0, [pc, #148]	; 80017e8 <correction+0x248>
 8001754:	2352      	movs	r3, #82	; 0x52
 8001756:	2252      	movs	r2, #82	; 0x52
 8001758:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800175c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001760:	f000 fa4a 	bl	8001bf8 <motorCont>
				ultraDistCheck();
 8001764:	f7ff fd20 	bl	80011a8 <ultraDistCheck>
			}
			if(uDistFinal>15 && uDistFinal<40){
 8001768:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <correction+0x254>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b0f      	cmp	r3, #15
 800176e:	dd0d      	ble.n	800178c <correction+0x1ec>
 8001770:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <correction+0x254>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b27      	cmp	r3, #39	; 0x27
 8001776:	dc09      	bgt.n	800178c <correction+0x1ec>
				motorCont(1000, 1000, 'F', 'F', 2);
 8001778:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 80017e8 <correction+0x248>
 800177c:	2346      	movs	r3, #70	; 0x46
 800177e:	2246      	movs	r2, #70	; 0x46
 8001780:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001784:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001788:	f000 fa36 	bl	8001bf8 <motorCont>
		while(irRight()<=35){
 800178c:	f7ff fdc8 	bl	8001320 <irRight>
 8001790:	4603      	mov	r3, r0
 8001792:	2b23      	cmp	r3, #35	; 0x23
 8001794:	d9ab      	bls.n	80016ee <correction+0x14e>
			}
		}
		htim1.Instance->CCR4 = 73;
 8001796:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <correction+0x264>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2249      	movs	r2, #73	; 0x49
 800179c:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(50);
 800179e:	2032      	movs	r0, #50	; 0x32
 80017a0:	f002 fa48 	bl	8003c34 <HAL_Delay>
	}
	HAL_Delay(1000);
 80017a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017a8:	f002 fa44 	bl	8003c34 <HAL_Delay>
	if(uDistFinal>23 && uDistFinal<40){//Forward until 25
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <correction+0x254>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b17      	cmp	r3, #23
 80017b2:	dd07      	ble.n	80017c4 <correction+0x224>
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <correction+0x254>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b27      	cmp	r3, #39	; 0x27
 80017ba:	dc03      	bgt.n	80017c4 <correction+0x224>
		corrMotor(1);
 80017bc:	2001      	movs	r0, #1
 80017be:	f7ff fe79 	bl	80014b4 <corrMotor>
	}
	else if(uDistFinal<23){
		corrMotor(2);
	}
}
 80017c2:	e006      	b.n	80017d2 <correction+0x232>
	else if(uDistFinal<23){
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <correction+0x254>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b16      	cmp	r3, #22
 80017ca:	dc02      	bgt.n	80017d2 <correction+0x232>
		corrMotor(2);
 80017cc:	2002      	movs	r0, #2
 80017ce:	f7ff fe71 	bl	80014b4 <corrMotor>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	f3af 8000 	nop.w
 80017e0:	00000000 	.word	0x00000000
 80017e4:	3ff00000 	.word	0x3ff00000
 80017e8:	00000000 	.word	0x00000000
 80017ec:	40000000 	.word	0x40000000
 80017f0:	20004c9c 	.word	0x20004c9c
 80017f4:	200000c0 	.word	0x200000c0
 80017f8:	20004a08 	.word	0x20004a08
 80017fc:	08001239 	.word	0x08001239
 8001800:	08001321 	.word	0x08001321
 8001804:	20004c50 	.word	0x20004c50

08001808 <motorSpeed>:


void motorSpeed(float left, float right){
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001812:	edc7 0a00 	vstr	s1, [r7]
	if(left<0){
 8001816:	edd7 7a01 	vldr	s15, [r7, #4]
 800181a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800181e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001822:	d510      	bpl.n	8001846 <motorSpeed+0x3e>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	2108      	movs	r1, #8
 8001828:	482f      	ldr	r0, [pc, #188]	; (80018e8 <motorSpeed+0xe0>)
 800182a:	f003 f8a9 	bl	8004980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800182e:	2201      	movs	r2, #1
 8001830:	2104      	movs	r1, #4
 8001832:	482d      	ldr	r0, [pc, #180]	; (80018e8 <motorSpeed+0xe0>)
 8001834:	f003 f8a4 	bl	8004980 <HAL_GPIO_WritePin>
		left = fabs(left);
 8001838:	edd7 7a01 	vldr	s15, [r7, #4]
 800183c:	eef0 7ae7 	vabs.f32	s15, s15
 8001840:	edc7 7a01 	vstr	s15, [r7, #4]
 8001844:	e010      	b.n	8001868 <motorSpeed+0x60>
	}
	else if(left>0){
 8001846:	edd7 7a01 	vldr	s15, [r7, #4]
 800184a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001852:	dd09      	ble.n	8001868 <motorSpeed+0x60>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001854:	2201      	movs	r2, #1
 8001856:	2108      	movs	r1, #8
 8001858:	4823      	ldr	r0, [pc, #140]	; (80018e8 <motorSpeed+0xe0>)
 800185a:	f003 f891 	bl	8004980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	2104      	movs	r1, #4
 8001862:	4821      	ldr	r0, [pc, #132]	; (80018e8 <motorSpeed+0xe0>)
 8001864:	f003 f88c 	bl	8004980 <HAL_GPIO_WritePin>
	}
	if(right<0){
 8001868:	edd7 7a00 	vldr	s15, [r7]
 800186c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001874:	d510      	bpl.n	8001898 <motorSpeed+0x90>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	2110      	movs	r1, #16
 800187a:	481b      	ldr	r0, [pc, #108]	; (80018e8 <motorSpeed+0xe0>)
 800187c:	f003 f880 	bl	8004980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001880:	2201      	movs	r2, #1
 8001882:	2120      	movs	r1, #32
 8001884:	4818      	ldr	r0, [pc, #96]	; (80018e8 <motorSpeed+0xe0>)
 8001886:	f003 f87b 	bl	8004980 <HAL_GPIO_WritePin>
		right = fabs(right);
 800188a:	edd7 7a00 	vldr	s15, [r7]
 800188e:	eef0 7ae7 	vabs.f32	s15, s15
 8001892:	edc7 7a00 	vstr	s15, [r7]
 8001896:	e010      	b.n	80018ba <motorSpeed+0xb2>
	}
	else if(right>0){
 8001898:	edd7 7a00 	vldr	s15, [r7]
 800189c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a4:	dd09      	ble.n	80018ba <motorSpeed+0xb2>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80018a6:	2201      	movs	r2, #1
 80018a8:	2110      	movs	r1, #16
 80018aa:	480f      	ldr	r0, [pc, #60]	; (80018e8 <motorSpeed+0xe0>)
 80018ac:	f003 f868 	bl	8004980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2120      	movs	r1, #32
 80018b4:	480c      	ldr	r0, [pc, #48]	; (80018e8 <motorSpeed+0xe0>)
 80018b6:	f003 f863 	bl	8004980 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, left);
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <motorSpeed+0xe4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	edd7 7a01 	vldr	s15, [r7, #4]
 80018c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018c6:	ee17 2a90 	vmov	r2, s15
 80018ca:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, right);
 80018cc:	4b07      	ldr	r3, [pc, #28]	; (80018ec <motorSpeed+0xe4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	edd7 7a00 	vldr	s15, [r7]
 80018d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018d8:	ee17 2a90 	vmov	r2, s15
 80018dc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40020000 	.word	0x40020000
 80018ec:	20004a08 	.word	0x20004a08

080018f0 <readEncoder>:

void readEncoder(){
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 80018f4:	4b33      	ldr	r3, [pc, #204]	; (80019c4 <readEncoder+0xd4>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0310 	and.w	r3, r3, #16
 80018fe:	2b10      	cmp	r3, #16
 8001900:	d115      	bne.n	800192e <readEncoder+0x3e>
		currentLeft = __HAL_TIM_GET_COUNTER(&htim2);
 8001902:	4b30      	ldr	r3, [pc, #192]	; (80019c4 <readEncoder+0xd4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	b21a      	sxth	r2, r3
 800190a:	4b2f      	ldr	r3, [pc, #188]	; (80019c8 <readEncoder+0xd8>)
 800190c:	801a      	strh	r2, [r3, #0]
		fLeft = currentLeft *-1*CMPERREV;
 800190e:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <readEncoder+0xd8>)
 8001910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001914:	425b      	negs	r3, r3
 8001916:	ee07 3a90 	vmov	s15, r3
 800191a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800191e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80019cc <readEncoder+0xdc>
 8001922:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001926:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <readEncoder+0xe0>)
 8001928:	edc3 7a00 	vstr	s15, [r3]
 800192c:	e013      	b.n	8001956 <readEncoder+0x66>
	}
	else{
		currentLeft = __HAL_TIM_GET_COUNTER(&htim2);
 800192e:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <readEncoder+0xd4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	b21a      	sxth	r2, r3
 8001936:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <readEncoder+0xd8>)
 8001938:	801a      	strh	r2, [r3, #0]
		fLeft = currentLeft *CMPERREV;
 800193a:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <readEncoder+0xd8>)
 800193c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001948:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80019cc <readEncoder+0xdc>
 800194c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001950:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <readEncoder+0xe0>)
 8001952:	edc3 7a00 	vstr	s15, [r3]
	}
	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)){
 8001956:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <readEncoder+0xe4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0310 	and.w	r3, r3, #16
 8001960:	2b10      	cmp	r3, #16
 8001962:	d114      	bne.n	800198e <readEncoder+0x9e>
		currentRight = __HAL_TIM_GET_COUNTER(&htim3);
 8001964:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <readEncoder+0xe4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	b21a      	sxth	r2, r3
 800196c:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <readEncoder+0xe8>)
 800196e:	801a      	strh	r2, [r3, #0]
		fRight = currentRight * CMPERREV;
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <readEncoder+0xe8>)
 8001972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001976:	ee07 3a90 	vmov	s15, r3
 800197a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800197e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80019cc <readEncoder+0xdc>
 8001982:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <readEncoder+0xec>)
 8001988:	edc3 7a00 	vstr	s15, [r3]
	}
	else{
		currentRight = __HAL_TIM_GET_COUNTER(&htim2);
		fRight = currentRight * -1 *CMPERREV;
	}
}
 800198c:	e014      	b.n	80019b8 <readEncoder+0xc8>
		currentRight = __HAL_TIM_GET_COUNTER(&htim2);
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <readEncoder+0xd4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	b21a      	sxth	r2, r3
 8001996:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <readEncoder+0xe8>)
 8001998:	801a      	strh	r2, [r3, #0]
		fRight = currentRight * -1 *CMPERREV;
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <readEncoder+0xe8>)
 800199c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a0:	425b      	negs	r3, r3
 80019a2:	ee07 3a90 	vmov	s15, r3
 80019a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019aa:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80019cc <readEncoder+0xdc>
 80019ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <readEncoder+0xec>)
 80019b4:	edc3 7a00 	vstr	s15, [r3]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20004ca0 	.word	0x20004ca0
 80019c8:	20004b2c 	.word	0x20004b2c
 80019cc:	3c888889 	.word	0x3c888889
 80019d0:	20004ce8 	.word	0x20004ce8
 80019d4:	20004b98 	.word	0x20004b98
 80019d8:	20004c4c 	.word	0x20004c4c
 80019dc:	20004b94 	.word	0x20004b94

080019e0 <getTime>:

float getTime(){
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)/1000000;
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <getTime+0x28>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	4a08      	ldr	r2, [pc, #32]	; (8001a0c <getTime+0x2c>)
 80019ec:	fba2 2303 	umull	r2, r3, r2, r3
 80019f0:	0c9b      	lsrs	r3, r3, #18
 80019f2:	ee07 3a90 	vmov	s15, r3
 80019f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80019fa:	eeb0 0a67 	vmov.f32	s0, s15
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20004b4c 	.word	0x20004b4c
 8001a0c:	431bde83 	.word	0x431bde83

08001a10 <timeStart>:

void timeStart(){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	startSec = getTime();
 8001a14:	f7ff ffe4 	bl	80019e0 <getTime>
 8001a18:	eef0 7a40 	vmov.f32	s15, s0
 8001a1c:	4b02      	ldr	r3, [pc, #8]	; (8001a28 <timeStart+0x18>)
 8001a1e:	edc3 7a00 	vstr	s15, [r3]
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20004a04 	.word	0x20004a04

08001a2c <timeNow>:

float timeNow(){
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	currSec = getTime() - startSec;
 8001a30:	f7ff ffd6 	bl	80019e0 <getTime>
 8001a34:	eeb0 7a40 	vmov.f32	s14, s0
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <timeNow+0x24>)
 8001a3a:	edd3 7a00 	vldr	s15, [r3]
 8001a3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <timeNow+0x28>)
 8001a44:	edc3 7a00 	vstr	s15, [r3]
}
 8001a48:	bf00      	nop
 8001a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20004a04 	.word	0x20004a04
 8001a54:	20004adc 	.word	0x20004adc

08001a58 <PIDmotor>:

//Master function for motor with PID control
void PIDmotor(float setDist, int time){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b09e      	sub	sp, #120	; 0x78
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a62:	6038      	str	r0, [r7, #0]
	/* Set UARTBuffer to default value */
	*aRxBuffer = 'Z';
 8001a64:	4b51      	ldr	r3, [pc, #324]	; (8001bac <PIDmotor+0x154>)
 8001a66:	225a      	movs	r2, #90	; 0x5a
 8001a68:	701a      	strb	r2, [r3, #0]
	velocityLeft=velocityRight = setDist/time;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	ee07 3a90 	vmov	s15, r3
 8001a70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a74:	edd7 6a01 	vldr	s13, [r7, #4]
 8001a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a7c:	4b4c      	ldr	r3, [pc, #304]	; (8001bb0 <PIDmotor+0x158>)
 8001a7e:	edc3 7a00 	vstr	s15, [r3]
 8001a82:	4b4b      	ldr	r3, [pc, #300]	; (8001bb0 <PIDmotor+0x158>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a4b      	ldr	r2, [pc, #300]	; (8001bb4 <PIDmotor+0x15c>)
 8001a88:	6013      	str	r3, [r2, #0]

	/* Initialise PID Controllers */
	PIDController pidLeft = {PID_KP,PID_KI,PID_KD,0,-3000,3000,-1000,1000,1.0f};
 8001a8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a8e:	2238      	movs	r2, #56	; 0x38
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f009 fb34 	bl	800b100 <memset>
 8001a98:	4b47      	ldr	r3, [pc, #284]	; (8001bb8 <PIDmotor+0x160>)
 8001a9a:	643b      	str	r3, [r7, #64]	; 0x40
 8001a9c:	4b47      	ldr	r3, [pc, #284]	; (8001bbc <PIDmotor+0x164>)
 8001a9e:	653b      	str	r3, [r7, #80]	; 0x50
 8001aa0:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <PIDmotor+0x168>)
 8001aa2:	657b      	str	r3, [r7, #84]	; 0x54
 8001aa4:	4b47      	ldr	r3, [pc, #284]	; (8001bc4 <PIDmotor+0x16c>)
 8001aa6:	65bb      	str	r3, [r7, #88]	; 0x58
 8001aa8:	4b47      	ldr	r3, [pc, #284]	; (8001bc8 <PIDmotor+0x170>)
 8001aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001aac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ab0:	663b      	str	r3, [r7, #96]	; 0x60
	PIDController pidRight ={PID_KP,PID_KI,PID_KD,0,-3000,3000,-1000,1000,1.0f};
 8001ab2:	f107 0308 	add.w	r3, r7, #8
 8001ab6:	2238      	movs	r2, #56	; 0x38
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f009 fb20 	bl	800b100 <memset>
 8001ac0:	4b3d      	ldr	r3, [pc, #244]	; (8001bb8 <PIDmotor+0x160>)
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	4b3d      	ldr	r3, [pc, #244]	; (8001bbc <PIDmotor+0x164>)
 8001ac6:	61bb      	str	r3, [r7, #24]
 8001ac8:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <PIDmotor+0x168>)
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	4b3d      	ldr	r3, [pc, #244]	; (8001bc4 <PIDmotor+0x16c>)
 8001ace:	623b      	str	r3, [r7, #32]
 8001ad0:	4b3d      	ldr	r3, [pc, #244]	; (8001bc8 <PIDmotor+0x170>)
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28

//	/* Initialise Encoder */
	HAL_TIM_Base_Start(&htim5);
 8001ada:	483c      	ldr	r0, [pc, #240]	; (8001bcc <PIDmotor+0x174>)
 8001adc:	f003 fe32 	bl	8005744 <HAL_TIM_Base_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);		//left encoder(MotorA) start
 8001ae0:	213c      	movs	r1, #60	; 0x3c
 8001ae2:	483b      	ldr	r0, [pc, #236]	; (8001bd0 <PIDmotor+0x178>)
 8001ae4:	f004 f9cc 	bl	8005e80 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		//right encoder(MotorB) start
 8001ae8:	213c      	movs	r1, #60	; 0x3c
 8001aea:	483a      	ldr	r0, [pc, #232]	; (8001bd4 <PIDmotor+0x17c>)
 8001aec:	f004 f9c8 	bl	8005e80 <HAL_TIM_Encoder_Start>

	PIDController_Init(&pidLeft);
 8001af0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff f9cb 	bl	8000e90 <PIDController_Init>
	PIDController_Init(&pidRight);
 8001afa:	f107 0308 	add.w	r3, r7, #8
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff f9c6 	bl	8000e90 <PIDController_Init>
	timeStart();
 8001b04:	f7ff ff84 	bl	8001a10 <timeStart>
	while(1){
		/* Take current encoder values */
		readEncoder();
 8001b08:	f7ff fef2 	bl	80018f0 <readEncoder>
		distanceLeft = velocityLeft*timeNow();
 8001b0c:	f7ff ff8e 	bl	8001a2c <timeNow>
 8001b10:	eeb0 7a40 	vmov.f32	s14, s0
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <PIDmotor+0x15c>)
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b1e:	4b2e      	ldr	r3, [pc, #184]	; (8001bd8 <PIDmotor+0x180>)
 8001b20:	edc3 7a00 	vstr	s15, [r3]
		distanceRight = velocityRight * currSec;
 8001b24:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <PIDmotor+0x158>)
 8001b26:	ed93 7a00 	vldr	s14, [r3]
 8001b2a:	4b2c      	ldr	r3, [pc, #176]	; (8001bdc <PIDmotor+0x184>)
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b34:	4b2a      	ldr	r3, [pc, #168]	; (8001be0 <PIDmotor+0x188>)
 8001b36:	edc3 7a00 	vstr	s15, [r3]

		/* Compute new control signal */
		outLeft = PIDController_Update(&pidLeft, distanceLeft, fLeft);
 8001b3a:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <PIDmotor+0x180>)
 8001b3c:	edd3 7a00 	vldr	s15, [r3]
 8001b40:	4b28      	ldr	r3, [pc, #160]	; (8001be4 <PIDmotor+0x18c>)
 8001b42:	ed93 7a00 	vldr	s14, [r3]
 8001b46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b4a:	eef0 0a47 	vmov.f32	s1, s14
 8001b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff f9ba 	bl	8000ecc <PIDController_Update>
 8001b58:	eef0 7a40 	vmov.f32	s15, s0
 8001b5c:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <PIDmotor+0x190>)
 8001b5e:	edc3 7a00 	vstr	s15, [r3]
		outRight = PIDController_Update(&pidRight, distanceRight, fRight);
 8001b62:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <PIDmotor+0x188>)
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	4b20      	ldr	r3, [pc, #128]	; (8001bec <PIDmotor+0x194>)
 8001b6a:	ed93 7a00 	vldr	s14, [r3]
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	eef0 0a47 	vmov.f32	s1, s14
 8001b76:	eeb0 0a67 	vmov.f32	s0, s15
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff f9a6 	bl	8000ecc <PIDController_Update>
 8001b80:	eef0 7a40 	vmov.f32	s15, s0
 8001b84:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <PIDmotor+0x198>)
 8001b86:	edc3 7a00 	vstr	s15, [r3]

		/* Update new values to motors */
		motorSpeed(outLeft, outRight);
 8001b8a:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <PIDmotor+0x190>)
 8001b8c:	edd3 7a00 	vldr	s15, [r3]
 8001b90:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <PIDmotor+0x198>)
 8001b92:	ed93 7a00 	vldr	s14, [r3]
 8001b96:	eef0 0a47 	vmov.f32	s1, s14
 8001b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b9e:	f7ff fe33 	bl	8001808 <motorSpeed>
		error = pidLeft.prevError;
 8001ba2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ba4:	4a13      	ldr	r2, [pc, #76]	; (8001bf4 <PIDmotor+0x19c>)
 8001ba6:	6013      	str	r3, [r2, #0]
		readEncoder();
 8001ba8:	e7ae      	b.n	8001b08 <PIDmotor+0xb0>
 8001baa:	bf00      	nop
 8001bac:	20004c9c 	.word	0x20004c9c
 8001bb0:	200000dc 	.word	0x200000dc
 8001bb4:	200000d8 	.word	0x200000d8
 8001bb8:	41a00000 	.word	0x41a00000
 8001bbc:	c53b8000 	.word	0xc53b8000
 8001bc0:	453b8000 	.word	0x453b8000
 8001bc4:	c47a0000 	.word	0xc47a0000
 8001bc8:	447a0000 	.word	0x447a0000
 8001bcc:	20004b4c 	.word	0x20004b4c
 8001bd0:	20004ca0 	.word	0x20004ca0
 8001bd4:	20004b98 	.word	0x20004b98
 8001bd8:	200000e0 	.word	0x200000e0
 8001bdc:	20004adc 	.word	0x20004adc
 8001be0:	200000e4 	.word	0x200000e4
 8001be4:	20004ce8 	.word	0x20004ce8
 8001be8:	200000cc 	.word	0x200000cc
 8001bec:	20004b94 	.word	0x20004b94
 8001bf0:	200000d0 	.word	0x200000d0
 8001bf4:	200000d4 	.word	0x200000d4

08001bf8 <motorCont>:
	}

}

//Master function for image recognition motor control
int motorCont(int speedL, int speedR, char dirL, char dirR, double dist){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6178      	str	r0, [r7, #20]
 8001c00:	6139      	str	r1, [r7, #16]
 8001c02:	4611      	mov	r1, r2
 8001c04:	461a      	mov	r2, r3
 8001c06:	ed87 0b00 	vstr	d0, [r7]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	73fb      	strb	r3, [r7, #15]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	73bb      	strb	r3, [r7, #14]
	*aRxBuffer = 'Z';
 8001c12:	4b82      	ldr	r3, [pc, #520]	; (8001e1c <motorCont+0x224>)
 8001c14:	225a      	movs	r2, #90	; 0x5a
 8001c16:	701a      	strb	r2, [r3, #0]
	//declaration
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);		//left encoder(MotorA) start
 8001c18:	213c      	movs	r1, #60	; 0x3c
 8001c1a:	4881      	ldr	r0, [pc, #516]	; (8001e20 <motorCont+0x228>)
 8001c1c:	f004 f930 	bl	8005e80 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		//right encoder(MotorB) start
 8001c20:	213c      	movs	r1, #60	; 0x3c
 8001c22:	4880      	ldr	r0, [pc, #512]	; (8001e24 <motorCont+0x22c>)
 8001c24:	f004 f92c 	bl	8005e80 <HAL_TIM_Encoder_Start>
	currentLeft = __HAL_TIM_GET_COUNTER(&htim2);
 8001c28:	4b7d      	ldr	r3, [pc, #500]	; (8001e20 <motorCont+0x228>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	b21a      	sxth	r2, r3
 8001c30:	4b7d      	ldr	r3, [pc, #500]	; (8001e28 <motorCont+0x230>)
 8001c32:	801a      	strh	r2, [r3, #0]
	currentRight = __HAL_TIM_GET_COUNTER(&htim3);
 8001c34:	4b7b      	ldr	r3, [pc, #492]	; (8001e24 <motorCont+0x22c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	b21a      	sxth	r2, r3
 8001c3c:	4b7b      	ldr	r3, [pc, #492]	; (8001e2c <motorCont+0x234>)
 8001c3e:	801a      	strh	r2, [r3, #0]
	tick = HAL_GetTick();
 8001c40:	f001 ffec 	bl	8003c1c <HAL_GetTick>
 8001c44:	4603      	mov	r3, r0
 8001c46:	461a      	mov	r2, r3
 8001c48:	4b79      	ldr	r3, [pc, #484]	; (8001e30 <motorCont+0x238>)
 8001c4a:	601a      	str	r2, [r3, #0]
	double encDist = dist * 72;
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	4b78      	ldr	r3, [pc, #480]	; (8001e34 <motorCont+0x23c>)
 8001c52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c56:	f7fe fccf 	bl	80005f8 <__aeabi_dmul>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	//Select direction of motor//
	switch(dirL){
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	2b46      	cmp	r3, #70	; 0x46
 8001c66:	d002      	beq.n	8001c6e <motorCont+0x76>
 8001c68:	2b52      	cmp	r3, #82	; 0x52
 8001c6a:	d00b      	beq.n	8001c84 <motorCont+0x8c>
 8001c6c:	e015      	b.n	8001c9a <motorCont+0xa2>
		case 'F':
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001c6e:	2201      	movs	r2, #1
 8001c70:	2108      	movs	r1, #8
 8001c72:	4871      	ldr	r0, [pc, #452]	; (8001e38 <motorCont+0x240>)
 8001c74:	f002 fe84 	bl	8004980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2104      	movs	r1, #4
 8001c7c:	486e      	ldr	r0, [pc, #440]	; (8001e38 <motorCont+0x240>)
 8001c7e:	f002 fe7f 	bl	8004980 <HAL_GPIO_WritePin>
			break;
 8001c82:	e00a      	b.n	8001c9a <motorCont+0xa2>

		case 'R':
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2108      	movs	r1, #8
 8001c88:	486b      	ldr	r0, [pc, #428]	; (8001e38 <motorCont+0x240>)
 8001c8a:	f002 fe79 	bl	8004980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001c8e:	2201      	movs	r2, #1
 8001c90:	2104      	movs	r1, #4
 8001c92:	4869      	ldr	r0, [pc, #420]	; (8001e38 <motorCont+0x240>)
 8001c94:	f002 fe74 	bl	8004980 <HAL_GPIO_WritePin>
			break;
 8001c98:	bf00      	nop
	}

	switch(dirR){
 8001c9a:	7bbb      	ldrb	r3, [r7, #14]
 8001c9c:	2b46      	cmp	r3, #70	; 0x46
 8001c9e:	d002      	beq.n	8001ca6 <motorCont+0xae>
 8001ca0:	2b52      	cmp	r3, #82	; 0x52
 8001ca2:	d00b      	beq.n	8001cbc <motorCont+0xc4>
 8001ca4:	e015      	b.n	8001cd2 <motorCont+0xda>
		case 'F':
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	2110      	movs	r1, #16
 8001caa:	4863      	ldr	r0, [pc, #396]	; (8001e38 <motorCont+0x240>)
 8001cac:	f002 fe68 	bl	8004980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2120      	movs	r1, #32
 8001cb4:	4860      	ldr	r0, [pc, #384]	; (8001e38 <motorCont+0x240>)
 8001cb6:	f002 fe63 	bl	8004980 <HAL_GPIO_WritePin>
			break;
 8001cba:	e00a      	b.n	8001cd2 <motorCont+0xda>

		case 'R':
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2110      	movs	r1, #16
 8001cc0:	485d      	ldr	r0, [pc, #372]	; (8001e38 <motorCont+0x240>)
 8001cc2:	f002 fe5d 	bl	8004980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	2120      	movs	r1, #32
 8001cca:	485b      	ldr	r0, [pc, #364]	; (8001e38 <motorCont+0x240>)
 8001ccc:	f002 fe58 	bl	8004980 <HAL_GPIO_WritePin>
			break;
 8001cd0:	bf00      	nop
	}
	//End of motor direction selection//

	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, speedL);
 8001cd2:	4b5a      	ldr	r3, [pc, #360]	; (8001e3c <motorCont+0x244>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, speedR);
 8001cda:	4b58      	ldr	r3, [pc, #352]	; (8001e3c <motorCont+0x244>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	639a      	str	r2, [r3, #56]	; 0x38


	while(1){
			currentLeft = __HAL_TIM_GET_COUNTER(&htim2);
 8001ce2:	4b4f      	ldr	r3, [pc, #316]	; (8001e20 <motorCont+0x228>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	b21a      	sxth	r2, r3
 8001cea:	4b4f      	ldr	r3, [pc, #316]	; (8001e28 <motorCont+0x230>)
 8001cec:	801a      	strh	r2, [r3, #0]
			currentRight = __HAL_TIM_GET_COUNTER(&htim3);
 8001cee:	4b4d      	ldr	r3, [pc, #308]	; (8001e24 <motorCont+0x22c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	b21a      	sxth	r2, r3
 8001cf6:	4b4d      	ldr	r3, [pc, #308]	; (8001e2c <motorCont+0x234>)
 8001cf8:	801a      	strh	r2, [r3, #0]
			diffl = abs(currentLeft);
 8001cfa:	4b4b      	ldr	r3, [pc, #300]	; (8001e28 <motorCont+0x230>)
 8001cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bfb8      	it	lt
 8001d04:	425b      	neglt	r3, r3
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	b21a      	sxth	r2, r3
 8001d0a:	4b4d      	ldr	r3, [pc, #308]	; (8001e40 <motorCont+0x248>)
 8001d0c:	801a      	strh	r2, [r3, #0]
			diffr =abs(currentRight);
 8001d0e:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <motorCont+0x234>)
 8001d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	bfb8      	it	lt
 8001d18:	425b      	neglt	r3, r3
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	b21a      	sxth	r2, r3
 8001d1e:	4b49      	ldr	r3, [pc, #292]	; (8001e44 <motorCont+0x24c>)
 8001d20:	801a      	strh	r2, [r3, #0]
			avg = abs((diffl+diffr)/2);
 8001d22:	4b47      	ldr	r3, [pc, #284]	; (8001e40 <motorCont+0x248>)
 8001d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b46      	ldr	r3, [pc, #280]	; (8001e44 <motorCont+0x24c>)
 8001d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d30:	4413      	add	r3, r2
 8001d32:	0fda      	lsrs	r2, r3, #31
 8001d34:	4413      	add	r3, r2
 8001d36:	105b      	asrs	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bfb8      	it	lt
 8001d3c:	425b      	neglt	r3, r3
 8001d3e:	b21a      	sxth	r2, r3
 8001d40:	4b41      	ldr	r3, [pc, #260]	; (8001e48 <motorCont+0x250>)
 8001d42:	801a      	strh	r2, [r3, #0]
			sprintf(display,"Left:%5d\0", diffl/68);
 8001d44:	4b3e      	ldr	r3, [pc, #248]	; (8001e40 <motorCont+0x248>)
 8001d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d4a:	4a40      	ldr	r2, [pc, #256]	; (8001e4c <motorCont+0x254>)
 8001d4c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d50:	1152      	asrs	r2, r2, #5
 8001d52:	17db      	asrs	r3, r3, #31
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	b21b      	sxth	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	493d      	ldr	r1, [pc, #244]	; (8001e50 <motorCont+0x258>)
 8001d5c:	483d      	ldr	r0, [pc, #244]	; (8001e54 <motorCont+0x25c>)
 8001d5e:	f009 f9d7 	bl	800b110 <siprintf>
			OLED_ShowString(10,35,display);
 8001d62:	4a3c      	ldr	r2, [pc, #240]	; (8001e54 <motorCont+0x25c>)
 8001d64:	2123      	movs	r1, #35	; 0x23
 8001d66:	200a      	movs	r0, #10
 8001d68:	f009 f8d4 	bl	800af14 <OLED_ShowString>
			sprintf(display,"Right:%5d\0", diffr/68);
 8001d6c:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <motorCont+0x24c>)
 8001d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d72:	4a36      	ldr	r2, [pc, #216]	; (8001e4c <motorCont+0x254>)
 8001d74:	fb82 1203 	smull	r1, r2, r2, r3
 8001d78:	1152      	asrs	r2, r2, #5
 8001d7a:	17db      	asrs	r3, r3, #31
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	b21b      	sxth	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	4935      	ldr	r1, [pc, #212]	; (8001e58 <motorCont+0x260>)
 8001d84:	4833      	ldr	r0, [pc, #204]	; (8001e54 <motorCont+0x25c>)
 8001d86:	f009 f9c3 	bl	800b110 <siprintf>
			OLED_ShowString(10,50,display);
 8001d8a:	4a32      	ldr	r2, [pc, #200]	; (8001e54 <motorCont+0x25c>)
 8001d8c:	2132      	movs	r1, #50	; 0x32
 8001d8e:	200a      	movs	r0, #10
 8001d90:	f009 f8c0 	bl	800af14 <OLED_ShowString>
			OLED_Refresh_Gram();
 8001d94:	f008 ff4a 	bl	800ac2c <OLED_Refresh_Gram>

			if(avg>=encDist){
 8001d98:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <motorCont+0x250>)
 8001d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fbc0 	bl	8000524 <__aeabi_i2d>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dac:	f7fe fea0 	bl	8000af0 <__aeabi_dcmple>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00c      	beq.n	8001dd0 <motorCont+0x1d8>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001db6:	4b21      	ldr	r3, [pc, #132]	; (8001e3c <motorCont+0x244>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 8001dbe:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <motorCont+0x244>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(500);
 8001dc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dca:	f001 ff33 	bl	8003c34 <HAL_Delay>
				break;
 8001dce:	e000      	b.n	8001dd2 <motorCont+0x1da>
	while(1){
 8001dd0:	e787      	b.n	8001ce2 <motorCont+0xea>
			}

		}
		__HAL_TIM_SET_COUNTER(&htim2,0);
 8001dd2:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <motorCont+0x228>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim3,0);
 8001dda:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <motorCont+0x22c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2200      	movs	r2, #0
 8001de0:	625a      	str	r2, [r3, #36]	; 0x24

		speedL=speedR=tick=diffl=diffr=0;
 8001de2:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <motorCont+0x24c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	801a      	strh	r2, [r3, #0]
 8001de8:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <motorCont+0x24c>)
 8001dea:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <motorCont+0x248>)
 8001df0:	801a      	strh	r2, [r3, #0]
 8001df2:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <motorCont+0x248>)
 8001df4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <motorCont+0x238>)
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <motorCont+0x238>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	617b      	str	r3, [r7, #20]
		OLED_Refresh_Gram();
 8001e08:	f008 ff10 	bl	800ac2c <OLED_Refresh_Gram>
		*aRxBuffer = 'Z';
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <motorCont+0x224>)
 8001e0e:	225a      	movs	r2, #90	; 0x5a
 8001e10:	701a      	strb	r2, [r3, #0]
}
 8001e12:	bf00      	nop
 8001e14:	4618      	mov	r0, r3
 8001e16:	3720      	adds	r7, #32
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20004c9c 	.word	0x20004c9c
 8001e20:	20004ca0 	.word	0x20004ca0
 8001e24:	20004b98 	.word	0x20004b98
 8001e28:	20004b2c 	.word	0x20004b2c
 8001e2c:	20004c4c 	.word	0x20004c4c
 8001e30:	200000a4 	.word	0x200000a4
 8001e34:	40520000 	.word	0x40520000
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	20004a08 	.word	0x20004a08
 8001e40:	2000009c 	.word	0x2000009c
 8001e44:	2000009e 	.word	0x2000009e
 8001e48:	200000a0 	.word	0x200000a0
 8001e4c:	78787879 	.word	0x78787879
 8001e50:	0800c8f0 	.word	0x0800c8f0
 8001e54:	20004b38 	.word	0x20004b38
 8001e58:	0800c8fc 	.word	0x0800c8fc
 8001e5c:	00000000 	.word	0x00000000

08001e60 <degTurn>:

void degTurn(int mode){
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	switch(mode){
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d003      	beq.n	8001e76 <degTurn+0x16>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d016      	beq.n	8001ea2 <degTurn+0x42>
			motorCont(2200,500,'F','F',100*0.57);
			HAL_Delay(50);
			htim1.Instance->CCR4 = 73;
			break;
	}
}
 8001e74:	e02e      	b.n	8001ed4 <degTurn+0x74>
			htim1.Instance->CCR4 = 61;
 8001e76:	4b1e      	ldr	r3, [pc, #120]	; (8001ef0 <degTurn+0x90>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	223d      	movs	r2, #61	; 0x3d
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 8001e7e:	2064      	movs	r0, #100	; 0x64
 8001e80:	f001 fed8 	bl	8003c34 <HAL_Delay>
			motorCont(500,2200,'F','F',105*0.57);
 8001e84:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8001ee0 <degTurn+0x80>
 8001e88:	2346      	movs	r3, #70	; 0x46
 8001e8a:	2246      	movs	r2, #70	; 0x46
 8001e8c:	f640 0198 	movw	r1, #2200	; 0x898
 8001e90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e94:	f7ff feb0 	bl	8001bf8 <motorCont>
			htim1.Instance->CCR4 = 76;
 8001e98:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <degTurn+0x90>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	224c      	movs	r2, #76	; 0x4c
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001ea0:	e018      	b.n	8001ed4 <degTurn+0x74>
			htim1.Instance->CCR4 = 96;
 8001ea2:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <degTurn+0x90>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2260      	movs	r2, #96	; 0x60
 8001ea8:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 8001eaa:	2064      	movs	r0, #100	; 0x64
 8001eac:	f001 fec2 	bl	8003c34 <HAL_Delay>
			motorCont(2200,500,'F','F',100*0.57);
 8001eb0:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8001ee8 <degTurn+0x88>
 8001eb4:	2346      	movs	r3, #70	; 0x46
 8001eb6:	2246      	movs	r2, #70	; 0x46
 8001eb8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001ebc:	f640 0098 	movw	r0, #2200	; 0x898
 8001ec0:	f7ff fe9a 	bl	8001bf8 <motorCont>
			HAL_Delay(50);
 8001ec4:	2032      	movs	r0, #50	; 0x32
 8001ec6:	f001 feb5 	bl	8003c34 <HAL_Delay>
			htim1.Instance->CCR4 = 73;
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <degTurn+0x90>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2249      	movs	r2, #73	; 0x49
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001ed2:	bf00      	nop
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	f3af 8000 	nop.w
 8001ee0:	cccccccc 	.word	0xcccccccc
 8001ee4:	404deccc 	.word	0x404deccc
 8001ee8:	ffffffff 	.word	0xffffffff
 8001eec:	404c7fff 	.word	0x404c7fff
 8001ef0:	20004c50 	.word	0x20004c50
 8001ef4:	00000000 	.word	0x00000000

08001ef8 <forward>:

void forward(int mode){ //Forward for image recognition
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8001f00:	2064      	movs	r0, #100	; 0x64
 8001f02:	f001 fe97 	bl	8003c34 <HAL_Delay>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b09      	cmp	r3, #9
 8001f0a:	f200 80e9 	bhi.w	80020e0 <forward+0x1e8>
 8001f0e:	a201      	add	r2, pc, #4	; (adr r2, 8001f14 <forward+0x1c>)
 8001f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f14:	08001f3d 	.word	0x08001f3d
 8001f18:	08001f67 	.word	0x08001f67
 8001f1c:	08001f91 	.word	0x08001f91
 8001f20:	08001fbb 	.word	0x08001fbb
 8001f24:	08001fe5 	.word	0x08001fe5
 8001f28:	0800200f 	.word	0x0800200f
 8001f2c:	08002039 	.word	0x08002039
 8001f30:	08002063 	.word	0x08002063
 8001f34:	0800208d 	.word	0x0800208d
 8001f38:	080020b7 	.word	0x080020b7
	switch(mode){
	case 0:
			motorCont(pwmLeft, pwmRight, 'F', 'F', 100);break;
 8001f3c:	4b7e      	ldr	r3, [pc, #504]	; (8002138 <forward+0x240>)
 8001f3e:	edd3 7a00 	vldr	s15, [r3]
 8001f42:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001f46:	4b7d      	ldr	r3, [pc, #500]	; (800213c <forward+0x244>)
 8001f48:	edd3 7a00 	vldr	s15, [r3]
 8001f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f50:	ed9f 0b65 	vldr	d0, [pc, #404]	; 80020e8 <forward+0x1f0>
 8001f54:	2346      	movs	r3, #70	; 0x46
 8001f56:	2246      	movs	r2, #70	; 0x46
 8001f58:	ee17 1a90 	vmov	r1, s15
 8001f5c:	ee17 0a10 	vmov	r0, s14
 8001f60:	f7ff fe4a 	bl	8001bf8 <motorCont>
 8001f64:	e0bc      	b.n	80020e0 <forward+0x1e8>
	case 1:
			motorCont(pwmLeft, pwmRight, 'F', 'F', 8);break;
 8001f66:	4b74      	ldr	r3, [pc, #464]	; (8002138 <forward+0x240>)
 8001f68:	edd3 7a00 	vldr	s15, [r3]
 8001f6c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001f70:	4b72      	ldr	r3, [pc, #456]	; (800213c <forward+0x244>)
 8001f72:	edd3 7a00 	vldr	s15, [r3]
 8001f76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f7a:	ed9f 0b5d 	vldr	d0, [pc, #372]	; 80020f0 <forward+0x1f8>
 8001f7e:	2346      	movs	r3, #70	; 0x46
 8001f80:	2246      	movs	r2, #70	; 0x46
 8001f82:	ee17 1a90 	vmov	r1, s15
 8001f86:	ee17 0a10 	vmov	r0, s14
 8001f8a:	f7ff fe35 	bl	8001bf8 <motorCont>
 8001f8e:	e0a7      	b.n	80020e0 <forward+0x1e8>
	case 2:
			motorCont(pwmLeft, pwmRight, 'F', 'F', 18);break;
 8001f90:	4b69      	ldr	r3, [pc, #420]	; (8002138 <forward+0x240>)
 8001f92:	edd3 7a00 	vldr	s15, [r3]
 8001f96:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001f9a:	4b68      	ldr	r3, [pc, #416]	; (800213c <forward+0x244>)
 8001f9c:	edd3 7a00 	vldr	s15, [r3]
 8001fa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fa4:	ed9f 0b54 	vldr	d0, [pc, #336]	; 80020f8 <forward+0x200>
 8001fa8:	2346      	movs	r3, #70	; 0x46
 8001faa:	2246      	movs	r2, #70	; 0x46
 8001fac:	ee17 1a90 	vmov	r1, s15
 8001fb0:	ee17 0a10 	vmov	r0, s14
 8001fb4:	f7ff fe20 	bl	8001bf8 <motorCont>
 8001fb8:	e092      	b.n	80020e0 <forward+0x1e8>
	case 3:
			motorCont(pwmLeft, pwmRight, 'F', 'F', 28);break;
 8001fba:	4b5f      	ldr	r3, [pc, #380]	; (8002138 <forward+0x240>)
 8001fbc:	edd3 7a00 	vldr	s15, [r3]
 8001fc0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001fc4:	4b5d      	ldr	r3, [pc, #372]	; (800213c <forward+0x244>)
 8001fc6:	edd3 7a00 	vldr	s15, [r3]
 8001fca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fce:	ed9f 0b4c 	vldr	d0, [pc, #304]	; 8002100 <forward+0x208>
 8001fd2:	2346      	movs	r3, #70	; 0x46
 8001fd4:	2246      	movs	r2, #70	; 0x46
 8001fd6:	ee17 1a90 	vmov	r1, s15
 8001fda:	ee17 0a10 	vmov	r0, s14
 8001fde:	f7ff fe0b 	bl	8001bf8 <motorCont>
 8001fe2:	e07d      	b.n	80020e0 <forward+0x1e8>
	case 4:
			motorCont(pwmLeft, pwmRight, 'F', 'F', 38);break;
 8001fe4:	4b54      	ldr	r3, [pc, #336]	; (8002138 <forward+0x240>)
 8001fe6:	edd3 7a00 	vldr	s15, [r3]
 8001fea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001fee:	4b53      	ldr	r3, [pc, #332]	; (800213c <forward+0x244>)
 8001ff0:	edd3 7a00 	vldr	s15, [r3]
 8001ff4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ff8:	ed9f 0b43 	vldr	d0, [pc, #268]	; 8002108 <forward+0x210>
 8001ffc:	2346      	movs	r3, #70	; 0x46
 8001ffe:	2246      	movs	r2, #70	; 0x46
 8002000:	ee17 1a90 	vmov	r1, s15
 8002004:	ee17 0a10 	vmov	r0, s14
 8002008:	f7ff fdf6 	bl	8001bf8 <motorCont>
 800200c:	e068      	b.n	80020e0 <forward+0x1e8>
	case 5:
			motorCont(pwmLeft, pwmRight, 'F', 'F', 49);break;
 800200e:	4b4a      	ldr	r3, [pc, #296]	; (8002138 <forward+0x240>)
 8002010:	edd3 7a00 	vldr	s15, [r3]
 8002014:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002018:	4b48      	ldr	r3, [pc, #288]	; (800213c <forward+0x244>)
 800201a:	edd3 7a00 	vldr	s15, [r3]
 800201e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002022:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 8002110 <forward+0x218>
 8002026:	2346      	movs	r3, #70	; 0x46
 8002028:	2246      	movs	r2, #70	; 0x46
 800202a:	ee17 1a90 	vmov	r1, s15
 800202e:	ee17 0a10 	vmov	r0, s14
 8002032:	f7ff fde1 	bl	8001bf8 <motorCont>
 8002036:	e053      	b.n	80020e0 <forward+0x1e8>
	case 6:
			motorCont(pwmLeft, pwmRight, 'F', 'F', 60);break;
 8002038:	4b3f      	ldr	r3, [pc, #252]	; (8002138 <forward+0x240>)
 800203a:	edd3 7a00 	vldr	s15, [r3]
 800203e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002042:	4b3e      	ldr	r3, [pc, #248]	; (800213c <forward+0x244>)
 8002044:	edd3 7a00 	vldr	s15, [r3]
 8002048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800204c:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8002118 <forward+0x220>
 8002050:	2346      	movs	r3, #70	; 0x46
 8002052:	2246      	movs	r2, #70	; 0x46
 8002054:	ee17 1a90 	vmov	r1, s15
 8002058:	ee17 0a10 	vmov	r0, s14
 800205c:	f7ff fdcc 	bl	8001bf8 <motorCont>
 8002060:	e03e      	b.n	80020e0 <forward+0x1e8>
	case 7:
			motorCont(pwmLeft, pwmRight, 'F', 'F', 70);break;
 8002062:	4b35      	ldr	r3, [pc, #212]	; (8002138 <forward+0x240>)
 8002064:	edd3 7a00 	vldr	s15, [r3]
 8002068:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800206c:	4b33      	ldr	r3, [pc, #204]	; (800213c <forward+0x244>)
 800206e:	edd3 7a00 	vldr	s15, [r3]
 8002072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002076:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8002120 <forward+0x228>
 800207a:	2346      	movs	r3, #70	; 0x46
 800207c:	2246      	movs	r2, #70	; 0x46
 800207e:	ee17 1a90 	vmov	r1, s15
 8002082:	ee17 0a10 	vmov	r0, s14
 8002086:	f7ff fdb7 	bl	8001bf8 <motorCont>
 800208a:	e029      	b.n	80020e0 <forward+0x1e8>
	case 8:
			motorCont(pwmLeft, pwmRight, 'F', 'F', 80);break;
 800208c:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <forward+0x240>)
 800208e:	edd3 7a00 	vldr	s15, [r3]
 8002092:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002096:	4b29      	ldr	r3, [pc, #164]	; (800213c <forward+0x244>)
 8002098:	edd3 7a00 	vldr	s15, [r3]
 800209c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020a0:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8002128 <forward+0x230>
 80020a4:	2346      	movs	r3, #70	; 0x46
 80020a6:	2246      	movs	r2, #70	; 0x46
 80020a8:	ee17 1a90 	vmov	r1, s15
 80020ac:	ee17 0a10 	vmov	r0, s14
 80020b0:	f7ff fda2 	bl	8001bf8 <motorCont>
 80020b4:	e014      	b.n	80020e0 <forward+0x1e8>
	case 9:
			motorCont(pwmLeft, pwmRight, 'F', 'F', 90);break;
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <forward+0x240>)
 80020b8:	edd3 7a00 	vldr	s15, [r3]
 80020bc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80020c0:	4b1e      	ldr	r3, [pc, #120]	; (800213c <forward+0x244>)
 80020c2:	edd3 7a00 	vldr	s15, [r3]
 80020c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020ca:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8002130 <forward+0x238>
 80020ce:	2346      	movs	r3, #70	; 0x46
 80020d0:	2246      	movs	r2, #70	; 0x46
 80020d2:	ee17 1a90 	vmov	r1, s15
 80020d6:	ee17 0a10 	vmov	r0, s14
 80020da:	f7ff fd8d 	bl	8001bf8 <motorCont>
 80020de:	bf00      	nop
	}
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	00000000 	.word	0x00000000
 80020ec:	40590000 	.word	0x40590000
 80020f0:	00000000 	.word	0x00000000
 80020f4:	40200000 	.word	0x40200000
 80020f8:	00000000 	.word	0x00000000
 80020fc:	40320000 	.word	0x40320000
 8002100:	00000000 	.word	0x00000000
 8002104:	403c0000 	.word	0x403c0000
 8002108:	00000000 	.word	0x00000000
 800210c:	40430000 	.word	0x40430000
 8002110:	00000000 	.word	0x00000000
 8002114:	40488000 	.word	0x40488000
 8002118:	00000000 	.word	0x00000000
 800211c:	404e0000 	.word	0x404e0000
 8002120:	00000000 	.word	0x00000000
 8002124:	40518000 	.word	0x40518000
 8002128:	00000000 	.word	0x00000000
 800212c:	40540000 	.word	0x40540000
 8002130:	00000000 	.word	0x00000000
 8002134:	40568000 	.word	0x40568000
 8002138:	20000000 	.word	0x20000000
 800213c:	20000004 	.word	0x20000004

08002140 <reverse>:

void reverse(int mode){//Reverse for image recognition
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8002148:	2064      	movs	r0, #100	; 0x64
 800214a:	f001 fd73 	bl	8003c34 <HAL_Delay>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b09      	cmp	r3, #9
 8002152:	f200 80e9 	bhi.w	8002328 <reverse+0x1e8>
 8002156:	a201      	add	r2, pc, #4	; (adr r2, 800215c <reverse+0x1c>)
 8002158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215c:	08002185 	.word	0x08002185
 8002160:	080021af 	.word	0x080021af
 8002164:	080021d9 	.word	0x080021d9
 8002168:	08002203 	.word	0x08002203
 800216c:	0800222d 	.word	0x0800222d
 8002170:	08002257 	.word	0x08002257
 8002174:	08002281 	.word	0x08002281
 8002178:	080022ab 	.word	0x080022ab
 800217c:	080022d5 	.word	0x080022d5
 8002180:	080022ff 	.word	0x080022ff
	switch(mode){
	case 0:
			motorCont(pwmLeft, pwmRight, 'R', 'R', 100);break;
 8002184:	4b7e      	ldr	r3, [pc, #504]	; (8002380 <reverse+0x240>)
 8002186:	edd3 7a00 	vldr	s15, [r3]
 800218a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800218e:	4b7d      	ldr	r3, [pc, #500]	; (8002384 <reverse+0x244>)
 8002190:	edd3 7a00 	vldr	s15, [r3]
 8002194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002198:	ed9f 0b65 	vldr	d0, [pc, #404]	; 8002330 <reverse+0x1f0>
 800219c:	2352      	movs	r3, #82	; 0x52
 800219e:	2252      	movs	r2, #82	; 0x52
 80021a0:	ee17 1a90 	vmov	r1, s15
 80021a4:	ee17 0a10 	vmov	r0, s14
 80021a8:	f7ff fd26 	bl	8001bf8 <motorCont>
 80021ac:	e0bc      	b.n	8002328 <reverse+0x1e8>
	case 1:
			motorCont(pwmLeft, pwmRight,'R', 'R', 6);break;
 80021ae:	4b74      	ldr	r3, [pc, #464]	; (8002380 <reverse+0x240>)
 80021b0:	edd3 7a00 	vldr	s15, [r3]
 80021b4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80021b8:	4b72      	ldr	r3, [pc, #456]	; (8002384 <reverse+0x244>)
 80021ba:	edd3 7a00 	vldr	s15, [r3]
 80021be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021c2:	ed9f 0b5d 	vldr	d0, [pc, #372]	; 8002338 <reverse+0x1f8>
 80021c6:	2352      	movs	r3, #82	; 0x52
 80021c8:	2252      	movs	r2, #82	; 0x52
 80021ca:	ee17 1a90 	vmov	r1, s15
 80021ce:	ee17 0a10 	vmov	r0, s14
 80021d2:	f7ff fd11 	bl	8001bf8 <motorCont>
 80021d6:	e0a7      	b.n	8002328 <reverse+0x1e8>
	case 2:
			motorCont(pwmLeft, pwmRight,'R', 'R', 18);break;
 80021d8:	4b69      	ldr	r3, [pc, #420]	; (8002380 <reverse+0x240>)
 80021da:	edd3 7a00 	vldr	s15, [r3]
 80021de:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80021e2:	4b68      	ldr	r3, [pc, #416]	; (8002384 <reverse+0x244>)
 80021e4:	edd3 7a00 	vldr	s15, [r3]
 80021e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021ec:	ed9f 0b54 	vldr	d0, [pc, #336]	; 8002340 <reverse+0x200>
 80021f0:	2352      	movs	r3, #82	; 0x52
 80021f2:	2252      	movs	r2, #82	; 0x52
 80021f4:	ee17 1a90 	vmov	r1, s15
 80021f8:	ee17 0a10 	vmov	r0, s14
 80021fc:	f7ff fcfc 	bl	8001bf8 <motorCont>
 8002200:	e092      	b.n	8002328 <reverse+0x1e8>
	case 3:
			motorCont(pwmLeft, pwmRight, 'R', 'R', 28);break;
 8002202:	4b5f      	ldr	r3, [pc, #380]	; (8002380 <reverse+0x240>)
 8002204:	edd3 7a00 	vldr	s15, [r3]
 8002208:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800220c:	4b5d      	ldr	r3, [pc, #372]	; (8002384 <reverse+0x244>)
 800220e:	edd3 7a00 	vldr	s15, [r3]
 8002212:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002216:	ed9f 0b4c 	vldr	d0, [pc, #304]	; 8002348 <reverse+0x208>
 800221a:	2352      	movs	r3, #82	; 0x52
 800221c:	2252      	movs	r2, #82	; 0x52
 800221e:	ee17 1a90 	vmov	r1, s15
 8002222:	ee17 0a10 	vmov	r0, s14
 8002226:	f7ff fce7 	bl	8001bf8 <motorCont>
 800222a:	e07d      	b.n	8002328 <reverse+0x1e8>
	case 4:
			motorCont(pwmLeft, pwmRight, 'R', 'R', 38);break;
 800222c:	4b54      	ldr	r3, [pc, #336]	; (8002380 <reverse+0x240>)
 800222e:	edd3 7a00 	vldr	s15, [r3]
 8002232:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002236:	4b53      	ldr	r3, [pc, #332]	; (8002384 <reverse+0x244>)
 8002238:	edd3 7a00 	vldr	s15, [r3]
 800223c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002240:	ed9f 0b43 	vldr	d0, [pc, #268]	; 8002350 <reverse+0x210>
 8002244:	2352      	movs	r3, #82	; 0x52
 8002246:	2252      	movs	r2, #82	; 0x52
 8002248:	ee17 1a90 	vmov	r1, s15
 800224c:	ee17 0a10 	vmov	r0, s14
 8002250:	f7ff fcd2 	bl	8001bf8 <motorCont>
 8002254:	e068      	b.n	8002328 <reverse+0x1e8>
	case 5:
			motorCont(pwmLeft, pwmRight,'R', 'R', 49);break;
 8002256:	4b4a      	ldr	r3, [pc, #296]	; (8002380 <reverse+0x240>)
 8002258:	edd3 7a00 	vldr	s15, [r3]
 800225c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002260:	4b48      	ldr	r3, [pc, #288]	; (8002384 <reverse+0x244>)
 8002262:	edd3 7a00 	vldr	s15, [r3]
 8002266:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800226a:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 8002358 <reverse+0x218>
 800226e:	2352      	movs	r3, #82	; 0x52
 8002270:	2252      	movs	r2, #82	; 0x52
 8002272:	ee17 1a90 	vmov	r1, s15
 8002276:	ee17 0a10 	vmov	r0, s14
 800227a:	f7ff fcbd 	bl	8001bf8 <motorCont>
 800227e:	e053      	b.n	8002328 <reverse+0x1e8>
	case 6:
			motorCont(pwmLeft, pwmRight, 'R', 'R', 60);break;
 8002280:	4b3f      	ldr	r3, [pc, #252]	; (8002380 <reverse+0x240>)
 8002282:	edd3 7a00 	vldr	s15, [r3]
 8002286:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800228a:	4b3e      	ldr	r3, [pc, #248]	; (8002384 <reverse+0x244>)
 800228c:	edd3 7a00 	vldr	s15, [r3]
 8002290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002294:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8002360 <reverse+0x220>
 8002298:	2352      	movs	r3, #82	; 0x52
 800229a:	2252      	movs	r2, #82	; 0x52
 800229c:	ee17 1a90 	vmov	r1, s15
 80022a0:	ee17 0a10 	vmov	r0, s14
 80022a4:	f7ff fca8 	bl	8001bf8 <motorCont>
 80022a8:	e03e      	b.n	8002328 <reverse+0x1e8>
	case 7:
			motorCont(pwmLeft, pwmRight, 'R', 'R', 70);break;
 80022aa:	4b35      	ldr	r3, [pc, #212]	; (8002380 <reverse+0x240>)
 80022ac:	edd3 7a00 	vldr	s15, [r3]
 80022b0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80022b4:	4b33      	ldr	r3, [pc, #204]	; (8002384 <reverse+0x244>)
 80022b6:	edd3 7a00 	vldr	s15, [r3]
 80022ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022be:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8002368 <reverse+0x228>
 80022c2:	2352      	movs	r3, #82	; 0x52
 80022c4:	2252      	movs	r2, #82	; 0x52
 80022c6:	ee17 1a90 	vmov	r1, s15
 80022ca:	ee17 0a10 	vmov	r0, s14
 80022ce:	f7ff fc93 	bl	8001bf8 <motorCont>
 80022d2:	e029      	b.n	8002328 <reverse+0x1e8>
	case 8:
			motorCont(pwmLeft, pwmRight, 'R', 'R', 80);break;
 80022d4:	4b2a      	ldr	r3, [pc, #168]	; (8002380 <reverse+0x240>)
 80022d6:	edd3 7a00 	vldr	s15, [r3]
 80022da:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80022de:	4b29      	ldr	r3, [pc, #164]	; (8002384 <reverse+0x244>)
 80022e0:	edd3 7a00 	vldr	s15, [r3]
 80022e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022e8:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8002370 <reverse+0x230>
 80022ec:	2352      	movs	r3, #82	; 0x52
 80022ee:	2252      	movs	r2, #82	; 0x52
 80022f0:	ee17 1a90 	vmov	r1, s15
 80022f4:	ee17 0a10 	vmov	r0, s14
 80022f8:	f7ff fc7e 	bl	8001bf8 <motorCont>
 80022fc:	e014      	b.n	8002328 <reverse+0x1e8>
	case 9:
			motorCont(pwmLeft, pwmRight, 'R', 'R', 90);break;
 80022fe:	4b20      	ldr	r3, [pc, #128]	; (8002380 <reverse+0x240>)
 8002300:	edd3 7a00 	vldr	s15, [r3]
 8002304:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002308:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <reverse+0x244>)
 800230a:	edd3 7a00 	vldr	s15, [r3]
 800230e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002312:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8002378 <reverse+0x238>
 8002316:	2352      	movs	r3, #82	; 0x52
 8002318:	2252      	movs	r2, #82	; 0x52
 800231a:	ee17 1a90 	vmov	r1, s15
 800231e:	ee17 0a10 	vmov	r0, s14
 8002322:	f7ff fc69 	bl	8001bf8 <motorCont>
 8002326:	bf00      	nop

	}
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	00000000 	.word	0x00000000
 8002334:	40590000 	.word	0x40590000
 8002338:	00000000 	.word	0x00000000
 800233c:	40180000 	.word	0x40180000
 8002340:	00000000 	.word	0x00000000
 8002344:	40320000 	.word	0x40320000
 8002348:	00000000 	.word	0x00000000
 800234c:	403c0000 	.word	0x403c0000
 8002350:	00000000 	.word	0x00000000
 8002354:	40430000 	.word	0x40430000
 8002358:	00000000 	.word	0x00000000
 800235c:	40488000 	.word	0x40488000
 8002360:	00000000 	.word	0x00000000
 8002364:	404e0000 	.word	0x404e0000
 8002368:	00000000 	.word	0x00000000
 800236c:	40518000 	.word	0x40518000
 8002370:	00000000 	.word	0x00000000
 8002374:	40540000 	.word	0x40540000
 8002378:	00000000 	.word	0x00000000
 800237c:	40568000 	.word	0x40568000
 8002380:	20000000 	.word	0x20000000
 8002384:	20000004 	.word	0x20000004

08002388 <spotTurn>:

void spotTurn(int mode){
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	float var = 1;
 8002390:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002394:	61fb      	str	r3, [r7, #28]
	float left = 1.0;
 8002396:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800239a:	61bb      	str	r3, [r7, #24]
	float turn1 = 20*var;
 800239c:	edd7 7a07 	vldr	s15, [r7, #28]
 80023a0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80023a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023a8:	edc7 7a05 	vstr	s15, [r7, #20]
	float turn2 = 21*var;
 80023ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80023b0:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 80023b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023b8:	edc7 7a04 	vstr	s15, [r7, #16]
	float turn3 = 3*var;
 80023bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80023c0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80023c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023c8:	edc7 7a03 	vstr	s15, [r7, #12]
	float turn4 = turn3;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	60bb      	str	r3, [r7, #8]
	switch(mode){
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d003      	beq.n	80023de <spotTurn+0x56>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d069      	beq.n	80024b0 <spotTurn+0x128>
		htim1.Instance->CCR4 = 73;
		HAL_Delay(500);
		motorCont(1500, 1500, 'F', 'F', 2);
		break;
	}
}
 80023dc:	e0c3      	b.n	8002566 <spotTurn+0x1de>
		htim1.Instance->CCR4 = 56;
 80023de:	4b68      	ldr	r3, [pc, #416]	; (8002580 <spotTurn+0x1f8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2238      	movs	r2, #56	; 0x38
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(500);
 80023e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023ea:	f001 fc23 	bl	8003c34 <HAL_Delay>
		motorCont(700, 2100, 'F', 'F', turn1*left);
 80023ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80023f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80023f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023fa:	ee17 0a90 	vmov	r0, s15
 80023fe:	f7fe f8a3 	bl	8000548 <__aeabi_f2d>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	ec43 2b10 	vmov	d0, r2, r3
 800240a:	2346      	movs	r3, #70	; 0x46
 800240c:	2246      	movs	r2, #70	; 0x46
 800240e:	f640 0134 	movw	r1, #2100	; 0x834
 8002412:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002416:	f7ff fbef 	bl	8001bf8 <motorCont>
		htim1.Instance->CCR4 = 104;
 800241a:	4b59      	ldr	r3, [pc, #356]	; (8002580 <spotTurn+0x1f8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2268      	movs	r2, #104	; 0x68
 8002420:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(500);
 8002422:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002426:	f001 fc05 	bl	8003c34 <HAL_Delay>
		motorCont(2100, 700, 'R', 'R', turn2*left);
 800242a:	ed97 7a04 	vldr	s14, [r7, #16]
 800242e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002436:	ee17 0a90 	vmov	r0, s15
 800243a:	f7fe f885 	bl	8000548 <__aeabi_f2d>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	ec43 2b10 	vmov	d0, r2, r3
 8002446:	2352      	movs	r3, #82	; 0x52
 8002448:	2252      	movs	r2, #82	; 0x52
 800244a:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800244e:	f640 0034 	movw	r0, #2100	; 0x834
 8002452:	f7ff fbd1 	bl	8001bf8 <motorCont>
		htim1.Instance->CCR4 = 56;
 8002456:	4b4a      	ldr	r3, [pc, #296]	; (8002580 <spotTurn+0x1f8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2238      	movs	r2, #56	; 0x38
 800245c:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(500);
 800245e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002462:	f001 fbe7 	bl	8003c34 <HAL_Delay>
		motorCont(700, 2100, 'F', 'F', turn3);
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f7fe f86e 	bl	8000548 <__aeabi_f2d>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	ec43 2b10 	vmov	d0, r2, r3
 8002474:	2346      	movs	r3, #70	; 0x46
 8002476:	2246      	movs	r2, #70	; 0x46
 8002478:	f640 0134 	movw	r1, #2100	; 0x834
 800247c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002480:	f7ff fbba 	bl	8001bf8 <motorCont>
		HAL_Delay(50);
 8002484:	2032      	movs	r0, #50	; 0x32
 8002486:	f001 fbd5 	bl	8003c34 <HAL_Delay>
		htim1.Instance->CCR4 = 76;
 800248a:	4b3d      	ldr	r3, [pc, #244]	; (8002580 <spotTurn+0x1f8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	224c      	movs	r2, #76	; 0x4c
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(500);
 8002492:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002496:	f001 fbcd 	bl	8003c34 <HAL_Delay>
		motorCont(1500, 1500, 'F', 'F', 5.5);
 800249a:	ed9f 0b35 	vldr	d0, [pc, #212]	; 8002570 <spotTurn+0x1e8>
 800249e:	2346      	movs	r3, #70	; 0x46
 80024a0:	2246      	movs	r2, #70	; 0x46
 80024a2:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80024a6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80024aa:	f7ff fba5 	bl	8001bf8 <motorCont>
		break;
 80024ae:	e05a      	b.n	8002566 <spotTurn+0x1de>
		htim1.Instance->CCR4 = 104;
 80024b0:	4b33      	ldr	r3, [pc, #204]	; (8002580 <spotTurn+0x1f8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2268      	movs	r2, #104	; 0x68
 80024b6:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(500);
 80024b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024bc:	f001 fbba 	bl	8003c34 <HAL_Delay>
		motorCont(2100, 700, 'F', 'F', turn1);
 80024c0:	6978      	ldr	r0, [r7, #20]
 80024c2:	f7fe f841 	bl	8000548 <__aeabi_f2d>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	ec43 2b10 	vmov	d0, r2, r3
 80024ce:	2346      	movs	r3, #70	; 0x46
 80024d0:	2246      	movs	r2, #70	; 0x46
 80024d2:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80024d6:	f640 0034 	movw	r0, #2100	; 0x834
 80024da:	f7ff fb8d 	bl	8001bf8 <motorCont>
		htim1.Instance->CCR4 = 56;
 80024de:	4b28      	ldr	r3, [pc, #160]	; (8002580 <spotTurn+0x1f8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2238      	movs	r2, #56	; 0x38
 80024e4:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(500);
 80024e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024ea:	f001 fba3 	bl	8003c34 <HAL_Delay>
		motorCont(700, 2100, 'R', 'R', turn2);
 80024ee:	6938      	ldr	r0, [r7, #16]
 80024f0:	f7fe f82a 	bl	8000548 <__aeabi_f2d>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	ec43 2b10 	vmov	d0, r2, r3
 80024fc:	2352      	movs	r3, #82	; 0x52
 80024fe:	2252      	movs	r2, #82	; 0x52
 8002500:	f640 0134 	movw	r1, #2100	; 0x834
 8002504:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002508:	f7ff fb76 	bl	8001bf8 <motorCont>
		htim1.Instance->CCR4 = 104;
 800250c:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <spotTurn+0x1f8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2268      	movs	r2, #104	; 0x68
 8002512:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(500);
 8002514:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002518:	f001 fb8c 	bl	8003c34 <HAL_Delay>
		motorCont(2100, 700, 'F', 'F', turn4);
 800251c:	68b8      	ldr	r0, [r7, #8]
 800251e:	f7fe f813 	bl	8000548 <__aeabi_f2d>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	ec43 2b10 	vmov	d0, r2, r3
 800252a:	2346      	movs	r3, #70	; 0x46
 800252c:	2246      	movs	r2, #70	; 0x46
 800252e:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8002532:	f640 0034 	movw	r0, #2100	; 0x834
 8002536:	f7ff fb5f 	bl	8001bf8 <motorCont>
		HAL_Delay(50);
 800253a:	2032      	movs	r0, #50	; 0x32
 800253c:	f001 fb7a 	bl	8003c34 <HAL_Delay>
		htim1.Instance->CCR4 = 73;
 8002540:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <spotTurn+0x1f8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2249      	movs	r2, #73	; 0x49
 8002546:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(500);
 8002548:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800254c:	f001 fb72 	bl	8003c34 <HAL_Delay>
		motorCont(1500, 1500, 'F', 'F', 2);
 8002550:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8002578 <spotTurn+0x1f0>
 8002554:	2346      	movs	r3, #70	; 0x46
 8002556:	2246      	movs	r2, #70	; 0x46
 8002558:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800255c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002560:	f7ff fb4a 	bl	8001bf8 <motorCont>
		break;
 8002564:	bf00      	nop
}
 8002566:	bf00      	nop
 8002568:	3720      	adds	r7, #32
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	00000000 	.word	0x00000000
 8002574:	40160000 	.word	0x40160000
 8002578:	00000000 	.word	0x00000000
 800257c:	40000000 	.word	0x40000000
 8002580:	20004c50 	.word	0x20004c50

08002584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002588:	f001 fae2 	bl	8003b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800258c:	f000 f848 	bl	8002620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002590:	f000 fc1a 	bl	8002dc8 <MX_GPIO_Init>
  MX_TIM8_Init();
 8002594:	f000 fb62 	bl	8002c5c <MX_TIM8_Init>
  MX_TIM2_Init();
 8002598:	f000 fa16 	bl	80029c8 <MX_TIM2_Init>
  MX_TIM1_Init();
 800259c:	f000 f974 	bl	8002888 <MX_TIM1_Init>
  MX_TIM3_Init();
 80025a0:	f000 fa66 	bl	8002a70 <MX_TIM3_Init>
  MX_TIM4_Init();
 80025a4:	f000 fab8 	bl	8002b18 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80025a8:	f000 fbe4 	bl	8002d74 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80025ac:	f000 f898 	bl	80026e0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80025b0:	f000 f8e8 	bl	8002784 <MX_ADC2_Init>
  MX_RTC_Init();
 80025b4:	f000 f938 	bl	8002828 <MX_RTC_Init>
  MX_TIM5_Init();
 80025b8:	f000 fb02 	bl	8002bc0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80025bc:	2100      	movs	r1, #0
 80025be:	480f      	ldr	r0, [pc, #60]	; (80025fc <main+0x78>)
 80025c0:	f003 fa90 	bl	8005ae4 <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 1);
 80025c4:	2201      	movs	r2, #1
 80025c6:	490e      	ldr	r1, [pc, #56]	; (8002600 <main+0x7c>)
 80025c8:	480e      	ldr	r0, [pc, #56]	; (8002604 <main+0x80>)
 80025ca:	f004 fec1 	bl	8007350 <HAL_UART_Receive_IT>
  OLED_Init();
 80025ce:	f008 fcd3 	bl	800af78 <OLED_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80025d2:	f005 fdd9 	bl	8008188 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LED_Toggle */
  LED_ToggleHandle = osThreadNew(StartDefaultTask, NULL, &LED_Toggle_attributes);
 80025d6:	4a0c      	ldr	r2, [pc, #48]	; (8002608 <main+0x84>)
 80025d8:	2100      	movs	r1, #0
 80025da:	480c      	ldr	r0, [pc, #48]	; (800260c <main+0x88>)
 80025dc:	f005 fe1e 	bl	800821c <osThreadNew>
 80025e0:	4603      	mov	r3, r0
 80025e2:	4a0b      	ldr	r2, [pc, #44]	; (8002610 <main+0x8c>)
 80025e4:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 80025e6:	4a0b      	ldr	r2, [pc, #44]	; (8002614 <main+0x90>)
 80025e8:	2100      	movs	r1, #0
 80025ea:	480b      	ldr	r0, [pc, #44]	; (8002618 <main+0x94>)
 80025ec:	f005 fe16 	bl	800821c <osThreadNew>
 80025f0:	4603      	mov	r3, r0
 80025f2:	4a0a      	ldr	r2, [pc, #40]	; (800261c <main+0x98>)
 80025f4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80025f6:	f005 fdeb 	bl	80081d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80025fa:	e7fe      	b.n	80025fa <main+0x76>
 80025fc:	20004a50 	.word	0x20004a50
 8002600:	20004c9c 	.word	0x20004c9c
 8002604:	20004a98 	.word	0x20004a98
 8002608:	0800c97c 	.word	0x0800c97c
 800260c:	08002f41 	.word	0x08002f41
 8002610:	20004b28 	.word	0x20004b28
 8002614:	0800c9a0 	.word	0x0800c9a0
 8002618:	08003029 	.word	0x08003029
 800261c:	20004b34 	.word	0x20004b34

08002620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b094      	sub	sp, #80	; 0x50
 8002624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002626:	f107 0320 	add.w	r3, r7, #32
 800262a:	2230      	movs	r2, #48	; 0x30
 800262c:	2100      	movs	r1, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f008 fd66 	bl	800b100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002634:	f107 030c 	add.w	r3, r7, #12
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002644:	2300      	movs	r3, #0
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	4b23      	ldr	r3, [pc, #140]	; (80026d8 <SystemClock_Config+0xb8>)
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	4a22      	ldr	r2, [pc, #136]	; (80026d8 <SystemClock_Config+0xb8>)
 800264e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002652:	6413      	str	r3, [r2, #64]	; 0x40
 8002654:	4b20      	ldr	r3, [pc, #128]	; (80026d8 <SystemClock_Config+0xb8>)
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002660:	2300      	movs	r3, #0
 8002662:	607b      	str	r3, [r7, #4]
 8002664:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <SystemClock_Config+0xbc>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a1c      	ldr	r2, [pc, #112]	; (80026dc <SystemClock_Config+0xbc>)
 800266a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <SystemClock_Config+0xbc>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800267c:	230a      	movs	r3, #10
 800267e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002680:	2301      	movs	r3, #1
 8002682:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002684:	2310      	movs	r3, #16
 8002686:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002688:	2301      	movs	r3, #1
 800268a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800268c:	2300      	movs	r3, #0
 800268e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002690:	f107 0320 	add.w	r3, r7, #32
 8002694:	4618      	mov	r0, r3
 8002696:	f002 f9b5 	bl	8004a04 <HAL_RCC_OscConfig>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80026a0:	f000 fee8 	bl	8003474 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026a4:	230f      	movs	r3, #15
 80026a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80026a8:	2300      	movs	r3, #0
 80026aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80026b8:	f107 030c 	add.w	r3, r7, #12
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f002 fc18 	bl	8004ef4 <HAL_RCC_ClockConfig>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80026ca:	f000 fed3 	bl	8003474 <Error_Handler>
  }
}
 80026ce:	bf00      	nop
 80026d0:	3750      	adds	r7, #80	; 0x50
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40007000 	.word	0x40007000

080026e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80026e6:	463b      	mov	r3, r7
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80026f2:	4b21      	ldr	r3, [pc, #132]	; (8002778 <MX_ADC1_Init+0x98>)
 80026f4:	4a21      	ldr	r2, [pc, #132]	; (800277c <MX_ADC1_Init+0x9c>)
 80026f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80026f8:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <MX_ADC1_Init+0x98>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026fe:	4b1e      	ldr	r3, [pc, #120]	; (8002778 <MX_ADC1_Init+0x98>)
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002704:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <MX_ADC1_Init+0x98>)
 8002706:	2200      	movs	r2, #0
 8002708:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800270a:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <MX_ADC1_Init+0x98>)
 800270c:	2200      	movs	r2, #0
 800270e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <MX_ADC1_Init+0x98>)
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002718:	4b17      	ldr	r3, [pc, #92]	; (8002778 <MX_ADC1_Init+0x98>)
 800271a:	2200      	movs	r2, #0
 800271c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800271e:	4b16      	ldr	r3, [pc, #88]	; (8002778 <MX_ADC1_Init+0x98>)
 8002720:	4a17      	ldr	r2, [pc, #92]	; (8002780 <MX_ADC1_Init+0xa0>)
 8002722:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002724:	4b14      	ldr	r3, [pc, #80]	; (8002778 <MX_ADC1_Init+0x98>)
 8002726:	2200      	movs	r2, #0
 8002728:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800272a:	4b13      	ldr	r3, [pc, #76]	; (8002778 <MX_ADC1_Init+0x98>)
 800272c:	2201      	movs	r2, #1
 800272e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <MX_ADC1_Init+0x98>)
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002738:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <MX_ADC1_Init+0x98>)
 800273a:	2201      	movs	r2, #1
 800273c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800273e:	480e      	ldr	r0, [pc, #56]	; (8002778 <MX_ADC1_Init+0x98>)
 8002740:	f001 fa9c 	bl	8003c7c <HAL_ADC_Init>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800274a:	f000 fe93 	bl	8003474 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800274e:	230b      	movs	r3, #11
 8002750:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002752:	2301      	movs	r3, #1
 8002754:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002756:	2300      	movs	r3, #0
 8002758:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800275a:	463b      	mov	r3, r7
 800275c:	4619      	mov	r1, r3
 800275e:	4806      	ldr	r0, [pc, #24]	; (8002778 <MX_ADC1_Init+0x98>)
 8002760:	f001 fbb0 	bl	8003ec4 <HAL_ADC_ConfigChannel>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800276a:	f000 fe83 	bl	8003474 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800276e:	bf00      	nop
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20004be0 	.word	0x20004be0
 800277c:	40012000 	.word	0x40012000
 8002780:	0f000001 	.word	0x0f000001

08002784 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800278a:	463b      	mov	r3, r7
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002796:	4b21      	ldr	r3, [pc, #132]	; (800281c <MX_ADC2_Init+0x98>)
 8002798:	4a21      	ldr	r2, [pc, #132]	; (8002820 <MX_ADC2_Init+0x9c>)
 800279a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800279c:	4b1f      	ldr	r3, [pc, #124]	; (800281c <MX_ADC2_Init+0x98>)
 800279e:	2200      	movs	r2, #0
 80027a0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80027a2:	4b1e      	ldr	r3, [pc, #120]	; (800281c <MX_ADC2_Init+0x98>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80027a8:	4b1c      	ldr	r3, [pc, #112]	; (800281c <MX_ADC2_Init+0x98>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80027ae:	4b1b      	ldr	r3, [pc, #108]	; (800281c <MX_ADC2_Init+0x98>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80027b4:	4b19      	ldr	r3, [pc, #100]	; (800281c <MX_ADC2_Init+0x98>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027bc:	4b17      	ldr	r3, [pc, #92]	; (800281c <MX_ADC2_Init+0x98>)
 80027be:	2200      	movs	r2, #0
 80027c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027c2:	4b16      	ldr	r3, [pc, #88]	; (800281c <MX_ADC2_Init+0x98>)
 80027c4:	4a17      	ldr	r2, [pc, #92]	; (8002824 <MX_ADC2_Init+0xa0>)
 80027c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027c8:	4b14      	ldr	r3, [pc, #80]	; (800281c <MX_ADC2_Init+0x98>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80027ce:	4b13      	ldr	r3, [pc, #76]	; (800281c <MX_ADC2_Init+0x98>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80027d4:	4b11      	ldr	r3, [pc, #68]	; (800281c <MX_ADC2_Init+0x98>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027dc:	4b0f      	ldr	r3, [pc, #60]	; (800281c <MX_ADC2_Init+0x98>)
 80027de:	2201      	movs	r2, #1
 80027e0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80027e2:	480e      	ldr	r0, [pc, #56]	; (800281c <MX_ADC2_Init+0x98>)
 80027e4:	f001 fa4a 	bl	8003c7c <HAL_ADC_Init>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80027ee:	f000 fe41 	bl	8003474 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80027f2:	230c      	movs	r3, #12
 80027f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80027f6:	2301      	movs	r3, #1
 80027f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80027fe:	463b      	mov	r3, r7
 8002800:	4619      	mov	r1, r3
 8002802:	4806      	ldr	r0, [pc, #24]	; (800281c <MX_ADC2_Init+0x98>)
 8002804:	f001 fb5e 	bl	8003ec4 <HAL_ADC_ConfigChannel>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800280e:	f000 fe31 	bl	8003474 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20004ae0 	.word	0x20004ae0
 8002820:	40012100 	.word	0x40012100
 8002824:	0f000001 	.word	0x0f000001

08002828 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800282c:	4b14      	ldr	r3, [pc, #80]	; (8002880 <MX_RTC_Init+0x58>)
 800282e:	4a15      	ldr	r2, [pc, #84]	; (8002884 <MX_RTC_Init+0x5c>)
 8002830:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002832:	4b13      	ldr	r3, [pc, #76]	; (8002880 <MX_RTC_Init+0x58>)
 8002834:	2200      	movs	r2, #0
 8002836:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <MX_RTC_Init+0x58>)
 800283a:	227f      	movs	r2, #127	; 0x7f
 800283c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <MX_RTC_Init+0x58>)
 8002840:	22ff      	movs	r2, #255	; 0xff
 8002842:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002844:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <MX_RTC_Init+0x58>)
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800284a:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <MX_RTC_Init+0x58>)
 800284c:	2200      	movs	r2, #0
 800284e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <MX_RTC_Init+0x58>)
 8002852:	2200      	movs	r2, #0
 8002854:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002856:	480a      	ldr	r0, [pc, #40]	; (8002880 <MX_RTC_Init+0x58>)
 8002858:	f002 fdfe 	bl	8005458 <HAL_RTC_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002862:	f000 fe07 	bl	8003474 <Error_Handler>
  }
  /** Enable Calibrartion
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 8002866:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800286a:	4805      	ldr	r0, [pc, #20]	; (8002880 <MX_RTC_Init+0x58>)
 800286c:	f002 fed9 	bl	8005622 <HAL_RTCEx_SetCalibrationOutPut>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002876:	f000 fdfd 	bl	8003474 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20004c2c 	.word	0x20004c2c
 8002884:	40002800 	.word	0x40002800

08002888 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b096      	sub	sp, #88	; 0x58
 800288c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800288e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	609a      	str	r2, [r3, #8]
 800289a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800289c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	60da      	str	r2, [r3, #12]
 80028b4:	611a      	str	r2, [r3, #16]
 80028b6:	615a      	str	r2, [r3, #20]
 80028b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	2220      	movs	r2, #32
 80028be:	2100      	movs	r1, #0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f008 fc1d 	bl	800b100 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028c6:	4b3e      	ldr	r3, [pc, #248]	; (80029c0 <MX_TIM1_Init+0x138>)
 80028c8:	4a3e      	ldr	r2, [pc, #248]	; (80029c4 <MX_TIM1_Init+0x13c>)
 80028ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320;
 80028cc:	4b3c      	ldr	r3, [pc, #240]	; (80029c0 <MX_TIM1_Init+0x138>)
 80028ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80028d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d4:	4b3a      	ldr	r3, [pc, #232]	; (80029c0 <MX_TIM1_Init+0x138>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80028da:	4b39      	ldr	r3, [pc, #228]	; (80029c0 <MX_TIM1_Init+0x138>)
 80028dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e2:	4b37      	ldr	r3, [pc, #220]	; (80029c0 <MX_TIM1_Init+0x138>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028e8:	4b35      	ldr	r3, [pc, #212]	; (80029c0 <MX_TIM1_Init+0x138>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028ee:	4b34      	ldr	r3, [pc, #208]	; (80029c0 <MX_TIM1_Init+0x138>)
 80028f0:	2280      	movs	r2, #128	; 0x80
 80028f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028f4:	4832      	ldr	r0, [pc, #200]	; (80029c0 <MX_TIM1_Init+0x138>)
 80028f6:	f002 fed6 	bl	80056a6 <HAL_TIM_Base_Init>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002900:	f000 fdb8 	bl	8003474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002908:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800290a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800290e:	4619      	mov	r1, r3
 8002910:	482b      	ldr	r0, [pc, #172]	; (80029c0 <MX_TIM1_Init+0x138>)
 8002912:	f003 fda9 	bl	8006468 <HAL_TIM_ConfigClockSource>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800291c:	f000 fdaa 	bl	8003474 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002920:	4827      	ldr	r0, [pc, #156]	; (80029c0 <MX_TIM1_Init+0x138>)
 8002922:	f002 ff77 	bl	8005814 <HAL_TIM_PWM_Init>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800292c:	f000 fda2 	bl	8003474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002930:	2300      	movs	r3, #0
 8002932:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002934:	2300      	movs	r3, #0
 8002936:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002938:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800293c:	4619      	mov	r1, r3
 800293e:	4820      	ldr	r0, [pc, #128]	; (80029c0 <MX_TIM1_Init+0x138>)
 8002940:	f004 fb00 	bl	8006f44 <HAL_TIMEx_MasterConfigSynchronization>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800294a:	f000 fd93 	bl	8003474 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800294e:	2360      	movs	r3, #96	; 0x60
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002952:	2300      	movs	r3, #0
 8002954:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002956:	2300      	movs	r3, #0
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800295a:	2300      	movs	r3, #0
 800295c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800295e:	2300      	movs	r3, #0
 8002960:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002962:	2300      	movs	r3, #0
 8002964:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800296a:	220c      	movs	r2, #12
 800296c:	4619      	mov	r1, r3
 800296e:	4814      	ldr	r0, [pc, #80]	; (80029c0 <MX_TIM1_Init+0x138>)
 8002970:	f003 fcb8 	bl	80062e4 <HAL_TIM_PWM_ConfigChannel>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800297a:	f000 fd7b 	bl	8003474 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800297e:	2300      	movs	r3, #0
 8002980:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002982:	2300      	movs	r3, #0
 8002984:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002996:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002998:	2300      	movs	r3, #0
 800299a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800299c:	1d3b      	adds	r3, r7, #4
 800299e:	4619      	mov	r1, r3
 80029a0:	4807      	ldr	r0, [pc, #28]	; (80029c0 <MX_TIM1_Init+0x138>)
 80029a2:	f004 fb4b 	bl	800703c <HAL_TIMEx_ConfigBreakDeadTime>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80029ac:	f000 fd62 	bl	8003474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80029b0:	4803      	ldr	r0, [pc, #12]	; (80029c0 <MX_TIM1_Init+0x138>)
 80029b2:	f000 ff99 	bl	80038e8 <HAL_TIM_MspPostInit>

}
 80029b6:	bf00      	nop
 80029b8:	3758      	adds	r7, #88	; 0x58
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20004c50 	.word	0x20004c50
 80029c4:	40010000 	.word	0x40010000

080029c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08c      	sub	sp, #48	; 0x30
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029ce:	f107 030c 	add.w	r3, r7, #12
 80029d2:	2224      	movs	r2, #36	; 0x24
 80029d4:	2100      	movs	r1, #0
 80029d6:	4618      	mov	r0, r3
 80029d8:	f008 fb92 	bl	800b100 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029dc:	1d3b      	adds	r3, r7, #4
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029e4:	4b21      	ldr	r3, [pc, #132]	; (8002a6c <MX_TIM2_Init+0xa4>)
 80029e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80029ec:	4b1f      	ldr	r3, [pc, #124]	; (8002a6c <MX_TIM2_Init+0xa4>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f2:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <MX_TIM2_Init+0xa4>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80029f8:	4b1c      	ldr	r3, [pc, #112]	; (8002a6c <MX_TIM2_Init+0xa4>)
 80029fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a00:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <MX_TIM2_Init+0xa4>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a06:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <MX_TIM2_Init+0xa4>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a10:	2300      	movs	r3, #0
 8002a12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a14:	2301      	movs	r3, #1
 8002a16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002a1c:	230a      	movs	r3, #10
 8002a1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a20:	2300      	movs	r3, #0
 8002a22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a24:	2301      	movs	r3, #1
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002a2c:	230a      	movs	r3, #10
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002a30:	f107 030c 	add.w	r3, r7, #12
 8002a34:	4619      	mov	r1, r3
 8002a36:	480d      	ldr	r0, [pc, #52]	; (8002a6c <MX_TIM2_Init+0xa4>)
 8002a38:	f003 f97c 	bl	8005d34 <HAL_TIM_Encoder_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002a42:	f000 fd17 	bl	8003474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a46:	2300      	movs	r3, #0
 8002a48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a4e:	1d3b      	adds	r3, r7, #4
 8002a50:	4619      	mov	r1, r3
 8002a52:	4806      	ldr	r0, [pc, #24]	; (8002a6c <MX_TIM2_Init+0xa4>)
 8002a54:	f004 fa76 	bl	8006f44 <HAL_TIMEx_MasterConfigSynchronization>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002a5e:	f000 fd09 	bl	8003474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a62:	bf00      	nop
 8002a64:	3730      	adds	r7, #48	; 0x30
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20004ca0 	.word	0x20004ca0

08002a70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08c      	sub	sp, #48	; 0x30
 8002a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a76:	f107 030c 	add.w	r3, r7, #12
 8002a7a:	2224      	movs	r2, #36	; 0x24
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f008 fb3e 	bl	800b100 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a84:	1d3b      	adds	r3, r7, #4
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a8c:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <MX_TIM3_Init+0xa0>)
 8002a8e:	4a21      	ldr	r2, [pc, #132]	; (8002b14 <MX_TIM3_Init+0xa4>)
 8002a90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a92:	4b1f      	ldr	r3, [pc, #124]	; (8002b10 <MX_TIM3_Init+0xa0>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a98:	4b1d      	ldr	r3, [pc, #116]	; (8002b10 <MX_TIM3_Init+0xa0>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a9e:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <MX_TIM3_Init+0xa0>)
 8002aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aa4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aa6:	4b1a      	ldr	r3, [pc, #104]	; (8002b10 <MX_TIM3_Init+0xa0>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aac:	4b18      	ldr	r3, [pc, #96]	; (8002b10 <MX_TIM3_Init+0xa0>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002aba:	2301      	movs	r3, #1
 8002abc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002ac2:	230a      	movs	r3, #10
 8002ac4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002aca:	2301      	movs	r3, #1
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002ad2:	230a      	movs	r3, #10
 8002ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002ad6:	f107 030c 	add.w	r3, r7, #12
 8002ada:	4619      	mov	r1, r3
 8002adc:	480c      	ldr	r0, [pc, #48]	; (8002b10 <MX_TIM3_Init+0xa0>)
 8002ade:	f003 f929 	bl	8005d34 <HAL_TIM_Encoder_Init>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002ae8:	f000 fcc4 	bl	8003474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aec:	2300      	movs	r3, #0
 8002aee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002af4:	1d3b      	adds	r3, r7, #4
 8002af6:	4619      	mov	r1, r3
 8002af8:	4805      	ldr	r0, [pc, #20]	; (8002b10 <MX_TIM3_Init+0xa0>)
 8002afa:	f004 fa23 	bl	8006f44 <HAL_TIMEx_MasterConfigSynchronization>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002b04:	f000 fcb6 	bl	8003474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b08:	bf00      	nop
 8002b0a:	3730      	adds	r7, #48	; 0x30
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20004b98 	.word	0x20004b98
 8002b14:	40000400 	.word	0x40000400

08002b18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b1e:	f107 0310 	add.w	r3, r7, #16
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002b28:	463b      	mov	r3, r7
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	605a      	str	r2, [r3, #4]
 8002b30:	609a      	str	r2, [r3, #8]
 8002b32:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b34:	4b20      	ldr	r3, [pc, #128]	; (8002bb8 <MX_TIM4_Init+0xa0>)
 8002b36:	4a21      	ldr	r2, [pc, #132]	; (8002bbc <MX_TIM4_Init+0xa4>)
 8002b38:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8002b3a:	4b1f      	ldr	r3, [pc, #124]	; (8002bb8 <MX_TIM4_Init+0xa0>)
 8002b3c:	220f      	movs	r2, #15
 8002b3e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b40:	4b1d      	ldr	r3, [pc, #116]	; (8002bb8 <MX_TIM4_Init+0xa0>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8002b46:	4b1c      	ldr	r3, [pc, #112]	; (8002bb8 <MX_TIM4_Init+0xa0>)
 8002b48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002b4c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <MX_TIM4_Init+0xa0>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b54:	4b18      	ldr	r3, [pc, #96]	; (8002bb8 <MX_TIM4_Init+0xa0>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002b5a:	4817      	ldr	r0, [pc, #92]	; (8002bb8 <MX_TIM4_Init+0xa0>)
 8002b5c:	f002 ff72 	bl	8005a44 <HAL_TIM_IC_Init>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002b66:	f000 fc85 	bl	8003474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b72:	f107 0310 	add.w	r3, r7, #16
 8002b76:	4619      	mov	r1, r3
 8002b78:	480f      	ldr	r0, [pc, #60]	; (8002bb8 <MX_TIM4_Init+0xa0>)
 8002b7a:	f004 f9e3 	bl	8006f44 <HAL_TIMEx_MasterConfigSynchronization>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002b84:	f000 fc76 	bl	8003474 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002b98:	463b      	mov	r3, r7
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4806      	ldr	r0, [pc, #24]	; (8002bb8 <MX_TIM4_Init+0xa0>)
 8002ba0:	f003 fb04 	bl	80061ac <HAL_TIM_IC_ConfigChannel>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8002baa:	f000 fc63 	bl	8003474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002bae:	bf00      	nop
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20004a50 	.word	0x20004a50
 8002bbc:	40000800 	.word	0x40000800

08002bc0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bc6:	f107 0308 	add.w	r3, r7, #8
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
 8002bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bd4:	463b      	mov	r3, r7
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002bdc:	4b1d      	ldr	r3, [pc, #116]	; (8002c54 <MX_TIM5_Init+0x94>)
 8002bde:	4a1e      	ldr	r2, [pc, #120]	; (8002c58 <MX_TIM5_Init+0x98>)
 8002be0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16-1;
 8002be2:	4b1c      	ldr	r3, [pc, #112]	; (8002c54 <MX_TIM5_Init+0x94>)
 8002be4:	220f      	movs	r2, #15
 8002be6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002be8:	4b1a      	ldr	r3, [pc, #104]	; (8002c54 <MX_TIM5_Init+0x94>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002bee:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <MX_TIM5_Init+0x94>)
 8002bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bf4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bf6:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <MX_TIM5_Init+0x94>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bfc:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <MX_TIM5_Init+0x94>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002c02:	4814      	ldr	r0, [pc, #80]	; (8002c54 <MX_TIM5_Init+0x94>)
 8002c04:	f002 fd4f 	bl	80056a6 <HAL_TIM_Base_Init>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002c0e:	f000 fc31 	bl	8003474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002c18:	f107 0308 	add.w	r3, r7, #8
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	480d      	ldr	r0, [pc, #52]	; (8002c54 <MX_TIM5_Init+0x94>)
 8002c20:	f003 fc22 	bl	8006468 <HAL_TIM_ConfigClockSource>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002c2a:	f000 fc23 	bl	8003474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c36:	463b      	mov	r3, r7
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4806      	ldr	r0, [pc, #24]	; (8002c54 <MX_TIM5_Init+0x94>)
 8002c3c:	f004 f982 	bl	8006f44 <HAL_TIMEx_MasterConfigSynchronization>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002c46:	f000 fc15 	bl	8003474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002c4a:	bf00      	nop
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20004b4c 	.word	0x20004b4c
 8002c58:	40000c00 	.word	0x40000c00

08002c5c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b092      	sub	sp, #72	; 0x48
 8002c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
 8002c7c:	615a      	str	r2, [r3, #20]
 8002c7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c80:	1d3b      	adds	r3, r7, #4
 8002c82:	2220      	movs	r2, #32
 8002c84:	2100      	movs	r1, #0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f008 fa3a 	bl	800b100 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002c8c:	4b37      	ldr	r3, [pc, #220]	; (8002d6c <MX_TIM8_Init+0x110>)
 8002c8e:	4a38      	ldr	r2, [pc, #224]	; (8002d70 <MX_TIM8_Init+0x114>)
 8002c90:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002c92:	4b36      	ldr	r3, [pc, #216]	; (8002d6c <MX_TIM8_Init+0x110>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c98:	4b34      	ldr	r3, [pc, #208]	; (8002d6c <MX_TIM8_Init+0x110>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8002c9e:	4b33      	ldr	r3, [pc, #204]	; (8002d6c <MX_TIM8_Init+0x110>)
 8002ca0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002ca4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ca6:	4b31      	ldr	r3, [pc, #196]	; (8002d6c <MX_TIM8_Init+0x110>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002cac:	4b2f      	ldr	r3, [pc, #188]	; (8002d6c <MX_TIM8_Init+0x110>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cb2:	4b2e      	ldr	r3, [pc, #184]	; (8002d6c <MX_TIM8_Init+0x110>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002cb8:	482c      	ldr	r0, [pc, #176]	; (8002d6c <MX_TIM8_Init+0x110>)
 8002cba:	f002 fdab 	bl	8005814 <HAL_TIM_PWM_Init>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002cc4:	f000 fbd6 	bl	8003474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002cd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4825      	ldr	r0, [pc, #148]	; (8002d6c <MX_TIM8_Init+0x110>)
 8002cd8:	f004 f934 	bl	8006f44 <HAL_TIMEx_MasterConfigSynchronization>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002ce2:	f000 fbc7 	bl	8003474 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ce6:	2360      	movs	r3, #96	; 0x60
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d06:	2200      	movs	r2, #0
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4818      	ldr	r0, [pc, #96]	; (8002d6c <MX_TIM8_Init+0x110>)
 8002d0c:	f003 faea 	bl	80062e4 <HAL_TIM_PWM_ConfigChannel>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002d16:	f000 fbad 	bl	8003474 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d1e:	2204      	movs	r2, #4
 8002d20:	4619      	mov	r1, r3
 8002d22:	4812      	ldr	r0, [pc, #72]	; (8002d6c <MX_TIM8_Init+0x110>)
 8002d24:	f003 fade 	bl	80062e4 <HAL_TIM_PWM_ConfigChannel>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8002d2e:	f000 fba1 	bl	8003474 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d32:	2300      	movs	r3, #0
 8002d34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002d50:	1d3b      	adds	r3, r7, #4
 8002d52:	4619      	mov	r1, r3
 8002d54:	4805      	ldr	r0, [pc, #20]	; (8002d6c <MX_TIM8_Init+0x110>)
 8002d56:	f004 f971 	bl	800703c <HAL_TIMEx_ConfigBreakDeadTime>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8002d60:	f000 fb88 	bl	8003474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002d64:	bf00      	nop
 8002d66:	3748      	adds	r7, #72	; 0x48
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20004a08 	.word	0x20004a08
 8002d70:	40010400 	.word	0x40010400

08002d74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d78:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <MX_USART3_UART_Init+0x4c>)
 8002d7a:	4a12      	ldr	r2, [pc, #72]	; (8002dc4 <MX_USART3_UART_Init+0x50>)
 8002d7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <MX_USART3_UART_Init+0x4c>)
 8002d80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d86:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <MX_USART3_UART_Init+0x4c>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <MX_USART3_UART_Init+0x4c>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <MX_USART3_UART_Init+0x4c>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d98:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <MX_USART3_UART_Init+0x4c>)
 8002d9a:	220c      	movs	r2, #12
 8002d9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d9e:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <MX_USART3_UART_Init+0x4c>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <MX_USART3_UART_Init+0x4c>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002daa:	4805      	ldr	r0, [pc, #20]	; (8002dc0 <MX_USART3_UART_Init+0x4c>)
 8002dac:	f004 f9ac 	bl	8007108 <HAL_UART_Init>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002db6:	f000 fb5d 	bl	8003474 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20004a98 	.word	0x20004a98
 8002dc4:	40004800 	.word	0x40004800

08002dc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08a      	sub	sp, #40	; 0x28
 8002dcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dce:	f107 0314 	add.w	r3, r7, #20
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	605a      	str	r2, [r3, #4]
 8002dd8:	609a      	str	r2, [r3, #8]
 8002dda:	60da      	str	r2, [r3, #12]
 8002ddc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	4b49      	ldr	r3, [pc, #292]	; (8002f08 <MX_GPIO_Init+0x140>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	4a48      	ldr	r2, [pc, #288]	; (8002f08 <MX_GPIO_Init+0x140>)
 8002de8:	f043 0310 	orr.w	r3, r3, #16
 8002dec:	6313      	str	r3, [r2, #48]	; 0x30
 8002dee:	4b46      	ldr	r3, [pc, #280]	; (8002f08 <MX_GPIO_Init+0x140>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	4b42      	ldr	r3, [pc, #264]	; (8002f08 <MX_GPIO_Init+0x140>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	4a41      	ldr	r2, [pc, #260]	; (8002f08 <MX_GPIO_Init+0x140>)
 8002e04:	f043 0304 	orr.w	r3, r3, #4
 8002e08:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0a:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <MX_GPIO_Init+0x140>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	4b3b      	ldr	r3, [pc, #236]	; (8002f08 <MX_GPIO_Init+0x140>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	4a3a      	ldr	r2, [pc, #232]	; (8002f08 <MX_GPIO_Init+0x140>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	6313      	str	r3, [r2, #48]	; 0x30
 8002e26:	4b38      	ldr	r3, [pc, #224]	; (8002f08 <MX_GPIO_Init+0x140>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	607b      	str	r3, [r7, #4]
 8002e36:	4b34      	ldr	r3, [pc, #208]	; (8002f08 <MX_GPIO_Init+0x140>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	4a33      	ldr	r2, [pc, #204]	; (8002f08 <MX_GPIO_Init+0x140>)
 8002e3c:	f043 0308 	orr.w	r3, r3, #8
 8002e40:	6313      	str	r3, [r2, #48]	; 0x30
 8002e42:	4b31      	ldr	r3, [pc, #196]	; (8002f08 <MX_GPIO_Init+0x140>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	607b      	str	r3, [r7, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	603b      	str	r3, [r7, #0]
 8002e52:	4b2d      	ldr	r3, [pc, #180]	; (8002f08 <MX_GPIO_Init+0x140>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	4a2c      	ldr	r2, [pc, #176]	; (8002f08 <MX_GPIO_Init+0x140>)
 8002e58:	f043 0302 	orr.w	r3, r3, #2
 8002e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5e:	4b2a      	ldr	r3, [pc, #168]	; (8002f08 <MX_GPIO_Init+0x140>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8002e70:	4826      	ldr	r0, [pc, #152]	; (8002f0c <MX_GPIO_Init+0x144>)
 8002e72:	f001 fd85 	bl	8004980 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8002e76:	2200      	movs	r2, #0
 8002e78:	213c      	movs	r1, #60	; 0x3c
 8002e7a:	4825      	ldr	r0, [pc, #148]	; (8002f10 <MX_GPIO_Init+0x148>)
 8002e7c:	f001 fd80 	bl	8004980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8002e80:	2200      	movs	r2, #0
 8002e82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e86:	4823      	ldr	r0, [pc, #140]	; (8002f14 <MX_GPIO_Init+0x14c>)
 8002e88:	f001 fd7a 	bl	8004980 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8002e8c:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8002e90:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e92:	2301      	movs	r3, #1
 8002e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e9e:	f107 0314 	add.w	r3, r7, #20
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4819      	ldr	r0, [pc, #100]	; (8002f0c <MX_GPIO_Init+0x144>)
 8002ea6:	f001 fbcf 	bl	8004648 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8002eaa:	233c      	movs	r3, #60	; 0x3c
 8002eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eba:	f107 0314 	add.w	r3, r7, #20
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4813      	ldr	r0, [pc, #76]	; (8002f10 <MX_GPIO_Init+0x148>)
 8002ec2:	f001 fbc1 	bl	8004648 <HAL_GPIO_Init>

  /*Configure GPIO pin : USRBUT_Pin */
  GPIO_InitStruct.Pin = USRBUT_Pin;
 8002ec6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USRBUT_GPIO_Port, &GPIO_InitStruct);
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	4619      	mov	r1, r3
 8002eda:	480e      	ldr	r0, [pc, #56]	; (8002f14 <MX_GPIO_Init+0x14c>)
 8002edc:	f001 fbb4 	bl	8004648 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8002ee0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8002ef2:	f107 0314 	add.w	r3, r7, #20
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4806      	ldr	r0, [pc, #24]	; (8002f14 <MX_GPIO_Init+0x14c>)
 8002efa:	f001 fba5 	bl	8004648 <HAL_GPIO_Init>

}
 8002efe:	bf00      	nop
 8002f00:	3728      	adds	r7, #40	; 0x28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40020000 	.word	0x40020000
 8002f14:	40020c00 	.word	0x40020c00

08002f18 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
	/*Prevent unused argument(s) compilation warning*/
	UNUSED(huart);
	HAL_UART_Transmit(&huart3,(uint8_t *)aRxBuffer,10,0xFFFF); //might not nd
 8002f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f24:	220a      	movs	r2, #10
 8002f26:	4904      	ldr	r1, [pc, #16]	; (8002f38 <HAL_UART_RxCpltCallback+0x20>)
 8002f28:	4804      	ldr	r0, [pc, #16]	; (8002f3c <HAL_UART_RxCpltCallback+0x24>)
 8002f2a:	f004 f93a 	bl	80071a2 <HAL_UART_Transmit>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	20004c9c 	.word	0x20004c9c
 8002f3c:	20004a98 	.word	0x20004a98

08002f40 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08e      	sub	sp, #56	; 0x38
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t test[20] = "Testing Pi";
 8002f48:	4a2e      	ldr	r2, [pc, #184]	; (8003004 <StartDefaultTask+0xc4>)
 8002f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f50:	c303      	stmia	r3!, {r0, r1}
 8002f52:	801a      	strh	r2, [r3, #0]
 8002f54:	3302      	adds	r3, #2
 8002f56:	0c12      	lsrs	r2, r2, #16
 8002f58:	701a      	strb	r2, [r3, #0]
 8002f5a:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	605a      	str	r2, [r3, #4]
 8002f64:	721a      	strb	r2, [r3, #8]
	uint8_t checkPi[1];

	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 1);
 8002f66:	2201      	movs	r2, #1
 8002f68:	4927      	ldr	r1, [pc, #156]	; (8003008 <StartDefaultTask+0xc8>)
 8002f6a:	4828      	ldr	r0, [pc, #160]	; (800300c <StartDefaultTask+0xcc>)
 8002f6c:	f004 f9f0 	bl	8007350 <HAL_UART_Receive_IT>
		OLED_ShowString(5,5,test);
 8002f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f74:	461a      	mov	r2, r3
 8002f76:	2105      	movs	r1, #5
 8002f78:	2005      	movs	r0, #5
 8002f7a:	f007 ffcb 	bl	800af14 <OLED_ShowString>
//		sprintf(checkPi, "Pi cmd: %s\0", aRxBuffer);
//		OLED_ShowString(10, 20, checkPi);
		ultraDistCheck();
 8002f7e:	f7fe f913 	bl	80011a8 <ultraDistCheck>
		HAL_Delay(200);
 8002f82:	20c8      	movs	r0, #200	; 0xc8
 8002f84:	f000 fe56 	bl	8003c34 <HAL_Delay>
		sprintf(ultra, "uDistF: %u\0", uDistFinal);
 8002f88:	4b21      	ldr	r3, [pc, #132]	; (8003010 <StartDefaultTask+0xd0>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	f107 0310 	add.w	r3, r7, #16
 8002f90:	4920      	ldr	r1, [pc, #128]	; (8003014 <StartDefaultTask+0xd4>)
 8002f92:	4618      	mov	r0, r3
 8002f94:	f008 f8bc 	bl	800b110 <siprintf>
		OLED_ShowString(10, 50, ultra);
 8002f98:	f107 0310 	add.w	r3, r7, #16
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	2132      	movs	r1, #50	; 0x32
 8002fa0:	200a      	movs	r0, #10
 8002fa2:	f007 ffb7 	bl	800af14 <OLED_ShowString>
//		OLED_ShowString(10, 25, ultra);
//
//		sprintf(ultra, "uDist2: %u\0", uDistCheck2);
//		OLED_ShowString(10, 35, ultra);

		irLeft();
 8002fa6:	f7fe f947 	bl	8001238 <irLeft>
		HAL_Delay(100);
 8002faa:	2064      	movs	r0, #100	; 0x64
 8002fac:	f000 fe42 	bl	8003c34 <HAL_Delay>
		sprintf(ultra, "IR left: %u\0", ir1Dist);
 8002fb0:	4b19      	ldr	r3, [pc, #100]	; (8003018 <StartDefaultTask+0xd8>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	f107 0310 	add.w	r3, r7, #16
 8002fb8:	4918      	ldr	r1, [pc, #96]	; (800301c <StartDefaultTask+0xdc>)
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f008 f8a8 	bl	800b110 <siprintf>
		OLED_ShowString(10, 30, ultra);
 8002fc0:	f107 0310 	add.w	r3, r7, #16
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	211e      	movs	r1, #30
 8002fc8:	200a      	movs	r0, #10
 8002fca:	f007 ffa3 	bl	800af14 <OLED_ShowString>

		irRight();
 8002fce:	f7fe f9a7 	bl	8001320 <irRight>
		HAL_Delay(100);
 8002fd2:	2064      	movs	r0, #100	; 0x64
 8002fd4:	f000 fe2e 	bl	8003c34 <HAL_Delay>
		sprintf(ultra, "IR right: %u\0", ir2Dist);
 8002fd8:	4b11      	ldr	r3, [pc, #68]	; (8003020 <StartDefaultTask+0xe0>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	f107 0310 	add.w	r3, r7, #16
 8002fe0:	4910      	ldr	r1, [pc, #64]	; (8003024 <StartDefaultTask+0xe4>)
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f008 f894 	bl	800b110 <siprintf>
		OLED_ShowString(10, 40, ultra);
 8002fe8:	f107 0310 	add.w	r3, r7, #16
 8002fec:	461a      	mov	r2, r3
 8002fee:	2128      	movs	r1, #40	; 0x28
 8002ff0:	200a      	movs	r0, #10
 8002ff2:	f007 ff8f 	bl	800af14 <OLED_ShowString>


		OLED_Refresh_Gram();
 8002ff6:	f007 fe19 	bl	800ac2c <OLED_Refresh_Gram>
		//	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
		osDelay(100);
 8002ffa:	2064      	movs	r0, #100	; 0x64
 8002ffc:	f005 f9a0 	bl	8008340 <osDelay>
	{
 8003000:	e7b1      	b.n	8002f66 <StartDefaultTask+0x26>
 8003002:	bf00      	nop
 8003004:	0800c934 	.word	0x0800c934
 8003008:	20004c9c 	.word	0x20004c9c
 800300c:	20004a98 	.word	0x20004a98
 8003010:	200000c0 	.word	0x200000c0
 8003014:	0800c908 	.word	0x0800c908
 8003018:	200000c4 	.word	0x200000c4
 800301c:	0800c914 	.word	0x0800c914
 8003020:	200000c8 	.word	0x200000c8
 8003024:	0800c924 	.word	0x0800c924

08003028 <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8003030:	2100      	movs	r1, #0
 8003032:	48b4      	ldr	r0, [pc, #720]	; (8003304 <motor+0x2dc>)
 8003034:	f002 fc3e 	bl	80058b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8003038:	2104      	movs	r1, #4
 800303a:	48b2      	ldr	r0, [pc, #712]	; (8003304 <motor+0x2dc>)
 800303c:	f002 fc3a 	bl	80058b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003040:	210c      	movs	r1, #12
 8003042:	48b1      	ldr	r0, [pc, #708]	; (8003308 <motor+0x2e0>)
 8003044:	f002 fc36 	bl	80058b4 <HAL_TIM_PWM_Start>
	htim1.Instance->CCR4 = 56;
 8003048:	4baf      	ldr	r3, [pc, #700]	; (8003308 <motor+0x2e0>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2238      	movs	r2, #56	; 0x38
 800304e:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(500);
 8003050:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003054:	f000 fdee 	bl	8003c34 <HAL_Delay>
	htim1.Instance->CCR4 = 104;
 8003058:	4bab      	ldr	r3, [pc, #684]	; (8003308 <motor+0x2e0>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2268      	movs	r2, #104	; 0x68
 800305e:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(500);
 8003060:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003064:	f000 fde6 	bl	8003c34 <HAL_Delay>
	htim1.Instance->CCR4 = 73;
 8003068:	4ba7      	ldr	r3, [pc, #668]	; (8003308 <motor+0x2e0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2249      	movs	r2, #73	; 0x49
 800306e:	641a      	str	r2, [r3, #64]	; 0x40
	*aRxBuffer = '\0';
 8003070:	4ba6      	ldr	r3, [pc, #664]	; (800330c <motor+0x2e4>)
 8003072:	2200      	movs	r2, #0
 8003074:	701a      	strb	r2, [r3, #0]
	uint8_t toRpiTest[6] = "NiHao";
 8003076:	4aa6      	ldr	r2, [pc, #664]	; (8003310 <motor+0x2e8>)
 8003078:	f107 0310 	add.w	r3, r7, #16
 800307c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003080:	6018      	str	r0, [r3, #0]
 8003082:	3304      	adds	r3, #4
 8003084:	8019      	strh	r1, [r3, #0]
		for(;;)
		  {
			switch (*aRxBuffer)
 8003086:	4ba1      	ldr	r3, [pc, #644]	; (800330c <motor+0x2e4>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b5a      	cmp	r3, #90	; 0x5a
 800308c:	f200 81ce 	bhi.w	800342c <motor+0x404>
 8003090:	a201      	add	r2, pc, #4	; (adr r2, 8003098 <motor+0x70>)
 8003092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003096:	bf00      	nop
 8003098:	08003205 	.word	0x08003205
 800309c:	0800342d 	.word	0x0800342d
 80030a0:	0800342d 	.word	0x0800342d
 80030a4:	0800342d 	.word	0x0800342d
 80030a8:	0800342d 	.word	0x0800342d
 80030ac:	0800342d 	.word	0x0800342d
 80030b0:	0800342d 	.word	0x0800342d
 80030b4:	0800342d 	.word	0x0800342d
 80030b8:	0800342d 	.word	0x0800342d
 80030bc:	0800342d 	.word	0x0800342d
 80030c0:	0800342d 	.word	0x0800342d
 80030c4:	0800342d 	.word	0x0800342d
 80030c8:	0800342d 	.word	0x0800342d
 80030cc:	0800342d 	.word	0x0800342d
 80030d0:	0800342d 	.word	0x0800342d
 80030d4:	0800342d 	.word	0x0800342d
 80030d8:	0800342d 	.word	0x0800342d
 80030dc:	0800342d 	.word	0x0800342d
 80030e0:	0800342d 	.word	0x0800342d
 80030e4:	0800342d 	.word	0x0800342d
 80030e8:	0800342d 	.word	0x0800342d
 80030ec:	0800342d 	.word	0x0800342d
 80030f0:	0800342d 	.word	0x0800342d
 80030f4:	0800342d 	.word	0x0800342d
 80030f8:	0800342d 	.word	0x0800342d
 80030fc:	0800342d 	.word	0x0800342d
 8003100:	0800342d 	.word	0x0800342d
 8003104:	0800342d 	.word	0x0800342d
 8003108:	0800342d 	.word	0x0800342d
 800310c:	0800342d 	.word	0x0800342d
 8003110:	0800342d 	.word	0x0800342d
 8003114:	0800342d 	.word	0x0800342d
 8003118:	0800342d 	.word	0x0800342d
 800311c:	08003295 	.word	0x08003295
 8003120:	0800329d 	.word	0x0800329d
 8003124:	080032a5 	.word	0x080032a5
 8003128:	080032ad 	.word	0x080032ad
 800312c:	080032b5 	.word	0x080032b5
 8003130:	080032bd 	.word	0x080032bd
 8003134:	080032c5 	.word	0x080032c5
 8003138:	080032cd 	.word	0x080032cd
 800313c:	080032d5 	.word	0x080032d5
 8003140:	080032dd 	.word	0x080032dd
 8003144:	0800342d 	.word	0x0800342d
 8003148:	0800342d 	.word	0x0800342d
 800314c:	0800342d 	.word	0x0800342d
 8003150:	0800342d 	.word	0x0800342d
 8003154:	0800342d 	.word	0x0800342d
 8003158:	0800324d 	.word	0x0800324d
 800315c:	08003255 	.word	0x08003255
 8003160:	0800325d 	.word	0x0800325d
 8003164:	08003265 	.word	0x08003265
 8003168:	0800326d 	.word	0x0800326d
 800316c:	08003275 	.word	0x08003275
 8003170:	0800327d 	.word	0x0800327d
 8003174:	08003285 	.word	0x08003285
 8003178:	0800328d 	.word	0x0800328d
 800317c:	08003245 	.word	0x08003245
 8003180:	0800342d 	.word	0x0800342d
 8003184:	0800342d 	.word	0x0800342d
 8003188:	0800342d 	.word	0x0800342d
 800318c:	0800342d 	.word	0x0800342d
 8003190:	0800342d 	.word	0x0800342d
 8003194:	0800342d 	.word	0x0800342d
 8003198:	0800342d 	.word	0x0800342d
 800319c:	0800342d 	.word	0x0800342d
 80031a0:	0800342d 	.word	0x0800342d
 80031a4:	0800342d 	.word	0x0800342d
 80031a8:	0800342d 	.word	0x0800342d
 80031ac:	080032fd 	.word	0x080032fd
 80031b0:	0800342d 	.word	0x0800342d
 80031b4:	0800342d 	.word	0x0800342d
 80031b8:	08003211 	.word	0x08003211
 80031bc:	0800342d 	.word	0x0800342d
 80031c0:	0800342d 	.word	0x0800342d
 80031c4:	0800322d 	.word	0x0800322d
 80031c8:	080032e5 	.word	0x080032e5
 80031cc:	0800342d 	.word	0x0800342d
 80031d0:	0800342d 	.word	0x0800342d
 80031d4:	0800342d 	.word	0x0800342d
 80031d8:	0800342d 	.word	0x0800342d
 80031dc:	080032f5 	.word	0x080032f5
 80031e0:	080032ed 	.word	0x080032ed
 80031e4:	0800342d 	.word	0x0800342d
 80031e8:	0800342d 	.word	0x0800342d
 80031ec:	0800331d 	.word	0x0800331d
 80031f0:	080033f1 	.word	0x080033f1
 80031f4:	080033f7 	.word	0x080033f7
 80031f8:	08003403 	.word	0x08003403
 80031fc:	08003411 	.word	0x08003411
 8003200:	08003427 	.word	0x08003427
			{
			case '\0': // initialize
				HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 1);
 8003204:	2201      	movs	r2, #1
 8003206:	4941      	ldr	r1, [pc, #260]	; (800330c <motor+0x2e4>)
 8003208:	4842      	ldr	r0, [pc, #264]	; (8003314 <motor+0x2ec>)
 800320a:	f004 f8a1 	bl	8007350 <HAL_UART_Receive_IT>
				break;
 800320e:	e113      	b.n	8003438 <motor+0x410>
			case 'H':
				HAL_UART_Transmit_IT(&huart3,(uint8_t *)&toRpiTest,6);
 8003210:	f107 0310 	add.w	r3, r7, #16
 8003214:	2206      	movs	r2, #6
 8003216:	4619      	mov	r1, r3
 8003218:	483e      	ldr	r0, [pc, #248]	; (8003314 <motor+0x2ec>)
 800321a:	f004 f854 	bl	80072c6 <HAL_UART_Transmit_IT>
				osDelay(50);
 800321e:	2032      	movs	r0, #50	; 0x32
 8003220:	f005 f88e 	bl	8008340 <osDelay>
				*aRxBuffer = 'Z';
 8003224:	4b39      	ldr	r3, [pc, #228]	; (800330c <motor+0x2e4>)
 8003226:	225a      	movs	r2, #90	; 0x5a
 8003228:	701a      	strb	r2, [r3, #0]
				break;
 800322a:	e105      	b.n	8003438 <motor+0x410>
			case 'K':
				HAL_UART_Transmit_IT(&huart3,(uint8_t *)"OK?\n",4);
 800322c:	2204      	movs	r2, #4
 800322e:	493a      	ldr	r1, [pc, #232]	; (8003318 <motor+0x2f0>)
 8003230:	4838      	ldr	r0, [pc, #224]	; (8003314 <motor+0x2ec>)
 8003232:	f004 f848 	bl	80072c6 <HAL_UART_Transmit_IT>
				osDelay(50);
 8003236:	2032      	movs	r0, #50	; 0x32
 8003238:	f005 f882 	bl	8008340 <osDelay>
				*aRxBuffer = 'Z';
 800323c:	4b33      	ldr	r3, [pc, #204]	; (800330c <motor+0x2e4>)
 800323e:	225a      	movs	r2, #90	; 0x5a
 8003240:	701a      	strb	r2, [r3, #0]
				break;
 8003242:	e0f9      	b.n	8003438 <motor+0x410>
			//========================Forward========================
			case '9':
				forward(0);break;
 8003244:	2000      	movs	r0, #0
 8003246:	f7fe fe57 	bl	8001ef8 <forward>
 800324a:	e0f5      	b.n	8003438 <motor+0x410>
			case '0':
				forward(1);break;
 800324c:	2001      	movs	r0, #1
 800324e:	f7fe fe53 	bl	8001ef8 <forward>
 8003252:	e0f1      	b.n	8003438 <motor+0x410>
			case '1':
				forward(2);break;
 8003254:	2002      	movs	r0, #2
 8003256:	f7fe fe4f 	bl	8001ef8 <forward>
 800325a:	e0ed      	b.n	8003438 <motor+0x410>
			case '2':
				forward(3);break;
 800325c:	2003      	movs	r0, #3
 800325e:	f7fe fe4b 	bl	8001ef8 <forward>
 8003262:	e0e9      	b.n	8003438 <motor+0x410>
			case '3':
				forward(4);break;
 8003264:	2004      	movs	r0, #4
 8003266:	f7fe fe47 	bl	8001ef8 <forward>
 800326a:	e0e5      	b.n	8003438 <motor+0x410>
			case '4':
				forward(5);break;
 800326c:	2005      	movs	r0, #5
 800326e:	f7fe fe43 	bl	8001ef8 <forward>
 8003272:	e0e1      	b.n	8003438 <motor+0x410>
			case '5':
				forward(6);break;
 8003274:	2006      	movs	r0, #6
 8003276:	f7fe fe3f 	bl	8001ef8 <forward>
 800327a:	e0dd      	b.n	8003438 <motor+0x410>
			case '6':
				forward(7);break;
 800327c:	2007      	movs	r0, #7
 800327e:	f7fe fe3b 	bl	8001ef8 <forward>
 8003282:	e0d9      	b.n	8003438 <motor+0x410>
			case '7':
				forward(8);break;
 8003284:	2008      	movs	r0, #8
 8003286:	f7fe fe37 	bl	8001ef8 <forward>
 800328a:	e0d5      	b.n	8003438 <motor+0x410>
			case '8':
				forward(9);break;
 800328c:	2009      	movs	r0, #9
 800328e:	f7fe fe33 	bl	8001ef8 <forward>
 8003292:	e0d1      	b.n	8003438 <motor+0x410>
			//========================Reverse========================
			case 33:
				reverse(1);break;
 8003294:	2001      	movs	r0, #1
 8003296:	f7fe ff53 	bl	8002140 <reverse>
 800329a:	e0cd      	b.n	8003438 <motor+0x410>
			case 34:
				reverse(2);break;
 800329c:	2002      	movs	r0, #2
 800329e:	f7fe ff4f 	bl	8002140 <reverse>
 80032a2:	e0c9      	b.n	8003438 <motor+0x410>
			case 35:
				reverse(3);break;
 80032a4:	2003      	movs	r0, #3
 80032a6:	f7fe ff4b 	bl	8002140 <reverse>
 80032aa:	e0c5      	b.n	8003438 <motor+0x410>
			case 36:
				reverse(4);break;
 80032ac:	2004      	movs	r0, #4
 80032ae:	f7fe ff47 	bl	8002140 <reverse>
 80032b2:	e0c1      	b.n	8003438 <motor+0x410>
			case 37:
				reverse(5);break;
 80032b4:	2005      	movs	r0, #5
 80032b6:	f7fe ff43 	bl	8002140 <reverse>
 80032ba:	e0bd      	b.n	8003438 <motor+0x410>
			case 38:
				reverse(6);break;
 80032bc:	2006      	movs	r0, #6
 80032be:	f7fe ff3f 	bl	8002140 <reverse>
 80032c2:	e0b9      	b.n	8003438 <motor+0x410>
			case 39:
				reverse(7);break;
 80032c4:	2007      	movs	r0, #7
 80032c6:	f7fe ff3b 	bl	8002140 <reverse>
 80032ca:	e0b5      	b.n	8003438 <motor+0x410>
			case 40:
				reverse(8);break;
 80032cc:	2008      	movs	r0, #8
 80032ce:	f7fe ff37 	bl	8002140 <reverse>
 80032d2:	e0b1      	b.n	8003438 <motor+0x410>
			case 41:
				reverse(9);break;
 80032d4:	2009      	movs	r0, #9
 80032d6:	f7fe ff33 	bl	8002140 <reverse>
 80032da:	e0ad      	b.n	8003438 <motor+0x410>
			case 42:
				reverse(0);break;
 80032dc:	2000      	movs	r0, #0
 80032de:	f7fe ff2f 	bl	8002140 <reverse>
 80032e2:	e0a9      	b.n	8003438 <motor+0x410>
			//========================Turn========================
			case 'L':
				spotTurn(1);break;
 80032e4:	2001      	movs	r0, #1
 80032e6:	f7ff f84f 	bl	8002388 <spotTurn>
 80032ea:	e0a5      	b.n	8003438 <motor+0x410>
			case 'R':
				spotTurn(2);break;
 80032ec:	2002      	movs	r0, #2
 80032ee:	f7ff f84b 	bl	8002388 <spotTurn>
 80032f2:	e0a1      	b.n	8003438 <motor+0x410>
			case 'Q':
				degTurn(1);break;
 80032f4:	2001      	movs	r0, #1
 80032f6:	f7fe fdb3 	bl	8001e60 <degTurn>
 80032fa:	e09d      	b.n	8003438 <motor+0x410>
			case 'E':
				degTurn(2);break;
 80032fc:	2002      	movs	r0, #2
 80032fe:	f7fe fdaf 	bl	8001e60 <degTurn>
 8003302:	e099      	b.n	8003438 <motor+0x410>
 8003304:	20004a08 	.word	0x20004a08
 8003308:	20004c50 	.word	0x20004c50
 800330c:	20004c9c 	.word	0x20004c9c
 8003310:	0800c954 	.word	0x0800c954
 8003314:	20004a98 	.word	0x20004a98
 8003318:	0800c948 	.word	0x0800c948
			case 'U':
				ultraDistCheck();
 800331c:	f7fd ff44 	bl	80011a8 <ultraDistCheck>
				HAL_Delay(200);
 8003320:	20c8      	movs	r0, #200	; 0xc8
 8003322:	f000 fc87 	bl	8003c34 <HAL_Delay>
				char reply[] = "000\n";
 8003326:	4a49      	ldr	r2, [pc, #292]	; (800344c <motor+0x424>)
 8003328:	f107 0308 	add.w	r3, r7, #8
 800332c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003330:	6018      	str	r0, [r3, #0]
 8003332:	3304      	adds	r3, #4
 8003334:	7019      	strb	r1, [r3, #0]
				reply[0] += uDistFinal / 100 % 10;
 8003336:	7a38      	ldrb	r0, [r7, #8]
 8003338:	4b45      	ldr	r3, [pc, #276]	; (8003450 <motor+0x428>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a45      	ldr	r2, [pc, #276]	; (8003454 <motor+0x42c>)
 800333e:	fb82 1203 	smull	r1, r2, r2, r3
 8003342:	1152      	asrs	r2, r2, #5
 8003344:	17db      	asrs	r3, r3, #31
 8003346:	1ad2      	subs	r2, r2, r3
 8003348:	4b43      	ldr	r3, [pc, #268]	; (8003458 <motor+0x430>)
 800334a:	fb83 1302 	smull	r1, r3, r3, r2
 800334e:	1099      	asrs	r1, r3, #2
 8003350:	17d3      	asrs	r3, r2, #31
 8003352:	1ac9      	subs	r1, r1, r3
 8003354:	460b      	mov	r3, r1
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	1ad1      	subs	r1, r2, r3
 800335e:	b2cb      	uxtb	r3, r1
 8003360:	4403      	add	r3, r0
 8003362:	b2db      	uxtb	r3, r3
 8003364:	723b      	strb	r3, [r7, #8]
				reply[1] += uDistFinal / 10 % 10;
 8003366:	7a78      	ldrb	r0, [r7, #9]
 8003368:	4b39      	ldr	r3, [pc, #228]	; (8003450 <motor+0x428>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a3a      	ldr	r2, [pc, #232]	; (8003458 <motor+0x430>)
 800336e:	fb82 1203 	smull	r1, r2, r2, r3
 8003372:	1092      	asrs	r2, r2, #2
 8003374:	17db      	asrs	r3, r3, #31
 8003376:	1ad2      	subs	r2, r2, r3
 8003378:	4b37      	ldr	r3, [pc, #220]	; (8003458 <motor+0x430>)
 800337a:	fb83 1302 	smull	r1, r3, r3, r2
 800337e:	1099      	asrs	r1, r3, #2
 8003380:	17d3      	asrs	r3, r2, #31
 8003382:	1ac9      	subs	r1, r1, r3
 8003384:	460b      	mov	r3, r1
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	1ad1      	subs	r1, r2, r3
 800338e:	b2cb      	uxtb	r3, r1
 8003390:	4403      	add	r3, r0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	727b      	strb	r3, [r7, #9]
				reply[2] += uDistFinal % 10;
 8003396:	7ab8      	ldrb	r0, [r7, #10]
 8003398:	4b2d      	ldr	r3, [pc, #180]	; (8003450 <motor+0x428>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4b2e      	ldr	r3, [pc, #184]	; (8003458 <motor+0x430>)
 800339e:	fb83 1302 	smull	r1, r3, r3, r2
 80033a2:	1099      	asrs	r1, r3, #2
 80033a4:	17d3      	asrs	r3, r2, #31
 80033a6:	1ac9      	subs	r1, r1, r3
 80033a8:	460b      	mov	r3, r1
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	1ad1      	subs	r1, r2, r3
 80033b2:	b2cb      	uxtb	r3, r1
 80033b4:	4403      	add	r3, r0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	72bb      	strb	r3, [r7, #10]
				if (uDistFinal > 999)
 80033ba:	4b25      	ldr	r3, [pc, #148]	; (8003450 <motor+0x428>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033c2:	db01      	blt.n	80033c8 <motor+0x3a0>
					reply[0] = '9';
 80033c4:	2339      	movs	r3, #57	; 0x39
 80033c6:	723b      	strb	r3, [r7, #8]
				HAL_UART_Transmit_IT(&huart3, (uint8_t *)reply, strlen(reply));
 80033c8:	f107 0308 	add.w	r3, r7, #8
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fc feff 	bl	80001d0 <strlen>
 80033d2:	4603      	mov	r3, r0
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	f107 0308 	add.w	r3, r7, #8
 80033da:	4619      	mov	r1, r3
 80033dc:	481f      	ldr	r0, [pc, #124]	; (800345c <motor+0x434>)
 80033de:	f003 ff72 	bl	80072c6 <HAL_UART_Transmit_IT>
				osDelay(50);
 80033e2:	2032      	movs	r0, #50	; 0x32
 80033e4:	f004 ffac 	bl	8008340 <osDelay>
				*aRxBuffer = 'Z';
 80033e8:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <motor+0x438>)
 80033ea:	225a      	movs	r2, #90	; 0x5a
 80033ec:	701a      	strb	r2, [r3, #0]
				break;
 80033ee:	e023      	b.n	8003438 <motor+0x410>
//				osDelay(50);
//				*aRxBuffer = 'R';
//				break;
			/* Test Cases */
			case 'V':
				correction();
 80033f0:	f7fe f8d6 	bl	80015a0 <correction>
				break;
 80033f4:	e020      	b.n	8003438 <motor+0x410>
			case 'W':
				PIDmotor(100,10);
 80033f6:	200a      	movs	r0, #10
 80033f8:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8003464 <motor+0x43c>
 80033fc:	f7fe fb2c 	bl	8001a58 <PIDmotor>
				break;
 8003400:	e01a      	b.n	8003438 <motor+0x410>
			case 'X':
				ultraDistCheck();
 8003402:	f7fd fed1 	bl	80011a8 <ultraDistCheck>
				irLeft();
 8003406:	f7fd ff17 	bl	8001238 <irLeft>
				irRight();
 800340a:	f7fd ff89 	bl	8001320 <irRight>
				break;
 800340e:	e013      	b.n	8003438 <motor+0x410>
			case 'Y':
				HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);		//left encoder(MotorA) start
 8003410:	213c      	movs	r1, #60	; 0x3c
 8003412:	4815      	ldr	r0, [pc, #84]	; (8003468 <motor+0x440>)
 8003414:	f002 fd34 	bl	8005e80 <HAL_TIM_Encoder_Start>
					HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		//right encoder(MotorB) start
 8003418:	213c      	movs	r1, #60	; 0x3c
 800341a:	4814      	ldr	r0, [pc, #80]	; (800346c <motor+0x444>)
 800341c:	f002 fd30 	bl	8005e80 <HAL_TIM_Encoder_Start>
				while(1){
				readEncoder();}
 8003420:	f7fe fa66 	bl	80018f0 <readEncoder>
 8003424:	e7fc      	b.n	8003420 <motor+0x3f8>
				break;
			case 'Z':
				waitCmd();
 8003426:	f7fd fff3 	bl	8001410 <waitCmd>
				break;
 800342a:	e005      	b.n	8003438 <motor+0x410>
			default:
//				*aRxBuffer = 'R';
				HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 1);
 800342c:	2201      	movs	r2, #1
 800342e:	490c      	ldr	r1, [pc, #48]	; (8003460 <motor+0x438>)
 8003430:	480a      	ldr	r0, [pc, #40]	; (800345c <motor+0x434>)
 8003432:	f003 ff8d 	bl	8007350 <HAL_UART_Receive_IT>
				break;
 8003436:	bf00      	nop
			}
			HAL_Delay(100);
 8003438:	2064      	movs	r0, #100	; 0x64
 800343a:	f000 fbfb 	bl	8003c34 <HAL_Delay>
			HAL_UART_Transmit_IT(&huart3,(uint8_t *)"OK",2);
 800343e:	2202      	movs	r2, #2
 8003440:	490b      	ldr	r1, [pc, #44]	; (8003470 <motor+0x448>)
 8003442:	4806      	ldr	r0, [pc, #24]	; (800345c <motor+0x434>)
 8003444:	f003 ff3f 	bl	80072c6 <HAL_UART_Transmit_IT>
			switch (*aRxBuffer)
 8003448:	e61d      	b.n	8003086 <motor+0x5e>
 800344a:	bf00      	nop
 800344c:	0800c95c 	.word	0x0800c95c
 8003450:	200000c0 	.word	0x200000c0
 8003454:	51eb851f 	.word	0x51eb851f
 8003458:	66666667 	.word	0x66666667
 800345c:	20004a98 	.word	0x20004a98
 8003460:	20004c9c 	.word	0x20004c9c
 8003464:	42c80000 	.word	0x42c80000
 8003468:	20004ca0 	.word	0x20004ca0
 800346c:	20004b98 	.word	0x20004b98
 8003470:	0800c950 	.word	0x0800c950

08003474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003478:	b672      	cpsid	i
}
 800347a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800347c:	e7fe      	b.n	800347c <Error_Handler+0x8>
	...

08003480 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <HAL_MspInit+0x54>)
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	4a11      	ldr	r2, [pc, #68]	; (80034d4 <HAL_MspInit+0x54>)
 8003490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003494:	6453      	str	r3, [r2, #68]	; 0x44
 8003496:	4b0f      	ldr	r3, [pc, #60]	; (80034d4 <HAL_MspInit+0x54>)
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800349e:	607b      	str	r3, [r7, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	603b      	str	r3, [r7, #0]
 80034a6:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_MspInit+0x54>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	4a0a      	ldr	r2, [pc, #40]	; (80034d4 <HAL_MspInit+0x54>)
 80034ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b0:	6413      	str	r3, [r2, #64]	; 0x40
 80034b2:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <HAL_MspInit+0x54>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80034be:	2200      	movs	r2, #0
 80034c0:	210f      	movs	r1, #15
 80034c2:	f06f 0001 	mvn.w	r0, #1
 80034c6:	f000 fff6 	bl	80044b6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40023800 	.word	0x40023800

080034d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08c      	sub	sp, #48	; 0x30
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	f107 031c 	add.w	r3, r7, #28
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a2e      	ldr	r2, [pc, #184]	; (80035b0 <HAL_ADC_MspInit+0xd8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d128      	bne.n	800354c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	61bb      	str	r3, [r7, #24]
 80034fe:	4b2d      	ldr	r3, [pc, #180]	; (80035b4 <HAL_ADC_MspInit+0xdc>)
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	4a2c      	ldr	r2, [pc, #176]	; (80035b4 <HAL_ADC_MspInit+0xdc>)
 8003504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003508:	6453      	str	r3, [r2, #68]	; 0x44
 800350a:	4b2a      	ldr	r3, [pc, #168]	; (80035b4 <HAL_ADC_MspInit+0xdc>)
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003512:	61bb      	str	r3, [r7, #24]
 8003514:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	4b26      	ldr	r3, [pc, #152]	; (80035b4 <HAL_ADC_MspInit+0xdc>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	4a25      	ldr	r2, [pc, #148]	; (80035b4 <HAL_ADC_MspInit+0xdc>)
 8003520:	f043 0304 	orr.w	r3, r3, #4
 8003524:	6313      	str	r3, [r2, #48]	; 0x30
 8003526:	4b23      	ldr	r3, [pc, #140]	; (80035b4 <HAL_ADC_MspInit+0xdc>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8003532:	2312      	movs	r3, #18
 8003534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003536:	2303      	movs	r3, #3
 8003538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353a:	2300      	movs	r3, #0
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800353e:	f107 031c 	add.w	r3, r7, #28
 8003542:	4619      	mov	r1, r3
 8003544:	481c      	ldr	r0, [pc, #112]	; (80035b8 <HAL_ADC_MspInit+0xe0>)
 8003546:	f001 f87f 	bl	8004648 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800354a:	e02c      	b.n	80035a6 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1a      	ldr	r2, [pc, #104]	; (80035bc <HAL_ADC_MspInit+0xe4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d127      	bne.n	80035a6 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003556:	2300      	movs	r3, #0
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	4b16      	ldr	r3, [pc, #88]	; (80035b4 <HAL_ADC_MspInit+0xdc>)
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	4a15      	ldr	r2, [pc, #84]	; (80035b4 <HAL_ADC_MspInit+0xdc>)
 8003560:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003564:	6453      	str	r3, [r2, #68]	; 0x44
 8003566:	4b13      	ldr	r3, [pc, #76]	; (80035b4 <HAL_ADC_MspInit+0xdc>)
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <HAL_ADC_MspInit+0xdc>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	4a0e      	ldr	r2, [pc, #56]	; (80035b4 <HAL_ADC_MspInit+0xdc>)
 800357c:	f043 0304 	orr.w	r3, r3, #4
 8003580:	6313      	str	r3, [r2, #48]	; 0x30
 8003582:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <HAL_ADC_MspInit+0xdc>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800358e:	2304      	movs	r3, #4
 8003590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003592:	2303      	movs	r3, #3
 8003594:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003596:	2300      	movs	r3, #0
 8003598:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800359a:	f107 031c 	add.w	r3, r7, #28
 800359e:	4619      	mov	r1, r3
 80035a0:	4805      	ldr	r0, [pc, #20]	; (80035b8 <HAL_ADC_MspInit+0xe0>)
 80035a2:	f001 f851 	bl	8004648 <HAL_GPIO_Init>
}
 80035a6:	bf00      	nop
 80035a8:	3730      	adds	r7, #48	; 0x30
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40012000 	.word	0x40012000
 80035b4:	40023800 	.word	0x40023800
 80035b8:	40020800 	.word	0x40020800
 80035bc:	40012100 	.word	0x40012100

080035c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035c8:	f107 0308 	add.w	r3, r7, #8
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a0c      	ldr	r2, [pc, #48]	; (800360c <HAL_RTC_MspInit+0x4c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d111      	bne.n	8003604 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80035e0:	2302      	movs	r3, #2
 80035e2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80035e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035e8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035ea:	f107 0308 	add.w	r3, r7, #8
 80035ee:	4618      	mov	r0, r3
 80035f0:	f001 fe50 	bl	8005294 <HAL_RCCEx_PeriphCLKConfig>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80035fa:	f7ff ff3b 	bl	8003474 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80035fe:	4b04      	ldr	r3, [pc, #16]	; (8003610 <HAL_RTC_MspInit+0x50>)
 8003600:	2201      	movs	r2, #1
 8003602:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003604:	bf00      	nop
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40002800 	.word	0x40002800
 8003610:	42470e3c 	.word	0x42470e3c

08003614 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a15      	ldr	r2, [pc, #84]	; (8003678 <HAL_TIM_Base_MspInit+0x64>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d10e      	bne.n	8003644 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	4b14      	ldr	r3, [pc, #80]	; (800367c <HAL_TIM_Base_MspInit+0x68>)
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	4a13      	ldr	r2, [pc, #76]	; (800367c <HAL_TIM_Base_MspInit+0x68>)
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	6453      	str	r3, [r2, #68]	; 0x44
 8003636:	4b11      	ldr	r3, [pc, #68]	; (800367c <HAL_TIM_Base_MspInit+0x68>)
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003642:	e012      	b.n	800366a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a0d      	ldr	r2, [pc, #52]	; (8003680 <HAL_TIM_Base_MspInit+0x6c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d10d      	bne.n	800366a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	4b0a      	ldr	r3, [pc, #40]	; (800367c <HAL_TIM_Base_MspInit+0x68>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	4a09      	ldr	r2, [pc, #36]	; (800367c <HAL_TIM_Base_MspInit+0x68>)
 8003658:	f043 0308 	orr.w	r3, r3, #8
 800365c:	6413      	str	r3, [r2, #64]	; 0x40
 800365e:	4b07      	ldr	r3, [pc, #28]	; (800367c <HAL_TIM_Base_MspInit+0x68>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	68bb      	ldr	r3, [r7, #8]
}
 800366a:	bf00      	nop
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40010000 	.word	0x40010000
 800367c:	40023800 	.word	0x40023800
 8003680:	40000c00 	.word	0x40000c00

08003684 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08c      	sub	sp, #48	; 0x30
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800368c:	f107 031c 	add.w	r3, r7, #28
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	60da      	str	r2, [r3, #12]
 800369a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a4:	d14b      	bne.n	800373e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	61bb      	str	r3, [r7, #24]
 80036aa:	4b3f      	ldr	r3, [pc, #252]	; (80037a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	4a3e      	ldr	r2, [pc, #248]	; (80037a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	6413      	str	r3, [r2, #64]	; 0x40
 80036b6:	4b3c      	ldr	r3, [pc, #240]	; (80037a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	4b38      	ldr	r3, [pc, #224]	; (80037a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	4a37      	ldr	r2, [pc, #220]	; (80037a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	6313      	str	r3, [r2, #48]	; 0x30
 80036d2:	4b35      	ldr	r3, [pc, #212]	; (80037a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	4a30      	ldr	r2, [pc, #192]	; (80037a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80036e8:	f043 0302 	orr.w	r3, r3, #2
 80036ec:	6313      	str	r3, [r2, #48]	; 0x30
 80036ee:	4b2e      	ldr	r3, [pc, #184]	; (80037a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80036fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003700:	2302      	movs	r3, #2
 8003702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003704:	2300      	movs	r3, #0
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003708:	2300      	movs	r3, #0
 800370a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800370c:	2301      	movs	r3, #1
 800370e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003710:	f107 031c 	add.w	r3, r7, #28
 8003714:	4619      	mov	r1, r3
 8003716:	4825      	ldr	r0, [pc, #148]	; (80037ac <HAL_TIM_Encoder_MspInit+0x128>)
 8003718:	f000 ff96 	bl	8004648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800371c:	2308      	movs	r3, #8
 800371e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003720:	2302      	movs	r3, #2
 8003722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003724:	2300      	movs	r3, #0
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003728:	2300      	movs	r3, #0
 800372a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800372c:	2301      	movs	r3, #1
 800372e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003730:	f107 031c 	add.w	r3, r7, #28
 8003734:	4619      	mov	r1, r3
 8003736:	481e      	ldr	r0, [pc, #120]	; (80037b0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003738:	f000 ff86 	bl	8004648 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800373c:	e030      	b.n	80037a0 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a1c      	ldr	r2, [pc, #112]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x130>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d12b      	bne.n	80037a0 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003748:	2300      	movs	r3, #0
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	4b16      	ldr	r3, [pc, #88]	; (80037a8 <HAL_TIM_Encoder_MspInit+0x124>)
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	4a15      	ldr	r2, [pc, #84]	; (80037a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8003752:	f043 0302 	orr.w	r3, r3, #2
 8003756:	6413      	str	r3, [r2, #64]	; 0x40
 8003758:	4b13      	ldr	r3, [pc, #76]	; (80037a8 <HAL_TIM_Encoder_MspInit+0x124>)
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003764:	2300      	movs	r3, #0
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <HAL_TIM_Encoder_MspInit+0x124>)
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376c:	4a0e      	ldr	r2, [pc, #56]	; (80037a8 <HAL_TIM_Encoder_MspInit+0x124>)
 800376e:	f043 0301 	orr.w	r3, r3, #1
 8003772:	6313      	str	r3, [r2, #48]	; 0x30
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003780:	23c0      	movs	r3, #192	; 0xc0
 8003782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003784:	2302      	movs	r3, #2
 8003786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003788:	2300      	movs	r3, #0
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800378c:	2300      	movs	r3, #0
 800378e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003790:	2302      	movs	r3, #2
 8003792:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003794:	f107 031c 	add.w	r3, r7, #28
 8003798:	4619      	mov	r1, r3
 800379a:	4804      	ldr	r0, [pc, #16]	; (80037ac <HAL_TIM_Encoder_MspInit+0x128>)
 800379c:	f000 ff54 	bl	8004648 <HAL_GPIO_Init>
}
 80037a0:	bf00      	nop
 80037a2:	3730      	adds	r7, #48	; 0x30
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40020000 	.word	0x40020000
 80037b0:	40020400 	.word	0x40020400
 80037b4:	40000400 	.word	0x40000400

080037b8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08a      	sub	sp, #40	; 0x28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c0:	f107 0314 	add.w	r3, r7, #20
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a1d      	ldr	r2, [pc, #116]	; (800384c <HAL_TIM_IC_MspInit+0x94>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d134      	bne.n	8003844 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037da:	2300      	movs	r3, #0
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <HAL_TIM_IC_MspInit+0x98>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	4a1b      	ldr	r2, [pc, #108]	; (8003850 <HAL_TIM_IC_MspInit+0x98>)
 80037e4:	f043 0304 	orr.w	r3, r3, #4
 80037e8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ea:	4b19      	ldr	r3, [pc, #100]	; (8003850 <HAL_TIM_IC_MspInit+0x98>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	4b15      	ldr	r3, [pc, #84]	; (8003850 <HAL_TIM_IC_MspInit+0x98>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	4a14      	ldr	r2, [pc, #80]	; (8003850 <HAL_TIM_IC_MspInit+0x98>)
 8003800:	f043 0308 	orr.w	r3, r3, #8
 8003804:	6313      	str	r3, [r2, #48]	; 0x30
 8003806:	4b12      	ldr	r3, [pc, #72]	; (8003850 <HAL_TIM_IC_MspInit+0x98>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003818:	2302      	movs	r3, #2
 800381a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381c:	2300      	movs	r3, #0
 800381e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003820:	2300      	movs	r3, #0
 8003822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003824:	2302      	movs	r3, #2
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003828:	f107 0314 	add.w	r3, r7, #20
 800382c:	4619      	mov	r1, r3
 800382e:	4809      	ldr	r0, [pc, #36]	; (8003854 <HAL_TIM_IC_MspInit+0x9c>)
 8003830:	f000 ff0a 	bl	8004648 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003834:	2200      	movs	r2, #0
 8003836:	2105      	movs	r1, #5
 8003838:	201e      	movs	r0, #30
 800383a:	f000 fe3c 	bl	80044b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800383e:	201e      	movs	r0, #30
 8003840:	f000 fe55 	bl	80044ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003844:	bf00      	nop
 8003846:	3728      	adds	r7, #40	; 0x28
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40000800 	.word	0x40000800
 8003850:	40023800 	.word	0x40023800
 8003854:	40020c00 	.word	0x40020c00

08003858 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08a      	sub	sp, #40	; 0x28
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003860:	f107 0314 	add.w	r3, r7, #20
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	605a      	str	r2, [r3, #4]
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	60da      	str	r2, [r3, #12]
 800386e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM8)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a19      	ldr	r2, [pc, #100]	; (80038dc <HAL_TIM_PWM_MspInit+0x84>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d12b      	bne.n	80038d2 <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	4b18      	ldr	r3, [pc, #96]	; (80038e0 <HAL_TIM_PWM_MspInit+0x88>)
 8003880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003882:	4a17      	ldr	r2, [pc, #92]	; (80038e0 <HAL_TIM_PWM_MspInit+0x88>)
 8003884:	f043 0302 	orr.w	r3, r3, #2
 8003888:	6453      	str	r3, [r2, #68]	; 0x44
 800388a:	4b15      	ldr	r3, [pc, #84]	; (80038e0 <HAL_TIM_PWM_MspInit+0x88>)
 800388c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	4b11      	ldr	r3, [pc, #68]	; (80038e0 <HAL_TIM_PWM_MspInit+0x88>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	4a10      	ldr	r2, [pc, #64]	; (80038e0 <HAL_TIM_PWM_MspInit+0x88>)
 80038a0:	f043 0304 	orr.w	r3, r3, #4
 80038a4:	6313      	str	r3, [r2, #48]	; 0x30
 80038a6:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <HAL_TIM_PWM_MspInit+0x88>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80038b2:	23c0      	movs	r3, #192	; 0xc0
 80038b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b6:	2302      	movs	r3, #2
 80038b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038be:	2300      	movs	r3, #0
 80038c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80038c2:	2303      	movs	r3, #3
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038c6:	f107 0314 	add.w	r3, r7, #20
 80038ca:	4619      	mov	r1, r3
 80038cc:	4805      	ldr	r0, [pc, #20]	; (80038e4 <HAL_TIM_PWM_MspInit+0x8c>)
 80038ce:	f000 febb 	bl	8004648 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80038d2:	bf00      	nop
 80038d4:	3728      	adds	r7, #40	; 0x28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40010400 	.word	0x40010400
 80038e0:	40023800 	.word	0x40023800
 80038e4:	40020800 	.word	0x40020800

080038e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f0:	f107 030c 	add.w	r3, r7, #12
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	609a      	str	r2, [r3, #8]
 80038fc:	60da      	str	r2, [r3, #12]
 80038fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a12      	ldr	r2, [pc, #72]	; (8003950 <HAL_TIM_MspPostInit+0x68>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d11e      	bne.n	8003948 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800390a:	2300      	movs	r3, #0
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	4b11      	ldr	r3, [pc, #68]	; (8003954 <HAL_TIM_MspPostInit+0x6c>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	4a10      	ldr	r2, [pc, #64]	; (8003954 <HAL_TIM_MspPostInit+0x6c>)
 8003914:	f043 0310 	orr.w	r3, r3, #16
 8003918:	6313      	str	r3, [r2, #48]	; 0x30
 800391a:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <HAL_TIM_MspPostInit+0x6c>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	60bb      	str	r3, [r7, #8]
 8003924:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003926:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800392a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392c:	2302      	movs	r3, #2
 800392e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003934:	2300      	movs	r3, #0
 8003936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003938:	2301      	movs	r3, #1
 800393a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800393c:	f107 030c 	add.w	r3, r7, #12
 8003940:	4619      	mov	r1, r3
 8003942:	4805      	ldr	r0, [pc, #20]	; (8003958 <HAL_TIM_MspPostInit+0x70>)
 8003944:	f000 fe80 	bl	8004648 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003948:	bf00      	nop
 800394a:	3720      	adds	r7, #32
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40010000 	.word	0x40010000
 8003954:	40023800 	.word	0x40023800
 8003958:	40021000 	.word	0x40021000

0800395c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08a      	sub	sp, #40	; 0x28
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003964:	f107 0314 	add.w	r3, r7, #20
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	605a      	str	r2, [r3, #4]
 800396e:	609a      	str	r2, [r3, #8]
 8003970:	60da      	str	r2, [r3, #12]
 8003972:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a1d      	ldr	r2, [pc, #116]	; (80039f0 <HAL_UART_MspInit+0x94>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d134      	bne.n	80039e8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800397e:	2300      	movs	r3, #0
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <HAL_UART_MspInit+0x98>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	4a1b      	ldr	r2, [pc, #108]	; (80039f4 <HAL_UART_MspInit+0x98>)
 8003988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800398c:	6413      	str	r3, [r2, #64]	; 0x40
 800398e:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <HAL_UART_MspInit+0x98>)
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003996:	613b      	str	r3, [r7, #16]
 8003998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <HAL_UART_MspInit+0x98>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	4a14      	ldr	r2, [pc, #80]	; (80039f4 <HAL_UART_MspInit+0x98>)
 80039a4:	f043 0304 	orr.w	r3, r3, #4
 80039a8:	6313      	str	r3, [r2, #48]	; 0x30
 80039aa:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <HAL_UART_MspInit+0x98>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80039b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80039ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039bc:	2302      	movs	r3, #2
 80039be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c4:	2303      	movs	r3, #3
 80039c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80039c8:	2307      	movs	r3, #7
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039cc:	f107 0314 	add.w	r3, r7, #20
 80039d0:	4619      	mov	r1, r3
 80039d2:	4809      	ldr	r0, [pc, #36]	; (80039f8 <HAL_UART_MspInit+0x9c>)
 80039d4:	f000 fe38 	bl	8004648 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80039d8:	2200      	movs	r2, #0
 80039da:	2105      	movs	r1, #5
 80039dc:	2027      	movs	r0, #39	; 0x27
 80039de:	f000 fd6a 	bl	80044b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80039e2:	2027      	movs	r0, #39	; 0x27
 80039e4:	f000 fd83 	bl	80044ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80039e8:	bf00      	nop
 80039ea:	3728      	adds	r7, #40	; 0x28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40004800 	.word	0x40004800
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40020800 	.word	0x40020800

080039fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a00:	e7fe      	b.n	8003a00 <NMI_Handler+0x4>

08003a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a02:	b480      	push	{r7}
 8003a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a06:	e7fe      	b.n	8003a06 <HardFault_Handler+0x4>

08003a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a0c:	e7fe      	b.n	8003a0c <MemManage_Handler+0x4>

08003a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a12:	e7fe      	b.n	8003a12 <BusFault_Handler+0x4>

08003a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a18:	e7fe      	b.n	8003a18 <UsageFault_Handler+0x4>

08003a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a2c:	f000 f8e2 	bl	8003bf4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003a30:	f006 f894 	bl	8009b5c <xTaskGetSchedulerState>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d001      	beq.n	8003a3e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003a3a:	f006 fe7d 	bl	800a738 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a3e:	bf00      	nop
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a48:	4802      	ldr	r0, [pc, #8]	; (8003a54 <TIM4_IRQHandler+0x10>)
 8003a4a:	f002 faa7 	bl	8005f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	20004a50 	.word	0x20004a50

08003a58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003a5c:	4802      	ldr	r0, [pc, #8]	; (8003a68 <USART3_IRQHandler+0x10>)
 8003a5e:	f003 fca7 	bl	80073b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003a62:	bf00      	nop
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20004a98 	.word	0x20004a98

08003a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a74:	4a14      	ldr	r2, [pc, #80]	; (8003ac8 <_sbrk+0x5c>)
 8003a76:	4b15      	ldr	r3, [pc, #84]	; (8003acc <_sbrk+0x60>)
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a80:	4b13      	ldr	r3, [pc, #76]	; (8003ad0 <_sbrk+0x64>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d102      	bne.n	8003a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a88:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <_sbrk+0x64>)
 8003a8a:	4a12      	ldr	r2, [pc, #72]	; (8003ad4 <_sbrk+0x68>)
 8003a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a8e:	4b10      	ldr	r3, [pc, #64]	; (8003ad0 <_sbrk+0x64>)
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4413      	add	r3, r2
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d207      	bcs.n	8003aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a9c:	f007 faf8 	bl	800b090 <__errno>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	220c      	movs	r2, #12
 8003aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003aaa:	e009      	b.n	8003ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003aac:	4b08      	ldr	r3, [pc, #32]	; (8003ad0 <_sbrk+0x64>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ab2:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <_sbrk+0x64>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4413      	add	r3, r2
 8003aba:	4a05      	ldr	r2, [pc, #20]	; (8003ad0 <_sbrk+0x64>)
 8003abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003abe:	68fb      	ldr	r3, [r7, #12]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	20020000 	.word	0x20020000
 8003acc:	00000400 	.word	0x00000400
 8003ad0:	200000e8 	.word	0x200000e8
 8003ad4:	20005158 	.word	0x20005158

08003ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003adc:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <SystemInit+0x20>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae2:	4a05      	ldr	r2, [pc, #20]	; (8003af8 <SystemInit+0x20>)
 8003ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003aec:	bf00      	nop
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	e000ed00 	.word	0xe000ed00

08003afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b00:	480d      	ldr	r0, [pc, #52]	; (8003b38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003b02:	490e      	ldr	r1, [pc, #56]	; (8003b3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b04:	4a0e      	ldr	r2, [pc, #56]	; (8003b40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b08:	e002      	b.n	8003b10 <LoopCopyDataInit>

08003b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b0e:	3304      	adds	r3, #4

08003b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b14:	d3f9      	bcc.n	8003b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b16:	4a0b      	ldr	r2, [pc, #44]	; (8003b44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b18:	4c0b      	ldr	r4, [pc, #44]	; (8003b48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b1c:	e001      	b.n	8003b22 <LoopFillZerobss>

08003b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b20:	3204      	adds	r2, #4

08003b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b24:	d3fb      	bcc.n	8003b1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b26:	f7ff ffd7 	bl	8003ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b2a:	f007 fab7 	bl	800b09c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b2e:	f7fe fd29 	bl	8002584 <main>
  bx  lr    
 8003b32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b3c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003b40:	0800d4c8 	.word	0x0800d4c8
  ldr r2, =_sbss
 8003b44:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8003b48:	20005154 	.word	0x20005154

08003b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b4c:	e7fe      	b.n	8003b4c <ADC_IRQHandler>
	...

08003b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b54:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <HAL_Init+0x40>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a0d      	ldr	r2, [pc, #52]	; (8003b90 <HAL_Init+0x40>)
 8003b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_Init+0x40>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a0a      	ldr	r2, [pc, #40]	; (8003b90 <HAL_Init+0x40>)
 8003b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b6c:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <HAL_Init+0x40>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a07      	ldr	r2, [pc, #28]	; (8003b90 <HAL_Init+0x40>)
 8003b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b78:	2003      	movs	r0, #3
 8003b7a:	f000 fc91 	bl	80044a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b7e:	200f      	movs	r0, #15
 8003b80:	f000 f808 	bl	8003b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b84:	f7ff fc7c 	bl	8003480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40023c00 	.word	0x40023c00

08003b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b9c:	4b12      	ldr	r3, [pc, #72]	; (8003be8 <HAL_InitTick+0x54>)
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	4b12      	ldr	r3, [pc, #72]	; (8003bec <HAL_InitTick+0x58>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fca9 	bl	800450a <HAL_SYSTICK_Config>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e00e      	b.n	8003be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b0f      	cmp	r3, #15
 8003bc6:	d80a      	bhi.n	8003bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bc8:	2200      	movs	r2, #0
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bd0:	f000 fc71 	bl	80044b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bd4:	4a06      	ldr	r2, [pc, #24]	; (8003bf0 <HAL_InitTick+0x5c>)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	e000      	b.n	8003be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	20000008 	.word	0x20000008
 8003bec:	20000010 	.word	0x20000010
 8003bf0:	2000000c 	.word	0x2000000c

08003bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <HAL_IncTick+0x20>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <HAL_IncTick+0x24>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4413      	add	r3, r2
 8003c04:	4a04      	ldr	r2, [pc, #16]	; (8003c18 <HAL_IncTick+0x24>)
 8003c06:	6013      	str	r3, [r2, #0]
}
 8003c08:	bf00      	nop
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	20000010 	.word	0x20000010
 8003c18:	20004d00 	.word	0x20004d00

08003c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c20:	4b03      	ldr	r3, [pc, #12]	; (8003c30 <HAL_GetTick+0x14>)
 8003c22:	681b      	ldr	r3, [r3, #0]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	20004d00 	.word	0x20004d00

08003c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c3c:	f7ff ffee 	bl	8003c1c <HAL_GetTick>
 8003c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c4c:	d005      	beq.n	8003c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c4e:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <HAL_Delay+0x44>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4413      	add	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c5a:	bf00      	nop
 8003c5c:	f7ff ffde 	bl	8003c1c <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d8f7      	bhi.n	8003c5c <HAL_Delay+0x28>
  {
  }
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20000010 	.word	0x20000010

08003c7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e033      	b.n	8003cfa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff fc1c 	bl	80034d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	f003 0310 	and.w	r3, r3, #16
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d118      	bne.n	8003cec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003cc2:	f023 0302 	bic.w	r3, r3, #2
 8003cc6:	f043 0202 	orr.w	r2, r3, #2
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fa1a 	bl	8004108 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	f023 0303 	bic.w	r3, r3, #3
 8003ce2:	f043 0201 	orr.w	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	641a      	str	r2, [r3, #64]	; 0x40
 8003cea:	e001      	b.n	8003cf0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_ADC_Start+0x1a>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e0b2      	b.n	8003e84 <HAL_ADC_Start+0x180>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d018      	beq.n	8003d66 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0201 	orr.w	r2, r2, #1
 8003d42:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d44:	4b52      	ldr	r3, [pc, #328]	; (8003e90 <HAL_ADC_Start+0x18c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a52      	ldr	r2, [pc, #328]	; (8003e94 <HAL_ADC_Start+0x190>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	0c9a      	lsrs	r2, r3, #18
 8003d50:	4613      	mov	r3, r2
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	4413      	add	r3, r2
 8003d56:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003d58:	e002      	b.n	8003d60 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f9      	bne.n	8003d5a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d17a      	bne.n	8003e6a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d7c:	f023 0301 	bic.w	r3, r3, #1
 8003d80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d007      	beq.n	8003da6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db2:	d106      	bne.n	8003dc2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db8:	f023 0206 	bic.w	r2, r3, #6
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	645a      	str	r2, [r3, #68]	; 0x44
 8003dc0:	e002      	b.n	8003dc8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003dd0:	4b31      	ldr	r3, [pc, #196]	; (8003e98 <HAL_ADC_Start+0x194>)
 8003dd2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003ddc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f003 031f 	and.w	r3, r3, #31
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d12a      	bne.n	8003e40 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a2b      	ldr	r2, [pc, #172]	; (8003e9c <HAL_ADC_Start+0x198>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d015      	beq.n	8003e20 <HAL_ADC_Start+0x11c>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a29      	ldr	r2, [pc, #164]	; (8003ea0 <HAL_ADC_Start+0x19c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d105      	bne.n	8003e0a <HAL_ADC_Start+0x106>
 8003dfe:	4b26      	ldr	r3, [pc, #152]	; (8003e98 <HAL_ADC_Start+0x194>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f003 031f 	and.w	r3, r3, #31
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a25      	ldr	r2, [pc, #148]	; (8003ea4 <HAL_ADC_Start+0x1a0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d136      	bne.n	8003e82 <HAL_ADC_Start+0x17e>
 8003e14:	4b20      	ldr	r3, [pc, #128]	; (8003e98 <HAL_ADC_Start+0x194>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 0310 	and.w	r3, r3, #16
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d130      	bne.n	8003e82 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d129      	bne.n	8003e82 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e3c:	609a      	str	r2, [r3, #8]
 8003e3e:	e020      	b.n	8003e82 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a15      	ldr	r2, [pc, #84]	; (8003e9c <HAL_ADC_Start+0x198>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d11b      	bne.n	8003e82 <HAL_ADC_Start+0x17e>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d114      	bne.n	8003e82 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e66:	609a      	str	r2, [r3, #8]
 8003e68:	e00b      	b.n	8003e82 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f043 0210 	orr.w	r2, r3, #16
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	f043 0201 	orr.w	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	20000008 	.word	0x20000008
 8003e94:	431bde83 	.word	0x431bde83
 8003e98:	40012300 	.word	0x40012300
 8003e9c:	40012000 	.word	0x40012000
 8003ea0:	40012100 	.word	0x40012100
 8003ea4:	40012200 	.word	0x40012200

08003ea8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
	...

08003ec4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_ADC_ConfigChannel+0x1c>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e105      	b.n	80040ec <HAL_ADC_ConfigChannel+0x228>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b09      	cmp	r3, #9
 8003eee:	d925      	bls.n	8003f3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68d9      	ldr	r1, [r3, #12]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	461a      	mov	r2, r3
 8003efe:	4613      	mov	r3, r2
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	4413      	add	r3, r2
 8003f04:	3b1e      	subs	r3, #30
 8003f06:	2207      	movs	r2, #7
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	43da      	mvns	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	400a      	ands	r2, r1
 8003f14:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68d9      	ldr	r1, [r3, #12]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	4618      	mov	r0, r3
 8003f28:	4603      	mov	r3, r0
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	4403      	add	r3, r0
 8003f2e:	3b1e      	subs	r3, #30
 8003f30:	409a      	lsls	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	60da      	str	r2, [r3, #12]
 8003f3a:	e022      	b.n	8003f82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6919      	ldr	r1, [r3, #16]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	4413      	add	r3, r2
 8003f50:	2207      	movs	r2, #7
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	43da      	mvns	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	400a      	ands	r2, r1
 8003f5e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6919      	ldr	r1, [r3, #16]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	4618      	mov	r0, r3
 8003f72:	4603      	mov	r3, r0
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	4403      	add	r3, r0
 8003f78:	409a      	lsls	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b06      	cmp	r3, #6
 8003f88:	d824      	bhi.n	8003fd4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	3b05      	subs	r3, #5
 8003f9c:	221f      	movs	r2, #31
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	43da      	mvns	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	400a      	ands	r2, r1
 8003faa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	4618      	mov	r0, r3
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3b05      	subs	r3, #5
 8003fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	635a      	str	r2, [r3, #52]	; 0x34
 8003fd2:	e04c      	b.n	800406e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2b0c      	cmp	r3, #12
 8003fda:	d824      	bhi.n	8004026 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	3b23      	subs	r3, #35	; 0x23
 8003fee:	221f      	movs	r2, #31
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	43da      	mvns	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	400a      	ands	r2, r1
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	b29b      	uxth	r3, r3
 800400a:	4618      	mov	r0, r3
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	3b23      	subs	r3, #35	; 0x23
 8004018:	fa00 f203 	lsl.w	r2, r0, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	631a      	str	r2, [r3, #48]	; 0x30
 8004024:	e023      	b.n	800406e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	3b41      	subs	r3, #65	; 0x41
 8004038:	221f      	movs	r2, #31
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43da      	mvns	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	400a      	ands	r2, r1
 8004046:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	b29b      	uxth	r3, r3
 8004054:	4618      	mov	r0, r3
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	4613      	mov	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	3b41      	subs	r3, #65	; 0x41
 8004062:	fa00 f203 	lsl.w	r2, r0, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800406e:	4b22      	ldr	r3, [pc, #136]	; (80040f8 <HAL_ADC_ConfigChannel+0x234>)
 8004070:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a21      	ldr	r2, [pc, #132]	; (80040fc <HAL_ADC_ConfigChannel+0x238>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d109      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x1cc>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b12      	cmp	r3, #18
 8004082:	d105      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a19      	ldr	r2, [pc, #100]	; (80040fc <HAL_ADC_ConfigChannel+0x238>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d123      	bne.n	80040e2 <HAL_ADC_ConfigChannel+0x21e>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b10      	cmp	r3, #16
 80040a0:	d003      	beq.n	80040aa <HAL_ADC_ConfigChannel+0x1e6>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b11      	cmp	r3, #17
 80040a8:	d11b      	bne.n	80040e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b10      	cmp	r3, #16
 80040bc:	d111      	bne.n	80040e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80040be:	4b10      	ldr	r3, [pc, #64]	; (8004100 <HAL_ADC_ConfigChannel+0x23c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a10      	ldr	r2, [pc, #64]	; (8004104 <HAL_ADC_ConfigChannel+0x240>)
 80040c4:	fba2 2303 	umull	r2, r3, r2, r3
 80040c8:	0c9a      	lsrs	r2, r3, #18
 80040ca:	4613      	mov	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80040d4:	e002      	b.n	80040dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	3b01      	subs	r3, #1
 80040da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f9      	bne.n	80040d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	40012300 	.word	0x40012300
 80040fc:	40012000 	.word	0x40012000
 8004100:	20000008 	.word	0x20000008
 8004104:	431bde83 	.word	0x431bde83

08004108 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004110:	4b79      	ldr	r3, [pc, #484]	; (80042f8 <ADC_Init+0x1f0>)
 8004112:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	431a      	orrs	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800413c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6859      	ldr	r1, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	021a      	lsls	r2, r3, #8
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004160:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6859      	ldr	r1, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689a      	ldr	r2, [r3, #8]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004182:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6899      	ldr	r1, [r3, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	4a58      	ldr	r2, [pc, #352]	; (80042fc <ADC_Init+0x1f4>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d022      	beq.n	80041e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6899      	ldr	r1, [r3, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6899      	ldr	r1, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	609a      	str	r2, [r3, #8]
 80041e4:	e00f      	b.n	8004206 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004204:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0202 	bic.w	r2, r2, #2
 8004214:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6899      	ldr	r1, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	7e1b      	ldrb	r3, [r3, #24]
 8004220:	005a      	lsls	r2, r3, #1
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d01b      	beq.n	800426c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004242:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004252:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6859      	ldr	r1, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	3b01      	subs	r3, #1
 8004260:	035a      	lsls	r2, r3, #13
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	605a      	str	r2, [r3, #4]
 800426a:	e007      	b.n	800427c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800427a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800428a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	3b01      	subs	r3, #1
 8004298:	051a      	lsls	r2, r3, #20
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80042b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6899      	ldr	r1, [r3, #8]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042be:	025a      	lsls	r2, r3, #9
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6899      	ldr	r1, [r3, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	029a      	lsls	r2, r3, #10
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	609a      	str	r2, [r3, #8]
}
 80042ec:	bf00      	nop
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	40012300 	.word	0x40012300
 80042fc:	0f000001 	.word	0x0f000001

08004300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004310:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <__NVIC_SetPriorityGrouping+0x44>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800431c:	4013      	ands	r3, r2
 800431e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800432c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004332:	4a04      	ldr	r2, [pc, #16]	; (8004344 <__NVIC_SetPriorityGrouping+0x44>)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	60d3      	str	r3, [r2, #12]
}
 8004338:	bf00      	nop
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	e000ed00 	.word	0xe000ed00

08004348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <__NVIC_GetPriorityGrouping+0x18>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	0a1b      	lsrs	r3, r3, #8
 8004352:	f003 0307 	and.w	r3, r3, #7
}
 8004356:	4618      	mov	r0, r3
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	e000ed00 	.word	0xe000ed00

08004364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004372:	2b00      	cmp	r3, #0
 8004374:	db0b      	blt.n	800438e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	f003 021f 	and.w	r2, r3, #31
 800437c:	4907      	ldr	r1, [pc, #28]	; (800439c <__NVIC_EnableIRQ+0x38>)
 800437e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	2001      	movs	r0, #1
 8004386:	fa00 f202 	lsl.w	r2, r0, r2
 800438a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	e000e100 	.word	0xe000e100

080043a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	6039      	str	r1, [r7, #0]
 80043aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	db0a      	blt.n	80043ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	490c      	ldr	r1, [pc, #48]	; (80043ec <__NVIC_SetPriority+0x4c>)
 80043ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043be:	0112      	lsls	r2, r2, #4
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	440b      	add	r3, r1
 80043c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043c8:	e00a      	b.n	80043e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	4908      	ldr	r1, [pc, #32]	; (80043f0 <__NVIC_SetPriority+0x50>)
 80043d0:	79fb      	ldrb	r3, [r7, #7]
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	3b04      	subs	r3, #4
 80043d8:	0112      	lsls	r2, r2, #4
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	440b      	add	r3, r1
 80043de:	761a      	strb	r2, [r3, #24]
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	e000e100 	.word	0xe000e100
 80043f0:	e000ed00 	.word	0xe000ed00

080043f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b089      	sub	sp, #36	; 0x24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f1c3 0307 	rsb	r3, r3, #7
 800440e:	2b04      	cmp	r3, #4
 8004410:	bf28      	it	cs
 8004412:	2304      	movcs	r3, #4
 8004414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	3304      	adds	r3, #4
 800441a:	2b06      	cmp	r3, #6
 800441c:	d902      	bls.n	8004424 <NVIC_EncodePriority+0x30>
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	3b03      	subs	r3, #3
 8004422:	e000      	b.n	8004426 <NVIC_EncodePriority+0x32>
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	43da      	mvns	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	401a      	ands	r2, r3
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800443c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	fa01 f303 	lsl.w	r3, r1, r3
 8004446:	43d9      	mvns	r1, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800444c:	4313      	orrs	r3, r2
         );
}
 800444e:	4618      	mov	r0, r3
 8004450:	3724      	adds	r7, #36	; 0x24
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
	...

0800445c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3b01      	subs	r3, #1
 8004468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800446c:	d301      	bcc.n	8004472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800446e:	2301      	movs	r3, #1
 8004470:	e00f      	b.n	8004492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004472:	4a0a      	ldr	r2, [pc, #40]	; (800449c <SysTick_Config+0x40>)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3b01      	subs	r3, #1
 8004478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800447a:	210f      	movs	r1, #15
 800447c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004480:	f7ff ff8e 	bl	80043a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <SysTick_Config+0x40>)
 8004486:	2200      	movs	r2, #0
 8004488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800448a:	4b04      	ldr	r3, [pc, #16]	; (800449c <SysTick_Config+0x40>)
 800448c:	2207      	movs	r2, #7
 800448e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	e000e010 	.word	0xe000e010

080044a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff ff29 	bl	8004300 <__NVIC_SetPriorityGrouping>
}
 80044ae:	bf00      	nop
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b086      	sub	sp, #24
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	4603      	mov	r3, r0
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	607a      	str	r2, [r7, #4]
 80044c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044c8:	f7ff ff3e 	bl	8004348 <__NVIC_GetPriorityGrouping>
 80044cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	68b9      	ldr	r1, [r7, #8]
 80044d2:	6978      	ldr	r0, [r7, #20]
 80044d4:	f7ff ff8e 	bl	80043f4 <NVIC_EncodePriority>
 80044d8:	4602      	mov	r2, r0
 80044da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044de:	4611      	mov	r1, r2
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff ff5d 	bl	80043a0 <__NVIC_SetPriority>
}
 80044e6:	bf00      	nop
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b082      	sub	sp, #8
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	4603      	mov	r3, r0
 80044f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff ff31 	bl	8004364 <__NVIC_EnableIRQ>
}
 8004502:	bf00      	nop
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b082      	sub	sp, #8
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7ff ffa2 	bl	800445c <SysTick_Config>
 8004518:	4603      	mov	r3, r0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004530:	f7ff fb74 	bl	8003c1c <HAL_GetTick>
 8004534:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d008      	beq.n	8004554 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2280      	movs	r2, #128	; 0x80
 8004546:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e052      	b.n	80045fa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0216 	bic.w	r2, r2, #22
 8004562:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695a      	ldr	r2, [r3, #20]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004572:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	2b00      	cmp	r3, #0
 800457a:	d103      	bne.n	8004584 <HAL_DMA_Abort+0x62>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004580:	2b00      	cmp	r3, #0
 8004582:	d007      	beq.n	8004594 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0208 	bic.w	r2, r2, #8
 8004592:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0201 	bic.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045a4:	e013      	b.n	80045ce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045a6:	f7ff fb39 	bl	8003c1c <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b05      	cmp	r3, #5
 80045b2:	d90c      	bls.n	80045ce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2220      	movs	r2, #32
 80045b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2203      	movs	r2, #3
 80045be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e015      	b.n	80045fa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1e4      	bne.n	80045a6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e0:	223f      	movs	r2, #63	; 0x3f
 80045e2:	409a      	lsls	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d004      	beq.n	8004620 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2280      	movs	r2, #128	; 0x80
 800461a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e00c      	b.n	800463a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2205      	movs	r2, #5
 8004624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0201 	bic.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
	...

08004648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004648:	b480      	push	{r7}
 800464a:	b089      	sub	sp, #36	; 0x24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004656:	2300      	movs	r3, #0
 8004658:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800465a:	2300      	movs	r3, #0
 800465c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800465e:	2300      	movs	r3, #0
 8004660:	61fb      	str	r3, [r7, #28]
 8004662:	e16b      	b.n	800493c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004664:	2201      	movs	r2, #1
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4013      	ands	r3, r2
 8004676:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	429a      	cmp	r2, r3
 800467e:	f040 815a 	bne.w	8004936 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	2b01      	cmp	r3, #1
 800468c:	d005      	beq.n	800469a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004696:	2b02      	cmp	r3, #2
 8004698:	d130      	bne.n	80046fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	2203      	movs	r2, #3
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	43db      	mvns	r3, r3
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4013      	ands	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046d0:	2201      	movs	r2, #1
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	43db      	mvns	r3, r3
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	4013      	ands	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	091b      	lsrs	r3, r3, #4
 80046e6:	f003 0201 	and.w	r2, r3, #1
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	2b03      	cmp	r3, #3
 8004706:	d017      	beq.n	8004738 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	2203      	movs	r2, #3
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	43db      	mvns	r3, r3
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	4013      	ands	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 0303 	and.w	r3, r3, #3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d123      	bne.n	800478c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	08da      	lsrs	r2, r3, #3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3208      	adds	r2, #8
 800474c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004750:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	220f      	movs	r2, #15
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	4313      	orrs	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	08da      	lsrs	r2, r3, #3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3208      	adds	r2, #8
 8004786:	69b9      	ldr	r1, [r7, #24]
 8004788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	2203      	movs	r2, #3
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	43db      	mvns	r3, r3
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	4013      	ands	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f003 0203 	and.w	r2, r3, #3
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 80b4 	beq.w	8004936 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	4b60      	ldr	r3, [pc, #384]	; (8004954 <HAL_GPIO_Init+0x30c>)
 80047d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d6:	4a5f      	ldr	r2, [pc, #380]	; (8004954 <HAL_GPIO_Init+0x30c>)
 80047d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047dc:	6453      	str	r3, [r2, #68]	; 0x44
 80047de:	4b5d      	ldr	r3, [pc, #372]	; (8004954 <HAL_GPIO_Init+0x30c>)
 80047e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047ea:	4a5b      	ldr	r2, [pc, #364]	; (8004958 <HAL_GPIO_Init+0x310>)
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	089b      	lsrs	r3, r3, #2
 80047f0:	3302      	adds	r3, #2
 80047f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	220f      	movs	r2, #15
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	43db      	mvns	r3, r3
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	4013      	ands	r3, r2
 800480c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a52      	ldr	r2, [pc, #328]	; (800495c <HAL_GPIO_Init+0x314>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d02b      	beq.n	800486e <HAL_GPIO_Init+0x226>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a51      	ldr	r2, [pc, #324]	; (8004960 <HAL_GPIO_Init+0x318>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d025      	beq.n	800486a <HAL_GPIO_Init+0x222>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a50      	ldr	r2, [pc, #320]	; (8004964 <HAL_GPIO_Init+0x31c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d01f      	beq.n	8004866 <HAL_GPIO_Init+0x21e>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a4f      	ldr	r2, [pc, #316]	; (8004968 <HAL_GPIO_Init+0x320>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d019      	beq.n	8004862 <HAL_GPIO_Init+0x21a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a4e      	ldr	r2, [pc, #312]	; (800496c <HAL_GPIO_Init+0x324>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d013      	beq.n	800485e <HAL_GPIO_Init+0x216>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a4d      	ldr	r2, [pc, #308]	; (8004970 <HAL_GPIO_Init+0x328>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00d      	beq.n	800485a <HAL_GPIO_Init+0x212>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a4c      	ldr	r2, [pc, #304]	; (8004974 <HAL_GPIO_Init+0x32c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d007      	beq.n	8004856 <HAL_GPIO_Init+0x20e>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a4b      	ldr	r2, [pc, #300]	; (8004978 <HAL_GPIO_Init+0x330>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d101      	bne.n	8004852 <HAL_GPIO_Init+0x20a>
 800484e:	2307      	movs	r3, #7
 8004850:	e00e      	b.n	8004870 <HAL_GPIO_Init+0x228>
 8004852:	2308      	movs	r3, #8
 8004854:	e00c      	b.n	8004870 <HAL_GPIO_Init+0x228>
 8004856:	2306      	movs	r3, #6
 8004858:	e00a      	b.n	8004870 <HAL_GPIO_Init+0x228>
 800485a:	2305      	movs	r3, #5
 800485c:	e008      	b.n	8004870 <HAL_GPIO_Init+0x228>
 800485e:	2304      	movs	r3, #4
 8004860:	e006      	b.n	8004870 <HAL_GPIO_Init+0x228>
 8004862:	2303      	movs	r3, #3
 8004864:	e004      	b.n	8004870 <HAL_GPIO_Init+0x228>
 8004866:	2302      	movs	r3, #2
 8004868:	e002      	b.n	8004870 <HAL_GPIO_Init+0x228>
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <HAL_GPIO_Init+0x228>
 800486e:	2300      	movs	r3, #0
 8004870:	69fa      	ldr	r2, [r7, #28]
 8004872:	f002 0203 	and.w	r2, r2, #3
 8004876:	0092      	lsls	r2, r2, #2
 8004878:	4093      	lsls	r3, r2
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	4313      	orrs	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004880:	4935      	ldr	r1, [pc, #212]	; (8004958 <HAL_GPIO_Init+0x310>)
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	089b      	lsrs	r3, r3, #2
 8004886:	3302      	adds	r3, #2
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800488e:	4b3b      	ldr	r3, [pc, #236]	; (800497c <HAL_GPIO_Init+0x334>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	43db      	mvns	r3, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4013      	ands	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048b2:	4a32      	ldr	r2, [pc, #200]	; (800497c <HAL_GPIO_Init+0x334>)
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80048b8:	4b30      	ldr	r3, [pc, #192]	; (800497c <HAL_GPIO_Init+0x334>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	43db      	mvns	r3, r3
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	4013      	ands	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048dc:	4a27      	ldr	r2, [pc, #156]	; (800497c <HAL_GPIO_Init+0x334>)
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048e2:	4b26      	ldr	r3, [pc, #152]	; (800497c <HAL_GPIO_Init+0x334>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	43db      	mvns	r3, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4013      	ands	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	4313      	orrs	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004906:	4a1d      	ldr	r2, [pc, #116]	; (800497c <HAL_GPIO_Init+0x334>)
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800490c:	4b1b      	ldr	r3, [pc, #108]	; (800497c <HAL_GPIO_Init+0x334>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	43db      	mvns	r3, r3
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4013      	ands	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004930:	4a12      	ldr	r2, [pc, #72]	; (800497c <HAL_GPIO_Init+0x334>)
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	3301      	adds	r3, #1
 800493a:	61fb      	str	r3, [r7, #28]
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	2b0f      	cmp	r3, #15
 8004940:	f67f ae90 	bls.w	8004664 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop
 8004948:	3724      	adds	r7, #36	; 0x24
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40023800 	.word	0x40023800
 8004958:	40013800 	.word	0x40013800
 800495c:	40020000 	.word	0x40020000
 8004960:	40020400 	.word	0x40020400
 8004964:	40020800 	.word	0x40020800
 8004968:	40020c00 	.word	0x40020c00
 800496c:	40021000 	.word	0x40021000
 8004970:	40021400 	.word	0x40021400
 8004974:	40021800 	.word	0x40021800
 8004978:	40021c00 	.word	0x40021c00
 800497c:	40013c00 	.word	0x40013c00

08004980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	460b      	mov	r3, r1
 800498a:	807b      	strh	r3, [r7, #2]
 800498c:	4613      	mov	r3, r2
 800498e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004990:	787b      	ldrb	r3, [r7, #1]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004996:	887a      	ldrh	r2, [r7, #2]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800499c:	e003      	b.n	80049a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800499e:	887b      	ldrh	r3, [r7, #2]
 80049a0:	041a      	lsls	r2, r3, #16
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	619a      	str	r2, [r3, #24]
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
	...

080049b4 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <HAL_PWR_EnableBkUpAccess+0x20>)
 80049bc:	2201      	movs	r2, #1
 80049be:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <HAL_PWR_EnableBkUpAccess+0x24>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80049c6:	687b      	ldr	r3, [r7, #4]
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	420e0020 	.word	0x420e0020
 80049d8:	40007000 	.word	0x40007000

080049dc <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80049e2:	4b06      	ldr	r3, [pc, #24]	; (80049fc <HAL_PWR_DisableBkUpAccess+0x20>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80049e8:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <HAL_PWR_DisableBkUpAccess+0x24>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80049ee:	687b      	ldr	r3, [r7, #4]
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	420e0020 	.word	0x420e0020
 8004a00:	40007000 	.word	0x40007000

08004a04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e264      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d075      	beq.n	8004b0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a22:	4ba3      	ldr	r3, [pc, #652]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 030c 	and.w	r3, r3, #12
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d00c      	beq.n	8004a48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a2e:	4ba0      	ldr	r3, [pc, #640]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d112      	bne.n	8004a60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a3a:	4b9d      	ldr	r3, [pc, #628]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a46:	d10b      	bne.n	8004a60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a48:	4b99      	ldr	r3, [pc, #612]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d05b      	beq.n	8004b0c <HAL_RCC_OscConfig+0x108>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d157      	bne.n	8004b0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e23f      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a68:	d106      	bne.n	8004a78 <HAL_RCC_OscConfig+0x74>
 8004a6a:	4b91      	ldr	r3, [pc, #580]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a90      	ldr	r2, [pc, #576]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	e01d      	b.n	8004ab4 <HAL_RCC_OscConfig+0xb0>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a80:	d10c      	bne.n	8004a9c <HAL_RCC_OscConfig+0x98>
 8004a82:	4b8b      	ldr	r3, [pc, #556]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a8a      	ldr	r2, [pc, #552]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	4b88      	ldr	r3, [pc, #544]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a87      	ldr	r2, [pc, #540]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	e00b      	b.n	8004ab4 <HAL_RCC_OscConfig+0xb0>
 8004a9c:	4b84      	ldr	r3, [pc, #528]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a83      	ldr	r2, [pc, #524]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	4b81      	ldr	r3, [pc, #516]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a80      	ldr	r2, [pc, #512]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d013      	beq.n	8004ae4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004abc:	f7ff f8ae 	bl	8003c1c <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ac4:	f7ff f8aa 	bl	8003c1c <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b64      	cmp	r3, #100	; 0x64
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e204      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad6:	4b76      	ldr	r3, [pc, #472]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0f0      	beq.n	8004ac4 <HAL_RCC_OscConfig+0xc0>
 8004ae2:	e014      	b.n	8004b0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae4:	f7ff f89a 	bl	8003c1c <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aec:	f7ff f896 	bl	8003c1c <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b64      	cmp	r3, #100	; 0x64
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e1f0      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004afe:	4b6c      	ldr	r3, [pc, #432]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f0      	bne.n	8004aec <HAL_RCC_OscConfig+0xe8>
 8004b0a:	e000      	b.n	8004b0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d063      	beq.n	8004be2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b1a:	4b65      	ldr	r3, [pc, #404]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 030c 	and.w	r3, r3, #12
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00b      	beq.n	8004b3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b26:	4b62      	ldr	r3, [pc, #392]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b2e:	2b08      	cmp	r3, #8
 8004b30:	d11c      	bne.n	8004b6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b32:	4b5f      	ldr	r3, [pc, #380]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d116      	bne.n	8004b6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b3e:	4b5c      	ldr	r3, [pc, #368]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d005      	beq.n	8004b56 <HAL_RCC_OscConfig+0x152>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d001      	beq.n	8004b56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e1c4      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b56:	4b56      	ldr	r3, [pc, #344]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	4952      	ldr	r1, [pc, #328]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b6a:	e03a      	b.n	8004be2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d020      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b74:	4b4f      	ldr	r3, [pc, #316]	; (8004cb4 <HAL_RCC_OscConfig+0x2b0>)
 8004b76:	2201      	movs	r2, #1
 8004b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7a:	f7ff f84f 	bl	8003c1c <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b82:	f7ff f84b 	bl	8003c1c <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e1a5      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b94:	4b46      	ldr	r3, [pc, #280]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0f0      	beq.n	8004b82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba0:	4b43      	ldr	r3, [pc, #268]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	4940      	ldr	r1, [pc, #256]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	600b      	str	r3, [r1, #0]
 8004bb4:	e015      	b.n	8004be2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bb6:	4b3f      	ldr	r3, [pc, #252]	; (8004cb4 <HAL_RCC_OscConfig+0x2b0>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbc:	f7ff f82e 	bl	8003c1c <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bc4:	f7ff f82a 	bl	8003c1c <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e184      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bd6:	4b36      	ldr	r3, [pc, #216]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f0      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d030      	beq.n	8004c50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d016      	beq.n	8004c24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bf6:	4b30      	ldr	r3, [pc, #192]	; (8004cb8 <HAL_RCC_OscConfig+0x2b4>)
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bfc:	f7ff f80e 	bl	8003c1c <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c04:	f7ff f80a 	bl	8003c1c <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e164      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c16:	4b26      	ldr	r3, [pc, #152]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f0      	beq.n	8004c04 <HAL_RCC_OscConfig+0x200>
 8004c22:	e015      	b.n	8004c50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c24:	4b24      	ldr	r3, [pc, #144]	; (8004cb8 <HAL_RCC_OscConfig+0x2b4>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c2a:	f7fe fff7 	bl	8003c1c <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c30:	e008      	b.n	8004c44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c32:	f7fe fff3 	bl	8003c1c <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e14d      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c44:	4b1a      	ldr	r3, [pc, #104]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1f0      	bne.n	8004c32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 80a0 	beq.w	8004d9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c62:	4b13      	ldr	r3, [pc, #76]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10f      	bne.n	8004c8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60bb      	str	r3, [r7, #8]
 8004c72:	4b0f      	ldr	r3, [pc, #60]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	4a0e      	ldr	r2, [pc, #56]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c7e:	4b0c      	ldr	r3, [pc, #48]	; (8004cb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c86:	60bb      	str	r3, [r7, #8]
 8004c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c8e:	4b0b      	ldr	r3, [pc, #44]	; (8004cbc <HAL_RCC_OscConfig+0x2b8>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d121      	bne.n	8004cde <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c9a:	4b08      	ldr	r3, [pc, #32]	; (8004cbc <HAL_RCC_OscConfig+0x2b8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a07      	ldr	r2, [pc, #28]	; (8004cbc <HAL_RCC_OscConfig+0x2b8>)
 8004ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ca6:	f7fe ffb9 	bl	8003c1c <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cac:	e011      	b.n	8004cd2 <HAL_RCC_OscConfig+0x2ce>
 8004cae:	bf00      	nop
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	42470000 	.word	0x42470000
 8004cb8:	42470e80 	.word	0x42470e80
 8004cbc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cc0:	f7fe ffac 	bl	8003c1c <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e106      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd2:	4b85      	ldr	r3, [pc, #532]	; (8004ee8 <HAL_RCC_OscConfig+0x4e4>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0f0      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d106      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x2f0>
 8004ce6:	4b81      	ldr	r3, [pc, #516]	; (8004eec <HAL_RCC_OscConfig+0x4e8>)
 8004ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cea:	4a80      	ldr	r2, [pc, #512]	; (8004eec <HAL_RCC_OscConfig+0x4e8>)
 8004cec:	f043 0301 	orr.w	r3, r3, #1
 8004cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8004cf2:	e01c      	b.n	8004d2e <HAL_RCC_OscConfig+0x32a>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	2b05      	cmp	r3, #5
 8004cfa:	d10c      	bne.n	8004d16 <HAL_RCC_OscConfig+0x312>
 8004cfc:	4b7b      	ldr	r3, [pc, #492]	; (8004eec <HAL_RCC_OscConfig+0x4e8>)
 8004cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d00:	4a7a      	ldr	r2, [pc, #488]	; (8004eec <HAL_RCC_OscConfig+0x4e8>)
 8004d02:	f043 0304 	orr.w	r3, r3, #4
 8004d06:	6713      	str	r3, [r2, #112]	; 0x70
 8004d08:	4b78      	ldr	r3, [pc, #480]	; (8004eec <HAL_RCC_OscConfig+0x4e8>)
 8004d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0c:	4a77      	ldr	r2, [pc, #476]	; (8004eec <HAL_RCC_OscConfig+0x4e8>)
 8004d0e:	f043 0301 	orr.w	r3, r3, #1
 8004d12:	6713      	str	r3, [r2, #112]	; 0x70
 8004d14:	e00b      	b.n	8004d2e <HAL_RCC_OscConfig+0x32a>
 8004d16:	4b75      	ldr	r3, [pc, #468]	; (8004eec <HAL_RCC_OscConfig+0x4e8>)
 8004d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1a:	4a74      	ldr	r2, [pc, #464]	; (8004eec <HAL_RCC_OscConfig+0x4e8>)
 8004d1c:	f023 0301 	bic.w	r3, r3, #1
 8004d20:	6713      	str	r3, [r2, #112]	; 0x70
 8004d22:	4b72      	ldr	r3, [pc, #456]	; (8004eec <HAL_RCC_OscConfig+0x4e8>)
 8004d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d26:	4a71      	ldr	r2, [pc, #452]	; (8004eec <HAL_RCC_OscConfig+0x4e8>)
 8004d28:	f023 0304 	bic.w	r3, r3, #4
 8004d2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d015      	beq.n	8004d62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d36:	f7fe ff71 	bl	8003c1c <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d3c:	e00a      	b.n	8004d54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d3e:	f7fe ff6d 	bl	8003c1c <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e0c5      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d54:	4b65      	ldr	r3, [pc, #404]	; (8004eec <HAL_RCC_OscConfig+0x4e8>)
 8004d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0ee      	beq.n	8004d3e <HAL_RCC_OscConfig+0x33a>
 8004d60:	e014      	b.n	8004d8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d62:	f7fe ff5b 	bl	8003c1c <HAL_GetTick>
 8004d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d68:	e00a      	b.n	8004d80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d6a:	f7fe ff57 	bl	8003c1c <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e0af      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d80:	4b5a      	ldr	r3, [pc, #360]	; (8004eec <HAL_RCC_OscConfig+0x4e8>)
 8004d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1ee      	bne.n	8004d6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d8c:	7dfb      	ldrb	r3, [r7, #23]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d105      	bne.n	8004d9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d92:	4b56      	ldr	r3, [pc, #344]	; (8004eec <HAL_RCC_OscConfig+0x4e8>)
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	4a55      	ldr	r2, [pc, #340]	; (8004eec <HAL_RCC_OscConfig+0x4e8>)
 8004d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 809b 	beq.w	8004ede <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004da8:	4b50      	ldr	r3, [pc, #320]	; (8004eec <HAL_RCC_OscConfig+0x4e8>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f003 030c 	and.w	r3, r3, #12
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d05c      	beq.n	8004e6e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d141      	bne.n	8004e40 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dbc:	4b4c      	ldr	r3, [pc, #304]	; (8004ef0 <HAL_RCC_OscConfig+0x4ec>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc2:	f7fe ff2b 	bl	8003c1c <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dc8:	e008      	b.n	8004ddc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dca:	f7fe ff27 	bl	8003c1c <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e081      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ddc:	4b43      	ldr	r3, [pc, #268]	; (8004eec <HAL_RCC_OscConfig+0x4e8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1f0      	bne.n	8004dca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	69da      	ldr	r2, [r3, #28]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	019b      	lsls	r3, r3, #6
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	085b      	lsrs	r3, r3, #1
 8004e00:	3b01      	subs	r3, #1
 8004e02:	041b      	lsls	r3, r3, #16
 8004e04:	431a      	orrs	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	061b      	lsls	r3, r3, #24
 8004e0c:	4937      	ldr	r1, [pc, #220]	; (8004eec <HAL_RCC_OscConfig+0x4e8>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e12:	4b37      	ldr	r3, [pc, #220]	; (8004ef0 <HAL_RCC_OscConfig+0x4ec>)
 8004e14:	2201      	movs	r2, #1
 8004e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e18:	f7fe ff00 	bl	8003c1c <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e20:	f7fe fefc 	bl	8003c1c <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e056      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e32:	4b2e      	ldr	r3, [pc, #184]	; (8004eec <HAL_RCC_OscConfig+0x4e8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0f0      	beq.n	8004e20 <HAL_RCC_OscConfig+0x41c>
 8004e3e:	e04e      	b.n	8004ede <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e40:	4b2b      	ldr	r3, [pc, #172]	; (8004ef0 <HAL_RCC_OscConfig+0x4ec>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e46:	f7fe fee9 	bl	8003c1c <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e4c:	e008      	b.n	8004e60 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e4e:	f7fe fee5 	bl	8003c1c <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e03f      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e60:	4b22      	ldr	r3, [pc, #136]	; (8004eec <HAL_RCC_OscConfig+0x4e8>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1f0      	bne.n	8004e4e <HAL_RCC_OscConfig+0x44a>
 8004e6c:	e037      	b.n	8004ede <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d101      	bne.n	8004e7a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e032      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e7a:	4b1c      	ldr	r3, [pc, #112]	; (8004eec <HAL_RCC_OscConfig+0x4e8>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d028      	beq.n	8004eda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d121      	bne.n	8004eda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d11a      	bne.n	8004eda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004eaa:	4013      	ands	r3, r2
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004eb0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d111      	bne.n	8004eda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec0:	085b      	lsrs	r3, r3, #1
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d107      	bne.n	8004eda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d001      	beq.n	8004ede <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40007000 	.word	0x40007000
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	42470060 	.word	0x42470060

08004ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e0cc      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f08:	4b68      	ldr	r3, [pc, #416]	; (80050ac <HAL_RCC_ClockConfig+0x1b8>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d90c      	bls.n	8004f30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f16:	4b65      	ldr	r3, [pc, #404]	; (80050ac <HAL_RCC_ClockConfig+0x1b8>)
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	b2d2      	uxtb	r2, r2
 8004f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f1e:	4b63      	ldr	r3, [pc, #396]	; (80050ac <HAL_RCC_ClockConfig+0x1b8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d001      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e0b8      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d020      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f48:	4b59      	ldr	r3, [pc, #356]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	4a58      	ldr	r2, [pc, #352]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0308 	and.w	r3, r3, #8
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d005      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f60:	4b53      	ldr	r3, [pc, #332]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	4a52      	ldr	r2, [pc, #328]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f6c:	4b50      	ldr	r3, [pc, #320]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	494d      	ldr	r1, [pc, #308]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d044      	beq.n	8005014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d107      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f92:	4b47      	ldr	r3, [pc, #284]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d119      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e07f      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d003      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d107      	bne.n	8004fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb2:	4b3f      	ldr	r3, [pc, #252]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d109      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e06f      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc2:	4b3b      	ldr	r3, [pc, #236]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e067      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fd2:	4b37      	ldr	r3, [pc, #220]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f023 0203 	bic.w	r2, r3, #3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	4934      	ldr	r1, [pc, #208]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fe4:	f7fe fe1a 	bl	8003c1c <HAL_GetTick>
 8004fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fea:	e00a      	b.n	8005002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fec:	f7fe fe16 	bl	8003c1c <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e04f      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005002:	4b2b      	ldr	r3, [pc, #172]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 020c 	and.w	r2, r3, #12
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	429a      	cmp	r2, r3
 8005012:	d1eb      	bne.n	8004fec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005014:	4b25      	ldr	r3, [pc, #148]	; (80050ac <HAL_RCC_ClockConfig+0x1b8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	429a      	cmp	r2, r3
 8005020:	d20c      	bcs.n	800503c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005022:	4b22      	ldr	r3, [pc, #136]	; (80050ac <HAL_RCC_ClockConfig+0x1b8>)
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800502a:	4b20      	ldr	r3, [pc, #128]	; (80050ac <HAL_RCC_ClockConfig+0x1b8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d001      	beq.n	800503c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e032      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d008      	beq.n	800505a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005048:	4b19      	ldr	r3, [pc, #100]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	4916      	ldr	r1, [pc, #88]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	4313      	orrs	r3, r2
 8005058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d009      	beq.n	800507a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005066:	4b12      	ldr	r3, [pc, #72]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	490e      	ldr	r1, [pc, #56]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	4313      	orrs	r3, r2
 8005078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800507a:	f000 f821 	bl	80050c0 <HAL_RCC_GetSysClockFreq>
 800507e:	4602      	mov	r2, r0
 8005080:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	091b      	lsrs	r3, r3, #4
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	490a      	ldr	r1, [pc, #40]	; (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 800508c:	5ccb      	ldrb	r3, [r1, r3]
 800508e:	fa22 f303 	lsr.w	r3, r2, r3
 8005092:	4a09      	ldr	r2, [pc, #36]	; (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005096:	4b09      	ldr	r3, [pc, #36]	; (80050bc <HAL_RCC_ClockConfig+0x1c8>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4618      	mov	r0, r3
 800509c:	f7fe fd7a 	bl	8003b94 <HAL_InitTick>

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	40023c00 	.word	0x40023c00
 80050b0:	40023800 	.word	0x40023800
 80050b4:	0800c9c4 	.word	0x0800c9c4
 80050b8:	20000008 	.word	0x20000008
 80050bc:	2000000c 	.word	0x2000000c

080050c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050c0:	b5b0      	push	{r4, r5, r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050c6:	2100      	movs	r1, #0
 80050c8:	6079      	str	r1, [r7, #4]
 80050ca:	2100      	movs	r1, #0
 80050cc:	60f9      	str	r1, [r7, #12]
 80050ce:	2100      	movs	r1, #0
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80050d2:	2100      	movs	r1, #0
 80050d4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050d6:	4952      	ldr	r1, [pc, #328]	; (8005220 <HAL_RCC_GetSysClockFreq+0x160>)
 80050d8:	6889      	ldr	r1, [r1, #8]
 80050da:	f001 010c 	and.w	r1, r1, #12
 80050de:	2908      	cmp	r1, #8
 80050e0:	d00d      	beq.n	80050fe <HAL_RCC_GetSysClockFreq+0x3e>
 80050e2:	2908      	cmp	r1, #8
 80050e4:	f200 8094 	bhi.w	8005210 <HAL_RCC_GetSysClockFreq+0x150>
 80050e8:	2900      	cmp	r1, #0
 80050ea:	d002      	beq.n	80050f2 <HAL_RCC_GetSysClockFreq+0x32>
 80050ec:	2904      	cmp	r1, #4
 80050ee:	d003      	beq.n	80050f8 <HAL_RCC_GetSysClockFreq+0x38>
 80050f0:	e08e      	b.n	8005210 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050f2:	4b4c      	ldr	r3, [pc, #304]	; (8005224 <HAL_RCC_GetSysClockFreq+0x164>)
 80050f4:	60bb      	str	r3, [r7, #8]
       break;
 80050f6:	e08e      	b.n	8005216 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050f8:	4b4b      	ldr	r3, [pc, #300]	; (8005228 <HAL_RCC_GetSysClockFreq+0x168>)
 80050fa:	60bb      	str	r3, [r7, #8]
      break;
 80050fc:	e08b      	b.n	8005216 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050fe:	4948      	ldr	r1, [pc, #288]	; (8005220 <HAL_RCC_GetSysClockFreq+0x160>)
 8005100:	6849      	ldr	r1, [r1, #4]
 8005102:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005106:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005108:	4945      	ldr	r1, [pc, #276]	; (8005220 <HAL_RCC_GetSysClockFreq+0x160>)
 800510a:	6849      	ldr	r1, [r1, #4]
 800510c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005110:	2900      	cmp	r1, #0
 8005112:	d024      	beq.n	800515e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005114:	4942      	ldr	r1, [pc, #264]	; (8005220 <HAL_RCC_GetSysClockFreq+0x160>)
 8005116:	6849      	ldr	r1, [r1, #4]
 8005118:	0989      	lsrs	r1, r1, #6
 800511a:	4608      	mov	r0, r1
 800511c:	f04f 0100 	mov.w	r1, #0
 8005120:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005124:	f04f 0500 	mov.w	r5, #0
 8005128:	ea00 0204 	and.w	r2, r0, r4
 800512c:	ea01 0305 	and.w	r3, r1, r5
 8005130:	493d      	ldr	r1, [pc, #244]	; (8005228 <HAL_RCC_GetSysClockFreq+0x168>)
 8005132:	fb01 f003 	mul.w	r0, r1, r3
 8005136:	2100      	movs	r1, #0
 8005138:	fb01 f102 	mul.w	r1, r1, r2
 800513c:	1844      	adds	r4, r0, r1
 800513e:	493a      	ldr	r1, [pc, #232]	; (8005228 <HAL_RCC_GetSysClockFreq+0x168>)
 8005140:	fba2 0101 	umull	r0, r1, r2, r1
 8005144:	1863      	adds	r3, r4, r1
 8005146:	4619      	mov	r1, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	461a      	mov	r2, r3
 800514c:	f04f 0300 	mov.w	r3, #0
 8005150:	f7fb fd22 	bl	8000b98 <__aeabi_uldivmod>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4613      	mov	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	e04a      	b.n	80051f4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800515e:	4b30      	ldr	r3, [pc, #192]	; (8005220 <HAL_RCC_GetSysClockFreq+0x160>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	099b      	lsrs	r3, r3, #6
 8005164:	461a      	mov	r2, r3
 8005166:	f04f 0300 	mov.w	r3, #0
 800516a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800516e:	f04f 0100 	mov.w	r1, #0
 8005172:	ea02 0400 	and.w	r4, r2, r0
 8005176:	ea03 0501 	and.w	r5, r3, r1
 800517a:	4620      	mov	r0, r4
 800517c:	4629      	mov	r1, r5
 800517e:	f04f 0200 	mov.w	r2, #0
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	014b      	lsls	r3, r1, #5
 8005188:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800518c:	0142      	lsls	r2, r0, #5
 800518e:	4610      	mov	r0, r2
 8005190:	4619      	mov	r1, r3
 8005192:	1b00      	subs	r0, r0, r4
 8005194:	eb61 0105 	sbc.w	r1, r1, r5
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	018b      	lsls	r3, r1, #6
 80051a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051a6:	0182      	lsls	r2, r0, #6
 80051a8:	1a12      	subs	r2, r2, r0
 80051aa:	eb63 0301 	sbc.w	r3, r3, r1
 80051ae:	f04f 0000 	mov.w	r0, #0
 80051b2:	f04f 0100 	mov.w	r1, #0
 80051b6:	00d9      	lsls	r1, r3, #3
 80051b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051bc:	00d0      	lsls	r0, r2, #3
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	1912      	adds	r2, r2, r4
 80051c4:	eb45 0303 	adc.w	r3, r5, r3
 80051c8:	f04f 0000 	mov.w	r0, #0
 80051cc:	f04f 0100 	mov.w	r1, #0
 80051d0:	0299      	lsls	r1, r3, #10
 80051d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80051d6:	0290      	lsls	r0, r2, #10
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	4610      	mov	r0, r2
 80051de:	4619      	mov	r1, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	461a      	mov	r2, r3
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	f7fb fcd6 	bl	8000b98 <__aeabi_uldivmod>
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	4613      	mov	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051f4:	4b0a      	ldr	r3, [pc, #40]	; (8005220 <HAL_RCC_GetSysClockFreq+0x160>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	0c1b      	lsrs	r3, r3, #16
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	3301      	adds	r3, #1
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	fbb2 f3f3 	udiv	r3, r2, r3
 800520c:	60bb      	str	r3, [r7, #8]
      break;
 800520e:	e002      	b.n	8005216 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005210:	4b04      	ldr	r3, [pc, #16]	; (8005224 <HAL_RCC_GetSysClockFreq+0x164>)
 8005212:	60bb      	str	r3, [r7, #8]
      break;
 8005214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005216:	68bb      	ldr	r3, [r7, #8]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bdb0      	pop	{r4, r5, r7, pc}
 8005220:	40023800 	.word	0x40023800
 8005224:	00f42400 	.word	0x00f42400
 8005228:	017d7840 	.word	0x017d7840

0800522c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005230:	4b03      	ldr	r3, [pc, #12]	; (8005240 <HAL_RCC_GetHCLKFreq+0x14>)
 8005232:	681b      	ldr	r3, [r3, #0]
}
 8005234:	4618      	mov	r0, r3
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	20000008 	.word	0x20000008

08005244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005248:	f7ff fff0 	bl	800522c <HAL_RCC_GetHCLKFreq>
 800524c:	4602      	mov	r2, r0
 800524e:	4b05      	ldr	r3, [pc, #20]	; (8005264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	0a9b      	lsrs	r3, r3, #10
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	4903      	ldr	r1, [pc, #12]	; (8005268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800525a:	5ccb      	ldrb	r3, [r1, r3]
 800525c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005260:	4618      	mov	r0, r3
 8005262:	bd80      	pop	{r7, pc}
 8005264:	40023800 	.word	0x40023800
 8005268:	0800c9d4 	.word	0x0800c9d4

0800526c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005270:	f7ff ffdc 	bl	800522c <HAL_RCC_GetHCLKFreq>
 8005274:	4602      	mov	r2, r0
 8005276:	4b05      	ldr	r3, [pc, #20]	; (800528c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	0b5b      	lsrs	r3, r3, #13
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	4903      	ldr	r1, [pc, #12]	; (8005290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005282:	5ccb      	ldrb	r3, [r1, r3]
 8005284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005288:	4618      	mov	r0, r3
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40023800 	.word	0x40023800
 8005290:	0800c9d4 	.word	0x0800c9d4

08005294 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d105      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d035      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052bc:	4b62      	ldr	r3, [pc, #392]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80052be:	2200      	movs	r2, #0
 80052c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052c2:	f7fe fcab 	bl	8003c1c <HAL_GetTick>
 80052c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052c8:	e008      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052ca:	f7fe fca7 	bl	8003c1c <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d901      	bls.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e0b0      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052dc:	4b5b      	ldr	r3, [pc, #364]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1f0      	bne.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	019a      	lsls	r2, r3, #6
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	071b      	lsls	r3, r3, #28
 80052f4:	4955      	ldr	r1, [pc, #340]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052fc:	4b52      	ldr	r3, [pc, #328]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80052fe:	2201      	movs	r2, #1
 8005300:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005302:	f7fe fc8b 	bl	8003c1c <HAL_GetTick>
 8005306:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005308:	e008      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800530a:	f7fe fc87 	bl	8003c1c <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d901      	bls.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e090      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800531c:	4b4b      	ldr	r3, [pc, #300]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0f0      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 8083 	beq.w	800543c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]
 800533a:	4b44      	ldr	r3, [pc, #272]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	4a43      	ldr	r2, [pc, #268]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005344:	6413      	str	r3, [r2, #64]	; 0x40
 8005346:	4b41      	ldr	r3, [pc, #260]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005352:	4b3f      	ldr	r3, [pc, #252]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a3e      	ldr	r2, [pc, #248]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800535c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800535e:	f7fe fc5d 	bl	8003c1c <HAL_GetTick>
 8005362:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005364:	e008      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005366:	f7fe fc59 	bl	8003c1c <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e062      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005378:	4b35      	ldr	r3, [pc, #212]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0f0      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005384:	4b31      	ldr	r3, [pc, #196]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800538c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d02f      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d028      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053a2:	4b2a      	ldr	r3, [pc, #168]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053ac:	4b29      	ldr	r3, [pc, #164]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80053ae:	2201      	movs	r2, #1
 80053b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053b2:	4b28      	ldr	r3, [pc, #160]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80053b8:	4a24      	ldr	r2, [pc, #144]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053be:	4b23      	ldr	r3, [pc, #140]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d114      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80053ca:	f7fe fc27 	bl	8003c1c <HAL_GetTick>
 80053ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d0:	e00a      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053d2:	f7fe fc23 	bl	8003c1c <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e02a      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e8:	4b18      	ldr	r3, [pc, #96]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0ee      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005400:	d10d      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005402:	4b12      	ldr	r3, [pc, #72]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005416:	490d      	ldr	r1, [pc, #52]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005418:	4313      	orrs	r3, r2
 800541a:	608b      	str	r3, [r1, #8]
 800541c:	e005      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800541e:	4b0b      	ldr	r3, [pc, #44]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	4a0a      	ldr	r2, [pc, #40]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005424:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005428:	6093      	str	r3, [r2, #8]
 800542a:	4b08      	ldr	r3, [pc, #32]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800542c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005436:	4905      	ldr	r1, [pc, #20]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005438:	4313      	orrs	r3, r2
 800543a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	42470068 	.word	0x42470068
 800544c:	40023800 	.word	0x40023800
 8005450:	40007000 	.word	0x40007000
 8005454:	42470e40 	.word	0x42470e40

08005458 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e083      	b.n	8005572 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	7f5b      	ldrb	r3, [r3, #29]
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d105      	bne.n	8005480 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7fe f8a0 	bl	80035c0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	22ca      	movs	r2, #202	; 0xca
 800548c:	625a      	str	r2, [r3, #36]	; 0x24
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2253      	movs	r2, #83	; 0x53
 8005494:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f897 	bl	80055ca <RTC_EnterInitMode>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d008      	beq.n	80054b4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	22ff      	movs	r2, #255	; 0xff
 80054a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2204      	movs	r2, #4
 80054ae:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e05e      	b.n	8005572 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	6812      	ldr	r2, [r2, #0]
 80054be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80054c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054c6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6899      	ldr	r1, [r3, #8]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	68d2      	ldr	r2, [r2, #12]
 80054ee:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6919      	ldr	r1, [r3, #16]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	041a      	lsls	r2, r3, #16
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005512:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 0320 	and.w	r3, r3, #32
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10e      	bne.n	8005540 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f829 	bl	800557a <HAL_RTC_WaitForSynchro>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d008      	beq.n	8005540 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	22ff      	movs	r2, #255	; 0xff
 8005534:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2204      	movs	r2, #4
 800553a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e018      	b.n	8005572 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800554e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	22ff      	movs	r2, #255	; 0xff
 8005568:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005570:	2300      	movs	r3, #0
  }
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b084      	sub	sp, #16
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005594:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005596:	f7fe fb41 	bl	8003c1c <HAL_GetTick>
 800559a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800559c:	e009      	b.n	80055b2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800559e:	f7fe fb3d 	bl	8003c1c <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055ac:	d901      	bls.n	80055b2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e007      	b.n	80055c2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f003 0320 	and.w	r3, r3, #32
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0ee      	beq.n	800559e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b084      	sub	sp, #16
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d119      	bne.n	8005618 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055ee:	f7fe fb15 	bl	8003c1c <HAL_GetTick>
 80055f2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80055f4:	e009      	b.n	800560a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80055f6:	f7fe fb11 	bl	8003c1c <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005604:	d901      	bls.n	800560a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e007      	b.n	800561a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0ee      	beq.n	80055f6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	7f1b      	ldrb	r3, [r3, #28]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_RTCEx_SetCalibrationOutPut+0x16>
 8005634:	2302      	movs	r3, #2
 8005636:	e030      	b.n	800569a <HAL_RTCEx_SetCalibrationOutPut+0x78>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2202      	movs	r2, #2
 8005642:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	22ca      	movs	r2, #202	; 0xca
 800564a:	625a      	str	r2, [r3, #36]	; 0x24
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2253      	movs	r2, #83	; 0x53
 8005652:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8005662:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6899      	ldr	r1, [r3, #8]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005682:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	22ff      	movs	r2, #255	; 0xff
 800568a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b082      	sub	sp, #8
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e041      	b.n	800573c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d106      	bne.n	80056d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f7fd ffa1 	bl	8003614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2202      	movs	r2, #2
 80056d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	3304      	adds	r3, #4
 80056e2:	4619      	mov	r1, r3
 80056e4:	4610      	mov	r0, r2
 80056e6:	f000 fff3 	bl	80066d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b01      	cmp	r3, #1
 8005756:	d001      	beq.n	800575c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e046      	b.n	80057ea <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a23      	ldr	r2, [pc, #140]	; (80057f8 <HAL_TIM_Base_Start+0xb4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d022      	beq.n	80057b4 <HAL_TIM_Base_Start+0x70>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005776:	d01d      	beq.n	80057b4 <HAL_TIM_Base_Start+0x70>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a1f      	ldr	r2, [pc, #124]	; (80057fc <HAL_TIM_Base_Start+0xb8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d018      	beq.n	80057b4 <HAL_TIM_Base_Start+0x70>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a1e      	ldr	r2, [pc, #120]	; (8005800 <HAL_TIM_Base_Start+0xbc>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d013      	beq.n	80057b4 <HAL_TIM_Base_Start+0x70>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a1c      	ldr	r2, [pc, #112]	; (8005804 <HAL_TIM_Base_Start+0xc0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00e      	beq.n	80057b4 <HAL_TIM_Base_Start+0x70>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a1b      	ldr	r2, [pc, #108]	; (8005808 <HAL_TIM_Base_Start+0xc4>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d009      	beq.n	80057b4 <HAL_TIM_Base_Start+0x70>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a19      	ldr	r2, [pc, #100]	; (800580c <HAL_TIM_Base_Start+0xc8>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d004      	beq.n	80057b4 <HAL_TIM_Base_Start+0x70>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a18      	ldr	r2, [pc, #96]	; (8005810 <HAL_TIM_Base_Start+0xcc>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d111      	bne.n	80057d8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 0307 	and.w	r3, r3, #7
 80057be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2b06      	cmp	r3, #6
 80057c4:	d010      	beq.n	80057e8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f042 0201 	orr.w	r2, r2, #1
 80057d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d6:	e007      	b.n	80057e8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0201 	orr.w	r2, r2, #1
 80057e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40010000 	.word	0x40010000
 80057fc:	40000400 	.word	0x40000400
 8005800:	40000800 	.word	0x40000800
 8005804:	40000c00 	.word	0x40000c00
 8005808:	40010400 	.word	0x40010400
 800580c:	40014000 	.word	0x40014000
 8005810:	40001800 	.word	0x40001800

08005814 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e041      	b.n	80058aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d106      	bne.n	8005840 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7fe f80c 	bl	8003858 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3304      	adds	r3, #4
 8005850:	4619      	mov	r1, r3
 8005852:	4610      	mov	r0, r2
 8005854:	f000 ff3c 	bl	80066d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d109      	bne.n	80058d8 <HAL_TIM_PWM_Start+0x24>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	bf14      	ite	ne
 80058d0:	2301      	movne	r3, #1
 80058d2:	2300      	moveq	r3, #0
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	e022      	b.n	800591e <HAL_TIM_PWM_Start+0x6a>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2b04      	cmp	r3, #4
 80058dc:	d109      	bne.n	80058f2 <HAL_TIM_PWM_Start+0x3e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	bf14      	ite	ne
 80058ea:	2301      	movne	r3, #1
 80058ec:	2300      	moveq	r3, #0
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	e015      	b.n	800591e <HAL_TIM_PWM_Start+0x6a>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d109      	bne.n	800590c <HAL_TIM_PWM_Start+0x58>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b01      	cmp	r3, #1
 8005902:	bf14      	ite	ne
 8005904:	2301      	movne	r3, #1
 8005906:	2300      	moveq	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	e008      	b.n	800591e <HAL_TIM_PWM_Start+0x6a>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b01      	cmp	r3, #1
 8005916:	bf14      	ite	ne
 8005918:	2301      	movne	r3, #1
 800591a:	2300      	moveq	r3, #0
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e07c      	b.n	8005a20 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d104      	bne.n	8005936 <HAL_TIM_PWM_Start+0x82>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005934:	e013      	b.n	800595e <HAL_TIM_PWM_Start+0xaa>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b04      	cmp	r3, #4
 800593a:	d104      	bne.n	8005946 <HAL_TIM_PWM_Start+0x92>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005944:	e00b      	b.n	800595e <HAL_TIM_PWM_Start+0xaa>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b08      	cmp	r3, #8
 800594a:	d104      	bne.n	8005956 <HAL_TIM_PWM_Start+0xa2>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005954:	e003      	b.n	800595e <HAL_TIM_PWM_Start+0xaa>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2202      	movs	r2, #2
 800595a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2201      	movs	r2, #1
 8005964:	6839      	ldr	r1, [r7, #0]
 8005966:	4618      	mov	r0, r3
 8005968:	f001 fac6 	bl	8006ef8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a2d      	ldr	r2, [pc, #180]	; (8005a28 <HAL_TIM_PWM_Start+0x174>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d004      	beq.n	8005980 <HAL_TIM_PWM_Start+0xcc>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a2c      	ldr	r2, [pc, #176]	; (8005a2c <HAL_TIM_PWM_Start+0x178>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d101      	bne.n	8005984 <HAL_TIM_PWM_Start+0xd0>
 8005980:	2301      	movs	r3, #1
 8005982:	e000      	b.n	8005986 <HAL_TIM_PWM_Start+0xd2>
 8005984:	2300      	movs	r3, #0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d007      	beq.n	800599a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005998:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a22      	ldr	r2, [pc, #136]	; (8005a28 <HAL_TIM_PWM_Start+0x174>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d022      	beq.n	80059ea <HAL_TIM_PWM_Start+0x136>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ac:	d01d      	beq.n	80059ea <HAL_TIM_PWM_Start+0x136>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a1f      	ldr	r2, [pc, #124]	; (8005a30 <HAL_TIM_PWM_Start+0x17c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d018      	beq.n	80059ea <HAL_TIM_PWM_Start+0x136>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a1d      	ldr	r2, [pc, #116]	; (8005a34 <HAL_TIM_PWM_Start+0x180>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d013      	beq.n	80059ea <HAL_TIM_PWM_Start+0x136>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a1c      	ldr	r2, [pc, #112]	; (8005a38 <HAL_TIM_PWM_Start+0x184>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00e      	beq.n	80059ea <HAL_TIM_PWM_Start+0x136>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a16      	ldr	r2, [pc, #88]	; (8005a2c <HAL_TIM_PWM_Start+0x178>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d009      	beq.n	80059ea <HAL_TIM_PWM_Start+0x136>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a18      	ldr	r2, [pc, #96]	; (8005a3c <HAL_TIM_PWM_Start+0x188>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d004      	beq.n	80059ea <HAL_TIM_PWM_Start+0x136>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a16      	ldr	r2, [pc, #88]	; (8005a40 <HAL_TIM_PWM_Start+0x18c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d111      	bne.n	8005a0e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b06      	cmp	r3, #6
 80059fa:	d010      	beq.n	8005a1e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0201 	orr.w	r2, r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a0c:	e007      	b.n	8005a1e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f042 0201 	orr.w	r2, r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40010000 	.word	0x40010000
 8005a2c:	40010400 	.word	0x40010400
 8005a30:	40000400 	.word	0x40000400
 8005a34:	40000800 	.word	0x40000800
 8005a38:	40000c00 	.word	0x40000c00
 8005a3c:	40014000 	.word	0x40014000
 8005a40:	40001800 	.word	0x40001800

08005a44 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e041      	b.n	8005ada <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d106      	bne.n	8005a70 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7fd fea4 	bl	80037b8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3304      	adds	r3, #4
 8005a80:	4619      	mov	r1, r3
 8005a82:	4610      	mov	r0, r2
 8005a84:	f000 fe24 	bl	80066d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
	...

08005ae4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aee:	2300      	movs	r3, #0
 8005af0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d104      	bne.n	8005b02 <HAL_TIM_IC_Start_IT+0x1e>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	e013      	b.n	8005b2a <HAL_TIM_IC_Start_IT+0x46>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b04      	cmp	r3, #4
 8005b06:	d104      	bne.n	8005b12 <HAL_TIM_IC_Start_IT+0x2e>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	e00b      	b.n	8005b2a <HAL_TIM_IC_Start_IT+0x46>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d104      	bne.n	8005b22 <HAL_TIM_IC_Start_IT+0x3e>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	e003      	b.n	8005b2a <HAL_TIM_IC_Start_IT+0x46>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d104      	bne.n	8005b3c <HAL_TIM_IC_Start_IT+0x58>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	e013      	b.n	8005b64 <HAL_TIM_IC_Start_IT+0x80>
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	d104      	bne.n	8005b4c <HAL_TIM_IC_Start_IT+0x68>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	e00b      	b.n	8005b64 <HAL_TIM_IC_Start_IT+0x80>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2b08      	cmp	r3, #8
 8005b50:	d104      	bne.n	8005b5c <HAL_TIM_IC_Start_IT+0x78>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	e003      	b.n	8005b64 <HAL_TIM_IC_Start_IT+0x80>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b66:	7bbb      	ldrb	r3, [r7, #14]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d102      	bne.n	8005b72 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b6c:	7b7b      	ldrb	r3, [r7, #13]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d001      	beq.n	8005b76 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e0cc      	b.n	8005d10 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d104      	bne.n	8005b86 <HAL_TIM_IC_Start_IT+0xa2>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b84:	e013      	b.n	8005bae <HAL_TIM_IC_Start_IT+0xca>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	d104      	bne.n	8005b96 <HAL_TIM_IC_Start_IT+0xb2>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2202      	movs	r2, #2
 8005b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b94:	e00b      	b.n	8005bae <HAL_TIM_IC_Start_IT+0xca>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b08      	cmp	r3, #8
 8005b9a:	d104      	bne.n	8005ba6 <HAL_TIM_IC_Start_IT+0xc2>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ba4:	e003      	b.n	8005bae <HAL_TIM_IC_Start_IT+0xca>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2202      	movs	r2, #2
 8005baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d104      	bne.n	8005bbe <HAL_TIM_IC_Start_IT+0xda>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bbc:	e013      	b.n	8005be6 <HAL_TIM_IC_Start_IT+0x102>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d104      	bne.n	8005bce <HAL_TIM_IC_Start_IT+0xea>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bcc:	e00b      	b.n	8005be6 <HAL_TIM_IC_Start_IT+0x102>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d104      	bne.n	8005bde <HAL_TIM_IC_Start_IT+0xfa>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bdc:	e003      	b.n	8005be6 <HAL_TIM_IC_Start_IT+0x102>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2202      	movs	r2, #2
 8005be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b0c      	cmp	r3, #12
 8005bea:	d841      	bhi.n	8005c70 <HAL_TIM_IC_Start_IT+0x18c>
 8005bec:	a201      	add	r2, pc, #4	; (adr r2, 8005bf4 <HAL_TIM_IC_Start_IT+0x110>)
 8005bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf2:	bf00      	nop
 8005bf4:	08005c29 	.word	0x08005c29
 8005bf8:	08005c71 	.word	0x08005c71
 8005bfc:	08005c71 	.word	0x08005c71
 8005c00:	08005c71 	.word	0x08005c71
 8005c04:	08005c3b 	.word	0x08005c3b
 8005c08:	08005c71 	.word	0x08005c71
 8005c0c:	08005c71 	.word	0x08005c71
 8005c10:	08005c71 	.word	0x08005c71
 8005c14:	08005c4d 	.word	0x08005c4d
 8005c18:	08005c71 	.word	0x08005c71
 8005c1c:	08005c71 	.word	0x08005c71
 8005c20:	08005c71 	.word	0x08005c71
 8005c24:	08005c5f 	.word	0x08005c5f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0202 	orr.w	r2, r2, #2
 8005c36:	60da      	str	r2, [r3, #12]
      break;
 8005c38:	e01d      	b.n	8005c76 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68da      	ldr	r2, [r3, #12]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f042 0204 	orr.w	r2, r2, #4
 8005c48:	60da      	str	r2, [r3, #12]
      break;
 8005c4a:	e014      	b.n	8005c76 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0208 	orr.w	r2, r2, #8
 8005c5a:	60da      	str	r2, [r3, #12]
      break;
 8005c5c:	e00b      	b.n	8005c76 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f042 0210 	orr.w	r2, r2, #16
 8005c6c:	60da      	str	r2, [r3, #12]
      break;
 8005c6e:	e002      	b.n	8005c76 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	73fb      	strb	r3, [r7, #15]
      break;
 8005c74:	bf00      	nop
  }

  if (status == HAL_OK)
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d148      	bne.n	8005d0e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2201      	movs	r2, #1
 8005c82:	6839      	ldr	r1, [r7, #0]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f001 f937 	bl	8006ef8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a22      	ldr	r2, [pc, #136]	; (8005d18 <HAL_TIM_IC_Start_IT+0x234>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d022      	beq.n	8005cda <HAL_TIM_IC_Start_IT+0x1f6>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c9c:	d01d      	beq.n	8005cda <HAL_TIM_IC_Start_IT+0x1f6>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a1e      	ldr	r2, [pc, #120]	; (8005d1c <HAL_TIM_IC_Start_IT+0x238>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d018      	beq.n	8005cda <HAL_TIM_IC_Start_IT+0x1f6>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a1c      	ldr	r2, [pc, #112]	; (8005d20 <HAL_TIM_IC_Start_IT+0x23c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d013      	beq.n	8005cda <HAL_TIM_IC_Start_IT+0x1f6>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a1b      	ldr	r2, [pc, #108]	; (8005d24 <HAL_TIM_IC_Start_IT+0x240>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00e      	beq.n	8005cda <HAL_TIM_IC_Start_IT+0x1f6>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a19      	ldr	r2, [pc, #100]	; (8005d28 <HAL_TIM_IC_Start_IT+0x244>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d009      	beq.n	8005cda <HAL_TIM_IC_Start_IT+0x1f6>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a18      	ldr	r2, [pc, #96]	; (8005d2c <HAL_TIM_IC_Start_IT+0x248>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d004      	beq.n	8005cda <HAL_TIM_IC_Start_IT+0x1f6>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a16      	ldr	r2, [pc, #88]	; (8005d30 <HAL_TIM_IC_Start_IT+0x24c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d111      	bne.n	8005cfe <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2b06      	cmp	r3, #6
 8005cea:	d010      	beq.n	8005d0e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0201 	orr.w	r2, r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfc:	e007      	b.n	8005d0e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f042 0201 	orr.w	r2, r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40010000 	.word	0x40010000
 8005d1c:	40000400 	.word	0x40000400
 8005d20:	40000800 	.word	0x40000800
 8005d24:	40000c00 	.word	0x40000c00
 8005d28:	40010400 	.word	0x40010400
 8005d2c:	40014000 	.word	0x40014000
 8005d30:	40001800 	.word	0x40001800

08005d34 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e097      	b.n	8005e78 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d106      	bne.n	8005d62 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7fd fc91 	bl	8003684 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2202      	movs	r2, #2
 8005d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6812      	ldr	r2, [r2, #0]
 8005d74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d78:	f023 0307 	bic.w	r3, r3, #7
 8005d7c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	3304      	adds	r3, #4
 8005d86:	4619      	mov	r1, r3
 8005d88:	4610      	mov	r0, r2
 8005d8a:	f000 fca1 	bl	80066d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005db6:	f023 0303 	bic.w	r3, r3, #3
 8005dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	021b      	lsls	r3, r3, #8
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005dd4:	f023 030c 	bic.w	r3, r3, #12
 8005dd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005de0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005de4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	021b      	lsls	r3, r3, #8
 8005df0:	4313      	orrs	r3, r2
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	011a      	lsls	r2, r3, #4
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	031b      	lsls	r3, r3, #12
 8005e04:	4313      	orrs	r3, r2
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005e12:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005e1a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	4313      	orrs	r3, r2
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e90:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e98:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ea0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ea8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d110      	bne.n	8005ed2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005eb0:	7bfb      	ldrb	r3, [r7, #15]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d102      	bne.n	8005ebc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005eb6:	7b7b      	ldrb	r3, [r7, #13]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d001      	beq.n	8005ec0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e069      	b.n	8005f94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ed0:	e031      	b.n	8005f36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b04      	cmp	r3, #4
 8005ed6:	d110      	bne.n	8005efa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ed8:	7bbb      	ldrb	r3, [r7, #14]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d102      	bne.n	8005ee4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ede:	7b3b      	ldrb	r3, [r7, #12]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d001      	beq.n	8005ee8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e055      	b.n	8005f94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ef8:	e01d      	b.n	8005f36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005efa:	7bfb      	ldrb	r3, [r7, #15]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d108      	bne.n	8005f12 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f00:	7bbb      	ldrb	r3, [r7, #14]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d105      	bne.n	8005f12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f06:	7b7b      	ldrb	r3, [r7, #13]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d102      	bne.n	8005f12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f0c:	7b3b      	ldrb	r3, [r7, #12]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d001      	beq.n	8005f16 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e03e      	b.n	8005f94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2202      	movs	r2, #2
 8005f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2202      	movs	r2, #2
 8005f22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2202      	movs	r2, #2
 8005f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2202      	movs	r2, #2
 8005f32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <HAL_TIM_Encoder_Start+0xc4>
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d008      	beq.n	8005f54 <HAL_TIM_Encoder_Start+0xd4>
 8005f42:	e00f      	b.n	8005f64 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f000 ffd3 	bl	8006ef8 <TIM_CCxChannelCmd>
      break;
 8005f52:	e016      	b.n	8005f82 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	2104      	movs	r1, #4
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 ffcb 	bl	8006ef8 <TIM_CCxChannelCmd>
      break;
 8005f62:	e00e      	b.n	8005f82 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 ffc3 	bl	8006ef8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2201      	movs	r2, #1
 8005f78:	2104      	movs	r1, #4
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 ffbc 	bl	8006ef8 <TIM_CCxChannelCmd>
      break;
 8005f80:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f042 0201 	orr.w	r2, r2, #1
 8005f90:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d122      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d11b      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f06f 0202 	mvn.w	r2, #2
 8005fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7fb f81e 	bl	8001020 <HAL_TIM_IC_CaptureCallback>
 8005fe4:	e005      	b.n	8005ff2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fb54 	bl	8006694 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 fb5b 	bl	80066a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f003 0304 	and.w	r3, r3, #4
 8006002:	2b04      	cmp	r3, #4
 8006004:	d122      	bne.n	800604c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f003 0304 	and.w	r3, r3, #4
 8006010:	2b04      	cmp	r3, #4
 8006012:	d11b      	bne.n	800604c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f06f 0204 	mvn.w	r2, #4
 800601c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2202      	movs	r2, #2
 8006022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7fa fff4 	bl	8001020 <HAL_TIM_IC_CaptureCallback>
 8006038:	e005      	b.n	8006046 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fb2a 	bl	8006694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 fb31 	bl	80066a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	f003 0308 	and.w	r3, r3, #8
 8006056:	2b08      	cmp	r3, #8
 8006058:	d122      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f003 0308 	and.w	r3, r3, #8
 8006064:	2b08      	cmp	r3, #8
 8006066:	d11b      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f06f 0208 	mvn.w	r2, #8
 8006070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2204      	movs	r2, #4
 8006076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7fa ffca 	bl	8001020 <HAL_TIM_IC_CaptureCallback>
 800608c:	e005      	b.n	800609a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fb00 	bl	8006694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fb07 	bl	80066a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	f003 0310 	and.w	r3, r3, #16
 80060aa:	2b10      	cmp	r3, #16
 80060ac:	d122      	bne.n	80060f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f003 0310 	and.w	r3, r3, #16
 80060b8:	2b10      	cmp	r3, #16
 80060ba:	d11b      	bne.n	80060f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f06f 0210 	mvn.w	r2, #16
 80060c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2208      	movs	r2, #8
 80060ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7fa ffa0 	bl	8001020 <HAL_TIM_IC_CaptureCallback>
 80060e0:	e005      	b.n	80060ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fad6 	bl	8006694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fadd 	bl	80066a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d10e      	bne.n	8006120 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b01      	cmp	r3, #1
 800610e:	d107      	bne.n	8006120 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f06f 0201 	mvn.w	r2, #1
 8006118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fab0 	bl	8006680 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612a:	2b80      	cmp	r3, #128	; 0x80
 800612c:	d10e      	bne.n	800614c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006138:	2b80      	cmp	r3, #128	; 0x80
 800613a:	d107      	bne.n	800614c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 ffd4 	bl	80070f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006156:	2b40      	cmp	r3, #64	; 0x40
 8006158:	d10e      	bne.n	8006178 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006164:	2b40      	cmp	r3, #64	; 0x40
 8006166:	d107      	bne.n	8006178 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 faa2 	bl	80066bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	f003 0320 	and.w	r3, r3, #32
 8006182:	2b20      	cmp	r3, #32
 8006184:	d10e      	bne.n	80061a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f003 0320 	and.w	r3, r3, #32
 8006190:	2b20      	cmp	r3, #32
 8006192:	d107      	bne.n	80061a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f06f 0220 	mvn.w	r2, #32
 800619c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 ff9e 	bl	80070e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061a4:	bf00      	nop
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d101      	bne.n	80061ca <HAL_TIM_IC_ConfigChannel+0x1e>
 80061c6:	2302      	movs	r3, #2
 80061c8:	e088      	b.n	80062dc <HAL_TIM_IC_ConfigChannel+0x130>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d11b      	bne.n	8006210 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6818      	ldr	r0, [r3, #0]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	6819      	ldr	r1, [r3, #0]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f000 fcc2 	bl	8006b70 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	699a      	ldr	r2, [r3, #24]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 020c 	bic.w	r2, r2, #12
 80061fa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6999      	ldr	r1, [r3, #24]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	619a      	str	r2, [r3, #24]
 800620e:	e060      	b.n	80062d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b04      	cmp	r3, #4
 8006214:	d11c      	bne.n	8006250 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	6819      	ldr	r1, [r3, #0]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	f000 fd46 	bl	8006cb6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	699a      	ldr	r2, [r3, #24]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006238:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6999      	ldr	r1, [r3, #24]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	021a      	lsls	r2, r3, #8
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	619a      	str	r2, [r3, #24]
 800624e:	e040      	b.n	80062d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b08      	cmp	r3, #8
 8006254:	d11b      	bne.n	800628e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6818      	ldr	r0, [r3, #0]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	6819      	ldr	r1, [r3, #0]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f000 fd93 	bl	8006d90 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69da      	ldr	r2, [r3, #28]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 020c 	bic.w	r2, r2, #12
 8006278:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69d9      	ldr	r1, [r3, #28]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	430a      	orrs	r2, r1
 800628a:	61da      	str	r2, [r3, #28]
 800628c:	e021      	b.n	80062d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b0c      	cmp	r3, #12
 8006292:	d11c      	bne.n	80062ce <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6818      	ldr	r0, [r3, #0]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	6819      	ldr	r1, [r3, #0]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f000 fdb0 	bl	8006e08 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	69da      	ldr	r2, [r3, #28]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80062b6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	69d9      	ldr	r1, [r3, #28]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	021a      	lsls	r2, r3, #8
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	61da      	str	r2, [r3, #28]
 80062cc:	e001      	b.n	80062d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062da:	7dfb      	ldrb	r3, [r7, #23]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3718      	adds	r7, #24
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d101      	bne.n	8006302 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062fe:	2302      	movs	r3, #2
 8006300:	e0ae      	b.n	8006460 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b0c      	cmp	r3, #12
 800630e:	f200 809f 	bhi.w	8006450 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006312:	a201      	add	r2, pc, #4	; (adr r2, 8006318 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006318:	0800634d 	.word	0x0800634d
 800631c:	08006451 	.word	0x08006451
 8006320:	08006451 	.word	0x08006451
 8006324:	08006451 	.word	0x08006451
 8006328:	0800638d 	.word	0x0800638d
 800632c:	08006451 	.word	0x08006451
 8006330:	08006451 	.word	0x08006451
 8006334:	08006451 	.word	0x08006451
 8006338:	080063cf 	.word	0x080063cf
 800633c:	08006451 	.word	0x08006451
 8006340:	08006451 	.word	0x08006451
 8006344:	08006451 	.word	0x08006451
 8006348:	0800640f 	.word	0x0800640f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68b9      	ldr	r1, [r7, #8]
 8006352:	4618      	mov	r0, r3
 8006354:	f000 fa5c 	bl	8006810 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699a      	ldr	r2, [r3, #24]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0208 	orr.w	r2, r2, #8
 8006366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	699a      	ldr	r2, [r3, #24]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0204 	bic.w	r2, r2, #4
 8006376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6999      	ldr	r1, [r3, #24]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	691a      	ldr	r2, [r3, #16]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	619a      	str	r2, [r3, #24]
      break;
 800638a:	e064      	b.n	8006456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68b9      	ldr	r1, [r7, #8]
 8006392:	4618      	mov	r0, r3
 8006394:	f000 faac 	bl	80068f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699a      	ldr	r2, [r3, #24]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699a      	ldr	r2, [r3, #24]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6999      	ldr	r1, [r3, #24]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	021a      	lsls	r2, r3, #8
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	619a      	str	r2, [r3, #24]
      break;
 80063cc:	e043      	b.n	8006456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68b9      	ldr	r1, [r7, #8]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f000 fb01 	bl	80069dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69da      	ldr	r2, [r3, #28]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f042 0208 	orr.w	r2, r2, #8
 80063e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	69da      	ldr	r2, [r3, #28]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 0204 	bic.w	r2, r2, #4
 80063f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69d9      	ldr	r1, [r3, #28]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	691a      	ldr	r2, [r3, #16]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	61da      	str	r2, [r3, #28]
      break;
 800640c:	e023      	b.n	8006456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68b9      	ldr	r1, [r7, #8]
 8006414:	4618      	mov	r0, r3
 8006416:	f000 fb55 	bl	8006ac4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69da      	ldr	r2, [r3, #28]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69da      	ldr	r2, [r3, #28]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69d9      	ldr	r1, [r3, #28]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	021a      	lsls	r2, r3, #8
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	61da      	str	r2, [r3, #28]
      break;
 800644e:	e002      	b.n	8006456 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	75fb      	strb	r3, [r7, #23]
      break;
 8006454:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800645e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800647c:	2b01      	cmp	r3, #1
 800647e:	d101      	bne.n	8006484 <HAL_TIM_ConfigClockSource+0x1c>
 8006480:	2302      	movs	r3, #2
 8006482:	e0b4      	b.n	80065ee <HAL_TIM_ConfigClockSource+0x186>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064bc:	d03e      	beq.n	800653c <HAL_TIM_ConfigClockSource+0xd4>
 80064be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064c2:	f200 8087 	bhi.w	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ca:	f000 8086 	beq.w	80065da <HAL_TIM_ConfigClockSource+0x172>
 80064ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d2:	d87f      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064d4:	2b70      	cmp	r3, #112	; 0x70
 80064d6:	d01a      	beq.n	800650e <HAL_TIM_ConfigClockSource+0xa6>
 80064d8:	2b70      	cmp	r3, #112	; 0x70
 80064da:	d87b      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064dc:	2b60      	cmp	r3, #96	; 0x60
 80064de:	d050      	beq.n	8006582 <HAL_TIM_ConfigClockSource+0x11a>
 80064e0:	2b60      	cmp	r3, #96	; 0x60
 80064e2:	d877      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064e4:	2b50      	cmp	r3, #80	; 0x50
 80064e6:	d03c      	beq.n	8006562 <HAL_TIM_ConfigClockSource+0xfa>
 80064e8:	2b50      	cmp	r3, #80	; 0x50
 80064ea:	d873      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064ec:	2b40      	cmp	r3, #64	; 0x40
 80064ee:	d058      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x13a>
 80064f0:	2b40      	cmp	r3, #64	; 0x40
 80064f2:	d86f      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064f4:	2b30      	cmp	r3, #48	; 0x30
 80064f6:	d064      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x15a>
 80064f8:	2b30      	cmp	r3, #48	; 0x30
 80064fa:	d86b      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064fc:	2b20      	cmp	r3, #32
 80064fe:	d060      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006500:	2b20      	cmp	r3, #32
 8006502:	d867      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 8006504:	2b00      	cmp	r3, #0
 8006506:	d05c      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006508:	2b10      	cmp	r3, #16
 800650a:	d05a      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x15a>
 800650c:	e062      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6818      	ldr	r0, [r3, #0]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	6899      	ldr	r1, [r3, #8]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	f000 fccb 	bl	8006eb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006530:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	609a      	str	r2, [r3, #8]
      break;
 800653a:	e04f      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6818      	ldr	r0, [r3, #0]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	6899      	ldr	r1, [r3, #8]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f000 fcb4 	bl	8006eb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800655e:	609a      	str	r2, [r3, #8]
      break;
 8006560:	e03c      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6818      	ldr	r0, [r3, #0]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	6859      	ldr	r1, [r3, #4]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	461a      	mov	r2, r3
 8006570:	f000 fb72 	bl	8006c58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2150      	movs	r1, #80	; 0x50
 800657a:	4618      	mov	r0, r3
 800657c:	f000 fc81 	bl	8006e82 <TIM_ITRx_SetConfig>
      break;
 8006580:	e02c      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6818      	ldr	r0, [r3, #0]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	6859      	ldr	r1, [r3, #4]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	461a      	mov	r2, r3
 8006590:	f000 fbce 	bl	8006d30 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2160      	movs	r1, #96	; 0x60
 800659a:	4618      	mov	r0, r3
 800659c:	f000 fc71 	bl	8006e82 <TIM_ITRx_SetConfig>
      break;
 80065a0:	e01c      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6818      	ldr	r0, [r3, #0]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	6859      	ldr	r1, [r3, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	461a      	mov	r2, r3
 80065b0:	f000 fb52 	bl	8006c58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2140      	movs	r1, #64	; 0x40
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 fc61 	bl	8006e82 <TIM_ITRx_SetConfig>
      break;
 80065c0:	e00c      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4619      	mov	r1, r3
 80065cc:	4610      	mov	r0, r2
 80065ce:	f000 fc58 	bl	8006e82 <TIM_ITRx_SetConfig>
      break;
 80065d2:	e003      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	73fb      	strb	r3, [r7, #15]
      break;
 80065d8:	e000      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80065da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006602:	2300      	movs	r3, #0
 8006604:	60fb      	str	r3, [r7, #12]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2b0c      	cmp	r3, #12
 800660a:	d831      	bhi.n	8006670 <HAL_TIM_ReadCapturedValue+0x78>
 800660c:	a201      	add	r2, pc, #4	; (adr r2, 8006614 <HAL_TIM_ReadCapturedValue+0x1c>)
 800660e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006612:	bf00      	nop
 8006614:	08006649 	.word	0x08006649
 8006618:	08006671 	.word	0x08006671
 800661c:	08006671 	.word	0x08006671
 8006620:	08006671 	.word	0x08006671
 8006624:	08006653 	.word	0x08006653
 8006628:	08006671 	.word	0x08006671
 800662c:	08006671 	.word	0x08006671
 8006630:	08006671 	.word	0x08006671
 8006634:	0800665d 	.word	0x0800665d
 8006638:	08006671 	.word	0x08006671
 800663c:	08006671 	.word	0x08006671
 8006640:	08006671 	.word	0x08006671
 8006644:	08006667 	.word	0x08006667
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664e:	60fb      	str	r3, [r7, #12]

      break;
 8006650:	e00f      	b.n	8006672 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006658:	60fb      	str	r3, [r7, #12]

      break;
 800665a:	e00a      	b.n	8006672 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006662:	60fb      	str	r3, [r7, #12]

      break;
 8006664:	e005      	b.n	8006672 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666c:	60fb      	str	r3, [r7, #12]

      break;
 800666e:	e000      	b.n	8006672 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006670:	bf00      	nop
  }

  return tmpreg;
 8006672:	68fb      	ldr	r3, [r7, #12]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a40      	ldr	r2, [pc, #256]	; (80067e4 <TIM_Base_SetConfig+0x114>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d013      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ee:	d00f      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a3d      	ldr	r2, [pc, #244]	; (80067e8 <TIM_Base_SetConfig+0x118>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d00b      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a3c      	ldr	r2, [pc, #240]	; (80067ec <TIM_Base_SetConfig+0x11c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d007      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a3b      	ldr	r2, [pc, #236]	; (80067f0 <TIM_Base_SetConfig+0x120>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d003      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a3a      	ldr	r2, [pc, #232]	; (80067f4 <TIM_Base_SetConfig+0x124>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d108      	bne.n	8006722 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	4313      	orrs	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a2f      	ldr	r2, [pc, #188]	; (80067e4 <TIM_Base_SetConfig+0x114>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d02b      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006730:	d027      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a2c      	ldr	r2, [pc, #176]	; (80067e8 <TIM_Base_SetConfig+0x118>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d023      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a2b      	ldr	r2, [pc, #172]	; (80067ec <TIM_Base_SetConfig+0x11c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d01f      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a2a      	ldr	r2, [pc, #168]	; (80067f0 <TIM_Base_SetConfig+0x120>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d01b      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a29      	ldr	r2, [pc, #164]	; (80067f4 <TIM_Base_SetConfig+0x124>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d017      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a28      	ldr	r2, [pc, #160]	; (80067f8 <TIM_Base_SetConfig+0x128>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d013      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a27      	ldr	r2, [pc, #156]	; (80067fc <TIM_Base_SetConfig+0x12c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00f      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a26      	ldr	r2, [pc, #152]	; (8006800 <TIM_Base_SetConfig+0x130>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d00b      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a25      	ldr	r2, [pc, #148]	; (8006804 <TIM_Base_SetConfig+0x134>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d007      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a24      	ldr	r2, [pc, #144]	; (8006808 <TIM_Base_SetConfig+0x138>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d003      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a23      	ldr	r2, [pc, #140]	; (800680c <TIM_Base_SetConfig+0x13c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d108      	bne.n	8006794 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	4313      	orrs	r3, r2
 8006792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a0a      	ldr	r2, [pc, #40]	; (80067e4 <TIM_Base_SetConfig+0x114>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d003      	beq.n	80067c8 <TIM_Base_SetConfig+0xf8>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a0c      	ldr	r2, [pc, #48]	; (80067f4 <TIM_Base_SetConfig+0x124>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d103      	bne.n	80067d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	691a      	ldr	r2, [r3, #16]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	615a      	str	r2, [r3, #20]
}
 80067d6:	bf00      	nop
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	40010000 	.word	0x40010000
 80067e8:	40000400 	.word	0x40000400
 80067ec:	40000800 	.word	0x40000800
 80067f0:	40000c00 	.word	0x40000c00
 80067f4:	40010400 	.word	0x40010400
 80067f8:	40014000 	.word	0x40014000
 80067fc:	40014400 	.word	0x40014400
 8006800:	40014800 	.word	0x40014800
 8006804:	40001800 	.word	0x40001800
 8006808:	40001c00 	.word	0x40001c00
 800680c:	40002000 	.word	0x40002000

08006810 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	f023 0201 	bic.w	r2, r3, #1
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 0303 	bic.w	r3, r3, #3
 8006846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	4313      	orrs	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f023 0302 	bic.w	r3, r3, #2
 8006858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a20      	ldr	r2, [pc, #128]	; (80068e8 <TIM_OC1_SetConfig+0xd8>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d003      	beq.n	8006874 <TIM_OC1_SetConfig+0x64>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a1f      	ldr	r2, [pc, #124]	; (80068ec <TIM_OC1_SetConfig+0xdc>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d10c      	bne.n	800688e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f023 0308 	bic.w	r3, r3, #8
 800687a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	4313      	orrs	r3, r2
 8006884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f023 0304 	bic.w	r3, r3, #4
 800688c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a15      	ldr	r2, [pc, #84]	; (80068e8 <TIM_OC1_SetConfig+0xd8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d003      	beq.n	800689e <TIM_OC1_SetConfig+0x8e>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a14      	ldr	r2, [pc, #80]	; (80068ec <TIM_OC1_SetConfig+0xdc>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d111      	bne.n	80068c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4313      	orrs	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	621a      	str	r2, [r3, #32]
}
 80068dc:	bf00      	nop
 80068de:	371c      	adds	r7, #28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	40010000 	.word	0x40010000
 80068ec:	40010400 	.word	0x40010400

080068f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b087      	sub	sp, #28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	f023 0210 	bic.w	r2, r3, #16
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800691e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	021b      	lsls	r3, r3, #8
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	4313      	orrs	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f023 0320 	bic.w	r3, r3, #32
 800693a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	011b      	lsls	r3, r3, #4
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	4313      	orrs	r3, r2
 8006946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a22      	ldr	r2, [pc, #136]	; (80069d4 <TIM_OC2_SetConfig+0xe4>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d003      	beq.n	8006958 <TIM_OC2_SetConfig+0x68>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a21      	ldr	r2, [pc, #132]	; (80069d8 <TIM_OC2_SetConfig+0xe8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d10d      	bne.n	8006974 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800695e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	011b      	lsls	r3, r3, #4
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	4313      	orrs	r3, r2
 800696a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006972:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a17      	ldr	r2, [pc, #92]	; (80069d4 <TIM_OC2_SetConfig+0xe4>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d003      	beq.n	8006984 <TIM_OC2_SetConfig+0x94>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a16      	ldr	r2, [pc, #88]	; (80069d8 <TIM_OC2_SetConfig+0xe8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d113      	bne.n	80069ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800698a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006992:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	693a      	ldr	r2, [r7, #16]
 800699c:	4313      	orrs	r3, r2
 800699e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	621a      	str	r2, [r3, #32]
}
 80069c6:	bf00      	nop
 80069c8:	371c      	adds	r7, #28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	40010000 	.word	0x40010000
 80069d8:	40010400 	.word	0x40010400

080069dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f023 0303 	bic.w	r3, r3, #3
 8006a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	021b      	lsls	r3, r3, #8
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a21      	ldr	r2, [pc, #132]	; (8006abc <TIM_OC3_SetConfig+0xe0>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d003      	beq.n	8006a42 <TIM_OC3_SetConfig+0x66>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a20      	ldr	r2, [pc, #128]	; (8006ac0 <TIM_OC3_SetConfig+0xe4>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d10d      	bne.n	8006a5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	021b      	lsls	r3, r3, #8
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a16      	ldr	r2, [pc, #88]	; (8006abc <TIM_OC3_SetConfig+0xe0>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d003      	beq.n	8006a6e <TIM_OC3_SetConfig+0x92>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a15      	ldr	r2, [pc, #84]	; (8006ac0 <TIM_OC3_SetConfig+0xe4>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d113      	bne.n	8006a96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	011b      	lsls	r3, r3, #4
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	011b      	lsls	r3, r3, #4
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	621a      	str	r2, [r3, #32]
}
 8006ab0:	bf00      	nop
 8006ab2:	371c      	adds	r7, #28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	40010000 	.word	0x40010000
 8006ac0:	40010400 	.word	0x40010400

08006ac4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	021b      	lsls	r3, r3, #8
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	031b      	lsls	r3, r3, #12
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a12      	ldr	r2, [pc, #72]	; (8006b68 <TIM_OC4_SetConfig+0xa4>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d003      	beq.n	8006b2c <TIM_OC4_SetConfig+0x68>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a11      	ldr	r2, [pc, #68]	; (8006b6c <TIM_OC4_SetConfig+0xa8>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d109      	bne.n	8006b40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	019b      	lsls	r3, r3, #6
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	621a      	str	r2, [r3, #32]
}
 8006b5a:	bf00      	nop
 8006b5c:	371c      	adds	r7, #28
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	40010000 	.word	0x40010000
 8006b6c:	40010400 	.word	0x40010400

08006b70 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
 8006b7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	f023 0201 	bic.w	r2, r3, #1
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	4a28      	ldr	r2, [pc, #160]	; (8006c3c <TIM_TI1_SetConfig+0xcc>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d01b      	beq.n	8006bd6 <TIM_TI1_SetConfig+0x66>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba4:	d017      	beq.n	8006bd6 <TIM_TI1_SetConfig+0x66>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	4a25      	ldr	r2, [pc, #148]	; (8006c40 <TIM_TI1_SetConfig+0xd0>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d013      	beq.n	8006bd6 <TIM_TI1_SetConfig+0x66>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	4a24      	ldr	r2, [pc, #144]	; (8006c44 <TIM_TI1_SetConfig+0xd4>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d00f      	beq.n	8006bd6 <TIM_TI1_SetConfig+0x66>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	4a23      	ldr	r2, [pc, #140]	; (8006c48 <TIM_TI1_SetConfig+0xd8>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d00b      	beq.n	8006bd6 <TIM_TI1_SetConfig+0x66>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	4a22      	ldr	r2, [pc, #136]	; (8006c4c <TIM_TI1_SetConfig+0xdc>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d007      	beq.n	8006bd6 <TIM_TI1_SetConfig+0x66>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	4a21      	ldr	r2, [pc, #132]	; (8006c50 <TIM_TI1_SetConfig+0xe0>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d003      	beq.n	8006bd6 <TIM_TI1_SetConfig+0x66>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	4a20      	ldr	r2, [pc, #128]	; (8006c54 <TIM_TI1_SetConfig+0xe4>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d101      	bne.n	8006bda <TIM_TI1_SetConfig+0x6a>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e000      	b.n	8006bdc <TIM_TI1_SetConfig+0x6c>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d008      	beq.n	8006bf2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	f023 0303 	bic.w	r3, r3, #3
 8006be6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	e003      	b.n	8006bfa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f043 0301 	orr.w	r3, r3, #1
 8006bf8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	011b      	lsls	r3, r3, #4
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	f023 030a 	bic.w	r3, r3, #10
 8006c14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	f003 030a 	and.w	r3, r3, #10
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	621a      	str	r2, [r3, #32]
}
 8006c2e:	bf00      	nop
 8006c30:	371c      	adds	r7, #28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	40010000 	.word	0x40010000
 8006c40:	40000400 	.word	0x40000400
 8006c44:	40000800 	.word	0x40000800
 8006c48:	40000c00 	.word	0x40000c00
 8006c4c:	40010400 	.word	0x40010400
 8006c50:	40014000 	.word	0x40014000
 8006c54:	40001800 	.word	0x40001800

08006c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b087      	sub	sp, #28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	f023 0201 	bic.w	r2, r3, #1
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	011b      	lsls	r3, r3, #4
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f023 030a 	bic.w	r3, r3, #10
 8006c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	621a      	str	r2, [r3, #32]
}
 8006caa:	bf00      	nop
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b087      	sub	sp, #28
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	60f8      	str	r0, [r7, #12]
 8006cbe:	60b9      	str	r1, [r7, #8]
 8006cc0:	607a      	str	r2, [r7, #4]
 8006cc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	f023 0210 	bic.w	r2, r3, #16
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ce2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	021b      	lsls	r3, r3, #8
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	031b      	lsls	r3, r3, #12
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d08:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	011b      	lsls	r3, r3, #4
 8006d0e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	621a      	str	r2, [r3, #32]
}
 8006d24:	bf00      	nop
 8006d26:	371c      	adds	r7, #28
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6a1b      	ldr	r3, [r3, #32]
 8006d40:	f023 0210 	bic.w	r2, r3, #16
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	031b      	lsls	r3, r3, #12
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	011b      	lsls	r3, r3, #4
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	621a      	str	r2, [r3, #32]
}
 8006d84:	bf00      	nop
 8006d86:	371c      	adds	r7, #28
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b087      	sub	sp, #28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
 8006d9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f023 0303 	bic.w	r3, r3, #3
 8006dbc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dcc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	011b      	lsls	r3, r3, #4
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006de0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	021b      	lsls	r3, r3, #8
 8006de6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	621a      	str	r2, [r3, #32]
}
 8006dfc:	bf00      	nop
 8006dfe:	371c      	adds	r7, #28
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
 8006e14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	021b      	lsls	r3, r3, #8
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e46:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	031b      	lsls	r3, r3, #12
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006e5a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	031b      	lsls	r3, r3, #12
 8006e60:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	621a      	str	r2, [r3, #32]
}
 8006e76:	bf00      	nop
 8006e78:	371c      	adds	r7, #28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b085      	sub	sp, #20
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	f043 0307 	orr.w	r3, r3, #7
 8006ea4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	609a      	str	r2, [r3, #8]
}
 8006eac:	bf00      	nop
 8006eae:	3714      	adds	r7, #20
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b087      	sub	sp, #28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
 8006ec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ed2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	021a      	lsls	r2, r3, #8
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	431a      	orrs	r2, r3
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	609a      	str	r2, [r3, #8]
}
 8006eec:	bf00      	nop
 8006eee:	371c      	adds	r7, #28
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f003 031f 	and.w	r3, r3, #31
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a1a      	ldr	r2, [r3, #32]
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	43db      	mvns	r3, r3
 8006f1a:	401a      	ands	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6a1a      	ldr	r2, [r3, #32]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	f003 031f 	and.w	r3, r3, #31
 8006f2a:	6879      	ldr	r1, [r7, #4]
 8006f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f30:	431a      	orrs	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	621a      	str	r2, [r3, #32]
}
 8006f36:	bf00      	nop
 8006f38:	371c      	adds	r7, #28
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
	...

08006f44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d101      	bne.n	8006f5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	e05a      	b.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2202      	movs	r2, #2
 8006f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a21      	ldr	r2, [pc, #132]	; (8007020 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d022      	beq.n	8006fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa8:	d01d      	beq.n	8006fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a1d      	ldr	r2, [pc, #116]	; (8007024 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d018      	beq.n	8006fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a1b      	ldr	r2, [pc, #108]	; (8007028 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d013      	beq.n	8006fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a1a      	ldr	r2, [pc, #104]	; (800702c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d00e      	beq.n	8006fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a18      	ldr	r2, [pc, #96]	; (8007030 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d009      	beq.n	8006fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a17      	ldr	r2, [pc, #92]	; (8007034 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d004      	beq.n	8006fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a15      	ldr	r2, [pc, #84]	; (8007038 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d10c      	bne.n	8007000 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	40010000 	.word	0x40010000
 8007024:	40000400 	.word	0x40000400
 8007028:	40000800 	.word	0x40000800
 800702c:	40000c00 	.word	0x40000c00
 8007030:	40010400 	.word	0x40010400
 8007034:	40014000 	.word	0x40014000
 8007038:	40001800 	.word	0x40001800

0800703c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007050:	2b01      	cmp	r3, #1
 8007052:	d101      	bne.n	8007058 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007054:	2302      	movs	r3, #2
 8007056:	e03d      	b.n	80070d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	4313      	orrs	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	4313      	orrs	r3, r2
 800707a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	4313      	orrs	r3, r2
 8007088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4313      	orrs	r3, r2
 8007096:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	69db      	ldr	r3, [r3, #28]
 80070be:	4313      	orrs	r3, r2
 80070c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e03f      	b.n	800719a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d106      	bne.n	8007134 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7fc fc14 	bl	800395c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2224      	movs	r2, #36	; 0x24
 8007138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68da      	ldr	r2, [r3, #12]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800714a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fe1f 	bl	8007d90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	691a      	ldr	r2, [r3, #16]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007160:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	695a      	ldr	r2, [r3, #20]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007170:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007180:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2220      	movs	r2, #32
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2220      	movs	r2, #32
 8007194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b08a      	sub	sp, #40	; 0x28
 80071a6:	af02      	add	r7, sp, #8
 80071a8:	60f8      	str	r0, [r7, #12]
 80071aa:	60b9      	str	r1, [r7, #8]
 80071ac:	603b      	str	r3, [r7, #0]
 80071ae:	4613      	mov	r3, r2
 80071b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b20      	cmp	r3, #32
 80071c0:	d17c      	bne.n	80072bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d002      	beq.n	80071ce <HAL_UART_Transmit+0x2c>
 80071c8:	88fb      	ldrh	r3, [r7, #6]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e075      	b.n	80072be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d101      	bne.n	80071e0 <HAL_UART_Transmit+0x3e>
 80071dc:	2302      	movs	r3, #2
 80071de:	e06e      	b.n	80072be <HAL_UART_Transmit+0x11c>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2221      	movs	r2, #33	; 0x21
 80071f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071f6:	f7fc fd11 	bl	8003c1c <HAL_GetTick>
 80071fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	88fa      	ldrh	r2, [r7, #6]
 8007200:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	88fa      	ldrh	r2, [r7, #6]
 8007206:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007210:	d108      	bne.n	8007224 <HAL_UART_Transmit+0x82>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d104      	bne.n	8007224 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800721a:	2300      	movs	r3, #0
 800721c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	61bb      	str	r3, [r7, #24]
 8007222:	e003      	b.n	800722c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007228:	2300      	movs	r3, #0
 800722a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007234:	e02a      	b.n	800728c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	2200      	movs	r2, #0
 800723e:	2180      	movs	r1, #128	; 0x80
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 fb63 	bl	800790c <UART_WaitOnFlagUntilTimeout>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e036      	b.n	80072be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10b      	bne.n	800726e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	881b      	ldrh	r3, [r3, #0]
 800725a:	461a      	mov	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007264:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	3302      	adds	r3, #2
 800726a:	61bb      	str	r3, [r7, #24]
 800726c:	e007      	b.n	800727e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	781a      	ldrb	r2, [r3, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	3301      	adds	r3, #1
 800727c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007282:	b29b      	uxth	r3, r3
 8007284:	3b01      	subs	r3, #1
 8007286:	b29a      	uxth	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007290:	b29b      	uxth	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1cf      	bne.n	8007236 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2200      	movs	r2, #0
 800729e:	2140      	movs	r1, #64	; 0x40
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 fb33 	bl	800790c <UART_WaitOnFlagUntilTimeout>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e006      	b.n	80072be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2220      	movs	r2, #32
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	e000      	b.n	80072be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80072bc:	2302      	movs	r3, #2
  }
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3720      	adds	r7, #32
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b085      	sub	sp, #20
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	60f8      	str	r0, [r7, #12]
 80072ce:	60b9      	str	r1, [r7, #8]
 80072d0:	4613      	mov	r3, r2
 80072d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b20      	cmp	r3, #32
 80072de:	d130      	bne.n	8007342 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d002      	beq.n	80072ec <HAL_UART_Transmit_IT+0x26>
 80072e6:	88fb      	ldrh	r3, [r7, #6]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d101      	bne.n	80072f0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e029      	b.n	8007344 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d101      	bne.n	80072fe <HAL_UART_Transmit_IT+0x38>
 80072fa:	2302      	movs	r3, #2
 80072fc:	e022      	b.n	8007344 <HAL_UART_Transmit_IT+0x7e>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	88fa      	ldrh	r2, [r7, #6]
 8007310:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	88fa      	ldrh	r2, [r7, #6]
 8007316:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2221      	movs	r2, #33	; 0x21
 8007322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68da      	ldr	r2, [r3, #12]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800733c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	e000      	b.n	8007344 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007342:	2302      	movs	r3, #2
  }
}
 8007344:	4618      	mov	r0, r3
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <HAL_UART_Receive_IT>:
  *               the configuration information for the specified UART module.
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size){
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	4613      	mov	r3, r2
 800735c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b20      	cmp	r3, #32
 8007368:	d11d      	bne.n	80073a6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d002      	beq.n	8007376 <HAL_UART_Receive_IT+0x26>
 8007370:	88fb      	ldrh	r3, [r7, #6]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e016      	b.n	80073a8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007380:	2b01      	cmp	r3, #1
 8007382:	d101      	bne.n	8007388 <HAL_UART_Receive_IT+0x38>
 8007384:	2302      	movs	r3, #2
 8007386:	e00f      	b.n	80073a8 <HAL_UART_Receive_IT+0x58>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007396:	88fb      	ldrh	r3, [r7, #6]
 8007398:	461a      	mov	r2, r3
 800739a:	68b9      	ldr	r1, [r7, #8]
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 fb23 	bl	80079e8 <UART_Start_Receive_IT>
 80073a2:	4603      	mov	r3, r0
 80073a4:	e000      	b.n	80073a8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80073a6:	2302      	movs	r3, #2
  }
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b0ba      	sub	sp, #232	; 0xe8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80073d6:	2300      	movs	r3, #0
 80073d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80073dc:	2300      	movs	r3, #0
 80073de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80073e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e6:	f003 030f 	and.w	r3, r3, #15
 80073ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80073ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10f      	bne.n	8007416 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073fa:	f003 0320 	and.w	r3, r3, #32
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d009      	beq.n	8007416 <HAL_UART_IRQHandler+0x66>
 8007402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007406:	f003 0320 	and.w	r3, r3, #32
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fc03 	bl	8007c1a <UART_Receive_IT>
      return;
 8007414:	e256      	b.n	80078c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007416:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 80de 	beq.w	80075dc <HAL_UART_IRQHandler+0x22c>
 8007420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b00      	cmp	r3, #0
 800742a:	d106      	bne.n	800743a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800742c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007430:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 80d1 	beq.w	80075dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800743a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800743e:	f003 0301 	and.w	r3, r3, #1
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00b      	beq.n	800745e <HAL_UART_IRQHandler+0xae>
 8007446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800744a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800744e:	2b00      	cmp	r3, #0
 8007450:	d005      	beq.n	800745e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	f043 0201 	orr.w	r2, r3, #1
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800745e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007462:	f003 0304 	and.w	r3, r3, #4
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00b      	beq.n	8007482 <HAL_UART_IRQHandler+0xd2>
 800746a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	2b00      	cmp	r3, #0
 8007474:	d005      	beq.n	8007482 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747a:	f043 0202 	orr.w	r2, r3, #2
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00b      	beq.n	80074a6 <HAL_UART_IRQHandler+0xf6>
 800748e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	d005      	beq.n	80074a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749e:	f043 0204 	orr.w	r2, r3, #4
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80074a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074aa:	f003 0308 	and.w	r3, r3, #8
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d011      	beq.n	80074d6 <HAL_UART_IRQHandler+0x126>
 80074b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074b6:	f003 0320 	and.w	r3, r3, #32
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d105      	bne.n	80074ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80074be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d005      	beq.n	80074d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	f043 0208 	orr.w	r2, r3, #8
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 81ed 	beq.w	80078ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074e4:	f003 0320 	and.w	r3, r3, #32
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d008      	beq.n	80074fe <HAL_UART_IRQHandler+0x14e>
 80074ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074f0:	f003 0320 	and.w	r3, r3, #32
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d002      	beq.n	80074fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fb8e 	bl	8007c1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007508:	2b40      	cmp	r3, #64	; 0x40
 800750a:	bf0c      	ite	eq
 800750c:	2301      	moveq	r3, #1
 800750e:	2300      	movne	r3, #0
 8007510:	b2db      	uxtb	r3, r3
 8007512:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	f003 0308 	and.w	r3, r3, #8
 800751e:	2b00      	cmp	r3, #0
 8007520:	d103      	bne.n	800752a <HAL_UART_IRQHandler+0x17a>
 8007522:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007526:	2b00      	cmp	r3, #0
 8007528:	d04f      	beq.n	80075ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fa96 	bl	8007a5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753a:	2b40      	cmp	r3, #64	; 0x40
 800753c:	d141      	bne.n	80075c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3314      	adds	r3, #20
 8007544:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007548:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800754c:	e853 3f00 	ldrex	r3, [r3]
 8007550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007554:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800755c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3314      	adds	r3, #20
 8007566:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800756a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800756e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007572:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007576:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800757a:	e841 2300 	strex	r3, r2, [r1]
 800757e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007582:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1d9      	bne.n	800753e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758e:	2b00      	cmp	r3, #0
 8007590:	d013      	beq.n	80075ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007596:	4a7d      	ldr	r2, [pc, #500]	; (800778c <HAL_UART_IRQHandler+0x3dc>)
 8007598:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fd f82f 	bl	8004602 <HAL_DMA_Abort_IT>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d016      	beq.n	80075d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80075b4:	4610      	mov	r0, r2
 80075b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b8:	e00e      	b.n	80075d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f990 	bl	80078e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c0:	e00a      	b.n	80075d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f98c 	bl	80078e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c8:	e006      	b.n	80075d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f988 	bl	80078e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80075d6:	e170      	b.n	80078ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d8:	bf00      	nop
    return;
 80075da:	e16e      	b.n	80078ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	f040 814a 	bne.w	800787a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80075e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ea:	f003 0310 	and.w	r3, r3, #16
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f000 8143 	beq.w	800787a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80075f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075f8:	f003 0310 	and.w	r3, r3, #16
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 813c 	beq.w	800787a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007602:	2300      	movs	r3, #0
 8007604:	60bb      	str	r3, [r7, #8]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	60bb      	str	r3, [r7, #8]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	60bb      	str	r3, [r7, #8]
 8007616:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007622:	2b40      	cmp	r3, #64	; 0x40
 8007624:	f040 80b4 	bne.w	8007790 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007634:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 8140 	beq.w	80078be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007646:	429a      	cmp	r2, r3
 8007648:	f080 8139 	bcs.w	80078be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007652:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800765e:	f000 8088 	beq.w	8007772 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	330c      	adds	r3, #12
 8007668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007670:	e853 3f00 	ldrex	r3, [r3]
 8007674:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007678:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800767c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007680:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	330c      	adds	r3, #12
 800768a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800768e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007692:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007696:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800769a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800769e:	e841 2300 	strex	r3, r2, [r1]
 80076a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80076a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1d9      	bne.n	8007662 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	3314      	adds	r3, #20
 80076b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076b8:	e853 3f00 	ldrex	r3, [r3]
 80076bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80076be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076c0:	f023 0301 	bic.w	r3, r3, #1
 80076c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3314      	adds	r3, #20
 80076ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80076d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80076d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80076da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80076de:	e841 2300 	strex	r3, r2, [r1]
 80076e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80076e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1e1      	bne.n	80076ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	3314      	adds	r3, #20
 80076f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076f4:	e853 3f00 	ldrex	r3, [r3]
 80076f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80076fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007700:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3314      	adds	r3, #20
 800770a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800770e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007710:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007714:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800771c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1e3      	bne.n	80076ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2220      	movs	r2, #32
 8007726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	330c      	adds	r3, #12
 8007736:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800773a:	e853 3f00 	ldrex	r3, [r3]
 800773e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007742:	f023 0310 	bic.w	r3, r3, #16
 8007746:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	330c      	adds	r3, #12
 8007750:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007754:	65ba      	str	r2, [r7, #88]	; 0x58
 8007756:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007758:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800775a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800775c:	e841 2300 	strex	r3, r2, [r1]
 8007760:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1e3      	bne.n	8007730 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776c:	4618      	mov	r0, r3
 800776e:	f7fc fed8 	bl	8004522 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800777a:	b29b      	uxth	r3, r3
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	b29b      	uxth	r3, r3
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f8b6 	bl	80078f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007788:	e099      	b.n	80078be <HAL_UART_IRQHandler+0x50e>
 800778a:	bf00      	nop
 800778c:	08007b23 	.word	0x08007b23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007798:	b29b      	uxth	r3, r3
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 808b 	beq.w	80078c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80077ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 8086 	beq.w	80078c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	330c      	adds	r3, #12
 80077bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c0:	e853 3f00 	ldrex	r3, [r3]
 80077c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	330c      	adds	r3, #12
 80077d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80077da:	647a      	str	r2, [r7, #68]	; 0x44
 80077dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e3      	bne.n	80077b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	3314      	adds	r3, #20
 80077f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	e853 3f00 	ldrex	r3, [r3]
 80077fc:	623b      	str	r3, [r7, #32]
   return(result);
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	f023 0301 	bic.w	r3, r3, #1
 8007804:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3314      	adds	r3, #20
 800780e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007812:	633a      	str	r2, [r7, #48]	; 0x30
 8007814:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007816:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800781a:	e841 2300 	strex	r3, r2, [r1]
 800781e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1e3      	bne.n	80077ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2220      	movs	r2, #32
 800782a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	330c      	adds	r3, #12
 800783a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	e853 3f00 	ldrex	r3, [r3]
 8007842:	60fb      	str	r3, [r7, #12]
   return(result);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f023 0310 	bic.w	r3, r3, #16
 800784a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	330c      	adds	r3, #12
 8007854:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007858:	61fa      	str	r2, [r7, #28]
 800785a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	69b9      	ldr	r1, [r7, #24]
 800785e:	69fa      	ldr	r2, [r7, #28]
 8007860:	e841 2300 	strex	r3, r2, [r1]
 8007864:	617b      	str	r3, [r7, #20]
   return(result);
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e3      	bne.n	8007834 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800786c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007870:	4619      	mov	r1, r3
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f83e 	bl	80078f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007878:	e023      	b.n	80078c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800787a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800787e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007882:	2b00      	cmp	r3, #0
 8007884:	d009      	beq.n	800789a <HAL_UART_IRQHandler+0x4ea>
 8007886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800788a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800788e:	2b00      	cmp	r3, #0
 8007890:	d003      	beq.n	800789a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f959 	bl	8007b4a <UART_Transmit_IT>
    return;
 8007898:	e014      	b.n	80078c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800789a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800789e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00e      	beq.n	80078c4 <HAL_UART_IRQHandler+0x514>
 80078a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d008      	beq.n	80078c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f999 	bl	8007bea <UART_EndTransmit_IT>
    return;
 80078b8:	e004      	b.n	80078c4 <HAL_UART_IRQHandler+0x514>
    return;
 80078ba:	bf00      	nop
 80078bc:	e002      	b.n	80078c4 <HAL_UART_IRQHandler+0x514>
      return;
 80078be:	bf00      	nop
 80078c0:	e000      	b.n	80078c4 <HAL_UART_IRQHandler+0x514>
      return;
 80078c2:	bf00      	nop
  }
}
 80078c4:	37e8      	adds	r7, #232	; 0xe8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop

080078cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	460b      	mov	r3, r1
 80078fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b090      	sub	sp, #64	; 0x40
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	603b      	str	r3, [r7, #0]
 8007918:	4613      	mov	r3, r2
 800791a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800791c:	e050      	b.n	80079c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800791e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007924:	d04c      	beq.n	80079c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007928:	2b00      	cmp	r3, #0
 800792a:	d007      	beq.n	800793c <UART_WaitOnFlagUntilTimeout+0x30>
 800792c:	f7fc f976 	bl	8003c1c <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007938:	429a      	cmp	r2, r3
 800793a:	d241      	bcs.n	80079c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	330c      	adds	r3, #12
 8007942:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007946:	e853 3f00 	ldrex	r3, [r3]
 800794a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	330c      	adds	r3, #12
 800795a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800795c:	637a      	str	r2, [r7, #52]	; 0x34
 800795e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007960:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007962:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007964:	e841 2300 	strex	r3, r2, [r1]
 8007968:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800796a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1e5      	bne.n	800793c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3314      	adds	r3, #20
 8007976:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	e853 3f00 	ldrex	r3, [r3]
 800797e:	613b      	str	r3, [r7, #16]
   return(result);
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	f023 0301 	bic.w	r3, r3, #1
 8007986:	63bb      	str	r3, [r7, #56]	; 0x38
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3314      	adds	r3, #20
 800798e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007990:	623a      	str	r2, [r7, #32]
 8007992:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007994:	69f9      	ldr	r1, [r7, #28]
 8007996:	6a3a      	ldr	r2, [r7, #32]
 8007998:	e841 2300 	strex	r3, r2, [r1]
 800799c:	61bb      	str	r3, [r7, #24]
   return(result);
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1e5      	bne.n	8007970 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2220      	movs	r2, #32
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2220      	movs	r2, #32
 80079b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e00f      	b.n	80079e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	4013      	ands	r3, r2
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	bf0c      	ite	eq
 80079d0:	2301      	moveq	r3, #1
 80079d2:	2300      	movne	r3, #0
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	461a      	mov	r2, r3
 80079d8:	79fb      	ldrb	r3, [r7, #7]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d09f      	beq.n	800791e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3740      	adds	r7, #64	; 0x40
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	4613      	mov	r3, r2
 80079f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	88fa      	ldrh	r2, [r7, #6]
 8007a00:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	88fa      	ldrh	r2, [r7, #6]
 8007a06:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2222      	movs	r2, #34	; 0x22
 8007a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68da      	ldr	r2, [r3, #12]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a2c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	695a      	ldr	r2, [r3, #20]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f042 0201 	orr.w	r2, r2, #1
 8007a3c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68da      	ldr	r2, [r3, #12]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f042 0220 	orr.w	r2, r2, #32
 8007a4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b095      	sub	sp, #84	; 0x54
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	330c      	adds	r3, #12
 8007a6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a6e:	e853 3f00 	ldrex	r3, [r3]
 8007a72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	330c      	adds	r3, #12
 8007a82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a84:	643a      	str	r2, [r7, #64]	; 0x40
 8007a86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a8c:	e841 2300 	strex	r3, r2, [r1]
 8007a90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1e5      	bne.n	8007a64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	3314      	adds	r3, #20
 8007a9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	e853 3f00 	ldrex	r3, [r3]
 8007aa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	f023 0301 	bic.w	r3, r3, #1
 8007aae:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	3314      	adds	r3, #20
 8007ab6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ab8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007aba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ac0:	e841 2300 	strex	r3, r2, [r1]
 8007ac4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1e5      	bne.n	8007a98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d119      	bne.n	8007b08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	330c      	adds	r3, #12
 8007ada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	e853 3f00 	ldrex	r3, [r3]
 8007ae2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	f023 0310 	bic.w	r3, r3, #16
 8007aea:	647b      	str	r3, [r7, #68]	; 0x44
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	330c      	adds	r3, #12
 8007af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007af4:	61ba      	str	r2, [r7, #24]
 8007af6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af8:	6979      	ldr	r1, [r7, #20]
 8007afa:	69ba      	ldr	r2, [r7, #24]
 8007afc:	e841 2300 	strex	r3, r2, [r1]
 8007b00:	613b      	str	r3, [r7, #16]
   return(result);
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e5      	bne.n	8007ad4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007b16:	bf00      	nop
 8007b18:	3754      	adds	r7, #84	; 0x54
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr

08007b22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f7ff fecf 	bl	80078e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b42:	bf00      	nop
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b085      	sub	sp, #20
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b21      	cmp	r3, #33	; 0x21
 8007b5c:	d13e      	bne.n	8007bdc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b66:	d114      	bne.n	8007b92 <UART_Transmit_IT+0x48>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d110      	bne.n	8007b92 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a1b      	ldr	r3, [r3, #32]
 8007b74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	881b      	ldrh	r3, [r3, #0]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	1c9a      	adds	r2, r3, #2
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	621a      	str	r2, [r3, #32]
 8007b90:	e008      	b.n	8007ba4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	1c59      	adds	r1, r3, #1
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	6211      	str	r1, [r2, #32]
 8007b9c:	781a      	ldrb	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	3b01      	subs	r3, #1
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10f      	bne.n	8007bd8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68da      	ldr	r2, [r3, #12]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bc6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68da      	ldr	r2, [r3, #12]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bd6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	e000      	b.n	8007bde <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007bdc:	2302      	movs	r3, #2
  }
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b082      	sub	sp, #8
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68da      	ldr	r2, [r3, #12]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2220      	movs	r2, #32
 8007c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7ff fe5e 	bl	80078cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b08c      	sub	sp, #48	; 0x30
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b22      	cmp	r3, #34	; 0x22
 8007c2c:	f040 80ab 	bne.w	8007d86 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c38:	d117      	bne.n	8007c6a <UART_Receive_IT+0x50>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d113      	bne.n	8007c6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c42:	2300      	movs	r3, #0
 8007c44:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c62:	1c9a      	adds	r2, r3, #2
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	629a      	str	r2, [r3, #40]	; 0x28
 8007c68:	e026      	b.n	8007cb8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007c70:	2300      	movs	r3, #0
 8007c72:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c7c:	d007      	beq.n	8007c8e <UART_Receive_IT+0x74>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10a      	bne.n	8007c9c <UART_Receive_IT+0x82>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d106      	bne.n	8007c9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	b2da      	uxtb	r2, r3
 8007c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c98:	701a      	strb	r2, [r3, #0]
 8007c9a:	e008      	b.n	8007cae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb2:	1c5a      	adds	r2, r3, #1
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d15a      	bne.n	8007d82 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68da      	ldr	r2, [r3, #12]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f022 0220 	bic.w	r2, r2, #32
 8007cda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68da      	ldr	r2, [r3, #12]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	695a      	ldr	r2, [r3, #20]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f022 0201 	bic.w	r2, r2, #1
 8007cfa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2220      	movs	r2, #32
 8007d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d135      	bne.n	8007d78 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	330c      	adds	r3, #12
 8007d18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	e853 3f00 	ldrex	r3, [r3]
 8007d20:	613b      	str	r3, [r7, #16]
   return(result);
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	f023 0310 	bic.w	r3, r3, #16
 8007d28:	627b      	str	r3, [r7, #36]	; 0x24
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	330c      	adds	r3, #12
 8007d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d32:	623a      	str	r2, [r7, #32]
 8007d34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d36:	69f9      	ldr	r1, [r7, #28]
 8007d38:	6a3a      	ldr	r2, [r7, #32]
 8007d3a:	e841 2300 	strex	r3, r2, [r1]
 8007d3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1e5      	bne.n	8007d12 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 0310 	and.w	r3, r3, #16
 8007d50:	2b10      	cmp	r3, #16
 8007d52:	d10a      	bne.n	8007d6a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d54:	2300      	movs	r3, #0
 8007d56:	60fb      	str	r3, [r7, #12]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	60fb      	str	r3, [r7, #12]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f7ff fdbf 	bl	80078f4 <HAL_UARTEx_RxEventCallback>
 8007d76:	e002      	b.n	8007d7e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f7fb f8cd 	bl	8002f18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	e002      	b.n	8007d88 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	e000      	b.n	8007d88 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007d86:	2302      	movs	r3, #2
  }
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3730      	adds	r7, #48	; 0x30
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d94:	b09f      	sub	sp, #124	; 0x7c
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007da6:	68d9      	ldr	r1, [r3, #12]
 8007da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	ea40 0301 	orr.w	r3, r0, r1
 8007db0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007db4:	689a      	ldr	r2, [r3, #8]
 8007db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	431a      	orrs	r2, r3
 8007dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dbe:	695b      	ldr	r3, [r3, #20]
 8007dc0:	431a      	orrs	r2, r3
 8007dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007dd4:	f021 010c 	bic.w	r1, r1, #12
 8007dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dde:	430b      	orrs	r3, r1
 8007de0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dee:	6999      	ldr	r1, [r3, #24]
 8007df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	ea40 0301 	orr.w	r3, r0, r1
 8007df8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	4bc5      	ldr	r3, [pc, #788]	; (8008114 <UART_SetConfig+0x384>)
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d004      	beq.n	8007e0e <UART_SetConfig+0x7e>
 8007e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	4bc3      	ldr	r3, [pc, #780]	; (8008118 <UART_SetConfig+0x388>)
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d103      	bne.n	8007e16 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e0e:	f7fd fa2d 	bl	800526c <HAL_RCC_GetPCLK2Freq>
 8007e12:	6778      	str	r0, [r7, #116]	; 0x74
 8007e14:	e002      	b.n	8007e1c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e16:	f7fd fa15 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 8007e1a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e1e:	69db      	ldr	r3, [r3, #28]
 8007e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e24:	f040 80b6 	bne.w	8007f94 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e2a:	461c      	mov	r4, r3
 8007e2c:	f04f 0500 	mov.w	r5, #0
 8007e30:	4622      	mov	r2, r4
 8007e32:	462b      	mov	r3, r5
 8007e34:	1891      	adds	r1, r2, r2
 8007e36:	6439      	str	r1, [r7, #64]	; 0x40
 8007e38:	415b      	adcs	r3, r3
 8007e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8007e3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e40:	1912      	adds	r2, r2, r4
 8007e42:	eb45 0303 	adc.w	r3, r5, r3
 8007e46:	f04f 0000 	mov.w	r0, #0
 8007e4a:	f04f 0100 	mov.w	r1, #0
 8007e4e:	00d9      	lsls	r1, r3, #3
 8007e50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e54:	00d0      	lsls	r0, r2, #3
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	1911      	adds	r1, r2, r4
 8007e5c:	6639      	str	r1, [r7, #96]	; 0x60
 8007e5e:	416b      	adcs	r3, r5
 8007e60:	667b      	str	r3, [r7, #100]	; 0x64
 8007e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	461a      	mov	r2, r3
 8007e68:	f04f 0300 	mov.w	r3, #0
 8007e6c:	1891      	adds	r1, r2, r2
 8007e6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e70:	415b      	adcs	r3, r3
 8007e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e78:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007e7c:	f7f8 fe8c 	bl	8000b98 <__aeabi_uldivmod>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	4ba5      	ldr	r3, [pc, #660]	; (800811c <UART_SetConfig+0x38c>)
 8007e86:	fba3 2302 	umull	r2, r3, r3, r2
 8007e8a:	095b      	lsrs	r3, r3, #5
 8007e8c:	011e      	lsls	r6, r3, #4
 8007e8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e90:	461c      	mov	r4, r3
 8007e92:	f04f 0500 	mov.w	r5, #0
 8007e96:	4622      	mov	r2, r4
 8007e98:	462b      	mov	r3, r5
 8007e9a:	1891      	adds	r1, r2, r2
 8007e9c:	6339      	str	r1, [r7, #48]	; 0x30
 8007e9e:	415b      	adcs	r3, r3
 8007ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ea2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007ea6:	1912      	adds	r2, r2, r4
 8007ea8:	eb45 0303 	adc.w	r3, r5, r3
 8007eac:	f04f 0000 	mov.w	r0, #0
 8007eb0:	f04f 0100 	mov.w	r1, #0
 8007eb4:	00d9      	lsls	r1, r3, #3
 8007eb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007eba:	00d0      	lsls	r0, r2, #3
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	1911      	adds	r1, r2, r4
 8007ec2:	65b9      	str	r1, [r7, #88]	; 0x58
 8007ec4:	416b      	adcs	r3, r5
 8007ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	461a      	mov	r2, r3
 8007ece:	f04f 0300 	mov.w	r3, #0
 8007ed2:	1891      	adds	r1, r2, r2
 8007ed4:	62b9      	str	r1, [r7, #40]	; 0x28
 8007ed6:	415b      	adcs	r3, r3
 8007ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ede:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007ee2:	f7f8 fe59 	bl	8000b98 <__aeabi_uldivmod>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	460b      	mov	r3, r1
 8007eea:	4b8c      	ldr	r3, [pc, #560]	; (800811c <UART_SetConfig+0x38c>)
 8007eec:	fba3 1302 	umull	r1, r3, r3, r2
 8007ef0:	095b      	lsrs	r3, r3, #5
 8007ef2:	2164      	movs	r1, #100	; 0x64
 8007ef4:	fb01 f303 	mul.w	r3, r1, r3
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	3332      	adds	r3, #50	; 0x32
 8007efe:	4a87      	ldr	r2, [pc, #540]	; (800811c <UART_SetConfig+0x38c>)
 8007f00:	fba2 2303 	umull	r2, r3, r2, r3
 8007f04:	095b      	lsrs	r3, r3, #5
 8007f06:	005b      	lsls	r3, r3, #1
 8007f08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f0c:	441e      	add	r6, r3
 8007f0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f10:	4618      	mov	r0, r3
 8007f12:	f04f 0100 	mov.w	r1, #0
 8007f16:	4602      	mov	r2, r0
 8007f18:	460b      	mov	r3, r1
 8007f1a:	1894      	adds	r4, r2, r2
 8007f1c:	623c      	str	r4, [r7, #32]
 8007f1e:	415b      	adcs	r3, r3
 8007f20:	627b      	str	r3, [r7, #36]	; 0x24
 8007f22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f26:	1812      	adds	r2, r2, r0
 8007f28:	eb41 0303 	adc.w	r3, r1, r3
 8007f2c:	f04f 0400 	mov.w	r4, #0
 8007f30:	f04f 0500 	mov.w	r5, #0
 8007f34:	00dd      	lsls	r5, r3, #3
 8007f36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007f3a:	00d4      	lsls	r4, r2, #3
 8007f3c:	4622      	mov	r2, r4
 8007f3e:	462b      	mov	r3, r5
 8007f40:	1814      	adds	r4, r2, r0
 8007f42:	653c      	str	r4, [r7, #80]	; 0x50
 8007f44:	414b      	adcs	r3, r1
 8007f46:	657b      	str	r3, [r7, #84]	; 0x54
 8007f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	f04f 0300 	mov.w	r3, #0
 8007f52:	1891      	adds	r1, r2, r2
 8007f54:	61b9      	str	r1, [r7, #24]
 8007f56:	415b      	adcs	r3, r3
 8007f58:	61fb      	str	r3, [r7, #28]
 8007f5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f5e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007f62:	f7f8 fe19 	bl	8000b98 <__aeabi_uldivmod>
 8007f66:	4602      	mov	r2, r0
 8007f68:	460b      	mov	r3, r1
 8007f6a:	4b6c      	ldr	r3, [pc, #432]	; (800811c <UART_SetConfig+0x38c>)
 8007f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8007f70:	095b      	lsrs	r3, r3, #5
 8007f72:	2164      	movs	r1, #100	; 0x64
 8007f74:	fb01 f303 	mul.w	r3, r1, r3
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	00db      	lsls	r3, r3, #3
 8007f7c:	3332      	adds	r3, #50	; 0x32
 8007f7e:	4a67      	ldr	r2, [pc, #412]	; (800811c <UART_SetConfig+0x38c>)
 8007f80:	fba2 2303 	umull	r2, r3, r2, r3
 8007f84:	095b      	lsrs	r3, r3, #5
 8007f86:	f003 0207 	and.w	r2, r3, #7
 8007f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4432      	add	r2, r6
 8007f90:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f92:	e0b9      	b.n	8008108 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f96:	461c      	mov	r4, r3
 8007f98:	f04f 0500 	mov.w	r5, #0
 8007f9c:	4622      	mov	r2, r4
 8007f9e:	462b      	mov	r3, r5
 8007fa0:	1891      	adds	r1, r2, r2
 8007fa2:	6139      	str	r1, [r7, #16]
 8007fa4:	415b      	adcs	r3, r3
 8007fa6:	617b      	str	r3, [r7, #20]
 8007fa8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007fac:	1912      	adds	r2, r2, r4
 8007fae:	eb45 0303 	adc.w	r3, r5, r3
 8007fb2:	f04f 0000 	mov.w	r0, #0
 8007fb6:	f04f 0100 	mov.w	r1, #0
 8007fba:	00d9      	lsls	r1, r3, #3
 8007fbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007fc0:	00d0      	lsls	r0, r2, #3
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	eb12 0804 	adds.w	r8, r2, r4
 8007fca:	eb43 0905 	adc.w	r9, r3, r5
 8007fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f04f 0100 	mov.w	r1, #0
 8007fd8:	f04f 0200 	mov.w	r2, #0
 8007fdc:	f04f 0300 	mov.w	r3, #0
 8007fe0:	008b      	lsls	r3, r1, #2
 8007fe2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007fe6:	0082      	lsls	r2, r0, #2
 8007fe8:	4640      	mov	r0, r8
 8007fea:	4649      	mov	r1, r9
 8007fec:	f7f8 fdd4 	bl	8000b98 <__aeabi_uldivmod>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	4b49      	ldr	r3, [pc, #292]	; (800811c <UART_SetConfig+0x38c>)
 8007ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8007ffa:	095b      	lsrs	r3, r3, #5
 8007ffc:	011e      	lsls	r6, r3, #4
 8007ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008000:	4618      	mov	r0, r3
 8008002:	f04f 0100 	mov.w	r1, #0
 8008006:	4602      	mov	r2, r0
 8008008:	460b      	mov	r3, r1
 800800a:	1894      	adds	r4, r2, r2
 800800c:	60bc      	str	r4, [r7, #8]
 800800e:	415b      	adcs	r3, r3
 8008010:	60fb      	str	r3, [r7, #12]
 8008012:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008016:	1812      	adds	r2, r2, r0
 8008018:	eb41 0303 	adc.w	r3, r1, r3
 800801c:	f04f 0400 	mov.w	r4, #0
 8008020:	f04f 0500 	mov.w	r5, #0
 8008024:	00dd      	lsls	r5, r3, #3
 8008026:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800802a:	00d4      	lsls	r4, r2, #3
 800802c:	4622      	mov	r2, r4
 800802e:	462b      	mov	r3, r5
 8008030:	1814      	adds	r4, r2, r0
 8008032:	64bc      	str	r4, [r7, #72]	; 0x48
 8008034:	414b      	adcs	r3, r1
 8008036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	4618      	mov	r0, r3
 800803e:	f04f 0100 	mov.w	r1, #0
 8008042:	f04f 0200 	mov.w	r2, #0
 8008046:	f04f 0300 	mov.w	r3, #0
 800804a:	008b      	lsls	r3, r1, #2
 800804c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008050:	0082      	lsls	r2, r0, #2
 8008052:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008056:	f7f8 fd9f 	bl	8000b98 <__aeabi_uldivmod>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	4b2f      	ldr	r3, [pc, #188]	; (800811c <UART_SetConfig+0x38c>)
 8008060:	fba3 1302 	umull	r1, r3, r3, r2
 8008064:	095b      	lsrs	r3, r3, #5
 8008066:	2164      	movs	r1, #100	; 0x64
 8008068:	fb01 f303 	mul.w	r3, r1, r3
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	011b      	lsls	r3, r3, #4
 8008070:	3332      	adds	r3, #50	; 0x32
 8008072:	4a2a      	ldr	r2, [pc, #168]	; (800811c <UART_SetConfig+0x38c>)
 8008074:	fba2 2303 	umull	r2, r3, r2, r3
 8008078:	095b      	lsrs	r3, r3, #5
 800807a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800807e:	441e      	add	r6, r3
 8008080:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008082:	4618      	mov	r0, r3
 8008084:	f04f 0100 	mov.w	r1, #0
 8008088:	4602      	mov	r2, r0
 800808a:	460b      	mov	r3, r1
 800808c:	1894      	adds	r4, r2, r2
 800808e:	603c      	str	r4, [r7, #0]
 8008090:	415b      	adcs	r3, r3
 8008092:	607b      	str	r3, [r7, #4]
 8008094:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008098:	1812      	adds	r2, r2, r0
 800809a:	eb41 0303 	adc.w	r3, r1, r3
 800809e:	f04f 0400 	mov.w	r4, #0
 80080a2:	f04f 0500 	mov.w	r5, #0
 80080a6:	00dd      	lsls	r5, r3, #3
 80080a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80080ac:	00d4      	lsls	r4, r2, #3
 80080ae:	4622      	mov	r2, r4
 80080b0:	462b      	mov	r3, r5
 80080b2:	eb12 0a00 	adds.w	sl, r2, r0
 80080b6:	eb43 0b01 	adc.w	fp, r3, r1
 80080ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	4618      	mov	r0, r3
 80080c0:	f04f 0100 	mov.w	r1, #0
 80080c4:	f04f 0200 	mov.w	r2, #0
 80080c8:	f04f 0300 	mov.w	r3, #0
 80080cc:	008b      	lsls	r3, r1, #2
 80080ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80080d2:	0082      	lsls	r2, r0, #2
 80080d4:	4650      	mov	r0, sl
 80080d6:	4659      	mov	r1, fp
 80080d8:	f7f8 fd5e 	bl	8000b98 <__aeabi_uldivmod>
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	4b0e      	ldr	r3, [pc, #56]	; (800811c <UART_SetConfig+0x38c>)
 80080e2:	fba3 1302 	umull	r1, r3, r3, r2
 80080e6:	095b      	lsrs	r3, r3, #5
 80080e8:	2164      	movs	r1, #100	; 0x64
 80080ea:	fb01 f303 	mul.w	r3, r1, r3
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	011b      	lsls	r3, r3, #4
 80080f2:	3332      	adds	r3, #50	; 0x32
 80080f4:	4a09      	ldr	r2, [pc, #36]	; (800811c <UART_SetConfig+0x38c>)
 80080f6:	fba2 2303 	umull	r2, r3, r2, r3
 80080fa:	095b      	lsrs	r3, r3, #5
 80080fc:	f003 020f 	and.w	r2, r3, #15
 8008100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4432      	add	r2, r6
 8008106:	609a      	str	r2, [r3, #8]
}
 8008108:	bf00      	nop
 800810a:	377c      	adds	r7, #124	; 0x7c
 800810c:	46bd      	mov	sp, r7
 800810e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008112:	bf00      	nop
 8008114:	40011000 	.word	0x40011000
 8008118:	40011400 	.word	0x40011400
 800811c:	51eb851f 	.word	0x51eb851f

08008120 <__NVIC_SetPriority>:
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	4603      	mov	r3, r0
 8008128:	6039      	str	r1, [r7, #0]
 800812a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800812c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008130:	2b00      	cmp	r3, #0
 8008132:	db0a      	blt.n	800814a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	b2da      	uxtb	r2, r3
 8008138:	490c      	ldr	r1, [pc, #48]	; (800816c <__NVIC_SetPriority+0x4c>)
 800813a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800813e:	0112      	lsls	r2, r2, #4
 8008140:	b2d2      	uxtb	r2, r2
 8008142:	440b      	add	r3, r1
 8008144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008148:	e00a      	b.n	8008160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	b2da      	uxtb	r2, r3
 800814e:	4908      	ldr	r1, [pc, #32]	; (8008170 <__NVIC_SetPriority+0x50>)
 8008150:	79fb      	ldrb	r3, [r7, #7]
 8008152:	f003 030f 	and.w	r3, r3, #15
 8008156:	3b04      	subs	r3, #4
 8008158:	0112      	lsls	r2, r2, #4
 800815a:	b2d2      	uxtb	r2, r2
 800815c:	440b      	add	r3, r1
 800815e:	761a      	strb	r2, [r3, #24]
}
 8008160:	bf00      	nop
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr
 800816c:	e000e100 	.word	0xe000e100
 8008170:	e000ed00 	.word	0xe000ed00

08008174 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008174:	b580      	push	{r7, lr}
 8008176:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008178:	2100      	movs	r1, #0
 800817a:	f06f 0004 	mvn.w	r0, #4
 800817e:	f7ff ffcf 	bl	8008120 <__NVIC_SetPriority>
#endif
}
 8008182:	bf00      	nop
 8008184:	bd80      	pop	{r7, pc}
	...

08008188 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800818e:	f3ef 8305 	mrs	r3, IPSR
 8008192:	603b      	str	r3, [r7, #0]
  return(result);
 8008194:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008196:	2b00      	cmp	r3, #0
 8008198:	d003      	beq.n	80081a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800819a:	f06f 0305 	mvn.w	r3, #5
 800819e:	607b      	str	r3, [r7, #4]
 80081a0:	e00c      	b.n	80081bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80081a2:	4b0a      	ldr	r3, [pc, #40]	; (80081cc <osKernelInitialize+0x44>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d105      	bne.n	80081b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80081aa:	4b08      	ldr	r3, [pc, #32]	; (80081cc <osKernelInitialize+0x44>)
 80081ac:	2201      	movs	r2, #1
 80081ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	607b      	str	r3, [r7, #4]
 80081b4:	e002      	b.n	80081bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80081b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80081bc:	687b      	ldr	r3, [r7, #4]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	370c      	adds	r7, #12
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	200000ec 	.word	0x200000ec

080081d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081d6:	f3ef 8305 	mrs	r3, IPSR
 80081da:	603b      	str	r3, [r7, #0]
  return(result);
 80081dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d003      	beq.n	80081ea <osKernelStart+0x1a>
    stat = osErrorISR;
 80081e2:	f06f 0305 	mvn.w	r3, #5
 80081e6:	607b      	str	r3, [r7, #4]
 80081e8:	e010      	b.n	800820c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80081ea:	4b0b      	ldr	r3, [pc, #44]	; (8008218 <osKernelStart+0x48>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d109      	bne.n	8008206 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80081f2:	f7ff ffbf 	bl	8008174 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80081f6:	4b08      	ldr	r3, [pc, #32]	; (8008218 <osKernelStart+0x48>)
 80081f8:	2202      	movs	r2, #2
 80081fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80081fc:	f001 f866 	bl	80092cc <vTaskStartScheduler>
      stat = osOK;
 8008200:	2300      	movs	r3, #0
 8008202:	607b      	str	r3, [r7, #4]
 8008204:	e002      	b.n	800820c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800820a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800820c:	687b      	ldr	r3, [r7, #4]
}
 800820e:	4618      	mov	r0, r3
 8008210:	3708      	adds	r7, #8
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	200000ec 	.word	0x200000ec

0800821c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800821c:	b580      	push	{r7, lr}
 800821e:	b08e      	sub	sp, #56	; 0x38
 8008220:	af04      	add	r7, sp, #16
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008228:	2300      	movs	r3, #0
 800822a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800822c:	f3ef 8305 	mrs	r3, IPSR
 8008230:	617b      	str	r3, [r7, #20]
  return(result);
 8008232:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008234:	2b00      	cmp	r3, #0
 8008236:	d17e      	bne.n	8008336 <osThreadNew+0x11a>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d07b      	beq.n	8008336 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800823e:	2380      	movs	r3, #128	; 0x80
 8008240:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008242:	2318      	movs	r3, #24
 8008244:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008246:	2300      	movs	r3, #0
 8008248:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800824a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800824e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d045      	beq.n	80082e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d002      	beq.n	8008264 <osThreadNew+0x48>
        name = attr->name;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d002      	beq.n	8008272 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d008      	beq.n	800828a <osThreadNew+0x6e>
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	2b38      	cmp	r3, #56	; 0x38
 800827c:	d805      	bhi.n	800828a <osThreadNew+0x6e>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <osThreadNew+0x72>
        return (NULL);
 800828a:	2300      	movs	r3, #0
 800828c:	e054      	b.n	8008338 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d003      	beq.n	800829e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	089b      	lsrs	r3, r3, #2
 800829c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00e      	beq.n	80082c4 <osThreadNew+0xa8>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	2b5b      	cmp	r3, #91	; 0x5b
 80082ac:	d90a      	bls.n	80082c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d006      	beq.n	80082c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d002      	beq.n	80082c4 <osThreadNew+0xa8>
        mem = 1;
 80082be:	2301      	movs	r3, #1
 80082c0:	61bb      	str	r3, [r7, #24]
 80082c2:	e010      	b.n	80082e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10c      	bne.n	80082e6 <osThreadNew+0xca>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d108      	bne.n	80082e6 <osThreadNew+0xca>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d104      	bne.n	80082e6 <osThreadNew+0xca>
          mem = 0;
 80082dc:	2300      	movs	r3, #0
 80082de:	61bb      	str	r3, [r7, #24]
 80082e0:	e001      	b.n	80082e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80082e2:	2300      	movs	r3, #0
 80082e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d110      	bne.n	800830e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80082f4:	9202      	str	r2, [sp, #8]
 80082f6:	9301      	str	r3, [sp, #4]
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	6a3a      	ldr	r2, [r7, #32]
 8008300:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f000 fe0c 	bl	8008f20 <xTaskCreateStatic>
 8008308:	4603      	mov	r3, r0
 800830a:	613b      	str	r3, [r7, #16]
 800830c:	e013      	b.n	8008336 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d110      	bne.n	8008336 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008314:	6a3b      	ldr	r3, [r7, #32]
 8008316:	b29a      	uxth	r2, r3
 8008318:	f107 0310 	add.w	r3, r7, #16
 800831c:	9301      	str	r3, [sp, #4]
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 fe57 	bl	8008fda <xTaskCreate>
 800832c:	4603      	mov	r3, r0
 800832e:	2b01      	cmp	r3, #1
 8008330:	d001      	beq.n	8008336 <osThreadNew+0x11a>
            hTask = NULL;
 8008332:	2300      	movs	r3, #0
 8008334:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008336:	693b      	ldr	r3, [r7, #16]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3728      	adds	r7, #40	; 0x28
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008348:	f3ef 8305 	mrs	r3, IPSR
 800834c:	60bb      	str	r3, [r7, #8]
  return(result);
 800834e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008350:	2b00      	cmp	r3, #0
 8008352:	d003      	beq.n	800835c <osDelay+0x1c>
    stat = osErrorISR;
 8008354:	f06f 0305 	mvn.w	r3, #5
 8008358:	60fb      	str	r3, [r7, #12]
 800835a:	e007      	b.n	800836c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800835c:	2300      	movs	r3, #0
 800835e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d002      	beq.n	800836c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 ff7c 	bl	8009264 <vTaskDelay>
    }
  }

  return (stat);
 800836c:	68fb      	ldr	r3, [r7, #12]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
	...

08008378 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	4a07      	ldr	r2, [pc, #28]	; (80083a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8008388:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	4a06      	ldr	r2, [pc, #24]	; (80083a8 <vApplicationGetIdleTaskMemory+0x30>)
 800838e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2280      	movs	r2, #128	; 0x80
 8008394:	601a      	str	r2, [r3, #0]
}
 8008396:	bf00      	nop
 8008398:	3714      	adds	r7, #20
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	200000f0 	.word	0x200000f0
 80083a8:	2000014c 	.word	0x2000014c

080083ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	4a07      	ldr	r2, [pc, #28]	; (80083d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80083bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	4a06      	ldr	r2, [pc, #24]	; (80083dc <vApplicationGetTimerTaskMemory+0x30>)
 80083c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083ca:	601a      	str	r2, [r3, #0]
}
 80083cc:	bf00      	nop
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr
 80083d8:	2000034c 	.word	0x2000034c
 80083dc:	200003a8 	.word	0x200003a8

080083e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f103 0208 	add.w	r2, r3, #8
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f103 0208 	add.w	r2, r3, #8
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f103 0208 	add.w	r2, r3, #8
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800842e:	bf00      	nop
 8008430:	370c      	adds	r7, #12
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800843a:	b480      	push	{r7}
 800843c:	b085      	sub	sp, #20
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	689a      	ldr	r2, [r3, #8]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	683a      	ldr	r2, [r7, #0]
 800845e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	1c5a      	adds	r2, r3, #1
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	601a      	str	r2, [r3, #0]
}
 8008476:	bf00      	nop
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008482:	b480      	push	{r7}
 8008484:	b085      	sub	sp, #20
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008498:	d103      	bne.n	80084a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	60fb      	str	r3, [r7, #12]
 80084a0:	e00c      	b.n	80084bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	3308      	adds	r3, #8
 80084a6:	60fb      	str	r3, [r7, #12]
 80084a8:	e002      	b.n	80084b0 <vListInsert+0x2e>
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	60fb      	str	r3, [r7, #12]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d2f6      	bcs.n	80084aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	685a      	ldr	r2, [r3, #4]
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	683a      	ldr	r2, [r7, #0]
 80084ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	1c5a      	adds	r2, r3, #1
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	601a      	str	r2, [r3, #0]
}
 80084e8:	bf00      	nop
 80084ea:	3714      	adds	r7, #20
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	6892      	ldr	r2, [r2, #8]
 800850a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	6852      	ldr	r2, [r2, #4]
 8008514:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	429a      	cmp	r2, r3
 800851e:	d103      	bne.n	8008528 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	689a      	ldr	r2, [r3, #8]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	1e5a      	subs	r2, r3, #1
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
}
 800853c:	4618      	mov	r0, r3
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10a      	bne.n	8008572 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800855c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008560:	f383 8811 	msr	BASEPRI, r3
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800856e:	bf00      	nop
 8008570:	e7fe      	b.n	8008570 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008572:	f002 f84f 	bl	800a614 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800857e:	68f9      	ldr	r1, [r7, #12]
 8008580:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008582:	fb01 f303 	mul.w	r3, r1, r3
 8008586:	441a      	add	r2, r3
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a2:	3b01      	subs	r3, #1
 80085a4:	68f9      	ldr	r1, [r7, #12]
 80085a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085a8:	fb01 f303 	mul.w	r3, r1, r3
 80085ac:	441a      	add	r2, r3
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	22ff      	movs	r2, #255	; 0xff
 80085b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	22ff      	movs	r2, #255	; 0xff
 80085be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d114      	bne.n	80085f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d01a      	beq.n	8008606 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	3310      	adds	r3, #16
 80085d4:	4618      	mov	r0, r3
 80085d6:	f001 f903 	bl	80097e0 <xTaskRemoveFromEventList>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d012      	beq.n	8008606 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80085e0:	4b0c      	ldr	r3, [pc, #48]	; (8008614 <xQueueGenericReset+0xcc>)
 80085e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	e009      	b.n	8008606 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	3310      	adds	r3, #16
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7ff fef2 	bl	80083e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	3324      	adds	r3, #36	; 0x24
 8008600:	4618      	mov	r0, r3
 8008602:	f7ff feed 	bl	80083e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008606:	f002 f835 	bl	800a674 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800860a:	2301      	movs	r3, #1
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	e000ed04 	.word	0xe000ed04

08008618 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008618:	b580      	push	{r7, lr}
 800861a:	b08e      	sub	sp, #56	; 0x38
 800861c:	af02      	add	r7, sp, #8
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
 8008624:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10a      	bne.n	8008642 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800862c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008630:	f383 8811 	msr	BASEPRI, r3
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800863e:	bf00      	nop
 8008640:	e7fe      	b.n	8008640 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d10a      	bne.n	800865e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864c:	f383 8811 	msr	BASEPRI, r3
 8008650:	f3bf 8f6f 	isb	sy
 8008654:	f3bf 8f4f 	dsb	sy
 8008658:	627b      	str	r3, [r7, #36]	; 0x24
}
 800865a:	bf00      	nop
 800865c:	e7fe      	b.n	800865c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d002      	beq.n	800866a <xQueueGenericCreateStatic+0x52>
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d001      	beq.n	800866e <xQueueGenericCreateStatic+0x56>
 800866a:	2301      	movs	r3, #1
 800866c:	e000      	b.n	8008670 <xQueueGenericCreateStatic+0x58>
 800866e:	2300      	movs	r3, #0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10a      	bne.n	800868a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008678:	f383 8811 	msr	BASEPRI, r3
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	623b      	str	r3, [r7, #32]
}
 8008686:	bf00      	nop
 8008688:	e7fe      	b.n	8008688 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d102      	bne.n	8008696 <xQueueGenericCreateStatic+0x7e>
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d101      	bne.n	800869a <xQueueGenericCreateStatic+0x82>
 8008696:	2301      	movs	r3, #1
 8008698:	e000      	b.n	800869c <xQueueGenericCreateStatic+0x84>
 800869a:	2300      	movs	r3, #0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d10a      	bne.n	80086b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80086a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	61fb      	str	r3, [r7, #28]
}
 80086b2:	bf00      	nop
 80086b4:	e7fe      	b.n	80086b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80086b6:	2350      	movs	r3, #80	; 0x50
 80086b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	2b50      	cmp	r3, #80	; 0x50
 80086be:	d00a      	beq.n	80086d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80086c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c4:	f383 8811 	msr	BASEPRI, r3
 80086c8:	f3bf 8f6f 	isb	sy
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	61bb      	str	r3, [r7, #24]
}
 80086d2:	bf00      	nop
 80086d4:	e7fe      	b.n	80086d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80086d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80086dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00d      	beq.n	80086fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80086e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80086ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	4613      	mov	r3, r2
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	68b9      	ldr	r1, [r7, #8]
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f000 f805 	bl	8008708 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80086fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008700:	4618      	mov	r0, r3
 8008702:	3730      	adds	r7, #48	; 0x30
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
 8008714:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d103      	bne.n	8008724 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	69ba      	ldr	r2, [r7, #24]
 8008720:	601a      	str	r2, [r3, #0]
 8008722:	e002      	b.n	800872a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008736:	2101      	movs	r1, #1
 8008738:	69b8      	ldr	r0, [r7, #24]
 800873a:	f7ff ff05 	bl	8008548 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	78fa      	ldrb	r2, [r7, #3]
 8008742:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008746:	bf00      	nop
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
	...

08008750 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b08e      	sub	sp, #56	; 0x38
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	607a      	str	r2, [r7, #4]
 800875c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800875e:	2300      	movs	r3, #0
 8008760:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10a      	bne.n	8008782 <xQueueGenericSend+0x32>
	__asm volatile
 800876c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800877e:	bf00      	nop
 8008780:	e7fe      	b.n	8008780 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d103      	bne.n	8008790 <xQueueGenericSend+0x40>
 8008788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878c:	2b00      	cmp	r3, #0
 800878e:	d101      	bne.n	8008794 <xQueueGenericSend+0x44>
 8008790:	2301      	movs	r3, #1
 8008792:	e000      	b.n	8008796 <xQueueGenericSend+0x46>
 8008794:	2300      	movs	r3, #0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d10a      	bne.n	80087b0 <xQueueGenericSend+0x60>
	__asm volatile
 800879a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879e:	f383 8811 	msr	BASEPRI, r3
 80087a2:	f3bf 8f6f 	isb	sy
 80087a6:	f3bf 8f4f 	dsb	sy
 80087aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80087ac:	bf00      	nop
 80087ae:	e7fe      	b.n	80087ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d103      	bne.n	80087be <xQueueGenericSend+0x6e>
 80087b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d101      	bne.n	80087c2 <xQueueGenericSend+0x72>
 80087be:	2301      	movs	r3, #1
 80087c0:	e000      	b.n	80087c4 <xQueueGenericSend+0x74>
 80087c2:	2300      	movs	r3, #0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d10a      	bne.n	80087de <xQueueGenericSend+0x8e>
	__asm volatile
 80087c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087cc:	f383 8811 	msr	BASEPRI, r3
 80087d0:	f3bf 8f6f 	isb	sy
 80087d4:	f3bf 8f4f 	dsb	sy
 80087d8:	623b      	str	r3, [r7, #32]
}
 80087da:	bf00      	nop
 80087dc:	e7fe      	b.n	80087dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087de:	f001 f9bd 	bl	8009b5c <xTaskGetSchedulerState>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d102      	bne.n	80087ee <xQueueGenericSend+0x9e>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d101      	bne.n	80087f2 <xQueueGenericSend+0xa2>
 80087ee:	2301      	movs	r3, #1
 80087f0:	e000      	b.n	80087f4 <xQueueGenericSend+0xa4>
 80087f2:	2300      	movs	r3, #0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d10a      	bne.n	800880e <xQueueGenericSend+0xbe>
	__asm volatile
 80087f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fc:	f383 8811 	msr	BASEPRI, r3
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	61fb      	str	r3, [r7, #28]
}
 800880a:	bf00      	nop
 800880c:	e7fe      	b.n	800880c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800880e:	f001 ff01 	bl	800a614 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800881a:	429a      	cmp	r2, r3
 800881c:	d302      	bcc.n	8008824 <xQueueGenericSend+0xd4>
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	2b02      	cmp	r3, #2
 8008822:	d129      	bne.n	8008878 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008824:	683a      	ldr	r2, [r7, #0]
 8008826:	68b9      	ldr	r1, [r7, #8]
 8008828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800882a:	f000 fa0b 	bl	8008c44 <prvCopyDataToQueue>
 800882e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008834:	2b00      	cmp	r3, #0
 8008836:	d010      	beq.n	800885a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883a:	3324      	adds	r3, #36	; 0x24
 800883c:	4618      	mov	r0, r3
 800883e:	f000 ffcf 	bl	80097e0 <xTaskRemoveFromEventList>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d013      	beq.n	8008870 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008848:	4b3f      	ldr	r3, [pc, #252]	; (8008948 <xQueueGenericSend+0x1f8>)
 800884a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800884e:	601a      	str	r2, [r3, #0]
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	e00a      	b.n	8008870 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800885a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885c:	2b00      	cmp	r3, #0
 800885e:	d007      	beq.n	8008870 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008860:	4b39      	ldr	r3, [pc, #228]	; (8008948 <xQueueGenericSend+0x1f8>)
 8008862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	f3bf 8f4f 	dsb	sy
 800886c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008870:	f001 ff00 	bl	800a674 <vPortExitCritical>
				return pdPASS;
 8008874:	2301      	movs	r3, #1
 8008876:	e063      	b.n	8008940 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d103      	bne.n	8008886 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800887e:	f001 fef9 	bl	800a674 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008882:	2300      	movs	r3, #0
 8008884:	e05c      	b.n	8008940 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008888:	2b00      	cmp	r3, #0
 800888a:	d106      	bne.n	800889a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800888c:	f107 0314 	add.w	r3, r7, #20
 8008890:	4618      	mov	r0, r3
 8008892:	f001 f809 	bl	80098a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008896:	2301      	movs	r3, #1
 8008898:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800889a:	f001 feeb 	bl	800a674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800889e:	f000 fd7b 	bl	8009398 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088a2:	f001 feb7 	bl	800a614 <vPortEnterCritical>
 80088a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088ac:	b25b      	sxtb	r3, r3
 80088ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088b2:	d103      	bne.n	80088bc <xQueueGenericSend+0x16c>
 80088b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088c2:	b25b      	sxtb	r3, r3
 80088c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088c8:	d103      	bne.n	80088d2 <xQueueGenericSend+0x182>
 80088ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088d2:	f001 fecf 	bl	800a674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088d6:	1d3a      	adds	r2, r7, #4
 80088d8:	f107 0314 	add.w	r3, r7, #20
 80088dc:	4611      	mov	r1, r2
 80088de:	4618      	mov	r0, r3
 80088e0:	f000 fff8 	bl	80098d4 <xTaskCheckForTimeOut>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d124      	bne.n	8008934 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088ec:	f000 faa2 	bl	8008e34 <prvIsQueueFull>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d018      	beq.n	8008928 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f8:	3310      	adds	r3, #16
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	4611      	mov	r1, r2
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 ff1e 	bl	8009740 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008904:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008906:	f000 fa2d 	bl	8008d64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800890a:	f000 fd53 	bl	80093b4 <xTaskResumeAll>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	f47f af7c 	bne.w	800880e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008916:	4b0c      	ldr	r3, [pc, #48]	; (8008948 <xQueueGenericSend+0x1f8>)
 8008918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800891c:	601a      	str	r2, [r3, #0]
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	e772      	b.n	800880e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800892a:	f000 fa1b 	bl	8008d64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800892e:	f000 fd41 	bl	80093b4 <xTaskResumeAll>
 8008932:	e76c      	b.n	800880e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008936:	f000 fa15 	bl	8008d64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800893a:	f000 fd3b 	bl	80093b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800893e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008940:	4618      	mov	r0, r3
 8008942:	3738      	adds	r7, #56	; 0x38
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	e000ed04 	.word	0xe000ed04

0800894c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b090      	sub	sp, #64	; 0x40
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
 8008958:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800895e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10a      	bne.n	800897a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008968:	f383 8811 	msr	BASEPRI, r3
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	f3bf 8f4f 	dsb	sy
 8008974:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008976:	bf00      	nop
 8008978:	e7fe      	b.n	8008978 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d103      	bne.n	8008988 <xQueueGenericSendFromISR+0x3c>
 8008980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008984:	2b00      	cmp	r3, #0
 8008986:	d101      	bne.n	800898c <xQueueGenericSendFromISR+0x40>
 8008988:	2301      	movs	r3, #1
 800898a:	e000      	b.n	800898e <xQueueGenericSendFromISR+0x42>
 800898c:	2300      	movs	r3, #0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10a      	bne.n	80089a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80089a4:	bf00      	nop
 80089a6:	e7fe      	b.n	80089a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d103      	bne.n	80089b6 <xQueueGenericSendFromISR+0x6a>
 80089ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d101      	bne.n	80089ba <xQueueGenericSendFromISR+0x6e>
 80089b6:	2301      	movs	r3, #1
 80089b8:	e000      	b.n	80089bc <xQueueGenericSendFromISR+0x70>
 80089ba:	2300      	movs	r3, #0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d10a      	bne.n	80089d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	623b      	str	r3, [r7, #32]
}
 80089d2:	bf00      	nop
 80089d4:	e7fe      	b.n	80089d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089d6:	f001 feff 	bl	800a7d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089da:	f3ef 8211 	mrs	r2, BASEPRI
 80089de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e2:	f383 8811 	msr	BASEPRI, r3
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	61fa      	str	r2, [r7, #28]
 80089f0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80089f2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089f4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d302      	bcc.n	8008a08 <xQueueGenericSendFromISR+0xbc>
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d12f      	bne.n	8008a68 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a16:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a18:	683a      	ldr	r2, [r7, #0]
 8008a1a:	68b9      	ldr	r1, [r7, #8]
 8008a1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a1e:	f000 f911 	bl	8008c44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a22:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a2a:	d112      	bne.n	8008a52 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d016      	beq.n	8008a62 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a36:	3324      	adds	r3, #36	; 0x24
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f000 fed1 	bl	80097e0 <xTaskRemoveFromEventList>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00e      	beq.n	8008a62 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00b      	beq.n	8008a62 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	601a      	str	r2, [r3, #0]
 8008a50:	e007      	b.n	8008a62 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008a56:	3301      	adds	r3, #1
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	b25a      	sxtb	r2, r3
 8008a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008a62:	2301      	movs	r3, #1
 8008a64:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008a66:	e001      	b.n	8008a6c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a6e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a76:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3740      	adds	r7, #64	; 0x40
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
	...

08008a84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b08c      	sub	sp, #48	; 0x30
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a90:	2300      	movs	r3, #0
 8008a92:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10a      	bne.n	8008ab4 <xQueueReceive+0x30>
	__asm volatile
 8008a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa2:	f383 8811 	msr	BASEPRI, r3
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	f3bf 8f4f 	dsb	sy
 8008aae:	623b      	str	r3, [r7, #32]
}
 8008ab0:	bf00      	nop
 8008ab2:	e7fe      	b.n	8008ab2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d103      	bne.n	8008ac2 <xQueueReceive+0x3e>
 8008aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d101      	bne.n	8008ac6 <xQueueReceive+0x42>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e000      	b.n	8008ac8 <xQueueReceive+0x44>
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10a      	bne.n	8008ae2 <xQueueReceive+0x5e>
	__asm volatile
 8008acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad0:	f383 8811 	msr	BASEPRI, r3
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	61fb      	str	r3, [r7, #28]
}
 8008ade:	bf00      	nop
 8008ae0:	e7fe      	b.n	8008ae0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ae2:	f001 f83b 	bl	8009b5c <xTaskGetSchedulerState>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d102      	bne.n	8008af2 <xQueueReceive+0x6e>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d101      	bne.n	8008af6 <xQueueReceive+0x72>
 8008af2:	2301      	movs	r3, #1
 8008af4:	e000      	b.n	8008af8 <xQueueReceive+0x74>
 8008af6:	2300      	movs	r3, #0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d10a      	bne.n	8008b12 <xQueueReceive+0x8e>
	__asm volatile
 8008afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b00:	f383 8811 	msr	BASEPRI, r3
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	61bb      	str	r3, [r7, #24]
}
 8008b0e:	bf00      	nop
 8008b10:	e7fe      	b.n	8008b10 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b12:	f001 fd7f 	bl	800a614 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d01f      	beq.n	8008b62 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b22:	68b9      	ldr	r1, [r7, #8]
 8008b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b26:	f000 f8f7 	bl	8008d18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	1e5a      	subs	r2, r3, #1
 8008b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00f      	beq.n	8008b5a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3c:	3310      	adds	r3, #16
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 fe4e 	bl	80097e0 <xTaskRemoveFromEventList>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d007      	beq.n	8008b5a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b4a:	4b3d      	ldr	r3, [pc, #244]	; (8008c40 <xQueueReceive+0x1bc>)
 8008b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b50:	601a      	str	r2, [r3, #0]
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b5a:	f001 fd8b 	bl	800a674 <vPortExitCritical>
				return pdPASS;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e069      	b.n	8008c36 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d103      	bne.n	8008b70 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b68:	f001 fd84 	bl	800a674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	e062      	b.n	8008c36 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d106      	bne.n	8008b84 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b76:	f107 0310 	add.w	r3, r7, #16
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 fe94 	bl	80098a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b80:	2301      	movs	r3, #1
 8008b82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b84:	f001 fd76 	bl	800a674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b88:	f000 fc06 	bl	8009398 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b8c:	f001 fd42 	bl	800a614 <vPortEnterCritical>
 8008b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b96:	b25b      	sxtb	r3, r3
 8008b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b9c:	d103      	bne.n	8008ba6 <xQueueReceive+0x122>
 8008b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bac:	b25b      	sxtb	r3, r3
 8008bae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bb2:	d103      	bne.n	8008bbc <xQueueReceive+0x138>
 8008bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bbc:	f001 fd5a 	bl	800a674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bc0:	1d3a      	adds	r2, r7, #4
 8008bc2:	f107 0310 	add.w	r3, r7, #16
 8008bc6:	4611      	mov	r1, r2
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f000 fe83 	bl	80098d4 <xTaskCheckForTimeOut>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d123      	bne.n	8008c1c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bd6:	f000 f917 	bl	8008e08 <prvIsQueueEmpty>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d017      	beq.n	8008c10 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be2:	3324      	adds	r3, #36	; 0x24
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	4611      	mov	r1, r2
 8008be8:	4618      	mov	r0, r3
 8008bea:	f000 fda9 	bl	8009740 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bf0:	f000 f8b8 	bl	8008d64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bf4:	f000 fbde 	bl	80093b4 <xTaskResumeAll>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d189      	bne.n	8008b12 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008bfe:	4b10      	ldr	r3, [pc, #64]	; (8008c40 <xQueueReceive+0x1bc>)
 8008c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c04:	601a      	str	r2, [r3, #0]
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	e780      	b.n	8008b12 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c12:	f000 f8a7 	bl	8008d64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c16:	f000 fbcd 	bl	80093b4 <xTaskResumeAll>
 8008c1a:	e77a      	b.n	8008b12 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c1e:	f000 f8a1 	bl	8008d64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c22:	f000 fbc7 	bl	80093b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c28:	f000 f8ee 	bl	8008e08 <prvIsQueueEmpty>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f43f af6f 	beq.w	8008b12 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3730      	adds	r7, #48	; 0x30
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	e000ed04 	.word	0xe000ed04

08008c44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008c50:	2300      	movs	r3, #0
 8008c52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10d      	bne.n	8008c7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d14d      	bne.n	8008d06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 ff92 	bl	8009b98 <xTaskPriorityDisinherit>
 8008c74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	609a      	str	r2, [r3, #8]
 8008c7c:	e043      	b.n	8008d06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d119      	bne.n	8008cb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6858      	ldr	r0, [r3, #4]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	68b9      	ldr	r1, [r7, #8]
 8008c90:	f002 fa28 	bl	800b0e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	685a      	ldr	r2, [r3, #4]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9c:	441a      	add	r2, r3
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	685a      	ldr	r2, [r3, #4]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d32b      	bcc.n	8008d06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	605a      	str	r2, [r3, #4]
 8008cb6:	e026      	b.n	8008d06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	68d8      	ldr	r0, [r3, #12]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	68b9      	ldr	r1, [r7, #8]
 8008cc4:	f002 fa0e 	bl	800b0e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	68da      	ldr	r2, [r3, #12]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd0:	425b      	negs	r3, r3
 8008cd2:	441a      	add	r2, r3
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	68da      	ldr	r2, [r3, #12]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d207      	bcs.n	8008cf4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	689a      	ldr	r2, [r3, #8]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cec:	425b      	negs	r3, r3
 8008cee:	441a      	add	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d105      	bne.n	8008d06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	3b01      	subs	r3, #1
 8008d04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	1c5a      	adds	r2, r3, #1
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008d0e:	697b      	ldr	r3, [r7, #20]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3718      	adds	r7, #24
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d018      	beq.n	8008d5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68da      	ldr	r2, [r3, #12]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d32:	441a      	add	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	68da      	ldr	r2, [r3, #12]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d303      	bcc.n	8008d4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	68d9      	ldr	r1, [r3, #12]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d54:	461a      	mov	r2, r3
 8008d56:	6838      	ldr	r0, [r7, #0]
 8008d58:	f002 f9c4 	bl	800b0e4 <memcpy>
	}
}
 8008d5c:	bf00      	nop
 8008d5e:	3708      	adds	r7, #8
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d6c:	f001 fc52 	bl	800a614 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d78:	e011      	b.n	8008d9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d012      	beq.n	8008da8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	3324      	adds	r3, #36	; 0x24
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 fd2a 	bl	80097e0 <xTaskRemoveFromEventList>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d001      	beq.n	8008d96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d92:	f000 fe01 	bl	8009998 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008d96:	7bfb      	ldrb	r3, [r7, #15]
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	dce9      	bgt.n	8008d7a <prvUnlockQueue+0x16>
 8008da6:	e000      	b.n	8008daa <prvUnlockQueue+0x46>
					break;
 8008da8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	22ff      	movs	r2, #255	; 0xff
 8008dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008db2:	f001 fc5f 	bl	800a674 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008db6:	f001 fc2d 	bl	800a614 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dc0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008dc2:	e011      	b.n	8008de8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d012      	beq.n	8008df2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	3310      	adds	r3, #16
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f000 fd05 	bl	80097e0 <xTaskRemoveFromEventList>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d001      	beq.n	8008de0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008ddc:	f000 fddc 	bl	8009998 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008de0:	7bbb      	ldrb	r3, [r7, #14]
 8008de2:	3b01      	subs	r3, #1
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008de8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	dce9      	bgt.n	8008dc4 <prvUnlockQueue+0x60>
 8008df0:	e000      	b.n	8008df4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008df2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	22ff      	movs	r2, #255	; 0xff
 8008df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008dfc:	f001 fc3a 	bl	800a674 <vPortExitCritical>
}
 8008e00:	bf00      	nop
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e10:	f001 fc00 	bl	800a614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d102      	bne.n	8008e22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	60fb      	str	r3, [r7, #12]
 8008e20:	e001      	b.n	8008e26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e22:	2300      	movs	r3, #0
 8008e24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e26:	f001 fc25 	bl	800a674 <vPortExitCritical>

	return xReturn;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e3c:	f001 fbea 	bl	800a614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d102      	bne.n	8008e52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	60fb      	str	r3, [r7, #12]
 8008e50:	e001      	b.n	8008e56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008e52:	2300      	movs	r3, #0
 8008e54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e56:	f001 fc0d 	bl	800a674 <vPortExitCritical>

	return xReturn;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3710      	adds	r7, #16
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60fb      	str	r3, [r7, #12]
 8008e72:	e014      	b.n	8008e9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008e74:	4a0f      	ldr	r2, [pc, #60]	; (8008eb4 <vQueueAddToRegistry+0x50>)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10b      	bne.n	8008e98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008e80:	490c      	ldr	r1, [pc, #48]	; (8008eb4 <vQueueAddToRegistry+0x50>)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	683a      	ldr	r2, [r7, #0]
 8008e86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008e8a:	4a0a      	ldr	r2, [pc, #40]	; (8008eb4 <vQueueAddToRegistry+0x50>)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	00db      	lsls	r3, r3, #3
 8008e90:	4413      	add	r3, r2
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008e96:	e006      	b.n	8008ea6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	60fb      	str	r3, [r7, #12]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2b07      	cmp	r3, #7
 8008ea2:	d9e7      	bls.n	8008e74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ea4:	bf00      	nop
 8008ea6:	bf00      	nop
 8008ea8:	3714      	adds	r7, #20
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	20004d04 	.word	0x20004d04

08008eb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008ec8:	f001 fba4 	bl	800a614 <vPortEnterCritical>
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ed2:	b25b      	sxtb	r3, r3
 8008ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ed8:	d103      	bne.n	8008ee2 <vQueueWaitForMessageRestricted+0x2a>
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ee8:	b25b      	sxtb	r3, r3
 8008eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008eee:	d103      	bne.n	8008ef8 <vQueueWaitForMessageRestricted+0x40>
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ef8:	f001 fbbc 	bl	800a674 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d106      	bne.n	8008f12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	3324      	adds	r3, #36	; 0x24
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	68b9      	ldr	r1, [r7, #8]
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f000 fc3b 	bl	8009788 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008f12:	6978      	ldr	r0, [r7, #20]
 8008f14:	f7ff ff26 	bl	8008d64 <prvUnlockQueue>
	}
 8008f18:	bf00      	nop
 8008f1a:	3718      	adds	r7, #24
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b08e      	sub	sp, #56	; 0x38
 8008f24:	af04      	add	r7, sp, #16
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
 8008f2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d10a      	bne.n	8008f4a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	623b      	str	r3, [r7, #32]
}
 8008f46:	bf00      	nop
 8008f48:	e7fe      	b.n	8008f48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10a      	bne.n	8008f66 <xTaskCreateStatic+0x46>
	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	61fb      	str	r3, [r7, #28]
}
 8008f62:	bf00      	nop
 8008f64:	e7fe      	b.n	8008f64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f66:	235c      	movs	r3, #92	; 0x5c
 8008f68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	2b5c      	cmp	r3, #92	; 0x5c
 8008f6e:	d00a      	beq.n	8008f86 <xTaskCreateStatic+0x66>
	__asm volatile
 8008f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	61bb      	str	r3, [r7, #24]
}
 8008f82:	bf00      	nop
 8008f84:	e7fe      	b.n	8008f84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008f86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d01e      	beq.n	8008fcc <xTaskCreateStatic+0xac>
 8008f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d01b      	beq.n	8008fcc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	9303      	str	r3, [sp, #12]
 8008faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fac:	9302      	str	r3, [sp, #8]
 8008fae:	f107 0314 	add.w	r3, r7, #20
 8008fb2:	9301      	str	r3, [sp, #4]
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	68b9      	ldr	r1, [r7, #8]
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f000 f850 	bl	8009064 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fc6:	f000 f8dd 	bl	8009184 <prvAddNewTaskToReadyList>
 8008fca:	e001      	b.n	8008fd0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008fd0:	697b      	ldr	r3, [r7, #20]
	}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3728      	adds	r7, #40	; 0x28
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b08c      	sub	sp, #48	; 0x30
 8008fde:	af04      	add	r7, sp, #16
 8008fe0:	60f8      	str	r0, [r7, #12]
 8008fe2:	60b9      	str	r1, [r7, #8]
 8008fe4:	603b      	str	r3, [r7, #0]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008fea:	88fb      	ldrh	r3, [r7, #6]
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f001 fc32 	bl	800a858 <pvPortMalloc>
 8008ff4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00e      	beq.n	800901a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008ffc:	205c      	movs	r0, #92	; 0x5c
 8008ffe:	f001 fc2b 	bl	800a858 <pvPortMalloc>
 8009002:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d003      	beq.n	8009012 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	697a      	ldr	r2, [r7, #20]
 800900e:	631a      	str	r2, [r3, #48]	; 0x30
 8009010:	e005      	b.n	800901e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009012:	6978      	ldr	r0, [r7, #20]
 8009014:	f001 fcec 	bl	800a9f0 <vPortFree>
 8009018:	e001      	b.n	800901e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800901a:	2300      	movs	r3, #0
 800901c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d017      	beq.n	8009054 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800902c:	88fa      	ldrh	r2, [r7, #6]
 800902e:	2300      	movs	r3, #0
 8009030:	9303      	str	r3, [sp, #12]
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	9302      	str	r3, [sp, #8]
 8009036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009038:	9301      	str	r3, [sp, #4]
 800903a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	68b9      	ldr	r1, [r7, #8]
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f000 f80e 	bl	8009064 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009048:	69f8      	ldr	r0, [r7, #28]
 800904a:	f000 f89b 	bl	8009184 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800904e:	2301      	movs	r3, #1
 8009050:	61bb      	str	r3, [r7, #24]
 8009052:	e002      	b.n	800905a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009058:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800905a:	69bb      	ldr	r3, [r7, #24]
	}
 800905c:	4618      	mov	r0, r3
 800905e:	3720      	adds	r7, #32
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b088      	sub	sp, #32
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	607a      	str	r2, [r7, #4]
 8009070:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009074:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	461a      	mov	r2, r3
 800907c:	21a5      	movs	r1, #165	; 0xa5
 800907e:	f002 f83f 	bl	800b100 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800908c:	3b01      	subs	r3, #1
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4413      	add	r3, r2
 8009092:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	f023 0307 	bic.w	r3, r3, #7
 800909a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	f003 0307 	and.w	r3, r3, #7
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00a      	beq.n	80090bc <prvInitialiseNewTask+0x58>
	__asm volatile
 80090a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090aa:	f383 8811 	msr	BASEPRI, r3
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	f3bf 8f4f 	dsb	sy
 80090b6:	617b      	str	r3, [r7, #20]
}
 80090b8:	bf00      	nop
 80090ba:	e7fe      	b.n	80090ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d01f      	beq.n	8009102 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090c2:	2300      	movs	r3, #0
 80090c4:	61fb      	str	r3, [r7, #28]
 80090c6:	e012      	b.n	80090ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80090c8:	68ba      	ldr	r2, [r7, #8]
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	4413      	add	r3, r2
 80090ce:	7819      	ldrb	r1, [r3, #0]
 80090d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	4413      	add	r3, r2
 80090d6:	3334      	adds	r3, #52	; 0x34
 80090d8:	460a      	mov	r2, r1
 80090da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	4413      	add	r3, r2
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d006      	beq.n	80090f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	3301      	adds	r3, #1
 80090ec:	61fb      	str	r3, [r7, #28]
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	2b0f      	cmp	r3, #15
 80090f2:	d9e9      	bls.n	80090c8 <prvInitialiseNewTask+0x64>
 80090f4:	e000      	b.n	80090f8 <prvInitialiseNewTask+0x94>
			{
				break;
 80090f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80090f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009100:	e003      	b.n	800910a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009104:	2200      	movs	r2, #0
 8009106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800910a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910c:	2b37      	cmp	r3, #55	; 0x37
 800910e:	d901      	bls.n	8009114 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009110:	2337      	movs	r3, #55	; 0x37
 8009112:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009118:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800911a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800911e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009122:	2200      	movs	r2, #0
 8009124:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	3304      	adds	r3, #4
 800912a:	4618      	mov	r0, r3
 800912c:	f7ff f978 	bl	8008420 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009132:	3318      	adds	r3, #24
 8009134:	4618      	mov	r0, r3
 8009136:	f7ff f973 	bl	8008420 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800913a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800913e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009142:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009148:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800914e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009152:	2200      	movs	r2, #0
 8009154:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009158:	2200      	movs	r2, #0
 800915a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	68f9      	ldr	r1, [r7, #12]
 8009162:	69b8      	ldr	r0, [r7, #24]
 8009164:	f001 f928 	bl	800a3b8 <pxPortInitialiseStack>
 8009168:	4602      	mov	r2, r0
 800916a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800916e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009170:	2b00      	cmp	r3, #0
 8009172:	d002      	beq.n	800917a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009178:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800917a:	bf00      	nop
 800917c:	3720      	adds	r7, #32
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
	...

08009184 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800918c:	f001 fa42 	bl	800a614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009190:	4b2d      	ldr	r3, [pc, #180]	; (8009248 <prvAddNewTaskToReadyList+0xc4>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	3301      	adds	r3, #1
 8009196:	4a2c      	ldr	r2, [pc, #176]	; (8009248 <prvAddNewTaskToReadyList+0xc4>)
 8009198:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800919a:	4b2c      	ldr	r3, [pc, #176]	; (800924c <prvAddNewTaskToReadyList+0xc8>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d109      	bne.n	80091b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80091a2:	4a2a      	ldr	r2, [pc, #168]	; (800924c <prvAddNewTaskToReadyList+0xc8>)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80091a8:	4b27      	ldr	r3, [pc, #156]	; (8009248 <prvAddNewTaskToReadyList+0xc4>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d110      	bne.n	80091d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80091b0:	f000 fc16 	bl	80099e0 <prvInitialiseTaskLists>
 80091b4:	e00d      	b.n	80091d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80091b6:	4b26      	ldr	r3, [pc, #152]	; (8009250 <prvAddNewTaskToReadyList+0xcc>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d109      	bne.n	80091d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80091be:	4b23      	ldr	r3, [pc, #140]	; (800924c <prvAddNewTaskToReadyList+0xc8>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d802      	bhi.n	80091d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80091cc:	4a1f      	ldr	r2, [pc, #124]	; (800924c <prvAddNewTaskToReadyList+0xc8>)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80091d2:	4b20      	ldr	r3, [pc, #128]	; (8009254 <prvAddNewTaskToReadyList+0xd0>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	3301      	adds	r3, #1
 80091d8:	4a1e      	ldr	r2, [pc, #120]	; (8009254 <prvAddNewTaskToReadyList+0xd0>)
 80091da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80091dc:	4b1d      	ldr	r3, [pc, #116]	; (8009254 <prvAddNewTaskToReadyList+0xd0>)
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e8:	4b1b      	ldr	r3, [pc, #108]	; (8009258 <prvAddNewTaskToReadyList+0xd4>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d903      	bls.n	80091f8 <prvAddNewTaskToReadyList+0x74>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f4:	4a18      	ldr	r2, [pc, #96]	; (8009258 <prvAddNewTaskToReadyList+0xd4>)
 80091f6:	6013      	str	r3, [r2, #0]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091fc:	4613      	mov	r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4413      	add	r3, r2
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	4a15      	ldr	r2, [pc, #84]	; (800925c <prvAddNewTaskToReadyList+0xd8>)
 8009206:	441a      	add	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	3304      	adds	r3, #4
 800920c:	4619      	mov	r1, r3
 800920e:	4610      	mov	r0, r2
 8009210:	f7ff f913 	bl	800843a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009214:	f001 fa2e 	bl	800a674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009218:	4b0d      	ldr	r3, [pc, #52]	; (8009250 <prvAddNewTaskToReadyList+0xcc>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00e      	beq.n	800923e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009220:	4b0a      	ldr	r3, [pc, #40]	; (800924c <prvAddNewTaskToReadyList+0xc8>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922a:	429a      	cmp	r2, r3
 800922c:	d207      	bcs.n	800923e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800922e:	4b0c      	ldr	r3, [pc, #48]	; (8009260 <prvAddNewTaskToReadyList+0xdc>)
 8009230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009234:	601a      	str	r2, [r3, #0]
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800923e:	bf00      	nop
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	20000c7c 	.word	0x20000c7c
 800924c:	200007a8 	.word	0x200007a8
 8009250:	20000c88 	.word	0x20000c88
 8009254:	20000c98 	.word	0x20000c98
 8009258:	20000c84 	.word	0x20000c84
 800925c:	200007ac 	.word	0x200007ac
 8009260:	e000ed04 	.word	0xe000ed04

08009264 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800926c:	2300      	movs	r3, #0
 800926e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d017      	beq.n	80092a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009276:	4b13      	ldr	r3, [pc, #76]	; (80092c4 <vTaskDelay+0x60>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00a      	beq.n	8009294 <vTaskDelay+0x30>
	__asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	60bb      	str	r3, [r7, #8]
}
 8009290:	bf00      	nop
 8009292:	e7fe      	b.n	8009292 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009294:	f000 f880 	bl	8009398 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009298:	2100      	movs	r1, #0
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fcea 	bl	8009c74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80092a0:	f000 f888 	bl	80093b4 <xTaskResumeAll>
 80092a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d107      	bne.n	80092bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80092ac:	4b06      	ldr	r3, [pc, #24]	; (80092c8 <vTaskDelay+0x64>)
 80092ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092b2:	601a      	str	r2, [r3, #0]
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80092bc:	bf00      	nop
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	20000ca4 	.word	0x20000ca4
 80092c8:	e000ed04 	.word	0xe000ed04

080092cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b08a      	sub	sp, #40	; 0x28
 80092d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80092d2:	2300      	movs	r3, #0
 80092d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80092d6:	2300      	movs	r3, #0
 80092d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80092da:	463a      	mov	r2, r7
 80092dc:	1d39      	adds	r1, r7, #4
 80092de:	f107 0308 	add.w	r3, r7, #8
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7ff f848 	bl	8008378 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80092e8:	6839      	ldr	r1, [r7, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	9202      	str	r2, [sp, #8]
 80092f0:	9301      	str	r3, [sp, #4]
 80092f2:	2300      	movs	r3, #0
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	2300      	movs	r3, #0
 80092f8:	460a      	mov	r2, r1
 80092fa:	4921      	ldr	r1, [pc, #132]	; (8009380 <vTaskStartScheduler+0xb4>)
 80092fc:	4821      	ldr	r0, [pc, #132]	; (8009384 <vTaskStartScheduler+0xb8>)
 80092fe:	f7ff fe0f 	bl	8008f20 <xTaskCreateStatic>
 8009302:	4603      	mov	r3, r0
 8009304:	4a20      	ldr	r2, [pc, #128]	; (8009388 <vTaskStartScheduler+0xbc>)
 8009306:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009308:	4b1f      	ldr	r3, [pc, #124]	; (8009388 <vTaskStartScheduler+0xbc>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d002      	beq.n	8009316 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009310:	2301      	movs	r3, #1
 8009312:	617b      	str	r3, [r7, #20]
 8009314:	e001      	b.n	800931a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009316:	2300      	movs	r3, #0
 8009318:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d102      	bne.n	8009326 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009320:	f000 fcfc 	bl	8009d1c <xTimerCreateTimerTask>
 8009324:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	2b01      	cmp	r3, #1
 800932a:	d116      	bne.n	800935a <vTaskStartScheduler+0x8e>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	613b      	str	r3, [r7, #16]
}
 800933e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009340:	4b12      	ldr	r3, [pc, #72]	; (800938c <vTaskStartScheduler+0xc0>)
 8009342:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009346:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009348:	4b11      	ldr	r3, [pc, #68]	; (8009390 <vTaskStartScheduler+0xc4>)
 800934a:	2201      	movs	r2, #1
 800934c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800934e:	4b11      	ldr	r3, [pc, #68]	; (8009394 <vTaskStartScheduler+0xc8>)
 8009350:	2200      	movs	r2, #0
 8009352:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009354:	f001 f8bc 	bl	800a4d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009358:	e00e      	b.n	8009378 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009360:	d10a      	bne.n	8009378 <vTaskStartScheduler+0xac>
	__asm volatile
 8009362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009366:	f383 8811 	msr	BASEPRI, r3
 800936a:	f3bf 8f6f 	isb	sy
 800936e:	f3bf 8f4f 	dsb	sy
 8009372:	60fb      	str	r3, [r7, #12]
}
 8009374:	bf00      	nop
 8009376:	e7fe      	b.n	8009376 <vTaskStartScheduler+0xaa>
}
 8009378:	bf00      	nop
 800937a:	3718      	adds	r7, #24
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	0800c964 	.word	0x0800c964
 8009384:	080099b1 	.word	0x080099b1
 8009388:	20000ca0 	.word	0x20000ca0
 800938c:	20000c9c 	.word	0x20000c9c
 8009390:	20000c88 	.word	0x20000c88
 8009394:	20000c80 	.word	0x20000c80

08009398 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009398:	b480      	push	{r7}
 800939a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800939c:	4b04      	ldr	r3, [pc, #16]	; (80093b0 <vTaskSuspendAll+0x18>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	3301      	adds	r3, #1
 80093a2:	4a03      	ldr	r2, [pc, #12]	; (80093b0 <vTaskSuspendAll+0x18>)
 80093a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80093a6:	bf00      	nop
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr
 80093b0:	20000ca4 	.word	0x20000ca4

080093b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80093ba:	2300      	movs	r3, #0
 80093bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80093be:	2300      	movs	r3, #0
 80093c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80093c2:	4b42      	ldr	r3, [pc, #264]	; (80094cc <xTaskResumeAll+0x118>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10a      	bne.n	80093e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80093ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ce:	f383 8811 	msr	BASEPRI, r3
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	f3bf 8f4f 	dsb	sy
 80093da:	603b      	str	r3, [r7, #0]
}
 80093dc:	bf00      	nop
 80093de:	e7fe      	b.n	80093de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80093e0:	f001 f918 	bl	800a614 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80093e4:	4b39      	ldr	r3, [pc, #228]	; (80094cc <xTaskResumeAll+0x118>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3b01      	subs	r3, #1
 80093ea:	4a38      	ldr	r2, [pc, #224]	; (80094cc <xTaskResumeAll+0x118>)
 80093ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093ee:	4b37      	ldr	r3, [pc, #220]	; (80094cc <xTaskResumeAll+0x118>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d162      	bne.n	80094bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80093f6:	4b36      	ldr	r3, [pc, #216]	; (80094d0 <xTaskResumeAll+0x11c>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d05e      	beq.n	80094bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093fe:	e02f      	b.n	8009460 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009400:	4b34      	ldr	r3, [pc, #208]	; (80094d4 <xTaskResumeAll+0x120>)
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	3318      	adds	r3, #24
 800940c:	4618      	mov	r0, r3
 800940e:	f7ff f871 	bl	80084f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	3304      	adds	r3, #4
 8009416:	4618      	mov	r0, r3
 8009418:	f7ff f86c 	bl	80084f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009420:	4b2d      	ldr	r3, [pc, #180]	; (80094d8 <xTaskResumeAll+0x124>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	429a      	cmp	r2, r3
 8009426:	d903      	bls.n	8009430 <xTaskResumeAll+0x7c>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942c:	4a2a      	ldr	r2, [pc, #168]	; (80094d8 <xTaskResumeAll+0x124>)
 800942e:	6013      	str	r3, [r2, #0]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009434:	4613      	mov	r3, r2
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	4413      	add	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4a27      	ldr	r2, [pc, #156]	; (80094dc <xTaskResumeAll+0x128>)
 800943e:	441a      	add	r2, r3
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	3304      	adds	r3, #4
 8009444:	4619      	mov	r1, r3
 8009446:	4610      	mov	r0, r2
 8009448:	f7fe fff7 	bl	800843a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009450:	4b23      	ldr	r3, [pc, #140]	; (80094e0 <xTaskResumeAll+0x12c>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009456:	429a      	cmp	r2, r3
 8009458:	d302      	bcc.n	8009460 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800945a:	4b22      	ldr	r3, [pc, #136]	; (80094e4 <xTaskResumeAll+0x130>)
 800945c:	2201      	movs	r2, #1
 800945e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009460:	4b1c      	ldr	r3, [pc, #112]	; (80094d4 <xTaskResumeAll+0x120>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1cb      	bne.n	8009400 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d001      	beq.n	8009472 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800946e:	f000 fb55 	bl	8009b1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009472:	4b1d      	ldr	r3, [pc, #116]	; (80094e8 <xTaskResumeAll+0x134>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d010      	beq.n	80094a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800947e:	f000 f847 	bl	8009510 <xTaskIncrementTick>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d002      	beq.n	800948e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009488:	4b16      	ldr	r3, [pc, #88]	; (80094e4 <xTaskResumeAll+0x130>)
 800948a:	2201      	movs	r2, #1
 800948c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	3b01      	subs	r3, #1
 8009492:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1f1      	bne.n	800947e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800949a:	4b13      	ldr	r3, [pc, #76]	; (80094e8 <xTaskResumeAll+0x134>)
 800949c:	2200      	movs	r2, #0
 800949e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80094a0:	4b10      	ldr	r3, [pc, #64]	; (80094e4 <xTaskResumeAll+0x130>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d009      	beq.n	80094bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80094a8:	2301      	movs	r3, #1
 80094aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80094ac:	4b0f      	ldr	r3, [pc, #60]	; (80094ec <xTaskResumeAll+0x138>)
 80094ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094b2:	601a      	str	r2, [r3, #0]
 80094b4:	f3bf 8f4f 	dsb	sy
 80094b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094bc:	f001 f8da 	bl	800a674 <vPortExitCritical>

	return xAlreadyYielded;
 80094c0:	68bb      	ldr	r3, [r7, #8]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	20000ca4 	.word	0x20000ca4
 80094d0:	20000c7c 	.word	0x20000c7c
 80094d4:	20000c3c 	.word	0x20000c3c
 80094d8:	20000c84 	.word	0x20000c84
 80094dc:	200007ac 	.word	0x200007ac
 80094e0:	200007a8 	.word	0x200007a8
 80094e4:	20000c90 	.word	0x20000c90
 80094e8:	20000c8c 	.word	0x20000c8c
 80094ec:	e000ed04 	.word	0xe000ed04

080094f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80094f6:	4b05      	ldr	r3, [pc, #20]	; (800950c <xTaskGetTickCount+0x1c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80094fc:	687b      	ldr	r3, [r7, #4]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	20000c80 	.word	0x20000c80

08009510 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b086      	sub	sp, #24
 8009514:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009516:	2300      	movs	r3, #0
 8009518:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800951a:	4b4f      	ldr	r3, [pc, #316]	; (8009658 <xTaskIncrementTick+0x148>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	f040 808f 	bne.w	8009642 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009524:	4b4d      	ldr	r3, [pc, #308]	; (800965c <xTaskIncrementTick+0x14c>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	3301      	adds	r3, #1
 800952a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800952c:	4a4b      	ldr	r2, [pc, #300]	; (800965c <xTaskIncrementTick+0x14c>)
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d120      	bne.n	800957a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009538:	4b49      	ldr	r3, [pc, #292]	; (8009660 <xTaskIncrementTick+0x150>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00a      	beq.n	8009558 <xTaskIncrementTick+0x48>
	__asm volatile
 8009542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009546:	f383 8811 	msr	BASEPRI, r3
 800954a:	f3bf 8f6f 	isb	sy
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	603b      	str	r3, [r7, #0]
}
 8009554:	bf00      	nop
 8009556:	e7fe      	b.n	8009556 <xTaskIncrementTick+0x46>
 8009558:	4b41      	ldr	r3, [pc, #260]	; (8009660 <xTaskIncrementTick+0x150>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	60fb      	str	r3, [r7, #12]
 800955e:	4b41      	ldr	r3, [pc, #260]	; (8009664 <xTaskIncrementTick+0x154>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a3f      	ldr	r2, [pc, #252]	; (8009660 <xTaskIncrementTick+0x150>)
 8009564:	6013      	str	r3, [r2, #0]
 8009566:	4a3f      	ldr	r2, [pc, #252]	; (8009664 <xTaskIncrementTick+0x154>)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6013      	str	r3, [r2, #0]
 800956c:	4b3e      	ldr	r3, [pc, #248]	; (8009668 <xTaskIncrementTick+0x158>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	3301      	adds	r3, #1
 8009572:	4a3d      	ldr	r2, [pc, #244]	; (8009668 <xTaskIncrementTick+0x158>)
 8009574:	6013      	str	r3, [r2, #0]
 8009576:	f000 fad1 	bl	8009b1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800957a:	4b3c      	ldr	r3, [pc, #240]	; (800966c <xTaskIncrementTick+0x15c>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	693a      	ldr	r2, [r7, #16]
 8009580:	429a      	cmp	r2, r3
 8009582:	d349      	bcc.n	8009618 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009584:	4b36      	ldr	r3, [pc, #216]	; (8009660 <xTaskIncrementTick+0x150>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d104      	bne.n	8009598 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800958e:	4b37      	ldr	r3, [pc, #220]	; (800966c <xTaskIncrementTick+0x15c>)
 8009590:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009594:	601a      	str	r2, [r3, #0]
					break;
 8009596:	e03f      	b.n	8009618 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009598:	4b31      	ldr	r3, [pc, #196]	; (8009660 <xTaskIncrementTick+0x150>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80095a8:	693a      	ldr	r2, [r7, #16]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d203      	bcs.n	80095b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80095b0:	4a2e      	ldr	r2, [pc, #184]	; (800966c <xTaskIncrementTick+0x15c>)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80095b6:	e02f      	b.n	8009618 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	3304      	adds	r3, #4
 80095bc:	4618      	mov	r0, r3
 80095be:	f7fe ff99 	bl	80084f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d004      	beq.n	80095d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	3318      	adds	r3, #24
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fe ff90 	bl	80084f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095d8:	4b25      	ldr	r3, [pc, #148]	; (8009670 <xTaskIncrementTick+0x160>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d903      	bls.n	80095e8 <xTaskIncrementTick+0xd8>
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e4:	4a22      	ldr	r2, [pc, #136]	; (8009670 <xTaskIncrementTick+0x160>)
 80095e6:	6013      	str	r3, [r2, #0]
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ec:	4613      	mov	r3, r2
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	4413      	add	r3, r2
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	4a1f      	ldr	r2, [pc, #124]	; (8009674 <xTaskIncrementTick+0x164>)
 80095f6:	441a      	add	r2, r3
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	3304      	adds	r3, #4
 80095fc:	4619      	mov	r1, r3
 80095fe:	4610      	mov	r0, r2
 8009600:	f7fe ff1b 	bl	800843a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009608:	4b1b      	ldr	r3, [pc, #108]	; (8009678 <xTaskIncrementTick+0x168>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960e:	429a      	cmp	r2, r3
 8009610:	d3b8      	bcc.n	8009584 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009612:	2301      	movs	r3, #1
 8009614:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009616:	e7b5      	b.n	8009584 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009618:	4b17      	ldr	r3, [pc, #92]	; (8009678 <xTaskIncrementTick+0x168>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800961e:	4915      	ldr	r1, [pc, #84]	; (8009674 <xTaskIncrementTick+0x164>)
 8009620:	4613      	mov	r3, r2
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4413      	add	r3, r2
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	440b      	add	r3, r1
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d901      	bls.n	8009634 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009630:	2301      	movs	r3, #1
 8009632:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009634:	4b11      	ldr	r3, [pc, #68]	; (800967c <xTaskIncrementTick+0x16c>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d007      	beq.n	800964c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800963c:	2301      	movs	r3, #1
 800963e:	617b      	str	r3, [r7, #20]
 8009640:	e004      	b.n	800964c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009642:	4b0f      	ldr	r3, [pc, #60]	; (8009680 <xTaskIncrementTick+0x170>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	3301      	adds	r3, #1
 8009648:	4a0d      	ldr	r2, [pc, #52]	; (8009680 <xTaskIncrementTick+0x170>)
 800964a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800964c:	697b      	ldr	r3, [r7, #20]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3718      	adds	r7, #24
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	20000ca4 	.word	0x20000ca4
 800965c:	20000c80 	.word	0x20000c80
 8009660:	20000c34 	.word	0x20000c34
 8009664:	20000c38 	.word	0x20000c38
 8009668:	20000c94 	.word	0x20000c94
 800966c:	20000c9c 	.word	0x20000c9c
 8009670:	20000c84 	.word	0x20000c84
 8009674:	200007ac 	.word	0x200007ac
 8009678:	200007a8 	.word	0x200007a8
 800967c:	20000c90 	.word	0x20000c90
 8009680:	20000c8c 	.word	0x20000c8c

08009684 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800968a:	4b28      	ldr	r3, [pc, #160]	; (800972c <vTaskSwitchContext+0xa8>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d003      	beq.n	800969a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009692:	4b27      	ldr	r3, [pc, #156]	; (8009730 <vTaskSwitchContext+0xac>)
 8009694:	2201      	movs	r2, #1
 8009696:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009698:	e041      	b.n	800971e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800969a:	4b25      	ldr	r3, [pc, #148]	; (8009730 <vTaskSwitchContext+0xac>)
 800969c:	2200      	movs	r2, #0
 800969e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096a0:	4b24      	ldr	r3, [pc, #144]	; (8009734 <vTaskSwitchContext+0xb0>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	60fb      	str	r3, [r7, #12]
 80096a6:	e010      	b.n	80096ca <vTaskSwitchContext+0x46>
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10a      	bne.n	80096c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80096ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	607b      	str	r3, [r7, #4]
}
 80096c0:	bf00      	nop
 80096c2:	e7fe      	b.n	80096c2 <vTaskSwitchContext+0x3e>
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	3b01      	subs	r3, #1
 80096c8:	60fb      	str	r3, [r7, #12]
 80096ca:	491b      	ldr	r1, [pc, #108]	; (8009738 <vTaskSwitchContext+0xb4>)
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	4613      	mov	r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4413      	add	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	440b      	add	r3, r1
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d0e4      	beq.n	80096a8 <vTaskSwitchContext+0x24>
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	4613      	mov	r3, r2
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	4413      	add	r3, r2
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	4a13      	ldr	r2, [pc, #76]	; (8009738 <vTaskSwitchContext+0xb4>)
 80096ea:	4413      	add	r3, r2
 80096ec:	60bb      	str	r3, [r7, #8]
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	685a      	ldr	r2, [r3, #4]
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	605a      	str	r2, [r3, #4]
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	3308      	adds	r3, #8
 8009700:	429a      	cmp	r2, r3
 8009702:	d104      	bne.n	800970e <vTaskSwitchContext+0x8a>
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	685a      	ldr	r2, [r3, #4]
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	605a      	str	r2, [r3, #4]
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	4a09      	ldr	r2, [pc, #36]	; (800973c <vTaskSwitchContext+0xb8>)
 8009716:	6013      	str	r3, [r2, #0]
 8009718:	4a06      	ldr	r2, [pc, #24]	; (8009734 <vTaskSwitchContext+0xb0>)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6013      	str	r3, [r2, #0]
}
 800971e:	bf00      	nop
 8009720:	3714      	adds	r7, #20
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	20000ca4 	.word	0x20000ca4
 8009730:	20000c90 	.word	0x20000c90
 8009734:	20000c84 	.word	0x20000c84
 8009738:	200007ac 	.word	0x200007ac
 800973c:	200007a8 	.word	0x200007a8

08009740 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d10a      	bne.n	8009766 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	60fb      	str	r3, [r7, #12]
}
 8009762:	bf00      	nop
 8009764:	e7fe      	b.n	8009764 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009766:	4b07      	ldr	r3, [pc, #28]	; (8009784 <vTaskPlaceOnEventList+0x44>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	3318      	adds	r3, #24
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7fe fe87 	bl	8008482 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009774:	2101      	movs	r1, #1
 8009776:	6838      	ldr	r0, [r7, #0]
 8009778:	f000 fa7c 	bl	8009c74 <prvAddCurrentTaskToDelayedList>
}
 800977c:	bf00      	nop
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	200007a8 	.word	0x200007a8

08009788 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009788:	b580      	push	{r7, lr}
 800978a:	b086      	sub	sp, #24
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d10a      	bne.n	80097b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800979a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979e:	f383 8811 	msr	BASEPRI, r3
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	617b      	str	r3, [r7, #20]
}
 80097ac:	bf00      	nop
 80097ae:	e7fe      	b.n	80097ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097b0:	4b0a      	ldr	r3, [pc, #40]	; (80097dc <vTaskPlaceOnEventListRestricted+0x54>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	3318      	adds	r3, #24
 80097b6:	4619      	mov	r1, r3
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f7fe fe3e 	bl	800843a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d002      	beq.n	80097ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80097c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80097ca:	6879      	ldr	r1, [r7, #4]
 80097cc:	68b8      	ldr	r0, [r7, #8]
 80097ce:	f000 fa51 	bl	8009c74 <prvAddCurrentTaskToDelayedList>
	}
 80097d2:	bf00      	nop
 80097d4:	3718      	adds	r7, #24
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	200007a8 	.word	0x200007a8

080097e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d10a      	bne.n	800980c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80097f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fa:	f383 8811 	msr	BASEPRI, r3
 80097fe:	f3bf 8f6f 	isb	sy
 8009802:	f3bf 8f4f 	dsb	sy
 8009806:	60fb      	str	r3, [r7, #12]
}
 8009808:	bf00      	nop
 800980a:	e7fe      	b.n	800980a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	3318      	adds	r3, #24
 8009810:	4618      	mov	r0, r3
 8009812:	f7fe fe6f 	bl	80084f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009816:	4b1e      	ldr	r3, [pc, #120]	; (8009890 <xTaskRemoveFromEventList+0xb0>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d11d      	bne.n	800985a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	3304      	adds	r3, #4
 8009822:	4618      	mov	r0, r3
 8009824:	f7fe fe66 	bl	80084f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800982c:	4b19      	ldr	r3, [pc, #100]	; (8009894 <xTaskRemoveFromEventList+0xb4>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	429a      	cmp	r2, r3
 8009832:	d903      	bls.n	800983c <xTaskRemoveFromEventList+0x5c>
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009838:	4a16      	ldr	r2, [pc, #88]	; (8009894 <xTaskRemoveFromEventList+0xb4>)
 800983a:	6013      	str	r3, [r2, #0]
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009840:	4613      	mov	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	4413      	add	r3, r2
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	4a13      	ldr	r2, [pc, #76]	; (8009898 <xTaskRemoveFromEventList+0xb8>)
 800984a:	441a      	add	r2, r3
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	3304      	adds	r3, #4
 8009850:	4619      	mov	r1, r3
 8009852:	4610      	mov	r0, r2
 8009854:	f7fe fdf1 	bl	800843a <vListInsertEnd>
 8009858:	e005      	b.n	8009866 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	3318      	adds	r3, #24
 800985e:	4619      	mov	r1, r3
 8009860:	480e      	ldr	r0, [pc, #56]	; (800989c <xTaskRemoveFromEventList+0xbc>)
 8009862:	f7fe fdea 	bl	800843a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800986a:	4b0d      	ldr	r3, [pc, #52]	; (80098a0 <xTaskRemoveFromEventList+0xc0>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009870:	429a      	cmp	r2, r3
 8009872:	d905      	bls.n	8009880 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009874:	2301      	movs	r3, #1
 8009876:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009878:	4b0a      	ldr	r3, [pc, #40]	; (80098a4 <xTaskRemoveFromEventList+0xc4>)
 800987a:	2201      	movs	r2, #1
 800987c:	601a      	str	r2, [r3, #0]
 800987e:	e001      	b.n	8009884 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009880:	2300      	movs	r3, #0
 8009882:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009884:	697b      	ldr	r3, [r7, #20]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3718      	adds	r7, #24
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	20000ca4 	.word	0x20000ca4
 8009894:	20000c84 	.word	0x20000c84
 8009898:	200007ac 	.word	0x200007ac
 800989c:	20000c3c 	.word	0x20000c3c
 80098a0:	200007a8 	.word	0x200007a8
 80098a4:	20000c90 	.word	0x20000c90

080098a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80098b0:	4b06      	ldr	r3, [pc, #24]	; (80098cc <vTaskInternalSetTimeOutState+0x24>)
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80098b8:	4b05      	ldr	r3, [pc, #20]	; (80098d0 <vTaskInternalSetTimeOutState+0x28>)
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	605a      	str	r2, [r3, #4]
}
 80098c0:	bf00      	nop
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr
 80098cc:	20000c94 	.word	0x20000c94
 80098d0:	20000c80 	.word	0x20000c80

080098d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b088      	sub	sp, #32
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d10a      	bne.n	80098fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80098e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e8:	f383 8811 	msr	BASEPRI, r3
 80098ec:	f3bf 8f6f 	isb	sy
 80098f0:	f3bf 8f4f 	dsb	sy
 80098f4:	613b      	str	r3, [r7, #16]
}
 80098f6:	bf00      	nop
 80098f8:	e7fe      	b.n	80098f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d10a      	bne.n	8009916 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	60fb      	str	r3, [r7, #12]
}
 8009912:	bf00      	nop
 8009914:	e7fe      	b.n	8009914 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009916:	f000 fe7d 	bl	800a614 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800991a:	4b1d      	ldr	r3, [pc, #116]	; (8009990 <xTaskCheckForTimeOut+0xbc>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	69ba      	ldr	r2, [r7, #24]
 8009926:	1ad3      	subs	r3, r2, r3
 8009928:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009932:	d102      	bne.n	800993a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009934:	2300      	movs	r3, #0
 8009936:	61fb      	str	r3, [r7, #28]
 8009938:	e023      	b.n	8009982 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	4b15      	ldr	r3, [pc, #84]	; (8009994 <xTaskCheckForTimeOut+0xc0>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	429a      	cmp	r2, r3
 8009944:	d007      	beq.n	8009956 <xTaskCheckForTimeOut+0x82>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	69ba      	ldr	r2, [r7, #24]
 800994c:	429a      	cmp	r2, r3
 800994e:	d302      	bcc.n	8009956 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009950:	2301      	movs	r3, #1
 8009952:	61fb      	str	r3, [r7, #28]
 8009954:	e015      	b.n	8009982 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	697a      	ldr	r2, [r7, #20]
 800995c:	429a      	cmp	r2, r3
 800995e:	d20b      	bcs.n	8009978 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	1ad2      	subs	r2, r2, r3
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f7ff ff9b 	bl	80098a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009972:	2300      	movs	r3, #0
 8009974:	61fb      	str	r3, [r7, #28]
 8009976:	e004      	b.n	8009982 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	2200      	movs	r2, #0
 800997c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800997e:	2301      	movs	r3, #1
 8009980:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009982:	f000 fe77 	bl	800a674 <vPortExitCritical>

	return xReturn;
 8009986:	69fb      	ldr	r3, [r7, #28]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3720      	adds	r7, #32
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	20000c80 	.word	0x20000c80
 8009994:	20000c94 	.word	0x20000c94

08009998 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009998:	b480      	push	{r7}
 800999a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800999c:	4b03      	ldr	r3, [pc, #12]	; (80099ac <vTaskMissedYield+0x14>)
 800999e:	2201      	movs	r2, #1
 80099a0:	601a      	str	r2, [r3, #0]
}
 80099a2:	bf00      	nop
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr
 80099ac:	20000c90 	.word	0x20000c90

080099b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80099b8:	f000 f852 	bl	8009a60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80099bc:	4b06      	ldr	r3, [pc, #24]	; (80099d8 <prvIdleTask+0x28>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d9f9      	bls.n	80099b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80099c4:	4b05      	ldr	r3, [pc, #20]	; (80099dc <prvIdleTask+0x2c>)
 80099c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099ca:	601a      	str	r2, [r3, #0]
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80099d4:	e7f0      	b.n	80099b8 <prvIdleTask+0x8>
 80099d6:	bf00      	nop
 80099d8:	200007ac 	.word	0x200007ac
 80099dc:	e000ed04 	.word	0xe000ed04

080099e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099e6:	2300      	movs	r3, #0
 80099e8:	607b      	str	r3, [r7, #4]
 80099ea:	e00c      	b.n	8009a06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	4613      	mov	r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4413      	add	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	4a12      	ldr	r2, [pc, #72]	; (8009a40 <prvInitialiseTaskLists+0x60>)
 80099f8:	4413      	add	r3, r2
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fe fcf0 	bl	80083e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	3301      	adds	r3, #1
 8009a04:	607b      	str	r3, [r7, #4]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2b37      	cmp	r3, #55	; 0x37
 8009a0a:	d9ef      	bls.n	80099ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a0c:	480d      	ldr	r0, [pc, #52]	; (8009a44 <prvInitialiseTaskLists+0x64>)
 8009a0e:	f7fe fce7 	bl	80083e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a12:	480d      	ldr	r0, [pc, #52]	; (8009a48 <prvInitialiseTaskLists+0x68>)
 8009a14:	f7fe fce4 	bl	80083e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a18:	480c      	ldr	r0, [pc, #48]	; (8009a4c <prvInitialiseTaskLists+0x6c>)
 8009a1a:	f7fe fce1 	bl	80083e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a1e:	480c      	ldr	r0, [pc, #48]	; (8009a50 <prvInitialiseTaskLists+0x70>)
 8009a20:	f7fe fcde 	bl	80083e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a24:	480b      	ldr	r0, [pc, #44]	; (8009a54 <prvInitialiseTaskLists+0x74>)
 8009a26:	f7fe fcdb 	bl	80083e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a2a:	4b0b      	ldr	r3, [pc, #44]	; (8009a58 <prvInitialiseTaskLists+0x78>)
 8009a2c:	4a05      	ldr	r2, [pc, #20]	; (8009a44 <prvInitialiseTaskLists+0x64>)
 8009a2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a30:	4b0a      	ldr	r3, [pc, #40]	; (8009a5c <prvInitialiseTaskLists+0x7c>)
 8009a32:	4a05      	ldr	r2, [pc, #20]	; (8009a48 <prvInitialiseTaskLists+0x68>)
 8009a34:	601a      	str	r2, [r3, #0]
}
 8009a36:	bf00      	nop
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	200007ac 	.word	0x200007ac
 8009a44:	20000c0c 	.word	0x20000c0c
 8009a48:	20000c20 	.word	0x20000c20
 8009a4c:	20000c3c 	.word	0x20000c3c
 8009a50:	20000c50 	.word	0x20000c50
 8009a54:	20000c68 	.word	0x20000c68
 8009a58:	20000c34 	.word	0x20000c34
 8009a5c:	20000c38 	.word	0x20000c38

08009a60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a66:	e019      	b.n	8009a9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a68:	f000 fdd4 	bl	800a614 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a6c:	4b10      	ldr	r3, [pc, #64]	; (8009ab0 <prvCheckTasksWaitingTermination+0x50>)
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	3304      	adds	r3, #4
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7fe fd3b 	bl	80084f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a7e:	4b0d      	ldr	r3, [pc, #52]	; (8009ab4 <prvCheckTasksWaitingTermination+0x54>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	3b01      	subs	r3, #1
 8009a84:	4a0b      	ldr	r2, [pc, #44]	; (8009ab4 <prvCheckTasksWaitingTermination+0x54>)
 8009a86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a88:	4b0b      	ldr	r3, [pc, #44]	; (8009ab8 <prvCheckTasksWaitingTermination+0x58>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	4a0a      	ldr	r2, [pc, #40]	; (8009ab8 <prvCheckTasksWaitingTermination+0x58>)
 8009a90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a92:	f000 fdef 	bl	800a674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f810 	bl	8009abc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a9c:	4b06      	ldr	r3, [pc, #24]	; (8009ab8 <prvCheckTasksWaitingTermination+0x58>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1e1      	bne.n	8009a68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009aa4:	bf00      	nop
 8009aa6:	bf00      	nop
 8009aa8:	3708      	adds	r7, #8
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	20000c50 	.word	0x20000c50
 8009ab4:	20000c7c 	.word	0x20000c7c
 8009ab8:	20000c64 	.word	0x20000c64

08009abc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d108      	bne.n	8009ae0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f000 ff8c 	bl	800a9f0 <vPortFree>
				vPortFree( pxTCB );
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 ff89 	bl	800a9f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ade:	e018      	b.n	8009b12 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d103      	bne.n	8009af2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 ff80 	bl	800a9f0 <vPortFree>
	}
 8009af0:	e00f      	b.n	8009b12 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	d00a      	beq.n	8009b12 <prvDeleteTCB+0x56>
	__asm volatile
 8009afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b00:	f383 8811 	msr	BASEPRI, r3
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	60fb      	str	r3, [r7, #12]
}
 8009b0e:	bf00      	nop
 8009b10:	e7fe      	b.n	8009b10 <prvDeleteTCB+0x54>
	}
 8009b12:	bf00      	nop
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
	...

08009b1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b22:	4b0c      	ldr	r3, [pc, #48]	; (8009b54 <prvResetNextTaskUnblockTime+0x38>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d104      	bne.n	8009b36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b2c:	4b0a      	ldr	r3, [pc, #40]	; (8009b58 <prvResetNextTaskUnblockTime+0x3c>)
 8009b2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b34:	e008      	b.n	8009b48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b36:	4b07      	ldr	r3, [pc, #28]	; (8009b54 <prvResetNextTaskUnblockTime+0x38>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	4a04      	ldr	r2, [pc, #16]	; (8009b58 <prvResetNextTaskUnblockTime+0x3c>)
 8009b46:	6013      	str	r3, [r2, #0]
}
 8009b48:	bf00      	nop
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr
 8009b54:	20000c34 	.word	0x20000c34
 8009b58:	20000c9c 	.word	0x20000c9c

08009b5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b62:	4b0b      	ldr	r3, [pc, #44]	; (8009b90 <xTaskGetSchedulerState+0x34>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d102      	bne.n	8009b70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	607b      	str	r3, [r7, #4]
 8009b6e:	e008      	b.n	8009b82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b70:	4b08      	ldr	r3, [pc, #32]	; (8009b94 <xTaskGetSchedulerState+0x38>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d102      	bne.n	8009b7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b78:	2302      	movs	r3, #2
 8009b7a:	607b      	str	r3, [r7, #4]
 8009b7c:	e001      	b.n	8009b82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b82:	687b      	ldr	r3, [r7, #4]
	}
 8009b84:	4618      	mov	r0, r3
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr
 8009b90:	20000c88 	.word	0x20000c88
 8009b94:	20000ca4 	.word	0x20000ca4

08009b98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b086      	sub	sp, #24
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d056      	beq.n	8009c5c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009bae:	4b2e      	ldr	r3, [pc, #184]	; (8009c68 <xTaskPriorityDisinherit+0xd0>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d00a      	beq.n	8009bce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bbc:	f383 8811 	msr	BASEPRI, r3
 8009bc0:	f3bf 8f6f 	isb	sy
 8009bc4:	f3bf 8f4f 	dsb	sy
 8009bc8:	60fb      	str	r3, [r7, #12]
}
 8009bca:	bf00      	nop
 8009bcc:	e7fe      	b.n	8009bcc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10a      	bne.n	8009bec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bda:	f383 8811 	msr	BASEPRI, r3
 8009bde:	f3bf 8f6f 	isb	sy
 8009be2:	f3bf 8f4f 	dsb	sy
 8009be6:	60bb      	str	r3, [r7, #8]
}
 8009be8:	bf00      	nop
 8009bea:	e7fe      	b.n	8009bea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bf0:	1e5a      	subs	r2, r3, #1
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d02c      	beq.n	8009c5c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d128      	bne.n	8009c5c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	3304      	adds	r3, #4
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7fe fc70 	bl	80084f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c20:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c2c:	4b0f      	ldr	r3, [pc, #60]	; (8009c6c <xTaskPriorityDisinherit+0xd4>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d903      	bls.n	8009c3c <xTaskPriorityDisinherit+0xa4>
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c38:	4a0c      	ldr	r2, [pc, #48]	; (8009c6c <xTaskPriorityDisinherit+0xd4>)
 8009c3a:	6013      	str	r3, [r2, #0]
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c40:	4613      	mov	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4413      	add	r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	4a09      	ldr	r2, [pc, #36]	; (8009c70 <xTaskPriorityDisinherit+0xd8>)
 8009c4a:	441a      	add	r2, r3
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	3304      	adds	r3, #4
 8009c50:	4619      	mov	r1, r3
 8009c52:	4610      	mov	r0, r2
 8009c54:	f7fe fbf1 	bl	800843a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c5c:	697b      	ldr	r3, [r7, #20]
	}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3718      	adds	r7, #24
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	200007a8 	.word	0x200007a8
 8009c6c:	20000c84 	.word	0x20000c84
 8009c70:	200007ac 	.word	0x200007ac

08009c74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009c7e:	4b21      	ldr	r3, [pc, #132]	; (8009d04 <prvAddCurrentTaskToDelayedList+0x90>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c84:	4b20      	ldr	r3, [pc, #128]	; (8009d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	3304      	adds	r3, #4
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fe fc32 	bl	80084f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c96:	d10a      	bne.n	8009cae <prvAddCurrentTaskToDelayedList+0x3a>
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d007      	beq.n	8009cae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c9e:	4b1a      	ldr	r3, [pc, #104]	; (8009d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	3304      	adds	r3, #4
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	4819      	ldr	r0, [pc, #100]	; (8009d0c <prvAddCurrentTaskToDelayedList+0x98>)
 8009ca8:	f7fe fbc7 	bl	800843a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009cac:	e026      	b.n	8009cfc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009cb6:	4b14      	ldr	r3, [pc, #80]	; (8009d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009cbe:	68ba      	ldr	r2, [r7, #8]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d209      	bcs.n	8009cda <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cc6:	4b12      	ldr	r3, [pc, #72]	; (8009d10 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	4b0f      	ldr	r3, [pc, #60]	; (8009d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	3304      	adds	r3, #4
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	4610      	mov	r0, r2
 8009cd4:	f7fe fbd5 	bl	8008482 <vListInsert>
}
 8009cd8:	e010      	b.n	8009cfc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cda:	4b0e      	ldr	r3, [pc, #56]	; (8009d14 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	4b0a      	ldr	r3, [pc, #40]	; (8009d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	3304      	adds	r3, #4
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	4610      	mov	r0, r2
 8009ce8:	f7fe fbcb 	bl	8008482 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009cec:	4b0a      	ldr	r3, [pc, #40]	; (8009d18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d202      	bcs.n	8009cfc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009cf6:	4a08      	ldr	r2, [pc, #32]	; (8009d18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	6013      	str	r3, [r2, #0]
}
 8009cfc:	bf00      	nop
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	20000c80 	.word	0x20000c80
 8009d08:	200007a8 	.word	0x200007a8
 8009d0c:	20000c68 	.word	0x20000c68
 8009d10:	20000c38 	.word	0x20000c38
 8009d14:	20000c34 	.word	0x20000c34
 8009d18:	20000c9c 	.word	0x20000c9c

08009d1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b08a      	sub	sp, #40	; 0x28
 8009d20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009d22:	2300      	movs	r3, #0
 8009d24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009d26:	f000 fb07 	bl	800a338 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009d2a:	4b1c      	ldr	r3, [pc, #112]	; (8009d9c <xTimerCreateTimerTask+0x80>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d021      	beq.n	8009d76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009d32:	2300      	movs	r3, #0
 8009d34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009d36:	2300      	movs	r3, #0
 8009d38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009d3a:	1d3a      	adds	r2, r7, #4
 8009d3c:	f107 0108 	add.w	r1, r7, #8
 8009d40:	f107 030c 	add.w	r3, r7, #12
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7fe fb31 	bl	80083ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009d4a:	6879      	ldr	r1, [r7, #4]
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	68fa      	ldr	r2, [r7, #12]
 8009d50:	9202      	str	r2, [sp, #8]
 8009d52:	9301      	str	r3, [sp, #4]
 8009d54:	2302      	movs	r3, #2
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	2300      	movs	r3, #0
 8009d5a:	460a      	mov	r2, r1
 8009d5c:	4910      	ldr	r1, [pc, #64]	; (8009da0 <xTimerCreateTimerTask+0x84>)
 8009d5e:	4811      	ldr	r0, [pc, #68]	; (8009da4 <xTimerCreateTimerTask+0x88>)
 8009d60:	f7ff f8de 	bl	8008f20 <xTaskCreateStatic>
 8009d64:	4603      	mov	r3, r0
 8009d66:	4a10      	ldr	r2, [pc, #64]	; (8009da8 <xTimerCreateTimerTask+0x8c>)
 8009d68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009d6a:	4b0f      	ldr	r3, [pc, #60]	; (8009da8 <xTimerCreateTimerTask+0x8c>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d001      	beq.n	8009d76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009d72:	2301      	movs	r3, #1
 8009d74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10a      	bne.n	8009d92 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d80:	f383 8811 	msr	BASEPRI, r3
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	613b      	str	r3, [r7, #16]
}
 8009d8e:	bf00      	nop
 8009d90:	e7fe      	b.n	8009d90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009d92:	697b      	ldr	r3, [r7, #20]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3718      	adds	r7, #24
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	20000cd8 	.word	0x20000cd8
 8009da0:	0800c96c 	.word	0x0800c96c
 8009da4:	08009ee1 	.word	0x08009ee1
 8009da8:	20000cdc 	.word	0x20000cdc

08009dac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b08a      	sub	sp, #40	; 0x28
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
 8009db8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10a      	bne.n	8009dda <xTimerGenericCommand+0x2e>
	__asm volatile
 8009dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	623b      	str	r3, [r7, #32]
}
 8009dd6:	bf00      	nop
 8009dd8:	e7fe      	b.n	8009dd8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009dda:	4b1a      	ldr	r3, [pc, #104]	; (8009e44 <xTimerGenericCommand+0x98>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d02a      	beq.n	8009e38 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	2b05      	cmp	r3, #5
 8009df2:	dc18      	bgt.n	8009e26 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009df4:	f7ff feb2 	bl	8009b5c <xTaskGetSchedulerState>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d109      	bne.n	8009e12 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009dfe:	4b11      	ldr	r3, [pc, #68]	; (8009e44 <xTimerGenericCommand+0x98>)
 8009e00:	6818      	ldr	r0, [r3, #0]
 8009e02:	f107 0110 	add.w	r1, r7, #16
 8009e06:	2300      	movs	r3, #0
 8009e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e0a:	f7fe fca1 	bl	8008750 <xQueueGenericSend>
 8009e0e:	6278      	str	r0, [r7, #36]	; 0x24
 8009e10:	e012      	b.n	8009e38 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009e12:	4b0c      	ldr	r3, [pc, #48]	; (8009e44 <xTimerGenericCommand+0x98>)
 8009e14:	6818      	ldr	r0, [r3, #0]
 8009e16:	f107 0110 	add.w	r1, r7, #16
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f7fe fc97 	bl	8008750 <xQueueGenericSend>
 8009e22:	6278      	str	r0, [r7, #36]	; 0x24
 8009e24:	e008      	b.n	8009e38 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009e26:	4b07      	ldr	r3, [pc, #28]	; (8009e44 <xTimerGenericCommand+0x98>)
 8009e28:	6818      	ldr	r0, [r3, #0]
 8009e2a:	f107 0110 	add.w	r1, r7, #16
 8009e2e:	2300      	movs	r3, #0
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	f7fe fd8b 	bl	800894c <xQueueGenericSendFromISR>
 8009e36:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3728      	adds	r7, #40	; 0x28
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	20000cd8 	.word	0x20000cd8

08009e48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b088      	sub	sp, #32
 8009e4c:	af02      	add	r7, sp, #8
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e52:	4b22      	ldr	r3, [pc, #136]	; (8009edc <prvProcessExpiredTimer+0x94>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	3304      	adds	r3, #4
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7fe fb47 	bl	80084f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e6c:	f003 0304 	and.w	r3, r3, #4
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d022      	beq.n	8009eba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	699a      	ldr	r2, [r3, #24]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	18d1      	adds	r1, r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	6978      	ldr	r0, [r7, #20]
 8009e82:	f000 f8d1 	bl	800a028 <prvInsertTimerInActiveList>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d01f      	beq.n	8009ecc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	2300      	movs	r3, #0
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	2100      	movs	r1, #0
 8009e96:	6978      	ldr	r0, [r7, #20]
 8009e98:	f7ff ff88 	bl	8009dac <xTimerGenericCommand>
 8009e9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d113      	bne.n	8009ecc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea8:	f383 8811 	msr	BASEPRI, r3
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f3bf 8f4f 	dsb	sy
 8009eb4:	60fb      	str	r3, [r7, #12]
}
 8009eb6:	bf00      	nop
 8009eb8:	e7fe      	b.n	8009eb8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ec0:	f023 0301 	bic.w	r3, r3, #1
 8009ec4:	b2da      	uxtb	r2, r3
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	6a1b      	ldr	r3, [r3, #32]
 8009ed0:	6978      	ldr	r0, [r7, #20]
 8009ed2:	4798      	blx	r3
}
 8009ed4:	bf00      	nop
 8009ed6:	3718      	adds	r7, #24
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	20000cd0 	.word	0x20000cd0

08009ee0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ee8:	f107 0308 	add.w	r3, r7, #8
 8009eec:	4618      	mov	r0, r3
 8009eee:	f000 f857 	bl	8009fa0 <prvGetNextExpireTime>
 8009ef2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f000 f803 	bl	8009f04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009efe:	f000 f8d5 	bl	800a0ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f02:	e7f1      	b.n	8009ee8 <prvTimerTask+0x8>

08009f04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009f0e:	f7ff fa43 	bl	8009398 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f12:	f107 0308 	add.w	r3, r7, #8
 8009f16:	4618      	mov	r0, r3
 8009f18:	f000 f866 	bl	8009fe8 <prvSampleTimeNow>
 8009f1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d130      	bne.n	8009f86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d10a      	bne.n	8009f40 <prvProcessTimerOrBlockTask+0x3c>
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d806      	bhi.n	8009f40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009f32:	f7ff fa3f 	bl	80093b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009f36:	68f9      	ldr	r1, [r7, #12]
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f7ff ff85 	bl	8009e48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009f3e:	e024      	b.n	8009f8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d008      	beq.n	8009f58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009f46:	4b13      	ldr	r3, [pc, #76]	; (8009f94 <prvProcessTimerOrBlockTask+0x90>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d101      	bne.n	8009f54 <prvProcessTimerOrBlockTask+0x50>
 8009f50:	2301      	movs	r3, #1
 8009f52:	e000      	b.n	8009f56 <prvProcessTimerOrBlockTask+0x52>
 8009f54:	2300      	movs	r3, #0
 8009f56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009f58:	4b0f      	ldr	r3, [pc, #60]	; (8009f98 <prvProcessTimerOrBlockTask+0x94>)
 8009f5a:	6818      	ldr	r0, [r3, #0]
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	1ad3      	subs	r3, r2, r3
 8009f62:	683a      	ldr	r2, [r7, #0]
 8009f64:	4619      	mov	r1, r3
 8009f66:	f7fe ffa7 	bl	8008eb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009f6a:	f7ff fa23 	bl	80093b4 <xTaskResumeAll>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10a      	bne.n	8009f8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009f74:	4b09      	ldr	r3, [pc, #36]	; (8009f9c <prvProcessTimerOrBlockTask+0x98>)
 8009f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f7a:	601a      	str	r2, [r3, #0]
 8009f7c:	f3bf 8f4f 	dsb	sy
 8009f80:	f3bf 8f6f 	isb	sy
}
 8009f84:	e001      	b.n	8009f8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009f86:	f7ff fa15 	bl	80093b4 <xTaskResumeAll>
}
 8009f8a:	bf00      	nop
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	20000cd4 	.word	0x20000cd4
 8009f98:	20000cd8 	.word	0x20000cd8
 8009f9c:	e000ed04 	.word	0xe000ed04

08009fa0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009fa8:	4b0e      	ldr	r3, [pc, #56]	; (8009fe4 <prvGetNextExpireTime+0x44>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d101      	bne.n	8009fb6 <prvGetNextExpireTime+0x16>
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	e000      	b.n	8009fb8 <prvGetNextExpireTime+0x18>
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d105      	bne.n	8009fd0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fc4:	4b07      	ldr	r3, [pc, #28]	; (8009fe4 <prvGetNextExpireTime+0x44>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	60fb      	str	r3, [r7, #12]
 8009fce:	e001      	b.n	8009fd4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3714      	adds	r7, #20
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	20000cd0 	.word	0x20000cd0

08009fe8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009ff0:	f7ff fa7e 	bl	80094f0 <xTaskGetTickCount>
 8009ff4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009ff6:	4b0b      	ldr	r3, [pc, #44]	; (800a024 <prvSampleTimeNow+0x3c>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d205      	bcs.n	800a00c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a000:	f000 f936 	bl	800a270 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	601a      	str	r2, [r3, #0]
 800a00a:	e002      	b.n	800a012 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a012:	4a04      	ldr	r2, [pc, #16]	; (800a024 <prvSampleTimeNow+0x3c>)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a018:	68fb      	ldr	r3, [r7, #12]
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	20000ce0 	.word	0x20000ce0

0800a028 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
 800a034:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a036:	2300      	movs	r3, #0
 800a038:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	68ba      	ldr	r2, [r7, #8]
 800a03e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	68fa      	ldr	r2, [r7, #12]
 800a044:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a046:	68ba      	ldr	r2, [r7, #8]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d812      	bhi.n	800a074 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	1ad2      	subs	r2, r2, r3
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	699b      	ldr	r3, [r3, #24]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d302      	bcc.n	800a062 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a05c:	2301      	movs	r3, #1
 800a05e:	617b      	str	r3, [r7, #20]
 800a060:	e01b      	b.n	800a09a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a062:	4b10      	ldr	r3, [pc, #64]	; (800a0a4 <prvInsertTimerInActiveList+0x7c>)
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	3304      	adds	r3, #4
 800a06a:	4619      	mov	r1, r3
 800a06c:	4610      	mov	r0, r2
 800a06e:	f7fe fa08 	bl	8008482 <vListInsert>
 800a072:	e012      	b.n	800a09a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d206      	bcs.n	800a08a <prvInsertTimerInActiveList+0x62>
 800a07c:	68ba      	ldr	r2, [r7, #8]
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	429a      	cmp	r2, r3
 800a082:	d302      	bcc.n	800a08a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a084:	2301      	movs	r3, #1
 800a086:	617b      	str	r3, [r7, #20]
 800a088:	e007      	b.n	800a09a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a08a:	4b07      	ldr	r3, [pc, #28]	; (800a0a8 <prvInsertTimerInActiveList+0x80>)
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	3304      	adds	r3, #4
 800a092:	4619      	mov	r1, r3
 800a094:	4610      	mov	r0, r2
 800a096:	f7fe f9f4 	bl	8008482 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a09a:	697b      	ldr	r3, [r7, #20]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3718      	adds	r7, #24
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	20000cd4 	.word	0x20000cd4
 800a0a8:	20000cd0 	.word	0x20000cd0

0800a0ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b08e      	sub	sp, #56	; 0x38
 800a0b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0b2:	e0ca      	b.n	800a24a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	da18      	bge.n	800a0ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a0ba:	1d3b      	adds	r3, r7, #4
 800a0bc:	3304      	adds	r3, #4
 800a0be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d10a      	bne.n	800a0dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ca:	f383 8811 	msr	BASEPRI, r3
 800a0ce:	f3bf 8f6f 	isb	sy
 800a0d2:	f3bf 8f4f 	dsb	sy
 800a0d6:	61fb      	str	r3, [r7, #28]
}
 800a0d8:	bf00      	nop
 800a0da:	e7fe      	b.n	800a0da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0e2:	6850      	ldr	r0, [r2, #4]
 800a0e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0e6:	6892      	ldr	r2, [r2, #8]
 800a0e8:	4611      	mov	r1, r2
 800a0ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	f2c0 80aa 	blt.w	800a248 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fa:	695b      	ldr	r3, [r3, #20]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d004      	beq.n	800a10a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a102:	3304      	adds	r3, #4
 800a104:	4618      	mov	r0, r3
 800a106:	f7fe f9f5 	bl	80084f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a10a:	463b      	mov	r3, r7
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7ff ff6b 	bl	8009fe8 <prvSampleTimeNow>
 800a112:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2b09      	cmp	r3, #9
 800a118:	f200 8097 	bhi.w	800a24a <prvProcessReceivedCommands+0x19e>
 800a11c:	a201      	add	r2, pc, #4	; (adr r2, 800a124 <prvProcessReceivedCommands+0x78>)
 800a11e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a122:	bf00      	nop
 800a124:	0800a14d 	.word	0x0800a14d
 800a128:	0800a14d 	.word	0x0800a14d
 800a12c:	0800a14d 	.word	0x0800a14d
 800a130:	0800a1c1 	.word	0x0800a1c1
 800a134:	0800a1d5 	.word	0x0800a1d5
 800a138:	0800a21f 	.word	0x0800a21f
 800a13c:	0800a14d 	.word	0x0800a14d
 800a140:	0800a14d 	.word	0x0800a14d
 800a144:	0800a1c1 	.word	0x0800a1c1
 800a148:	0800a1d5 	.word	0x0800a1d5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a152:	f043 0301 	orr.w	r3, r3, #1
 800a156:	b2da      	uxtb	r2, r3
 800a158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a162:	699b      	ldr	r3, [r3, #24]
 800a164:	18d1      	adds	r1, r2, r3
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a16a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a16c:	f7ff ff5c 	bl	800a028 <prvInsertTimerInActiveList>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d069      	beq.n	800a24a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a178:	6a1b      	ldr	r3, [r3, #32]
 800a17a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a17c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a180:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a184:	f003 0304 	and.w	r3, r3, #4
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d05e      	beq.n	800a24a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a18c:	68ba      	ldr	r2, [r7, #8]
 800a18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a190:	699b      	ldr	r3, [r3, #24]
 800a192:	441a      	add	r2, r3
 800a194:	2300      	movs	r3, #0
 800a196:	9300      	str	r3, [sp, #0]
 800a198:	2300      	movs	r3, #0
 800a19a:	2100      	movs	r1, #0
 800a19c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a19e:	f7ff fe05 	bl	8009dac <xTimerGenericCommand>
 800a1a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a1a4:	6a3b      	ldr	r3, [r7, #32]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d14f      	bne.n	800a24a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ae:	f383 8811 	msr	BASEPRI, r3
 800a1b2:	f3bf 8f6f 	isb	sy
 800a1b6:	f3bf 8f4f 	dsb	sy
 800a1ba:	61bb      	str	r3, [r7, #24]
}
 800a1bc:	bf00      	nop
 800a1be:	e7fe      	b.n	800a1be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1c6:	f023 0301 	bic.w	r3, r3, #1
 800a1ca:	b2da      	uxtb	r2, r3
 800a1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a1d2:	e03a      	b.n	800a24a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1da:	f043 0301 	orr.w	r3, r3, #1
 800a1de:	b2da      	uxtb	r2, r3
 800a1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a1e6:	68ba      	ldr	r2, [r7, #8]
 800a1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d10a      	bne.n	800a20a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f8:	f383 8811 	msr	BASEPRI, r3
 800a1fc:	f3bf 8f6f 	isb	sy
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	617b      	str	r3, [r7, #20]
}
 800a206:	bf00      	nop
 800a208:	e7fe      	b.n	800a208 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20c:	699a      	ldr	r2, [r3, #24]
 800a20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a210:	18d1      	adds	r1, r2, r3
 800a212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a218:	f7ff ff06 	bl	800a028 <prvInsertTimerInActiveList>
					break;
 800a21c:	e015      	b.n	800a24a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a220:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a224:	f003 0302 	and.w	r3, r3, #2
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d103      	bne.n	800a234 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a22c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a22e:	f000 fbdf 	bl	800a9f0 <vPortFree>
 800a232:	e00a      	b.n	800a24a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a236:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a23a:	f023 0301 	bic.w	r3, r3, #1
 800a23e:	b2da      	uxtb	r2, r3
 800a240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a242:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a246:	e000      	b.n	800a24a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a248:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a24a:	4b08      	ldr	r3, [pc, #32]	; (800a26c <prvProcessReceivedCommands+0x1c0>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	1d39      	adds	r1, r7, #4
 800a250:	2200      	movs	r2, #0
 800a252:	4618      	mov	r0, r3
 800a254:	f7fe fc16 	bl	8008a84 <xQueueReceive>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f47f af2a 	bne.w	800a0b4 <prvProcessReceivedCommands+0x8>
	}
}
 800a260:	bf00      	nop
 800a262:	bf00      	nop
 800a264:	3730      	adds	r7, #48	; 0x30
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	20000cd8 	.word	0x20000cd8

0800a270 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b088      	sub	sp, #32
 800a274:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a276:	e048      	b.n	800a30a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a278:	4b2d      	ldr	r3, [pc, #180]	; (800a330 <prvSwitchTimerLists+0xc0>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a282:	4b2b      	ldr	r3, [pc, #172]	; (800a330 <prvSwitchTimerLists+0xc0>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	3304      	adds	r3, #4
 800a290:	4618      	mov	r0, r3
 800a292:	f7fe f92f 	bl	80084f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	6a1b      	ldr	r3, [r3, #32]
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2a4:	f003 0304 	and.w	r3, r3, #4
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d02e      	beq.n	800a30a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	699b      	ldr	r3, [r3, #24]
 800a2b0:	693a      	ldr	r2, [r7, #16]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d90e      	bls.n	800a2dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a2ca:	4b19      	ldr	r3, [pc, #100]	; (800a330 <prvSwitchTimerLists+0xc0>)
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	3304      	adds	r3, #4
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	4610      	mov	r0, r2
 800a2d6:	f7fe f8d4 	bl	8008482 <vListInsert>
 800a2da:	e016      	b.n	800a30a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a2dc:	2300      	movs	r3, #0
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	693a      	ldr	r2, [r7, #16]
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f7ff fd60 	bl	8009dac <xTimerGenericCommand>
 800a2ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10a      	bne.n	800a30a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f8:	f383 8811 	msr	BASEPRI, r3
 800a2fc:	f3bf 8f6f 	isb	sy
 800a300:	f3bf 8f4f 	dsb	sy
 800a304:	603b      	str	r3, [r7, #0]
}
 800a306:	bf00      	nop
 800a308:	e7fe      	b.n	800a308 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a30a:	4b09      	ldr	r3, [pc, #36]	; (800a330 <prvSwitchTimerLists+0xc0>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d1b1      	bne.n	800a278 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a314:	4b06      	ldr	r3, [pc, #24]	; (800a330 <prvSwitchTimerLists+0xc0>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a31a:	4b06      	ldr	r3, [pc, #24]	; (800a334 <prvSwitchTimerLists+0xc4>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a04      	ldr	r2, [pc, #16]	; (800a330 <prvSwitchTimerLists+0xc0>)
 800a320:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a322:	4a04      	ldr	r2, [pc, #16]	; (800a334 <prvSwitchTimerLists+0xc4>)
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	6013      	str	r3, [r2, #0]
}
 800a328:	bf00      	nop
 800a32a:	3718      	adds	r7, #24
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	20000cd0 	.word	0x20000cd0
 800a334:	20000cd4 	.word	0x20000cd4

0800a338 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a33e:	f000 f969 	bl	800a614 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a342:	4b15      	ldr	r3, [pc, #84]	; (800a398 <prvCheckForValidListAndQueue+0x60>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d120      	bne.n	800a38c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a34a:	4814      	ldr	r0, [pc, #80]	; (800a39c <prvCheckForValidListAndQueue+0x64>)
 800a34c:	f7fe f848 	bl	80083e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a350:	4813      	ldr	r0, [pc, #76]	; (800a3a0 <prvCheckForValidListAndQueue+0x68>)
 800a352:	f7fe f845 	bl	80083e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a356:	4b13      	ldr	r3, [pc, #76]	; (800a3a4 <prvCheckForValidListAndQueue+0x6c>)
 800a358:	4a10      	ldr	r2, [pc, #64]	; (800a39c <prvCheckForValidListAndQueue+0x64>)
 800a35a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a35c:	4b12      	ldr	r3, [pc, #72]	; (800a3a8 <prvCheckForValidListAndQueue+0x70>)
 800a35e:	4a10      	ldr	r2, [pc, #64]	; (800a3a0 <prvCheckForValidListAndQueue+0x68>)
 800a360:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a362:	2300      	movs	r3, #0
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	4b11      	ldr	r3, [pc, #68]	; (800a3ac <prvCheckForValidListAndQueue+0x74>)
 800a368:	4a11      	ldr	r2, [pc, #68]	; (800a3b0 <prvCheckForValidListAndQueue+0x78>)
 800a36a:	2110      	movs	r1, #16
 800a36c:	200a      	movs	r0, #10
 800a36e:	f7fe f953 	bl	8008618 <xQueueGenericCreateStatic>
 800a372:	4603      	mov	r3, r0
 800a374:	4a08      	ldr	r2, [pc, #32]	; (800a398 <prvCheckForValidListAndQueue+0x60>)
 800a376:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a378:	4b07      	ldr	r3, [pc, #28]	; (800a398 <prvCheckForValidListAndQueue+0x60>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d005      	beq.n	800a38c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a380:	4b05      	ldr	r3, [pc, #20]	; (800a398 <prvCheckForValidListAndQueue+0x60>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	490b      	ldr	r1, [pc, #44]	; (800a3b4 <prvCheckForValidListAndQueue+0x7c>)
 800a386:	4618      	mov	r0, r3
 800a388:	f7fe fd6c 	bl	8008e64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a38c:	f000 f972 	bl	800a674 <vPortExitCritical>
}
 800a390:	bf00      	nop
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	20000cd8 	.word	0x20000cd8
 800a39c:	20000ca8 	.word	0x20000ca8
 800a3a0:	20000cbc 	.word	0x20000cbc
 800a3a4:	20000cd0 	.word	0x20000cd0
 800a3a8:	20000cd4 	.word	0x20000cd4
 800a3ac:	20000d84 	.word	0x20000d84
 800a3b0:	20000ce4 	.word	0x20000ce4
 800a3b4:	0800c974 	.word	0x0800c974

0800a3b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	3b04      	subs	r3, #4
 800a3c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a3d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	3b04      	subs	r3, #4
 800a3d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	f023 0201 	bic.w	r2, r3, #1
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	3b04      	subs	r3, #4
 800a3e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a3e8:	4a0c      	ldr	r2, [pc, #48]	; (800a41c <pxPortInitialiseStack+0x64>)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	3b14      	subs	r3, #20
 800a3f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	3b04      	subs	r3, #4
 800a3fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f06f 0202 	mvn.w	r2, #2
 800a406:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	3b20      	subs	r3, #32
 800a40c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a40e:	68fb      	ldr	r3, [r7, #12]
}
 800a410:	4618      	mov	r0, r3
 800a412:	3714      	adds	r7, #20
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr
 800a41c:	0800a421 	.word	0x0800a421

0800a420 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a420:	b480      	push	{r7}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a426:	2300      	movs	r3, #0
 800a428:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a42a:	4b12      	ldr	r3, [pc, #72]	; (800a474 <prvTaskExitError+0x54>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a432:	d00a      	beq.n	800a44a <prvTaskExitError+0x2a>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	60fb      	str	r3, [r7, #12]
}
 800a446:	bf00      	nop
 800a448:	e7fe      	b.n	800a448 <prvTaskExitError+0x28>
	__asm volatile
 800a44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44e:	f383 8811 	msr	BASEPRI, r3
 800a452:	f3bf 8f6f 	isb	sy
 800a456:	f3bf 8f4f 	dsb	sy
 800a45a:	60bb      	str	r3, [r7, #8]
}
 800a45c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a45e:	bf00      	nop
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d0fc      	beq.n	800a460 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a466:	bf00      	nop
 800a468:	bf00      	nop
 800a46a:	3714      	adds	r7, #20
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr
 800a474:	20000014 	.word	0x20000014
	...

0800a480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a480:	4b07      	ldr	r3, [pc, #28]	; (800a4a0 <pxCurrentTCBConst2>)
 800a482:	6819      	ldr	r1, [r3, #0]
 800a484:	6808      	ldr	r0, [r1, #0]
 800a486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a48a:	f380 8809 	msr	PSP, r0
 800a48e:	f3bf 8f6f 	isb	sy
 800a492:	f04f 0000 	mov.w	r0, #0
 800a496:	f380 8811 	msr	BASEPRI, r0
 800a49a:	4770      	bx	lr
 800a49c:	f3af 8000 	nop.w

0800a4a0 <pxCurrentTCBConst2>:
 800a4a0:	200007a8 	.word	0x200007a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a4a4:	bf00      	nop
 800a4a6:	bf00      	nop

0800a4a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a4a8:	4808      	ldr	r0, [pc, #32]	; (800a4cc <prvPortStartFirstTask+0x24>)
 800a4aa:	6800      	ldr	r0, [r0, #0]
 800a4ac:	6800      	ldr	r0, [r0, #0]
 800a4ae:	f380 8808 	msr	MSP, r0
 800a4b2:	f04f 0000 	mov.w	r0, #0
 800a4b6:	f380 8814 	msr	CONTROL, r0
 800a4ba:	b662      	cpsie	i
 800a4bc:	b661      	cpsie	f
 800a4be:	f3bf 8f4f 	dsb	sy
 800a4c2:	f3bf 8f6f 	isb	sy
 800a4c6:	df00      	svc	0
 800a4c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a4ca:	bf00      	nop
 800a4cc:	e000ed08 	.word	0xe000ed08

0800a4d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b086      	sub	sp, #24
 800a4d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a4d6:	4b46      	ldr	r3, [pc, #280]	; (800a5f0 <xPortStartScheduler+0x120>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a46      	ldr	r2, [pc, #280]	; (800a5f4 <xPortStartScheduler+0x124>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d10a      	bne.n	800a4f6 <xPortStartScheduler+0x26>
	__asm volatile
 800a4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e4:	f383 8811 	msr	BASEPRI, r3
 800a4e8:	f3bf 8f6f 	isb	sy
 800a4ec:	f3bf 8f4f 	dsb	sy
 800a4f0:	613b      	str	r3, [r7, #16]
}
 800a4f2:	bf00      	nop
 800a4f4:	e7fe      	b.n	800a4f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a4f6:	4b3e      	ldr	r3, [pc, #248]	; (800a5f0 <xPortStartScheduler+0x120>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a3f      	ldr	r2, [pc, #252]	; (800a5f8 <xPortStartScheduler+0x128>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d10a      	bne.n	800a516 <xPortStartScheduler+0x46>
	__asm volatile
 800a500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a504:	f383 8811 	msr	BASEPRI, r3
 800a508:	f3bf 8f6f 	isb	sy
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	60fb      	str	r3, [r7, #12]
}
 800a512:	bf00      	nop
 800a514:	e7fe      	b.n	800a514 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a516:	4b39      	ldr	r3, [pc, #228]	; (800a5fc <xPortStartScheduler+0x12c>)
 800a518:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	22ff      	movs	r2, #255	; 0xff
 800a526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a530:	78fb      	ldrb	r3, [r7, #3]
 800a532:	b2db      	uxtb	r3, r3
 800a534:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a538:	b2da      	uxtb	r2, r3
 800a53a:	4b31      	ldr	r3, [pc, #196]	; (800a600 <xPortStartScheduler+0x130>)
 800a53c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a53e:	4b31      	ldr	r3, [pc, #196]	; (800a604 <xPortStartScheduler+0x134>)
 800a540:	2207      	movs	r2, #7
 800a542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a544:	e009      	b.n	800a55a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a546:	4b2f      	ldr	r3, [pc, #188]	; (800a604 <xPortStartScheduler+0x134>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	3b01      	subs	r3, #1
 800a54c:	4a2d      	ldr	r2, [pc, #180]	; (800a604 <xPortStartScheduler+0x134>)
 800a54e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a550:	78fb      	ldrb	r3, [r7, #3]
 800a552:	b2db      	uxtb	r3, r3
 800a554:	005b      	lsls	r3, r3, #1
 800a556:	b2db      	uxtb	r3, r3
 800a558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a55a:	78fb      	ldrb	r3, [r7, #3]
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a562:	2b80      	cmp	r3, #128	; 0x80
 800a564:	d0ef      	beq.n	800a546 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a566:	4b27      	ldr	r3, [pc, #156]	; (800a604 <xPortStartScheduler+0x134>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f1c3 0307 	rsb	r3, r3, #7
 800a56e:	2b04      	cmp	r3, #4
 800a570:	d00a      	beq.n	800a588 <xPortStartScheduler+0xb8>
	__asm volatile
 800a572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a576:	f383 8811 	msr	BASEPRI, r3
 800a57a:	f3bf 8f6f 	isb	sy
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	60bb      	str	r3, [r7, #8]
}
 800a584:	bf00      	nop
 800a586:	e7fe      	b.n	800a586 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a588:	4b1e      	ldr	r3, [pc, #120]	; (800a604 <xPortStartScheduler+0x134>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	021b      	lsls	r3, r3, #8
 800a58e:	4a1d      	ldr	r2, [pc, #116]	; (800a604 <xPortStartScheduler+0x134>)
 800a590:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a592:	4b1c      	ldr	r3, [pc, #112]	; (800a604 <xPortStartScheduler+0x134>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a59a:	4a1a      	ldr	r2, [pc, #104]	; (800a604 <xPortStartScheduler+0x134>)
 800a59c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	b2da      	uxtb	r2, r3
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a5a6:	4b18      	ldr	r3, [pc, #96]	; (800a608 <xPortStartScheduler+0x138>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a17      	ldr	r2, [pc, #92]	; (800a608 <xPortStartScheduler+0x138>)
 800a5ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a5b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a5b2:	4b15      	ldr	r3, [pc, #84]	; (800a608 <xPortStartScheduler+0x138>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a14      	ldr	r2, [pc, #80]	; (800a608 <xPortStartScheduler+0x138>)
 800a5b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a5bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a5be:	f000 f8dd 	bl	800a77c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a5c2:	4b12      	ldr	r3, [pc, #72]	; (800a60c <xPortStartScheduler+0x13c>)
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a5c8:	f000 f8fc 	bl	800a7c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a5cc:	4b10      	ldr	r3, [pc, #64]	; (800a610 <xPortStartScheduler+0x140>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a0f      	ldr	r2, [pc, #60]	; (800a610 <xPortStartScheduler+0x140>)
 800a5d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a5d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a5d8:	f7ff ff66 	bl	800a4a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a5dc:	f7ff f852 	bl	8009684 <vTaskSwitchContext>
	prvTaskExitError();
 800a5e0:	f7ff ff1e 	bl	800a420 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3718      	adds	r7, #24
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	e000ed00 	.word	0xe000ed00
 800a5f4:	410fc271 	.word	0x410fc271
 800a5f8:	410fc270 	.word	0x410fc270
 800a5fc:	e000e400 	.word	0xe000e400
 800a600:	20000dd4 	.word	0x20000dd4
 800a604:	20000dd8 	.word	0x20000dd8
 800a608:	e000ed20 	.word	0xe000ed20
 800a60c:	20000014 	.word	0x20000014
 800a610:	e000ef34 	.word	0xe000ef34

0800a614 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
	__asm volatile
 800a61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61e:	f383 8811 	msr	BASEPRI, r3
 800a622:	f3bf 8f6f 	isb	sy
 800a626:	f3bf 8f4f 	dsb	sy
 800a62a:	607b      	str	r3, [r7, #4]
}
 800a62c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a62e:	4b0f      	ldr	r3, [pc, #60]	; (800a66c <vPortEnterCritical+0x58>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	3301      	adds	r3, #1
 800a634:	4a0d      	ldr	r2, [pc, #52]	; (800a66c <vPortEnterCritical+0x58>)
 800a636:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a638:	4b0c      	ldr	r3, [pc, #48]	; (800a66c <vPortEnterCritical+0x58>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d10f      	bne.n	800a660 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a640:	4b0b      	ldr	r3, [pc, #44]	; (800a670 <vPortEnterCritical+0x5c>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	b2db      	uxtb	r3, r3
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00a      	beq.n	800a660 <vPortEnterCritical+0x4c>
	__asm volatile
 800a64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64e:	f383 8811 	msr	BASEPRI, r3
 800a652:	f3bf 8f6f 	isb	sy
 800a656:	f3bf 8f4f 	dsb	sy
 800a65a:	603b      	str	r3, [r7, #0]
}
 800a65c:	bf00      	nop
 800a65e:	e7fe      	b.n	800a65e <vPortEnterCritical+0x4a>
	}
}
 800a660:	bf00      	nop
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr
 800a66c:	20000014 	.word	0x20000014
 800a670:	e000ed04 	.word	0xe000ed04

0800a674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a67a:	4b12      	ldr	r3, [pc, #72]	; (800a6c4 <vPortExitCritical+0x50>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d10a      	bne.n	800a698 <vPortExitCritical+0x24>
	__asm volatile
 800a682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a686:	f383 8811 	msr	BASEPRI, r3
 800a68a:	f3bf 8f6f 	isb	sy
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	607b      	str	r3, [r7, #4]
}
 800a694:	bf00      	nop
 800a696:	e7fe      	b.n	800a696 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a698:	4b0a      	ldr	r3, [pc, #40]	; (800a6c4 <vPortExitCritical+0x50>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	3b01      	subs	r3, #1
 800a69e:	4a09      	ldr	r2, [pc, #36]	; (800a6c4 <vPortExitCritical+0x50>)
 800a6a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a6a2:	4b08      	ldr	r3, [pc, #32]	; (800a6c4 <vPortExitCritical+0x50>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d105      	bne.n	800a6b6 <vPortExitCritical+0x42>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	f383 8811 	msr	BASEPRI, r3
}
 800a6b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a6b6:	bf00      	nop
 800a6b8:	370c      	adds	r7, #12
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	20000014 	.word	0x20000014
	...

0800a6d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a6d0:	f3ef 8009 	mrs	r0, PSP
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	4b15      	ldr	r3, [pc, #84]	; (800a730 <pxCurrentTCBConst>)
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	f01e 0f10 	tst.w	lr, #16
 800a6e0:	bf08      	it	eq
 800a6e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a6e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ea:	6010      	str	r0, [r2, #0]
 800a6ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a6f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a6f4:	f380 8811 	msr	BASEPRI, r0
 800a6f8:	f3bf 8f4f 	dsb	sy
 800a6fc:	f3bf 8f6f 	isb	sy
 800a700:	f7fe ffc0 	bl	8009684 <vTaskSwitchContext>
 800a704:	f04f 0000 	mov.w	r0, #0
 800a708:	f380 8811 	msr	BASEPRI, r0
 800a70c:	bc09      	pop	{r0, r3}
 800a70e:	6819      	ldr	r1, [r3, #0]
 800a710:	6808      	ldr	r0, [r1, #0]
 800a712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a716:	f01e 0f10 	tst.w	lr, #16
 800a71a:	bf08      	it	eq
 800a71c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a720:	f380 8809 	msr	PSP, r0
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	f3af 8000 	nop.w

0800a730 <pxCurrentTCBConst>:
 800a730:	200007a8 	.word	0x200007a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a734:	bf00      	nop
 800a736:	bf00      	nop

0800a738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
	__asm volatile
 800a73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a742:	f383 8811 	msr	BASEPRI, r3
 800a746:	f3bf 8f6f 	isb	sy
 800a74a:	f3bf 8f4f 	dsb	sy
 800a74e:	607b      	str	r3, [r7, #4]
}
 800a750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a752:	f7fe fedd 	bl	8009510 <xTaskIncrementTick>
 800a756:	4603      	mov	r3, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d003      	beq.n	800a764 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a75c:	4b06      	ldr	r3, [pc, #24]	; (800a778 <xPortSysTickHandler+0x40>)
 800a75e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a762:	601a      	str	r2, [r3, #0]
 800a764:	2300      	movs	r3, #0
 800a766:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	f383 8811 	msr	BASEPRI, r3
}
 800a76e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a770:	bf00      	nop
 800a772:	3708      	adds	r7, #8
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}
 800a778:	e000ed04 	.word	0xe000ed04

0800a77c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a77c:	b480      	push	{r7}
 800a77e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a780:	4b0b      	ldr	r3, [pc, #44]	; (800a7b0 <vPortSetupTimerInterrupt+0x34>)
 800a782:	2200      	movs	r2, #0
 800a784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a786:	4b0b      	ldr	r3, [pc, #44]	; (800a7b4 <vPortSetupTimerInterrupt+0x38>)
 800a788:	2200      	movs	r2, #0
 800a78a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a78c:	4b0a      	ldr	r3, [pc, #40]	; (800a7b8 <vPortSetupTimerInterrupt+0x3c>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a0a      	ldr	r2, [pc, #40]	; (800a7bc <vPortSetupTimerInterrupt+0x40>)
 800a792:	fba2 2303 	umull	r2, r3, r2, r3
 800a796:	099b      	lsrs	r3, r3, #6
 800a798:	4a09      	ldr	r2, [pc, #36]	; (800a7c0 <vPortSetupTimerInterrupt+0x44>)
 800a79a:	3b01      	subs	r3, #1
 800a79c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a79e:	4b04      	ldr	r3, [pc, #16]	; (800a7b0 <vPortSetupTimerInterrupt+0x34>)
 800a7a0:	2207      	movs	r2, #7
 800a7a2:	601a      	str	r2, [r3, #0]
}
 800a7a4:	bf00      	nop
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	e000e010 	.word	0xe000e010
 800a7b4:	e000e018 	.word	0xe000e018
 800a7b8:	20000008 	.word	0x20000008
 800a7bc:	10624dd3 	.word	0x10624dd3
 800a7c0:	e000e014 	.word	0xe000e014

0800a7c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a7c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a7d4 <vPortEnableVFP+0x10>
 800a7c8:	6801      	ldr	r1, [r0, #0]
 800a7ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a7ce:	6001      	str	r1, [r0, #0]
 800a7d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a7d2:	bf00      	nop
 800a7d4:	e000ed88 	.word	0xe000ed88

0800a7d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a7de:	f3ef 8305 	mrs	r3, IPSR
 800a7e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2b0f      	cmp	r3, #15
 800a7e8:	d914      	bls.n	800a814 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a7ea:	4a17      	ldr	r2, [pc, #92]	; (800a848 <vPortValidateInterruptPriority+0x70>)
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a7f4:	4b15      	ldr	r3, [pc, #84]	; (800a84c <vPortValidateInterruptPriority+0x74>)
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	7afa      	ldrb	r2, [r7, #11]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d20a      	bcs.n	800a814 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a802:	f383 8811 	msr	BASEPRI, r3
 800a806:	f3bf 8f6f 	isb	sy
 800a80a:	f3bf 8f4f 	dsb	sy
 800a80e:	607b      	str	r3, [r7, #4]
}
 800a810:	bf00      	nop
 800a812:	e7fe      	b.n	800a812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a814:	4b0e      	ldr	r3, [pc, #56]	; (800a850 <vPortValidateInterruptPriority+0x78>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a81c:	4b0d      	ldr	r3, [pc, #52]	; (800a854 <vPortValidateInterruptPriority+0x7c>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	429a      	cmp	r2, r3
 800a822:	d90a      	bls.n	800a83a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a828:	f383 8811 	msr	BASEPRI, r3
 800a82c:	f3bf 8f6f 	isb	sy
 800a830:	f3bf 8f4f 	dsb	sy
 800a834:	603b      	str	r3, [r7, #0]
}
 800a836:	bf00      	nop
 800a838:	e7fe      	b.n	800a838 <vPortValidateInterruptPriority+0x60>
	}
 800a83a:	bf00      	nop
 800a83c:	3714      	adds	r7, #20
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop
 800a848:	e000e3f0 	.word	0xe000e3f0
 800a84c:	20000dd4 	.word	0x20000dd4
 800a850:	e000ed0c 	.word	0xe000ed0c
 800a854:	20000dd8 	.word	0x20000dd8

0800a858 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b08a      	sub	sp, #40	; 0x28
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a860:	2300      	movs	r3, #0
 800a862:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a864:	f7fe fd98 	bl	8009398 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a868:	4b5b      	ldr	r3, [pc, #364]	; (800a9d8 <pvPortMalloc+0x180>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d101      	bne.n	800a874 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a870:	f000 f920 	bl	800aab4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a874:	4b59      	ldr	r3, [pc, #356]	; (800a9dc <pvPortMalloc+0x184>)
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	4013      	ands	r3, r2
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f040 8093 	bne.w	800a9a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d01d      	beq.n	800a8c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a888:	2208      	movs	r2, #8
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4413      	add	r3, r2
 800a88e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f003 0307 	and.w	r3, r3, #7
 800a896:	2b00      	cmp	r3, #0
 800a898:	d014      	beq.n	800a8c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f023 0307 	bic.w	r3, r3, #7
 800a8a0:	3308      	adds	r3, #8
 800a8a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f003 0307 	and.w	r3, r3, #7
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d00a      	beq.n	800a8c4 <pvPortMalloc+0x6c>
	__asm volatile
 800a8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b2:	f383 8811 	msr	BASEPRI, r3
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	617b      	str	r3, [r7, #20]
}
 800a8c0:	bf00      	nop
 800a8c2:	e7fe      	b.n	800a8c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d06e      	beq.n	800a9a8 <pvPortMalloc+0x150>
 800a8ca:	4b45      	ldr	r3, [pc, #276]	; (800a9e0 <pvPortMalloc+0x188>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d869      	bhi.n	800a9a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a8d4:	4b43      	ldr	r3, [pc, #268]	; (800a9e4 <pvPortMalloc+0x18c>)
 800a8d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a8d8:	4b42      	ldr	r3, [pc, #264]	; (800a9e4 <pvPortMalloc+0x18c>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8de:	e004      	b.n	800a8ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d903      	bls.n	800a8fc <pvPortMalloc+0xa4>
 800a8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d1f1      	bne.n	800a8e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a8fc:	4b36      	ldr	r3, [pc, #216]	; (800a9d8 <pvPortMalloc+0x180>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a902:	429a      	cmp	r2, r3
 800a904:	d050      	beq.n	800a9a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a906:	6a3b      	ldr	r3, [r7, #32]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	2208      	movs	r2, #8
 800a90c:	4413      	add	r3, r2
 800a90e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	6a3b      	ldr	r3, [r7, #32]
 800a916:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91a:	685a      	ldr	r2, [r3, #4]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	1ad2      	subs	r2, r2, r3
 800a920:	2308      	movs	r3, #8
 800a922:	005b      	lsls	r3, r3, #1
 800a924:	429a      	cmp	r2, r3
 800a926:	d91f      	bls.n	800a968 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4413      	add	r3, r2
 800a92e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	f003 0307 	and.w	r3, r3, #7
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00a      	beq.n	800a950 <pvPortMalloc+0xf8>
	__asm volatile
 800a93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93e:	f383 8811 	msr	BASEPRI, r3
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	f3bf 8f4f 	dsb	sy
 800a94a:	613b      	str	r3, [r7, #16]
}
 800a94c:	bf00      	nop
 800a94e:	e7fe      	b.n	800a94e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a952:	685a      	ldr	r2, [r3, #4]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	1ad2      	subs	r2, r2, r3
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a962:	69b8      	ldr	r0, [r7, #24]
 800a964:	f000 f908 	bl	800ab78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a968:	4b1d      	ldr	r3, [pc, #116]	; (800a9e0 <pvPortMalloc+0x188>)
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	4a1b      	ldr	r2, [pc, #108]	; (800a9e0 <pvPortMalloc+0x188>)
 800a974:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a976:	4b1a      	ldr	r3, [pc, #104]	; (800a9e0 <pvPortMalloc+0x188>)
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	4b1b      	ldr	r3, [pc, #108]	; (800a9e8 <pvPortMalloc+0x190>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d203      	bcs.n	800a98a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a982:	4b17      	ldr	r3, [pc, #92]	; (800a9e0 <pvPortMalloc+0x188>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a18      	ldr	r2, [pc, #96]	; (800a9e8 <pvPortMalloc+0x190>)
 800a988:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98c:	685a      	ldr	r2, [r3, #4]
 800a98e:	4b13      	ldr	r3, [pc, #76]	; (800a9dc <pvPortMalloc+0x184>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	431a      	orrs	r2, r3
 800a994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a996:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99a:	2200      	movs	r2, #0
 800a99c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a99e:	4b13      	ldr	r3, [pc, #76]	; (800a9ec <pvPortMalloc+0x194>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	4a11      	ldr	r2, [pc, #68]	; (800a9ec <pvPortMalloc+0x194>)
 800a9a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a9a8:	f7fe fd04 	bl	80093b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	f003 0307 	and.w	r3, r3, #7
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d00a      	beq.n	800a9cc <pvPortMalloc+0x174>
	__asm volatile
 800a9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ba:	f383 8811 	msr	BASEPRI, r3
 800a9be:	f3bf 8f6f 	isb	sy
 800a9c2:	f3bf 8f4f 	dsb	sy
 800a9c6:	60fb      	str	r3, [r7, #12]
}
 800a9c8:	bf00      	nop
 800a9ca:	e7fe      	b.n	800a9ca <pvPortMalloc+0x172>
	return pvReturn;
 800a9cc:	69fb      	ldr	r3, [r7, #28]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3728      	adds	r7, #40	; 0x28
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	200049e4 	.word	0x200049e4
 800a9dc:	200049f8 	.word	0x200049f8
 800a9e0:	200049e8 	.word	0x200049e8
 800a9e4:	200049dc 	.word	0x200049dc
 800a9e8:	200049ec 	.word	0x200049ec
 800a9ec:	200049f0 	.word	0x200049f0

0800a9f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b086      	sub	sp, #24
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d04d      	beq.n	800aa9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aa02:	2308      	movs	r3, #8
 800aa04:	425b      	negs	r3, r3
 800aa06:	697a      	ldr	r2, [r7, #20]
 800aa08:	4413      	add	r3, r2
 800aa0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	685a      	ldr	r2, [r3, #4]
 800aa14:	4b24      	ldr	r3, [pc, #144]	; (800aaa8 <vPortFree+0xb8>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4013      	ands	r3, r2
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d10a      	bne.n	800aa34 <vPortFree+0x44>
	__asm volatile
 800aa1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa22:	f383 8811 	msr	BASEPRI, r3
 800aa26:	f3bf 8f6f 	isb	sy
 800aa2a:	f3bf 8f4f 	dsb	sy
 800aa2e:	60fb      	str	r3, [r7, #12]
}
 800aa30:	bf00      	nop
 800aa32:	e7fe      	b.n	800aa32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00a      	beq.n	800aa52 <vPortFree+0x62>
	__asm volatile
 800aa3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa40:	f383 8811 	msr	BASEPRI, r3
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	f3bf 8f4f 	dsb	sy
 800aa4c:	60bb      	str	r3, [r7, #8]
}
 800aa4e:	bf00      	nop
 800aa50:	e7fe      	b.n	800aa50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	685a      	ldr	r2, [r3, #4]
 800aa56:	4b14      	ldr	r3, [pc, #80]	; (800aaa8 <vPortFree+0xb8>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4013      	ands	r3, r2
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d01e      	beq.n	800aa9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d11a      	bne.n	800aa9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	685a      	ldr	r2, [r3, #4]
 800aa6c:	4b0e      	ldr	r3, [pc, #56]	; (800aaa8 <vPortFree+0xb8>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	43db      	mvns	r3, r3
 800aa72:	401a      	ands	r2, r3
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aa78:	f7fe fc8e 	bl	8009398 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	685a      	ldr	r2, [r3, #4]
 800aa80:	4b0a      	ldr	r3, [pc, #40]	; (800aaac <vPortFree+0xbc>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4413      	add	r3, r2
 800aa86:	4a09      	ldr	r2, [pc, #36]	; (800aaac <vPortFree+0xbc>)
 800aa88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa8a:	6938      	ldr	r0, [r7, #16]
 800aa8c:	f000 f874 	bl	800ab78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aa90:	4b07      	ldr	r3, [pc, #28]	; (800aab0 <vPortFree+0xc0>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	3301      	adds	r3, #1
 800aa96:	4a06      	ldr	r2, [pc, #24]	; (800aab0 <vPortFree+0xc0>)
 800aa98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aa9a:	f7fe fc8b 	bl	80093b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aa9e:	bf00      	nop
 800aaa0:	3718      	adds	r7, #24
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	200049f8 	.word	0x200049f8
 800aaac:	200049e8 	.word	0x200049e8
 800aab0:	200049f4 	.word	0x200049f4

0800aab4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aaba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800aabe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aac0:	4b27      	ldr	r3, [pc, #156]	; (800ab60 <prvHeapInit+0xac>)
 800aac2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f003 0307 	and.w	r3, r3, #7
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00c      	beq.n	800aae8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	3307      	adds	r3, #7
 800aad2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f023 0307 	bic.w	r3, r3, #7
 800aada:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aadc:	68ba      	ldr	r2, [r7, #8]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	1ad3      	subs	r3, r2, r3
 800aae2:	4a1f      	ldr	r2, [pc, #124]	; (800ab60 <prvHeapInit+0xac>)
 800aae4:	4413      	add	r3, r2
 800aae6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aaec:	4a1d      	ldr	r2, [pc, #116]	; (800ab64 <prvHeapInit+0xb0>)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aaf2:	4b1c      	ldr	r3, [pc, #112]	; (800ab64 <prvHeapInit+0xb0>)
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	68ba      	ldr	r2, [r7, #8]
 800aafc:	4413      	add	r3, r2
 800aafe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ab00:	2208      	movs	r2, #8
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	1a9b      	subs	r3, r3, r2
 800ab06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f023 0307 	bic.w	r3, r3, #7
 800ab0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	4a15      	ldr	r2, [pc, #84]	; (800ab68 <prvHeapInit+0xb4>)
 800ab14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ab16:	4b14      	ldr	r3, [pc, #80]	; (800ab68 <prvHeapInit+0xb4>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ab1e:	4b12      	ldr	r3, [pc, #72]	; (800ab68 <prvHeapInit+0xb4>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2200      	movs	r2, #0
 800ab24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	1ad2      	subs	r2, r2, r3
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab34:	4b0c      	ldr	r3, [pc, #48]	; (800ab68 <prvHeapInit+0xb4>)
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	4a0a      	ldr	r2, [pc, #40]	; (800ab6c <prvHeapInit+0xb8>)
 800ab42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	4a09      	ldr	r2, [pc, #36]	; (800ab70 <prvHeapInit+0xbc>)
 800ab4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab4c:	4b09      	ldr	r3, [pc, #36]	; (800ab74 <prvHeapInit+0xc0>)
 800ab4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ab52:	601a      	str	r2, [r3, #0]
}
 800ab54:	bf00      	nop
 800ab56:	3714      	adds	r7, #20
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr
 800ab60:	20000ddc 	.word	0x20000ddc
 800ab64:	200049dc 	.word	0x200049dc
 800ab68:	200049e4 	.word	0x200049e4
 800ab6c:	200049ec 	.word	0x200049ec
 800ab70:	200049e8 	.word	0x200049e8
 800ab74:	200049f8 	.word	0x200049f8

0800ab78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab80:	4b28      	ldr	r3, [pc, #160]	; (800ac24 <prvInsertBlockIntoFreeList+0xac>)
 800ab82:	60fb      	str	r3, [r7, #12]
 800ab84:	e002      	b.n	800ab8c <prvInsertBlockIntoFreeList+0x14>
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	60fb      	str	r3, [r7, #12]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d8f7      	bhi.n	800ab86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	68ba      	ldr	r2, [r7, #8]
 800aba0:	4413      	add	r3, r2
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d108      	bne.n	800abba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	685a      	ldr	r2, [r3, #4]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	441a      	add	r2, r3
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	68ba      	ldr	r2, [r7, #8]
 800abc4:	441a      	add	r2, r3
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d118      	bne.n	800ac00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	4b15      	ldr	r3, [pc, #84]	; (800ac28 <prvInsertBlockIntoFreeList+0xb0>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d00d      	beq.n	800abf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	685a      	ldr	r2, [r3, #4]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	441a      	add	r2, r3
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	601a      	str	r2, [r3, #0]
 800abf4:	e008      	b.n	800ac08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800abf6:	4b0c      	ldr	r3, [pc, #48]	; (800ac28 <prvInsertBlockIntoFreeList+0xb0>)
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	601a      	str	r2, [r3, #0]
 800abfe:	e003      	b.n	800ac08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d002      	beq.n	800ac16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac16:	bf00      	nop
 800ac18:	3714      	adds	r7, #20
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	200049dc 	.word	0x200049dc
 800ac28:	200049e4 	.word	0x200049e4

0800ac2c <OLED_Refresh_Gram>:
#include "stdlib.h"
#include "oledfont.h"  

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800ac32:	2300      	movs	r3, #0
 800ac34:	71fb      	strb	r3, [r7, #7]
 800ac36:	e026      	b.n	800ac86 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800ac38:	79fb      	ldrb	r3, [r7, #7]
 800ac3a:	3b50      	subs	r3, #80	; 0x50
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	2100      	movs	r1, #0
 800ac40:	4618      	mov	r0, r3
 800ac42:	f000 f82b 	bl	800ac9c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800ac46:	2100      	movs	r1, #0
 800ac48:	2000      	movs	r0, #0
 800ac4a:	f000 f827 	bl	800ac9c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800ac4e:	2100      	movs	r1, #0
 800ac50:	2010      	movs	r0, #16
 800ac52:	f000 f823 	bl	800ac9c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800ac56:	2300      	movs	r3, #0
 800ac58:	71bb      	strb	r3, [r7, #6]
 800ac5a:	e00d      	b.n	800ac78 <OLED_Refresh_Gram+0x4c>
 800ac5c:	79ba      	ldrb	r2, [r7, #6]
 800ac5e:	79fb      	ldrb	r3, [r7, #7]
 800ac60:	490d      	ldr	r1, [pc, #52]	; (800ac98 <OLED_Refresh_Gram+0x6c>)
 800ac62:	00d2      	lsls	r2, r2, #3
 800ac64:	440a      	add	r2, r1
 800ac66:	4413      	add	r3, r2
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	2101      	movs	r1, #1
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f000 f815 	bl	800ac9c <OLED_WR_Byte>
 800ac72:	79bb      	ldrb	r3, [r7, #6]
 800ac74:	3301      	adds	r3, #1
 800ac76:	71bb      	strb	r3, [r7, #6]
 800ac78:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	daed      	bge.n	800ac5c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800ac80:	79fb      	ldrb	r3, [r7, #7]
 800ac82:	3301      	adds	r3, #1
 800ac84:	71fb      	strb	r3, [r7, #7]
 800ac86:	79fb      	ldrb	r3, [r7, #7]
 800ac88:	2b07      	cmp	r3, #7
 800ac8a:	d9d5      	bls.n	800ac38 <OLED_Refresh_Gram+0xc>
	}   
}
 800ac8c:	bf00      	nop
 800ac8e:	bf00      	nop
 800ac90:	3708      	adds	r7, #8
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	20004d44 	.word	0x20004d44

0800ac9c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	4603      	mov	r3, r0
 800aca4:	460a      	mov	r2, r1
 800aca6:	71fb      	strb	r3, [r7, #7]
 800aca8:	4613      	mov	r3, r2
 800acaa:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800acac:	79bb      	ldrb	r3, [r7, #6]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d006      	beq.n	800acc0 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800acb2:	2201      	movs	r2, #1
 800acb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800acb8:	481c      	ldr	r0, [pc, #112]	; (800ad2c <OLED_WR_Byte+0x90>)
 800acba:	f7f9 fe61 	bl	8004980 <HAL_GPIO_WritePin>
 800acbe:	e005      	b.n	800accc <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800acc0:	2200      	movs	r2, #0
 800acc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800acc6:	4819      	ldr	r0, [pc, #100]	; (800ad2c <OLED_WR_Byte+0x90>)
 800acc8:	f7f9 fe5a 	bl	8004980 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800accc:	2300      	movs	r3, #0
 800acce:	73fb      	strb	r3, [r7, #15]
 800acd0:	e01e      	b.n	800ad10 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800acd2:	2200      	movs	r2, #0
 800acd4:	2120      	movs	r1, #32
 800acd6:	4815      	ldr	r0, [pc, #84]	; (800ad2c <OLED_WR_Byte+0x90>)
 800acd8:	f7f9 fe52 	bl	8004980 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800acdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	da05      	bge.n	800acf0 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800ace4:	2201      	movs	r2, #1
 800ace6:	2140      	movs	r1, #64	; 0x40
 800ace8:	4810      	ldr	r0, [pc, #64]	; (800ad2c <OLED_WR_Byte+0x90>)
 800acea:	f7f9 fe49 	bl	8004980 <HAL_GPIO_WritePin>
 800acee:	e004      	b.n	800acfa <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800acf0:	2200      	movs	r2, #0
 800acf2:	2140      	movs	r1, #64	; 0x40
 800acf4:	480d      	ldr	r0, [pc, #52]	; (800ad2c <OLED_WR_Byte+0x90>)
 800acf6:	f7f9 fe43 	bl	8004980 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800acfa:	2201      	movs	r2, #1
 800acfc:	2120      	movs	r1, #32
 800acfe:	480b      	ldr	r0, [pc, #44]	; (800ad2c <OLED_WR_Byte+0x90>)
 800ad00:	f7f9 fe3e 	bl	8004980 <HAL_GPIO_WritePin>
		dat<<=1;
 800ad04:	79fb      	ldrb	r3, [r7, #7]
 800ad06:	005b      	lsls	r3, r3, #1
 800ad08:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800ad0a:	7bfb      	ldrb	r3, [r7, #15]
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	73fb      	strb	r3, [r7, #15]
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
 800ad12:	2b07      	cmp	r3, #7
 800ad14:	d9dd      	bls.n	800acd2 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800ad16:	2201      	movs	r2, #1
 800ad18:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad1c:	4803      	ldr	r0, [pc, #12]	; (800ad2c <OLED_WR_Byte+0x90>)
 800ad1e:	f7f9 fe2f 	bl	8004980 <HAL_GPIO_WritePin>
} 
 800ad22:	bf00      	nop
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	40021000 	.word	0x40021000

0800ad30 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800ad36:	2300      	movs	r3, #0
 800ad38:	71fb      	strb	r3, [r7, #7]
 800ad3a:	e014      	b.n	800ad66 <OLED_Clear+0x36>
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	71bb      	strb	r3, [r7, #6]
 800ad40:	e00a      	b.n	800ad58 <OLED_Clear+0x28>
 800ad42:	79ba      	ldrb	r2, [r7, #6]
 800ad44:	79fb      	ldrb	r3, [r7, #7]
 800ad46:	490c      	ldr	r1, [pc, #48]	; (800ad78 <OLED_Clear+0x48>)
 800ad48:	00d2      	lsls	r2, r2, #3
 800ad4a:	440a      	add	r2, r1
 800ad4c:	4413      	add	r3, r2
 800ad4e:	2200      	movs	r2, #0
 800ad50:	701a      	strb	r2, [r3, #0]
 800ad52:	79bb      	ldrb	r3, [r7, #6]
 800ad54:	3301      	adds	r3, #1
 800ad56:	71bb      	strb	r3, [r7, #6]
 800ad58:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	daf0      	bge.n	800ad42 <OLED_Clear+0x12>
 800ad60:	79fb      	ldrb	r3, [r7, #7]
 800ad62:	3301      	adds	r3, #1
 800ad64:	71fb      	strb	r3, [r7, #7]
 800ad66:	79fb      	ldrb	r3, [r7, #7]
 800ad68:	2b07      	cmp	r3, #7
 800ad6a:	d9e7      	bls.n	800ad3c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800ad6c:	f7ff ff5e 	bl	800ac2c <OLED_Refresh_Gram>
}
 800ad70:	bf00      	nop
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	20004d44 	.word	0x20004d44

0800ad7c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b085      	sub	sp, #20
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	4603      	mov	r3, r0
 800ad84:	71fb      	strb	r3, [r7, #7]
 800ad86:	460b      	mov	r3, r1
 800ad88:	71bb      	strb	r3, [r7, #6]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800ad92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	db41      	blt.n	800ae1e <OLED_DrawPoint+0xa2>
 800ad9a:	79bb      	ldrb	r3, [r7, #6]
 800ad9c:	2b3f      	cmp	r3, #63	; 0x3f
 800ad9e:	d83e      	bhi.n	800ae1e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800ada0:	79bb      	ldrb	r3, [r7, #6]
 800ada2:	08db      	lsrs	r3, r3, #3
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	f1c3 0307 	rsb	r3, r3, #7
 800adaa:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800adac:	79bb      	ldrb	r3, [r7, #6]
 800adae:	f003 0307 	and.w	r3, r3, #7
 800adb2:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800adb4:	7b7b      	ldrb	r3, [r7, #13]
 800adb6:	f1c3 0307 	rsb	r3, r3, #7
 800adba:	2201      	movs	r2, #1
 800adbc:	fa02 f303 	lsl.w	r3, r2, r3
 800adc0:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800adc2:	797b      	ldrb	r3, [r7, #5]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d012      	beq.n	800adee <OLED_DrawPoint+0x72>
 800adc8:	79fa      	ldrb	r2, [r7, #7]
 800adca:	7bbb      	ldrb	r3, [r7, #14]
 800adcc:	4917      	ldr	r1, [pc, #92]	; (800ae2c <OLED_DrawPoint+0xb0>)
 800adce:	00d2      	lsls	r2, r2, #3
 800add0:	440a      	add	r2, r1
 800add2:	4413      	add	r3, r2
 800add4:	7818      	ldrb	r0, [r3, #0]
 800add6:	79fa      	ldrb	r2, [r7, #7]
 800add8:	7bbb      	ldrb	r3, [r7, #14]
 800adda:	7bf9      	ldrb	r1, [r7, #15]
 800addc:	4301      	orrs	r1, r0
 800adde:	b2c8      	uxtb	r0, r1
 800ade0:	4912      	ldr	r1, [pc, #72]	; (800ae2c <OLED_DrawPoint+0xb0>)
 800ade2:	00d2      	lsls	r2, r2, #3
 800ade4:	440a      	add	r2, r1
 800ade6:	4413      	add	r3, r2
 800ade8:	4602      	mov	r2, r0
 800adea:	701a      	strb	r2, [r3, #0]
 800adec:	e018      	b.n	800ae20 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800adee:	79fa      	ldrb	r2, [r7, #7]
 800adf0:	7bbb      	ldrb	r3, [r7, #14]
 800adf2:	490e      	ldr	r1, [pc, #56]	; (800ae2c <OLED_DrawPoint+0xb0>)
 800adf4:	00d2      	lsls	r2, r2, #3
 800adf6:	440a      	add	r2, r1
 800adf8:	4413      	add	r3, r2
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	b25a      	sxtb	r2, r3
 800adfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae02:	43db      	mvns	r3, r3
 800ae04:	b25b      	sxtb	r3, r3
 800ae06:	4013      	ands	r3, r2
 800ae08:	b259      	sxtb	r1, r3
 800ae0a:	79fa      	ldrb	r2, [r7, #7]
 800ae0c:	7bbb      	ldrb	r3, [r7, #14]
 800ae0e:	b2c8      	uxtb	r0, r1
 800ae10:	4906      	ldr	r1, [pc, #24]	; (800ae2c <OLED_DrawPoint+0xb0>)
 800ae12:	00d2      	lsls	r2, r2, #3
 800ae14:	440a      	add	r2, r1
 800ae16:	4413      	add	r3, r2
 800ae18:	4602      	mov	r2, r0
 800ae1a:	701a      	strb	r2, [r3, #0]
 800ae1c:	e000      	b.n	800ae20 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800ae1e:	bf00      	nop
}
 800ae20:	3714      	adds	r7, #20
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop
 800ae2c:	20004d44 	.word	0x20004d44

0800ae30 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800ae30:	b590      	push	{r4, r7, lr}
 800ae32:	b085      	sub	sp, #20
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	4604      	mov	r4, r0
 800ae38:	4608      	mov	r0, r1
 800ae3a:	4611      	mov	r1, r2
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	4623      	mov	r3, r4
 800ae40:	71fb      	strb	r3, [r7, #7]
 800ae42:	4603      	mov	r3, r0
 800ae44:	71bb      	strb	r3, [r7, #6]
 800ae46:	460b      	mov	r3, r1
 800ae48:	717b      	strb	r3, [r7, #5]
 800ae4a:	4613      	mov	r3, r2
 800ae4c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800ae4e:	79bb      	ldrb	r3, [r7, #6]
 800ae50:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800ae52:	797b      	ldrb	r3, [r7, #5]
 800ae54:	3b20      	subs	r3, #32
 800ae56:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800ae58:	2300      	movs	r3, #0
 800ae5a:	73bb      	strb	r3, [r7, #14]
 800ae5c:	e04d      	b.n	800aefa <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800ae5e:	793b      	ldrb	r3, [r7, #4]
 800ae60:	2b0c      	cmp	r3, #12
 800ae62:	d10b      	bne.n	800ae7c <OLED_ShowChar+0x4c>
 800ae64:	797a      	ldrb	r2, [r7, #5]
 800ae66:	7bb9      	ldrb	r1, [r7, #14]
 800ae68:	4828      	ldr	r0, [pc, #160]	; (800af0c <OLED_ShowChar+0xdc>)
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	005b      	lsls	r3, r3, #1
 800ae6e:	4413      	add	r3, r2
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	4403      	add	r3, r0
 800ae74:	440b      	add	r3, r1
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	73fb      	strb	r3, [r7, #15]
 800ae7a:	e007      	b.n	800ae8c <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800ae7c:	797a      	ldrb	r2, [r7, #5]
 800ae7e:	7bbb      	ldrb	r3, [r7, #14]
 800ae80:	4923      	ldr	r1, [pc, #140]	; (800af10 <OLED_ShowChar+0xe0>)
 800ae82:	0112      	lsls	r2, r2, #4
 800ae84:	440a      	add	r2, r1
 800ae86:	4413      	add	r3, r2
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	737b      	strb	r3, [r7, #13]
 800ae90:	e02d      	b.n	800aeee <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800ae92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	da07      	bge.n	800aeaa <OLED_ShowChar+0x7a>
 800ae9a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800ae9e:	79b9      	ldrb	r1, [r7, #6]
 800aea0:	79fb      	ldrb	r3, [r7, #7]
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7ff ff6a 	bl	800ad7c <OLED_DrawPoint>
 800aea8:	e00c      	b.n	800aec4 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800aeaa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	bf0c      	ite	eq
 800aeb2:	2301      	moveq	r3, #1
 800aeb4:	2300      	movne	r3, #0
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	461a      	mov	r2, r3
 800aeba:	79b9      	ldrb	r1, [r7, #6]
 800aebc:	79fb      	ldrb	r3, [r7, #7]
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7ff ff5c 	bl	800ad7c <OLED_DrawPoint>
			temp<<=1;
 800aec4:	7bfb      	ldrb	r3, [r7, #15]
 800aec6:	005b      	lsls	r3, r3, #1
 800aec8:	73fb      	strb	r3, [r7, #15]
			y++;
 800aeca:	79bb      	ldrb	r3, [r7, #6]
 800aecc:	3301      	adds	r3, #1
 800aece:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800aed0:	79ba      	ldrb	r2, [r7, #6]
 800aed2:	7b3b      	ldrb	r3, [r7, #12]
 800aed4:	1ad2      	subs	r2, r2, r3
 800aed6:	793b      	ldrb	r3, [r7, #4]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d105      	bne.n	800aee8 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800aedc:	7b3b      	ldrb	r3, [r7, #12]
 800aede:	71bb      	strb	r3, [r7, #6]
				x++;
 800aee0:	79fb      	ldrb	r3, [r7, #7]
 800aee2:	3301      	adds	r3, #1
 800aee4:	71fb      	strb	r3, [r7, #7]
				break;
 800aee6:	e005      	b.n	800aef4 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800aee8:	7b7b      	ldrb	r3, [r7, #13]
 800aeea:	3301      	adds	r3, #1
 800aeec:	737b      	strb	r3, [r7, #13]
 800aeee:	7b7b      	ldrb	r3, [r7, #13]
 800aef0:	2b07      	cmp	r3, #7
 800aef2:	d9ce      	bls.n	800ae92 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800aef4:	7bbb      	ldrb	r3, [r7, #14]
 800aef6:	3301      	adds	r3, #1
 800aef8:	73bb      	strb	r3, [r7, #14]
 800aefa:	7bba      	ldrb	r2, [r7, #14]
 800aefc:	793b      	ldrb	r3, [r7, #4]
 800aefe:	429a      	cmp	r2, r3
 800af00:	d3ad      	bcc.n	800ae5e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800af02:	bf00      	nop
 800af04:	bf00      	nop
 800af06:	3714      	adds	r7, #20
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd90      	pop	{r4, r7, pc}
 800af0c:	0800c9dc 	.word	0x0800c9dc
 800af10:	0800ce50 	.word	0x0800ce50

0800af14 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af02      	add	r7, sp, #8
 800af1a:	4603      	mov	r3, r0
 800af1c:	603a      	str	r2, [r7, #0]
 800af1e:	71fb      	strb	r3, [r7, #7]
 800af20:	460b      	mov	r3, r1
 800af22:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800af24:	e01f      	b.n	800af66 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800af26:	79fb      	ldrb	r3, [r7, #7]
 800af28:	2b7a      	cmp	r3, #122	; 0x7a
 800af2a:	d904      	bls.n	800af36 <OLED_ShowString+0x22>
 800af2c:	2300      	movs	r3, #0
 800af2e:	71fb      	strb	r3, [r7, #7]
 800af30:	79bb      	ldrb	r3, [r7, #6]
 800af32:	3310      	adds	r3, #16
 800af34:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800af36:	79bb      	ldrb	r3, [r7, #6]
 800af38:	2b3a      	cmp	r3, #58	; 0x3a
 800af3a:	d905      	bls.n	800af48 <OLED_ShowString+0x34>
 800af3c:	2300      	movs	r3, #0
 800af3e:	71fb      	strb	r3, [r7, #7]
 800af40:	79fb      	ldrb	r3, [r7, #7]
 800af42:	71bb      	strb	r3, [r7, #6]
 800af44:	f7ff fef4 	bl	800ad30 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	781a      	ldrb	r2, [r3, #0]
 800af4c:	79b9      	ldrb	r1, [r7, #6]
 800af4e:	79f8      	ldrb	r0, [r7, #7]
 800af50:	2301      	movs	r3, #1
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	230c      	movs	r3, #12
 800af56:	f7ff ff6b 	bl	800ae30 <OLED_ShowChar>
        x+=8;
 800af5a:	79fb      	ldrb	r3, [r7, #7]
 800af5c:	3308      	adds	r3, #8
 800af5e:	71fb      	strb	r3, [r7, #7]
        p++;
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	3301      	adds	r3, #1
 800af64:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d1db      	bne.n	800af26 <OLED_ShowString+0x12>
    }  
}	 
 800af6e:	bf00      	nop
 800af70:	bf00      	nop
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <OLED_Init>:

void OLED_Init(void)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800af7c:	f7f9 fd1a 	bl	80049b4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800af80:	4b41      	ldr	r3, [pc, #260]	; (800b088 <OLED_Init+0x110>)
 800af82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af84:	4a40      	ldr	r2, [pc, #256]	; (800b088 <OLED_Init+0x110>)
 800af86:	f023 0301 	bic.w	r3, r3, #1
 800af8a:	6713      	str	r3, [r2, #112]	; 0x70
 800af8c:	4b3e      	ldr	r3, [pc, #248]	; (800b088 <OLED_Init+0x110>)
 800af8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af90:	4a3d      	ldr	r2, [pc, #244]	; (800b088 <OLED_Init+0x110>)
 800af92:	f023 0304 	bic.w	r3, r3, #4
 800af96:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800af98:	f7f9 fd20 	bl	80049dc <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800af9c:	2200      	movs	r2, #0
 800af9e:	2180      	movs	r1, #128	; 0x80
 800afa0:	483a      	ldr	r0, [pc, #232]	; (800b08c <OLED_Init+0x114>)
 800afa2:	f7f9 fced 	bl	8004980 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800afa6:	2064      	movs	r0, #100	; 0x64
 800afa8:	f7f8 fe44 	bl	8003c34 <HAL_Delay>
	OLED_RST_Set();
 800afac:	2201      	movs	r2, #1
 800afae:	2180      	movs	r1, #128	; 0x80
 800afb0:	4836      	ldr	r0, [pc, #216]	; (800b08c <OLED_Init+0x114>)
 800afb2:	f7f9 fce5 	bl	8004980 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800afb6:	2100      	movs	r1, #0
 800afb8:	20ae      	movs	r0, #174	; 0xae
 800afba:	f7ff fe6f 	bl	800ac9c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800afbe:	2100      	movs	r1, #0
 800afc0:	20d5      	movs	r0, #213	; 0xd5
 800afc2:	f7ff fe6b 	bl	800ac9c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800afc6:	2100      	movs	r1, #0
 800afc8:	2050      	movs	r0, #80	; 0x50
 800afca:	f7ff fe67 	bl	800ac9c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800afce:	2100      	movs	r1, #0
 800afd0:	20a8      	movs	r0, #168	; 0xa8
 800afd2:	f7ff fe63 	bl	800ac9c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800afd6:	2100      	movs	r1, #0
 800afd8:	203f      	movs	r0, #63	; 0x3f
 800afda:	f7ff fe5f 	bl	800ac9c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800afde:	2100      	movs	r1, #0
 800afe0:	20d3      	movs	r0, #211	; 0xd3
 800afe2:	f7ff fe5b 	bl	800ac9c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800afe6:	2100      	movs	r1, #0
 800afe8:	2000      	movs	r0, #0
 800afea:	f7ff fe57 	bl	800ac9c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800afee:	2100      	movs	r1, #0
 800aff0:	2040      	movs	r0, #64	; 0x40
 800aff2:	f7ff fe53 	bl	800ac9c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800aff6:	2100      	movs	r1, #0
 800aff8:	208d      	movs	r0, #141	; 0x8d
 800affa:	f7ff fe4f 	bl	800ac9c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800affe:	2100      	movs	r1, #0
 800b000:	2014      	movs	r0, #20
 800b002:	f7ff fe4b 	bl	800ac9c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800b006:	2100      	movs	r1, #0
 800b008:	2020      	movs	r0, #32
 800b00a:	f7ff fe47 	bl	800ac9c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800b00e:	2100      	movs	r1, #0
 800b010:	2002      	movs	r0, #2
 800b012:	f7ff fe43 	bl	800ac9c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800b016:	2100      	movs	r1, #0
 800b018:	20a1      	movs	r0, #161	; 0xa1
 800b01a:	f7ff fe3f 	bl	800ac9c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800b01e:	2100      	movs	r1, #0
 800b020:	20c0      	movs	r0, #192	; 0xc0
 800b022:	f7ff fe3b 	bl	800ac9c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800b026:	2100      	movs	r1, #0
 800b028:	20da      	movs	r0, #218	; 0xda
 800b02a:	f7ff fe37 	bl	800ac9c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800b02e:	2100      	movs	r1, #0
 800b030:	2012      	movs	r0, #18
 800b032:	f7ff fe33 	bl	800ac9c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800b036:	2100      	movs	r1, #0
 800b038:	2081      	movs	r0, #129	; 0x81
 800b03a:	f7ff fe2f 	bl	800ac9c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800b03e:	2100      	movs	r1, #0
 800b040:	20ef      	movs	r0, #239	; 0xef
 800b042:	f7ff fe2b 	bl	800ac9c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800b046:	2100      	movs	r1, #0
 800b048:	20d9      	movs	r0, #217	; 0xd9
 800b04a:	f7ff fe27 	bl	800ac9c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800b04e:	2100      	movs	r1, #0
 800b050:	20f1      	movs	r0, #241	; 0xf1
 800b052:	f7ff fe23 	bl	800ac9c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800b056:	2100      	movs	r1, #0
 800b058:	20db      	movs	r0, #219	; 0xdb
 800b05a:	f7ff fe1f 	bl	800ac9c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800b05e:	2100      	movs	r1, #0
 800b060:	2030      	movs	r0, #48	; 0x30
 800b062:	f7ff fe1b 	bl	800ac9c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800b066:	2100      	movs	r1, #0
 800b068:	20a4      	movs	r0, #164	; 0xa4
 800b06a:	f7ff fe17 	bl	800ac9c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800b06e:	2100      	movs	r1, #0
 800b070:	20a6      	movs	r0, #166	; 0xa6
 800b072:	f7ff fe13 	bl	800ac9c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800b076:	2100      	movs	r1, #0
 800b078:	20af      	movs	r0, #175	; 0xaf
 800b07a:	f7ff fe0f 	bl	800ac9c <OLED_WR_Byte>
	OLED_Clear(); 
 800b07e:	f7ff fe57 	bl	800ad30 <OLED_Clear>
}
 800b082:	bf00      	nop
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	40023800 	.word	0x40023800
 800b08c:	40021000 	.word	0x40021000

0800b090 <__errno>:
 800b090:	4b01      	ldr	r3, [pc, #4]	; (800b098 <__errno+0x8>)
 800b092:	6818      	ldr	r0, [r3, #0]
 800b094:	4770      	bx	lr
 800b096:	bf00      	nop
 800b098:	20000018 	.word	0x20000018

0800b09c <__libc_init_array>:
 800b09c:	b570      	push	{r4, r5, r6, lr}
 800b09e:	4d0d      	ldr	r5, [pc, #52]	; (800b0d4 <__libc_init_array+0x38>)
 800b0a0:	4c0d      	ldr	r4, [pc, #52]	; (800b0d8 <__libc_init_array+0x3c>)
 800b0a2:	1b64      	subs	r4, r4, r5
 800b0a4:	10a4      	asrs	r4, r4, #2
 800b0a6:	2600      	movs	r6, #0
 800b0a8:	42a6      	cmp	r6, r4
 800b0aa:	d109      	bne.n	800b0c0 <__libc_init_array+0x24>
 800b0ac:	4d0b      	ldr	r5, [pc, #44]	; (800b0dc <__libc_init_array+0x40>)
 800b0ae:	4c0c      	ldr	r4, [pc, #48]	; (800b0e0 <__libc_init_array+0x44>)
 800b0b0:	f001 fc04 	bl	800c8bc <_init>
 800b0b4:	1b64      	subs	r4, r4, r5
 800b0b6:	10a4      	asrs	r4, r4, #2
 800b0b8:	2600      	movs	r6, #0
 800b0ba:	42a6      	cmp	r6, r4
 800b0bc:	d105      	bne.n	800b0ca <__libc_init_array+0x2e>
 800b0be:	bd70      	pop	{r4, r5, r6, pc}
 800b0c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0c4:	4798      	blx	r3
 800b0c6:	3601      	adds	r6, #1
 800b0c8:	e7ee      	b.n	800b0a8 <__libc_init_array+0xc>
 800b0ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0ce:	4798      	blx	r3
 800b0d0:	3601      	adds	r6, #1
 800b0d2:	e7f2      	b.n	800b0ba <__libc_init_array+0x1e>
 800b0d4:	0800d4c0 	.word	0x0800d4c0
 800b0d8:	0800d4c0 	.word	0x0800d4c0
 800b0dc:	0800d4c0 	.word	0x0800d4c0
 800b0e0:	0800d4c4 	.word	0x0800d4c4

0800b0e4 <memcpy>:
 800b0e4:	440a      	add	r2, r1
 800b0e6:	4291      	cmp	r1, r2
 800b0e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b0ec:	d100      	bne.n	800b0f0 <memcpy+0xc>
 800b0ee:	4770      	bx	lr
 800b0f0:	b510      	push	{r4, lr}
 800b0f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0fa:	4291      	cmp	r1, r2
 800b0fc:	d1f9      	bne.n	800b0f2 <memcpy+0xe>
 800b0fe:	bd10      	pop	{r4, pc}

0800b100 <memset>:
 800b100:	4402      	add	r2, r0
 800b102:	4603      	mov	r3, r0
 800b104:	4293      	cmp	r3, r2
 800b106:	d100      	bne.n	800b10a <memset+0xa>
 800b108:	4770      	bx	lr
 800b10a:	f803 1b01 	strb.w	r1, [r3], #1
 800b10e:	e7f9      	b.n	800b104 <memset+0x4>

0800b110 <siprintf>:
 800b110:	b40e      	push	{r1, r2, r3}
 800b112:	b500      	push	{lr}
 800b114:	b09c      	sub	sp, #112	; 0x70
 800b116:	ab1d      	add	r3, sp, #116	; 0x74
 800b118:	9002      	str	r0, [sp, #8]
 800b11a:	9006      	str	r0, [sp, #24]
 800b11c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b120:	4809      	ldr	r0, [pc, #36]	; (800b148 <siprintf+0x38>)
 800b122:	9107      	str	r1, [sp, #28]
 800b124:	9104      	str	r1, [sp, #16]
 800b126:	4909      	ldr	r1, [pc, #36]	; (800b14c <siprintf+0x3c>)
 800b128:	f853 2b04 	ldr.w	r2, [r3], #4
 800b12c:	9105      	str	r1, [sp, #20]
 800b12e:	6800      	ldr	r0, [r0, #0]
 800b130:	9301      	str	r3, [sp, #4]
 800b132:	a902      	add	r1, sp, #8
 800b134:	f000 f868 	bl	800b208 <_svfiprintf_r>
 800b138:	9b02      	ldr	r3, [sp, #8]
 800b13a:	2200      	movs	r2, #0
 800b13c:	701a      	strb	r2, [r3, #0]
 800b13e:	b01c      	add	sp, #112	; 0x70
 800b140:	f85d eb04 	ldr.w	lr, [sp], #4
 800b144:	b003      	add	sp, #12
 800b146:	4770      	bx	lr
 800b148:	20000018 	.word	0x20000018
 800b14c:	ffff0208 	.word	0xffff0208

0800b150 <__ssputs_r>:
 800b150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b154:	688e      	ldr	r6, [r1, #8]
 800b156:	429e      	cmp	r6, r3
 800b158:	4682      	mov	sl, r0
 800b15a:	460c      	mov	r4, r1
 800b15c:	4690      	mov	r8, r2
 800b15e:	461f      	mov	r7, r3
 800b160:	d838      	bhi.n	800b1d4 <__ssputs_r+0x84>
 800b162:	898a      	ldrh	r2, [r1, #12]
 800b164:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b168:	d032      	beq.n	800b1d0 <__ssputs_r+0x80>
 800b16a:	6825      	ldr	r5, [r4, #0]
 800b16c:	6909      	ldr	r1, [r1, #16]
 800b16e:	eba5 0901 	sub.w	r9, r5, r1
 800b172:	6965      	ldr	r5, [r4, #20]
 800b174:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b178:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b17c:	3301      	adds	r3, #1
 800b17e:	444b      	add	r3, r9
 800b180:	106d      	asrs	r5, r5, #1
 800b182:	429d      	cmp	r5, r3
 800b184:	bf38      	it	cc
 800b186:	461d      	movcc	r5, r3
 800b188:	0553      	lsls	r3, r2, #21
 800b18a:	d531      	bpl.n	800b1f0 <__ssputs_r+0xa0>
 800b18c:	4629      	mov	r1, r5
 800b18e:	f000 fb39 	bl	800b804 <_malloc_r>
 800b192:	4606      	mov	r6, r0
 800b194:	b950      	cbnz	r0, 800b1ac <__ssputs_r+0x5c>
 800b196:	230c      	movs	r3, #12
 800b198:	f8ca 3000 	str.w	r3, [sl]
 800b19c:	89a3      	ldrh	r3, [r4, #12]
 800b19e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1a2:	81a3      	strh	r3, [r4, #12]
 800b1a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ac:	6921      	ldr	r1, [r4, #16]
 800b1ae:	464a      	mov	r2, r9
 800b1b0:	f7ff ff98 	bl	800b0e4 <memcpy>
 800b1b4:	89a3      	ldrh	r3, [r4, #12]
 800b1b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b1ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1be:	81a3      	strh	r3, [r4, #12]
 800b1c0:	6126      	str	r6, [r4, #16]
 800b1c2:	6165      	str	r5, [r4, #20]
 800b1c4:	444e      	add	r6, r9
 800b1c6:	eba5 0509 	sub.w	r5, r5, r9
 800b1ca:	6026      	str	r6, [r4, #0]
 800b1cc:	60a5      	str	r5, [r4, #8]
 800b1ce:	463e      	mov	r6, r7
 800b1d0:	42be      	cmp	r6, r7
 800b1d2:	d900      	bls.n	800b1d6 <__ssputs_r+0x86>
 800b1d4:	463e      	mov	r6, r7
 800b1d6:	4632      	mov	r2, r6
 800b1d8:	6820      	ldr	r0, [r4, #0]
 800b1da:	4641      	mov	r1, r8
 800b1dc:	f000 faa8 	bl	800b730 <memmove>
 800b1e0:	68a3      	ldr	r3, [r4, #8]
 800b1e2:	6822      	ldr	r2, [r4, #0]
 800b1e4:	1b9b      	subs	r3, r3, r6
 800b1e6:	4432      	add	r2, r6
 800b1e8:	60a3      	str	r3, [r4, #8]
 800b1ea:	6022      	str	r2, [r4, #0]
 800b1ec:	2000      	movs	r0, #0
 800b1ee:	e7db      	b.n	800b1a8 <__ssputs_r+0x58>
 800b1f0:	462a      	mov	r2, r5
 800b1f2:	f000 fb61 	bl	800b8b8 <_realloc_r>
 800b1f6:	4606      	mov	r6, r0
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	d1e1      	bne.n	800b1c0 <__ssputs_r+0x70>
 800b1fc:	6921      	ldr	r1, [r4, #16]
 800b1fe:	4650      	mov	r0, sl
 800b200:	f000 fab0 	bl	800b764 <_free_r>
 800b204:	e7c7      	b.n	800b196 <__ssputs_r+0x46>
	...

0800b208 <_svfiprintf_r>:
 800b208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b20c:	4698      	mov	r8, r3
 800b20e:	898b      	ldrh	r3, [r1, #12]
 800b210:	061b      	lsls	r3, r3, #24
 800b212:	b09d      	sub	sp, #116	; 0x74
 800b214:	4607      	mov	r7, r0
 800b216:	460d      	mov	r5, r1
 800b218:	4614      	mov	r4, r2
 800b21a:	d50e      	bpl.n	800b23a <_svfiprintf_r+0x32>
 800b21c:	690b      	ldr	r3, [r1, #16]
 800b21e:	b963      	cbnz	r3, 800b23a <_svfiprintf_r+0x32>
 800b220:	2140      	movs	r1, #64	; 0x40
 800b222:	f000 faef 	bl	800b804 <_malloc_r>
 800b226:	6028      	str	r0, [r5, #0]
 800b228:	6128      	str	r0, [r5, #16]
 800b22a:	b920      	cbnz	r0, 800b236 <_svfiprintf_r+0x2e>
 800b22c:	230c      	movs	r3, #12
 800b22e:	603b      	str	r3, [r7, #0]
 800b230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b234:	e0d1      	b.n	800b3da <_svfiprintf_r+0x1d2>
 800b236:	2340      	movs	r3, #64	; 0x40
 800b238:	616b      	str	r3, [r5, #20]
 800b23a:	2300      	movs	r3, #0
 800b23c:	9309      	str	r3, [sp, #36]	; 0x24
 800b23e:	2320      	movs	r3, #32
 800b240:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b244:	f8cd 800c 	str.w	r8, [sp, #12]
 800b248:	2330      	movs	r3, #48	; 0x30
 800b24a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b3f4 <_svfiprintf_r+0x1ec>
 800b24e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b252:	f04f 0901 	mov.w	r9, #1
 800b256:	4623      	mov	r3, r4
 800b258:	469a      	mov	sl, r3
 800b25a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b25e:	b10a      	cbz	r2, 800b264 <_svfiprintf_r+0x5c>
 800b260:	2a25      	cmp	r2, #37	; 0x25
 800b262:	d1f9      	bne.n	800b258 <_svfiprintf_r+0x50>
 800b264:	ebba 0b04 	subs.w	fp, sl, r4
 800b268:	d00b      	beq.n	800b282 <_svfiprintf_r+0x7a>
 800b26a:	465b      	mov	r3, fp
 800b26c:	4622      	mov	r2, r4
 800b26e:	4629      	mov	r1, r5
 800b270:	4638      	mov	r0, r7
 800b272:	f7ff ff6d 	bl	800b150 <__ssputs_r>
 800b276:	3001      	adds	r0, #1
 800b278:	f000 80aa 	beq.w	800b3d0 <_svfiprintf_r+0x1c8>
 800b27c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b27e:	445a      	add	r2, fp
 800b280:	9209      	str	r2, [sp, #36]	; 0x24
 800b282:	f89a 3000 	ldrb.w	r3, [sl]
 800b286:	2b00      	cmp	r3, #0
 800b288:	f000 80a2 	beq.w	800b3d0 <_svfiprintf_r+0x1c8>
 800b28c:	2300      	movs	r3, #0
 800b28e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b292:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b296:	f10a 0a01 	add.w	sl, sl, #1
 800b29a:	9304      	str	r3, [sp, #16]
 800b29c:	9307      	str	r3, [sp, #28]
 800b29e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2a2:	931a      	str	r3, [sp, #104]	; 0x68
 800b2a4:	4654      	mov	r4, sl
 800b2a6:	2205      	movs	r2, #5
 800b2a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2ac:	4851      	ldr	r0, [pc, #324]	; (800b3f4 <_svfiprintf_r+0x1ec>)
 800b2ae:	f7f4 ff97 	bl	80001e0 <memchr>
 800b2b2:	9a04      	ldr	r2, [sp, #16]
 800b2b4:	b9d8      	cbnz	r0, 800b2ee <_svfiprintf_r+0xe6>
 800b2b6:	06d0      	lsls	r0, r2, #27
 800b2b8:	bf44      	itt	mi
 800b2ba:	2320      	movmi	r3, #32
 800b2bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2c0:	0711      	lsls	r1, r2, #28
 800b2c2:	bf44      	itt	mi
 800b2c4:	232b      	movmi	r3, #43	; 0x2b
 800b2c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b2ce:	2b2a      	cmp	r3, #42	; 0x2a
 800b2d0:	d015      	beq.n	800b2fe <_svfiprintf_r+0xf6>
 800b2d2:	9a07      	ldr	r2, [sp, #28]
 800b2d4:	4654      	mov	r4, sl
 800b2d6:	2000      	movs	r0, #0
 800b2d8:	f04f 0c0a 	mov.w	ip, #10
 800b2dc:	4621      	mov	r1, r4
 800b2de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2e2:	3b30      	subs	r3, #48	; 0x30
 800b2e4:	2b09      	cmp	r3, #9
 800b2e6:	d94e      	bls.n	800b386 <_svfiprintf_r+0x17e>
 800b2e8:	b1b0      	cbz	r0, 800b318 <_svfiprintf_r+0x110>
 800b2ea:	9207      	str	r2, [sp, #28]
 800b2ec:	e014      	b.n	800b318 <_svfiprintf_r+0x110>
 800b2ee:	eba0 0308 	sub.w	r3, r0, r8
 800b2f2:	fa09 f303 	lsl.w	r3, r9, r3
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	9304      	str	r3, [sp, #16]
 800b2fa:	46a2      	mov	sl, r4
 800b2fc:	e7d2      	b.n	800b2a4 <_svfiprintf_r+0x9c>
 800b2fe:	9b03      	ldr	r3, [sp, #12]
 800b300:	1d19      	adds	r1, r3, #4
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	9103      	str	r1, [sp, #12]
 800b306:	2b00      	cmp	r3, #0
 800b308:	bfbb      	ittet	lt
 800b30a:	425b      	neglt	r3, r3
 800b30c:	f042 0202 	orrlt.w	r2, r2, #2
 800b310:	9307      	strge	r3, [sp, #28]
 800b312:	9307      	strlt	r3, [sp, #28]
 800b314:	bfb8      	it	lt
 800b316:	9204      	strlt	r2, [sp, #16]
 800b318:	7823      	ldrb	r3, [r4, #0]
 800b31a:	2b2e      	cmp	r3, #46	; 0x2e
 800b31c:	d10c      	bne.n	800b338 <_svfiprintf_r+0x130>
 800b31e:	7863      	ldrb	r3, [r4, #1]
 800b320:	2b2a      	cmp	r3, #42	; 0x2a
 800b322:	d135      	bne.n	800b390 <_svfiprintf_r+0x188>
 800b324:	9b03      	ldr	r3, [sp, #12]
 800b326:	1d1a      	adds	r2, r3, #4
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	9203      	str	r2, [sp, #12]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	bfb8      	it	lt
 800b330:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b334:	3402      	adds	r4, #2
 800b336:	9305      	str	r3, [sp, #20]
 800b338:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b404 <_svfiprintf_r+0x1fc>
 800b33c:	7821      	ldrb	r1, [r4, #0]
 800b33e:	2203      	movs	r2, #3
 800b340:	4650      	mov	r0, sl
 800b342:	f7f4 ff4d 	bl	80001e0 <memchr>
 800b346:	b140      	cbz	r0, 800b35a <_svfiprintf_r+0x152>
 800b348:	2340      	movs	r3, #64	; 0x40
 800b34a:	eba0 000a 	sub.w	r0, r0, sl
 800b34e:	fa03 f000 	lsl.w	r0, r3, r0
 800b352:	9b04      	ldr	r3, [sp, #16]
 800b354:	4303      	orrs	r3, r0
 800b356:	3401      	adds	r4, #1
 800b358:	9304      	str	r3, [sp, #16]
 800b35a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b35e:	4826      	ldr	r0, [pc, #152]	; (800b3f8 <_svfiprintf_r+0x1f0>)
 800b360:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b364:	2206      	movs	r2, #6
 800b366:	f7f4 ff3b 	bl	80001e0 <memchr>
 800b36a:	2800      	cmp	r0, #0
 800b36c:	d038      	beq.n	800b3e0 <_svfiprintf_r+0x1d8>
 800b36e:	4b23      	ldr	r3, [pc, #140]	; (800b3fc <_svfiprintf_r+0x1f4>)
 800b370:	bb1b      	cbnz	r3, 800b3ba <_svfiprintf_r+0x1b2>
 800b372:	9b03      	ldr	r3, [sp, #12]
 800b374:	3307      	adds	r3, #7
 800b376:	f023 0307 	bic.w	r3, r3, #7
 800b37a:	3308      	adds	r3, #8
 800b37c:	9303      	str	r3, [sp, #12]
 800b37e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b380:	4433      	add	r3, r6
 800b382:	9309      	str	r3, [sp, #36]	; 0x24
 800b384:	e767      	b.n	800b256 <_svfiprintf_r+0x4e>
 800b386:	fb0c 3202 	mla	r2, ip, r2, r3
 800b38a:	460c      	mov	r4, r1
 800b38c:	2001      	movs	r0, #1
 800b38e:	e7a5      	b.n	800b2dc <_svfiprintf_r+0xd4>
 800b390:	2300      	movs	r3, #0
 800b392:	3401      	adds	r4, #1
 800b394:	9305      	str	r3, [sp, #20]
 800b396:	4619      	mov	r1, r3
 800b398:	f04f 0c0a 	mov.w	ip, #10
 800b39c:	4620      	mov	r0, r4
 800b39e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3a2:	3a30      	subs	r2, #48	; 0x30
 800b3a4:	2a09      	cmp	r2, #9
 800b3a6:	d903      	bls.n	800b3b0 <_svfiprintf_r+0x1a8>
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d0c5      	beq.n	800b338 <_svfiprintf_r+0x130>
 800b3ac:	9105      	str	r1, [sp, #20]
 800b3ae:	e7c3      	b.n	800b338 <_svfiprintf_r+0x130>
 800b3b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e7f0      	b.n	800b39c <_svfiprintf_r+0x194>
 800b3ba:	ab03      	add	r3, sp, #12
 800b3bc:	9300      	str	r3, [sp, #0]
 800b3be:	462a      	mov	r2, r5
 800b3c0:	4b0f      	ldr	r3, [pc, #60]	; (800b400 <_svfiprintf_r+0x1f8>)
 800b3c2:	a904      	add	r1, sp, #16
 800b3c4:	4638      	mov	r0, r7
 800b3c6:	f3af 8000 	nop.w
 800b3ca:	1c42      	adds	r2, r0, #1
 800b3cc:	4606      	mov	r6, r0
 800b3ce:	d1d6      	bne.n	800b37e <_svfiprintf_r+0x176>
 800b3d0:	89ab      	ldrh	r3, [r5, #12]
 800b3d2:	065b      	lsls	r3, r3, #25
 800b3d4:	f53f af2c 	bmi.w	800b230 <_svfiprintf_r+0x28>
 800b3d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3da:	b01d      	add	sp, #116	; 0x74
 800b3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e0:	ab03      	add	r3, sp, #12
 800b3e2:	9300      	str	r3, [sp, #0]
 800b3e4:	462a      	mov	r2, r5
 800b3e6:	4b06      	ldr	r3, [pc, #24]	; (800b400 <_svfiprintf_r+0x1f8>)
 800b3e8:	a904      	add	r1, sp, #16
 800b3ea:	4638      	mov	r0, r7
 800b3ec:	f000 f87a 	bl	800b4e4 <_printf_i>
 800b3f0:	e7eb      	b.n	800b3ca <_svfiprintf_r+0x1c2>
 800b3f2:	bf00      	nop
 800b3f4:	0800d440 	.word	0x0800d440
 800b3f8:	0800d44a 	.word	0x0800d44a
 800b3fc:	00000000 	.word	0x00000000
 800b400:	0800b151 	.word	0x0800b151
 800b404:	0800d446 	.word	0x0800d446

0800b408 <_printf_common>:
 800b408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b40c:	4616      	mov	r6, r2
 800b40e:	4699      	mov	r9, r3
 800b410:	688a      	ldr	r2, [r1, #8]
 800b412:	690b      	ldr	r3, [r1, #16]
 800b414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b418:	4293      	cmp	r3, r2
 800b41a:	bfb8      	it	lt
 800b41c:	4613      	movlt	r3, r2
 800b41e:	6033      	str	r3, [r6, #0]
 800b420:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b424:	4607      	mov	r7, r0
 800b426:	460c      	mov	r4, r1
 800b428:	b10a      	cbz	r2, 800b42e <_printf_common+0x26>
 800b42a:	3301      	adds	r3, #1
 800b42c:	6033      	str	r3, [r6, #0]
 800b42e:	6823      	ldr	r3, [r4, #0]
 800b430:	0699      	lsls	r1, r3, #26
 800b432:	bf42      	ittt	mi
 800b434:	6833      	ldrmi	r3, [r6, #0]
 800b436:	3302      	addmi	r3, #2
 800b438:	6033      	strmi	r3, [r6, #0]
 800b43a:	6825      	ldr	r5, [r4, #0]
 800b43c:	f015 0506 	ands.w	r5, r5, #6
 800b440:	d106      	bne.n	800b450 <_printf_common+0x48>
 800b442:	f104 0a19 	add.w	sl, r4, #25
 800b446:	68e3      	ldr	r3, [r4, #12]
 800b448:	6832      	ldr	r2, [r6, #0]
 800b44a:	1a9b      	subs	r3, r3, r2
 800b44c:	42ab      	cmp	r3, r5
 800b44e:	dc26      	bgt.n	800b49e <_printf_common+0x96>
 800b450:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b454:	1e13      	subs	r3, r2, #0
 800b456:	6822      	ldr	r2, [r4, #0]
 800b458:	bf18      	it	ne
 800b45a:	2301      	movne	r3, #1
 800b45c:	0692      	lsls	r2, r2, #26
 800b45e:	d42b      	bmi.n	800b4b8 <_printf_common+0xb0>
 800b460:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b464:	4649      	mov	r1, r9
 800b466:	4638      	mov	r0, r7
 800b468:	47c0      	blx	r8
 800b46a:	3001      	adds	r0, #1
 800b46c:	d01e      	beq.n	800b4ac <_printf_common+0xa4>
 800b46e:	6823      	ldr	r3, [r4, #0]
 800b470:	68e5      	ldr	r5, [r4, #12]
 800b472:	6832      	ldr	r2, [r6, #0]
 800b474:	f003 0306 	and.w	r3, r3, #6
 800b478:	2b04      	cmp	r3, #4
 800b47a:	bf08      	it	eq
 800b47c:	1aad      	subeq	r5, r5, r2
 800b47e:	68a3      	ldr	r3, [r4, #8]
 800b480:	6922      	ldr	r2, [r4, #16]
 800b482:	bf0c      	ite	eq
 800b484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b488:	2500      	movne	r5, #0
 800b48a:	4293      	cmp	r3, r2
 800b48c:	bfc4      	itt	gt
 800b48e:	1a9b      	subgt	r3, r3, r2
 800b490:	18ed      	addgt	r5, r5, r3
 800b492:	2600      	movs	r6, #0
 800b494:	341a      	adds	r4, #26
 800b496:	42b5      	cmp	r5, r6
 800b498:	d11a      	bne.n	800b4d0 <_printf_common+0xc8>
 800b49a:	2000      	movs	r0, #0
 800b49c:	e008      	b.n	800b4b0 <_printf_common+0xa8>
 800b49e:	2301      	movs	r3, #1
 800b4a0:	4652      	mov	r2, sl
 800b4a2:	4649      	mov	r1, r9
 800b4a4:	4638      	mov	r0, r7
 800b4a6:	47c0      	blx	r8
 800b4a8:	3001      	adds	r0, #1
 800b4aa:	d103      	bne.n	800b4b4 <_printf_common+0xac>
 800b4ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4b4:	3501      	adds	r5, #1
 800b4b6:	e7c6      	b.n	800b446 <_printf_common+0x3e>
 800b4b8:	18e1      	adds	r1, r4, r3
 800b4ba:	1c5a      	adds	r2, r3, #1
 800b4bc:	2030      	movs	r0, #48	; 0x30
 800b4be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4c2:	4422      	add	r2, r4
 800b4c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4cc:	3302      	adds	r3, #2
 800b4ce:	e7c7      	b.n	800b460 <_printf_common+0x58>
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	4622      	mov	r2, r4
 800b4d4:	4649      	mov	r1, r9
 800b4d6:	4638      	mov	r0, r7
 800b4d8:	47c0      	blx	r8
 800b4da:	3001      	adds	r0, #1
 800b4dc:	d0e6      	beq.n	800b4ac <_printf_common+0xa4>
 800b4de:	3601      	adds	r6, #1
 800b4e0:	e7d9      	b.n	800b496 <_printf_common+0x8e>
	...

0800b4e4 <_printf_i>:
 800b4e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4e8:	460c      	mov	r4, r1
 800b4ea:	4691      	mov	r9, r2
 800b4ec:	7e27      	ldrb	r7, [r4, #24]
 800b4ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b4f0:	2f78      	cmp	r7, #120	; 0x78
 800b4f2:	4680      	mov	r8, r0
 800b4f4:	469a      	mov	sl, r3
 800b4f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4fa:	d807      	bhi.n	800b50c <_printf_i+0x28>
 800b4fc:	2f62      	cmp	r7, #98	; 0x62
 800b4fe:	d80a      	bhi.n	800b516 <_printf_i+0x32>
 800b500:	2f00      	cmp	r7, #0
 800b502:	f000 80d8 	beq.w	800b6b6 <_printf_i+0x1d2>
 800b506:	2f58      	cmp	r7, #88	; 0x58
 800b508:	f000 80a3 	beq.w	800b652 <_printf_i+0x16e>
 800b50c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b510:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b514:	e03a      	b.n	800b58c <_printf_i+0xa8>
 800b516:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b51a:	2b15      	cmp	r3, #21
 800b51c:	d8f6      	bhi.n	800b50c <_printf_i+0x28>
 800b51e:	a001      	add	r0, pc, #4	; (adr r0, 800b524 <_printf_i+0x40>)
 800b520:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b524:	0800b57d 	.word	0x0800b57d
 800b528:	0800b591 	.word	0x0800b591
 800b52c:	0800b50d 	.word	0x0800b50d
 800b530:	0800b50d 	.word	0x0800b50d
 800b534:	0800b50d 	.word	0x0800b50d
 800b538:	0800b50d 	.word	0x0800b50d
 800b53c:	0800b591 	.word	0x0800b591
 800b540:	0800b50d 	.word	0x0800b50d
 800b544:	0800b50d 	.word	0x0800b50d
 800b548:	0800b50d 	.word	0x0800b50d
 800b54c:	0800b50d 	.word	0x0800b50d
 800b550:	0800b69d 	.word	0x0800b69d
 800b554:	0800b5c1 	.word	0x0800b5c1
 800b558:	0800b67f 	.word	0x0800b67f
 800b55c:	0800b50d 	.word	0x0800b50d
 800b560:	0800b50d 	.word	0x0800b50d
 800b564:	0800b6bf 	.word	0x0800b6bf
 800b568:	0800b50d 	.word	0x0800b50d
 800b56c:	0800b5c1 	.word	0x0800b5c1
 800b570:	0800b50d 	.word	0x0800b50d
 800b574:	0800b50d 	.word	0x0800b50d
 800b578:	0800b687 	.word	0x0800b687
 800b57c:	680b      	ldr	r3, [r1, #0]
 800b57e:	1d1a      	adds	r2, r3, #4
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	600a      	str	r2, [r1, #0]
 800b584:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b58c:	2301      	movs	r3, #1
 800b58e:	e0a3      	b.n	800b6d8 <_printf_i+0x1f4>
 800b590:	6825      	ldr	r5, [r4, #0]
 800b592:	6808      	ldr	r0, [r1, #0]
 800b594:	062e      	lsls	r6, r5, #24
 800b596:	f100 0304 	add.w	r3, r0, #4
 800b59a:	d50a      	bpl.n	800b5b2 <_printf_i+0xce>
 800b59c:	6805      	ldr	r5, [r0, #0]
 800b59e:	600b      	str	r3, [r1, #0]
 800b5a0:	2d00      	cmp	r5, #0
 800b5a2:	da03      	bge.n	800b5ac <_printf_i+0xc8>
 800b5a4:	232d      	movs	r3, #45	; 0x2d
 800b5a6:	426d      	negs	r5, r5
 800b5a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5ac:	485e      	ldr	r0, [pc, #376]	; (800b728 <_printf_i+0x244>)
 800b5ae:	230a      	movs	r3, #10
 800b5b0:	e019      	b.n	800b5e6 <_printf_i+0x102>
 800b5b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b5b6:	6805      	ldr	r5, [r0, #0]
 800b5b8:	600b      	str	r3, [r1, #0]
 800b5ba:	bf18      	it	ne
 800b5bc:	b22d      	sxthne	r5, r5
 800b5be:	e7ef      	b.n	800b5a0 <_printf_i+0xbc>
 800b5c0:	680b      	ldr	r3, [r1, #0]
 800b5c2:	6825      	ldr	r5, [r4, #0]
 800b5c4:	1d18      	adds	r0, r3, #4
 800b5c6:	6008      	str	r0, [r1, #0]
 800b5c8:	0628      	lsls	r0, r5, #24
 800b5ca:	d501      	bpl.n	800b5d0 <_printf_i+0xec>
 800b5cc:	681d      	ldr	r5, [r3, #0]
 800b5ce:	e002      	b.n	800b5d6 <_printf_i+0xf2>
 800b5d0:	0669      	lsls	r1, r5, #25
 800b5d2:	d5fb      	bpl.n	800b5cc <_printf_i+0xe8>
 800b5d4:	881d      	ldrh	r5, [r3, #0]
 800b5d6:	4854      	ldr	r0, [pc, #336]	; (800b728 <_printf_i+0x244>)
 800b5d8:	2f6f      	cmp	r7, #111	; 0x6f
 800b5da:	bf0c      	ite	eq
 800b5dc:	2308      	moveq	r3, #8
 800b5de:	230a      	movne	r3, #10
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5e6:	6866      	ldr	r6, [r4, #4]
 800b5e8:	60a6      	str	r6, [r4, #8]
 800b5ea:	2e00      	cmp	r6, #0
 800b5ec:	bfa2      	ittt	ge
 800b5ee:	6821      	ldrge	r1, [r4, #0]
 800b5f0:	f021 0104 	bicge.w	r1, r1, #4
 800b5f4:	6021      	strge	r1, [r4, #0]
 800b5f6:	b90d      	cbnz	r5, 800b5fc <_printf_i+0x118>
 800b5f8:	2e00      	cmp	r6, #0
 800b5fa:	d04d      	beq.n	800b698 <_printf_i+0x1b4>
 800b5fc:	4616      	mov	r6, r2
 800b5fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800b602:	fb03 5711 	mls	r7, r3, r1, r5
 800b606:	5dc7      	ldrb	r7, [r0, r7]
 800b608:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b60c:	462f      	mov	r7, r5
 800b60e:	42bb      	cmp	r3, r7
 800b610:	460d      	mov	r5, r1
 800b612:	d9f4      	bls.n	800b5fe <_printf_i+0x11a>
 800b614:	2b08      	cmp	r3, #8
 800b616:	d10b      	bne.n	800b630 <_printf_i+0x14c>
 800b618:	6823      	ldr	r3, [r4, #0]
 800b61a:	07df      	lsls	r7, r3, #31
 800b61c:	d508      	bpl.n	800b630 <_printf_i+0x14c>
 800b61e:	6923      	ldr	r3, [r4, #16]
 800b620:	6861      	ldr	r1, [r4, #4]
 800b622:	4299      	cmp	r1, r3
 800b624:	bfde      	ittt	le
 800b626:	2330      	movle	r3, #48	; 0x30
 800b628:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b62c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800b630:	1b92      	subs	r2, r2, r6
 800b632:	6122      	str	r2, [r4, #16]
 800b634:	f8cd a000 	str.w	sl, [sp]
 800b638:	464b      	mov	r3, r9
 800b63a:	aa03      	add	r2, sp, #12
 800b63c:	4621      	mov	r1, r4
 800b63e:	4640      	mov	r0, r8
 800b640:	f7ff fee2 	bl	800b408 <_printf_common>
 800b644:	3001      	adds	r0, #1
 800b646:	d14c      	bne.n	800b6e2 <_printf_i+0x1fe>
 800b648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b64c:	b004      	add	sp, #16
 800b64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b652:	4835      	ldr	r0, [pc, #212]	; (800b728 <_printf_i+0x244>)
 800b654:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b658:	6823      	ldr	r3, [r4, #0]
 800b65a:	680e      	ldr	r6, [r1, #0]
 800b65c:	061f      	lsls	r7, r3, #24
 800b65e:	f856 5b04 	ldr.w	r5, [r6], #4
 800b662:	600e      	str	r6, [r1, #0]
 800b664:	d514      	bpl.n	800b690 <_printf_i+0x1ac>
 800b666:	07d9      	lsls	r1, r3, #31
 800b668:	bf44      	itt	mi
 800b66a:	f043 0320 	orrmi.w	r3, r3, #32
 800b66e:	6023      	strmi	r3, [r4, #0]
 800b670:	b91d      	cbnz	r5, 800b67a <_printf_i+0x196>
 800b672:	6823      	ldr	r3, [r4, #0]
 800b674:	f023 0320 	bic.w	r3, r3, #32
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	2310      	movs	r3, #16
 800b67c:	e7b0      	b.n	800b5e0 <_printf_i+0xfc>
 800b67e:	6823      	ldr	r3, [r4, #0]
 800b680:	f043 0320 	orr.w	r3, r3, #32
 800b684:	6023      	str	r3, [r4, #0]
 800b686:	2378      	movs	r3, #120	; 0x78
 800b688:	4828      	ldr	r0, [pc, #160]	; (800b72c <_printf_i+0x248>)
 800b68a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b68e:	e7e3      	b.n	800b658 <_printf_i+0x174>
 800b690:	065e      	lsls	r6, r3, #25
 800b692:	bf48      	it	mi
 800b694:	b2ad      	uxthmi	r5, r5
 800b696:	e7e6      	b.n	800b666 <_printf_i+0x182>
 800b698:	4616      	mov	r6, r2
 800b69a:	e7bb      	b.n	800b614 <_printf_i+0x130>
 800b69c:	680b      	ldr	r3, [r1, #0]
 800b69e:	6826      	ldr	r6, [r4, #0]
 800b6a0:	6960      	ldr	r0, [r4, #20]
 800b6a2:	1d1d      	adds	r5, r3, #4
 800b6a4:	600d      	str	r5, [r1, #0]
 800b6a6:	0635      	lsls	r5, r6, #24
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	d501      	bpl.n	800b6b0 <_printf_i+0x1cc>
 800b6ac:	6018      	str	r0, [r3, #0]
 800b6ae:	e002      	b.n	800b6b6 <_printf_i+0x1d2>
 800b6b0:	0671      	lsls	r1, r6, #25
 800b6b2:	d5fb      	bpl.n	800b6ac <_printf_i+0x1c8>
 800b6b4:	8018      	strh	r0, [r3, #0]
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	6123      	str	r3, [r4, #16]
 800b6ba:	4616      	mov	r6, r2
 800b6bc:	e7ba      	b.n	800b634 <_printf_i+0x150>
 800b6be:	680b      	ldr	r3, [r1, #0]
 800b6c0:	1d1a      	adds	r2, r3, #4
 800b6c2:	600a      	str	r2, [r1, #0]
 800b6c4:	681e      	ldr	r6, [r3, #0]
 800b6c6:	6862      	ldr	r2, [r4, #4]
 800b6c8:	2100      	movs	r1, #0
 800b6ca:	4630      	mov	r0, r6
 800b6cc:	f7f4 fd88 	bl	80001e0 <memchr>
 800b6d0:	b108      	cbz	r0, 800b6d6 <_printf_i+0x1f2>
 800b6d2:	1b80      	subs	r0, r0, r6
 800b6d4:	6060      	str	r0, [r4, #4]
 800b6d6:	6863      	ldr	r3, [r4, #4]
 800b6d8:	6123      	str	r3, [r4, #16]
 800b6da:	2300      	movs	r3, #0
 800b6dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6e0:	e7a8      	b.n	800b634 <_printf_i+0x150>
 800b6e2:	6923      	ldr	r3, [r4, #16]
 800b6e4:	4632      	mov	r2, r6
 800b6e6:	4649      	mov	r1, r9
 800b6e8:	4640      	mov	r0, r8
 800b6ea:	47d0      	blx	sl
 800b6ec:	3001      	adds	r0, #1
 800b6ee:	d0ab      	beq.n	800b648 <_printf_i+0x164>
 800b6f0:	6823      	ldr	r3, [r4, #0]
 800b6f2:	079b      	lsls	r3, r3, #30
 800b6f4:	d413      	bmi.n	800b71e <_printf_i+0x23a>
 800b6f6:	68e0      	ldr	r0, [r4, #12]
 800b6f8:	9b03      	ldr	r3, [sp, #12]
 800b6fa:	4298      	cmp	r0, r3
 800b6fc:	bfb8      	it	lt
 800b6fe:	4618      	movlt	r0, r3
 800b700:	e7a4      	b.n	800b64c <_printf_i+0x168>
 800b702:	2301      	movs	r3, #1
 800b704:	4632      	mov	r2, r6
 800b706:	4649      	mov	r1, r9
 800b708:	4640      	mov	r0, r8
 800b70a:	47d0      	blx	sl
 800b70c:	3001      	adds	r0, #1
 800b70e:	d09b      	beq.n	800b648 <_printf_i+0x164>
 800b710:	3501      	adds	r5, #1
 800b712:	68e3      	ldr	r3, [r4, #12]
 800b714:	9903      	ldr	r1, [sp, #12]
 800b716:	1a5b      	subs	r3, r3, r1
 800b718:	42ab      	cmp	r3, r5
 800b71a:	dcf2      	bgt.n	800b702 <_printf_i+0x21e>
 800b71c:	e7eb      	b.n	800b6f6 <_printf_i+0x212>
 800b71e:	2500      	movs	r5, #0
 800b720:	f104 0619 	add.w	r6, r4, #25
 800b724:	e7f5      	b.n	800b712 <_printf_i+0x22e>
 800b726:	bf00      	nop
 800b728:	0800d451 	.word	0x0800d451
 800b72c:	0800d462 	.word	0x0800d462

0800b730 <memmove>:
 800b730:	4288      	cmp	r0, r1
 800b732:	b510      	push	{r4, lr}
 800b734:	eb01 0402 	add.w	r4, r1, r2
 800b738:	d902      	bls.n	800b740 <memmove+0x10>
 800b73a:	4284      	cmp	r4, r0
 800b73c:	4623      	mov	r3, r4
 800b73e:	d807      	bhi.n	800b750 <memmove+0x20>
 800b740:	1e43      	subs	r3, r0, #1
 800b742:	42a1      	cmp	r1, r4
 800b744:	d008      	beq.n	800b758 <memmove+0x28>
 800b746:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b74a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b74e:	e7f8      	b.n	800b742 <memmove+0x12>
 800b750:	4402      	add	r2, r0
 800b752:	4601      	mov	r1, r0
 800b754:	428a      	cmp	r2, r1
 800b756:	d100      	bne.n	800b75a <memmove+0x2a>
 800b758:	bd10      	pop	{r4, pc}
 800b75a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b75e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b762:	e7f7      	b.n	800b754 <memmove+0x24>

0800b764 <_free_r>:
 800b764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b766:	2900      	cmp	r1, #0
 800b768:	d048      	beq.n	800b7fc <_free_r+0x98>
 800b76a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b76e:	9001      	str	r0, [sp, #4]
 800b770:	2b00      	cmp	r3, #0
 800b772:	f1a1 0404 	sub.w	r4, r1, #4
 800b776:	bfb8      	it	lt
 800b778:	18e4      	addlt	r4, r4, r3
 800b77a:	f000 f8d3 	bl	800b924 <__malloc_lock>
 800b77e:	4a20      	ldr	r2, [pc, #128]	; (800b800 <_free_r+0x9c>)
 800b780:	9801      	ldr	r0, [sp, #4]
 800b782:	6813      	ldr	r3, [r2, #0]
 800b784:	4615      	mov	r5, r2
 800b786:	b933      	cbnz	r3, 800b796 <_free_r+0x32>
 800b788:	6063      	str	r3, [r4, #4]
 800b78a:	6014      	str	r4, [r2, #0]
 800b78c:	b003      	add	sp, #12
 800b78e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b792:	f000 b8cd 	b.w	800b930 <__malloc_unlock>
 800b796:	42a3      	cmp	r3, r4
 800b798:	d90b      	bls.n	800b7b2 <_free_r+0x4e>
 800b79a:	6821      	ldr	r1, [r4, #0]
 800b79c:	1862      	adds	r2, r4, r1
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	bf04      	itt	eq
 800b7a2:	681a      	ldreq	r2, [r3, #0]
 800b7a4:	685b      	ldreq	r3, [r3, #4]
 800b7a6:	6063      	str	r3, [r4, #4]
 800b7a8:	bf04      	itt	eq
 800b7aa:	1852      	addeq	r2, r2, r1
 800b7ac:	6022      	streq	r2, [r4, #0]
 800b7ae:	602c      	str	r4, [r5, #0]
 800b7b0:	e7ec      	b.n	800b78c <_free_r+0x28>
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	b10b      	cbz	r3, 800b7bc <_free_r+0x58>
 800b7b8:	42a3      	cmp	r3, r4
 800b7ba:	d9fa      	bls.n	800b7b2 <_free_r+0x4e>
 800b7bc:	6811      	ldr	r1, [r2, #0]
 800b7be:	1855      	adds	r5, r2, r1
 800b7c0:	42a5      	cmp	r5, r4
 800b7c2:	d10b      	bne.n	800b7dc <_free_r+0x78>
 800b7c4:	6824      	ldr	r4, [r4, #0]
 800b7c6:	4421      	add	r1, r4
 800b7c8:	1854      	adds	r4, r2, r1
 800b7ca:	42a3      	cmp	r3, r4
 800b7cc:	6011      	str	r1, [r2, #0]
 800b7ce:	d1dd      	bne.n	800b78c <_free_r+0x28>
 800b7d0:	681c      	ldr	r4, [r3, #0]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	6053      	str	r3, [r2, #4]
 800b7d6:	4421      	add	r1, r4
 800b7d8:	6011      	str	r1, [r2, #0]
 800b7da:	e7d7      	b.n	800b78c <_free_r+0x28>
 800b7dc:	d902      	bls.n	800b7e4 <_free_r+0x80>
 800b7de:	230c      	movs	r3, #12
 800b7e0:	6003      	str	r3, [r0, #0]
 800b7e2:	e7d3      	b.n	800b78c <_free_r+0x28>
 800b7e4:	6825      	ldr	r5, [r4, #0]
 800b7e6:	1961      	adds	r1, r4, r5
 800b7e8:	428b      	cmp	r3, r1
 800b7ea:	bf04      	itt	eq
 800b7ec:	6819      	ldreq	r1, [r3, #0]
 800b7ee:	685b      	ldreq	r3, [r3, #4]
 800b7f0:	6063      	str	r3, [r4, #4]
 800b7f2:	bf04      	itt	eq
 800b7f4:	1949      	addeq	r1, r1, r5
 800b7f6:	6021      	streq	r1, [r4, #0]
 800b7f8:	6054      	str	r4, [r2, #4]
 800b7fa:	e7c7      	b.n	800b78c <_free_r+0x28>
 800b7fc:	b003      	add	sp, #12
 800b7fe:	bd30      	pop	{r4, r5, pc}
 800b800:	200049fc 	.word	0x200049fc

0800b804 <_malloc_r>:
 800b804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b806:	1ccd      	adds	r5, r1, #3
 800b808:	f025 0503 	bic.w	r5, r5, #3
 800b80c:	3508      	adds	r5, #8
 800b80e:	2d0c      	cmp	r5, #12
 800b810:	bf38      	it	cc
 800b812:	250c      	movcc	r5, #12
 800b814:	2d00      	cmp	r5, #0
 800b816:	4606      	mov	r6, r0
 800b818:	db01      	blt.n	800b81e <_malloc_r+0x1a>
 800b81a:	42a9      	cmp	r1, r5
 800b81c:	d903      	bls.n	800b826 <_malloc_r+0x22>
 800b81e:	230c      	movs	r3, #12
 800b820:	6033      	str	r3, [r6, #0]
 800b822:	2000      	movs	r0, #0
 800b824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b826:	f000 f87d 	bl	800b924 <__malloc_lock>
 800b82a:	4921      	ldr	r1, [pc, #132]	; (800b8b0 <_malloc_r+0xac>)
 800b82c:	680a      	ldr	r2, [r1, #0]
 800b82e:	4614      	mov	r4, r2
 800b830:	b99c      	cbnz	r4, 800b85a <_malloc_r+0x56>
 800b832:	4f20      	ldr	r7, [pc, #128]	; (800b8b4 <_malloc_r+0xb0>)
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	b923      	cbnz	r3, 800b842 <_malloc_r+0x3e>
 800b838:	4621      	mov	r1, r4
 800b83a:	4630      	mov	r0, r6
 800b83c:	f000 f862 	bl	800b904 <_sbrk_r>
 800b840:	6038      	str	r0, [r7, #0]
 800b842:	4629      	mov	r1, r5
 800b844:	4630      	mov	r0, r6
 800b846:	f000 f85d 	bl	800b904 <_sbrk_r>
 800b84a:	1c43      	adds	r3, r0, #1
 800b84c:	d123      	bne.n	800b896 <_malloc_r+0x92>
 800b84e:	230c      	movs	r3, #12
 800b850:	6033      	str	r3, [r6, #0]
 800b852:	4630      	mov	r0, r6
 800b854:	f000 f86c 	bl	800b930 <__malloc_unlock>
 800b858:	e7e3      	b.n	800b822 <_malloc_r+0x1e>
 800b85a:	6823      	ldr	r3, [r4, #0]
 800b85c:	1b5b      	subs	r3, r3, r5
 800b85e:	d417      	bmi.n	800b890 <_malloc_r+0x8c>
 800b860:	2b0b      	cmp	r3, #11
 800b862:	d903      	bls.n	800b86c <_malloc_r+0x68>
 800b864:	6023      	str	r3, [r4, #0]
 800b866:	441c      	add	r4, r3
 800b868:	6025      	str	r5, [r4, #0]
 800b86a:	e004      	b.n	800b876 <_malloc_r+0x72>
 800b86c:	6863      	ldr	r3, [r4, #4]
 800b86e:	42a2      	cmp	r2, r4
 800b870:	bf0c      	ite	eq
 800b872:	600b      	streq	r3, [r1, #0]
 800b874:	6053      	strne	r3, [r2, #4]
 800b876:	4630      	mov	r0, r6
 800b878:	f000 f85a 	bl	800b930 <__malloc_unlock>
 800b87c:	f104 000b 	add.w	r0, r4, #11
 800b880:	1d23      	adds	r3, r4, #4
 800b882:	f020 0007 	bic.w	r0, r0, #7
 800b886:	1ac2      	subs	r2, r0, r3
 800b888:	d0cc      	beq.n	800b824 <_malloc_r+0x20>
 800b88a:	1a1b      	subs	r3, r3, r0
 800b88c:	50a3      	str	r3, [r4, r2]
 800b88e:	e7c9      	b.n	800b824 <_malloc_r+0x20>
 800b890:	4622      	mov	r2, r4
 800b892:	6864      	ldr	r4, [r4, #4]
 800b894:	e7cc      	b.n	800b830 <_malloc_r+0x2c>
 800b896:	1cc4      	adds	r4, r0, #3
 800b898:	f024 0403 	bic.w	r4, r4, #3
 800b89c:	42a0      	cmp	r0, r4
 800b89e:	d0e3      	beq.n	800b868 <_malloc_r+0x64>
 800b8a0:	1a21      	subs	r1, r4, r0
 800b8a2:	4630      	mov	r0, r6
 800b8a4:	f000 f82e 	bl	800b904 <_sbrk_r>
 800b8a8:	3001      	adds	r0, #1
 800b8aa:	d1dd      	bne.n	800b868 <_malloc_r+0x64>
 800b8ac:	e7cf      	b.n	800b84e <_malloc_r+0x4a>
 800b8ae:	bf00      	nop
 800b8b0:	200049fc 	.word	0x200049fc
 800b8b4:	20004a00 	.word	0x20004a00

0800b8b8 <_realloc_r>:
 800b8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ba:	4607      	mov	r7, r0
 800b8bc:	4614      	mov	r4, r2
 800b8be:	460e      	mov	r6, r1
 800b8c0:	b921      	cbnz	r1, 800b8cc <_realloc_r+0x14>
 800b8c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b8c6:	4611      	mov	r1, r2
 800b8c8:	f7ff bf9c 	b.w	800b804 <_malloc_r>
 800b8cc:	b922      	cbnz	r2, 800b8d8 <_realloc_r+0x20>
 800b8ce:	f7ff ff49 	bl	800b764 <_free_r>
 800b8d2:	4625      	mov	r5, r4
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8d8:	f000 f830 	bl	800b93c <_malloc_usable_size_r>
 800b8dc:	42a0      	cmp	r0, r4
 800b8de:	d20f      	bcs.n	800b900 <_realloc_r+0x48>
 800b8e0:	4621      	mov	r1, r4
 800b8e2:	4638      	mov	r0, r7
 800b8e4:	f7ff ff8e 	bl	800b804 <_malloc_r>
 800b8e8:	4605      	mov	r5, r0
 800b8ea:	2800      	cmp	r0, #0
 800b8ec:	d0f2      	beq.n	800b8d4 <_realloc_r+0x1c>
 800b8ee:	4631      	mov	r1, r6
 800b8f0:	4622      	mov	r2, r4
 800b8f2:	f7ff fbf7 	bl	800b0e4 <memcpy>
 800b8f6:	4631      	mov	r1, r6
 800b8f8:	4638      	mov	r0, r7
 800b8fa:	f7ff ff33 	bl	800b764 <_free_r>
 800b8fe:	e7e9      	b.n	800b8d4 <_realloc_r+0x1c>
 800b900:	4635      	mov	r5, r6
 800b902:	e7e7      	b.n	800b8d4 <_realloc_r+0x1c>

0800b904 <_sbrk_r>:
 800b904:	b538      	push	{r3, r4, r5, lr}
 800b906:	4d06      	ldr	r5, [pc, #24]	; (800b920 <_sbrk_r+0x1c>)
 800b908:	2300      	movs	r3, #0
 800b90a:	4604      	mov	r4, r0
 800b90c:	4608      	mov	r0, r1
 800b90e:	602b      	str	r3, [r5, #0]
 800b910:	f7f8 f8ac 	bl	8003a6c <_sbrk>
 800b914:	1c43      	adds	r3, r0, #1
 800b916:	d102      	bne.n	800b91e <_sbrk_r+0x1a>
 800b918:	682b      	ldr	r3, [r5, #0]
 800b91a:	b103      	cbz	r3, 800b91e <_sbrk_r+0x1a>
 800b91c:	6023      	str	r3, [r4, #0]
 800b91e:	bd38      	pop	{r3, r4, r5, pc}
 800b920:	20005144 	.word	0x20005144

0800b924 <__malloc_lock>:
 800b924:	4801      	ldr	r0, [pc, #4]	; (800b92c <__malloc_lock+0x8>)
 800b926:	f000 b811 	b.w	800b94c <__retarget_lock_acquire_recursive>
 800b92a:	bf00      	nop
 800b92c:	2000514c 	.word	0x2000514c

0800b930 <__malloc_unlock>:
 800b930:	4801      	ldr	r0, [pc, #4]	; (800b938 <__malloc_unlock+0x8>)
 800b932:	f000 b80c 	b.w	800b94e <__retarget_lock_release_recursive>
 800b936:	bf00      	nop
 800b938:	2000514c 	.word	0x2000514c

0800b93c <_malloc_usable_size_r>:
 800b93c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b940:	1f18      	subs	r0, r3, #4
 800b942:	2b00      	cmp	r3, #0
 800b944:	bfbc      	itt	lt
 800b946:	580b      	ldrlt	r3, [r1, r0]
 800b948:	18c0      	addlt	r0, r0, r3
 800b94a:	4770      	bx	lr

0800b94c <__retarget_lock_acquire_recursive>:
 800b94c:	4770      	bx	lr

0800b94e <__retarget_lock_release_recursive>:
 800b94e:	4770      	bx	lr

0800b950 <pow>:
 800b950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b954:	ec59 8b10 	vmov	r8, r9, d0
 800b958:	ec57 6b11 	vmov	r6, r7, d1
 800b95c:	f000 f8a8 	bl	800bab0 <__ieee754_pow>
 800b960:	4b4e      	ldr	r3, [pc, #312]	; (800ba9c <pow+0x14c>)
 800b962:	f993 3000 	ldrsb.w	r3, [r3]
 800b966:	3301      	adds	r3, #1
 800b968:	ec55 4b10 	vmov	r4, r5, d0
 800b96c:	d015      	beq.n	800b99a <pow+0x4a>
 800b96e:	4632      	mov	r2, r6
 800b970:	463b      	mov	r3, r7
 800b972:	4630      	mov	r0, r6
 800b974:	4639      	mov	r1, r7
 800b976:	f7f5 f8d9 	bl	8000b2c <__aeabi_dcmpun>
 800b97a:	b970      	cbnz	r0, 800b99a <pow+0x4a>
 800b97c:	4642      	mov	r2, r8
 800b97e:	464b      	mov	r3, r9
 800b980:	4640      	mov	r0, r8
 800b982:	4649      	mov	r1, r9
 800b984:	f7f5 f8d2 	bl	8000b2c <__aeabi_dcmpun>
 800b988:	2200      	movs	r2, #0
 800b98a:	2300      	movs	r3, #0
 800b98c:	b148      	cbz	r0, 800b9a2 <pow+0x52>
 800b98e:	4630      	mov	r0, r6
 800b990:	4639      	mov	r1, r7
 800b992:	f7f5 f899 	bl	8000ac8 <__aeabi_dcmpeq>
 800b996:	2800      	cmp	r0, #0
 800b998:	d17d      	bne.n	800ba96 <pow+0x146>
 800b99a:	ec45 4b10 	vmov	d0, r4, r5
 800b99e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9a2:	4640      	mov	r0, r8
 800b9a4:	4649      	mov	r1, r9
 800b9a6:	f7f5 f88f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9aa:	b1e0      	cbz	r0, 800b9e6 <pow+0x96>
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	4630      	mov	r0, r6
 800b9b2:	4639      	mov	r1, r7
 800b9b4:	f7f5 f888 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9b8:	2800      	cmp	r0, #0
 800b9ba:	d16c      	bne.n	800ba96 <pow+0x146>
 800b9bc:	ec47 6b10 	vmov	d0, r6, r7
 800b9c0:	f000 fe55 	bl	800c66e <finite>
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	d0e8      	beq.n	800b99a <pow+0x4a>
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	4630      	mov	r0, r6
 800b9ce:	4639      	mov	r1, r7
 800b9d0:	f7f5 f884 	bl	8000adc <__aeabi_dcmplt>
 800b9d4:	2800      	cmp	r0, #0
 800b9d6:	d0e0      	beq.n	800b99a <pow+0x4a>
 800b9d8:	f7ff fb5a 	bl	800b090 <__errno>
 800b9dc:	2321      	movs	r3, #33	; 0x21
 800b9de:	6003      	str	r3, [r0, #0]
 800b9e0:	2400      	movs	r4, #0
 800b9e2:	4d2f      	ldr	r5, [pc, #188]	; (800baa0 <pow+0x150>)
 800b9e4:	e7d9      	b.n	800b99a <pow+0x4a>
 800b9e6:	ec45 4b10 	vmov	d0, r4, r5
 800b9ea:	f000 fe40 	bl	800c66e <finite>
 800b9ee:	bbb8      	cbnz	r0, 800ba60 <pow+0x110>
 800b9f0:	ec49 8b10 	vmov	d0, r8, r9
 800b9f4:	f000 fe3b 	bl	800c66e <finite>
 800b9f8:	b390      	cbz	r0, 800ba60 <pow+0x110>
 800b9fa:	ec47 6b10 	vmov	d0, r6, r7
 800b9fe:	f000 fe36 	bl	800c66e <finite>
 800ba02:	b368      	cbz	r0, 800ba60 <pow+0x110>
 800ba04:	4622      	mov	r2, r4
 800ba06:	462b      	mov	r3, r5
 800ba08:	4620      	mov	r0, r4
 800ba0a:	4629      	mov	r1, r5
 800ba0c:	f7f5 f88e 	bl	8000b2c <__aeabi_dcmpun>
 800ba10:	b160      	cbz	r0, 800ba2c <pow+0xdc>
 800ba12:	f7ff fb3d 	bl	800b090 <__errno>
 800ba16:	2321      	movs	r3, #33	; 0x21
 800ba18:	6003      	str	r3, [r0, #0]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	4610      	mov	r0, r2
 800ba20:	4619      	mov	r1, r3
 800ba22:	f7f4 ff13 	bl	800084c <__aeabi_ddiv>
 800ba26:	4604      	mov	r4, r0
 800ba28:	460d      	mov	r5, r1
 800ba2a:	e7b6      	b.n	800b99a <pow+0x4a>
 800ba2c:	f7ff fb30 	bl	800b090 <__errno>
 800ba30:	2322      	movs	r3, #34	; 0x22
 800ba32:	6003      	str	r3, [r0, #0]
 800ba34:	2200      	movs	r2, #0
 800ba36:	2300      	movs	r3, #0
 800ba38:	4640      	mov	r0, r8
 800ba3a:	4649      	mov	r1, r9
 800ba3c:	f7f5 f84e 	bl	8000adc <__aeabi_dcmplt>
 800ba40:	2400      	movs	r4, #0
 800ba42:	b158      	cbz	r0, 800ba5c <pow+0x10c>
 800ba44:	ec47 6b10 	vmov	d0, r6, r7
 800ba48:	f000 fe26 	bl	800c698 <rint>
 800ba4c:	4632      	mov	r2, r6
 800ba4e:	ec51 0b10 	vmov	r0, r1, d0
 800ba52:	463b      	mov	r3, r7
 800ba54:	f7f5 f838 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba58:	2800      	cmp	r0, #0
 800ba5a:	d0c2      	beq.n	800b9e2 <pow+0x92>
 800ba5c:	4d11      	ldr	r5, [pc, #68]	; (800baa4 <pow+0x154>)
 800ba5e:	e79c      	b.n	800b99a <pow+0x4a>
 800ba60:	2200      	movs	r2, #0
 800ba62:	2300      	movs	r3, #0
 800ba64:	4620      	mov	r0, r4
 800ba66:	4629      	mov	r1, r5
 800ba68:	f7f5 f82e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	d094      	beq.n	800b99a <pow+0x4a>
 800ba70:	ec49 8b10 	vmov	d0, r8, r9
 800ba74:	f000 fdfb 	bl	800c66e <finite>
 800ba78:	2800      	cmp	r0, #0
 800ba7a:	d08e      	beq.n	800b99a <pow+0x4a>
 800ba7c:	ec47 6b10 	vmov	d0, r6, r7
 800ba80:	f000 fdf5 	bl	800c66e <finite>
 800ba84:	2800      	cmp	r0, #0
 800ba86:	d088      	beq.n	800b99a <pow+0x4a>
 800ba88:	f7ff fb02 	bl	800b090 <__errno>
 800ba8c:	2322      	movs	r3, #34	; 0x22
 800ba8e:	6003      	str	r3, [r0, #0]
 800ba90:	2400      	movs	r4, #0
 800ba92:	2500      	movs	r5, #0
 800ba94:	e781      	b.n	800b99a <pow+0x4a>
 800ba96:	4d04      	ldr	r5, [pc, #16]	; (800baa8 <pow+0x158>)
 800ba98:	2400      	movs	r4, #0
 800ba9a:	e77e      	b.n	800b99a <pow+0x4a>
 800ba9c:	2000007c 	.word	0x2000007c
 800baa0:	fff00000 	.word	0xfff00000
 800baa4:	7ff00000 	.word	0x7ff00000
 800baa8:	3ff00000 	.word	0x3ff00000
 800baac:	00000000 	.word	0x00000000

0800bab0 <__ieee754_pow>:
 800bab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab4:	ed2d 8b06 	vpush	{d8-d10}
 800bab8:	b08d      	sub	sp, #52	; 0x34
 800baba:	ed8d 1b02 	vstr	d1, [sp, #8]
 800babe:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800bac2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800bac6:	ea56 0100 	orrs.w	r1, r6, r0
 800baca:	ec53 2b10 	vmov	r2, r3, d0
 800bace:	f000 84d1 	beq.w	800c474 <__ieee754_pow+0x9c4>
 800bad2:	497f      	ldr	r1, [pc, #508]	; (800bcd0 <__ieee754_pow+0x220>)
 800bad4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800bad8:	428c      	cmp	r4, r1
 800bada:	ee10 8a10 	vmov	r8, s0
 800bade:	4699      	mov	r9, r3
 800bae0:	dc09      	bgt.n	800baf6 <__ieee754_pow+0x46>
 800bae2:	d103      	bne.n	800baec <__ieee754_pow+0x3c>
 800bae4:	b97a      	cbnz	r2, 800bb06 <__ieee754_pow+0x56>
 800bae6:	42a6      	cmp	r6, r4
 800bae8:	dd02      	ble.n	800baf0 <__ieee754_pow+0x40>
 800baea:	e00c      	b.n	800bb06 <__ieee754_pow+0x56>
 800baec:	428e      	cmp	r6, r1
 800baee:	dc02      	bgt.n	800baf6 <__ieee754_pow+0x46>
 800baf0:	428e      	cmp	r6, r1
 800baf2:	d110      	bne.n	800bb16 <__ieee754_pow+0x66>
 800baf4:	b178      	cbz	r0, 800bb16 <__ieee754_pow+0x66>
 800baf6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bafa:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bafe:	ea54 0308 	orrs.w	r3, r4, r8
 800bb02:	f000 84b7 	beq.w	800c474 <__ieee754_pow+0x9c4>
 800bb06:	4873      	ldr	r0, [pc, #460]	; (800bcd4 <__ieee754_pow+0x224>)
 800bb08:	b00d      	add	sp, #52	; 0x34
 800bb0a:	ecbd 8b06 	vpop	{d8-d10}
 800bb0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb12:	f000 bdb9 	b.w	800c688 <nan>
 800bb16:	f1b9 0f00 	cmp.w	r9, #0
 800bb1a:	da36      	bge.n	800bb8a <__ieee754_pow+0xda>
 800bb1c:	496e      	ldr	r1, [pc, #440]	; (800bcd8 <__ieee754_pow+0x228>)
 800bb1e:	428e      	cmp	r6, r1
 800bb20:	dc51      	bgt.n	800bbc6 <__ieee754_pow+0x116>
 800bb22:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800bb26:	428e      	cmp	r6, r1
 800bb28:	f340 84af 	ble.w	800c48a <__ieee754_pow+0x9da>
 800bb2c:	1531      	asrs	r1, r6, #20
 800bb2e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bb32:	2914      	cmp	r1, #20
 800bb34:	dd0f      	ble.n	800bb56 <__ieee754_pow+0xa6>
 800bb36:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800bb3a:	fa20 fc01 	lsr.w	ip, r0, r1
 800bb3e:	fa0c f101 	lsl.w	r1, ip, r1
 800bb42:	4281      	cmp	r1, r0
 800bb44:	f040 84a1 	bne.w	800c48a <__ieee754_pow+0x9da>
 800bb48:	f00c 0c01 	and.w	ip, ip, #1
 800bb4c:	f1cc 0102 	rsb	r1, ip, #2
 800bb50:	9100      	str	r1, [sp, #0]
 800bb52:	b180      	cbz	r0, 800bb76 <__ieee754_pow+0xc6>
 800bb54:	e059      	b.n	800bc0a <__ieee754_pow+0x15a>
 800bb56:	2800      	cmp	r0, #0
 800bb58:	d155      	bne.n	800bc06 <__ieee754_pow+0x156>
 800bb5a:	f1c1 0114 	rsb	r1, r1, #20
 800bb5e:	fa46 fc01 	asr.w	ip, r6, r1
 800bb62:	fa0c f101 	lsl.w	r1, ip, r1
 800bb66:	42b1      	cmp	r1, r6
 800bb68:	f040 848c 	bne.w	800c484 <__ieee754_pow+0x9d4>
 800bb6c:	f00c 0c01 	and.w	ip, ip, #1
 800bb70:	f1cc 0102 	rsb	r1, ip, #2
 800bb74:	9100      	str	r1, [sp, #0]
 800bb76:	4959      	ldr	r1, [pc, #356]	; (800bcdc <__ieee754_pow+0x22c>)
 800bb78:	428e      	cmp	r6, r1
 800bb7a:	d12d      	bne.n	800bbd8 <__ieee754_pow+0x128>
 800bb7c:	2f00      	cmp	r7, #0
 800bb7e:	da79      	bge.n	800bc74 <__ieee754_pow+0x1c4>
 800bb80:	4956      	ldr	r1, [pc, #344]	; (800bcdc <__ieee754_pow+0x22c>)
 800bb82:	2000      	movs	r0, #0
 800bb84:	f7f4 fe62 	bl	800084c <__aeabi_ddiv>
 800bb88:	e016      	b.n	800bbb8 <__ieee754_pow+0x108>
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	9100      	str	r1, [sp, #0]
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	d13b      	bne.n	800bc0a <__ieee754_pow+0x15a>
 800bb92:	494f      	ldr	r1, [pc, #316]	; (800bcd0 <__ieee754_pow+0x220>)
 800bb94:	428e      	cmp	r6, r1
 800bb96:	d1ee      	bne.n	800bb76 <__ieee754_pow+0xc6>
 800bb98:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bb9c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bba0:	ea53 0308 	orrs.w	r3, r3, r8
 800bba4:	f000 8466 	beq.w	800c474 <__ieee754_pow+0x9c4>
 800bba8:	4b4d      	ldr	r3, [pc, #308]	; (800bce0 <__ieee754_pow+0x230>)
 800bbaa:	429c      	cmp	r4, r3
 800bbac:	dd0d      	ble.n	800bbca <__ieee754_pow+0x11a>
 800bbae:	2f00      	cmp	r7, #0
 800bbb0:	f280 8464 	bge.w	800c47c <__ieee754_pow+0x9cc>
 800bbb4:	2000      	movs	r0, #0
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	ec41 0b10 	vmov	d0, r0, r1
 800bbbc:	b00d      	add	sp, #52	; 0x34
 800bbbe:	ecbd 8b06 	vpop	{d8-d10}
 800bbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc6:	2102      	movs	r1, #2
 800bbc8:	e7e0      	b.n	800bb8c <__ieee754_pow+0xdc>
 800bbca:	2f00      	cmp	r7, #0
 800bbcc:	daf2      	bge.n	800bbb4 <__ieee754_pow+0x104>
 800bbce:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800bbd2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bbd6:	e7ef      	b.n	800bbb8 <__ieee754_pow+0x108>
 800bbd8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800bbdc:	d104      	bne.n	800bbe8 <__ieee754_pow+0x138>
 800bbde:	4610      	mov	r0, r2
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	f7f4 fd09 	bl	80005f8 <__aeabi_dmul>
 800bbe6:	e7e7      	b.n	800bbb8 <__ieee754_pow+0x108>
 800bbe8:	493e      	ldr	r1, [pc, #248]	; (800bce4 <__ieee754_pow+0x234>)
 800bbea:	428f      	cmp	r7, r1
 800bbec:	d10d      	bne.n	800bc0a <__ieee754_pow+0x15a>
 800bbee:	f1b9 0f00 	cmp.w	r9, #0
 800bbf2:	db0a      	blt.n	800bc0a <__ieee754_pow+0x15a>
 800bbf4:	ec43 2b10 	vmov	d0, r2, r3
 800bbf8:	b00d      	add	sp, #52	; 0x34
 800bbfa:	ecbd 8b06 	vpop	{d8-d10}
 800bbfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc02:	f000 bc77 	b.w	800c4f4 <__ieee754_sqrt>
 800bc06:	2100      	movs	r1, #0
 800bc08:	9100      	str	r1, [sp, #0]
 800bc0a:	ec43 2b10 	vmov	d0, r2, r3
 800bc0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bc12:	f000 fd23 	bl	800c65c <fabs>
 800bc16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc1a:	ec51 0b10 	vmov	r0, r1, d0
 800bc1e:	f1b8 0f00 	cmp.w	r8, #0
 800bc22:	d12a      	bne.n	800bc7a <__ieee754_pow+0x1ca>
 800bc24:	b12c      	cbz	r4, 800bc32 <__ieee754_pow+0x182>
 800bc26:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800bcdc <__ieee754_pow+0x22c>
 800bc2a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800bc2e:	45e6      	cmp	lr, ip
 800bc30:	d123      	bne.n	800bc7a <__ieee754_pow+0x1ca>
 800bc32:	2f00      	cmp	r7, #0
 800bc34:	da05      	bge.n	800bc42 <__ieee754_pow+0x192>
 800bc36:	4602      	mov	r2, r0
 800bc38:	460b      	mov	r3, r1
 800bc3a:	2000      	movs	r0, #0
 800bc3c:	4927      	ldr	r1, [pc, #156]	; (800bcdc <__ieee754_pow+0x22c>)
 800bc3e:	f7f4 fe05 	bl	800084c <__aeabi_ddiv>
 800bc42:	f1b9 0f00 	cmp.w	r9, #0
 800bc46:	dab7      	bge.n	800bbb8 <__ieee754_pow+0x108>
 800bc48:	9b00      	ldr	r3, [sp, #0]
 800bc4a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bc4e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bc52:	4323      	orrs	r3, r4
 800bc54:	d108      	bne.n	800bc68 <__ieee754_pow+0x1b8>
 800bc56:	4602      	mov	r2, r0
 800bc58:	460b      	mov	r3, r1
 800bc5a:	4610      	mov	r0, r2
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	f7f4 fb13 	bl	8000288 <__aeabi_dsub>
 800bc62:	4602      	mov	r2, r0
 800bc64:	460b      	mov	r3, r1
 800bc66:	e78d      	b.n	800bb84 <__ieee754_pow+0xd4>
 800bc68:	9b00      	ldr	r3, [sp, #0]
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	d1a4      	bne.n	800bbb8 <__ieee754_pow+0x108>
 800bc6e:	4602      	mov	r2, r0
 800bc70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc74:	4610      	mov	r0, r2
 800bc76:	4619      	mov	r1, r3
 800bc78:	e79e      	b.n	800bbb8 <__ieee754_pow+0x108>
 800bc7a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800bc7e:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800bc82:	950a      	str	r5, [sp, #40]	; 0x28
 800bc84:	9d00      	ldr	r5, [sp, #0]
 800bc86:	46ac      	mov	ip, r5
 800bc88:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800bc8a:	ea5c 0505 	orrs.w	r5, ip, r5
 800bc8e:	d0e4      	beq.n	800bc5a <__ieee754_pow+0x1aa>
 800bc90:	4b15      	ldr	r3, [pc, #84]	; (800bce8 <__ieee754_pow+0x238>)
 800bc92:	429e      	cmp	r6, r3
 800bc94:	f340 80fc 	ble.w	800be90 <__ieee754_pow+0x3e0>
 800bc98:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bc9c:	429e      	cmp	r6, r3
 800bc9e:	4b10      	ldr	r3, [pc, #64]	; (800bce0 <__ieee754_pow+0x230>)
 800bca0:	dd07      	ble.n	800bcb2 <__ieee754_pow+0x202>
 800bca2:	429c      	cmp	r4, r3
 800bca4:	dc0a      	bgt.n	800bcbc <__ieee754_pow+0x20c>
 800bca6:	2f00      	cmp	r7, #0
 800bca8:	da84      	bge.n	800bbb4 <__ieee754_pow+0x104>
 800bcaa:	a307      	add	r3, pc, #28	; (adr r3, 800bcc8 <__ieee754_pow+0x218>)
 800bcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb0:	e795      	b.n	800bbde <__ieee754_pow+0x12e>
 800bcb2:	429c      	cmp	r4, r3
 800bcb4:	dbf7      	blt.n	800bca6 <__ieee754_pow+0x1f6>
 800bcb6:	4b09      	ldr	r3, [pc, #36]	; (800bcdc <__ieee754_pow+0x22c>)
 800bcb8:	429c      	cmp	r4, r3
 800bcba:	dd17      	ble.n	800bcec <__ieee754_pow+0x23c>
 800bcbc:	2f00      	cmp	r7, #0
 800bcbe:	dcf4      	bgt.n	800bcaa <__ieee754_pow+0x1fa>
 800bcc0:	e778      	b.n	800bbb4 <__ieee754_pow+0x104>
 800bcc2:	bf00      	nop
 800bcc4:	f3af 8000 	nop.w
 800bcc8:	8800759c 	.word	0x8800759c
 800bccc:	7e37e43c 	.word	0x7e37e43c
 800bcd0:	7ff00000 	.word	0x7ff00000
 800bcd4:	0800d445 	.word	0x0800d445
 800bcd8:	433fffff 	.word	0x433fffff
 800bcdc:	3ff00000 	.word	0x3ff00000
 800bce0:	3fefffff 	.word	0x3fefffff
 800bce4:	3fe00000 	.word	0x3fe00000
 800bce8:	41e00000 	.word	0x41e00000
 800bcec:	4b64      	ldr	r3, [pc, #400]	; (800be80 <__ieee754_pow+0x3d0>)
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f7f4 faca 	bl	8000288 <__aeabi_dsub>
 800bcf4:	a356      	add	r3, pc, #344	; (adr r3, 800be50 <__ieee754_pow+0x3a0>)
 800bcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfa:	4604      	mov	r4, r0
 800bcfc:	460d      	mov	r5, r1
 800bcfe:	f7f4 fc7b 	bl	80005f8 <__aeabi_dmul>
 800bd02:	a355      	add	r3, pc, #340	; (adr r3, 800be58 <__ieee754_pow+0x3a8>)
 800bd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd08:	4606      	mov	r6, r0
 800bd0a:	460f      	mov	r7, r1
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	4629      	mov	r1, r5
 800bd10:	f7f4 fc72 	bl	80005f8 <__aeabi_dmul>
 800bd14:	4b5b      	ldr	r3, [pc, #364]	; (800be84 <__ieee754_pow+0x3d4>)
 800bd16:	4682      	mov	sl, r0
 800bd18:	468b      	mov	fp, r1
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	4629      	mov	r1, r5
 800bd20:	f7f4 fc6a 	bl	80005f8 <__aeabi_dmul>
 800bd24:	4602      	mov	r2, r0
 800bd26:	460b      	mov	r3, r1
 800bd28:	a14d      	add	r1, pc, #308	; (adr r1, 800be60 <__ieee754_pow+0x3b0>)
 800bd2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd2e:	f7f4 faab 	bl	8000288 <__aeabi_dsub>
 800bd32:	4622      	mov	r2, r4
 800bd34:	462b      	mov	r3, r5
 800bd36:	f7f4 fc5f 	bl	80005f8 <__aeabi_dmul>
 800bd3a:	4602      	mov	r2, r0
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	2000      	movs	r0, #0
 800bd40:	4951      	ldr	r1, [pc, #324]	; (800be88 <__ieee754_pow+0x3d8>)
 800bd42:	f7f4 faa1 	bl	8000288 <__aeabi_dsub>
 800bd46:	4622      	mov	r2, r4
 800bd48:	4680      	mov	r8, r0
 800bd4a:	4689      	mov	r9, r1
 800bd4c:	462b      	mov	r3, r5
 800bd4e:	4620      	mov	r0, r4
 800bd50:	4629      	mov	r1, r5
 800bd52:	f7f4 fc51 	bl	80005f8 <__aeabi_dmul>
 800bd56:	4602      	mov	r2, r0
 800bd58:	460b      	mov	r3, r1
 800bd5a:	4640      	mov	r0, r8
 800bd5c:	4649      	mov	r1, r9
 800bd5e:	f7f4 fc4b 	bl	80005f8 <__aeabi_dmul>
 800bd62:	a341      	add	r3, pc, #260	; (adr r3, 800be68 <__ieee754_pow+0x3b8>)
 800bd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd68:	f7f4 fc46 	bl	80005f8 <__aeabi_dmul>
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	460b      	mov	r3, r1
 800bd70:	4650      	mov	r0, sl
 800bd72:	4659      	mov	r1, fp
 800bd74:	f7f4 fa88 	bl	8000288 <__aeabi_dsub>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	4680      	mov	r8, r0
 800bd7e:	4689      	mov	r9, r1
 800bd80:	4630      	mov	r0, r6
 800bd82:	4639      	mov	r1, r7
 800bd84:	f7f4 fa82 	bl	800028c <__adddf3>
 800bd88:	2400      	movs	r4, #0
 800bd8a:	4632      	mov	r2, r6
 800bd8c:	463b      	mov	r3, r7
 800bd8e:	4620      	mov	r0, r4
 800bd90:	460d      	mov	r5, r1
 800bd92:	f7f4 fa79 	bl	8000288 <__aeabi_dsub>
 800bd96:	4602      	mov	r2, r0
 800bd98:	460b      	mov	r3, r1
 800bd9a:	4640      	mov	r0, r8
 800bd9c:	4649      	mov	r1, r9
 800bd9e:	f7f4 fa73 	bl	8000288 <__aeabi_dsub>
 800bda2:	9b00      	ldr	r3, [sp, #0]
 800bda4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bda6:	3b01      	subs	r3, #1
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	4682      	mov	sl, r0
 800bdac:	468b      	mov	fp, r1
 800bdae:	f040 81f1 	bne.w	800c194 <__ieee754_pow+0x6e4>
 800bdb2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800be70 <__ieee754_pow+0x3c0>
 800bdb6:	eeb0 8a47 	vmov.f32	s16, s14
 800bdba:	eef0 8a67 	vmov.f32	s17, s15
 800bdbe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bdc2:	2600      	movs	r6, #0
 800bdc4:	4632      	mov	r2, r6
 800bdc6:	463b      	mov	r3, r7
 800bdc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdcc:	f7f4 fa5c 	bl	8000288 <__aeabi_dsub>
 800bdd0:	4622      	mov	r2, r4
 800bdd2:	462b      	mov	r3, r5
 800bdd4:	f7f4 fc10 	bl	80005f8 <__aeabi_dmul>
 800bdd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bddc:	4680      	mov	r8, r0
 800bdde:	4689      	mov	r9, r1
 800bde0:	4650      	mov	r0, sl
 800bde2:	4659      	mov	r1, fp
 800bde4:	f7f4 fc08 	bl	80005f8 <__aeabi_dmul>
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	4640      	mov	r0, r8
 800bdee:	4649      	mov	r1, r9
 800bdf0:	f7f4 fa4c 	bl	800028c <__adddf3>
 800bdf4:	4632      	mov	r2, r6
 800bdf6:	463b      	mov	r3, r7
 800bdf8:	4680      	mov	r8, r0
 800bdfa:	4689      	mov	r9, r1
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	4629      	mov	r1, r5
 800be00:	f7f4 fbfa 	bl	80005f8 <__aeabi_dmul>
 800be04:	460b      	mov	r3, r1
 800be06:	4604      	mov	r4, r0
 800be08:	460d      	mov	r5, r1
 800be0a:	4602      	mov	r2, r0
 800be0c:	4649      	mov	r1, r9
 800be0e:	4640      	mov	r0, r8
 800be10:	f7f4 fa3c 	bl	800028c <__adddf3>
 800be14:	4b1d      	ldr	r3, [pc, #116]	; (800be8c <__ieee754_pow+0x3dc>)
 800be16:	4299      	cmp	r1, r3
 800be18:	ec45 4b19 	vmov	d9, r4, r5
 800be1c:	4606      	mov	r6, r0
 800be1e:	460f      	mov	r7, r1
 800be20:	468b      	mov	fp, r1
 800be22:	f340 82fe 	ble.w	800c422 <__ieee754_pow+0x972>
 800be26:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800be2a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800be2e:	4303      	orrs	r3, r0
 800be30:	f000 81f0 	beq.w	800c214 <__ieee754_pow+0x764>
 800be34:	a310      	add	r3, pc, #64	; (adr r3, 800be78 <__ieee754_pow+0x3c8>)
 800be36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3a:	ec51 0b18 	vmov	r0, r1, d8
 800be3e:	f7f4 fbdb 	bl	80005f8 <__aeabi_dmul>
 800be42:	a30d      	add	r3, pc, #52	; (adr r3, 800be78 <__ieee754_pow+0x3c8>)
 800be44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be48:	e6cb      	b.n	800bbe2 <__ieee754_pow+0x132>
 800be4a:	bf00      	nop
 800be4c:	f3af 8000 	nop.w
 800be50:	60000000 	.word	0x60000000
 800be54:	3ff71547 	.word	0x3ff71547
 800be58:	f85ddf44 	.word	0xf85ddf44
 800be5c:	3e54ae0b 	.word	0x3e54ae0b
 800be60:	55555555 	.word	0x55555555
 800be64:	3fd55555 	.word	0x3fd55555
 800be68:	652b82fe 	.word	0x652b82fe
 800be6c:	3ff71547 	.word	0x3ff71547
 800be70:	00000000 	.word	0x00000000
 800be74:	bff00000 	.word	0xbff00000
 800be78:	8800759c 	.word	0x8800759c
 800be7c:	7e37e43c 	.word	0x7e37e43c
 800be80:	3ff00000 	.word	0x3ff00000
 800be84:	3fd00000 	.word	0x3fd00000
 800be88:	3fe00000 	.word	0x3fe00000
 800be8c:	408fffff 	.word	0x408fffff
 800be90:	4bd7      	ldr	r3, [pc, #860]	; (800c1f0 <__ieee754_pow+0x740>)
 800be92:	ea03 0309 	and.w	r3, r3, r9
 800be96:	2200      	movs	r2, #0
 800be98:	b92b      	cbnz	r3, 800bea6 <__ieee754_pow+0x3f6>
 800be9a:	4bd6      	ldr	r3, [pc, #856]	; (800c1f4 <__ieee754_pow+0x744>)
 800be9c:	f7f4 fbac 	bl	80005f8 <__aeabi_dmul>
 800bea0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bea4:	460c      	mov	r4, r1
 800bea6:	1523      	asrs	r3, r4, #20
 800bea8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800beac:	4413      	add	r3, r2
 800beae:	9309      	str	r3, [sp, #36]	; 0x24
 800beb0:	4bd1      	ldr	r3, [pc, #836]	; (800c1f8 <__ieee754_pow+0x748>)
 800beb2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800beb6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800beba:	429c      	cmp	r4, r3
 800bebc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bec0:	dd08      	ble.n	800bed4 <__ieee754_pow+0x424>
 800bec2:	4bce      	ldr	r3, [pc, #824]	; (800c1fc <__ieee754_pow+0x74c>)
 800bec4:	429c      	cmp	r4, r3
 800bec6:	f340 8163 	ble.w	800c190 <__ieee754_pow+0x6e0>
 800beca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800becc:	3301      	adds	r3, #1
 800bece:	9309      	str	r3, [sp, #36]	; 0x24
 800bed0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bed4:	2400      	movs	r4, #0
 800bed6:	00e3      	lsls	r3, r4, #3
 800bed8:	930b      	str	r3, [sp, #44]	; 0x2c
 800beda:	4bc9      	ldr	r3, [pc, #804]	; (800c200 <__ieee754_pow+0x750>)
 800bedc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bee0:	ed93 7b00 	vldr	d7, [r3]
 800bee4:	4629      	mov	r1, r5
 800bee6:	ec53 2b17 	vmov	r2, r3, d7
 800beea:	eeb0 8a47 	vmov.f32	s16, s14
 800beee:	eef0 8a67 	vmov.f32	s17, s15
 800bef2:	4682      	mov	sl, r0
 800bef4:	f7f4 f9c8 	bl	8000288 <__aeabi_dsub>
 800bef8:	4652      	mov	r2, sl
 800befa:	4606      	mov	r6, r0
 800befc:	460f      	mov	r7, r1
 800befe:	462b      	mov	r3, r5
 800bf00:	ec51 0b18 	vmov	r0, r1, d8
 800bf04:	f7f4 f9c2 	bl	800028c <__adddf3>
 800bf08:	4602      	mov	r2, r0
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	2000      	movs	r0, #0
 800bf0e:	49bd      	ldr	r1, [pc, #756]	; (800c204 <__ieee754_pow+0x754>)
 800bf10:	f7f4 fc9c 	bl	800084c <__aeabi_ddiv>
 800bf14:	ec41 0b19 	vmov	d9, r0, r1
 800bf18:	4602      	mov	r2, r0
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	4630      	mov	r0, r6
 800bf1e:	4639      	mov	r1, r7
 800bf20:	f7f4 fb6a 	bl	80005f8 <__aeabi_dmul>
 800bf24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bf28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bf30:	2300      	movs	r3, #0
 800bf32:	9304      	str	r3, [sp, #16]
 800bf34:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bf38:	46ab      	mov	fp, r5
 800bf3a:	106d      	asrs	r5, r5, #1
 800bf3c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bf40:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bf44:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bf48:	2200      	movs	r2, #0
 800bf4a:	4640      	mov	r0, r8
 800bf4c:	4649      	mov	r1, r9
 800bf4e:	4614      	mov	r4, r2
 800bf50:	461d      	mov	r5, r3
 800bf52:	f7f4 fb51 	bl	80005f8 <__aeabi_dmul>
 800bf56:	4602      	mov	r2, r0
 800bf58:	460b      	mov	r3, r1
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	4639      	mov	r1, r7
 800bf5e:	f7f4 f993 	bl	8000288 <__aeabi_dsub>
 800bf62:	ec53 2b18 	vmov	r2, r3, d8
 800bf66:	4606      	mov	r6, r0
 800bf68:	460f      	mov	r7, r1
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	4629      	mov	r1, r5
 800bf6e:	f7f4 f98b 	bl	8000288 <__aeabi_dsub>
 800bf72:	4602      	mov	r2, r0
 800bf74:	460b      	mov	r3, r1
 800bf76:	4650      	mov	r0, sl
 800bf78:	4659      	mov	r1, fp
 800bf7a:	f7f4 f985 	bl	8000288 <__aeabi_dsub>
 800bf7e:	4642      	mov	r2, r8
 800bf80:	464b      	mov	r3, r9
 800bf82:	f7f4 fb39 	bl	80005f8 <__aeabi_dmul>
 800bf86:	4602      	mov	r2, r0
 800bf88:	460b      	mov	r3, r1
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	4639      	mov	r1, r7
 800bf8e:	f7f4 f97b 	bl	8000288 <__aeabi_dsub>
 800bf92:	ec53 2b19 	vmov	r2, r3, d9
 800bf96:	f7f4 fb2f 	bl	80005f8 <__aeabi_dmul>
 800bf9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf9e:	ec41 0b18 	vmov	d8, r0, r1
 800bfa2:	4610      	mov	r0, r2
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	f7f4 fb27 	bl	80005f8 <__aeabi_dmul>
 800bfaa:	a37d      	add	r3, pc, #500	; (adr r3, 800c1a0 <__ieee754_pow+0x6f0>)
 800bfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb0:	4604      	mov	r4, r0
 800bfb2:	460d      	mov	r5, r1
 800bfb4:	f7f4 fb20 	bl	80005f8 <__aeabi_dmul>
 800bfb8:	a37b      	add	r3, pc, #492	; (adr r3, 800c1a8 <__ieee754_pow+0x6f8>)
 800bfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfbe:	f7f4 f965 	bl	800028c <__adddf3>
 800bfc2:	4622      	mov	r2, r4
 800bfc4:	462b      	mov	r3, r5
 800bfc6:	f7f4 fb17 	bl	80005f8 <__aeabi_dmul>
 800bfca:	a379      	add	r3, pc, #484	; (adr r3, 800c1b0 <__ieee754_pow+0x700>)
 800bfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd0:	f7f4 f95c 	bl	800028c <__adddf3>
 800bfd4:	4622      	mov	r2, r4
 800bfd6:	462b      	mov	r3, r5
 800bfd8:	f7f4 fb0e 	bl	80005f8 <__aeabi_dmul>
 800bfdc:	a376      	add	r3, pc, #472	; (adr r3, 800c1b8 <__ieee754_pow+0x708>)
 800bfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe2:	f7f4 f953 	bl	800028c <__adddf3>
 800bfe6:	4622      	mov	r2, r4
 800bfe8:	462b      	mov	r3, r5
 800bfea:	f7f4 fb05 	bl	80005f8 <__aeabi_dmul>
 800bfee:	a374      	add	r3, pc, #464	; (adr r3, 800c1c0 <__ieee754_pow+0x710>)
 800bff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff4:	f7f4 f94a 	bl	800028c <__adddf3>
 800bff8:	4622      	mov	r2, r4
 800bffa:	462b      	mov	r3, r5
 800bffc:	f7f4 fafc 	bl	80005f8 <__aeabi_dmul>
 800c000:	a371      	add	r3, pc, #452	; (adr r3, 800c1c8 <__ieee754_pow+0x718>)
 800c002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c006:	f7f4 f941 	bl	800028c <__adddf3>
 800c00a:	4622      	mov	r2, r4
 800c00c:	4606      	mov	r6, r0
 800c00e:	460f      	mov	r7, r1
 800c010:	462b      	mov	r3, r5
 800c012:	4620      	mov	r0, r4
 800c014:	4629      	mov	r1, r5
 800c016:	f7f4 faef 	bl	80005f8 <__aeabi_dmul>
 800c01a:	4602      	mov	r2, r0
 800c01c:	460b      	mov	r3, r1
 800c01e:	4630      	mov	r0, r6
 800c020:	4639      	mov	r1, r7
 800c022:	f7f4 fae9 	bl	80005f8 <__aeabi_dmul>
 800c026:	4642      	mov	r2, r8
 800c028:	4604      	mov	r4, r0
 800c02a:	460d      	mov	r5, r1
 800c02c:	464b      	mov	r3, r9
 800c02e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c032:	f7f4 f92b 	bl	800028c <__adddf3>
 800c036:	ec53 2b18 	vmov	r2, r3, d8
 800c03a:	f7f4 fadd 	bl	80005f8 <__aeabi_dmul>
 800c03e:	4622      	mov	r2, r4
 800c040:	462b      	mov	r3, r5
 800c042:	f7f4 f923 	bl	800028c <__adddf3>
 800c046:	4642      	mov	r2, r8
 800c048:	4682      	mov	sl, r0
 800c04a:	468b      	mov	fp, r1
 800c04c:	464b      	mov	r3, r9
 800c04e:	4640      	mov	r0, r8
 800c050:	4649      	mov	r1, r9
 800c052:	f7f4 fad1 	bl	80005f8 <__aeabi_dmul>
 800c056:	4b6c      	ldr	r3, [pc, #432]	; (800c208 <__ieee754_pow+0x758>)
 800c058:	2200      	movs	r2, #0
 800c05a:	4606      	mov	r6, r0
 800c05c:	460f      	mov	r7, r1
 800c05e:	f7f4 f915 	bl	800028c <__adddf3>
 800c062:	4652      	mov	r2, sl
 800c064:	465b      	mov	r3, fp
 800c066:	f7f4 f911 	bl	800028c <__adddf3>
 800c06a:	9c04      	ldr	r4, [sp, #16]
 800c06c:	460d      	mov	r5, r1
 800c06e:	4622      	mov	r2, r4
 800c070:	460b      	mov	r3, r1
 800c072:	4640      	mov	r0, r8
 800c074:	4649      	mov	r1, r9
 800c076:	f7f4 fabf 	bl	80005f8 <__aeabi_dmul>
 800c07a:	4b63      	ldr	r3, [pc, #396]	; (800c208 <__ieee754_pow+0x758>)
 800c07c:	4680      	mov	r8, r0
 800c07e:	4689      	mov	r9, r1
 800c080:	2200      	movs	r2, #0
 800c082:	4620      	mov	r0, r4
 800c084:	4629      	mov	r1, r5
 800c086:	f7f4 f8ff 	bl	8000288 <__aeabi_dsub>
 800c08a:	4632      	mov	r2, r6
 800c08c:	463b      	mov	r3, r7
 800c08e:	f7f4 f8fb 	bl	8000288 <__aeabi_dsub>
 800c092:	4602      	mov	r2, r0
 800c094:	460b      	mov	r3, r1
 800c096:	4650      	mov	r0, sl
 800c098:	4659      	mov	r1, fp
 800c09a:	f7f4 f8f5 	bl	8000288 <__aeabi_dsub>
 800c09e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c0a2:	f7f4 faa9 	bl	80005f8 <__aeabi_dmul>
 800c0a6:	4622      	mov	r2, r4
 800c0a8:	4606      	mov	r6, r0
 800c0aa:	460f      	mov	r7, r1
 800c0ac:	462b      	mov	r3, r5
 800c0ae:	ec51 0b18 	vmov	r0, r1, d8
 800c0b2:	f7f4 faa1 	bl	80005f8 <__aeabi_dmul>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	4630      	mov	r0, r6
 800c0bc:	4639      	mov	r1, r7
 800c0be:	f7f4 f8e5 	bl	800028c <__adddf3>
 800c0c2:	4606      	mov	r6, r0
 800c0c4:	460f      	mov	r7, r1
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	4640      	mov	r0, r8
 800c0cc:	4649      	mov	r1, r9
 800c0ce:	f7f4 f8dd 	bl	800028c <__adddf3>
 800c0d2:	9c04      	ldr	r4, [sp, #16]
 800c0d4:	a33e      	add	r3, pc, #248	; (adr r3, 800c1d0 <__ieee754_pow+0x720>)
 800c0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0da:	4620      	mov	r0, r4
 800c0dc:	460d      	mov	r5, r1
 800c0de:	f7f4 fa8b 	bl	80005f8 <__aeabi_dmul>
 800c0e2:	4642      	mov	r2, r8
 800c0e4:	ec41 0b18 	vmov	d8, r0, r1
 800c0e8:	464b      	mov	r3, r9
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	4629      	mov	r1, r5
 800c0ee:	f7f4 f8cb 	bl	8000288 <__aeabi_dsub>
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	4630      	mov	r0, r6
 800c0f8:	4639      	mov	r1, r7
 800c0fa:	f7f4 f8c5 	bl	8000288 <__aeabi_dsub>
 800c0fe:	a336      	add	r3, pc, #216	; (adr r3, 800c1d8 <__ieee754_pow+0x728>)
 800c100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c104:	f7f4 fa78 	bl	80005f8 <__aeabi_dmul>
 800c108:	a335      	add	r3, pc, #212	; (adr r3, 800c1e0 <__ieee754_pow+0x730>)
 800c10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10e:	4606      	mov	r6, r0
 800c110:	460f      	mov	r7, r1
 800c112:	4620      	mov	r0, r4
 800c114:	4629      	mov	r1, r5
 800c116:	f7f4 fa6f 	bl	80005f8 <__aeabi_dmul>
 800c11a:	4602      	mov	r2, r0
 800c11c:	460b      	mov	r3, r1
 800c11e:	4630      	mov	r0, r6
 800c120:	4639      	mov	r1, r7
 800c122:	f7f4 f8b3 	bl	800028c <__adddf3>
 800c126:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c128:	4b38      	ldr	r3, [pc, #224]	; (800c20c <__ieee754_pow+0x75c>)
 800c12a:	4413      	add	r3, r2
 800c12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c130:	f7f4 f8ac 	bl	800028c <__adddf3>
 800c134:	4682      	mov	sl, r0
 800c136:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c138:	468b      	mov	fp, r1
 800c13a:	f7f4 f9f3 	bl	8000524 <__aeabi_i2d>
 800c13e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c140:	4b33      	ldr	r3, [pc, #204]	; (800c210 <__ieee754_pow+0x760>)
 800c142:	4413      	add	r3, r2
 800c144:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c148:	4606      	mov	r6, r0
 800c14a:	460f      	mov	r7, r1
 800c14c:	4652      	mov	r2, sl
 800c14e:	465b      	mov	r3, fp
 800c150:	ec51 0b18 	vmov	r0, r1, d8
 800c154:	f7f4 f89a 	bl	800028c <__adddf3>
 800c158:	4642      	mov	r2, r8
 800c15a:	464b      	mov	r3, r9
 800c15c:	f7f4 f896 	bl	800028c <__adddf3>
 800c160:	4632      	mov	r2, r6
 800c162:	463b      	mov	r3, r7
 800c164:	f7f4 f892 	bl	800028c <__adddf3>
 800c168:	9c04      	ldr	r4, [sp, #16]
 800c16a:	4632      	mov	r2, r6
 800c16c:	463b      	mov	r3, r7
 800c16e:	4620      	mov	r0, r4
 800c170:	460d      	mov	r5, r1
 800c172:	f7f4 f889 	bl	8000288 <__aeabi_dsub>
 800c176:	4642      	mov	r2, r8
 800c178:	464b      	mov	r3, r9
 800c17a:	f7f4 f885 	bl	8000288 <__aeabi_dsub>
 800c17e:	ec53 2b18 	vmov	r2, r3, d8
 800c182:	f7f4 f881 	bl	8000288 <__aeabi_dsub>
 800c186:	4602      	mov	r2, r0
 800c188:	460b      	mov	r3, r1
 800c18a:	4650      	mov	r0, sl
 800c18c:	4659      	mov	r1, fp
 800c18e:	e606      	b.n	800bd9e <__ieee754_pow+0x2ee>
 800c190:	2401      	movs	r4, #1
 800c192:	e6a0      	b.n	800bed6 <__ieee754_pow+0x426>
 800c194:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800c1e8 <__ieee754_pow+0x738>
 800c198:	e60d      	b.n	800bdb6 <__ieee754_pow+0x306>
 800c19a:	bf00      	nop
 800c19c:	f3af 8000 	nop.w
 800c1a0:	4a454eef 	.word	0x4a454eef
 800c1a4:	3fca7e28 	.word	0x3fca7e28
 800c1a8:	93c9db65 	.word	0x93c9db65
 800c1ac:	3fcd864a 	.word	0x3fcd864a
 800c1b0:	a91d4101 	.word	0xa91d4101
 800c1b4:	3fd17460 	.word	0x3fd17460
 800c1b8:	518f264d 	.word	0x518f264d
 800c1bc:	3fd55555 	.word	0x3fd55555
 800c1c0:	db6fabff 	.word	0xdb6fabff
 800c1c4:	3fdb6db6 	.word	0x3fdb6db6
 800c1c8:	33333303 	.word	0x33333303
 800c1cc:	3fe33333 	.word	0x3fe33333
 800c1d0:	e0000000 	.word	0xe0000000
 800c1d4:	3feec709 	.word	0x3feec709
 800c1d8:	dc3a03fd 	.word	0xdc3a03fd
 800c1dc:	3feec709 	.word	0x3feec709
 800c1e0:	145b01f5 	.word	0x145b01f5
 800c1e4:	be3e2fe0 	.word	0xbe3e2fe0
 800c1e8:	00000000 	.word	0x00000000
 800c1ec:	3ff00000 	.word	0x3ff00000
 800c1f0:	7ff00000 	.word	0x7ff00000
 800c1f4:	43400000 	.word	0x43400000
 800c1f8:	0003988e 	.word	0x0003988e
 800c1fc:	000bb679 	.word	0x000bb679
 800c200:	0800d478 	.word	0x0800d478
 800c204:	3ff00000 	.word	0x3ff00000
 800c208:	40080000 	.word	0x40080000
 800c20c:	0800d498 	.word	0x0800d498
 800c210:	0800d488 	.word	0x0800d488
 800c214:	a3b5      	add	r3, pc, #724	; (adr r3, 800c4ec <__ieee754_pow+0xa3c>)
 800c216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21a:	4640      	mov	r0, r8
 800c21c:	4649      	mov	r1, r9
 800c21e:	f7f4 f835 	bl	800028c <__adddf3>
 800c222:	4622      	mov	r2, r4
 800c224:	ec41 0b1a 	vmov	d10, r0, r1
 800c228:	462b      	mov	r3, r5
 800c22a:	4630      	mov	r0, r6
 800c22c:	4639      	mov	r1, r7
 800c22e:	f7f4 f82b 	bl	8000288 <__aeabi_dsub>
 800c232:	4602      	mov	r2, r0
 800c234:	460b      	mov	r3, r1
 800c236:	ec51 0b1a 	vmov	r0, r1, d10
 800c23a:	f7f4 fc6d 	bl	8000b18 <__aeabi_dcmpgt>
 800c23e:	2800      	cmp	r0, #0
 800c240:	f47f adf8 	bne.w	800be34 <__ieee754_pow+0x384>
 800c244:	4aa4      	ldr	r2, [pc, #656]	; (800c4d8 <__ieee754_pow+0xa28>)
 800c246:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c24a:	4293      	cmp	r3, r2
 800c24c:	f340 810b 	ble.w	800c466 <__ieee754_pow+0x9b6>
 800c250:	151b      	asrs	r3, r3, #20
 800c252:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c256:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c25a:	fa4a f303 	asr.w	r3, sl, r3
 800c25e:	445b      	add	r3, fp
 800c260:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c264:	4e9d      	ldr	r6, [pc, #628]	; (800c4dc <__ieee754_pow+0xa2c>)
 800c266:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c26a:	4116      	asrs	r6, r2
 800c26c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c270:	2000      	movs	r0, #0
 800c272:	ea23 0106 	bic.w	r1, r3, r6
 800c276:	f1c2 0214 	rsb	r2, r2, #20
 800c27a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c27e:	fa4a fa02 	asr.w	sl, sl, r2
 800c282:	f1bb 0f00 	cmp.w	fp, #0
 800c286:	4602      	mov	r2, r0
 800c288:	460b      	mov	r3, r1
 800c28a:	4620      	mov	r0, r4
 800c28c:	4629      	mov	r1, r5
 800c28e:	bfb8      	it	lt
 800c290:	f1ca 0a00 	rsblt	sl, sl, #0
 800c294:	f7f3 fff8 	bl	8000288 <__aeabi_dsub>
 800c298:	ec41 0b19 	vmov	d9, r0, r1
 800c29c:	4642      	mov	r2, r8
 800c29e:	464b      	mov	r3, r9
 800c2a0:	ec51 0b19 	vmov	r0, r1, d9
 800c2a4:	f7f3 fff2 	bl	800028c <__adddf3>
 800c2a8:	2400      	movs	r4, #0
 800c2aa:	a379      	add	r3, pc, #484	; (adr r3, 800c490 <__ieee754_pow+0x9e0>)
 800c2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	460d      	mov	r5, r1
 800c2b4:	f7f4 f9a0 	bl	80005f8 <__aeabi_dmul>
 800c2b8:	ec53 2b19 	vmov	r2, r3, d9
 800c2bc:	4606      	mov	r6, r0
 800c2be:	460f      	mov	r7, r1
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	4629      	mov	r1, r5
 800c2c4:	f7f3 ffe0 	bl	8000288 <__aeabi_dsub>
 800c2c8:	4602      	mov	r2, r0
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	4640      	mov	r0, r8
 800c2ce:	4649      	mov	r1, r9
 800c2d0:	f7f3 ffda 	bl	8000288 <__aeabi_dsub>
 800c2d4:	a370      	add	r3, pc, #448	; (adr r3, 800c498 <__ieee754_pow+0x9e8>)
 800c2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2da:	f7f4 f98d 	bl	80005f8 <__aeabi_dmul>
 800c2de:	a370      	add	r3, pc, #448	; (adr r3, 800c4a0 <__ieee754_pow+0x9f0>)
 800c2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e4:	4680      	mov	r8, r0
 800c2e6:	4689      	mov	r9, r1
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	4629      	mov	r1, r5
 800c2ec:	f7f4 f984 	bl	80005f8 <__aeabi_dmul>
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	460b      	mov	r3, r1
 800c2f4:	4640      	mov	r0, r8
 800c2f6:	4649      	mov	r1, r9
 800c2f8:	f7f3 ffc8 	bl	800028c <__adddf3>
 800c2fc:	4604      	mov	r4, r0
 800c2fe:	460d      	mov	r5, r1
 800c300:	4602      	mov	r2, r0
 800c302:	460b      	mov	r3, r1
 800c304:	4630      	mov	r0, r6
 800c306:	4639      	mov	r1, r7
 800c308:	f7f3 ffc0 	bl	800028c <__adddf3>
 800c30c:	4632      	mov	r2, r6
 800c30e:	463b      	mov	r3, r7
 800c310:	4680      	mov	r8, r0
 800c312:	4689      	mov	r9, r1
 800c314:	f7f3 ffb8 	bl	8000288 <__aeabi_dsub>
 800c318:	4602      	mov	r2, r0
 800c31a:	460b      	mov	r3, r1
 800c31c:	4620      	mov	r0, r4
 800c31e:	4629      	mov	r1, r5
 800c320:	f7f3 ffb2 	bl	8000288 <__aeabi_dsub>
 800c324:	4642      	mov	r2, r8
 800c326:	4606      	mov	r6, r0
 800c328:	460f      	mov	r7, r1
 800c32a:	464b      	mov	r3, r9
 800c32c:	4640      	mov	r0, r8
 800c32e:	4649      	mov	r1, r9
 800c330:	f7f4 f962 	bl	80005f8 <__aeabi_dmul>
 800c334:	a35c      	add	r3, pc, #368	; (adr r3, 800c4a8 <__ieee754_pow+0x9f8>)
 800c336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33a:	4604      	mov	r4, r0
 800c33c:	460d      	mov	r5, r1
 800c33e:	f7f4 f95b 	bl	80005f8 <__aeabi_dmul>
 800c342:	a35b      	add	r3, pc, #364	; (adr r3, 800c4b0 <__ieee754_pow+0xa00>)
 800c344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c348:	f7f3 ff9e 	bl	8000288 <__aeabi_dsub>
 800c34c:	4622      	mov	r2, r4
 800c34e:	462b      	mov	r3, r5
 800c350:	f7f4 f952 	bl	80005f8 <__aeabi_dmul>
 800c354:	a358      	add	r3, pc, #352	; (adr r3, 800c4b8 <__ieee754_pow+0xa08>)
 800c356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35a:	f7f3 ff97 	bl	800028c <__adddf3>
 800c35e:	4622      	mov	r2, r4
 800c360:	462b      	mov	r3, r5
 800c362:	f7f4 f949 	bl	80005f8 <__aeabi_dmul>
 800c366:	a356      	add	r3, pc, #344	; (adr r3, 800c4c0 <__ieee754_pow+0xa10>)
 800c368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36c:	f7f3 ff8c 	bl	8000288 <__aeabi_dsub>
 800c370:	4622      	mov	r2, r4
 800c372:	462b      	mov	r3, r5
 800c374:	f7f4 f940 	bl	80005f8 <__aeabi_dmul>
 800c378:	a353      	add	r3, pc, #332	; (adr r3, 800c4c8 <__ieee754_pow+0xa18>)
 800c37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37e:	f7f3 ff85 	bl	800028c <__adddf3>
 800c382:	4622      	mov	r2, r4
 800c384:	462b      	mov	r3, r5
 800c386:	f7f4 f937 	bl	80005f8 <__aeabi_dmul>
 800c38a:	4602      	mov	r2, r0
 800c38c:	460b      	mov	r3, r1
 800c38e:	4640      	mov	r0, r8
 800c390:	4649      	mov	r1, r9
 800c392:	f7f3 ff79 	bl	8000288 <__aeabi_dsub>
 800c396:	4604      	mov	r4, r0
 800c398:	460d      	mov	r5, r1
 800c39a:	4602      	mov	r2, r0
 800c39c:	460b      	mov	r3, r1
 800c39e:	4640      	mov	r0, r8
 800c3a0:	4649      	mov	r1, r9
 800c3a2:	f7f4 f929 	bl	80005f8 <__aeabi_dmul>
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	ec41 0b19 	vmov	d9, r0, r1
 800c3ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	4629      	mov	r1, r5
 800c3b4:	f7f3 ff68 	bl	8000288 <__aeabi_dsub>
 800c3b8:	4602      	mov	r2, r0
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	ec51 0b19 	vmov	r0, r1, d9
 800c3c0:	f7f4 fa44 	bl	800084c <__aeabi_ddiv>
 800c3c4:	4632      	mov	r2, r6
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	460d      	mov	r5, r1
 800c3ca:	463b      	mov	r3, r7
 800c3cc:	4640      	mov	r0, r8
 800c3ce:	4649      	mov	r1, r9
 800c3d0:	f7f4 f912 	bl	80005f8 <__aeabi_dmul>
 800c3d4:	4632      	mov	r2, r6
 800c3d6:	463b      	mov	r3, r7
 800c3d8:	f7f3 ff58 	bl	800028c <__adddf3>
 800c3dc:	4602      	mov	r2, r0
 800c3de:	460b      	mov	r3, r1
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	4629      	mov	r1, r5
 800c3e4:	f7f3 ff50 	bl	8000288 <__aeabi_dsub>
 800c3e8:	4642      	mov	r2, r8
 800c3ea:	464b      	mov	r3, r9
 800c3ec:	f7f3 ff4c 	bl	8000288 <__aeabi_dsub>
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	493a      	ldr	r1, [pc, #232]	; (800c4e0 <__ieee754_pow+0xa30>)
 800c3f6:	2000      	movs	r0, #0
 800c3f8:	f7f3 ff46 	bl	8000288 <__aeabi_dsub>
 800c3fc:	e9cd 0100 	strd	r0, r1, [sp]
 800c400:	9b01      	ldr	r3, [sp, #4]
 800c402:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c40a:	da2f      	bge.n	800c46c <__ieee754_pow+0x9bc>
 800c40c:	4650      	mov	r0, sl
 800c40e:	ed9d 0b00 	vldr	d0, [sp]
 800c412:	f000 f9cd 	bl	800c7b0 <scalbn>
 800c416:	ec51 0b10 	vmov	r0, r1, d0
 800c41a:	ec53 2b18 	vmov	r2, r3, d8
 800c41e:	f7ff bbe0 	b.w	800bbe2 <__ieee754_pow+0x132>
 800c422:	4b30      	ldr	r3, [pc, #192]	; (800c4e4 <__ieee754_pow+0xa34>)
 800c424:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c428:	429e      	cmp	r6, r3
 800c42a:	f77f af0b 	ble.w	800c244 <__ieee754_pow+0x794>
 800c42e:	4b2e      	ldr	r3, [pc, #184]	; (800c4e8 <__ieee754_pow+0xa38>)
 800c430:	440b      	add	r3, r1
 800c432:	4303      	orrs	r3, r0
 800c434:	d00b      	beq.n	800c44e <__ieee754_pow+0x99e>
 800c436:	a326      	add	r3, pc, #152	; (adr r3, 800c4d0 <__ieee754_pow+0xa20>)
 800c438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43c:	ec51 0b18 	vmov	r0, r1, d8
 800c440:	f7f4 f8da 	bl	80005f8 <__aeabi_dmul>
 800c444:	a322      	add	r3, pc, #136	; (adr r3, 800c4d0 <__ieee754_pow+0xa20>)
 800c446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44a:	f7ff bbca 	b.w	800bbe2 <__ieee754_pow+0x132>
 800c44e:	4622      	mov	r2, r4
 800c450:	462b      	mov	r3, r5
 800c452:	f7f3 ff19 	bl	8000288 <__aeabi_dsub>
 800c456:	4642      	mov	r2, r8
 800c458:	464b      	mov	r3, r9
 800c45a:	f7f4 fb53 	bl	8000b04 <__aeabi_dcmpge>
 800c45e:	2800      	cmp	r0, #0
 800c460:	f43f aef0 	beq.w	800c244 <__ieee754_pow+0x794>
 800c464:	e7e7      	b.n	800c436 <__ieee754_pow+0x986>
 800c466:	f04f 0a00 	mov.w	sl, #0
 800c46a:	e717      	b.n	800c29c <__ieee754_pow+0x7ec>
 800c46c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c470:	4619      	mov	r1, r3
 800c472:	e7d2      	b.n	800c41a <__ieee754_pow+0x96a>
 800c474:	491a      	ldr	r1, [pc, #104]	; (800c4e0 <__ieee754_pow+0xa30>)
 800c476:	2000      	movs	r0, #0
 800c478:	f7ff bb9e 	b.w	800bbb8 <__ieee754_pow+0x108>
 800c47c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c480:	f7ff bb9a 	b.w	800bbb8 <__ieee754_pow+0x108>
 800c484:	9000      	str	r0, [sp, #0]
 800c486:	f7ff bb76 	b.w	800bb76 <__ieee754_pow+0xc6>
 800c48a:	2100      	movs	r1, #0
 800c48c:	f7ff bb60 	b.w	800bb50 <__ieee754_pow+0xa0>
 800c490:	00000000 	.word	0x00000000
 800c494:	3fe62e43 	.word	0x3fe62e43
 800c498:	fefa39ef 	.word	0xfefa39ef
 800c49c:	3fe62e42 	.word	0x3fe62e42
 800c4a0:	0ca86c39 	.word	0x0ca86c39
 800c4a4:	be205c61 	.word	0xbe205c61
 800c4a8:	72bea4d0 	.word	0x72bea4d0
 800c4ac:	3e663769 	.word	0x3e663769
 800c4b0:	c5d26bf1 	.word	0xc5d26bf1
 800c4b4:	3ebbbd41 	.word	0x3ebbbd41
 800c4b8:	af25de2c 	.word	0xaf25de2c
 800c4bc:	3f11566a 	.word	0x3f11566a
 800c4c0:	16bebd93 	.word	0x16bebd93
 800c4c4:	3f66c16c 	.word	0x3f66c16c
 800c4c8:	5555553e 	.word	0x5555553e
 800c4cc:	3fc55555 	.word	0x3fc55555
 800c4d0:	c2f8f359 	.word	0xc2f8f359
 800c4d4:	01a56e1f 	.word	0x01a56e1f
 800c4d8:	3fe00000 	.word	0x3fe00000
 800c4dc:	000fffff 	.word	0x000fffff
 800c4e0:	3ff00000 	.word	0x3ff00000
 800c4e4:	4090cbff 	.word	0x4090cbff
 800c4e8:	3f6f3400 	.word	0x3f6f3400
 800c4ec:	652b82fe 	.word	0x652b82fe
 800c4f0:	3c971547 	.word	0x3c971547

0800c4f4 <__ieee754_sqrt>:
 800c4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4f8:	ec55 4b10 	vmov	r4, r5, d0
 800c4fc:	4e56      	ldr	r6, [pc, #344]	; (800c658 <__ieee754_sqrt+0x164>)
 800c4fe:	43ae      	bics	r6, r5
 800c500:	ee10 0a10 	vmov	r0, s0
 800c504:	ee10 3a10 	vmov	r3, s0
 800c508:	4629      	mov	r1, r5
 800c50a:	462a      	mov	r2, r5
 800c50c:	d110      	bne.n	800c530 <__ieee754_sqrt+0x3c>
 800c50e:	ee10 2a10 	vmov	r2, s0
 800c512:	462b      	mov	r3, r5
 800c514:	f7f4 f870 	bl	80005f8 <__aeabi_dmul>
 800c518:	4602      	mov	r2, r0
 800c51a:	460b      	mov	r3, r1
 800c51c:	4620      	mov	r0, r4
 800c51e:	4629      	mov	r1, r5
 800c520:	f7f3 feb4 	bl	800028c <__adddf3>
 800c524:	4604      	mov	r4, r0
 800c526:	460d      	mov	r5, r1
 800c528:	ec45 4b10 	vmov	d0, r4, r5
 800c52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c530:	2d00      	cmp	r5, #0
 800c532:	dc10      	bgt.n	800c556 <__ieee754_sqrt+0x62>
 800c534:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c538:	4330      	orrs	r0, r6
 800c53a:	d0f5      	beq.n	800c528 <__ieee754_sqrt+0x34>
 800c53c:	b15d      	cbz	r5, 800c556 <__ieee754_sqrt+0x62>
 800c53e:	ee10 2a10 	vmov	r2, s0
 800c542:	462b      	mov	r3, r5
 800c544:	ee10 0a10 	vmov	r0, s0
 800c548:	f7f3 fe9e 	bl	8000288 <__aeabi_dsub>
 800c54c:	4602      	mov	r2, r0
 800c54e:	460b      	mov	r3, r1
 800c550:	f7f4 f97c 	bl	800084c <__aeabi_ddiv>
 800c554:	e7e6      	b.n	800c524 <__ieee754_sqrt+0x30>
 800c556:	1509      	asrs	r1, r1, #20
 800c558:	d076      	beq.n	800c648 <__ieee754_sqrt+0x154>
 800c55a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c55e:	07ce      	lsls	r6, r1, #31
 800c560:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800c564:	bf5e      	ittt	pl
 800c566:	0fda      	lsrpl	r2, r3, #31
 800c568:	005b      	lslpl	r3, r3, #1
 800c56a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800c56e:	0fda      	lsrs	r2, r3, #31
 800c570:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800c574:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800c578:	2000      	movs	r0, #0
 800c57a:	106d      	asrs	r5, r5, #1
 800c57c:	005b      	lsls	r3, r3, #1
 800c57e:	f04f 0e16 	mov.w	lr, #22
 800c582:	4684      	mov	ip, r0
 800c584:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c588:	eb0c 0401 	add.w	r4, ip, r1
 800c58c:	4294      	cmp	r4, r2
 800c58e:	bfde      	ittt	le
 800c590:	1b12      	suble	r2, r2, r4
 800c592:	eb04 0c01 	addle.w	ip, r4, r1
 800c596:	1840      	addle	r0, r0, r1
 800c598:	0052      	lsls	r2, r2, #1
 800c59a:	f1be 0e01 	subs.w	lr, lr, #1
 800c59e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c5a2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c5a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c5aa:	d1ed      	bne.n	800c588 <__ieee754_sqrt+0x94>
 800c5ac:	4671      	mov	r1, lr
 800c5ae:	2720      	movs	r7, #32
 800c5b0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c5b4:	4562      	cmp	r2, ip
 800c5b6:	eb04 060e 	add.w	r6, r4, lr
 800c5ba:	dc02      	bgt.n	800c5c2 <__ieee754_sqrt+0xce>
 800c5bc:	d113      	bne.n	800c5e6 <__ieee754_sqrt+0xf2>
 800c5be:	429e      	cmp	r6, r3
 800c5c0:	d811      	bhi.n	800c5e6 <__ieee754_sqrt+0xf2>
 800c5c2:	2e00      	cmp	r6, #0
 800c5c4:	eb06 0e04 	add.w	lr, r6, r4
 800c5c8:	da43      	bge.n	800c652 <__ieee754_sqrt+0x15e>
 800c5ca:	f1be 0f00 	cmp.w	lr, #0
 800c5ce:	db40      	blt.n	800c652 <__ieee754_sqrt+0x15e>
 800c5d0:	f10c 0801 	add.w	r8, ip, #1
 800c5d4:	eba2 020c 	sub.w	r2, r2, ip
 800c5d8:	429e      	cmp	r6, r3
 800c5da:	bf88      	it	hi
 800c5dc:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800c5e0:	1b9b      	subs	r3, r3, r6
 800c5e2:	4421      	add	r1, r4
 800c5e4:	46c4      	mov	ip, r8
 800c5e6:	0052      	lsls	r2, r2, #1
 800c5e8:	3f01      	subs	r7, #1
 800c5ea:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c5ee:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c5f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c5f6:	d1dd      	bne.n	800c5b4 <__ieee754_sqrt+0xc0>
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	d006      	beq.n	800c60a <__ieee754_sqrt+0x116>
 800c5fc:	1c4c      	adds	r4, r1, #1
 800c5fe:	bf13      	iteet	ne
 800c600:	3101      	addne	r1, #1
 800c602:	3001      	addeq	r0, #1
 800c604:	4639      	moveq	r1, r7
 800c606:	f021 0101 	bicne.w	r1, r1, #1
 800c60a:	1043      	asrs	r3, r0, #1
 800c60c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c610:	0849      	lsrs	r1, r1, #1
 800c612:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c616:	07c2      	lsls	r2, r0, #31
 800c618:	bf48      	it	mi
 800c61a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800c61e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800c622:	460c      	mov	r4, r1
 800c624:	463d      	mov	r5, r7
 800c626:	e77f      	b.n	800c528 <__ieee754_sqrt+0x34>
 800c628:	0ada      	lsrs	r2, r3, #11
 800c62a:	3815      	subs	r0, #21
 800c62c:	055b      	lsls	r3, r3, #21
 800c62e:	2a00      	cmp	r2, #0
 800c630:	d0fa      	beq.n	800c628 <__ieee754_sqrt+0x134>
 800c632:	02d7      	lsls	r7, r2, #11
 800c634:	d50a      	bpl.n	800c64c <__ieee754_sqrt+0x158>
 800c636:	f1c1 0420 	rsb	r4, r1, #32
 800c63a:	fa23 f404 	lsr.w	r4, r3, r4
 800c63e:	1e4d      	subs	r5, r1, #1
 800c640:	408b      	lsls	r3, r1
 800c642:	4322      	orrs	r2, r4
 800c644:	1b41      	subs	r1, r0, r5
 800c646:	e788      	b.n	800c55a <__ieee754_sqrt+0x66>
 800c648:	4608      	mov	r0, r1
 800c64a:	e7f0      	b.n	800c62e <__ieee754_sqrt+0x13a>
 800c64c:	0052      	lsls	r2, r2, #1
 800c64e:	3101      	adds	r1, #1
 800c650:	e7ef      	b.n	800c632 <__ieee754_sqrt+0x13e>
 800c652:	46e0      	mov	r8, ip
 800c654:	e7be      	b.n	800c5d4 <__ieee754_sqrt+0xe0>
 800c656:	bf00      	nop
 800c658:	7ff00000 	.word	0x7ff00000

0800c65c <fabs>:
 800c65c:	ec51 0b10 	vmov	r0, r1, d0
 800c660:	ee10 2a10 	vmov	r2, s0
 800c664:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c668:	ec43 2b10 	vmov	d0, r2, r3
 800c66c:	4770      	bx	lr

0800c66e <finite>:
 800c66e:	b082      	sub	sp, #8
 800c670:	ed8d 0b00 	vstr	d0, [sp]
 800c674:	9801      	ldr	r0, [sp, #4]
 800c676:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c67a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c67e:	0fc0      	lsrs	r0, r0, #31
 800c680:	b002      	add	sp, #8
 800c682:	4770      	bx	lr
 800c684:	0000      	movs	r0, r0
	...

0800c688 <nan>:
 800c688:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c690 <nan+0x8>
 800c68c:	4770      	bx	lr
 800c68e:	bf00      	nop
 800c690:	00000000 	.word	0x00000000
 800c694:	7ff80000 	.word	0x7ff80000

0800c698 <rint>:
 800c698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c69a:	ec51 0b10 	vmov	r0, r1, d0
 800c69e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c6a2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c6a6:	2e13      	cmp	r6, #19
 800c6a8:	ee10 4a10 	vmov	r4, s0
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800c6b2:	dc58      	bgt.n	800c766 <rint+0xce>
 800c6b4:	2e00      	cmp	r6, #0
 800c6b6:	da2b      	bge.n	800c710 <rint+0x78>
 800c6b8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c6bc:	4302      	orrs	r2, r0
 800c6be:	d023      	beq.n	800c708 <rint+0x70>
 800c6c0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c6c4:	4302      	orrs	r2, r0
 800c6c6:	4254      	negs	r4, r2
 800c6c8:	4314      	orrs	r4, r2
 800c6ca:	0c4b      	lsrs	r3, r1, #17
 800c6cc:	0b24      	lsrs	r4, r4, #12
 800c6ce:	045b      	lsls	r3, r3, #17
 800c6d0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800c6d4:	ea44 0103 	orr.w	r1, r4, r3
 800c6d8:	4b32      	ldr	r3, [pc, #200]	; (800c7a4 <rint+0x10c>)
 800c6da:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c6de:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	4639      	mov	r1, r7
 800c6ea:	f7f3 fdcf 	bl	800028c <__adddf3>
 800c6ee:	e9cd 0100 	strd	r0, r1, [sp]
 800c6f2:	463b      	mov	r3, r7
 800c6f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c6f8:	4632      	mov	r2, r6
 800c6fa:	f7f3 fdc5 	bl	8000288 <__aeabi_dsub>
 800c6fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c702:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800c706:	4639      	mov	r1, r7
 800c708:	ec41 0b10 	vmov	d0, r0, r1
 800c70c:	b003      	add	sp, #12
 800c70e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c710:	4a25      	ldr	r2, [pc, #148]	; (800c7a8 <rint+0x110>)
 800c712:	4132      	asrs	r2, r6
 800c714:	ea01 0702 	and.w	r7, r1, r2
 800c718:	4307      	orrs	r7, r0
 800c71a:	d0f5      	beq.n	800c708 <rint+0x70>
 800c71c:	0851      	lsrs	r1, r2, #1
 800c71e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800c722:	4314      	orrs	r4, r2
 800c724:	d00c      	beq.n	800c740 <rint+0xa8>
 800c726:	ea23 0201 	bic.w	r2, r3, r1
 800c72a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c72e:	2e13      	cmp	r6, #19
 800c730:	fa43 f606 	asr.w	r6, r3, r6
 800c734:	bf0c      	ite	eq
 800c736:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800c73a:	2400      	movne	r4, #0
 800c73c:	ea42 0306 	orr.w	r3, r2, r6
 800c740:	4918      	ldr	r1, [pc, #96]	; (800c7a4 <rint+0x10c>)
 800c742:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800c746:	4622      	mov	r2, r4
 800c748:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c74c:	4620      	mov	r0, r4
 800c74e:	4629      	mov	r1, r5
 800c750:	f7f3 fd9c 	bl	800028c <__adddf3>
 800c754:	e9cd 0100 	strd	r0, r1, [sp]
 800c758:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c75c:	4622      	mov	r2, r4
 800c75e:	462b      	mov	r3, r5
 800c760:	f7f3 fd92 	bl	8000288 <__aeabi_dsub>
 800c764:	e7d0      	b.n	800c708 <rint+0x70>
 800c766:	2e33      	cmp	r6, #51	; 0x33
 800c768:	dd07      	ble.n	800c77a <rint+0xe2>
 800c76a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c76e:	d1cb      	bne.n	800c708 <rint+0x70>
 800c770:	ee10 2a10 	vmov	r2, s0
 800c774:	f7f3 fd8a 	bl	800028c <__adddf3>
 800c778:	e7c6      	b.n	800c708 <rint+0x70>
 800c77a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800c77e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800c782:	40d6      	lsrs	r6, r2
 800c784:	4230      	tst	r0, r6
 800c786:	d0bf      	beq.n	800c708 <rint+0x70>
 800c788:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800c78c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800c790:	bf1f      	itttt	ne
 800c792:	ea24 0101 	bicne.w	r1, r4, r1
 800c796:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800c79a:	fa44 f202 	asrne.w	r2, r4, r2
 800c79e:	ea41 0402 	orrne.w	r4, r1, r2
 800c7a2:	e7cd      	b.n	800c740 <rint+0xa8>
 800c7a4:	0800d4a8 	.word	0x0800d4a8
 800c7a8:	000fffff 	.word	0x000fffff
 800c7ac:	00000000 	.word	0x00000000

0800c7b0 <scalbn>:
 800c7b0:	b570      	push	{r4, r5, r6, lr}
 800c7b2:	ec55 4b10 	vmov	r4, r5, d0
 800c7b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c7ba:	4606      	mov	r6, r0
 800c7bc:	462b      	mov	r3, r5
 800c7be:	b99a      	cbnz	r2, 800c7e8 <scalbn+0x38>
 800c7c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c7c4:	4323      	orrs	r3, r4
 800c7c6:	d036      	beq.n	800c836 <scalbn+0x86>
 800c7c8:	4b39      	ldr	r3, [pc, #228]	; (800c8b0 <scalbn+0x100>)
 800c7ca:	4629      	mov	r1, r5
 800c7cc:	ee10 0a10 	vmov	r0, s0
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	f7f3 ff11 	bl	80005f8 <__aeabi_dmul>
 800c7d6:	4b37      	ldr	r3, [pc, #220]	; (800c8b4 <scalbn+0x104>)
 800c7d8:	429e      	cmp	r6, r3
 800c7da:	4604      	mov	r4, r0
 800c7dc:	460d      	mov	r5, r1
 800c7de:	da10      	bge.n	800c802 <scalbn+0x52>
 800c7e0:	a32b      	add	r3, pc, #172	; (adr r3, 800c890 <scalbn+0xe0>)
 800c7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e6:	e03a      	b.n	800c85e <scalbn+0xae>
 800c7e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c7ec:	428a      	cmp	r2, r1
 800c7ee:	d10c      	bne.n	800c80a <scalbn+0x5a>
 800c7f0:	ee10 2a10 	vmov	r2, s0
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	4629      	mov	r1, r5
 800c7f8:	f7f3 fd48 	bl	800028c <__adddf3>
 800c7fc:	4604      	mov	r4, r0
 800c7fe:	460d      	mov	r5, r1
 800c800:	e019      	b.n	800c836 <scalbn+0x86>
 800c802:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c806:	460b      	mov	r3, r1
 800c808:	3a36      	subs	r2, #54	; 0x36
 800c80a:	4432      	add	r2, r6
 800c80c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c810:	428a      	cmp	r2, r1
 800c812:	dd08      	ble.n	800c826 <scalbn+0x76>
 800c814:	2d00      	cmp	r5, #0
 800c816:	a120      	add	r1, pc, #128	; (adr r1, 800c898 <scalbn+0xe8>)
 800c818:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c81c:	da1c      	bge.n	800c858 <scalbn+0xa8>
 800c81e:	a120      	add	r1, pc, #128	; (adr r1, 800c8a0 <scalbn+0xf0>)
 800c820:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c824:	e018      	b.n	800c858 <scalbn+0xa8>
 800c826:	2a00      	cmp	r2, #0
 800c828:	dd08      	ble.n	800c83c <scalbn+0x8c>
 800c82a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c82e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c832:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c836:	ec45 4b10 	vmov	d0, r4, r5
 800c83a:	bd70      	pop	{r4, r5, r6, pc}
 800c83c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c840:	da19      	bge.n	800c876 <scalbn+0xc6>
 800c842:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c846:	429e      	cmp	r6, r3
 800c848:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c84c:	dd0a      	ble.n	800c864 <scalbn+0xb4>
 800c84e:	a112      	add	r1, pc, #72	; (adr r1, 800c898 <scalbn+0xe8>)
 800c850:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d1e2      	bne.n	800c81e <scalbn+0x6e>
 800c858:	a30f      	add	r3, pc, #60	; (adr r3, 800c898 <scalbn+0xe8>)
 800c85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c85e:	f7f3 fecb 	bl	80005f8 <__aeabi_dmul>
 800c862:	e7cb      	b.n	800c7fc <scalbn+0x4c>
 800c864:	a10a      	add	r1, pc, #40	; (adr r1, 800c890 <scalbn+0xe0>)
 800c866:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d0b8      	beq.n	800c7e0 <scalbn+0x30>
 800c86e:	a10e      	add	r1, pc, #56	; (adr r1, 800c8a8 <scalbn+0xf8>)
 800c870:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c874:	e7b4      	b.n	800c7e0 <scalbn+0x30>
 800c876:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c87a:	3236      	adds	r2, #54	; 0x36
 800c87c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c880:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c884:	4620      	mov	r0, r4
 800c886:	4b0c      	ldr	r3, [pc, #48]	; (800c8b8 <scalbn+0x108>)
 800c888:	2200      	movs	r2, #0
 800c88a:	e7e8      	b.n	800c85e <scalbn+0xae>
 800c88c:	f3af 8000 	nop.w
 800c890:	c2f8f359 	.word	0xc2f8f359
 800c894:	01a56e1f 	.word	0x01a56e1f
 800c898:	8800759c 	.word	0x8800759c
 800c89c:	7e37e43c 	.word	0x7e37e43c
 800c8a0:	8800759c 	.word	0x8800759c
 800c8a4:	fe37e43c 	.word	0xfe37e43c
 800c8a8:	c2f8f359 	.word	0xc2f8f359
 800c8ac:	81a56e1f 	.word	0x81a56e1f
 800c8b0:	43500000 	.word	0x43500000
 800c8b4:	ffff3cb0 	.word	0xffff3cb0
 800c8b8:	3c900000 	.word	0x3c900000

0800c8bc <_init>:
 800c8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8be:	bf00      	nop
 800c8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8c2:	bc08      	pop	{r3}
 800c8c4:	469e      	mov	lr, r3
 800c8c6:	4770      	bx	lr

0800c8c8 <_fini>:
 800c8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ca:	bf00      	nop
 800c8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ce:	bc08      	pop	{r3}
 800c8d0:	469e      	mov	lr, r3
 800c8d2:	4770      	bx	lr
