
MDP_grp13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a274  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b90  0800a408  0800a408  0001a408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af98  0800af98  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800af98  0800af98  0001af98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afa0  0800afa0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afa0  0800afa0  0001afa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afa4  0800afa4  0001afa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800afa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00004f9c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005014  20005014  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d50c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003836  00000000  00000000  0003d5b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d0  00000000  00000000  00040df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001498  00000000  00000000  000423c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003fee  00000000  00000000  00043858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017782  00000000  00000000  00047846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5c4e  00000000  00000000  0005efc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00134c16  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063b0  00000000  00000000  00134c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a3ec 	.word	0x0800a3ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800a3ec 	.word	0x0800a3ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96e 	b.w	8000ecc <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468c      	mov	ip, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f040 8083 	bne.w	8000d1e <__udivmoddi4+0x116>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d947      	bls.n	8000cae <__udivmoddi4+0xa6>
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	b142      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	f1c2 0020 	rsb	r0, r2, #32
 8000c28:	fa24 f000 	lsr.w	r0, r4, r0
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	4097      	lsls	r7, r2
 8000c30:	ea40 0c01 	orr.w	ip, r0, r1
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c40:	fa1f fe87 	uxth.w	lr, r7
 8000c44:	fb08 c116 	mls	r1, r8, r6, ip
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5a:	f080 8119 	bcs.w	8000e90 <__udivmoddi4+0x288>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8116 	bls.w	8000e90 <__udivmoddi4+0x288>
 8000c64:	3e02      	subs	r6, #2
 8000c66:	443b      	add	r3, r7
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c70:	fb08 3310 	mls	r3, r8, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	f080 8105 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f240 8102 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c98:	eba4 040e 	sub.w	r4, r4, lr
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	b11d      	cbz	r5, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xaa>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d150      	bne.n	8000d5c <__udivmoddi4+0x154>
 8000cba:	1bcb      	subs	r3, r1, r7
 8000cbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc0:	fa1f f887 	uxth.w	r8, r7
 8000cc4:	2601      	movs	r6, #1
 8000cc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cca:	0c21      	lsrs	r1, r4, #16
 8000ccc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000cdc:	1879      	adds	r1, r7, r1
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0xe2>
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	f200 80e9 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1ac9      	subs	r1, r1, r3
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x10c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x10a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80d9 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e7bf      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x12e>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	f000 80b1 	beq.w	8000e8a <__udivmoddi4+0x282>
 8000d28:	2600      	movs	r6, #0
 8000d2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2e:	4630      	mov	r0, r6
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f683 	clz	r6, r3
 8000d3a:	2e00      	cmp	r6, #0
 8000d3c:	d14a      	bne.n	8000dd4 <__udivmoddi4+0x1cc>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0x140>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80b8 	bhi.w	8000eb8 <__udivmoddi4+0x2b0>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	468c      	mov	ip, r1
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d0a8      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000d56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d5a:	e7a5      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000d5c:	f1c2 0320 	rsb	r3, r2, #32
 8000d60:	fa20 f603 	lsr.w	r6, r0, r3
 8000d64:	4097      	lsls	r7, r2
 8000d66:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6e:	40d9      	lsrs	r1, r3
 8000d70:	4330      	orrs	r0, r6
 8000d72:	0c03      	lsrs	r3, r0, #16
 8000d74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d78:	fa1f f887 	uxth.w	r8, r7
 8000d7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb06 f108 	mul.w	r1, r6, r8
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x19c>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d96:	f080 808d 	bcs.w	8000eb4 <__udivmoddi4+0x2ac>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 808a 	bls.w	8000eb4 <__udivmoddi4+0x2ac>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b281      	uxth	r1, r0
 8000da8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db4:	fb00 f308 	mul.w	r3, r0, r8
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x1c4>
 8000dbc:	1879      	adds	r1, r7, r1
 8000dbe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dc2:	d273      	bcs.n	8000eac <__udivmoddi4+0x2a4>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d971      	bls.n	8000eac <__udivmoddi4+0x2a4>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4439      	add	r1, r7
 8000dcc:	1acb      	subs	r3, r1, r3
 8000dce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dd2:	e778      	b.n	8000cc6 <__udivmoddi4+0xbe>
 8000dd4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dd8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ddc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000de0:	431c      	orrs	r4, r3
 8000de2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000de6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000df2:	431f      	orrs	r7, r3
 8000df4:	0c3b      	lsrs	r3, r7, #16
 8000df6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfa:	fa1f f884 	uxth.w	r8, r4
 8000dfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e06:	fb09 fa08 	mul.w	sl, r9, r8
 8000e0a:	458a      	cmp	sl, r1
 8000e0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e10:	fa00 f306 	lsl.w	r3, r0, r6
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x220>
 8000e16:	1861      	adds	r1, r4, r1
 8000e18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e1c:	d248      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e1e:	458a      	cmp	sl, r1
 8000e20:	d946      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4421      	add	r1, r4
 8000e28:	eba1 010a 	sub.w	r1, r1, sl
 8000e2c:	b2bf      	uxth	r7, r7
 8000e2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e3a:	fb00 f808 	mul.w	r8, r0, r8
 8000e3e:	45b8      	cmp	r8, r7
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x24a>
 8000e42:	19e7      	adds	r7, r4, r7
 8000e44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e48:	d22e      	bcs.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4a:	45b8      	cmp	r8, r7
 8000e4c:	d92c      	bls.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4427      	add	r7, r4
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	eba7 0708 	sub.w	r7, r7, r8
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	454f      	cmp	r7, r9
 8000e60:	46c6      	mov	lr, r8
 8000e62:	4649      	mov	r1, r9
 8000e64:	d31a      	bcc.n	8000e9c <__udivmoddi4+0x294>
 8000e66:	d017      	beq.n	8000e98 <__udivmoddi4+0x290>
 8000e68:	b15d      	cbz	r5, 8000e82 <__udivmoddi4+0x27a>
 8000e6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e76:	40f2      	lsrs	r2, r6
 8000e78:	ea4c 0202 	orr.w	r2, ip, r2
 8000e7c:	40f7      	lsrs	r7, r6
 8000e7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e82:	2600      	movs	r6, #0
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e70b      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6fd      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e98:	4543      	cmp	r3, r8
 8000e9a:	d2e5      	bcs.n	8000e68 <__udivmoddi4+0x260>
 8000e9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7df      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e7d2      	b.n	8000e52 <__udivmoddi4+0x24a>
 8000eac:	4660      	mov	r0, ip
 8000eae:	e78d      	b.n	8000dcc <__udivmoddi4+0x1c4>
 8000eb0:	4681      	mov	r9, r0
 8000eb2:	e7b9      	b.n	8000e28 <__udivmoddi4+0x220>
 8000eb4:	4666      	mov	r6, ip
 8000eb6:	e775      	b.n	8000da4 <__udivmoddi4+0x19c>
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e74a      	b.n	8000d52 <__udivmoddi4+0x14a>
 8000ebc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec0:	4439      	add	r1, r7
 8000ec2:	e713      	b.n	8000cec <__udivmoddi4+0xe4>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	443c      	add	r4, r7
 8000ec8:	e724      	b.n	8000d14 <__udivmoddi4+0x10c>
 8000eca:	bf00      	nop

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <HAL_TIM_IC_CaptureCallback>:
	__HAL_TIM_SET_COUNTER(&htim4, 0);
	while(__HAL_TIM_GET_COUNTER(&htim4) < time);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)		//For HCSR04_Read();
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7f1b      	ldrb	r3, [r3, #28]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	f040 8083 	bne.w	8000fe8 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000ee2:	4b45      	ldr	r3, [pc, #276]	; (8000ff8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d11a      	bne.n	8000f20 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000eea:	2100      	movs	r1, #0
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f003 f95d 	bl	80041ac <HAL_TIM_ReadCapturedValue>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4a41      	ldr	r2, [pc, #260]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ef6:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000ef8:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	601a      	str	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6a1a      	ldr	r2, [r3, #32]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 020a 	bic.w	r2, r2, #10
 8000f0c:	621a      	str	r2, [r3, #32]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6a1a      	ldr	r2, [r3, #32]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f042 0202 	orr.w	r2, r2, #2
 8000f1c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 8000f1e:	e063      	b.n	8000fe8 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000f20:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d15f      	bne.n	8000fe8 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000f28:	2100      	movs	r1, #0
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f003 f93e 	bl	80041ac <HAL_TIM_ReadCapturedValue>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4a33      	ldr	r2, [pc, #204]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f34:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 8000f3e:	4b30      	ldr	r3, [pc, #192]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	4b2e      	ldr	r3, [pc, #184]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d907      	bls.n	8000f5a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	4a2b      	ldr	r2, [pc, #172]	; (8001004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	e00f      	b.n	8000f7a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2) {
 8000f5a:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	4b28      	ldr	r3, [pc, #160]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d909      	bls.n	8000f7a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000f66:	4b26      	ldr	r3, [pc, #152]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	4b24      	ldr	r3, [pc, #144]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000f74:	33ff      	adds	r3, #255	; 0xff
 8000f76:	4a23      	ldr	r2, [pc, #140]	; (8001004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f78:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000f7a:	4b22      	ldr	r3, [pc, #136]	; (8001004 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fab8 	bl	80004f4 <__aeabi_ui2d>
 8000f84:	a31a      	add	r3, pc, #104	; (adr r3, 8000ff0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8a:	f7ff fb2d 	bl	80005e8 <__aeabi_dmul>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f9e:	f7ff fc4d 	bl	800083c <__aeabi_ddiv>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4610      	mov	r0, r2
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f7ff fdf5 	bl	8000b98 <__aeabi_d2uiz>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000fb4:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6a1a      	ldr	r2, [r3, #32]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 020a 	bic.w	r2, r2, #10
 8000fca:	621a      	str	r2, [r3, #32]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6a12      	ldr	r2, [r2, #32]
 8000fd6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	68da      	ldr	r2, [r3, #12]
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 0202 	bic.w	r2, r2, #2
 8000fe6:	60da      	str	r2, [r3, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	b020c49c 	.word	0xb020c49c
 8000ff4:	3fa16872 	.word	0x3fa16872
 8000ff8:	200000b0 	.word	0x200000b0
 8000ffc:	200000a4 	.word	0x200000a4
 8001000:	200000a8 	.word	0x200000a8
 8001004:	200000ac 	.word	0x200000ac
 8001008:	200000b4 	.word	0x200000b4
 800100c:	20004a20 	.word	0x20004a20

08001010 <motorControl>:
	}
	uDistFinal = (uDistCheck1 + uDistCheck2)/2;
}

//Master function for all motor functions
int motorControl(int speedL, int speedR, char dirL, char dirR, int turn, int time, int dist){
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	4611      	mov	r1, r2
 800101c:	461a      	mov	r2, r3
 800101e:	460b      	mov	r3, r1
 8001020:	71fb      	strb	r3, [r7, #7]
 8001022:	4613      	mov	r3, r2
 8001024:	71bb      	strb	r3, [r7, #6]

	//declaration
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);		//left encoder(MotorA) start
 8001026:	213c      	movs	r1, #60	; 0x3c
 8001028:	48b1      	ldr	r0, [pc, #708]	; (80012f0 <motorControl+0x2e0>)
 800102a:	f002 fd03 	bl	8003a34 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		//right encoder(MotorB) start
 800102e:	213c      	movs	r1, #60	; 0x3c
 8001030:	48b0      	ldr	r0, [pc, #704]	; (80012f4 <motorControl+0x2e4>)
 8001032:	f002 fcff 	bl	8003a34 <HAL_TIM_Encoder_Start>
	float cntl1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001036:	4bae      	ldr	r3, [pc, #696]	; (80012f0 <motorControl+0x2e0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	ee07 3a90 	vmov	s15, r3
 8001040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001044:	edc7 7a06 	vstr	s15, [r7, #24]
	float cntr1 = __HAL_TIM_GET_COUNTER(&htim3);
 8001048:	4baa      	ldr	r3, [pc, #680]	; (80012f4 <motorControl+0x2e4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104e:	ee07 3a90 	vmov	s15, r3
 8001052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001056:	edc7 7a05 	vstr	s15, [r7, #20]
	tick = HAL_GetTick();
 800105a:	f001 f96d 	bl	8002338 <HAL_GetTick>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4ba5      	ldr	r3, [pc, #660]	; (80012f8 <motorControl+0x2e8>)
 8001064:	601a      	str	r2, [r3, #0]
	int encDist = dist * 75;
 8001066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001068:	4613      	mov	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	011a      	lsls	r2, r3, #4
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	613b      	str	r3, [r7, #16]

	int currTime = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]

	//Select direction of motor//

	switch(dirL){
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2b46      	cmp	r3, #70	; 0x46
 800107c:	d002      	beq.n	8001084 <motorControl+0x74>
 800107e:	2b52      	cmp	r3, #82	; 0x52
 8001080:	d00b      	beq.n	800109a <motorControl+0x8a>
 8001082:	e015      	b.n	80010b0 <motorControl+0xa0>
		case 'F':
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	2108      	movs	r1, #8
 8001088:	489c      	ldr	r0, [pc, #624]	; (80012fc <motorControl+0x2ec>)
 800108a:	f001 fcc5 	bl	8002a18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2104      	movs	r1, #4
 8001092:	489a      	ldr	r0, [pc, #616]	; (80012fc <motorControl+0x2ec>)
 8001094:	f001 fcc0 	bl	8002a18 <HAL_GPIO_WritePin>
			break;
 8001098:	e00a      	b.n	80010b0 <motorControl+0xa0>

		case 'R':
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2108      	movs	r1, #8
 800109e:	4897      	ldr	r0, [pc, #604]	; (80012fc <motorControl+0x2ec>)
 80010a0:	f001 fcba 	bl	8002a18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	2104      	movs	r1, #4
 80010a8:	4894      	ldr	r0, [pc, #592]	; (80012fc <motorControl+0x2ec>)
 80010aa:	f001 fcb5 	bl	8002a18 <HAL_GPIO_WritePin>
			break;
 80010ae:	bf00      	nop
	}

	switch(dirR){
 80010b0:	79bb      	ldrb	r3, [r7, #6]
 80010b2:	2b46      	cmp	r3, #70	; 0x46
 80010b4:	d002      	beq.n	80010bc <motorControl+0xac>
 80010b6:	2b52      	cmp	r3, #82	; 0x52
 80010b8:	d00b      	beq.n	80010d2 <motorControl+0xc2>
 80010ba:	e015      	b.n	80010e8 <motorControl+0xd8>
		case 'F':
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	2110      	movs	r1, #16
 80010c0:	488e      	ldr	r0, [pc, #568]	; (80012fc <motorControl+0x2ec>)
 80010c2:	f001 fca9 	bl	8002a18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2120      	movs	r1, #32
 80010ca:	488c      	ldr	r0, [pc, #560]	; (80012fc <motorControl+0x2ec>)
 80010cc:	f001 fca4 	bl	8002a18 <HAL_GPIO_WritePin>
			break;
 80010d0:	e00a      	b.n	80010e8 <motorControl+0xd8>

		case 'R':
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2110      	movs	r1, #16
 80010d6:	4889      	ldr	r0, [pc, #548]	; (80012fc <motorControl+0x2ec>)
 80010d8:	f001 fc9e 	bl	8002a18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	2120      	movs	r1, #32
 80010e0:	4886      	ldr	r0, [pc, #536]	; (80012fc <motorControl+0x2ec>)
 80010e2:	f001 fc99 	bl	8002a18 <HAL_GPIO_WritePin>
			break;
 80010e6:	bf00      	nop
	}
	//End of motor direction selection//

	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, speedL);
 80010e8:	4b85      	ldr	r3, [pc, #532]	; (8001300 <motorControl+0x2f0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, speedR);
 80010f0:	4b83      	ldr	r3, [pc, #524]	; (8001300 <motorControl+0x2f0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68ba      	ldr	r2, [r7, #8]
 80010f6:	639a      	str	r2, [r3, #56]	; 0x38


	while(currTime<time){
 80010f8:	e19f      	b.n	800143a <motorControl+0x42a>
		if(HAL_GetTick()-tick > 100L){
 80010fa:	f001 f91d 	bl	8002338 <HAL_GetTick>
 80010fe:	4603      	mov	r3, r0
 8001100:	4a7d      	ldr	r2, [pc, #500]	; (80012f8 <motorControl+0x2e8>)
 8001102:	6812      	ldr	r2, [r2, #0]
 8001104:	1a9b      	subs	r3, r3, r2
 8001106:	2b64      	cmp	r3, #100	; 0x64
 8001108:	f240 8087 	bls.w	800121a <motorControl+0x20a>
				cntl2 = __HAL_TIM_GET_COUNTER(&htim2);
 800110c:	4b78      	ldr	r3, [pc, #480]	; (80012f0 <motorControl+0x2e0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	ee07 3a90 	vmov	s15, r3
 8001116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800111a:	4b7a      	ldr	r3, [pc, #488]	; (8001304 <motorControl+0x2f4>)
 800111c:	edc3 7a00 	vstr	s15, [r3]
				cntr2 = __HAL_TIM_GET_COUNTER(&htim3);
 8001120:	4b74      	ldr	r3, [pc, #464]	; (80012f4 <motorControl+0x2e4>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800112e:	4b76      	ldr	r3, [pc, #472]	; (8001308 <motorControl+0x2f8>)
 8001130:	edc3 7a00 	vstr	s15, [r3]
				if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 8001134:	4b6e      	ldr	r3, [pc, #440]	; (80012f0 <motorControl+0x2e0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0310 	and.w	r3, r3, #16
 800113e:	2b10      	cmp	r3, #16
 8001140:	d10a      	bne.n	8001158 <motorControl+0x148>
					diffl = cntl1 - cntl2;
 8001142:	4b70      	ldr	r3, [pc, #448]	; (8001304 <motorControl+0x2f4>)
 8001144:	edd3 7a00 	vldr	s15, [r3]
 8001148:	ed97 7a06 	vldr	s14, [r7, #24]
 800114c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001150:	4b6e      	ldr	r3, [pc, #440]	; (800130c <motorControl+0x2fc>)
 8001152:	edc3 7a00 	vstr	s15, [r3]
 8001156:	e009      	b.n	800116c <motorControl+0x15c>
				else
					diffl = cntl2 - cntl1;
 8001158:	4b6a      	ldr	r3, [pc, #424]	; (8001304 <motorControl+0x2f4>)
 800115a:	ed93 7a00 	vldr	s14, [r3]
 800115e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001166:	4b69      	ldr	r3, [pc, #420]	; (800130c <motorControl+0x2fc>)
 8001168:	edc3 7a00 	vstr	s15, [r3]
				if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3))
 800116c:	4b61      	ldr	r3, [pc, #388]	; (80012f4 <motorControl+0x2e4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0310 	and.w	r3, r3, #16
 8001176:	2b10      	cmp	r3, #16
 8001178:	d10a      	bne.n	8001190 <motorControl+0x180>
					diffr = cntr1 - cntr2;
 800117a:	4b63      	ldr	r3, [pc, #396]	; (8001308 <motorControl+0x2f8>)
 800117c:	edd3 7a00 	vldr	s15, [r3]
 8001180:	ed97 7a05 	vldr	s14, [r7, #20]
 8001184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001188:	4b61      	ldr	r3, [pc, #388]	; (8001310 <motorControl+0x300>)
 800118a:	edc3 7a00 	vstr	s15, [r3]
 800118e:	e009      	b.n	80011a4 <motorControl+0x194>
				else
					diffr = cntr2 - cntr1;
 8001190:	4b5d      	ldr	r3, [pc, #372]	; (8001308 <motorControl+0x2f8>)
 8001192:	ed93 7a00 	vldr	s14, [r3]
 8001196:	edd7 7a05 	vldr	s15, [r7, #20]
 800119a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800119e:	4b5c      	ldr	r3, [pc, #368]	; (8001310 <motorControl+0x300>)
 80011a0:	edc3 7a00 	vstr	s15, [r3]
				avg = (diffl+diffr)/2;
 80011a4:	4b59      	ldr	r3, [pc, #356]	; (800130c <motorControl+0x2fc>)
 80011a6:	ed93 7a00 	vldr	s14, [r3]
 80011aa:	4b59      	ldr	r3, [pc, #356]	; (8001310 <motorControl+0x300>)
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011b4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80011b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011bc:	4b55      	ldr	r3, [pc, #340]	; (8001314 <motorControl+0x304>)
 80011be:	edc3 7a00 	vstr	s15, [r3]
				sprintf(display,"Distance:%5d\0", diffl/75);
 80011c2:	4b52      	ldr	r3, [pc, #328]	; (800130c <motorControl+0x2fc>)
 80011c4:	edd3 7a00 	vldr	s15, [r3]
 80011c8:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001318 <motorControl+0x308>
 80011cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011d0:	ee16 0a90 	vmov	r0, s13
 80011d4:	f7ff f9b0 	bl	8000538 <__aeabi_f2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	494f      	ldr	r1, [pc, #316]	; (800131c <motorControl+0x30c>)
 80011de:	4850      	ldr	r0, [pc, #320]	; (8001320 <motorControl+0x310>)
 80011e0:	f007 fd2e 	bl	8008c40 <siprintf>
				OLED_ShowString(10,35,display);
 80011e4:	4a4e      	ldr	r2, [pc, #312]	; (8001320 <motorControl+0x310>)
 80011e6:	2123      	movs	r1, #35	; 0x23
 80011e8:	200a      	movs	r0, #10
 80011ea:	f007 fc2b 	bl	8008a44 <OLED_ShowString>
				sprintf(display,"Distance:%5d\0", diffr/75);
 80011ee:	4b48      	ldr	r3, [pc, #288]	; (8001310 <motorControl+0x300>)
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001318 <motorControl+0x308>
 80011f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011fc:	ee16 0a90 	vmov	r0, s13
 8001200:	f7ff f99a 	bl	8000538 <__aeabi_f2d>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4944      	ldr	r1, [pc, #272]	; (800131c <motorControl+0x30c>)
 800120a:	4845      	ldr	r0, [pc, #276]	; (8001320 <motorControl+0x310>)
 800120c:	f007 fd18 	bl	8008c40 <siprintf>
				OLED_ShowString(10,50,display);
 8001210:	4a43      	ldr	r2, [pc, #268]	; (8001320 <motorControl+0x310>)
 8001212:	2132      	movs	r1, #50	; 0x32
 8001214:	200a      	movs	r0, #10
 8001216:	f007 fc15 	bl	8008a44 <OLED_ShowString>
			}

//
			if(avg>=encDist*0.8&&turn==0){
 800121a:	4b3e      	ldr	r3, [pc, #248]	; (8001314 <motorControl+0x304>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f98a 	bl	8000538 <__aeabi_f2d>
 8001224:	4604      	mov	r4, r0
 8001226:	460d      	mov	r5, r1
 8001228:	6938      	ldr	r0, [r7, #16]
 800122a:	f7ff f973 	bl	8000514 <__aeabi_i2d>
 800122e:	a32c      	add	r3, pc, #176	; (adr r3, 80012e0 <motorControl+0x2d0>)
 8001230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001234:	f7ff f9d8 	bl	80005e8 <__aeabi_dmul>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4620      	mov	r0, r4
 800123e:	4629      	mov	r1, r5
 8001240:	f7ff fc58 	bl	8000af4 <__aeabi_dcmpge>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d02a      	beq.n	80012a0 <motorControl+0x290>
 800124a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800124c:	2b00      	cmp	r3, #0
 800124e:	d127      	bne.n	80012a0 <motorControl+0x290>
				speedL = speedL*0.96;
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f7ff f95f 	bl	8000514 <__aeabi_i2d>
 8001256:	a324      	add	r3, pc, #144	; (adr r3, 80012e8 <motorControl+0x2d8>)
 8001258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125c:	f7ff f9c4 	bl	80005e8 <__aeabi_dmul>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	f7ff fc6e 	bl	8000b48 <__aeabi_d2iz>
 800126c:	4603      	mov	r3, r0
 800126e:	60fb      	str	r3, [r7, #12]
				speedR = speedR*0.96;
 8001270:	68b8      	ldr	r0, [r7, #8]
 8001272:	f7ff f94f 	bl	8000514 <__aeabi_i2d>
 8001276:	a31c      	add	r3, pc, #112	; (adr r3, 80012e8 <motorControl+0x2d8>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff f9b4 	bl	80005e8 <__aeabi_dmul>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f7ff fc5e 	bl	8000b48 <__aeabi_d2iz>
 800128c:	4603      	mov	r3, r0
 800128e:	60bb      	str	r3, [r7, #8]
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, speedL);
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <motorControl+0x2f0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, speedR);
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <motorControl+0x2f0>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	68ba      	ldr	r2, [r7, #8]
 800129e:	639a      	str	r2, [r3, #56]	; 0x38
			}
			if(avg>=encDist && turn==0){
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	ee07 3a90 	vmov	s15, r3
 80012a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <motorControl+0x304>)
 80012ac:	edd3 7a00 	vldr	s15, [r3]
 80012b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b8:	d834      	bhi.n	8001324 <motorControl+0x314>
 80012ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d131      	bne.n	8001324 <motorControl+0x314>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <motorControl+0x2f0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2200      	movs	r2, #0
 80012c6:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 80012c8:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <motorControl+0x2f0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2200      	movs	r2, #0
 80012ce:	639a      	str	r2, [r3, #56]	; 0x38
				osDelay(500);
 80012d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012d4:	f004 fdca 	bl	8005e6c <osDelay>
				break;
 80012d8:	e0b4      	b.n	8001444 <motorControl+0x434>
 80012da:	bf00      	nop
 80012dc:	f3af 8000 	nop.w
 80012e0:	9999999a 	.word	0x9999999a
 80012e4:	3fe99999 	.word	0x3fe99999
 80012e8:	eb851eb8 	.word	0xeb851eb8
 80012ec:	3feeb851 	.word	0x3feeb851
 80012f0:	20004b78 	.word	0x20004b78
 80012f4:	20004ad0 	.word	0x20004ad0
 80012f8:	200000a0 	.word	0x200000a0
 80012fc:	40020000 	.word	0x40020000
 8001300:	200049d8 	.word	0x200049d8
 8001304:	20004ab8 	.word	0x20004ab8
 8001308:	200049d4 	.word	0x200049d4
 800130c:	20000094 	.word	0x20000094
 8001310:	20000098 	.word	0x20000098
 8001314:	2000009c 	.word	0x2000009c
 8001318:	42960000 	.word	0x42960000
 800131c:	0800a420 	.word	0x0800a420
 8001320:	20004abc 	.word	0x20004abc
			}

			if((diffl>=encDist*0.8 || diffr>=encDist*0.8)&&turn==1){
 8001324:	4b5e      	ldr	r3, [pc, #376]	; (80014a0 <motorControl+0x490>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f905 	bl	8000538 <__aeabi_f2d>
 800132e:	4604      	mov	r4, r0
 8001330:	460d      	mov	r5, r1
 8001332:	6938      	ldr	r0, [r7, #16]
 8001334:	f7ff f8ee 	bl	8000514 <__aeabi_i2d>
 8001338:	a355      	add	r3, pc, #340	; (adr r3, 8001490 <motorControl+0x480>)
 800133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133e:	f7ff f953 	bl	80005e8 <__aeabi_dmul>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4620      	mov	r0, r4
 8001348:	4629      	mov	r1, r5
 800134a:	f7ff fbd3 	bl	8000af4 <__aeabi_dcmpge>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d117      	bne.n	8001384 <motorControl+0x374>
 8001354:	4b53      	ldr	r3, [pc, #332]	; (80014a4 <motorControl+0x494>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f8ed 	bl	8000538 <__aeabi_f2d>
 800135e:	4604      	mov	r4, r0
 8001360:	460d      	mov	r5, r1
 8001362:	6938      	ldr	r0, [r7, #16]
 8001364:	f7ff f8d6 	bl	8000514 <__aeabi_i2d>
 8001368:	a349      	add	r3, pc, #292	; (adr r3, 8001490 <motorControl+0x480>)
 800136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136e:	f7ff f93b 	bl	80005e8 <__aeabi_dmul>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4620      	mov	r0, r4
 8001378:	4629      	mov	r1, r5
 800137a:	f7ff fbbb 	bl	8000af4 <__aeabi_dcmpge>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d02a      	beq.n	80013da <motorControl+0x3ca>
 8001384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001386:	2b01      	cmp	r3, #1
 8001388:	d127      	bne.n	80013da <motorControl+0x3ca>
				speedL = speedL*0.96;
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f7ff f8c2 	bl	8000514 <__aeabi_i2d>
 8001390:	a341      	add	r3, pc, #260	; (adr r3, 8001498 <motorControl+0x488>)
 8001392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001396:	f7ff f927 	bl	80005e8 <__aeabi_dmul>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff fbd1 	bl	8000b48 <__aeabi_d2iz>
 80013a6:	4603      	mov	r3, r0
 80013a8:	60fb      	str	r3, [r7, #12]
				speedR = speedR*0.96;
 80013aa:	68b8      	ldr	r0, [r7, #8]
 80013ac:	f7ff f8b2 	bl	8000514 <__aeabi_i2d>
 80013b0:	a339      	add	r3, pc, #228	; (adr r3, 8001498 <motorControl+0x488>)
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	f7ff f917 	bl	80005e8 <__aeabi_dmul>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	f7ff fbc1 	bl	8000b48 <__aeabi_d2iz>
 80013c6:	4603      	mov	r3, r0
 80013c8:	60bb      	str	r3, [r7, #8]
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, speedL);
 80013ca:	4b37      	ldr	r3, [pc, #220]	; (80014a8 <motorControl+0x498>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, speedR);
 80013d2:	4b35      	ldr	r3, [pc, #212]	; (80014a8 <motorControl+0x498>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	639a      	str	r2, [r3, #56]	; 0x38
			}

			if((diffl>=encDist || diffr>=encDist)&&turn==1){
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	ee07 3a90 	vmov	s15, r3
 80013e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e4:	4b2e      	ldr	r3, [pc, #184]	; (80014a0 <motorControl+0x490>)
 80013e6:	edd3 7a00 	vldr	s15, [r3]
 80013ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f2:	d90c      	bls.n	800140e <motorControl+0x3fe>
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	ee07 3a90 	vmov	s15, r3
 80013fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013fe:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <motorControl+0x494>)
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140c:	d80f      	bhi.n	800142e <motorControl+0x41e>
 800140e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001410:	2b01      	cmp	r3, #1
 8001412:	d10c      	bne.n	800142e <motorControl+0x41e>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001414:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <motorControl+0x498>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2200      	movs	r2, #0
 800141a:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 800141c:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <motorControl+0x498>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2200      	movs	r2, #0
 8001422:	639a      	str	r2, [r3, #56]	; 0x38
				osDelay(500);
 8001424:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001428:	f004 fd20 	bl	8005e6c <osDelay>
				break;
 800142c:	e00a      	b.n	8001444 <motorControl+0x434>
			}

		currTime++;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3301      	adds	r3, #1
 8001432:	61fb      	str	r3, [r7, #28]
		osDelay(1);
 8001434:	2001      	movs	r0, #1
 8001436:	f004 fd19 	bl	8005e6c <osDelay>
	while(currTime<time){
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800143e:	429a      	cmp	r2, r3
 8001440:	f6ff ae5b 	blt.w	80010fa <motorControl+0xea>
		}
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001444:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <motorControl+0x498>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2200      	movs	r2, #0
 800144a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <motorControl+0x498>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2200      	movs	r2, #0
 8001452:	639a      	str	r2, [r3, #56]	; 0x38
		speedL=speedR=tick=diffl=diffr=0;
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <motorControl+0x494>)
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <motorControl+0x494>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0f      	ldr	r2, [pc, #60]	; (80014a0 <motorControl+0x490>)
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <motorControl+0x490>)
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800146e:	ee17 2a90 	vmov	r2, s15
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <motorControl+0x49c>)
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <motorControl+0x49c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	60fb      	str	r3, [r7, #12]
		OLED_Refresh_Gram();
 8001480:	f007 f96c 	bl	800875c <OLED_Refresh_Gram>
}
 8001484:	bf00      	nop
 8001486:	4618      	mov	r0, r3
 8001488:	3720      	adds	r7, #32
 800148a:	46bd      	mov	sp, r7
 800148c:	bdb0      	pop	{r4, r5, r7, pc}
 800148e:	bf00      	nop
 8001490:	9999999a 	.word	0x9999999a
 8001494:	3fe99999 	.word	0x3fe99999
 8001498:	eb851eb8 	.word	0xeb851eb8
 800149c:	3feeb851 	.word	0x3feeb851
 80014a0:	20000094 	.word	0x20000094
 80014a4:	20000098 	.word	0x20000098
 80014a8:	200049d8 	.word	0x200049d8
 80014ac:	200000a0 	.word	0x200000a0

080014b0 <left>:

void left(int deg){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af04      	add	r7, sp, #16
 80014b6:	6078      	str	r0, [r7, #4]
	int dist = 0.63*(pow(deg,1.001));
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff f82b 	bl	8000514 <__aeabi_i2d>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8001520 <left+0x70>
 80014c6:	ec43 2b10 	vmov	d0, r2, r3
 80014ca:	f007 ffd9 	bl	8009480 <pow>
 80014ce:	ec51 0b10 	vmov	r0, r1, d0
 80014d2:	a316      	add	r3, pc, #88	; (adr r3, 800152c <left+0x7c>)
 80014d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d8:	f7ff f886 	bl	80005e8 <__aeabi_dmul>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4610      	mov	r0, r2
 80014e2:	4619      	mov	r1, r3
 80014e4:	f7ff fb30 	bl	8000b48 <__aeabi_d2iz>
 80014e8:	4603      	mov	r3, r0
 80014ea:	60fb      	str	r3, [r7, #12]
	htim1.Instance->CCR4 = 56;
 80014ec:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <left+0x78>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2238      	movs	r2, #56	; 0x38
 80014f2:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 80014f4:	2064      	movs	r0, #100	; 0x64
 80014f6:	f004 fcb9 	bl	8005e6c <osDelay>
	motorControl(1000, 5000, 'F', 'F', 1, 1000, dist);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	9302      	str	r3, [sp, #8]
 80014fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	2301      	movs	r3, #1
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2346      	movs	r3, #70	; 0x46
 800150a:	2246      	movs	r2, #70	; 0x46
 800150c:	f241 3188 	movw	r1, #5000	; 0x1388
 8001510:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001514:	f7ff fd7c 	bl	8001010 <motorControl>
}
 8001518:	bf00      	nop
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	9374bc6a 	.word	0x9374bc6a
 8001524:	3ff00418 	.word	0x3ff00418
 8001528:	20004b18 	.word	0x20004b18
 800152c:	c28f5c29 	.word	0xc28f5c29
 8001530:	3fe428f5 	.word	0x3fe428f5

08001534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001538:	f000 fe98 	bl	800226c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800153c:	f000 f840 	bl	80015c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001540:	f000 faee 	bl	8001b20 <MX_GPIO_Init>
  MX_TIM8_Init();
 8001544:	f000 fa36 	bl	80019b4 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001548:	f000 f938 	bl	80017bc <MX_TIM2_Init>
  MX_TIM1_Init();
 800154c:	f000 f896 	bl	800167c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001550:	f000 f988 	bl	8001864 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001554:	f000 f9da 	bl	800190c <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001558:	f000 fab8 	bl	8001acc <MX_USART3_UART_Init>
  OLED_Init();
 800155c:	f007 faa4 	bl	8008aa8 <OLED_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001560:	2100      	movs	r1, #0
 8001562:	480e      	ldr	r0, [pc, #56]	; (800159c <main+0x68>)
 8001564:	f002 f898 	bl	8003698 <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 10);
 8001568:	220a      	movs	r2, #10
 800156a:	490d      	ldr	r1, [pc, #52]	; (80015a0 <main+0x6c>)
 800156c:	480d      	ldr	r0, [pc, #52]	; (80015a4 <main+0x70>)
 800156e:	f003 fc84 	bl	8004e7a <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001572:	f004 fb9f 	bl	8005cb4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LED_Toggle */
  LED_ToggleHandle = osThreadNew(StartDefaultTask, NULL, &LED_Toggle_attributes);
 8001576:	4a0c      	ldr	r2, [pc, #48]	; (80015a8 <main+0x74>)
 8001578:	2100      	movs	r1, #0
 800157a:	480c      	ldr	r0, [pc, #48]	; (80015ac <main+0x78>)
 800157c:	f004 fbe4 	bl	8005d48 <osThreadNew>
 8001580:	4603      	mov	r3, r0
 8001582:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <main+0x7c>)
 8001584:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 8001586:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <main+0x80>)
 8001588:	2100      	movs	r1, #0
 800158a:	480b      	ldr	r0, [pc, #44]	; (80015b8 <main+0x84>)
 800158c:	f004 fbdc 	bl	8005d48 <osThreadNew>
 8001590:	4603      	mov	r3, r0
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <main+0x88>)
 8001594:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001596:	f004 fbb1 	bl	8005cfc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800159a:	e7fe      	b.n	800159a <main+0x66>
 800159c:	20004a20 	.word	0x20004a20
 80015a0:	20004b64 	.word	0x20004b64
 80015a4:	20004a6c 	.word	0x20004a6c
 80015a8:	0800a45c 	.word	0x0800a45c
 80015ac:	08001c7d 	.word	0x08001c7d
 80015b0:	20004ab0 	.word	0x20004ab0
 80015b4:	0800a480 	.word	0x0800a480
 80015b8:	08001cb1 	.word	0x08001cb1
 80015bc:	20004ab4 	.word	0x20004ab4

080015c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b094      	sub	sp, #80	; 0x50
 80015c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c6:	f107 0320 	add.w	r3, r7, #32
 80015ca:	2230      	movs	r2, #48	; 0x30
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f007 fb2e 	bl	8008c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	4b22      	ldr	r3, [pc, #136]	; (8001674 <SystemClock_Config+0xb4>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	4a21      	ldr	r2, [pc, #132]	; (8001674 <SystemClock_Config+0xb4>)
 80015ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f2:	6413      	str	r3, [r2, #64]	; 0x40
 80015f4:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <SystemClock_Config+0xb4>)
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <SystemClock_Config+0xb8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a1b      	ldr	r2, [pc, #108]	; (8001678 <SystemClock_Config+0xb8>)
 800160a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	4b19      	ldr	r3, [pc, #100]	; (8001678 <SystemClock_Config+0xb8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800161c:	2302      	movs	r3, #2
 800161e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001620:	2301      	movs	r3, #1
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001624:	2310      	movs	r3, #16
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001628:	2300      	movs	r3, #0
 800162a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162c:	f107 0320 	add.w	r3, r7, #32
 8001630:	4618      	mov	r0, r3
 8001632:	f001 fa33 	bl	8002a9c <HAL_RCC_OscConfig>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800163c:	f000 fb5c 	bl	8001cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001640:	230f      	movs	r3, #15
 8001642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001644:	2300      	movs	r3, #0
 8001646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800164c:	2300      	movs	r3, #0
 800164e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f001 fc96 	bl	8002f8c <HAL_RCC_ClockConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001666:	f000 fb47 	bl	8001cf8 <Error_Handler>
  }
}
 800166a:	bf00      	nop
 800166c:	3750      	adds	r7, #80	; 0x50
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	40007000 	.word	0x40007000

0800167c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b096      	sub	sp, #88	; 0x58
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001682:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001690:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800169a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]
 80016aa:	615a      	str	r2, [r3, #20]
 80016ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	2220      	movs	r2, #32
 80016b2:	2100      	movs	r1, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f007 fabb 	bl	8008c30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016ba:	4b3e      	ldr	r3, [pc, #248]	; (80017b4 <MX_TIM1_Init+0x138>)
 80016bc:	4a3e      	ldr	r2, [pc, #248]	; (80017b8 <MX_TIM1_Init+0x13c>)
 80016be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320;
 80016c0:	4b3c      	ldr	r3, [pc, #240]	; (80017b4 <MX_TIM1_Init+0x138>)
 80016c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80016c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c8:	4b3a      	ldr	r3, [pc, #232]	; (80017b4 <MX_TIM1_Init+0x138>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80016ce:	4b39      	ldr	r3, [pc, #228]	; (80017b4 <MX_TIM1_Init+0x138>)
 80016d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d6:	4b37      	ldr	r3, [pc, #220]	; (80017b4 <MX_TIM1_Init+0x138>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016dc:	4b35      	ldr	r3, [pc, #212]	; (80017b4 <MX_TIM1_Init+0x138>)
 80016de:	2200      	movs	r2, #0
 80016e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016e2:	4b34      	ldr	r3, [pc, #208]	; (80017b4 <MX_TIM1_Init+0x138>)
 80016e4:	2280      	movs	r2, #128	; 0x80
 80016e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016e8:	4832      	ldr	r0, [pc, #200]	; (80017b4 <MX_TIM1_Init+0x138>)
 80016ea:	f001 fe1f 	bl	800332c <HAL_TIM_Base_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80016f4:	f000 fb00 	bl	8001cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001702:	4619      	mov	r1, r3
 8001704:	482b      	ldr	r0, [pc, #172]	; (80017b4 <MX_TIM1_Init+0x138>)
 8001706:	f002 fc89 	bl	800401c <HAL_TIM_ConfigClockSource>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001710:	f000 faf2 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001714:	4827      	ldr	r0, [pc, #156]	; (80017b4 <MX_TIM1_Init+0x138>)
 8001716:	f001 fe58 	bl	80033ca <HAL_TIM_PWM_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001720:	f000 faea 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001724:	2300      	movs	r3, #0
 8001726:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800172c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001730:	4619      	mov	r1, r3
 8001732:	4820      	ldr	r0, [pc, #128]	; (80017b4 <MX_TIM1_Init+0x138>)
 8001734:	f003 f9e0 	bl	8004af8 <HAL_TIMEx_MasterConfigSynchronization>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800173e:	f000 fadb 	bl	8001cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001742:	2360      	movs	r3, #96	; 0x60
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800174a:	2300      	movs	r3, #0
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800174e:	2300      	movs	r3, #0
 8001750:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001752:	2300      	movs	r3, #0
 8001754:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001756:	2300      	movs	r3, #0
 8001758:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800175a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175e:	220c      	movs	r2, #12
 8001760:	4619      	mov	r1, r3
 8001762:	4814      	ldr	r0, [pc, #80]	; (80017b4 <MX_TIM1_Init+0x138>)
 8001764:	f002 fb98 	bl	8003e98 <HAL_TIM_PWM_ConfigChannel>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800176e:	f000 fac3 	bl	8001cf8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001786:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800178a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	4619      	mov	r1, r3
 8001794:	4807      	ldr	r0, [pc, #28]	; (80017b4 <MX_TIM1_Init+0x138>)
 8001796:	f003 fa2b 	bl	8004bf0 <HAL_TIMEx_ConfigBreakDeadTime>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80017a0:	f000 faaa 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017a4:	4803      	ldr	r0, [pc, #12]	; (80017b4 <MX_TIM1_Init+0x138>)
 80017a6:	f000 fc2d 	bl	8002004 <HAL_TIM_MspPostInit>

}
 80017aa:	bf00      	nop
 80017ac:	3758      	adds	r7, #88	; 0x58
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20004b18 	.word	0x20004b18
 80017b8:	40010000 	.word	0x40010000

080017bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08c      	sub	sp, #48	; 0x30
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	2224      	movs	r2, #36	; 0x24
 80017c8:	2100      	movs	r1, #0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f007 fa30 	bl	8008c30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017d8:	4b21      	ldr	r3, [pc, #132]	; (8001860 <MX_TIM2_Init+0xa4>)
 80017da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017e0:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <MX_TIM2_Init+0xa4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e6:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <MX_TIM2_Init+0xa4>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80017ec:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <MX_TIM2_Init+0xa4>)
 80017ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f4:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <MX_TIM2_Init+0xa4>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fa:	4b19      	ldr	r3, [pc, #100]	; (8001860 <MX_TIM2_Init+0xa4>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001800:	2303      	movs	r3, #3
 8001802:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001804:	2300      	movs	r3, #0
 8001806:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001808:	2301      	movs	r3, #1
 800180a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001810:	230a      	movs	r3, #10
 8001812:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001818:	2301      	movs	r3, #1
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800181c:	2300      	movs	r3, #0
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001820:	230a      	movs	r3, #10
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	4619      	mov	r1, r3
 800182a:	480d      	ldr	r0, [pc, #52]	; (8001860 <MX_TIM2_Init+0xa4>)
 800182c:	f002 f85c 	bl	80038e8 <HAL_TIM_Encoder_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001836:	f000 fa5f 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	4619      	mov	r1, r3
 8001846:	4806      	ldr	r0, [pc, #24]	; (8001860 <MX_TIM2_Init+0xa4>)
 8001848:	f003 f956 	bl	8004af8 <HAL_TIMEx_MasterConfigSynchronization>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001852:	f000 fa51 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	3730      	adds	r7, #48	; 0x30
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20004b78 	.word	0x20004b78

08001864 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08c      	sub	sp, #48	; 0x30
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800186a:	f107 030c 	add.w	r3, r7, #12
 800186e:	2224      	movs	r2, #36	; 0x24
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f007 f9dc 	bl	8008c30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001880:	4b20      	ldr	r3, [pc, #128]	; (8001904 <MX_TIM3_Init+0xa0>)
 8001882:	4a21      	ldr	r2, [pc, #132]	; (8001908 <MX_TIM3_Init+0xa4>)
 8001884:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001886:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <MX_TIM3_Init+0xa0>)
 8001888:	2200      	movs	r2, #0
 800188a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188c:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <MX_TIM3_Init+0xa0>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001892:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <MX_TIM3_Init+0xa0>)
 8001894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001898:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189a:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <MX_TIM3_Init+0xa0>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a0:	4b18      	ldr	r3, [pc, #96]	; (8001904 <MX_TIM3_Init+0xa0>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018a6:	2303      	movs	r3, #3
 80018a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018ae:	2301      	movs	r3, #1
 80018b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80018b6:	230a      	movs	r3, #10
 80018b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018ba:	2300      	movs	r3, #0
 80018bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018be:	2301      	movs	r3, #1
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018c2:	2300      	movs	r3, #0
 80018c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80018c6:	230a      	movs	r3, #10
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80018ca:	f107 030c 	add.w	r3, r7, #12
 80018ce:	4619      	mov	r1, r3
 80018d0:	480c      	ldr	r0, [pc, #48]	; (8001904 <MX_TIM3_Init+0xa0>)
 80018d2:	f002 f809 	bl	80038e8 <HAL_TIM_Encoder_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80018dc:	f000 fa0c 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e0:	2300      	movs	r3, #0
 80018e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	4619      	mov	r1, r3
 80018ec:	4805      	ldr	r0, [pc, #20]	; (8001904 <MX_TIM3_Init+0xa0>)
 80018ee:	f003 f903 	bl	8004af8 <HAL_TIMEx_MasterConfigSynchronization>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80018f8:	f000 f9fe 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018fc:	bf00      	nop
 80018fe:	3730      	adds	r7, #48	; 0x30
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20004ad0 	.word	0x20004ad0
 8001908:	40000400 	.word	0x40000400

0800190c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001912:	f107 0310 	add.w	r3, r7, #16
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800191c:	463b      	mov	r3, r7
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001928:	4b20      	ldr	r3, [pc, #128]	; (80019ac <MX_TIM4_Init+0xa0>)
 800192a:	4a21      	ldr	r2, [pc, #132]	; (80019b0 <MX_TIM4_Init+0xa4>)
 800192c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 800192e:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <MX_TIM4_Init+0xa0>)
 8001930:	220f      	movs	r2, #15
 8001932:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001934:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <MX_TIM4_Init+0xa0>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 800193a:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <MX_TIM4_Init+0xa0>)
 800193c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001940:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001942:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <MX_TIM4_Init+0xa0>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001948:	4b18      	ldr	r3, [pc, #96]	; (80019ac <MX_TIM4_Init+0xa0>)
 800194a:	2200      	movs	r2, #0
 800194c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800194e:	4817      	ldr	r0, [pc, #92]	; (80019ac <MX_TIM4_Init+0xa0>)
 8001950:	f001 fe52 	bl	80035f8 <HAL_TIM_IC_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800195a:	f000 f9cd 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001966:	f107 0310 	add.w	r3, r7, #16
 800196a:	4619      	mov	r1, r3
 800196c:	480f      	ldr	r0, [pc, #60]	; (80019ac <MX_TIM4_Init+0xa0>)
 800196e:	f003 f8c3 	bl	8004af8 <HAL_TIMEx_MasterConfigSynchronization>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001978:	f000 f9be 	bl	8001cf8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800197c:	2300      	movs	r3, #0
 800197e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001980:	2301      	movs	r3, #1
 8001982:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800198c:	463b      	mov	r3, r7
 800198e:	2200      	movs	r2, #0
 8001990:	4619      	mov	r1, r3
 8001992:	4806      	ldr	r0, [pc, #24]	; (80019ac <MX_TIM4_Init+0xa0>)
 8001994:	f002 f9e4 	bl	8003d60 <HAL_TIM_IC_ConfigChannel>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800199e:	f000 f9ab 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20004a20 	.word	0x20004a20
 80019b0:	40000800 	.word	0x40000800

080019b4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b092      	sub	sp, #72	; 0x48
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
 80019d4:	615a      	str	r2, [r3, #20]
 80019d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	2220      	movs	r2, #32
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f007 f926 	bl	8008c30 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019e4:	4b37      	ldr	r3, [pc, #220]	; (8001ac4 <MX_TIM8_Init+0x110>)
 80019e6:	4a38      	ldr	r2, [pc, #224]	; (8001ac8 <MX_TIM8_Init+0x114>)
 80019e8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80019ea:	4b36      	ldr	r3, [pc, #216]	; (8001ac4 <MX_TIM8_Init+0x110>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f0:	4b34      	ldr	r3, [pc, #208]	; (8001ac4 <MX_TIM8_Init+0x110>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80019f6:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <MX_TIM8_Init+0x110>)
 80019f8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80019fc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fe:	4b31      	ldr	r3, [pc, #196]	; (8001ac4 <MX_TIM8_Init+0x110>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a04:	4b2f      	ldr	r3, [pc, #188]	; (8001ac4 <MX_TIM8_Init+0x110>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ac4 <MX_TIM8_Init+0x110>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a10:	482c      	ldr	r0, [pc, #176]	; (8001ac4 <MX_TIM8_Init+0x110>)
 8001a12:	f001 fcda 	bl	80033ca <HAL_TIM_PWM_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001a1c:	f000 f96c 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a20:	2300      	movs	r3, #0
 8001a22:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4825      	ldr	r0, [pc, #148]	; (8001ac4 <MX_TIM8_Init+0x110>)
 8001a30:	f003 f862 	bl	8004af8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8001a3a:	f000 f95d 	bl	8001cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a3e:	2360      	movs	r3, #96	; 0x60
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a56:	2300      	movs	r3, #0
 8001a58:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5e:	2200      	movs	r2, #0
 8001a60:	4619      	mov	r1, r3
 8001a62:	4818      	ldr	r0, [pc, #96]	; (8001ac4 <MX_TIM8_Init+0x110>)
 8001a64:	f002 fa18 	bl	8003e98 <HAL_TIM_PWM_ConfigChannel>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8001a6e:	f000 f943 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a76:	2204      	movs	r2, #4
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4812      	ldr	r0, [pc, #72]	; (8001ac4 <MX_TIM8_Init+0x110>)
 8001a7c:	f002 fa0c 	bl	8003e98 <HAL_TIM_PWM_ConfigChannel>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8001a86:	f000 f937 	bl	8001cf8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_TIM8_Init+0x110>)
 8001aae:	f003 f89f 	bl	8004bf0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001ab8:	f000 f91e 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	3748      	adds	r7, #72	; 0x48
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200049d8 	.word	0x200049d8
 8001ac8:	40010400 	.word	0x40010400

08001acc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001ad2:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <MX_USART3_UART_Init+0x50>)
 8001ad4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001ad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001adc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001af2:	220c      	movs	r2, #12
 8001af4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b02:	4805      	ldr	r0, [pc, #20]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001b04:	f003 f8da 	bl	8004cbc <HAL_UART_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b0e:	f000 f8f3 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20004a6c 	.word	0x20004a6c
 8001b1c:	40004800 	.word	0x40004800

08001b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	; 0x28
 8001b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	4b42      	ldr	r3, [pc, #264]	; (8001c44 <MX_GPIO_Init+0x124>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a41      	ldr	r2, [pc, #260]	; (8001c44 <MX_GPIO_Init+0x124>)
 8001b40:	f043 0310 	orr.w	r3, r3, #16
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b3f      	ldr	r3, [pc, #252]	; (8001c44 <MX_GPIO_Init+0x124>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <MX_GPIO_Init+0x124>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a3a      	ldr	r2, [pc, #232]	; (8001c44 <MX_GPIO_Init+0x124>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b38      	ldr	r3, [pc, #224]	; (8001c44 <MX_GPIO_Init+0x124>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <MX_GPIO_Init+0x124>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a33      	ldr	r2, [pc, #204]	; (8001c44 <MX_GPIO_Init+0x124>)
 8001b78:	f043 0308 	orr.w	r3, r3, #8
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <MX_GPIO_Init+0x124>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <MX_GPIO_Init+0x124>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a2c      	ldr	r2, [pc, #176]	; (8001c44 <MX_GPIO_Init+0x124>)
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <MX_GPIO_Init+0x124>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	603b      	str	r3, [r7, #0]
 8001baa:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <MX_GPIO_Init+0x124>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a25      	ldr	r2, [pc, #148]	; (8001c44 <MX_GPIO_Init+0x124>)
 8001bb0:	f043 0302 	orr.w	r3, r3, #2
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <MX_GPIO_Init+0x124>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8001bc8:	481f      	ldr	r0, [pc, #124]	; (8001c48 <MX_GPIO_Init+0x128>)
 8001bca:	f000 ff25 	bl	8002a18 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	213c      	movs	r1, #60	; 0x3c
 8001bd2:	481e      	ldr	r0, [pc, #120]	; (8001c4c <MX_GPIO_Init+0x12c>)
 8001bd4:	f000 ff20 	bl	8002a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bde:	481c      	ldr	r0, [pc, #112]	; (8001c50 <MX_GPIO_Init+0x130>)
 8001be0:	f000 ff1a 	bl	8002a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001be4:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8001be8:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bea:	2301      	movs	r3, #1
 8001bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4812      	ldr	r0, [pc, #72]	; (8001c48 <MX_GPIO_Init+0x128>)
 8001bfe:	f000 fd6f 	bl	80026e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001c02:	233c      	movs	r3, #60	; 0x3c
 8001c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c06:	2301      	movs	r3, #1
 8001c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4619      	mov	r1, r3
 8001c18:	480c      	ldr	r0, [pc, #48]	; (8001c4c <MX_GPIO_Init+0x12c>)
 8001c1a:	f000 fd61 	bl	80026e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001c1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c24:	2301      	movs	r3, #1
 8001c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4619      	mov	r1, r3
 8001c36:	4806      	ldr	r0, [pc, #24]	; (8001c50 <MX_GPIO_Init+0x130>)
 8001c38:	f000 fd52 	bl	80026e0 <HAL_GPIO_Init>

}
 8001c3c:	bf00      	nop
 8001c3e:	3728      	adds	r7, #40	; 0x28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40020000 	.word	0x40020000
 8001c50:	40020c00 	.word	0x40020c00

08001c54 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	/*Prevent unused argument(s) compilation warning*/
	UNUSED(huart);
	HAL_UART_Transmit(&huart3,(uint8_t *)aRxBuffer,10,0xFFFF); //might not nd since we not rly transmitting
 8001c5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c60:	220a      	movs	r2, #10
 8001c62:	4904      	ldr	r1, [pc, #16]	; (8001c74 <HAL_UART_RxCpltCallback+0x20>)
 8001c64:	4804      	ldr	r0, [pc, #16]	; (8001c78 <HAL_UART_RxCpltCallback+0x24>)
 8001c66:	f003 f876 	bl	8004d56 <HAL_UART_Transmit>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20004b64 	.word	0x20004b64
 8001c78:	20004a6c 	.word	0x20004a6c

08001c7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t test[20] = "Testing";
 8001c84:	4a09      	ldr	r2, [pc, #36]	; (8001cac <StartDefaultTask+0x30>)
 8001c86:	f107 030c 	add.w	r3, r7, #12
 8001c8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c8e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
//	  ultraDistCheck();
//	  HAL_Delay(200);
//	  sprintf(ultra, "uDist: %ucm\0", uDistFinal);
//	  OLED_ShowString(10, 20, ultra);

	  OLED_Refresh_Gram();
 8001c9e:	f006 fd5d 	bl	800875c <OLED_Refresh_Gram>
//	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
	  osDelay(500);
 8001ca2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ca6:	f004 f8e1 	bl	8005e6c <osDelay>
	  OLED_Refresh_Gram();
 8001caa:	e7f8      	b.n	8001c9e <StartDefaultTask+0x22>
 8001cac:	0800a430 	.word	0x0800a430

08001cb0 <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001cb8:	2100      	movs	r1, #0
 8001cba:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <motor+0x40>)
 8001cbc:	f001 fbd4 	bl	8003468 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001cc0:	2104      	movs	r1, #4
 8001cc2:	480b      	ldr	r0, [pc, #44]	; (8001cf0 <motor+0x40>)
 8001cc4:	f001 fbd0 	bl	8003468 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001cc8:	210c      	movs	r1, #12
 8001cca:	480a      	ldr	r0, [pc, #40]	; (8001cf4 <motor+0x44>)
 8001ccc:	f001 fbcc 	bl	8003468 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = 74;
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <motor+0x44>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	224a      	movs	r2, #74	; 0x4a
 8001cd6:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(500);
 8001cd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cdc:	f004 f8c6 	bl	8005e6c <osDelay>
//	motorControl(3000, 3000, 'F', 'F', 0, 10000, 120);
	left(360);
 8001ce0:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8001ce4:	f7ff fbe4 	bl	80014b0 <left>
//		sprintf(test, "%s\0", aRxBuffer);  //NOT SURE if it's receiving or transmitting. me is confused??
//		OLED_ShowString(5,5,test);
//		OLED_Refresh_Gram();
//		osDelay(1000);
//	  }
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200049d8 	.word	0x200049d8
 8001cf4:	20004b18 	.word	0x20004b18

08001cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cfc:	b672      	cpsid	i
}
 8001cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <Error_Handler+0x8>
	...

08001d04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_MspInit+0x54>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	4a11      	ldr	r2, [pc, #68]	; (8001d58 <HAL_MspInit+0x54>)
 8001d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d18:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <HAL_MspInit+0x54>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_MspInit+0x54>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <HAL_MspInit+0x54>)
 8001d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d34:	6413      	str	r3, [r2, #64]	; 0x40
 8001d36:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <HAL_MspInit+0x54>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	210f      	movs	r1, #15
 8001d46:	f06f 0001 	mvn.w	r0, #1
 8001d4a:	f000 fc00 	bl	800254e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800

08001d5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0b      	ldr	r2, [pc, #44]	; (8001d98 <HAL_TIM_Base_MspInit+0x3c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d10d      	bne.n	8001d8a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <HAL_TIM_Base_MspInit+0x40>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	4a09      	ldr	r2, [pc, #36]	; (8001d9c <HAL_TIM_Base_MspInit+0x40>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7e:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <HAL_TIM_Base_MspInit+0x40>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40010000 	.word	0x40010000
 8001d9c:	40023800 	.word	0x40023800

08001da0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08c      	sub	sp, #48	; 0x30
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc0:	d14b      	bne.n	8001e5a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
 8001dc6:	4b3f      	ldr	r3, [pc, #252]	; (8001ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	4a3e      	ldr	r2, [pc, #248]	; (8001ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd2:	4b3c      	ldr	r3, [pc, #240]	; (8001ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	61bb      	str	r3, [r7, #24]
 8001ddc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a37      	ldr	r2, [pc, #220]	; (8001ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b35      	ldr	r3, [pc, #212]	; (8001ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	4b31      	ldr	r3, [pc, #196]	; (8001ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a30      	ldr	r2, [pc, #192]	; (8001ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2c:	f107 031c 	add.w	r3, r7, #28
 8001e30:	4619      	mov	r1, r3
 8001e32:	4825      	ldr	r0, [pc, #148]	; (8001ec8 <HAL_TIM_Encoder_MspInit+0x128>)
 8001e34:	f000 fc54 	bl	80026e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e38:	2308      	movs	r3, #8
 8001e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	2300      	movs	r3, #0
 8001e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4c:	f107 031c 	add.w	r3, r7, #28
 8001e50:	4619      	mov	r1, r3
 8001e52:	481e      	ldr	r0, [pc, #120]	; (8001ecc <HAL_TIM_Encoder_MspInit+0x12c>)
 8001e54:	f000 fc44 	bl	80026e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e58:	e030      	b.n	8001ebc <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ed0 <HAL_TIM_Encoder_MspInit+0x130>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d12b      	bne.n	8001ebc <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	4a15      	ldr	r2, [pc, #84]	; (8001ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001e6e:	f043 0302 	orr.w	r3, r3, #2
 8001e72:	6413      	str	r3, [r2, #64]	; 0x40
 8001e74:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e80:	2300      	movs	r3, #0
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	4a0e      	ldr	r2, [pc, #56]	; (8001ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e9c:	23c0      	movs	r3, #192	; 0xc0
 8001e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001eac:	2302      	movs	r3, #2
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb0:	f107 031c 	add.w	r3, r7, #28
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4804      	ldr	r0, [pc, #16]	; (8001ec8 <HAL_TIM_Encoder_MspInit+0x128>)
 8001eb8:	f000 fc12 	bl	80026e0 <HAL_GPIO_Init>
}
 8001ebc:	bf00      	nop
 8001ebe:	3730      	adds	r7, #48	; 0x30
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020000 	.word	0x40020000
 8001ecc:	40020400 	.word	0x40020400
 8001ed0:	40000400 	.word	0x40000400

08001ed4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08a      	sub	sp, #40	; 0x28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a1d      	ldr	r2, [pc, #116]	; (8001f68 <HAL_TIM_IC_MspInit+0x94>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d134      	bne.n	8001f60 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <HAL_TIM_IC_MspInit+0x98>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	4a1b      	ldr	r2, [pc, #108]	; (8001f6c <HAL_TIM_IC_MspInit+0x98>)
 8001f00:	f043 0304 	orr.w	r3, r3, #4
 8001f04:	6413      	str	r3, [r2, #64]	; 0x40
 8001f06:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <HAL_TIM_IC_MspInit+0x98>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HAL_TIM_IC_MspInit+0x98>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a14      	ldr	r2, [pc, #80]	; (8001f6c <HAL_TIM_IC_MspInit+0x98>)
 8001f1c:	f043 0308 	orr.w	r3, r3, #8
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_TIM_IC_MspInit+0x98>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f40:	2302      	movs	r3, #2
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4809      	ldr	r0, [pc, #36]	; (8001f70 <HAL_TIM_IC_MspInit+0x9c>)
 8001f4c:	f000 fbc8 	bl	80026e0 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001f50:	2200      	movs	r2, #0
 8001f52:	2105      	movs	r1, #5
 8001f54:	201e      	movs	r0, #30
 8001f56:	f000 fafa 	bl	800254e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f5a:	201e      	movs	r0, #30
 8001f5c:	f000 fb13 	bl	8002586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f60:	bf00      	nop
 8001f62:	3728      	adds	r7, #40	; 0x28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40000800 	.word	0x40000800
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40020c00 	.word	0x40020c00

08001f74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM8)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a19      	ldr	r2, [pc, #100]	; (8001ff8 <HAL_TIM_PWM_MspInit+0x84>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d12b      	bne.n	8001fee <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <HAL_TIM_PWM_MspInit+0x88>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	4a17      	ldr	r2, [pc, #92]	; (8001ffc <HAL_TIM_PWM_MspInit+0x88>)
 8001fa0:	f043 0302 	orr.w	r3, r3, #2
 8001fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <HAL_TIM_PWM_MspInit+0x88>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <HAL_TIM_PWM_MspInit+0x88>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a10      	ldr	r2, [pc, #64]	; (8001ffc <HAL_TIM_PWM_MspInit+0x88>)
 8001fbc:	f043 0304 	orr.w	r3, r3, #4
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_TIM_PWM_MspInit+0x88>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8001fce:	23c0      	movs	r3, #192	; 0xc0
 8001fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4805      	ldr	r0, [pc, #20]	; (8002000 <HAL_TIM_PWM_MspInit+0x8c>)
 8001fea:	f000 fb79 	bl	80026e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001fee:	bf00      	nop
 8001ff0:	3728      	adds	r7, #40	; 0x28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40010400 	.word	0x40010400
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40020800 	.word	0x40020800

08002004 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 030c 	add.w	r3, r7, #12
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a12      	ldr	r2, [pc, #72]	; (800206c <HAL_TIM_MspPostInit+0x68>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d11e      	bne.n	8002064 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HAL_TIM_MspPostInit+0x6c>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a10      	ldr	r2, [pc, #64]	; (8002070 <HAL_TIM_MspPostInit+0x6c>)
 8002030:	f043 0310 	orr.w	r3, r3, #16
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <HAL_TIM_MspPostInit+0x6c>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002042:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002046:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002054:	2301      	movs	r3, #1
 8002056:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002058:	f107 030c 	add.w	r3, r7, #12
 800205c:	4619      	mov	r1, r3
 800205e:	4805      	ldr	r0, [pc, #20]	; (8002074 <HAL_TIM_MspPostInit+0x70>)
 8002060:	f000 fb3e 	bl	80026e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002064:	bf00      	nop
 8002066:	3720      	adds	r7, #32
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40010000 	.word	0x40010000
 8002070:	40023800 	.word	0x40023800
 8002074:	40021000 	.word	0x40021000

08002078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	; 0x28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a1d      	ldr	r2, [pc, #116]	; (800210c <HAL_UART_MspInit+0x94>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d134      	bne.n	8002104 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	4b1c      	ldr	r3, [pc, #112]	; (8002110 <HAL_UART_MspInit+0x98>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	4a1b      	ldr	r2, [pc, #108]	; (8002110 <HAL_UART_MspInit+0x98>)
 80020a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a8:	6413      	str	r3, [r2, #64]	; 0x40
 80020aa:	4b19      	ldr	r3, [pc, #100]	; (8002110 <HAL_UART_MspInit+0x98>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	4b15      	ldr	r3, [pc, #84]	; (8002110 <HAL_UART_MspInit+0x98>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a14      	ldr	r2, [pc, #80]	; (8002110 <HAL_UART_MspInit+0x98>)
 80020c0:	f043 0304 	orr.w	r3, r3, #4
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b12      	ldr	r3, [pc, #72]	; (8002110 <HAL_UART_MspInit+0x98>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e0:	2303      	movs	r3, #3
 80020e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020e4:	2307      	movs	r3, #7
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	4619      	mov	r1, r3
 80020ee:	4809      	ldr	r0, [pc, #36]	; (8002114 <HAL_UART_MspInit+0x9c>)
 80020f0:	f000 faf6 	bl	80026e0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80020f4:	2200      	movs	r2, #0
 80020f6:	2105      	movs	r1, #5
 80020f8:	2027      	movs	r0, #39	; 0x27
 80020fa:	f000 fa28 	bl	800254e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020fe:	2027      	movs	r0, #39	; 0x27
 8002100:	f000 fa41 	bl	8002586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002104:	bf00      	nop
 8002106:	3728      	adds	r7, #40	; 0x28
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40004800 	.word	0x40004800
 8002110:	40023800 	.word	0x40023800
 8002114:	40020800 	.word	0x40020800

08002118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800211c:	e7fe      	b.n	800211c <NMI_Handler+0x4>

0800211e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002122:	e7fe      	b.n	8002122 <HardFault_Handler+0x4>

08002124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002128:	e7fe      	b.n	8002128 <MemManage_Handler+0x4>

0800212a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800212e:	e7fe      	b.n	800212e <BusFault_Handler+0x4>

08002130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002134:	e7fe      	b.n	8002134 <UsageFault_Handler+0x4>

08002136 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002148:	f000 f8e2 	bl	8002310 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800214c:	f005 fa9c 	bl	8007688 <xTaskGetSchedulerState>
 8002150:	4603      	mov	r3, r0
 8002152:	2b01      	cmp	r3, #1
 8002154:	d001      	beq.n	800215a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002156:	f006 f887 	bl	8008268 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002164:	4802      	ldr	r0, [pc, #8]	; (8002170 <TIM4_IRQHandler+0x10>)
 8002166:	f001 fcf3 	bl	8003b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20004a20 	.word	0x20004a20

08002174 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002178:	4802      	ldr	r0, [pc, #8]	; (8002184 <USART3_IRQHandler+0x10>)
 800217a:	f002 feaf 	bl	8004edc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20004a6c 	.word	0x20004a6c

08002188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002190:	4a14      	ldr	r2, [pc, #80]	; (80021e4 <_sbrk+0x5c>)
 8002192:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <_sbrk+0x60>)
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <_sbrk+0x64>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d102      	bne.n	80021aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <_sbrk+0x64>)
 80021a6:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <_sbrk+0x68>)
 80021a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <_sbrk+0x64>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d207      	bcs.n	80021c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021b8:	f006 fd02 	bl	8008bc0 <__errno>
 80021bc:	4603      	mov	r3, r0
 80021be:	220c      	movs	r2, #12
 80021c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295
 80021c6:	e009      	b.n	80021dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <_sbrk+0x64>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ce:	4b07      	ldr	r3, [pc, #28]	; (80021ec <_sbrk+0x64>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	4a05      	ldr	r2, [pc, #20]	; (80021ec <_sbrk+0x64>)
 80021d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021da:	68fb      	ldr	r3, [r7, #12]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20020000 	.word	0x20020000
 80021e8:	00000400 	.word	0x00000400
 80021ec:	200000b8 	.word	0x200000b8
 80021f0:	20005018 	.word	0x20005018

080021f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <SystemInit+0x20>)
 80021fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fe:	4a05      	ldr	r2, [pc, #20]	; (8002214 <SystemInit+0x20>)
 8002200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002250 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800221c:	480d      	ldr	r0, [pc, #52]	; (8002254 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800221e:	490e      	ldr	r1, [pc, #56]	; (8002258 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002220:	4a0e      	ldr	r2, [pc, #56]	; (800225c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002224:	e002      	b.n	800222c <LoopCopyDataInit>

08002226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800222a:	3304      	adds	r3, #4

0800222c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800222c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800222e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002230:	d3f9      	bcc.n	8002226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002232:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002234:	4c0b      	ldr	r4, [pc, #44]	; (8002264 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002238:	e001      	b.n	800223e <LoopFillZerobss>

0800223a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800223a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800223c:	3204      	adds	r2, #4

0800223e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800223e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002240:	d3fb      	bcc.n	800223a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002242:	f7ff ffd7 	bl	80021f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002246:	f006 fcc1 	bl	8008bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800224a:	f7ff f973 	bl	8001534 <main>
  bx  lr    
 800224e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002258:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800225c:	0800afa8 	.word	0x0800afa8
  ldr r2, =_sbss
 8002260:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002264:	20005014 	.word	0x20005014

08002268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002268:	e7fe      	b.n	8002268 <ADC_IRQHandler>
	...

0800226c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002270:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <HAL_Init+0x40>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a0d      	ldr	r2, [pc, #52]	; (80022ac <HAL_Init+0x40>)
 8002276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800227a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_Init+0x40>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <HAL_Init+0x40>)
 8002282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002286:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <HAL_Init+0x40>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a07      	ldr	r2, [pc, #28]	; (80022ac <HAL_Init+0x40>)
 800228e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002294:	2003      	movs	r0, #3
 8002296:	f000 f94f 	bl	8002538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800229a:	200f      	movs	r0, #15
 800229c:	f000 f808 	bl	80022b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022a0:	f7ff fd30 	bl	8001d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023c00 	.word	0x40023c00

080022b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b8:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_InitTick+0x54>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <HAL_InitTick+0x58>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4619      	mov	r1, r3
 80022c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 f967 	bl	80025a2 <HAL_SYSTICK_Config>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e00e      	b.n	80022fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b0f      	cmp	r3, #15
 80022e2:	d80a      	bhi.n	80022fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e4:	2200      	movs	r2, #0
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ec:	f000 f92f 	bl	800254e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f0:	4a06      	ldr	r2, [pc, #24]	; (800230c <HAL_InitTick+0x5c>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	e000      	b.n	80022fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000000 	.word	0x20000000
 8002308:	20000008 	.word	0x20000008
 800230c:	20000004 	.word	0x20000004

08002310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_IncTick+0x20>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_IncTick+0x24>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4413      	add	r3, r2
 8002320:	4a04      	ldr	r2, [pc, #16]	; (8002334 <HAL_IncTick+0x24>)
 8002322:	6013      	str	r3, [r2, #0]
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20000008 	.word	0x20000008
 8002334:	20004bc0 	.word	0x20004bc0

08002338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return uwTick;
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <HAL_GetTick+0x14>)
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20004bc0 	.word	0x20004bc0

08002350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7ff ffee 	bl	8002338 <HAL_GetTick>
 800235c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002368:	d005      	beq.n	8002376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_Delay+0x44>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4413      	add	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002376:	bf00      	nop
 8002378:	f7ff ffde 	bl	8002338 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	429a      	cmp	r2, r3
 8002386:	d8f7      	bhi.n	8002378 <HAL_Delay+0x28>
  {
  }
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000008 	.word	0x20000008

08002398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <__NVIC_SetPriorityGrouping+0x44>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023b4:	4013      	ands	r3, r2
 80023b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ca:	4a04      	ldr	r2, [pc, #16]	; (80023dc <__NVIC_SetPriorityGrouping+0x44>)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	60d3      	str	r3, [r2, #12]
}
 80023d0:	bf00      	nop
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e4:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <__NVIC_GetPriorityGrouping+0x18>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	f003 0307 	and.w	r3, r3, #7
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	2b00      	cmp	r3, #0
 800240c:	db0b      	blt.n	8002426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	f003 021f 	and.w	r2, r3, #31
 8002414:	4907      	ldr	r1, [pc, #28]	; (8002434 <__NVIC_EnableIRQ+0x38>)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	2001      	movs	r0, #1
 800241e:	fa00 f202 	lsl.w	r2, r0, r2
 8002422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000e100 	.word	0xe000e100

08002438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	2b00      	cmp	r3, #0
 800244a:	db0a      	blt.n	8002462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	490c      	ldr	r1, [pc, #48]	; (8002484 <__NVIC_SetPriority+0x4c>)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	0112      	lsls	r2, r2, #4
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	440b      	add	r3, r1
 800245c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002460:	e00a      	b.n	8002478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	4908      	ldr	r1, [pc, #32]	; (8002488 <__NVIC_SetPriority+0x50>)
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	3b04      	subs	r3, #4
 8002470:	0112      	lsls	r2, r2, #4
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	440b      	add	r3, r1
 8002476:	761a      	strb	r2, [r3, #24]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	e000e100 	.word	0xe000e100
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800248c:	b480      	push	{r7}
 800248e:	b089      	sub	sp, #36	; 0x24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f1c3 0307 	rsb	r3, r3, #7
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	bf28      	it	cs
 80024aa:	2304      	movcs	r3, #4
 80024ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3304      	adds	r3, #4
 80024b2:	2b06      	cmp	r3, #6
 80024b4:	d902      	bls.n	80024bc <NVIC_EncodePriority+0x30>
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3b03      	subs	r3, #3
 80024ba:	e000      	b.n	80024be <NVIC_EncodePriority+0x32>
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c0:	f04f 32ff 	mov.w	r2, #4294967295
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43da      	mvns	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	401a      	ands	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d4:	f04f 31ff 	mov.w	r1, #4294967295
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fa01 f303 	lsl.w	r3, r1, r3
 80024de:	43d9      	mvns	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e4:	4313      	orrs	r3, r2
         );
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3724      	adds	r7, #36	; 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
	...

080024f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3b01      	subs	r3, #1
 8002500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002504:	d301      	bcc.n	800250a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002506:	2301      	movs	r3, #1
 8002508:	e00f      	b.n	800252a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800250a:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <SysTick_Config+0x40>)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002512:	210f      	movs	r1, #15
 8002514:	f04f 30ff 	mov.w	r0, #4294967295
 8002518:	f7ff ff8e 	bl	8002438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <SysTick_Config+0x40>)
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002522:	4b04      	ldr	r3, [pc, #16]	; (8002534 <SysTick_Config+0x40>)
 8002524:	2207      	movs	r2, #7
 8002526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	e000e010 	.word	0xe000e010

08002538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff ff29 	bl	8002398 <__NVIC_SetPriorityGrouping>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800254e:	b580      	push	{r7, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002560:	f7ff ff3e 	bl	80023e0 <__NVIC_GetPriorityGrouping>
 8002564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	6978      	ldr	r0, [r7, #20]
 800256c:	f7ff ff8e 	bl	800248c <NVIC_EncodePriority>
 8002570:	4602      	mov	r2, r0
 8002572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002576:	4611      	mov	r1, r2
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff5d 	bl	8002438 <__NVIC_SetPriority>
}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	4603      	mov	r3, r0
 800258e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff31 	bl	80023fc <__NVIC_EnableIRQ>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ffa2 	bl	80024f4 <SysTick_Config>
 80025b0:	4603      	mov	r3, r0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b084      	sub	sp, #16
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025c8:	f7ff feb6 	bl	8002338 <HAL_GetTick>
 80025cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d008      	beq.n	80025ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2280      	movs	r2, #128	; 0x80
 80025de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e052      	b.n	8002692 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0216 	bic.w	r2, r2, #22
 80025fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695a      	ldr	r2, [r3, #20]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800260a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	2b00      	cmp	r3, #0
 8002612:	d103      	bne.n	800261c <HAL_DMA_Abort+0x62>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002618:	2b00      	cmp	r3, #0
 800261a:	d007      	beq.n	800262c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0208 	bic.w	r2, r2, #8
 800262a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0201 	bic.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800263c:	e013      	b.n	8002666 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800263e:	f7ff fe7b 	bl	8002338 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b05      	cmp	r3, #5
 800264a:	d90c      	bls.n	8002666 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2220      	movs	r2, #32
 8002650:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2203      	movs	r2, #3
 8002656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e015      	b.n	8002692 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1e4      	bne.n	800263e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002678:	223f      	movs	r2, #63	; 0x3f
 800267a:	409a      	lsls	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d004      	beq.n	80026b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2280      	movs	r2, #128	; 0x80
 80026b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e00c      	b.n	80026d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2205      	movs	r2, #5
 80026bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0201 	bic.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
	...

080026e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b089      	sub	sp, #36	; 0x24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	e16b      	b.n	80029d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026fc:	2201      	movs	r2, #1
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	429a      	cmp	r2, r3
 8002716:	f040 815a 	bne.w	80029ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	2b01      	cmp	r3, #1
 8002724:	d005      	beq.n	8002732 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800272e:	2b02      	cmp	r3, #2
 8002730:	d130      	bne.n	8002794 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	2203      	movs	r2, #3
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002768:	2201      	movs	r2, #1
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	091b      	lsrs	r3, r3, #4
 800277e:	f003 0201 	and.w	r2, r3, #1
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	2b03      	cmp	r3, #3
 800279e:	d017      	beq.n	80027d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	2203      	movs	r2, #3
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d123      	bne.n	8002824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	08da      	lsrs	r2, r3, #3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3208      	adds	r2, #8
 80027e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	220f      	movs	r2, #15
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	08da      	lsrs	r2, r3, #3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3208      	adds	r2, #8
 800281e:	69b9      	ldr	r1, [r7, #24]
 8002820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	2203      	movs	r2, #3
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 0203 	and.w	r2, r3, #3
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80b4 	beq.w	80029ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	4b60      	ldr	r3, [pc, #384]	; (80029ec <HAL_GPIO_Init+0x30c>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	4a5f      	ldr	r2, [pc, #380]	; (80029ec <HAL_GPIO_Init+0x30c>)
 8002870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002874:	6453      	str	r3, [r2, #68]	; 0x44
 8002876:	4b5d      	ldr	r3, [pc, #372]	; (80029ec <HAL_GPIO_Init+0x30c>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002882:	4a5b      	ldr	r2, [pc, #364]	; (80029f0 <HAL_GPIO_Init+0x310>)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	089b      	lsrs	r3, r3, #2
 8002888:	3302      	adds	r3, #2
 800288a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	220f      	movs	r2, #15
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a52      	ldr	r2, [pc, #328]	; (80029f4 <HAL_GPIO_Init+0x314>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d02b      	beq.n	8002906 <HAL_GPIO_Init+0x226>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a51      	ldr	r2, [pc, #324]	; (80029f8 <HAL_GPIO_Init+0x318>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d025      	beq.n	8002902 <HAL_GPIO_Init+0x222>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a50      	ldr	r2, [pc, #320]	; (80029fc <HAL_GPIO_Init+0x31c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d01f      	beq.n	80028fe <HAL_GPIO_Init+0x21e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a4f      	ldr	r2, [pc, #316]	; (8002a00 <HAL_GPIO_Init+0x320>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d019      	beq.n	80028fa <HAL_GPIO_Init+0x21a>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a4e      	ldr	r2, [pc, #312]	; (8002a04 <HAL_GPIO_Init+0x324>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d013      	beq.n	80028f6 <HAL_GPIO_Init+0x216>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a4d      	ldr	r2, [pc, #308]	; (8002a08 <HAL_GPIO_Init+0x328>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00d      	beq.n	80028f2 <HAL_GPIO_Init+0x212>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a4c      	ldr	r2, [pc, #304]	; (8002a0c <HAL_GPIO_Init+0x32c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d007      	beq.n	80028ee <HAL_GPIO_Init+0x20e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a4b      	ldr	r2, [pc, #300]	; (8002a10 <HAL_GPIO_Init+0x330>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d101      	bne.n	80028ea <HAL_GPIO_Init+0x20a>
 80028e6:	2307      	movs	r3, #7
 80028e8:	e00e      	b.n	8002908 <HAL_GPIO_Init+0x228>
 80028ea:	2308      	movs	r3, #8
 80028ec:	e00c      	b.n	8002908 <HAL_GPIO_Init+0x228>
 80028ee:	2306      	movs	r3, #6
 80028f0:	e00a      	b.n	8002908 <HAL_GPIO_Init+0x228>
 80028f2:	2305      	movs	r3, #5
 80028f4:	e008      	b.n	8002908 <HAL_GPIO_Init+0x228>
 80028f6:	2304      	movs	r3, #4
 80028f8:	e006      	b.n	8002908 <HAL_GPIO_Init+0x228>
 80028fa:	2303      	movs	r3, #3
 80028fc:	e004      	b.n	8002908 <HAL_GPIO_Init+0x228>
 80028fe:	2302      	movs	r3, #2
 8002900:	e002      	b.n	8002908 <HAL_GPIO_Init+0x228>
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <HAL_GPIO_Init+0x228>
 8002906:	2300      	movs	r3, #0
 8002908:	69fa      	ldr	r2, [r7, #28]
 800290a:	f002 0203 	and.w	r2, r2, #3
 800290e:	0092      	lsls	r2, r2, #2
 8002910:	4093      	lsls	r3, r2
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002918:	4935      	ldr	r1, [pc, #212]	; (80029f0 <HAL_GPIO_Init+0x310>)
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	089b      	lsrs	r3, r3, #2
 800291e:	3302      	adds	r3, #2
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002926:	4b3b      	ldr	r3, [pc, #236]	; (8002a14 <HAL_GPIO_Init+0x334>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800294a:	4a32      	ldr	r2, [pc, #200]	; (8002a14 <HAL_GPIO_Init+0x334>)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002950:	4b30      	ldr	r3, [pc, #192]	; (8002a14 <HAL_GPIO_Init+0x334>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002974:	4a27      	ldr	r2, [pc, #156]	; (8002a14 <HAL_GPIO_Init+0x334>)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800297a:	4b26      	ldr	r3, [pc, #152]	; (8002a14 <HAL_GPIO_Init+0x334>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800299e:	4a1d      	ldr	r2, [pc, #116]	; (8002a14 <HAL_GPIO_Init+0x334>)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029a4:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_GPIO_Init+0x334>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029c8:	4a12      	ldr	r2, [pc, #72]	; (8002a14 <HAL_GPIO_Init+0x334>)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3301      	adds	r3, #1
 80029d2:	61fb      	str	r3, [r7, #28]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	2b0f      	cmp	r3, #15
 80029d8:	f67f ae90 	bls.w	80026fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029dc:	bf00      	nop
 80029de:	bf00      	nop
 80029e0:	3724      	adds	r7, #36	; 0x24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40013800 	.word	0x40013800
 80029f4:	40020000 	.word	0x40020000
 80029f8:	40020400 	.word	0x40020400
 80029fc:	40020800 	.word	0x40020800
 8002a00:	40020c00 	.word	0x40020c00
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40021400 	.word	0x40021400
 8002a0c:	40021800 	.word	0x40021800
 8002a10:	40021c00 	.word	0x40021c00
 8002a14:	40013c00 	.word	0x40013c00

08002a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	807b      	strh	r3, [r7, #2]
 8002a24:	4613      	mov	r3, r2
 8002a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a28:	787b      	ldrb	r3, [r7, #1]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a2e:	887a      	ldrh	r2, [r7, #2]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a34:	e003      	b.n	8002a3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a36:	887b      	ldrh	r3, [r7, #2]
 8002a38:	041a      	lsls	r2, r3, #16
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	619a      	str	r2, [r3, #24]
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002a52:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <HAL_PWR_EnableBkUpAccess+0x20>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <HAL_PWR_EnableBkUpAccess+0x24>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8002a5e:	687b      	ldr	r3, [r7, #4]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	420e0020 	.word	0x420e0020
 8002a70:	40007000 	.word	0x40007000

08002a74 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_PWR_DisableBkUpAccess+0x20>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_PWR_DisableBkUpAccess+0x24>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8002a86:	687b      	ldr	r3, [r7, #4]
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	420e0020 	.word	0x420e0020
 8002a98:	40007000 	.word	0x40007000

08002a9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e264      	b.n	8002f78 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d075      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aba:	4ba3      	ldr	r3, [pc, #652]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d00c      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ac6:	4ba0      	ldr	r3, [pc, #640]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d112      	bne.n	8002af8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ad2:	4b9d      	ldr	r3, [pc, #628]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ade:	d10b      	bne.n	8002af8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae0:	4b99      	ldr	r3, [pc, #612]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d05b      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x108>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d157      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e23f      	b.n	8002f78 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b00:	d106      	bne.n	8002b10 <HAL_RCC_OscConfig+0x74>
 8002b02:	4b91      	ldr	r3, [pc, #580]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a90      	ldr	r2, [pc, #576]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	e01d      	b.n	8002b4c <HAL_RCC_OscConfig+0xb0>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x98>
 8002b1a:	4b8b      	ldr	r3, [pc, #556]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a8a      	ldr	r2, [pc, #552]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	4b88      	ldr	r3, [pc, #544]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a87      	ldr	r2, [pc, #540]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	e00b      	b.n	8002b4c <HAL_RCC_OscConfig+0xb0>
 8002b34:	4b84      	ldr	r3, [pc, #528]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a83      	ldr	r2, [pc, #524]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	4b81      	ldr	r3, [pc, #516]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a80      	ldr	r2, [pc, #512]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d013      	beq.n	8002b7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b54:	f7ff fbf0 	bl	8002338 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b5c:	f7ff fbec 	bl	8002338 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b64      	cmp	r3, #100	; 0x64
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e204      	b.n	8002f78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	4b76      	ldr	r3, [pc, #472]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCC_OscConfig+0xc0>
 8002b7a:	e014      	b.n	8002ba6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7ff fbdc 	bl	8002338 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b84:	f7ff fbd8 	bl	8002338 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b64      	cmp	r3, #100	; 0x64
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e1f0      	b.n	8002f78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b96:	4b6c      	ldr	r3, [pc, #432]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0xe8>
 8002ba2:	e000      	b.n	8002ba6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d063      	beq.n	8002c7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bb2:	4b65      	ldr	r3, [pc, #404]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00b      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bbe:	4b62      	ldr	r3, [pc, #392]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d11c      	bne.n	8002c04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bca:	4b5f      	ldr	r3, [pc, #380]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d116      	bne.n	8002c04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd6:	4b5c      	ldr	r3, [pc, #368]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d005      	beq.n	8002bee <HAL_RCC_OscConfig+0x152>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d001      	beq.n	8002bee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e1c4      	b.n	8002f78 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bee:	4b56      	ldr	r3, [pc, #344]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4952      	ldr	r1, [pc, #328]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c02:	e03a      	b.n	8002c7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d020      	beq.n	8002c4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c0c:	4b4f      	ldr	r3, [pc, #316]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c12:	f7ff fb91 	bl	8002338 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c1a:	f7ff fb8d 	bl	8002338 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e1a5      	b.n	8002f78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2c:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c38:	4b43      	ldr	r3, [pc, #268]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	4940      	ldr	r1, [pc, #256]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	600b      	str	r3, [r1, #0]
 8002c4c:	e015      	b.n	8002c7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c4e:	4b3f      	ldr	r3, [pc, #252]	; (8002d4c <HAL_RCC_OscConfig+0x2b0>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7ff fb70 	bl	8002338 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c5c:	f7ff fb6c 	bl	8002338 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e184      	b.n	8002f78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6e:	4b36      	ldr	r3, [pc, #216]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d030      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d016      	beq.n	8002cbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c8e:	4b30      	ldr	r3, [pc, #192]	; (8002d50 <HAL_RCC_OscConfig+0x2b4>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c94:	f7ff fb50 	bl	8002338 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c9c:	f7ff fb4c 	bl	8002338 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e164      	b.n	8002f78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cae:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f0      	beq.n	8002c9c <HAL_RCC_OscConfig+0x200>
 8002cba:	e015      	b.n	8002ce8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cbc:	4b24      	ldr	r3, [pc, #144]	; (8002d50 <HAL_RCC_OscConfig+0x2b4>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc2:	f7ff fb39 	bl	8002338 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cca:	f7ff fb35 	bl	8002338 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e14d      	b.n	8002f78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cdc:	4b1a      	ldr	r3, [pc, #104]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f0      	bne.n	8002cca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 80a0 	beq.w	8002e36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cfa:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10f      	bne.n	8002d26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d14:	6413      	str	r3, [r2, #64]	; 0x40
 8002d16:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <HAL_RCC_OscConfig+0x2ac>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	60bb      	str	r3, [r7, #8]
 8002d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d22:	2301      	movs	r3, #1
 8002d24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_RCC_OscConfig+0x2b8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d121      	bne.n	8002d76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d32:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <HAL_RCC_OscConfig+0x2b8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a07      	ldr	r2, [pc, #28]	; (8002d54 <HAL_RCC_OscConfig+0x2b8>)
 8002d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d3e:	f7ff fafb 	bl	8002338 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d44:	e011      	b.n	8002d6a <HAL_RCC_OscConfig+0x2ce>
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	42470000 	.word	0x42470000
 8002d50:	42470e80 	.word	0x42470e80
 8002d54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d58:	f7ff faee 	bl	8002338 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e106      	b.n	8002f78 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6a:	4b85      	ldr	r3, [pc, #532]	; (8002f80 <HAL_RCC_OscConfig+0x4e4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d106      	bne.n	8002d8c <HAL_RCC_OscConfig+0x2f0>
 8002d7e:	4b81      	ldr	r3, [pc, #516]	; (8002f84 <HAL_RCC_OscConfig+0x4e8>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	4a80      	ldr	r2, [pc, #512]	; (8002f84 <HAL_RCC_OscConfig+0x4e8>)
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	6713      	str	r3, [r2, #112]	; 0x70
 8002d8a:	e01c      	b.n	8002dc6 <HAL_RCC_OscConfig+0x32a>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	2b05      	cmp	r3, #5
 8002d92:	d10c      	bne.n	8002dae <HAL_RCC_OscConfig+0x312>
 8002d94:	4b7b      	ldr	r3, [pc, #492]	; (8002f84 <HAL_RCC_OscConfig+0x4e8>)
 8002d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d98:	4a7a      	ldr	r2, [pc, #488]	; (8002f84 <HAL_RCC_OscConfig+0x4e8>)
 8002d9a:	f043 0304 	orr.w	r3, r3, #4
 8002d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002da0:	4b78      	ldr	r3, [pc, #480]	; (8002f84 <HAL_RCC_OscConfig+0x4e8>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da4:	4a77      	ldr	r2, [pc, #476]	; (8002f84 <HAL_RCC_OscConfig+0x4e8>)
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	6713      	str	r3, [r2, #112]	; 0x70
 8002dac:	e00b      	b.n	8002dc6 <HAL_RCC_OscConfig+0x32a>
 8002dae:	4b75      	ldr	r3, [pc, #468]	; (8002f84 <HAL_RCC_OscConfig+0x4e8>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db2:	4a74      	ldr	r2, [pc, #464]	; (8002f84 <HAL_RCC_OscConfig+0x4e8>)
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dba:	4b72      	ldr	r3, [pc, #456]	; (8002f84 <HAL_RCC_OscConfig+0x4e8>)
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbe:	4a71      	ldr	r2, [pc, #452]	; (8002f84 <HAL_RCC_OscConfig+0x4e8>)
 8002dc0:	f023 0304 	bic.w	r3, r3, #4
 8002dc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d015      	beq.n	8002dfa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dce:	f7ff fab3 	bl	8002338 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7ff faaf 	bl	8002338 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e0c5      	b.n	8002f78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dec:	4b65      	ldr	r3, [pc, #404]	; (8002f84 <HAL_RCC_OscConfig+0x4e8>)
 8002dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ee      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x33a>
 8002df8:	e014      	b.n	8002e24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfa:	f7ff fa9d 	bl	8002338 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e00:	e00a      	b.n	8002e18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e02:	f7ff fa99 	bl	8002338 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e0af      	b.n	8002f78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e18:	4b5a      	ldr	r3, [pc, #360]	; (8002f84 <HAL_RCC_OscConfig+0x4e8>)
 8002e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1ee      	bne.n	8002e02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e24:	7dfb      	ldrb	r3, [r7, #23]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d105      	bne.n	8002e36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e2a:	4b56      	ldr	r3, [pc, #344]	; (8002f84 <HAL_RCC_OscConfig+0x4e8>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	4a55      	ldr	r2, [pc, #340]	; (8002f84 <HAL_RCC_OscConfig+0x4e8>)
 8002e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 809b 	beq.w	8002f76 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e40:	4b50      	ldr	r3, [pc, #320]	; (8002f84 <HAL_RCC_OscConfig+0x4e8>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 030c 	and.w	r3, r3, #12
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d05c      	beq.n	8002f06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d141      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e54:	4b4c      	ldr	r3, [pc, #304]	; (8002f88 <HAL_RCC_OscConfig+0x4ec>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5a:	f7ff fa6d 	bl	8002338 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e62:	f7ff fa69 	bl	8002338 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e081      	b.n	8002f78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e74:	4b43      	ldr	r3, [pc, #268]	; (8002f84 <HAL_RCC_OscConfig+0x4e8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f0      	bne.n	8002e62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	69da      	ldr	r2, [r3, #28]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	019b      	lsls	r3, r3, #6
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e96:	085b      	lsrs	r3, r3, #1
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	041b      	lsls	r3, r3, #16
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea2:	061b      	lsls	r3, r3, #24
 8002ea4:	4937      	ldr	r1, [pc, #220]	; (8002f84 <HAL_RCC_OscConfig+0x4e8>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eaa:	4b37      	ldr	r3, [pc, #220]	; (8002f88 <HAL_RCC_OscConfig+0x4ec>)
 8002eac:	2201      	movs	r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7ff fa42 	bl	8002338 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7ff fa3e 	bl	8002338 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e056      	b.n	8002f78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eca:	4b2e      	ldr	r3, [pc, #184]	; (8002f84 <HAL_RCC_OscConfig+0x4e8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f0      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x41c>
 8002ed6:	e04e      	b.n	8002f76 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed8:	4b2b      	ldr	r3, [pc, #172]	; (8002f88 <HAL_RCC_OscConfig+0x4ec>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ede:	f7ff fa2b 	bl	8002338 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee6:	f7ff fa27 	bl	8002338 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e03f      	b.n	8002f78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef8:	4b22      	ldr	r3, [pc, #136]	; (8002f84 <HAL_RCC_OscConfig+0x4e8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f0      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x44a>
 8002f04:	e037      	b.n	8002f76 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e032      	b.n	8002f78 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f12:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <HAL_RCC_OscConfig+0x4e8>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d028      	beq.n	8002f72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d121      	bne.n	8002f72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d11a      	bne.n	8002f72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f42:	4013      	ands	r3, r2
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f48:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d111      	bne.n	8002f72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	085b      	lsrs	r3, r3, #1
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d107      	bne.n	8002f72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d001      	beq.n	8002f76 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40007000 	.word	0x40007000
 8002f84:	40023800 	.word	0x40023800
 8002f88:	42470060 	.word	0x42470060

08002f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0cc      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa0:	4b68      	ldr	r3, [pc, #416]	; (8003144 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d90c      	bls.n	8002fc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fae:	4b65      	ldr	r3, [pc, #404]	; (8003144 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb6:	4b63      	ldr	r3, [pc, #396]	; (8003144 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0b8      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d020      	beq.n	8003016 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fe0:	4b59      	ldr	r3, [pc, #356]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	4a58      	ldr	r2, [pc, #352]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ff8:	4b53      	ldr	r3, [pc, #332]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4a52      	ldr	r2, [pc, #328]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003002:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003004:	4b50      	ldr	r3, [pc, #320]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	494d      	ldr	r1, [pc, #308]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	4313      	orrs	r3, r2
 8003014:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d044      	beq.n	80030ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d107      	bne.n	800303a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302a:	4b47      	ldr	r3, [pc, #284]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d119      	bne.n	800306a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e07f      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d003      	beq.n	800304a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003046:	2b03      	cmp	r3, #3
 8003048:	d107      	bne.n	800305a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304a:	4b3f      	ldr	r3, [pc, #252]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d109      	bne.n	800306a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e06f      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305a:	4b3b      	ldr	r3, [pc, #236]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e067      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800306a:	4b37      	ldr	r3, [pc, #220]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f023 0203 	bic.w	r2, r3, #3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	4934      	ldr	r1, [pc, #208]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8003078:	4313      	orrs	r3, r2
 800307a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800307c:	f7ff f95c 	bl	8002338 <HAL_GetTick>
 8003080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003082:	e00a      	b.n	800309a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003084:	f7ff f958 	bl	8002338 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003092:	4293      	cmp	r3, r2
 8003094:	d901      	bls.n	800309a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e04f      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309a:	4b2b      	ldr	r3, [pc, #172]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 020c 	and.w	r2, r3, #12
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d1eb      	bne.n	8003084 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030ac:	4b25      	ldr	r3, [pc, #148]	; (8003144 <HAL_RCC_ClockConfig+0x1b8>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d20c      	bcs.n	80030d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ba:	4b22      	ldr	r3, [pc, #136]	; (8003144 <HAL_RCC_ClockConfig+0x1b8>)
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c2:	4b20      	ldr	r3, [pc, #128]	; (8003144 <HAL_RCC_ClockConfig+0x1b8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d001      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e032      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e0:	4b19      	ldr	r3, [pc, #100]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4916      	ldr	r1, [pc, #88]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030fe:	4b12      	ldr	r3, [pc, #72]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	490e      	ldr	r1, [pc, #56]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	4313      	orrs	r3, r2
 8003110:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003112:	f000 f821 	bl	8003158 <HAL_RCC_GetSysClockFreq>
 8003116:	4602      	mov	r2, r0
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	091b      	lsrs	r3, r3, #4
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	490a      	ldr	r1, [pc, #40]	; (800314c <HAL_RCC_ClockConfig+0x1c0>)
 8003124:	5ccb      	ldrb	r3, [r1, r3]
 8003126:	fa22 f303 	lsr.w	r3, r2, r3
 800312a:	4a09      	ldr	r2, [pc, #36]	; (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800312e:	4b09      	ldr	r3, [pc, #36]	; (8003154 <HAL_RCC_ClockConfig+0x1c8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff f8bc 	bl	80022b0 <HAL_InitTick>

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40023c00 	.word	0x40023c00
 8003148:	40023800 	.word	0x40023800
 800314c:	0800a4a4 	.word	0x0800a4a4
 8003150:	20000000 	.word	0x20000000
 8003154:	20000004 	.word	0x20000004

08003158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003158:	b5b0      	push	{r4, r5, r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800315e:	2100      	movs	r1, #0
 8003160:	6079      	str	r1, [r7, #4]
 8003162:	2100      	movs	r1, #0
 8003164:	60f9      	str	r1, [r7, #12]
 8003166:	2100      	movs	r1, #0
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800316a:	2100      	movs	r1, #0
 800316c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800316e:	4952      	ldr	r1, [pc, #328]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003170:	6889      	ldr	r1, [r1, #8]
 8003172:	f001 010c 	and.w	r1, r1, #12
 8003176:	2908      	cmp	r1, #8
 8003178:	d00d      	beq.n	8003196 <HAL_RCC_GetSysClockFreq+0x3e>
 800317a:	2908      	cmp	r1, #8
 800317c:	f200 8094 	bhi.w	80032a8 <HAL_RCC_GetSysClockFreq+0x150>
 8003180:	2900      	cmp	r1, #0
 8003182:	d002      	beq.n	800318a <HAL_RCC_GetSysClockFreq+0x32>
 8003184:	2904      	cmp	r1, #4
 8003186:	d003      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x38>
 8003188:	e08e      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800318a:	4b4c      	ldr	r3, [pc, #304]	; (80032bc <HAL_RCC_GetSysClockFreq+0x164>)
 800318c:	60bb      	str	r3, [r7, #8]
       break;
 800318e:	e08e      	b.n	80032ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003190:	4b4b      	ldr	r3, [pc, #300]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003192:	60bb      	str	r3, [r7, #8]
      break;
 8003194:	e08b      	b.n	80032ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003196:	4948      	ldr	r1, [pc, #288]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003198:	6849      	ldr	r1, [r1, #4]
 800319a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800319e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031a0:	4945      	ldr	r1, [pc, #276]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80031a2:	6849      	ldr	r1, [r1, #4]
 80031a4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80031a8:	2900      	cmp	r1, #0
 80031aa:	d024      	beq.n	80031f6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ac:	4942      	ldr	r1, [pc, #264]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80031ae:	6849      	ldr	r1, [r1, #4]
 80031b0:	0989      	lsrs	r1, r1, #6
 80031b2:	4608      	mov	r0, r1
 80031b4:	f04f 0100 	mov.w	r1, #0
 80031b8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80031bc:	f04f 0500 	mov.w	r5, #0
 80031c0:	ea00 0204 	and.w	r2, r0, r4
 80031c4:	ea01 0305 	and.w	r3, r1, r5
 80031c8:	493d      	ldr	r1, [pc, #244]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80031ca:	fb01 f003 	mul.w	r0, r1, r3
 80031ce:	2100      	movs	r1, #0
 80031d0:	fb01 f102 	mul.w	r1, r1, r2
 80031d4:	1844      	adds	r4, r0, r1
 80031d6:	493a      	ldr	r1, [pc, #232]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80031d8:	fba2 0101 	umull	r0, r1, r2, r1
 80031dc:	1863      	adds	r3, r4, r1
 80031de:	4619      	mov	r1, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	461a      	mov	r2, r3
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	f7fd fcf6 	bl	8000bd8 <__aeabi_uldivmod>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4613      	mov	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	e04a      	b.n	800328c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f6:	4b30      	ldr	r3, [pc, #192]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	099b      	lsrs	r3, r3, #6
 80031fc:	461a      	mov	r2, r3
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003206:	f04f 0100 	mov.w	r1, #0
 800320a:	ea02 0400 	and.w	r4, r2, r0
 800320e:	ea03 0501 	and.w	r5, r3, r1
 8003212:	4620      	mov	r0, r4
 8003214:	4629      	mov	r1, r5
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	f04f 0300 	mov.w	r3, #0
 800321e:	014b      	lsls	r3, r1, #5
 8003220:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003224:	0142      	lsls	r2, r0, #5
 8003226:	4610      	mov	r0, r2
 8003228:	4619      	mov	r1, r3
 800322a:	1b00      	subs	r0, r0, r4
 800322c:	eb61 0105 	sbc.w	r1, r1, r5
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	018b      	lsls	r3, r1, #6
 800323a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800323e:	0182      	lsls	r2, r0, #6
 8003240:	1a12      	subs	r2, r2, r0
 8003242:	eb63 0301 	sbc.w	r3, r3, r1
 8003246:	f04f 0000 	mov.w	r0, #0
 800324a:	f04f 0100 	mov.w	r1, #0
 800324e:	00d9      	lsls	r1, r3, #3
 8003250:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003254:	00d0      	lsls	r0, r2, #3
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	1912      	adds	r2, r2, r4
 800325c:	eb45 0303 	adc.w	r3, r5, r3
 8003260:	f04f 0000 	mov.w	r0, #0
 8003264:	f04f 0100 	mov.w	r1, #0
 8003268:	0299      	lsls	r1, r3, #10
 800326a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800326e:	0290      	lsls	r0, r2, #10
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	461a      	mov	r2, r3
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	f7fd fcaa 	bl	8000bd8 <__aeabi_uldivmod>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4613      	mov	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800328c:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	0c1b      	lsrs	r3, r3, #16
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	3301      	adds	r3, #1
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a4:	60bb      	str	r3, [r7, #8]
      break;
 80032a6:	e002      	b.n	80032ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032a8:	4b04      	ldr	r3, [pc, #16]	; (80032bc <HAL_RCC_GetSysClockFreq+0x164>)
 80032aa:	60bb      	str	r3, [r7, #8]
      break;
 80032ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ae:	68bb      	ldr	r3, [r7, #8]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bdb0      	pop	{r4, r5, r7, pc}
 80032b8:	40023800 	.word	0x40023800
 80032bc:	00f42400 	.word	0x00f42400
 80032c0:	017d7840 	.word	0x017d7840

080032c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032c8:	4b03      	ldr	r3, [pc, #12]	; (80032d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032ca:	681b      	ldr	r3, [r3, #0]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20000000 	.word	0x20000000

080032dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032e0:	f7ff fff0 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b05      	ldr	r3, [pc, #20]	; (80032fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	0a9b      	lsrs	r3, r3, #10
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	4903      	ldr	r1, [pc, #12]	; (8003300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032f2:	5ccb      	ldrb	r3, [r1, r3]
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40023800 	.word	0x40023800
 8003300:	0800a4b4 	.word	0x0800a4b4

08003304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003308:	f7ff ffdc 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 800330c:	4602      	mov	r2, r0
 800330e:	4b05      	ldr	r3, [pc, #20]	; (8003324 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	0b5b      	lsrs	r3, r3, #13
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	4903      	ldr	r1, [pc, #12]	; (8003328 <HAL_RCC_GetPCLK2Freq+0x24>)
 800331a:	5ccb      	ldrb	r3, [r1, r3]
 800331c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003320:	4618      	mov	r0, r3
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40023800 	.word	0x40023800
 8003328:	0800a4b4 	.word	0x0800a4b4

0800332c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e041      	b.n	80033c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fe fd02 	bl	8001d5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3304      	adds	r3, #4
 8003368:	4619      	mov	r1, r3
 800336a:	4610      	mov	r0, r2
 800336c:	f000 ff8a 	bl	8004284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e041      	b.n	8003460 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d106      	bne.n	80033f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7fe fdbf 	bl	8001f74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2202      	movs	r2, #2
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3304      	adds	r3, #4
 8003406:	4619      	mov	r1, r3
 8003408:	4610      	mov	r0, r2
 800340a:	f000 ff3b 	bl	8004284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d109      	bne.n	800348c <HAL_TIM_PWM_Start+0x24>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	bf14      	ite	ne
 8003484:	2301      	movne	r3, #1
 8003486:	2300      	moveq	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	e022      	b.n	80034d2 <HAL_TIM_PWM_Start+0x6a>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2b04      	cmp	r3, #4
 8003490:	d109      	bne.n	80034a6 <HAL_TIM_PWM_Start+0x3e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	bf14      	ite	ne
 800349e:	2301      	movne	r3, #1
 80034a0:	2300      	moveq	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	e015      	b.n	80034d2 <HAL_TIM_PWM_Start+0x6a>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d109      	bne.n	80034c0 <HAL_TIM_PWM_Start+0x58>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	bf14      	ite	ne
 80034b8:	2301      	movne	r3, #1
 80034ba:	2300      	moveq	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	e008      	b.n	80034d2 <HAL_TIM_PWM_Start+0x6a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	bf14      	ite	ne
 80034cc:	2301      	movne	r3, #1
 80034ce:	2300      	moveq	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e07c      	b.n	80035d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d104      	bne.n	80034ea <HAL_TIM_PWM_Start+0x82>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034e8:	e013      	b.n	8003512 <HAL_TIM_PWM_Start+0xaa>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d104      	bne.n	80034fa <HAL_TIM_PWM_Start+0x92>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034f8:	e00b      	b.n	8003512 <HAL_TIM_PWM_Start+0xaa>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d104      	bne.n	800350a <HAL_TIM_PWM_Start+0xa2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003508:	e003      	b.n	8003512 <HAL_TIM_PWM_Start+0xaa>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2201      	movs	r2, #1
 8003518:	6839      	ldr	r1, [r7, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f001 fac6 	bl	8004aac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a2d      	ldr	r2, [pc, #180]	; (80035dc <HAL_TIM_PWM_Start+0x174>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <HAL_TIM_PWM_Start+0xcc>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a2c      	ldr	r2, [pc, #176]	; (80035e0 <HAL_TIM_PWM_Start+0x178>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d101      	bne.n	8003538 <HAL_TIM_PWM_Start+0xd0>
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <HAL_TIM_PWM_Start+0xd2>
 8003538:	2300      	movs	r3, #0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d007      	beq.n	800354e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800354c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a22      	ldr	r2, [pc, #136]	; (80035dc <HAL_TIM_PWM_Start+0x174>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d022      	beq.n	800359e <HAL_TIM_PWM_Start+0x136>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003560:	d01d      	beq.n	800359e <HAL_TIM_PWM_Start+0x136>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1f      	ldr	r2, [pc, #124]	; (80035e4 <HAL_TIM_PWM_Start+0x17c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d018      	beq.n	800359e <HAL_TIM_PWM_Start+0x136>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a1d      	ldr	r2, [pc, #116]	; (80035e8 <HAL_TIM_PWM_Start+0x180>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d013      	beq.n	800359e <HAL_TIM_PWM_Start+0x136>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a1c      	ldr	r2, [pc, #112]	; (80035ec <HAL_TIM_PWM_Start+0x184>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d00e      	beq.n	800359e <HAL_TIM_PWM_Start+0x136>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a16      	ldr	r2, [pc, #88]	; (80035e0 <HAL_TIM_PWM_Start+0x178>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d009      	beq.n	800359e <HAL_TIM_PWM_Start+0x136>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a18      	ldr	r2, [pc, #96]	; (80035f0 <HAL_TIM_PWM_Start+0x188>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d004      	beq.n	800359e <HAL_TIM_PWM_Start+0x136>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a16      	ldr	r2, [pc, #88]	; (80035f4 <HAL_TIM_PWM_Start+0x18c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d111      	bne.n	80035c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2b06      	cmp	r3, #6
 80035ae:	d010      	beq.n	80035d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c0:	e007      	b.n	80035d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0201 	orr.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40010000 	.word	0x40010000
 80035e0:	40010400 	.word	0x40010400
 80035e4:	40000400 	.word	0x40000400
 80035e8:	40000800 	.word	0x40000800
 80035ec:	40000c00 	.word	0x40000c00
 80035f0:	40014000 	.word	0x40014000
 80035f4:	40001800 	.word	0x40001800

080035f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e041      	b.n	800368e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fe fc58 	bl	8001ed4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3304      	adds	r3, #4
 8003634:	4619      	mov	r1, r3
 8003636:	4610      	mov	r0, r2
 8003638:	f000 fe24 	bl	8004284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d104      	bne.n	80036b6 <HAL_TIM_IC_Start_IT+0x1e>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	e013      	b.n	80036de <HAL_TIM_IC_Start_IT+0x46>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d104      	bne.n	80036c6 <HAL_TIM_IC_Start_IT+0x2e>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	e00b      	b.n	80036de <HAL_TIM_IC_Start_IT+0x46>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d104      	bne.n	80036d6 <HAL_TIM_IC_Start_IT+0x3e>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	e003      	b.n	80036de <HAL_TIM_IC_Start_IT+0x46>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d104      	bne.n	80036f0 <HAL_TIM_IC_Start_IT+0x58>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	e013      	b.n	8003718 <HAL_TIM_IC_Start_IT+0x80>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d104      	bne.n	8003700 <HAL_TIM_IC_Start_IT+0x68>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	e00b      	b.n	8003718 <HAL_TIM_IC_Start_IT+0x80>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b08      	cmp	r3, #8
 8003704:	d104      	bne.n	8003710 <HAL_TIM_IC_Start_IT+0x78>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800370c:	b2db      	uxtb	r3, r3
 800370e:	e003      	b.n	8003718 <HAL_TIM_IC_Start_IT+0x80>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003716:	b2db      	uxtb	r3, r3
 8003718:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800371a:	7bbb      	ldrb	r3, [r7, #14]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d102      	bne.n	8003726 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003720:	7b7b      	ldrb	r3, [r7, #13]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d001      	beq.n	800372a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e0cc      	b.n	80038c4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d104      	bne.n	800373a <HAL_TIM_IC_Start_IT+0xa2>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003738:	e013      	b.n	8003762 <HAL_TIM_IC_Start_IT+0xca>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b04      	cmp	r3, #4
 800373e:	d104      	bne.n	800374a <HAL_TIM_IC_Start_IT+0xb2>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003748:	e00b      	b.n	8003762 <HAL_TIM_IC_Start_IT+0xca>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b08      	cmp	r3, #8
 800374e:	d104      	bne.n	800375a <HAL_TIM_IC_Start_IT+0xc2>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003758:	e003      	b.n	8003762 <HAL_TIM_IC_Start_IT+0xca>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2202      	movs	r2, #2
 800375e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d104      	bne.n	8003772 <HAL_TIM_IC_Start_IT+0xda>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003770:	e013      	b.n	800379a <HAL_TIM_IC_Start_IT+0x102>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b04      	cmp	r3, #4
 8003776:	d104      	bne.n	8003782 <HAL_TIM_IC_Start_IT+0xea>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003780:	e00b      	b.n	800379a <HAL_TIM_IC_Start_IT+0x102>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b08      	cmp	r3, #8
 8003786:	d104      	bne.n	8003792 <HAL_TIM_IC_Start_IT+0xfa>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003790:	e003      	b.n	800379a <HAL_TIM_IC_Start_IT+0x102>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2202      	movs	r2, #2
 8003796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b0c      	cmp	r3, #12
 800379e:	d841      	bhi.n	8003824 <HAL_TIM_IC_Start_IT+0x18c>
 80037a0:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <HAL_TIM_IC_Start_IT+0x110>)
 80037a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a6:	bf00      	nop
 80037a8:	080037dd 	.word	0x080037dd
 80037ac:	08003825 	.word	0x08003825
 80037b0:	08003825 	.word	0x08003825
 80037b4:	08003825 	.word	0x08003825
 80037b8:	080037ef 	.word	0x080037ef
 80037bc:	08003825 	.word	0x08003825
 80037c0:	08003825 	.word	0x08003825
 80037c4:	08003825 	.word	0x08003825
 80037c8:	08003801 	.word	0x08003801
 80037cc:	08003825 	.word	0x08003825
 80037d0:	08003825 	.word	0x08003825
 80037d4:	08003825 	.word	0x08003825
 80037d8:	08003813 	.word	0x08003813
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0202 	orr.w	r2, r2, #2
 80037ea:	60da      	str	r2, [r3, #12]
      break;
 80037ec:	e01d      	b.n	800382a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0204 	orr.w	r2, r2, #4
 80037fc:	60da      	str	r2, [r3, #12]
      break;
 80037fe:	e014      	b.n	800382a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0208 	orr.w	r2, r2, #8
 800380e:	60da      	str	r2, [r3, #12]
      break;
 8003810:	e00b      	b.n	800382a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0210 	orr.w	r2, r2, #16
 8003820:	60da      	str	r2, [r3, #12]
      break;
 8003822:	e002      	b.n	800382a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	73fb      	strb	r3, [r7, #15]
      break;
 8003828:	bf00      	nop
  }

  if (status == HAL_OK)
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d148      	bne.n	80038c2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2201      	movs	r2, #1
 8003836:	6839      	ldr	r1, [r7, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f001 f937 	bl	8004aac <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a22      	ldr	r2, [pc, #136]	; (80038cc <HAL_TIM_IC_Start_IT+0x234>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d022      	beq.n	800388e <HAL_TIM_IC_Start_IT+0x1f6>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003850:	d01d      	beq.n	800388e <HAL_TIM_IC_Start_IT+0x1f6>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1e      	ldr	r2, [pc, #120]	; (80038d0 <HAL_TIM_IC_Start_IT+0x238>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d018      	beq.n	800388e <HAL_TIM_IC_Start_IT+0x1f6>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1c      	ldr	r2, [pc, #112]	; (80038d4 <HAL_TIM_IC_Start_IT+0x23c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d013      	beq.n	800388e <HAL_TIM_IC_Start_IT+0x1f6>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a1b      	ldr	r2, [pc, #108]	; (80038d8 <HAL_TIM_IC_Start_IT+0x240>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00e      	beq.n	800388e <HAL_TIM_IC_Start_IT+0x1f6>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a19      	ldr	r2, [pc, #100]	; (80038dc <HAL_TIM_IC_Start_IT+0x244>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d009      	beq.n	800388e <HAL_TIM_IC_Start_IT+0x1f6>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a18      	ldr	r2, [pc, #96]	; (80038e0 <HAL_TIM_IC_Start_IT+0x248>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d004      	beq.n	800388e <HAL_TIM_IC_Start_IT+0x1f6>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a16      	ldr	r2, [pc, #88]	; (80038e4 <HAL_TIM_IC_Start_IT+0x24c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d111      	bne.n	80038b2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2b06      	cmp	r3, #6
 800389e:	d010      	beq.n	80038c2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b0:	e007      	b.n	80038c2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f042 0201 	orr.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40010000 	.word	0x40010000
 80038d0:	40000400 	.word	0x40000400
 80038d4:	40000800 	.word	0x40000800
 80038d8:	40000c00 	.word	0x40000c00
 80038dc:	40010400 	.word	0x40010400
 80038e0:	40014000 	.word	0x40014000
 80038e4:	40001800 	.word	0x40001800

080038e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e097      	b.n	8003a2c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d106      	bne.n	8003916 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7fe fa45 	bl	8001da0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2202      	movs	r2, #2
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800392c:	f023 0307 	bic.w	r3, r3, #7
 8003930:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3304      	adds	r3, #4
 800393a:	4619      	mov	r1, r3
 800393c:	4610      	mov	r0, r2
 800393e:	f000 fca1 	bl	8004284 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800396a:	f023 0303 	bic.w	r3, r3, #3
 800396e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	021b      	lsls	r3, r3, #8
 800397a:	4313      	orrs	r3, r2
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003988:	f023 030c 	bic.w	r3, r3, #12
 800398c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003994:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003998:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	021b      	lsls	r3, r3, #8
 80039a4:	4313      	orrs	r3, r2
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	011a      	lsls	r2, r3, #4
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	031b      	lsls	r3, r3, #12
 80039b8:	4313      	orrs	r3, r2
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80039c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80039ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	4313      	orrs	r3, r2
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a44:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a4c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a54:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a5c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d110      	bne.n	8003a86 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d102      	bne.n	8003a70 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a6a:	7b7b      	ldrb	r3, [r7, #13]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d001      	beq.n	8003a74 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e069      	b.n	8003b48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a84:	e031      	b.n	8003aea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d110      	bne.n	8003aae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a8c:	7bbb      	ldrb	r3, [r7, #14]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d102      	bne.n	8003a98 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a92:	7b3b      	ldrb	r3, [r7, #12]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d001      	beq.n	8003a9c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e055      	b.n	8003b48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003aac:	e01d      	b.n	8003aea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d108      	bne.n	8003ac6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ab4:	7bbb      	ldrb	r3, [r7, #14]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d105      	bne.n	8003ac6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003aba:	7b7b      	ldrb	r3, [r7, #13]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d102      	bne.n	8003ac6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ac0:	7b3b      	ldrb	r3, [r7, #12]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d001      	beq.n	8003aca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e03e      	b.n	8003b48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2202      	movs	r2, #2
 8003ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2202      	movs	r2, #2
 8003ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_TIM_Encoder_Start+0xc4>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d008      	beq.n	8003b08 <HAL_TIM_Encoder_Start+0xd4>
 8003af6:	e00f      	b.n	8003b18 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2201      	movs	r2, #1
 8003afe:	2100      	movs	r1, #0
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 ffd3 	bl	8004aac <TIM_CCxChannelCmd>
      break;
 8003b06:	e016      	b.n	8003b36 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	2104      	movs	r1, #4
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 ffcb 	bl	8004aac <TIM_CCxChannelCmd>
      break;
 8003b16:	e00e      	b.n	8003b36 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	2100      	movs	r1, #0
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 ffc3 	bl	8004aac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	2104      	movs	r1, #4
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 ffbc 	bl	8004aac <TIM_CCxChannelCmd>
      break;
 8003b34:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f042 0201 	orr.w	r2, r2, #1
 8003b44:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d122      	bne.n	8003bac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d11b      	bne.n	8003bac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f06f 0202 	mvn.w	r2, #2
 8003b7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fd f99c 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 8003b98:	e005      	b.n	8003ba6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fb54 	bl	8004248 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 fb5b 	bl	800425c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d122      	bne.n	8003c00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d11b      	bne.n	8003c00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f06f 0204 	mvn.w	r2, #4
 8003bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7fd f972 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 8003bec:	e005      	b.n	8003bfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fb2a 	bl	8004248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 fb31 	bl	800425c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d122      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d11b      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0208 	mvn.w	r2, #8
 8003c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2204      	movs	r2, #4
 8003c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd f948 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 8003c40:	e005      	b.n	8003c4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fb00 	bl	8004248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fb07 	bl	800425c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	f003 0310 	and.w	r3, r3, #16
 8003c5e:	2b10      	cmp	r3, #16
 8003c60:	d122      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b10      	cmp	r3, #16
 8003c6e:	d11b      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f06f 0210 	mvn.w	r2, #16
 8003c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2208      	movs	r2, #8
 8003c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fd f91e 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 8003c94:	e005      	b.n	8003ca2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 fad6 	bl	8004248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fadd 	bl	800425c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d10e      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d107      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f06f 0201 	mvn.w	r2, #1
 8003ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fab0 	bl	8004234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cde:	2b80      	cmp	r3, #128	; 0x80
 8003ce0:	d10e      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cec:	2b80      	cmp	r3, #128	; 0x80
 8003cee:	d107      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 ffd4 	bl	8004ca8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0a:	2b40      	cmp	r3, #64	; 0x40
 8003d0c:	d10e      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d18:	2b40      	cmp	r3, #64	; 0x40
 8003d1a:	d107      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 faa2 	bl	8004270 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d10e      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	d107      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0220 	mvn.w	r2, #32
 8003d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 ff9e 	bl	8004c94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_TIM_IC_ConfigChannel+0x1e>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e088      	b.n	8003e90 <HAL_TIM_IC_ConfigChannel+0x130>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d11b      	bne.n	8003dc4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	6819      	ldr	r1, [r3, #0]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f000 fcc2 	bl	8004724 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 020c 	bic.w	r2, r2, #12
 8003dae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6999      	ldr	r1, [r3, #24]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	619a      	str	r2, [r3, #24]
 8003dc2:	e060      	b.n	8003e86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d11c      	bne.n	8003e04 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	6819      	ldr	r1, [r3, #0]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f000 fd46 	bl	800486a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	699a      	ldr	r2, [r3, #24]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003dec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6999      	ldr	r1, [r3, #24]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	021a      	lsls	r2, r3, #8
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	619a      	str	r2, [r3, #24]
 8003e02:	e040      	b.n	8003e86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d11b      	bne.n	8003e42 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	6819      	ldr	r1, [r3, #0]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f000 fd93 	bl	8004944 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69da      	ldr	r2, [r3, #28]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 020c 	bic.w	r2, r2, #12
 8003e2c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	69d9      	ldr	r1, [r3, #28]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	61da      	str	r2, [r3, #28]
 8003e40:	e021      	b.n	8003e86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b0c      	cmp	r3, #12
 8003e46:	d11c      	bne.n	8003e82 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	6819      	ldr	r1, [r3, #0]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f000 fdb0 	bl	80049bc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	69da      	ldr	r2, [r3, #28]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003e6a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69d9      	ldr	r1, [r3, #28]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	021a      	lsls	r2, r3, #8
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	61da      	str	r2, [r3, #28]
 8003e80:	e001      	b.n	8003e86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	e0ae      	b.n	8004014 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b0c      	cmp	r3, #12
 8003ec2:	f200 809f 	bhi.w	8004004 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ec6:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ecc:	08003f01 	.word	0x08003f01
 8003ed0:	08004005 	.word	0x08004005
 8003ed4:	08004005 	.word	0x08004005
 8003ed8:	08004005 	.word	0x08004005
 8003edc:	08003f41 	.word	0x08003f41
 8003ee0:	08004005 	.word	0x08004005
 8003ee4:	08004005 	.word	0x08004005
 8003ee8:	08004005 	.word	0x08004005
 8003eec:	08003f83 	.word	0x08003f83
 8003ef0:	08004005 	.word	0x08004005
 8003ef4:	08004005 	.word	0x08004005
 8003ef8:	08004005 	.word	0x08004005
 8003efc:	08003fc3 	.word	0x08003fc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68b9      	ldr	r1, [r7, #8]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 fa5c 	bl	80043c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699a      	ldr	r2, [r3, #24]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0208 	orr.w	r2, r2, #8
 8003f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	699a      	ldr	r2, [r3, #24]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0204 	bic.w	r2, r2, #4
 8003f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6999      	ldr	r1, [r3, #24]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	691a      	ldr	r2, [r3, #16]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	619a      	str	r2, [r3, #24]
      break;
 8003f3e:	e064      	b.n	800400a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 faac 	bl	80044a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699a      	ldr	r2, [r3, #24]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699a      	ldr	r2, [r3, #24]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6999      	ldr	r1, [r3, #24]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	021a      	lsls	r2, r3, #8
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	619a      	str	r2, [r3, #24]
      break;
 8003f80:	e043      	b.n	800400a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68b9      	ldr	r1, [r7, #8]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 fb01 	bl	8004590 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69da      	ldr	r2, [r3, #28]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0208 	orr.w	r2, r2, #8
 8003f9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	69da      	ldr	r2, [r3, #28]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0204 	bic.w	r2, r2, #4
 8003fac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	69d9      	ldr	r1, [r3, #28]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	61da      	str	r2, [r3, #28]
      break;
 8003fc0:	e023      	b.n	800400a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68b9      	ldr	r1, [r7, #8]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fb55 	bl	8004678 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	69da      	ldr	r2, [r3, #28]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	69da      	ldr	r2, [r3, #28]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	69d9      	ldr	r1, [r3, #28]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	021a      	lsls	r2, r3, #8
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	61da      	str	r2, [r3, #28]
      break;
 8004002:	e002      	b.n	800400a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	75fb      	strb	r3, [r7, #23]
      break;
 8004008:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004012:	7dfb      	ldrb	r3, [r7, #23]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_TIM_ConfigClockSource+0x1c>
 8004034:	2302      	movs	r3, #2
 8004036:	e0b4      	b.n	80041a2 <HAL_TIM_ConfigClockSource+0x186>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800405e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004070:	d03e      	beq.n	80040f0 <HAL_TIM_ConfigClockSource+0xd4>
 8004072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004076:	f200 8087 	bhi.w	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 800407a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407e:	f000 8086 	beq.w	800418e <HAL_TIM_ConfigClockSource+0x172>
 8004082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004086:	d87f      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 8004088:	2b70      	cmp	r3, #112	; 0x70
 800408a:	d01a      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0xa6>
 800408c:	2b70      	cmp	r3, #112	; 0x70
 800408e:	d87b      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 8004090:	2b60      	cmp	r3, #96	; 0x60
 8004092:	d050      	beq.n	8004136 <HAL_TIM_ConfigClockSource+0x11a>
 8004094:	2b60      	cmp	r3, #96	; 0x60
 8004096:	d877      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 8004098:	2b50      	cmp	r3, #80	; 0x50
 800409a:	d03c      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0xfa>
 800409c:	2b50      	cmp	r3, #80	; 0x50
 800409e:	d873      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 80040a0:	2b40      	cmp	r3, #64	; 0x40
 80040a2:	d058      	beq.n	8004156 <HAL_TIM_ConfigClockSource+0x13a>
 80040a4:	2b40      	cmp	r3, #64	; 0x40
 80040a6:	d86f      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 80040a8:	2b30      	cmp	r3, #48	; 0x30
 80040aa:	d064      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x15a>
 80040ac:	2b30      	cmp	r3, #48	; 0x30
 80040ae:	d86b      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	d060      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x15a>
 80040b4:	2b20      	cmp	r3, #32
 80040b6:	d867      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d05c      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x15a>
 80040bc:	2b10      	cmp	r3, #16
 80040be:	d05a      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x15a>
 80040c0:	e062      	b.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	6899      	ldr	r1, [r3, #8]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f000 fccb 	bl	8004a6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	609a      	str	r2, [r3, #8]
      break;
 80040ee:	e04f      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6818      	ldr	r0, [r3, #0]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	6899      	ldr	r1, [r3, #8]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f000 fcb4 	bl	8004a6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004112:	609a      	str	r2, [r3, #8]
      break;
 8004114:	e03c      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	6859      	ldr	r1, [r3, #4]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	461a      	mov	r2, r3
 8004124:	f000 fb72 	bl	800480c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2150      	movs	r1, #80	; 0x50
 800412e:	4618      	mov	r0, r3
 8004130:	f000 fc81 	bl	8004a36 <TIM_ITRx_SetConfig>
      break;
 8004134:	e02c      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	6859      	ldr	r1, [r3, #4]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	461a      	mov	r2, r3
 8004144:	f000 fbce 	bl	80048e4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2160      	movs	r1, #96	; 0x60
 800414e:	4618      	mov	r0, r3
 8004150:	f000 fc71 	bl	8004a36 <TIM_ITRx_SetConfig>
      break;
 8004154:	e01c      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6818      	ldr	r0, [r3, #0]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	6859      	ldr	r1, [r3, #4]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	461a      	mov	r2, r3
 8004164:	f000 fb52 	bl	800480c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2140      	movs	r1, #64	; 0x40
 800416e:	4618      	mov	r0, r3
 8004170:	f000 fc61 	bl	8004a36 <TIM_ITRx_SetConfig>
      break;
 8004174:	e00c      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4619      	mov	r1, r3
 8004180:	4610      	mov	r0, r2
 8004182:	f000 fc58 	bl	8004a36 <TIM_ITRx_SetConfig>
      break;
 8004186:	e003      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	73fb      	strb	r3, [r7, #15]
      break;
 800418c:	e000      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800418e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b0c      	cmp	r3, #12
 80041be:	d831      	bhi.n	8004224 <HAL_TIM_ReadCapturedValue+0x78>
 80041c0:	a201      	add	r2, pc, #4	; (adr r2, 80041c8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80041c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c6:	bf00      	nop
 80041c8:	080041fd 	.word	0x080041fd
 80041cc:	08004225 	.word	0x08004225
 80041d0:	08004225 	.word	0x08004225
 80041d4:	08004225 	.word	0x08004225
 80041d8:	08004207 	.word	0x08004207
 80041dc:	08004225 	.word	0x08004225
 80041e0:	08004225 	.word	0x08004225
 80041e4:	08004225 	.word	0x08004225
 80041e8:	08004211 	.word	0x08004211
 80041ec:	08004225 	.word	0x08004225
 80041f0:	08004225 	.word	0x08004225
 80041f4:	08004225 	.word	0x08004225
 80041f8:	0800421b 	.word	0x0800421b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004202:	60fb      	str	r3, [r7, #12]

      break;
 8004204:	e00f      	b.n	8004226 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420c:	60fb      	str	r3, [r7, #12]

      break;
 800420e:	e00a      	b.n	8004226 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004216:	60fb      	str	r3, [r7, #12]

      break;
 8004218:	e005      	b.n	8004226 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	60fb      	str	r3, [r7, #12]

      break;
 8004222:	e000      	b.n	8004226 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004224:	bf00      	nop
  }

  return tmpreg;
 8004226:	68fb      	ldr	r3, [r7, #12]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a40      	ldr	r2, [pc, #256]	; (8004398 <TIM_Base_SetConfig+0x114>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d013      	beq.n	80042c4 <TIM_Base_SetConfig+0x40>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a2:	d00f      	beq.n	80042c4 <TIM_Base_SetConfig+0x40>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a3d      	ldr	r2, [pc, #244]	; (800439c <TIM_Base_SetConfig+0x118>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d00b      	beq.n	80042c4 <TIM_Base_SetConfig+0x40>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a3c      	ldr	r2, [pc, #240]	; (80043a0 <TIM_Base_SetConfig+0x11c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d007      	beq.n	80042c4 <TIM_Base_SetConfig+0x40>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a3b      	ldr	r2, [pc, #236]	; (80043a4 <TIM_Base_SetConfig+0x120>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d003      	beq.n	80042c4 <TIM_Base_SetConfig+0x40>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a3a      	ldr	r2, [pc, #232]	; (80043a8 <TIM_Base_SetConfig+0x124>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d108      	bne.n	80042d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a2f      	ldr	r2, [pc, #188]	; (8004398 <TIM_Base_SetConfig+0x114>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d02b      	beq.n	8004336 <TIM_Base_SetConfig+0xb2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e4:	d027      	beq.n	8004336 <TIM_Base_SetConfig+0xb2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a2c      	ldr	r2, [pc, #176]	; (800439c <TIM_Base_SetConfig+0x118>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d023      	beq.n	8004336 <TIM_Base_SetConfig+0xb2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a2b      	ldr	r2, [pc, #172]	; (80043a0 <TIM_Base_SetConfig+0x11c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d01f      	beq.n	8004336 <TIM_Base_SetConfig+0xb2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a2a      	ldr	r2, [pc, #168]	; (80043a4 <TIM_Base_SetConfig+0x120>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d01b      	beq.n	8004336 <TIM_Base_SetConfig+0xb2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a29      	ldr	r2, [pc, #164]	; (80043a8 <TIM_Base_SetConfig+0x124>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d017      	beq.n	8004336 <TIM_Base_SetConfig+0xb2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a28      	ldr	r2, [pc, #160]	; (80043ac <TIM_Base_SetConfig+0x128>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d013      	beq.n	8004336 <TIM_Base_SetConfig+0xb2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a27      	ldr	r2, [pc, #156]	; (80043b0 <TIM_Base_SetConfig+0x12c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00f      	beq.n	8004336 <TIM_Base_SetConfig+0xb2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a26      	ldr	r2, [pc, #152]	; (80043b4 <TIM_Base_SetConfig+0x130>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00b      	beq.n	8004336 <TIM_Base_SetConfig+0xb2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a25      	ldr	r2, [pc, #148]	; (80043b8 <TIM_Base_SetConfig+0x134>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d007      	beq.n	8004336 <TIM_Base_SetConfig+0xb2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a24      	ldr	r2, [pc, #144]	; (80043bc <TIM_Base_SetConfig+0x138>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d003      	beq.n	8004336 <TIM_Base_SetConfig+0xb2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a23      	ldr	r2, [pc, #140]	; (80043c0 <TIM_Base_SetConfig+0x13c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d108      	bne.n	8004348 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800433c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4313      	orrs	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	4313      	orrs	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a0a      	ldr	r2, [pc, #40]	; (8004398 <TIM_Base_SetConfig+0x114>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d003      	beq.n	800437c <TIM_Base_SetConfig+0xf8>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a0c      	ldr	r2, [pc, #48]	; (80043a8 <TIM_Base_SetConfig+0x124>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d103      	bne.n	8004384 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	615a      	str	r2, [r3, #20]
}
 800438a:	bf00      	nop
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40010000 	.word	0x40010000
 800439c:	40000400 	.word	0x40000400
 80043a0:	40000800 	.word	0x40000800
 80043a4:	40000c00 	.word	0x40000c00
 80043a8:	40010400 	.word	0x40010400
 80043ac:	40014000 	.word	0x40014000
 80043b0:	40014400 	.word	0x40014400
 80043b4:	40014800 	.word	0x40014800
 80043b8:	40001800 	.word	0x40001800
 80043bc:	40001c00 	.word	0x40001c00
 80043c0:	40002000 	.word	0x40002000

080043c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f023 0201 	bic.w	r2, r3, #1
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 0303 	bic.w	r3, r3, #3
 80043fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f023 0302 	bic.w	r3, r3, #2
 800440c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	4313      	orrs	r3, r2
 8004416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a20      	ldr	r2, [pc, #128]	; (800449c <TIM_OC1_SetConfig+0xd8>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d003      	beq.n	8004428 <TIM_OC1_SetConfig+0x64>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a1f      	ldr	r2, [pc, #124]	; (80044a0 <TIM_OC1_SetConfig+0xdc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d10c      	bne.n	8004442 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f023 0308 	bic.w	r3, r3, #8
 800442e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f023 0304 	bic.w	r3, r3, #4
 8004440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a15      	ldr	r2, [pc, #84]	; (800449c <TIM_OC1_SetConfig+0xd8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d003      	beq.n	8004452 <TIM_OC1_SetConfig+0x8e>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a14      	ldr	r2, [pc, #80]	; (80044a0 <TIM_OC1_SetConfig+0xdc>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d111      	bne.n	8004476 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	621a      	str	r2, [r3, #32]
}
 8004490:	bf00      	nop
 8004492:	371c      	adds	r7, #28
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	40010000 	.word	0x40010000
 80044a0:	40010400 	.word	0x40010400

080044a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	f023 0210 	bic.w	r2, r3, #16
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	021b      	lsls	r3, r3, #8
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f023 0320 	bic.w	r3, r3, #32
 80044ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a22      	ldr	r2, [pc, #136]	; (8004588 <TIM_OC2_SetConfig+0xe4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d003      	beq.n	800450c <TIM_OC2_SetConfig+0x68>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a21      	ldr	r2, [pc, #132]	; (800458c <TIM_OC2_SetConfig+0xe8>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d10d      	bne.n	8004528 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4313      	orrs	r3, r2
 800451e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004526:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a17      	ldr	r2, [pc, #92]	; (8004588 <TIM_OC2_SetConfig+0xe4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d003      	beq.n	8004538 <TIM_OC2_SetConfig+0x94>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a16      	ldr	r2, [pc, #88]	; (800458c <TIM_OC2_SetConfig+0xe8>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d113      	bne.n	8004560 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800453e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004546:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	621a      	str	r2, [r3, #32]
}
 800457a:	bf00      	nop
 800457c:	371c      	adds	r7, #28
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40010000 	.word	0x40010000
 800458c:	40010400 	.word	0x40010400

08004590 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f023 0303 	bic.w	r3, r3, #3
 80045c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	021b      	lsls	r3, r3, #8
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a21      	ldr	r2, [pc, #132]	; (8004670 <TIM_OC3_SetConfig+0xe0>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d003      	beq.n	80045f6 <TIM_OC3_SetConfig+0x66>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a20      	ldr	r2, [pc, #128]	; (8004674 <TIM_OC3_SetConfig+0xe4>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d10d      	bne.n	8004612 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	021b      	lsls	r3, r3, #8
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	4313      	orrs	r3, r2
 8004608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a16      	ldr	r2, [pc, #88]	; (8004670 <TIM_OC3_SetConfig+0xe0>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d003      	beq.n	8004622 <TIM_OC3_SetConfig+0x92>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a15      	ldr	r2, [pc, #84]	; (8004674 <TIM_OC3_SetConfig+0xe4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d113      	bne.n	800464a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004628:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004630:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	011b      	lsls	r3, r3, #4
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4313      	orrs	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	621a      	str	r2, [r3, #32]
}
 8004664:	bf00      	nop
 8004666:	371c      	adds	r7, #28
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	40010000 	.word	0x40010000
 8004674:	40010400 	.word	0x40010400

08004678 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	021b      	lsls	r3, r3, #8
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	031b      	lsls	r3, r3, #12
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a12      	ldr	r2, [pc, #72]	; (800471c <TIM_OC4_SetConfig+0xa4>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d003      	beq.n	80046e0 <TIM_OC4_SetConfig+0x68>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a11      	ldr	r2, [pc, #68]	; (8004720 <TIM_OC4_SetConfig+0xa8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d109      	bne.n	80046f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	019b      	lsls	r3, r3, #6
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	621a      	str	r2, [r3, #32]
}
 800470e:	bf00      	nop
 8004710:	371c      	adds	r7, #28
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40010000 	.word	0x40010000
 8004720:	40010400 	.word	0x40010400

08004724 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	f023 0201 	bic.w	r2, r3, #1
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4a28      	ldr	r2, [pc, #160]	; (80047f0 <TIM_TI1_SetConfig+0xcc>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d01b      	beq.n	800478a <TIM_TI1_SetConfig+0x66>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004758:	d017      	beq.n	800478a <TIM_TI1_SetConfig+0x66>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4a25      	ldr	r2, [pc, #148]	; (80047f4 <TIM_TI1_SetConfig+0xd0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d013      	beq.n	800478a <TIM_TI1_SetConfig+0x66>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4a24      	ldr	r2, [pc, #144]	; (80047f8 <TIM_TI1_SetConfig+0xd4>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00f      	beq.n	800478a <TIM_TI1_SetConfig+0x66>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4a23      	ldr	r2, [pc, #140]	; (80047fc <TIM_TI1_SetConfig+0xd8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00b      	beq.n	800478a <TIM_TI1_SetConfig+0x66>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4a22      	ldr	r2, [pc, #136]	; (8004800 <TIM_TI1_SetConfig+0xdc>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d007      	beq.n	800478a <TIM_TI1_SetConfig+0x66>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4a21      	ldr	r2, [pc, #132]	; (8004804 <TIM_TI1_SetConfig+0xe0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d003      	beq.n	800478a <TIM_TI1_SetConfig+0x66>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4a20      	ldr	r2, [pc, #128]	; (8004808 <TIM_TI1_SetConfig+0xe4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d101      	bne.n	800478e <TIM_TI1_SetConfig+0x6a>
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <TIM_TI1_SetConfig+0x6c>
 800478e:	2300      	movs	r3, #0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d008      	beq.n	80047a6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f023 0303 	bic.w	r3, r3, #3
 800479a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	e003      	b.n	80047ae <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f043 0301 	orr.w	r3, r3, #1
 80047ac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	4313      	orrs	r3, r2
 80047c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f023 030a 	bic.w	r3, r3, #10
 80047c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	f003 030a 	and.w	r3, r3, #10
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	621a      	str	r2, [r3, #32]
}
 80047e2:	bf00      	nop
 80047e4:	371c      	adds	r7, #28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40010000 	.word	0x40010000
 80047f4:	40000400 	.word	0x40000400
 80047f8:	40000800 	.word	0x40000800
 80047fc:	40000c00 	.word	0x40000c00
 8004800:	40010400 	.word	0x40010400
 8004804:	40014000 	.word	0x40014000
 8004808:	40001800 	.word	0x40001800

0800480c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	f023 0201 	bic.w	r2, r3, #1
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f023 030a 	bic.w	r3, r3, #10
 8004848:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4313      	orrs	r3, r2
 8004850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	621a      	str	r2, [r3, #32]
}
 800485e:	bf00      	nop
 8004860:	371c      	adds	r7, #28
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800486a:	b480      	push	{r7}
 800486c:	b087      	sub	sp, #28
 800486e:	af00      	add	r7, sp, #0
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	60b9      	str	r1, [r7, #8]
 8004874:	607a      	str	r2, [r7, #4]
 8004876:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	f023 0210 	bic.w	r2, r3, #16
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004896:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	021b      	lsls	r3, r3, #8
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	4313      	orrs	r3, r2
 80048a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	031b      	lsls	r3, r3, #12
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	621a      	str	r2, [r3, #32]
}
 80048d8:	bf00      	nop
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	f023 0210 	bic.w	r2, r3, #16
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800490e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	031b      	lsls	r3, r3, #12
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	4313      	orrs	r3, r2
 8004918:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004920:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	621a      	str	r2, [r3, #32]
}
 8004938:	bf00      	nop
 800493a:	371c      	adds	r7, #28
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f023 0303 	bic.w	r3, r3, #3
 8004970:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4313      	orrs	r3, r2
 8004978:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004980:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	b2db      	uxtb	r3, r3
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	4313      	orrs	r3, r2
 800498c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004994:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	021b      	lsls	r3, r3, #8
 800499a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	621a      	str	r2, [r3, #32]
}
 80049b0:	bf00      	nop
 80049b2:	371c      	adds	r7, #28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	021b      	lsls	r3, r3, #8
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	031b      	lsls	r3, r3, #12
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004a0e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	031b      	lsls	r3, r3, #12
 8004a14:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	621a      	str	r2, [r3, #32]
}
 8004a2a:	bf00      	nop
 8004a2c:	371c      	adds	r7, #28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b085      	sub	sp, #20
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f043 0307 	orr.w	r3, r3, #7
 8004a58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	609a      	str	r2, [r3, #8]
}
 8004a60:	bf00      	nop
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	021a      	lsls	r2, r3, #8
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	609a      	str	r2, [r3, #8]
}
 8004aa0:	bf00      	nop
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f003 031f 	and.w	r3, r3, #31
 8004abe:	2201      	movs	r2, #1
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a1a      	ldr	r2, [r3, #32]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	43db      	mvns	r3, r3
 8004ace:	401a      	ands	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a1a      	ldr	r2, [r3, #32]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f003 031f 	and.w	r3, r3, #31
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	621a      	str	r2, [r3, #32]
}
 8004aea:	bf00      	nop
 8004aec:	371c      	adds	r7, #28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
	...

08004af8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d101      	bne.n	8004b10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	e05a      	b.n	8004bc6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a21      	ldr	r2, [pc, #132]	; (8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d022      	beq.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5c:	d01d      	beq.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1d      	ldr	r2, [pc, #116]	; (8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d018      	beq.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a1b      	ldr	r2, [pc, #108]	; (8004bdc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d013      	beq.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a1a      	ldr	r2, [pc, #104]	; (8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00e      	beq.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d009      	beq.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a17      	ldr	r2, [pc, #92]	; (8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d004      	beq.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a15      	ldr	r2, [pc, #84]	; (8004bec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d10c      	bne.n	8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ba0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	40010000 	.word	0x40010000
 8004bd8:	40000400 	.word	0x40000400
 8004bdc:	40000800 	.word	0x40000800
 8004be0:	40000c00 	.word	0x40000c00
 8004be4:	40010400 	.word	0x40010400
 8004be8:	40014000 	.word	0x40014000
 8004bec:	40001800 	.word	0x40001800

08004bf0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d101      	bne.n	8004c0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e03d      	b.n	8004c88 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e03f      	b.n	8004d4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fd f9c8 	bl	8002078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2224      	movs	r2, #36	; 0x24
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fddb 	bl	80058bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	691a      	ldr	r2, [r3, #16]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695a      	ldr	r2, [r3, #20]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b08a      	sub	sp, #40	; 0x28
 8004d5a:	af02      	add	r7, sp, #8
 8004d5c:	60f8      	str	r0, [r7, #12]
 8004d5e:	60b9      	str	r1, [r7, #8]
 8004d60:	603b      	str	r3, [r7, #0]
 8004d62:	4613      	mov	r3, r2
 8004d64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b20      	cmp	r3, #32
 8004d74:	d17c      	bne.n	8004e70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <HAL_UART_Transmit+0x2c>
 8004d7c:	88fb      	ldrh	r3, [r7, #6]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e075      	b.n	8004e72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_UART_Transmit+0x3e>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e06e      	b.n	8004e72 <HAL_UART_Transmit+0x11c>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2221      	movs	r2, #33	; 0x21
 8004da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004daa:	f7fd fac5 	bl	8002338 <HAL_GetTick>
 8004dae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	88fa      	ldrh	r2, [r7, #6]
 8004db4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	88fa      	ldrh	r2, [r7, #6]
 8004dba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc4:	d108      	bne.n	8004dd8 <HAL_UART_Transmit+0x82>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d104      	bne.n	8004dd8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	61bb      	str	r3, [r7, #24]
 8004dd6:	e003      	b.n	8004de0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004de8:	e02a      	b.n	8004e40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2200      	movs	r2, #0
 8004df2:	2180      	movs	r1, #128	; 0x80
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 fb1f 	bl	8005438 <UART_WaitOnFlagUntilTimeout>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e036      	b.n	8004e72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10b      	bne.n	8004e22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	3302      	adds	r3, #2
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	e007      	b.n	8004e32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	781a      	ldrb	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1cf      	bne.n	8004dea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2200      	movs	r2, #0
 8004e52:	2140      	movs	r1, #64	; 0x40
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 faef 	bl	8005438 <UART_WaitOnFlagUntilTimeout>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e006      	b.n	8004e72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	e000      	b.n	8004e72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e70:	2302      	movs	r3, #2
  }
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3720      	adds	r7, #32
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b084      	sub	sp, #16
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	4613      	mov	r3, r2
 8004e86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	d11d      	bne.n	8004ed0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <HAL_UART_Receive_IT+0x26>
 8004e9a:	88fb      	ldrh	r3, [r7, #6]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e016      	b.n	8004ed2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d101      	bne.n	8004eb2 <HAL_UART_Receive_IT+0x38>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e00f      	b.n	8004ed2 <HAL_UART_Receive_IT+0x58>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ec0:	88fb      	ldrh	r3, [r7, #6]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 fb24 	bl	8005514 <UART_Start_Receive_IT>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	e000      	b.n	8004ed2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004ed0:	2302      	movs	r3, #2
  }
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
	...

08004edc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b0ba      	sub	sp, #232	; 0xe8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10f      	bne.n	8004f42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f26:	f003 0320 	and.w	r3, r3, #32
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <HAL_UART_IRQHandler+0x66>
 8004f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fc03 	bl	8005746 <UART_Receive_IT>
      return;
 8004f40:	e256      	b.n	80053f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f000 80de 	beq.w	8005108 <HAL_UART_IRQHandler+0x22c>
 8004f4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d106      	bne.n	8004f66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 80d1 	beq.w	8005108 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00b      	beq.n	8004f8a <HAL_UART_IRQHandler+0xae>
 8004f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d005      	beq.n	8004f8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	f043 0201 	orr.w	r2, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00b      	beq.n	8004fae <HAL_UART_IRQHandler+0xd2>
 8004f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d005      	beq.n	8004fae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	f043 0202 	orr.w	r2, r3, #2
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00b      	beq.n	8004fd2 <HAL_UART_IRQHandler+0xf6>
 8004fba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d005      	beq.n	8004fd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f043 0204 	orr.w	r2, r3, #4
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d011      	beq.n	8005002 <HAL_UART_IRQHandler+0x126>
 8004fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fe2:	f003 0320 	and.w	r3, r3, #32
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d105      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d005      	beq.n	8005002 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	f043 0208 	orr.w	r2, r3, #8
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 81ed 	beq.w	80053e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800500c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005010:	f003 0320 	and.w	r3, r3, #32
 8005014:	2b00      	cmp	r3, #0
 8005016:	d008      	beq.n	800502a <HAL_UART_IRQHandler+0x14e>
 8005018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fb8e 	bl	8005746 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005034:	2b40      	cmp	r3, #64	; 0x40
 8005036:	bf0c      	ite	eq
 8005038:	2301      	moveq	r3, #1
 800503a:	2300      	movne	r3, #0
 800503c:	b2db      	uxtb	r3, r3
 800503e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d103      	bne.n	8005056 <HAL_UART_IRQHandler+0x17a>
 800504e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005052:	2b00      	cmp	r3, #0
 8005054:	d04f      	beq.n	80050f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fa96 	bl	8005588 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005066:	2b40      	cmp	r3, #64	; 0x40
 8005068:	d141      	bne.n	80050ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3314      	adds	r3, #20
 8005070:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005074:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005080:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005088:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3314      	adds	r3, #20
 8005092:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005096:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800509a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050a6:	e841 2300 	strex	r3, r2, [r1]
 80050aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1d9      	bne.n	800506a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d013      	beq.n	80050e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c2:	4a7d      	ldr	r2, [pc, #500]	; (80052b8 <HAL_UART_IRQHandler+0x3dc>)
 80050c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fd fae5 	bl	800269a <HAL_DMA_Abort_IT>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d016      	beq.n	8005104 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050e0:	4610      	mov	r0, r2
 80050e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e4:	e00e      	b.n	8005104 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f990 	bl	800540c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ec:	e00a      	b.n	8005104 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f98c 	bl	800540c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f4:	e006      	b.n	8005104 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f988 	bl	800540c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005102:	e170      	b.n	80053e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005104:	bf00      	nop
    return;
 8005106:	e16e      	b.n	80053e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	2b01      	cmp	r3, #1
 800510e:	f040 814a 	bne.w	80053a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005116:	f003 0310 	and.w	r3, r3, #16
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 8143 	beq.w	80053a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 813c 	beq.w	80053a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800512e:	2300      	movs	r3, #0
 8005130:	60bb      	str	r3, [r7, #8]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	60bb      	str	r3, [r7, #8]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	60bb      	str	r3, [r7, #8]
 8005142:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514e:	2b40      	cmp	r3, #64	; 0x40
 8005150:	f040 80b4 	bne.w	80052bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005160:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 8140 	beq.w	80053ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800516e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005172:	429a      	cmp	r2, r3
 8005174:	f080 8139 	bcs.w	80053ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800517e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800518a:	f000 8088 	beq.w	800529e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	330c      	adds	r3, #12
 8005194:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	330c      	adds	r3, #12
 80051b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80051ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80051d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1d9      	bne.n	800518e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3314      	adds	r3, #20
 80051e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051e4:	e853 3f00 	ldrex	r3, [r3]
 80051e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80051ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051ec:	f023 0301 	bic.w	r3, r3, #1
 80051f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3314      	adds	r3, #20
 80051fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80051fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005202:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005204:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005206:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800520a:	e841 2300 	strex	r3, r2, [r1]
 800520e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1e1      	bne.n	80051da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3314      	adds	r3, #20
 800521c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005220:	e853 3f00 	ldrex	r3, [r3]
 8005224:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800522c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3314      	adds	r3, #20
 8005236:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800523a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800523c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005240:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e3      	bne.n	8005216 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2220      	movs	r2, #32
 8005252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	330c      	adds	r3, #12
 8005262:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005266:	e853 3f00 	ldrex	r3, [r3]
 800526a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800526c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800526e:	f023 0310 	bic.w	r3, r3, #16
 8005272:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	330c      	adds	r3, #12
 800527c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005280:	65ba      	str	r2, [r7, #88]	; 0x58
 8005282:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005286:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800528e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e3      	bne.n	800525c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005298:	4618      	mov	r0, r3
 800529a:	f7fd f98e 	bl	80025ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	4619      	mov	r1, r3
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f8b6 	bl	8005420 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052b4:	e099      	b.n	80053ea <HAL_UART_IRQHandler+0x50e>
 80052b6:	bf00      	nop
 80052b8:	0800564f 	.word	0x0800564f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 808b 	beq.w	80053ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80052d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 8086 	beq.w	80053ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	330c      	adds	r3, #12
 80052e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ec:	e853 3f00 	ldrex	r3, [r3]
 80052f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	330c      	adds	r3, #12
 8005302:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005306:	647a      	str	r2, [r7, #68]	; 0x44
 8005308:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800530c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800530e:	e841 2300 	strex	r3, r2, [r1]
 8005312:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1e3      	bne.n	80052e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3314      	adds	r3, #20
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	e853 3f00 	ldrex	r3, [r3]
 8005328:	623b      	str	r3, [r7, #32]
   return(result);
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	f023 0301 	bic.w	r3, r3, #1
 8005330:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3314      	adds	r3, #20
 800533a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800533e:	633a      	str	r2, [r7, #48]	; 0x30
 8005340:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800534c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e3      	bne.n	800531a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2220      	movs	r2, #32
 8005356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	330c      	adds	r3, #12
 8005366:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	e853 3f00 	ldrex	r3, [r3]
 800536e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0310 	bic.w	r3, r3, #16
 8005376:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	330c      	adds	r3, #12
 8005380:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005384:	61fa      	str	r2, [r7, #28]
 8005386:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005388:	69b9      	ldr	r1, [r7, #24]
 800538a:	69fa      	ldr	r2, [r7, #28]
 800538c:	e841 2300 	strex	r3, r2, [r1]
 8005390:	617b      	str	r3, [r7, #20]
   return(result);
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1e3      	bne.n	8005360 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005398:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800539c:	4619      	mov	r1, r3
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f83e 	bl	8005420 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053a4:	e023      	b.n	80053ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d009      	beq.n	80053c6 <HAL_UART_IRQHandler+0x4ea>
 80053b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f959 	bl	8005676 <UART_Transmit_IT>
    return;
 80053c4:	e014      	b.n	80053f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00e      	beq.n	80053f0 <HAL_UART_IRQHandler+0x514>
 80053d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d008      	beq.n	80053f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f999 	bl	8005716 <UART_EndTransmit_IT>
    return;
 80053e4:	e004      	b.n	80053f0 <HAL_UART_IRQHandler+0x514>
    return;
 80053e6:	bf00      	nop
 80053e8:	e002      	b.n	80053f0 <HAL_UART_IRQHandler+0x514>
      return;
 80053ea:	bf00      	nop
 80053ec:	e000      	b.n	80053f0 <HAL_UART_IRQHandler+0x514>
      return;
 80053ee:	bf00      	nop
  }
}
 80053f0:	37e8      	adds	r7, #232	; 0xe8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop

080053f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b090      	sub	sp, #64	; 0x40
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	603b      	str	r3, [r7, #0]
 8005444:	4613      	mov	r3, r2
 8005446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005448:	e050      	b.n	80054ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800544a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800544c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005450:	d04c      	beq.n	80054ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005454:	2b00      	cmp	r3, #0
 8005456:	d007      	beq.n	8005468 <UART_WaitOnFlagUntilTimeout+0x30>
 8005458:	f7fc ff6e 	bl	8002338 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005464:	429a      	cmp	r2, r3
 8005466:	d241      	bcs.n	80054ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	330c      	adds	r3, #12
 800546e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	e853 3f00 	ldrex	r3, [r3]
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800547e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	330c      	adds	r3, #12
 8005486:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005488:	637a      	str	r2, [r7, #52]	; 0x34
 800548a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800548e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005490:	e841 2300 	strex	r3, r2, [r1]
 8005494:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e5      	bne.n	8005468 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3314      	adds	r3, #20
 80054a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	e853 3f00 	ldrex	r3, [r3]
 80054aa:	613b      	str	r3, [r7, #16]
   return(result);
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f023 0301 	bic.w	r3, r3, #1
 80054b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3314      	adds	r3, #20
 80054ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054bc:	623a      	str	r2, [r7, #32]
 80054be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c0:	69f9      	ldr	r1, [r7, #28]
 80054c2:	6a3a      	ldr	r2, [r7, #32]
 80054c4:	e841 2300 	strex	r3, r2, [r1]
 80054c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1e5      	bne.n	800549c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2220      	movs	r2, #32
 80054dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e00f      	b.n	800550c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	4013      	ands	r3, r2
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	bf0c      	ite	eq
 80054fc:	2301      	moveq	r3, #1
 80054fe:	2300      	movne	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	461a      	mov	r2, r3
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	429a      	cmp	r2, r3
 8005508:	d09f      	beq.n	800544a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3740      	adds	r7, #64	; 0x40
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	4613      	mov	r3, r2
 8005520:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	88fa      	ldrh	r2, [r7, #6]
 800552c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	88fa      	ldrh	r2, [r7, #6]
 8005532:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2222      	movs	r2, #34	; 0x22
 800553e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005558:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	695a      	ldr	r2, [r3, #20]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f042 0201 	orr.w	r2, r2, #1
 8005568:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 0220 	orr.w	r2, r2, #32
 8005578:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005588:	b480      	push	{r7}
 800558a:	b095      	sub	sp, #84	; 0x54
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	330c      	adds	r3, #12
 8005596:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559a:	e853 3f00 	ldrex	r3, [r3]
 800559e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	330c      	adds	r3, #12
 80055ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055b0:	643a      	str	r2, [r7, #64]	; 0x40
 80055b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055b8:	e841 2300 	strex	r3, r2, [r1]
 80055bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1e5      	bne.n	8005590 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3314      	adds	r3, #20
 80055ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	e853 3f00 	ldrex	r3, [r3]
 80055d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	f023 0301 	bic.w	r3, r3, #1
 80055da:	64bb      	str	r3, [r7, #72]	; 0x48
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3314      	adds	r3, #20
 80055e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055ec:	e841 2300 	strex	r3, r2, [r1]
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e5      	bne.n	80055c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d119      	bne.n	8005634 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	330c      	adds	r3, #12
 8005606:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	e853 3f00 	ldrex	r3, [r3]
 800560e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f023 0310 	bic.w	r3, r3, #16
 8005616:	647b      	str	r3, [r7, #68]	; 0x44
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	330c      	adds	r3, #12
 800561e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005620:	61ba      	str	r2, [r7, #24]
 8005622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005624:	6979      	ldr	r1, [r7, #20]
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	e841 2300 	strex	r3, r2, [r1]
 800562c:	613b      	str	r3, [r7, #16]
   return(result);
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1e5      	bne.n	8005600 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2220      	movs	r2, #32
 8005638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005642:	bf00      	nop
 8005644:	3754      	adds	r7, #84	; 0x54
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f7ff fecf 	bl	800540c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800566e:	bf00      	nop
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005676:	b480      	push	{r7}
 8005678:	b085      	sub	sp, #20
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b21      	cmp	r3, #33	; 0x21
 8005688:	d13e      	bne.n	8005708 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005692:	d114      	bne.n	80056be <UART_Transmit_IT+0x48>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d110      	bne.n	80056be <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	1c9a      	adds	r2, r3, #2
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	621a      	str	r2, [r3, #32]
 80056bc:	e008      	b.n	80056d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	1c59      	adds	r1, r3, #1
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6211      	str	r1, [r2, #32]
 80056c8:	781a      	ldrb	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	3b01      	subs	r3, #1
 80056d8:	b29b      	uxth	r3, r3
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	4619      	mov	r1, r3
 80056de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10f      	bne.n	8005704 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005702:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005704:	2300      	movs	r3, #0
 8005706:	e000      	b.n	800570a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005708:	2302      	movs	r3, #2
  }
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b082      	sub	sp, #8
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800572c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2220      	movs	r2, #32
 8005732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7ff fe5e 	bl	80053f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b08c      	sub	sp, #48	; 0x30
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b22      	cmp	r3, #34	; 0x22
 8005758:	f040 80ab 	bne.w	80058b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005764:	d117      	bne.n	8005796 <UART_Receive_IT+0x50>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d113      	bne.n	8005796 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800576e:	2300      	movs	r3, #0
 8005770:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005776:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	b29b      	uxth	r3, r3
 8005780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005784:	b29a      	uxth	r2, r3
 8005786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005788:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578e:	1c9a      	adds	r2, r3, #2
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	629a      	str	r2, [r3, #40]	; 0x28
 8005794:	e026      	b.n	80057e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800579c:	2300      	movs	r3, #0
 800579e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a8:	d007      	beq.n	80057ba <UART_Receive_IT+0x74>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10a      	bne.n	80057c8 <UART_Receive_IT+0x82>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d106      	bne.n	80057c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c4:	701a      	strb	r2, [r3, #0]
 80057c6:	e008      	b.n	80057da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	4619      	mov	r1, r3
 80057f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d15a      	bne.n	80058ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0220 	bic.w	r2, r2, #32
 8005806:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005816:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	695a      	ldr	r2, [r3, #20]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0201 	bic.w	r2, r2, #1
 8005826:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2220      	movs	r2, #32
 800582c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005834:	2b01      	cmp	r3, #1
 8005836:	d135      	bne.n	80058a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	330c      	adds	r3, #12
 8005844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	e853 3f00 	ldrex	r3, [r3]
 800584c:	613b      	str	r3, [r7, #16]
   return(result);
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f023 0310 	bic.w	r3, r3, #16
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	330c      	adds	r3, #12
 800585c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585e:	623a      	str	r2, [r7, #32]
 8005860:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	69f9      	ldr	r1, [r7, #28]
 8005864:	6a3a      	ldr	r2, [r7, #32]
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	61bb      	str	r3, [r7, #24]
   return(result);
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e5      	bne.n	800583e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	2b10      	cmp	r3, #16
 800587e:	d10a      	bne.n	8005896 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005880:	2300      	movs	r3, #0
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800589a:	4619      	mov	r1, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff fdbf 	bl	8005420 <HAL_UARTEx_RxEventCallback>
 80058a2:	e002      	b.n	80058aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7fc f9d5 	bl	8001c54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	e002      	b.n	80058b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	e000      	b.n	80058b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80058b2:	2302      	movs	r3, #2
  }
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3730      	adds	r7, #48	; 0x30
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c0:	b09f      	sub	sp, #124	; 0x7c
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d2:	68d9      	ldr	r1, [r3, #12]
 80058d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	ea40 0301 	orr.w	r3, r0, r1
 80058dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	431a      	orrs	r2, r3
 80058e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	431a      	orrs	r2, r3
 80058ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80058f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005900:	f021 010c 	bic.w	r1, r1, #12
 8005904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800590a:	430b      	orrs	r3, r1
 800590c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800590e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591a:	6999      	ldr	r1, [r3, #24]
 800591c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	ea40 0301 	orr.w	r3, r0, r1
 8005924:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	4bc5      	ldr	r3, [pc, #788]	; (8005c40 <UART_SetConfig+0x384>)
 800592c:	429a      	cmp	r2, r3
 800592e:	d004      	beq.n	800593a <UART_SetConfig+0x7e>
 8005930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	4bc3      	ldr	r3, [pc, #780]	; (8005c44 <UART_SetConfig+0x388>)
 8005936:	429a      	cmp	r2, r3
 8005938:	d103      	bne.n	8005942 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800593a:	f7fd fce3 	bl	8003304 <HAL_RCC_GetPCLK2Freq>
 800593e:	6778      	str	r0, [r7, #116]	; 0x74
 8005940:	e002      	b.n	8005948 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005942:	f7fd fccb 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 8005946:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005950:	f040 80b6 	bne.w	8005ac0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005954:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005956:	461c      	mov	r4, r3
 8005958:	f04f 0500 	mov.w	r5, #0
 800595c:	4622      	mov	r2, r4
 800595e:	462b      	mov	r3, r5
 8005960:	1891      	adds	r1, r2, r2
 8005962:	6439      	str	r1, [r7, #64]	; 0x40
 8005964:	415b      	adcs	r3, r3
 8005966:	647b      	str	r3, [r7, #68]	; 0x44
 8005968:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800596c:	1912      	adds	r2, r2, r4
 800596e:	eb45 0303 	adc.w	r3, r5, r3
 8005972:	f04f 0000 	mov.w	r0, #0
 8005976:	f04f 0100 	mov.w	r1, #0
 800597a:	00d9      	lsls	r1, r3, #3
 800597c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005980:	00d0      	lsls	r0, r2, #3
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	1911      	adds	r1, r2, r4
 8005988:	6639      	str	r1, [r7, #96]	; 0x60
 800598a:	416b      	adcs	r3, r5
 800598c:	667b      	str	r3, [r7, #100]	; 0x64
 800598e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	461a      	mov	r2, r3
 8005994:	f04f 0300 	mov.w	r3, #0
 8005998:	1891      	adds	r1, r2, r2
 800599a:	63b9      	str	r1, [r7, #56]	; 0x38
 800599c:	415b      	adcs	r3, r3
 800599e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80059a8:	f7fb f916 	bl	8000bd8 <__aeabi_uldivmod>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	4ba5      	ldr	r3, [pc, #660]	; (8005c48 <UART_SetConfig+0x38c>)
 80059b2:	fba3 2302 	umull	r2, r3, r3, r2
 80059b6:	095b      	lsrs	r3, r3, #5
 80059b8:	011e      	lsls	r6, r3, #4
 80059ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059bc:	461c      	mov	r4, r3
 80059be:	f04f 0500 	mov.w	r5, #0
 80059c2:	4622      	mov	r2, r4
 80059c4:	462b      	mov	r3, r5
 80059c6:	1891      	adds	r1, r2, r2
 80059c8:	6339      	str	r1, [r7, #48]	; 0x30
 80059ca:	415b      	adcs	r3, r3
 80059cc:	637b      	str	r3, [r7, #52]	; 0x34
 80059ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80059d2:	1912      	adds	r2, r2, r4
 80059d4:	eb45 0303 	adc.w	r3, r5, r3
 80059d8:	f04f 0000 	mov.w	r0, #0
 80059dc:	f04f 0100 	mov.w	r1, #0
 80059e0:	00d9      	lsls	r1, r3, #3
 80059e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059e6:	00d0      	lsls	r0, r2, #3
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	1911      	adds	r1, r2, r4
 80059ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80059f0:	416b      	adcs	r3, r5
 80059f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	461a      	mov	r2, r3
 80059fa:	f04f 0300 	mov.w	r3, #0
 80059fe:	1891      	adds	r1, r2, r2
 8005a00:	62b9      	str	r1, [r7, #40]	; 0x28
 8005a02:	415b      	adcs	r3, r3
 8005a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a0a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005a0e:	f7fb f8e3 	bl	8000bd8 <__aeabi_uldivmod>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	4b8c      	ldr	r3, [pc, #560]	; (8005c48 <UART_SetConfig+0x38c>)
 8005a18:	fba3 1302 	umull	r1, r3, r3, r2
 8005a1c:	095b      	lsrs	r3, r3, #5
 8005a1e:	2164      	movs	r1, #100	; 0x64
 8005a20:	fb01 f303 	mul.w	r3, r1, r3
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	3332      	adds	r3, #50	; 0x32
 8005a2a:	4a87      	ldr	r2, [pc, #540]	; (8005c48 <UART_SetConfig+0x38c>)
 8005a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a38:	441e      	add	r6, r3
 8005a3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f04f 0100 	mov.w	r1, #0
 8005a42:	4602      	mov	r2, r0
 8005a44:	460b      	mov	r3, r1
 8005a46:	1894      	adds	r4, r2, r2
 8005a48:	623c      	str	r4, [r7, #32]
 8005a4a:	415b      	adcs	r3, r3
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a52:	1812      	adds	r2, r2, r0
 8005a54:	eb41 0303 	adc.w	r3, r1, r3
 8005a58:	f04f 0400 	mov.w	r4, #0
 8005a5c:	f04f 0500 	mov.w	r5, #0
 8005a60:	00dd      	lsls	r5, r3, #3
 8005a62:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a66:	00d4      	lsls	r4, r2, #3
 8005a68:	4622      	mov	r2, r4
 8005a6a:	462b      	mov	r3, r5
 8005a6c:	1814      	adds	r4, r2, r0
 8005a6e:	653c      	str	r4, [r7, #80]	; 0x50
 8005a70:	414b      	adcs	r3, r1
 8005a72:	657b      	str	r3, [r7, #84]	; 0x54
 8005a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	f04f 0300 	mov.w	r3, #0
 8005a7e:	1891      	adds	r1, r2, r2
 8005a80:	61b9      	str	r1, [r7, #24]
 8005a82:	415b      	adcs	r3, r3
 8005a84:	61fb      	str	r3, [r7, #28]
 8005a86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a8a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005a8e:	f7fb f8a3 	bl	8000bd8 <__aeabi_uldivmod>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	4b6c      	ldr	r3, [pc, #432]	; (8005c48 <UART_SetConfig+0x38c>)
 8005a98:	fba3 1302 	umull	r1, r3, r3, r2
 8005a9c:	095b      	lsrs	r3, r3, #5
 8005a9e:	2164      	movs	r1, #100	; 0x64
 8005aa0:	fb01 f303 	mul.w	r3, r1, r3
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	3332      	adds	r3, #50	; 0x32
 8005aaa:	4a67      	ldr	r2, [pc, #412]	; (8005c48 <UART_SetConfig+0x38c>)
 8005aac:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab0:	095b      	lsrs	r3, r3, #5
 8005ab2:	f003 0207 	and.w	r2, r3, #7
 8005ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4432      	add	r2, r6
 8005abc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005abe:	e0b9      	b.n	8005c34 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ac2:	461c      	mov	r4, r3
 8005ac4:	f04f 0500 	mov.w	r5, #0
 8005ac8:	4622      	mov	r2, r4
 8005aca:	462b      	mov	r3, r5
 8005acc:	1891      	adds	r1, r2, r2
 8005ace:	6139      	str	r1, [r7, #16]
 8005ad0:	415b      	adcs	r3, r3
 8005ad2:	617b      	str	r3, [r7, #20]
 8005ad4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005ad8:	1912      	adds	r2, r2, r4
 8005ada:	eb45 0303 	adc.w	r3, r5, r3
 8005ade:	f04f 0000 	mov.w	r0, #0
 8005ae2:	f04f 0100 	mov.w	r1, #0
 8005ae6:	00d9      	lsls	r1, r3, #3
 8005ae8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005aec:	00d0      	lsls	r0, r2, #3
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	eb12 0804 	adds.w	r8, r2, r4
 8005af6:	eb43 0905 	adc.w	r9, r3, r5
 8005afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f04f 0100 	mov.w	r1, #0
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	f04f 0300 	mov.w	r3, #0
 8005b0c:	008b      	lsls	r3, r1, #2
 8005b0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b12:	0082      	lsls	r2, r0, #2
 8005b14:	4640      	mov	r0, r8
 8005b16:	4649      	mov	r1, r9
 8005b18:	f7fb f85e 	bl	8000bd8 <__aeabi_uldivmod>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4b49      	ldr	r3, [pc, #292]	; (8005c48 <UART_SetConfig+0x38c>)
 8005b22:	fba3 2302 	umull	r2, r3, r3, r2
 8005b26:	095b      	lsrs	r3, r3, #5
 8005b28:	011e      	lsls	r6, r3, #4
 8005b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f04f 0100 	mov.w	r1, #0
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	1894      	adds	r4, r2, r2
 8005b38:	60bc      	str	r4, [r7, #8]
 8005b3a:	415b      	adcs	r3, r3
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b42:	1812      	adds	r2, r2, r0
 8005b44:	eb41 0303 	adc.w	r3, r1, r3
 8005b48:	f04f 0400 	mov.w	r4, #0
 8005b4c:	f04f 0500 	mov.w	r5, #0
 8005b50:	00dd      	lsls	r5, r3, #3
 8005b52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b56:	00d4      	lsls	r4, r2, #3
 8005b58:	4622      	mov	r2, r4
 8005b5a:	462b      	mov	r3, r5
 8005b5c:	1814      	adds	r4, r2, r0
 8005b5e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005b60:	414b      	adcs	r3, r1
 8005b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f04f 0100 	mov.w	r1, #0
 8005b6e:	f04f 0200 	mov.w	r2, #0
 8005b72:	f04f 0300 	mov.w	r3, #0
 8005b76:	008b      	lsls	r3, r1, #2
 8005b78:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b7c:	0082      	lsls	r2, r0, #2
 8005b7e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005b82:	f7fb f829 	bl	8000bd8 <__aeabi_uldivmod>
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	4b2f      	ldr	r3, [pc, #188]	; (8005c48 <UART_SetConfig+0x38c>)
 8005b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b90:	095b      	lsrs	r3, r3, #5
 8005b92:	2164      	movs	r1, #100	; 0x64
 8005b94:	fb01 f303 	mul.w	r3, r1, r3
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	3332      	adds	r3, #50	; 0x32
 8005b9e:	4a2a      	ldr	r2, [pc, #168]	; (8005c48 <UART_SetConfig+0x38c>)
 8005ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba4:	095b      	lsrs	r3, r3, #5
 8005ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005baa:	441e      	add	r6, r3
 8005bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f04f 0100 	mov.w	r1, #0
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	1894      	adds	r4, r2, r2
 8005bba:	603c      	str	r4, [r7, #0]
 8005bbc:	415b      	adcs	r3, r3
 8005bbe:	607b      	str	r3, [r7, #4]
 8005bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bc4:	1812      	adds	r2, r2, r0
 8005bc6:	eb41 0303 	adc.w	r3, r1, r3
 8005bca:	f04f 0400 	mov.w	r4, #0
 8005bce:	f04f 0500 	mov.w	r5, #0
 8005bd2:	00dd      	lsls	r5, r3, #3
 8005bd4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005bd8:	00d4      	lsls	r4, r2, #3
 8005bda:	4622      	mov	r2, r4
 8005bdc:	462b      	mov	r3, r5
 8005bde:	eb12 0a00 	adds.w	sl, r2, r0
 8005be2:	eb43 0b01 	adc.w	fp, r3, r1
 8005be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f04f 0100 	mov.w	r1, #0
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	f04f 0300 	mov.w	r3, #0
 8005bf8:	008b      	lsls	r3, r1, #2
 8005bfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005bfe:	0082      	lsls	r2, r0, #2
 8005c00:	4650      	mov	r0, sl
 8005c02:	4659      	mov	r1, fp
 8005c04:	f7fa ffe8 	bl	8000bd8 <__aeabi_uldivmod>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	4b0e      	ldr	r3, [pc, #56]	; (8005c48 <UART_SetConfig+0x38c>)
 8005c0e:	fba3 1302 	umull	r1, r3, r3, r2
 8005c12:	095b      	lsrs	r3, r3, #5
 8005c14:	2164      	movs	r1, #100	; 0x64
 8005c16:	fb01 f303 	mul.w	r3, r1, r3
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	011b      	lsls	r3, r3, #4
 8005c1e:	3332      	adds	r3, #50	; 0x32
 8005c20:	4a09      	ldr	r2, [pc, #36]	; (8005c48 <UART_SetConfig+0x38c>)
 8005c22:	fba2 2303 	umull	r2, r3, r2, r3
 8005c26:	095b      	lsrs	r3, r3, #5
 8005c28:	f003 020f 	and.w	r2, r3, #15
 8005c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4432      	add	r2, r6
 8005c32:	609a      	str	r2, [r3, #8]
}
 8005c34:	bf00      	nop
 8005c36:	377c      	adds	r7, #124	; 0x7c
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c3e:	bf00      	nop
 8005c40:	40011000 	.word	0x40011000
 8005c44:	40011400 	.word	0x40011400
 8005c48:	51eb851f 	.word	0x51eb851f

08005c4c <__NVIC_SetPriority>:
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	4603      	mov	r3, r0
 8005c54:	6039      	str	r1, [r7, #0]
 8005c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	db0a      	blt.n	8005c76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	490c      	ldr	r1, [pc, #48]	; (8005c98 <__NVIC_SetPriority+0x4c>)
 8005c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c6a:	0112      	lsls	r2, r2, #4
 8005c6c:	b2d2      	uxtb	r2, r2
 8005c6e:	440b      	add	r3, r1
 8005c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005c74:	e00a      	b.n	8005c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	4908      	ldr	r1, [pc, #32]	; (8005c9c <__NVIC_SetPriority+0x50>)
 8005c7c:	79fb      	ldrb	r3, [r7, #7]
 8005c7e:	f003 030f 	and.w	r3, r3, #15
 8005c82:	3b04      	subs	r3, #4
 8005c84:	0112      	lsls	r2, r2, #4
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	440b      	add	r3, r1
 8005c8a:	761a      	strb	r2, [r3, #24]
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	e000e100 	.word	0xe000e100
 8005c9c:	e000ed00 	.word	0xe000ed00

08005ca0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	f06f 0004 	mvn.w	r0, #4
 8005caa:	f7ff ffcf 	bl	8005c4c <__NVIC_SetPriority>
#endif
}
 8005cae:	bf00      	nop
 8005cb0:	bd80      	pop	{r7, pc}
	...

08005cb4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cba:	f3ef 8305 	mrs	r3, IPSR
 8005cbe:	603b      	str	r3, [r7, #0]
  return(result);
 8005cc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005cc6:	f06f 0305 	mvn.w	r3, #5
 8005cca:	607b      	str	r3, [r7, #4]
 8005ccc:	e00c      	b.n	8005ce8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005cce:	4b0a      	ldr	r3, [pc, #40]	; (8005cf8 <osKernelInitialize+0x44>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d105      	bne.n	8005ce2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005cd6:	4b08      	ldr	r3, [pc, #32]	; (8005cf8 <osKernelInitialize+0x44>)
 8005cd8:	2201      	movs	r2, #1
 8005cda:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	607b      	str	r3, [r7, #4]
 8005ce0:	e002      	b.n	8005ce8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ce6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ce8:	687b      	ldr	r3, [r7, #4]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	200000bc 	.word	0x200000bc

08005cfc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d02:	f3ef 8305 	mrs	r3, IPSR
 8005d06:	603b      	str	r3, [r7, #0]
  return(result);
 8005d08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005d0e:	f06f 0305 	mvn.w	r3, #5
 8005d12:	607b      	str	r3, [r7, #4]
 8005d14:	e010      	b.n	8005d38 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005d16:	4b0b      	ldr	r3, [pc, #44]	; (8005d44 <osKernelStart+0x48>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d109      	bne.n	8005d32 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005d1e:	f7ff ffbf 	bl	8005ca0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005d22:	4b08      	ldr	r3, [pc, #32]	; (8005d44 <osKernelStart+0x48>)
 8005d24:	2202      	movs	r2, #2
 8005d26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005d28:	f001 f866 	bl	8006df8 <vTaskStartScheduler>
      stat = osOK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	607b      	str	r3, [r7, #4]
 8005d30:	e002      	b.n	8005d38 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005d32:	f04f 33ff 	mov.w	r3, #4294967295
 8005d36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d38:	687b      	ldr	r3, [r7, #4]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	200000bc 	.word	0x200000bc

08005d48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08e      	sub	sp, #56	; 0x38
 8005d4c:	af04      	add	r7, sp, #16
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005d54:	2300      	movs	r3, #0
 8005d56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d58:	f3ef 8305 	mrs	r3, IPSR
 8005d5c:	617b      	str	r3, [r7, #20]
  return(result);
 8005d5e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d17e      	bne.n	8005e62 <osThreadNew+0x11a>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d07b      	beq.n	8005e62 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005d6a:	2380      	movs	r3, #128	; 0x80
 8005d6c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005d6e:	2318      	movs	r3, #24
 8005d70:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005d72:	2300      	movs	r3, #0
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005d76:	f04f 33ff 	mov.w	r3, #4294967295
 8005d7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d045      	beq.n	8005e0e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <osThreadNew+0x48>
        name = attr->name;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d008      	beq.n	8005db6 <osThreadNew+0x6e>
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	2b38      	cmp	r3, #56	; 0x38
 8005da8:	d805      	bhi.n	8005db6 <osThreadNew+0x6e>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <osThreadNew+0x72>
        return (NULL);
 8005db6:	2300      	movs	r3, #0
 8005db8:	e054      	b.n	8005e64 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	089b      	lsrs	r3, r3, #2
 8005dc8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00e      	beq.n	8005df0 <osThreadNew+0xa8>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	2b5b      	cmp	r3, #91	; 0x5b
 8005dd8:	d90a      	bls.n	8005df0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d006      	beq.n	8005df0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <osThreadNew+0xa8>
        mem = 1;
 8005dea:	2301      	movs	r3, #1
 8005dec:	61bb      	str	r3, [r7, #24]
 8005dee:	e010      	b.n	8005e12 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10c      	bne.n	8005e12 <osThreadNew+0xca>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d108      	bne.n	8005e12 <osThreadNew+0xca>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d104      	bne.n	8005e12 <osThreadNew+0xca>
          mem = 0;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	61bb      	str	r3, [r7, #24]
 8005e0c:	e001      	b.n	8005e12 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d110      	bne.n	8005e3a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e20:	9202      	str	r2, [sp, #8]
 8005e22:	9301      	str	r3, [sp, #4]
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	6a3a      	ldr	r2, [r7, #32]
 8005e2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 fe0c 	bl	8006a4c <xTaskCreateStatic>
 8005e34:	4603      	mov	r3, r0
 8005e36:	613b      	str	r3, [r7, #16]
 8005e38:	e013      	b.n	8005e62 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d110      	bne.n	8005e62 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	f107 0310 	add.w	r3, r7, #16
 8005e48:	9301      	str	r3, [sp, #4]
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 fe57 	bl	8006b06 <xTaskCreate>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d001      	beq.n	8005e62 <osThreadNew+0x11a>
            hTask = NULL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005e62:	693b      	ldr	r3, [r7, #16]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3728      	adds	r7, #40	; 0x28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e74:	f3ef 8305 	mrs	r3, IPSR
 8005e78:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e7a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <osDelay+0x1c>
    stat = osErrorISR;
 8005e80:	f06f 0305 	mvn.w	r3, #5
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	e007      	b.n	8005e98 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 ff7c 	bl	8006d90 <vTaskDelay>
    }
  }

  return (stat);
 8005e98:	68fb      	ldr	r3, [r7, #12]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
	...

08005ea4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4a07      	ldr	r2, [pc, #28]	; (8005ed0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005eb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	4a06      	ldr	r2, [pc, #24]	; (8005ed4 <vApplicationGetIdleTaskMemory+0x30>)
 8005eba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2280      	movs	r2, #128	; 0x80
 8005ec0:	601a      	str	r2, [r3, #0]
}
 8005ec2:	bf00      	nop
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	200000c0 	.word	0x200000c0
 8005ed4:	2000011c 	.word	0x2000011c

08005ed8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4a07      	ldr	r2, [pc, #28]	; (8005f04 <vApplicationGetTimerTaskMemory+0x2c>)
 8005ee8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	4a06      	ldr	r2, [pc, #24]	; (8005f08 <vApplicationGetTimerTaskMemory+0x30>)
 8005eee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ef6:	601a      	str	r2, [r3, #0]
}
 8005ef8:	bf00      	nop
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	2000031c 	.word	0x2000031c
 8005f08:	20000378 	.word	0x20000378

08005f0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f103 0208 	add.w	r2, r3, #8
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f04f 32ff 	mov.w	r2, #4294967295
 8005f24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f103 0208 	add.w	r2, r3, #8
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f103 0208 	add.w	r2, r3, #8
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f66:	b480      	push	{r7}
 8005f68:	b085      	sub	sp, #20
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	1c5a      	adds	r2, r3, #1
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	601a      	str	r2, [r3, #0]
}
 8005fa2:	bf00      	nop
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b085      	sub	sp, #20
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc4:	d103      	bne.n	8005fce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	e00c      	b.n	8005fe8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3308      	adds	r3, #8
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	e002      	b.n	8005fdc <vListInsert+0x2e>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d2f6      	bcs.n	8005fd6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	601a      	str	r2, [r3, #0]
}
 8006014:	bf00      	nop
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	6892      	ldr	r2, [r2, #8]
 8006036:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	6852      	ldr	r2, [r2, #4]
 8006040:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	429a      	cmp	r2, r3
 800604a:	d103      	bne.n	8006054 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689a      	ldr	r2, [r3, #8]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	1e5a      	subs	r2, r3, #1
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10a      	bne.n	800609e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608c:	f383 8811 	msr	BASEPRI, r3
 8006090:	f3bf 8f6f 	isb	sy
 8006094:	f3bf 8f4f 	dsb	sy
 8006098:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800609a:	bf00      	nop
 800609c:	e7fe      	b.n	800609c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800609e:	f002 f851 	bl	8008144 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060aa:	68f9      	ldr	r1, [r7, #12]
 80060ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060ae:	fb01 f303 	mul.w	r3, r1, r3
 80060b2:	441a      	add	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ce:	3b01      	subs	r3, #1
 80060d0:	68f9      	ldr	r1, [r7, #12]
 80060d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060d4:	fb01 f303 	mul.w	r3, r1, r3
 80060d8:	441a      	add	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	22ff      	movs	r2, #255	; 0xff
 80060e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	22ff      	movs	r2, #255	; 0xff
 80060ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d114      	bne.n	800611e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d01a      	beq.n	8006132 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	3310      	adds	r3, #16
 8006100:	4618      	mov	r0, r3
 8006102:	f001 f903 	bl	800730c <xTaskRemoveFromEventList>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d012      	beq.n	8006132 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800610c:	4b0c      	ldr	r3, [pc, #48]	; (8006140 <xQueueGenericReset+0xcc>)
 800610e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	e009      	b.n	8006132 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	3310      	adds	r3, #16
 8006122:	4618      	mov	r0, r3
 8006124:	f7ff fef2 	bl	8005f0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	3324      	adds	r3, #36	; 0x24
 800612c:	4618      	mov	r0, r3
 800612e:	f7ff feed 	bl	8005f0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006132:	f002 f837 	bl	80081a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006136:	2301      	movs	r3, #1
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	e000ed04 	.word	0xe000ed04

08006144 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08e      	sub	sp, #56	; 0x38
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10a      	bne.n	800616e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800616a:	bf00      	nop
 800616c:	e7fe      	b.n	800616c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10a      	bne.n	800618a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006186:	bf00      	nop
 8006188:	e7fe      	b.n	8006188 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <xQueueGenericCreateStatic+0x52>
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <xQueueGenericCreateStatic+0x56>
 8006196:	2301      	movs	r3, #1
 8006198:	e000      	b.n	800619c <xQueueGenericCreateStatic+0x58>
 800619a:	2300      	movs	r3, #0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10a      	bne.n	80061b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	623b      	str	r3, [r7, #32]
}
 80061b2:	bf00      	nop
 80061b4:	e7fe      	b.n	80061b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d102      	bne.n	80061c2 <xQueueGenericCreateStatic+0x7e>
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <xQueueGenericCreateStatic+0x82>
 80061c2:	2301      	movs	r3, #1
 80061c4:	e000      	b.n	80061c8 <xQueueGenericCreateStatic+0x84>
 80061c6:	2300      	movs	r3, #0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10a      	bne.n	80061e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	61fb      	str	r3, [r7, #28]
}
 80061de:	bf00      	nop
 80061e0:	e7fe      	b.n	80061e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80061e2:	2350      	movs	r3, #80	; 0x50
 80061e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2b50      	cmp	r3, #80	; 0x50
 80061ea:	d00a      	beq.n	8006202 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80061ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	61bb      	str	r3, [r7, #24]
}
 80061fe:	bf00      	nop
 8006200:	e7fe      	b.n	8006200 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006202:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00d      	beq.n	800622a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800620e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006210:	2201      	movs	r2, #1
 8006212:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006216:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800621a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	4613      	mov	r3, r2
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	68b9      	ldr	r1, [r7, #8]
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 f805 	bl	8006234 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800622a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800622c:	4618      	mov	r0, r3
 800622e:	3730      	adds	r7, #48	; 0x30
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
 8006240:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d103      	bne.n	8006250 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	e002      	b.n	8006256 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006262:	2101      	movs	r1, #1
 8006264:	69b8      	ldr	r0, [r7, #24]
 8006266:	f7ff ff05 	bl	8006074 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	78fa      	ldrb	r2, [r7, #3]
 800626e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006272:	bf00      	nop
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08e      	sub	sp, #56	; 0x38
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800628a:	2300      	movs	r3, #0
 800628c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10a      	bne.n	80062ae <xQueueGenericSend+0x32>
	__asm volatile
 8006298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80062aa:	bf00      	nop
 80062ac:	e7fe      	b.n	80062ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d103      	bne.n	80062bc <xQueueGenericSend+0x40>
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <xQueueGenericSend+0x44>
 80062bc:	2301      	movs	r3, #1
 80062be:	e000      	b.n	80062c2 <xQueueGenericSend+0x46>
 80062c0:	2300      	movs	r3, #0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10a      	bne.n	80062dc <xQueueGenericSend+0x60>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062d8:	bf00      	nop
 80062da:	e7fe      	b.n	80062da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d103      	bne.n	80062ea <xQueueGenericSend+0x6e>
 80062e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d101      	bne.n	80062ee <xQueueGenericSend+0x72>
 80062ea:	2301      	movs	r3, #1
 80062ec:	e000      	b.n	80062f0 <xQueueGenericSend+0x74>
 80062ee:	2300      	movs	r3, #0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10a      	bne.n	800630a <xQueueGenericSend+0x8e>
	__asm volatile
 80062f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	623b      	str	r3, [r7, #32]
}
 8006306:	bf00      	nop
 8006308:	e7fe      	b.n	8006308 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800630a:	f001 f9bd 	bl	8007688 <xTaskGetSchedulerState>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d102      	bne.n	800631a <xQueueGenericSend+0x9e>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <xQueueGenericSend+0xa2>
 800631a:	2301      	movs	r3, #1
 800631c:	e000      	b.n	8006320 <xQueueGenericSend+0xa4>
 800631e:	2300      	movs	r3, #0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10a      	bne.n	800633a <xQueueGenericSend+0xbe>
	__asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	61fb      	str	r3, [r7, #28]
}
 8006336:	bf00      	nop
 8006338:	e7fe      	b.n	8006338 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800633a:	f001 ff03 	bl	8008144 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800633e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006346:	429a      	cmp	r2, r3
 8006348:	d302      	bcc.n	8006350 <xQueueGenericSend+0xd4>
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b02      	cmp	r3, #2
 800634e:	d129      	bne.n	80063a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	68b9      	ldr	r1, [r7, #8]
 8006354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006356:	f000 fa0b 	bl	8006770 <prvCopyDataToQueue>
 800635a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	2b00      	cmp	r3, #0
 8006362:	d010      	beq.n	8006386 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006366:	3324      	adds	r3, #36	; 0x24
 8006368:	4618      	mov	r0, r3
 800636a:	f000 ffcf 	bl	800730c <xTaskRemoveFromEventList>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d013      	beq.n	800639c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006374:	4b3f      	ldr	r3, [pc, #252]	; (8006474 <xQueueGenericSend+0x1f8>)
 8006376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	e00a      	b.n	800639c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006388:	2b00      	cmp	r3, #0
 800638a:	d007      	beq.n	800639c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800638c:	4b39      	ldr	r3, [pc, #228]	; (8006474 <xQueueGenericSend+0x1f8>)
 800638e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800639c:	f001 ff02 	bl	80081a4 <vPortExitCritical>
				return pdPASS;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e063      	b.n	800646c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d103      	bne.n	80063b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80063aa:	f001 fefb 	bl	80081a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80063ae:	2300      	movs	r3, #0
 80063b0:	e05c      	b.n	800646c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d106      	bne.n	80063c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063b8:	f107 0314 	add.w	r3, r7, #20
 80063bc:	4618      	mov	r0, r3
 80063be:	f001 f809 	bl	80073d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063c2:	2301      	movs	r3, #1
 80063c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063c6:	f001 feed 	bl	80081a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063ca:	f000 fd7b 	bl	8006ec4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063ce:	f001 feb9 	bl	8008144 <vPortEnterCritical>
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063d8:	b25b      	sxtb	r3, r3
 80063da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063de:	d103      	bne.n	80063e8 <xQueueGenericSend+0x16c>
 80063e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063ee:	b25b      	sxtb	r3, r3
 80063f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f4:	d103      	bne.n	80063fe <xQueueGenericSend+0x182>
 80063f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063fe:	f001 fed1 	bl	80081a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006402:	1d3a      	adds	r2, r7, #4
 8006404:	f107 0314 	add.w	r3, r7, #20
 8006408:	4611      	mov	r1, r2
 800640a:	4618      	mov	r0, r3
 800640c:	f000 fff8 	bl	8007400 <xTaskCheckForTimeOut>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d124      	bne.n	8006460 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006416:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006418:	f000 faa2 	bl	8006960 <prvIsQueueFull>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d018      	beq.n	8006454 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	3310      	adds	r3, #16
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	4611      	mov	r1, r2
 800642a:	4618      	mov	r0, r3
 800642c:	f000 ff1e 	bl	800726c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006432:	f000 fa2d 	bl	8006890 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006436:	f000 fd53 	bl	8006ee0 <xTaskResumeAll>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	f47f af7c 	bne.w	800633a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006442:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <xQueueGenericSend+0x1f8>)
 8006444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	e772      	b.n	800633a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006454:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006456:	f000 fa1b 	bl	8006890 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800645a:	f000 fd41 	bl	8006ee0 <xTaskResumeAll>
 800645e:	e76c      	b.n	800633a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006462:	f000 fa15 	bl	8006890 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006466:	f000 fd3b 	bl	8006ee0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800646a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800646c:	4618      	mov	r0, r3
 800646e:	3738      	adds	r7, #56	; 0x38
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	e000ed04 	.word	0xe000ed04

08006478 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b090      	sub	sp, #64	; 0x40
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
 8006484:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800648a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10a      	bne.n	80064a6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80064a2:	bf00      	nop
 80064a4:	e7fe      	b.n	80064a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d103      	bne.n	80064b4 <xQueueGenericSendFromISR+0x3c>
 80064ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <xQueueGenericSendFromISR+0x40>
 80064b4:	2301      	movs	r3, #1
 80064b6:	e000      	b.n	80064ba <xQueueGenericSendFromISR+0x42>
 80064b8:	2300      	movs	r3, #0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10a      	bne.n	80064d4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064d0:	bf00      	nop
 80064d2:	e7fe      	b.n	80064d2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d103      	bne.n	80064e2 <xQueueGenericSendFromISR+0x6a>
 80064da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d101      	bne.n	80064e6 <xQueueGenericSendFromISR+0x6e>
 80064e2:	2301      	movs	r3, #1
 80064e4:	e000      	b.n	80064e8 <xQueueGenericSendFromISR+0x70>
 80064e6:	2300      	movs	r3, #0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10a      	bne.n	8006502 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80064ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	623b      	str	r3, [r7, #32]
}
 80064fe:	bf00      	nop
 8006500:	e7fe      	b.n	8006500 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006502:	f001 ff01 	bl	8008308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006506:	f3ef 8211 	mrs	r2, BASEPRI
 800650a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650e:	f383 8811 	msr	BASEPRI, r3
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	61fa      	str	r2, [r7, #28]
 800651c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800651e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006520:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800652a:	429a      	cmp	r2, r3
 800652c:	d302      	bcc.n	8006534 <xQueueGenericSendFromISR+0xbc>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b02      	cmp	r3, #2
 8006532:	d12f      	bne.n	8006594 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006536:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800653a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800653e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006542:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	68b9      	ldr	r1, [r7, #8]
 8006548:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800654a:	f000 f911 	bl	8006770 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800654e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006556:	d112      	bne.n	800657e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	2b00      	cmp	r3, #0
 800655e:	d016      	beq.n	800658e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006562:	3324      	adds	r3, #36	; 0x24
 8006564:	4618      	mov	r0, r3
 8006566:	f000 fed1 	bl	800730c <xTaskRemoveFromEventList>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00e      	beq.n	800658e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00b      	beq.n	800658e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	e007      	b.n	800658e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800657e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006582:	3301      	adds	r3, #1
 8006584:	b2db      	uxtb	r3, r3
 8006586:	b25a      	sxtb	r2, r3
 8006588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800658e:	2301      	movs	r3, #1
 8006590:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006592:	e001      	b.n	8006598 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006594:	2300      	movs	r3, #0
 8006596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800659a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80065a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80065a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3740      	adds	r7, #64	; 0x40
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
	...

080065b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08c      	sub	sp, #48	; 0x30
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80065bc:	2300      	movs	r3, #0
 80065be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10a      	bne.n	80065e0 <xQueueReceive+0x30>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	623b      	str	r3, [r7, #32]
}
 80065dc:	bf00      	nop
 80065de:	e7fe      	b.n	80065de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d103      	bne.n	80065ee <xQueueReceive+0x3e>
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <xQueueReceive+0x42>
 80065ee:	2301      	movs	r3, #1
 80065f0:	e000      	b.n	80065f4 <xQueueReceive+0x44>
 80065f2:	2300      	movs	r3, #0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10a      	bne.n	800660e <xQueueReceive+0x5e>
	__asm volatile
 80065f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	61fb      	str	r3, [r7, #28]
}
 800660a:	bf00      	nop
 800660c:	e7fe      	b.n	800660c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800660e:	f001 f83b 	bl	8007688 <xTaskGetSchedulerState>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d102      	bne.n	800661e <xQueueReceive+0x6e>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <xQueueReceive+0x72>
 800661e:	2301      	movs	r3, #1
 8006620:	e000      	b.n	8006624 <xQueueReceive+0x74>
 8006622:	2300      	movs	r3, #0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10a      	bne.n	800663e <xQueueReceive+0x8e>
	__asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	61bb      	str	r3, [r7, #24]
}
 800663a:	bf00      	nop
 800663c:	e7fe      	b.n	800663c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800663e:	f001 fd81 	bl	8008144 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	2b00      	cmp	r3, #0
 800664c:	d01f      	beq.n	800668e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800664e:	68b9      	ldr	r1, [r7, #8]
 8006650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006652:	f000 f8f7 	bl	8006844 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	1e5a      	subs	r2, r3, #1
 800665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00f      	beq.n	8006686 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	3310      	adds	r3, #16
 800666a:	4618      	mov	r0, r3
 800666c:	f000 fe4e 	bl	800730c <xTaskRemoveFromEventList>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d007      	beq.n	8006686 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006676:	4b3d      	ldr	r3, [pc, #244]	; (800676c <xQueueReceive+0x1bc>)
 8006678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006686:	f001 fd8d 	bl	80081a4 <vPortExitCritical>
				return pdPASS;
 800668a:	2301      	movs	r3, #1
 800668c:	e069      	b.n	8006762 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d103      	bne.n	800669c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006694:	f001 fd86 	bl	80081a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006698:	2300      	movs	r3, #0
 800669a:	e062      	b.n	8006762 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800669c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d106      	bne.n	80066b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066a2:	f107 0310 	add.w	r3, r7, #16
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 fe94 	bl	80073d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066ac:	2301      	movs	r3, #1
 80066ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066b0:	f001 fd78 	bl	80081a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066b4:	f000 fc06 	bl	8006ec4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066b8:	f001 fd44 	bl	8008144 <vPortEnterCritical>
 80066bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066c2:	b25b      	sxtb	r3, r3
 80066c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c8:	d103      	bne.n	80066d2 <xQueueReceive+0x122>
 80066ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066d8:	b25b      	sxtb	r3, r3
 80066da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066de:	d103      	bne.n	80066e8 <xQueueReceive+0x138>
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066e8:	f001 fd5c 	bl	80081a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066ec:	1d3a      	adds	r2, r7, #4
 80066ee:	f107 0310 	add.w	r3, r7, #16
 80066f2:	4611      	mov	r1, r2
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 fe83 	bl	8007400 <xTaskCheckForTimeOut>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d123      	bne.n	8006748 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006702:	f000 f917 	bl	8006934 <prvIsQueueEmpty>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d017      	beq.n	800673c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	3324      	adds	r3, #36	; 0x24
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	4611      	mov	r1, r2
 8006714:	4618      	mov	r0, r3
 8006716:	f000 fda9 	bl	800726c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800671a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800671c:	f000 f8b8 	bl	8006890 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006720:	f000 fbde 	bl	8006ee0 <xTaskResumeAll>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d189      	bne.n	800663e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800672a:	4b10      	ldr	r3, [pc, #64]	; (800676c <xQueueReceive+0x1bc>)
 800672c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	e780      	b.n	800663e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800673c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800673e:	f000 f8a7 	bl	8006890 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006742:	f000 fbcd 	bl	8006ee0 <xTaskResumeAll>
 8006746:	e77a      	b.n	800663e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800674a:	f000 f8a1 	bl	8006890 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800674e:	f000 fbc7 	bl	8006ee0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006754:	f000 f8ee 	bl	8006934 <prvIsQueueEmpty>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	f43f af6f 	beq.w	800663e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006760:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006762:	4618      	mov	r0, r3
 8006764:	3730      	adds	r7, #48	; 0x30
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	e000ed04 	.word	0xe000ed04

08006770 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800677c:	2300      	movs	r3, #0
 800677e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006784:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10d      	bne.n	80067aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d14d      	bne.n	8006832 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	4618      	mov	r0, r3
 800679c:	f000 ff92 	bl	80076c4 <xTaskPriorityDisinherit>
 80067a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	609a      	str	r2, [r3, #8]
 80067a8:	e043      	b.n	8006832 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d119      	bne.n	80067e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6858      	ldr	r0, [r3, #4]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b8:	461a      	mov	r2, r3
 80067ba:	68b9      	ldr	r1, [r7, #8]
 80067bc:	f002 fa2a 	bl	8008c14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c8:	441a      	add	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d32b      	bcc.n	8006832 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	605a      	str	r2, [r3, #4]
 80067e2:	e026      	b.n	8006832 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	68d8      	ldr	r0, [r3, #12]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ec:	461a      	mov	r2, r3
 80067ee:	68b9      	ldr	r1, [r7, #8]
 80067f0:	f002 fa10 	bl	8008c14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	68da      	ldr	r2, [r3, #12]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fc:	425b      	negs	r3, r3
 80067fe:	441a      	add	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	68da      	ldr	r2, [r3, #12]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	429a      	cmp	r2, r3
 800680e:	d207      	bcs.n	8006820 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	689a      	ldr	r2, [r3, #8]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006818:	425b      	negs	r3, r3
 800681a:	441a      	add	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b02      	cmp	r3, #2
 8006824:	d105      	bne.n	8006832 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	3b01      	subs	r3, #1
 8006830:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	1c5a      	adds	r2, r3, #1
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800683a:	697b      	ldr	r3, [r7, #20]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	2b00      	cmp	r3, #0
 8006854:	d018      	beq.n	8006888 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	441a      	add	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68da      	ldr	r2, [r3, #12]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	429a      	cmp	r2, r3
 800686e:	d303      	bcc.n	8006878 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68d9      	ldr	r1, [r3, #12]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006880:	461a      	mov	r2, r3
 8006882:	6838      	ldr	r0, [r7, #0]
 8006884:	f002 f9c6 	bl	8008c14 <memcpy>
	}
}
 8006888:	bf00      	nop
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006898:	f001 fc54 	bl	8008144 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068a4:	e011      	b.n	80068ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d012      	beq.n	80068d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	3324      	adds	r3, #36	; 0x24
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fd2a 	bl	800730c <xTaskRemoveFromEventList>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80068be:	f000 fe01 	bl	80074c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	dce9      	bgt.n	80068a6 <prvUnlockQueue+0x16>
 80068d2:	e000      	b.n	80068d6 <prvUnlockQueue+0x46>
					break;
 80068d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	22ff      	movs	r2, #255	; 0xff
 80068da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80068de:	f001 fc61 	bl	80081a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80068e2:	f001 fc2f 	bl	8008144 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068ee:	e011      	b.n	8006914 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d012      	beq.n	800691e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	3310      	adds	r3, #16
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 fd05 	bl	800730c <xTaskRemoveFromEventList>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006908:	f000 fddc 	bl	80074c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800690c:	7bbb      	ldrb	r3, [r7, #14]
 800690e:	3b01      	subs	r3, #1
 8006910:	b2db      	uxtb	r3, r3
 8006912:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006914:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006918:	2b00      	cmp	r3, #0
 800691a:	dce9      	bgt.n	80068f0 <prvUnlockQueue+0x60>
 800691c:	e000      	b.n	8006920 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800691e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	22ff      	movs	r2, #255	; 0xff
 8006924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006928:	f001 fc3c 	bl	80081a4 <vPortExitCritical>
}
 800692c:	bf00      	nop
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800693c:	f001 fc02 	bl	8008144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006944:	2b00      	cmp	r3, #0
 8006946:	d102      	bne.n	800694e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006948:	2301      	movs	r3, #1
 800694a:	60fb      	str	r3, [r7, #12]
 800694c:	e001      	b.n	8006952 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800694e:	2300      	movs	r3, #0
 8006950:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006952:	f001 fc27 	bl	80081a4 <vPortExitCritical>

	return xReturn;
 8006956:	68fb      	ldr	r3, [r7, #12]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006968:	f001 fbec 	bl	8008144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006974:	429a      	cmp	r2, r3
 8006976:	d102      	bne.n	800697e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006978:	2301      	movs	r3, #1
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	e001      	b.n	8006982 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800697e:	2300      	movs	r3, #0
 8006980:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006982:	f001 fc0f 	bl	80081a4 <vPortExitCritical>

	return xReturn;
 8006986:	68fb      	ldr	r3, [r7, #12]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800699a:	2300      	movs	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]
 800699e:	e014      	b.n	80069ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80069a0:	4a0f      	ldr	r2, [pc, #60]	; (80069e0 <vQueueAddToRegistry+0x50>)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10b      	bne.n	80069c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80069ac:	490c      	ldr	r1, [pc, #48]	; (80069e0 <vQueueAddToRegistry+0x50>)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	683a      	ldr	r2, [r7, #0]
 80069b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80069b6:	4a0a      	ldr	r2, [pc, #40]	; (80069e0 <vQueueAddToRegistry+0x50>)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	00db      	lsls	r3, r3, #3
 80069bc:	4413      	add	r3, r2
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80069c2:	e006      	b.n	80069d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3301      	adds	r3, #1
 80069c8:	60fb      	str	r3, [r7, #12]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2b07      	cmp	r3, #7
 80069ce:	d9e7      	bls.n	80069a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80069d0:	bf00      	nop
 80069d2:	bf00      	nop
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	20004bc4 	.word	0x20004bc4

080069e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80069f4:	f001 fba6 	bl	8008144 <vPortEnterCritical>
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069fe:	b25b      	sxtb	r3, r3
 8006a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a04:	d103      	bne.n	8006a0e <vQueueWaitForMessageRestricted+0x2a>
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a14:	b25b      	sxtb	r3, r3
 8006a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1a:	d103      	bne.n	8006a24 <vQueueWaitForMessageRestricted+0x40>
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a24:	f001 fbbe 	bl	80081a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d106      	bne.n	8006a3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	3324      	adds	r3, #36	; 0x24
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	68b9      	ldr	r1, [r7, #8]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 fc3b 	bl	80072b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a3e:	6978      	ldr	r0, [r7, #20]
 8006a40:	f7ff ff26 	bl	8006890 <prvUnlockQueue>
	}
 8006a44:	bf00      	nop
 8006a46:	3718      	adds	r7, #24
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b08e      	sub	sp, #56	; 0x38
 8006a50:	af04      	add	r7, sp, #16
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
 8006a58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10a      	bne.n	8006a76 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	623b      	str	r3, [r7, #32]
}
 8006a72:	bf00      	nop
 8006a74:	e7fe      	b.n	8006a74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10a      	bne.n	8006a92 <xTaskCreateStatic+0x46>
	__asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	61fb      	str	r3, [r7, #28]
}
 8006a8e:	bf00      	nop
 8006a90:	e7fe      	b.n	8006a90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a92:	235c      	movs	r3, #92	; 0x5c
 8006a94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	2b5c      	cmp	r3, #92	; 0x5c
 8006a9a:	d00a      	beq.n	8006ab2 <xTaskCreateStatic+0x66>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	61bb      	str	r3, [r7, #24]
}
 8006aae:	bf00      	nop
 8006ab0:	e7fe      	b.n	8006ab0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ab2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d01e      	beq.n	8006af8 <xTaskCreateStatic+0xac>
 8006aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d01b      	beq.n	8006af8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ac8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	2202      	movs	r2, #2
 8006ace:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	9303      	str	r3, [sp, #12]
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	9302      	str	r3, [sp, #8]
 8006ada:	f107 0314 	add.w	r3, r7, #20
 8006ade:	9301      	str	r3, [sp, #4]
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	68b9      	ldr	r1, [r7, #8]
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f000 f850 	bl	8006b90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006af0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006af2:	f000 f8dd 	bl	8006cb0 <prvAddNewTaskToReadyList>
 8006af6:	e001      	b.n	8006afc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006af8:	2300      	movs	r3, #0
 8006afa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006afc:	697b      	ldr	r3, [r7, #20]
	}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3728      	adds	r7, #40	; 0x28
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b08c      	sub	sp, #48	; 0x30
 8006b0a:	af04      	add	r7, sp, #16
 8006b0c:	60f8      	str	r0, [r7, #12]
 8006b0e:	60b9      	str	r1, [r7, #8]
 8006b10:	603b      	str	r3, [r7, #0]
 8006b12:	4613      	mov	r3, r2
 8006b14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b16:	88fb      	ldrh	r3, [r7, #6]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f001 fc34 	bl	8008388 <pvPortMalloc>
 8006b20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00e      	beq.n	8006b46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b28:	205c      	movs	r0, #92	; 0x5c
 8006b2a:	f001 fc2d 	bl	8008388 <pvPortMalloc>
 8006b2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	631a      	str	r2, [r3, #48]	; 0x30
 8006b3c:	e005      	b.n	8006b4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b3e:	6978      	ldr	r0, [r7, #20]
 8006b40:	f001 fcee 	bl	8008520 <vPortFree>
 8006b44:	e001      	b.n	8006b4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b46:	2300      	movs	r3, #0
 8006b48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d017      	beq.n	8006b80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b58:	88fa      	ldrh	r2, [r7, #6]
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	9303      	str	r3, [sp, #12]
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	9302      	str	r3, [sp, #8]
 8006b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b64:	9301      	str	r3, [sp, #4]
 8006b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b68:	9300      	str	r3, [sp, #0]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	68b9      	ldr	r1, [r7, #8]
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f000 f80e 	bl	8006b90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b74:	69f8      	ldr	r0, [r7, #28]
 8006b76:	f000 f89b 	bl	8006cb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	61bb      	str	r3, [r7, #24]
 8006b7e:	e002      	b.n	8006b86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b80:	f04f 33ff 	mov.w	r3, #4294967295
 8006b84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b86:	69bb      	ldr	r3, [r7, #24]
	}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3720      	adds	r7, #32
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	21a5      	movs	r1, #165	; 0xa5
 8006baa:	f002 f841 	bl	8008c30 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	f023 0307 	bic.w	r3, r3, #7
 8006bc6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	f003 0307 	and.w	r3, r3, #7
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00a      	beq.n	8006be8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	617b      	str	r3, [r7, #20]
}
 8006be4:	bf00      	nop
 8006be6:	e7fe      	b.n	8006be6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d01f      	beq.n	8006c2e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bee:	2300      	movs	r3, #0
 8006bf0:	61fb      	str	r3, [r7, #28]
 8006bf2:	e012      	b.n	8006c1a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	7819      	ldrb	r1, [r3, #0]
 8006bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	4413      	add	r3, r2
 8006c02:	3334      	adds	r3, #52	; 0x34
 8006c04:	460a      	mov	r2, r1
 8006c06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d006      	beq.n	8006c22 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	3301      	adds	r3, #1
 8006c18:	61fb      	str	r3, [r7, #28]
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	2b0f      	cmp	r3, #15
 8006c1e:	d9e9      	bls.n	8006bf4 <prvInitialiseNewTask+0x64>
 8006c20:	e000      	b.n	8006c24 <prvInitialiseNewTask+0x94>
			{
				break;
 8006c22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c2c:	e003      	b.n	8006c36 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c38:	2b37      	cmp	r3, #55	; 0x37
 8006c3a:	d901      	bls.n	8006c40 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c3c:	2337      	movs	r3, #55	; 0x37
 8006c3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c4a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4e:	2200      	movs	r2, #0
 8006c50:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	3304      	adds	r3, #4
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7ff f978 	bl	8005f4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5e:	3318      	adds	r3, #24
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7ff f973 	bl	8005f4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7e:	2200      	movs	r2, #0
 8006c80:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	68f9      	ldr	r1, [r7, #12]
 8006c8e:	69b8      	ldr	r0, [r7, #24]
 8006c90:	f001 f928 	bl	8007ee4 <pxPortInitialiseStack>
 8006c94:	4602      	mov	r2, r0
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ca6:	bf00      	nop
 8006ca8:	3720      	adds	r7, #32
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006cb8:	f001 fa44 	bl	8008144 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006cbc:	4b2d      	ldr	r3, [pc, #180]	; (8006d74 <prvAddNewTaskToReadyList+0xc4>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	4a2c      	ldr	r2, [pc, #176]	; (8006d74 <prvAddNewTaskToReadyList+0xc4>)
 8006cc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006cc6:	4b2c      	ldr	r3, [pc, #176]	; (8006d78 <prvAddNewTaskToReadyList+0xc8>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d109      	bne.n	8006ce2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006cce:	4a2a      	ldr	r2, [pc, #168]	; (8006d78 <prvAddNewTaskToReadyList+0xc8>)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cd4:	4b27      	ldr	r3, [pc, #156]	; (8006d74 <prvAddNewTaskToReadyList+0xc4>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d110      	bne.n	8006cfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006cdc:	f000 fc16 	bl	800750c <prvInitialiseTaskLists>
 8006ce0:	e00d      	b.n	8006cfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ce2:	4b26      	ldr	r3, [pc, #152]	; (8006d7c <prvAddNewTaskToReadyList+0xcc>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d109      	bne.n	8006cfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cea:	4b23      	ldr	r3, [pc, #140]	; (8006d78 <prvAddNewTaskToReadyList+0xc8>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d802      	bhi.n	8006cfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cf8:	4a1f      	ldr	r2, [pc, #124]	; (8006d78 <prvAddNewTaskToReadyList+0xc8>)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cfe:	4b20      	ldr	r3, [pc, #128]	; (8006d80 <prvAddNewTaskToReadyList+0xd0>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3301      	adds	r3, #1
 8006d04:	4a1e      	ldr	r2, [pc, #120]	; (8006d80 <prvAddNewTaskToReadyList+0xd0>)
 8006d06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006d08:	4b1d      	ldr	r3, [pc, #116]	; (8006d80 <prvAddNewTaskToReadyList+0xd0>)
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d14:	4b1b      	ldr	r3, [pc, #108]	; (8006d84 <prvAddNewTaskToReadyList+0xd4>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d903      	bls.n	8006d24 <prvAddNewTaskToReadyList+0x74>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d20:	4a18      	ldr	r2, [pc, #96]	; (8006d84 <prvAddNewTaskToReadyList+0xd4>)
 8006d22:	6013      	str	r3, [r2, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d28:	4613      	mov	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4a15      	ldr	r2, [pc, #84]	; (8006d88 <prvAddNewTaskToReadyList+0xd8>)
 8006d32:	441a      	add	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3304      	adds	r3, #4
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	f7ff f913 	bl	8005f66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d40:	f001 fa30 	bl	80081a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d44:	4b0d      	ldr	r3, [pc, #52]	; (8006d7c <prvAddNewTaskToReadyList+0xcc>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00e      	beq.n	8006d6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d4c:	4b0a      	ldr	r3, [pc, #40]	; (8006d78 <prvAddNewTaskToReadyList+0xc8>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d207      	bcs.n	8006d6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d5a:	4b0c      	ldr	r3, [pc, #48]	; (8006d8c <prvAddNewTaskToReadyList+0xdc>)
 8006d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20000c4c 	.word	0x20000c4c
 8006d78:	20000778 	.word	0x20000778
 8006d7c:	20000c58 	.word	0x20000c58
 8006d80:	20000c68 	.word	0x20000c68
 8006d84:	20000c54 	.word	0x20000c54
 8006d88:	2000077c 	.word	0x2000077c
 8006d8c:	e000ed04 	.word	0xe000ed04

08006d90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d017      	beq.n	8006dd2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006da2:	4b13      	ldr	r3, [pc, #76]	; (8006df0 <vTaskDelay+0x60>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00a      	beq.n	8006dc0 <vTaskDelay+0x30>
	__asm volatile
 8006daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	60bb      	str	r3, [r7, #8]
}
 8006dbc:	bf00      	nop
 8006dbe:	e7fe      	b.n	8006dbe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006dc0:	f000 f880 	bl	8006ec4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fcea 	bl	80077a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006dcc:	f000 f888 	bl	8006ee0 <xTaskResumeAll>
 8006dd0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d107      	bne.n	8006de8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006dd8:	4b06      	ldr	r3, [pc, #24]	; (8006df4 <vTaskDelay+0x64>)
 8006dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dde:	601a      	str	r2, [r3, #0]
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006de8:	bf00      	nop
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	20000c74 	.word	0x20000c74
 8006df4:	e000ed04 	.word	0xe000ed04

08006df8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08a      	sub	sp, #40	; 0x28
 8006dfc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e02:	2300      	movs	r3, #0
 8006e04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e06:	463a      	mov	r2, r7
 8006e08:	1d39      	adds	r1, r7, #4
 8006e0a:	f107 0308 	add.w	r3, r7, #8
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7ff f848 	bl	8005ea4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	9202      	str	r2, [sp, #8]
 8006e1c:	9301      	str	r3, [sp, #4]
 8006e1e:	2300      	movs	r3, #0
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	2300      	movs	r3, #0
 8006e24:	460a      	mov	r2, r1
 8006e26:	4921      	ldr	r1, [pc, #132]	; (8006eac <vTaskStartScheduler+0xb4>)
 8006e28:	4821      	ldr	r0, [pc, #132]	; (8006eb0 <vTaskStartScheduler+0xb8>)
 8006e2a:	f7ff fe0f 	bl	8006a4c <xTaskCreateStatic>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	4a20      	ldr	r2, [pc, #128]	; (8006eb4 <vTaskStartScheduler+0xbc>)
 8006e32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e34:	4b1f      	ldr	r3, [pc, #124]	; (8006eb4 <vTaskStartScheduler+0xbc>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	617b      	str	r3, [r7, #20]
 8006e40:	e001      	b.n	8006e46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e42:	2300      	movs	r3, #0
 8006e44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d102      	bne.n	8006e52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e4c:	f000 fcfc 	bl	8007848 <xTimerCreateTimerTask>
 8006e50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d116      	bne.n	8006e86 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	613b      	str	r3, [r7, #16]
}
 8006e6a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e6c:	4b12      	ldr	r3, [pc, #72]	; (8006eb8 <vTaskStartScheduler+0xc0>)
 8006e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e74:	4b11      	ldr	r3, [pc, #68]	; (8006ebc <vTaskStartScheduler+0xc4>)
 8006e76:	2201      	movs	r2, #1
 8006e78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e7a:	4b11      	ldr	r3, [pc, #68]	; (8006ec0 <vTaskStartScheduler+0xc8>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e80:	f001 f8be 	bl	8008000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e84:	e00e      	b.n	8006ea4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e8c:	d10a      	bne.n	8006ea4 <vTaskStartScheduler+0xac>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	60fb      	str	r3, [r7, #12]
}
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <vTaskStartScheduler+0xaa>
}
 8006ea4:	bf00      	nop
 8006ea6:	3718      	adds	r7, #24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	0800a444 	.word	0x0800a444
 8006eb0:	080074dd 	.word	0x080074dd
 8006eb4:	20000c70 	.word	0x20000c70
 8006eb8:	20000c6c 	.word	0x20000c6c
 8006ebc:	20000c58 	.word	0x20000c58
 8006ec0:	20000c50 	.word	0x20000c50

08006ec4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ec8:	4b04      	ldr	r3, [pc, #16]	; (8006edc <vTaskSuspendAll+0x18>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	4a03      	ldr	r2, [pc, #12]	; (8006edc <vTaskSuspendAll+0x18>)
 8006ed0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006ed2:	bf00      	nop
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	20000c74 	.word	0x20000c74

08006ee0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006eea:	2300      	movs	r3, #0
 8006eec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006eee:	4b42      	ldr	r3, [pc, #264]	; (8006ff8 <xTaskResumeAll+0x118>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10a      	bne.n	8006f0c <xTaskResumeAll+0x2c>
	__asm volatile
 8006ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efa:	f383 8811 	msr	BASEPRI, r3
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	603b      	str	r3, [r7, #0]
}
 8006f08:	bf00      	nop
 8006f0a:	e7fe      	b.n	8006f0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f0c:	f001 f91a 	bl	8008144 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f10:	4b39      	ldr	r3, [pc, #228]	; (8006ff8 <xTaskResumeAll+0x118>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3b01      	subs	r3, #1
 8006f16:	4a38      	ldr	r2, [pc, #224]	; (8006ff8 <xTaskResumeAll+0x118>)
 8006f18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f1a:	4b37      	ldr	r3, [pc, #220]	; (8006ff8 <xTaskResumeAll+0x118>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d162      	bne.n	8006fe8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f22:	4b36      	ldr	r3, [pc, #216]	; (8006ffc <xTaskResumeAll+0x11c>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d05e      	beq.n	8006fe8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f2a:	e02f      	b.n	8006f8c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f2c:	4b34      	ldr	r3, [pc, #208]	; (8007000 <xTaskResumeAll+0x120>)
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	3318      	adds	r3, #24
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7ff f871 	bl	8006020 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	3304      	adds	r3, #4
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7ff f86c 	bl	8006020 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f4c:	4b2d      	ldr	r3, [pc, #180]	; (8007004 <xTaskResumeAll+0x124>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d903      	bls.n	8006f5c <xTaskResumeAll+0x7c>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f58:	4a2a      	ldr	r2, [pc, #168]	; (8007004 <xTaskResumeAll+0x124>)
 8006f5a:	6013      	str	r3, [r2, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f60:	4613      	mov	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4a27      	ldr	r2, [pc, #156]	; (8007008 <xTaskResumeAll+0x128>)
 8006f6a:	441a      	add	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	3304      	adds	r3, #4
 8006f70:	4619      	mov	r1, r3
 8006f72:	4610      	mov	r0, r2
 8006f74:	f7fe fff7 	bl	8005f66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f7c:	4b23      	ldr	r3, [pc, #140]	; (800700c <xTaskResumeAll+0x12c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d302      	bcc.n	8006f8c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f86:	4b22      	ldr	r3, [pc, #136]	; (8007010 <xTaskResumeAll+0x130>)
 8006f88:	2201      	movs	r2, #1
 8006f8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f8c:	4b1c      	ldr	r3, [pc, #112]	; (8007000 <xTaskResumeAll+0x120>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1cb      	bne.n	8006f2c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f9a:	f000 fb55 	bl	8007648 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f9e:	4b1d      	ldr	r3, [pc, #116]	; (8007014 <xTaskResumeAll+0x134>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d010      	beq.n	8006fcc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006faa:	f000 f847 	bl	800703c <xTaskIncrementTick>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006fb4:	4b16      	ldr	r3, [pc, #88]	; (8007010 <xTaskResumeAll+0x130>)
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1f1      	bne.n	8006faa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006fc6:	4b13      	ldr	r3, [pc, #76]	; (8007014 <xTaskResumeAll+0x134>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006fcc:	4b10      	ldr	r3, [pc, #64]	; (8007010 <xTaskResumeAll+0x130>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d009      	beq.n	8006fe8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fd8:	4b0f      	ldr	r3, [pc, #60]	; (8007018 <xTaskResumeAll+0x138>)
 8006fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fde:	601a      	str	r2, [r3, #0]
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fe8:	f001 f8dc 	bl	80081a4 <vPortExitCritical>

	return xAlreadyYielded;
 8006fec:	68bb      	ldr	r3, [r7, #8]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20000c74 	.word	0x20000c74
 8006ffc:	20000c4c 	.word	0x20000c4c
 8007000:	20000c0c 	.word	0x20000c0c
 8007004:	20000c54 	.word	0x20000c54
 8007008:	2000077c 	.word	0x2000077c
 800700c:	20000778 	.word	0x20000778
 8007010:	20000c60 	.word	0x20000c60
 8007014:	20000c5c 	.word	0x20000c5c
 8007018:	e000ed04 	.word	0xe000ed04

0800701c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007022:	4b05      	ldr	r3, [pc, #20]	; (8007038 <xTaskGetTickCount+0x1c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007028:	687b      	ldr	r3, [r7, #4]
}
 800702a:	4618      	mov	r0, r3
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	20000c50 	.word	0x20000c50

0800703c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007042:	2300      	movs	r3, #0
 8007044:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007046:	4b4f      	ldr	r3, [pc, #316]	; (8007184 <xTaskIncrementTick+0x148>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	f040 808f 	bne.w	800716e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007050:	4b4d      	ldr	r3, [pc, #308]	; (8007188 <xTaskIncrementTick+0x14c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3301      	adds	r3, #1
 8007056:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007058:	4a4b      	ldr	r2, [pc, #300]	; (8007188 <xTaskIncrementTick+0x14c>)
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d120      	bne.n	80070a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007064:	4b49      	ldr	r3, [pc, #292]	; (800718c <xTaskIncrementTick+0x150>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <xTaskIncrementTick+0x48>
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	603b      	str	r3, [r7, #0]
}
 8007080:	bf00      	nop
 8007082:	e7fe      	b.n	8007082 <xTaskIncrementTick+0x46>
 8007084:	4b41      	ldr	r3, [pc, #260]	; (800718c <xTaskIncrementTick+0x150>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	60fb      	str	r3, [r7, #12]
 800708a:	4b41      	ldr	r3, [pc, #260]	; (8007190 <xTaskIncrementTick+0x154>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a3f      	ldr	r2, [pc, #252]	; (800718c <xTaskIncrementTick+0x150>)
 8007090:	6013      	str	r3, [r2, #0]
 8007092:	4a3f      	ldr	r2, [pc, #252]	; (8007190 <xTaskIncrementTick+0x154>)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6013      	str	r3, [r2, #0]
 8007098:	4b3e      	ldr	r3, [pc, #248]	; (8007194 <xTaskIncrementTick+0x158>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	3301      	adds	r3, #1
 800709e:	4a3d      	ldr	r2, [pc, #244]	; (8007194 <xTaskIncrementTick+0x158>)
 80070a0:	6013      	str	r3, [r2, #0]
 80070a2:	f000 fad1 	bl	8007648 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80070a6:	4b3c      	ldr	r3, [pc, #240]	; (8007198 <xTaskIncrementTick+0x15c>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d349      	bcc.n	8007144 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070b0:	4b36      	ldr	r3, [pc, #216]	; (800718c <xTaskIncrementTick+0x150>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d104      	bne.n	80070c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070ba:	4b37      	ldr	r3, [pc, #220]	; (8007198 <xTaskIncrementTick+0x15c>)
 80070bc:	f04f 32ff 	mov.w	r2, #4294967295
 80070c0:	601a      	str	r2, [r3, #0]
					break;
 80070c2:	e03f      	b.n	8007144 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070c4:	4b31      	ldr	r3, [pc, #196]	; (800718c <xTaskIncrementTick+0x150>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d203      	bcs.n	80070e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070dc:	4a2e      	ldr	r2, [pc, #184]	; (8007198 <xTaskIncrementTick+0x15c>)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070e2:	e02f      	b.n	8007144 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	3304      	adds	r3, #4
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fe ff99 	bl	8006020 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d004      	beq.n	8007100 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	3318      	adds	r3, #24
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fe ff90 	bl	8006020 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007104:	4b25      	ldr	r3, [pc, #148]	; (800719c <xTaskIncrementTick+0x160>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	429a      	cmp	r2, r3
 800710a:	d903      	bls.n	8007114 <xTaskIncrementTick+0xd8>
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007110:	4a22      	ldr	r2, [pc, #136]	; (800719c <xTaskIncrementTick+0x160>)
 8007112:	6013      	str	r3, [r2, #0]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007118:	4613      	mov	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4a1f      	ldr	r2, [pc, #124]	; (80071a0 <xTaskIncrementTick+0x164>)
 8007122:	441a      	add	r2, r3
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	3304      	adds	r3, #4
 8007128:	4619      	mov	r1, r3
 800712a:	4610      	mov	r0, r2
 800712c:	f7fe ff1b 	bl	8005f66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007134:	4b1b      	ldr	r3, [pc, #108]	; (80071a4 <xTaskIncrementTick+0x168>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713a:	429a      	cmp	r2, r3
 800713c:	d3b8      	bcc.n	80070b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800713e:	2301      	movs	r3, #1
 8007140:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007142:	e7b5      	b.n	80070b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007144:	4b17      	ldr	r3, [pc, #92]	; (80071a4 <xTaskIncrementTick+0x168>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800714a:	4915      	ldr	r1, [pc, #84]	; (80071a0 <xTaskIncrementTick+0x164>)
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	440b      	add	r3, r1
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d901      	bls.n	8007160 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800715c:	2301      	movs	r3, #1
 800715e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007160:	4b11      	ldr	r3, [pc, #68]	; (80071a8 <xTaskIncrementTick+0x16c>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d007      	beq.n	8007178 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007168:	2301      	movs	r3, #1
 800716a:	617b      	str	r3, [r7, #20]
 800716c:	e004      	b.n	8007178 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800716e:	4b0f      	ldr	r3, [pc, #60]	; (80071ac <xTaskIncrementTick+0x170>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3301      	adds	r3, #1
 8007174:	4a0d      	ldr	r2, [pc, #52]	; (80071ac <xTaskIncrementTick+0x170>)
 8007176:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007178:	697b      	ldr	r3, [r7, #20]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	20000c74 	.word	0x20000c74
 8007188:	20000c50 	.word	0x20000c50
 800718c:	20000c04 	.word	0x20000c04
 8007190:	20000c08 	.word	0x20000c08
 8007194:	20000c64 	.word	0x20000c64
 8007198:	20000c6c 	.word	0x20000c6c
 800719c:	20000c54 	.word	0x20000c54
 80071a0:	2000077c 	.word	0x2000077c
 80071a4:	20000778 	.word	0x20000778
 80071a8:	20000c60 	.word	0x20000c60
 80071ac:	20000c5c 	.word	0x20000c5c

080071b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071b6:	4b28      	ldr	r3, [pc, #160]	; (8007258 <vTaskSwitchContext+0xa8>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d003      	beq.n	80071c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071be:	4b27      	ldr	r3, [pc, #156]	; (800725c <vTaskSwitchContext+0xac>)
 80071c0:	2201      	movs	r2, #1
 80071c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071c4:	e041      	b.n	800724a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80071c6:	4b25      	ldr	r3, [pc, #148]	; (800725c <vTaskSwitchContext+0xac>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071cc:	4b24      	ldr	r3, [pc, #144]	; (8007260 <vTaskSwitchContext+0xb0>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	60fb      	str	r3, [r7, #12]
 80071d2:	e010      	b.n	80071f6 <vTaskSwitchContext+0x46>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10a      	bne.n	80071f0 <vTaskSwitchContext+0x40>
	__asm volatile
 80071da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	607b      	str	r3, [r7, #4]
}
 80071ec:	bf00      	nop
 80071ee:	e7fe      	b.n	80071ee <vTaskSwitchContext+0x3e>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	60fb      	str	r3, [r7, #12]
 80071f6:	491b      	ldr	r1, [pc, #108]	; (8007264 <vTaskSwitchContext+0xb4>)
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	4613      	mov	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	440b      	add	r3, r1
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d0e4      	beq.n	80071d4 <vTaskSwitchContext+0x24>
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	4613      	mov	r3, r2
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4413      	add	r3, r2
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4a13      	ldr	r2, [pc, #76]	; (8007264 <vTaskSwitchContext+0xb4>)
 8007216:	4413      	add	r3, r2
 8007218:	60bb      	str	r3, [r7, #8]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	605a      	str	r2, [r3, #4]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	3308      	adds	r3, #8
 800722c:	429a      	cmp	r2, r3
 800722e:	d104      	bne.n	800723a <vTaskSwitchContext+0x8a>
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	605a      	str	r2, [r3, #4]
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	4a09      	ldr	r2, [pc, #36]	; (8007268 <vTaskSwitchContext+0xb8>)
 8007242:	6013      	str	r3, [r2, #0]
 8007244:	4a06      	ldr	r2, [pc, #24]	; (8007260 <vTaskSwitchContext+0xb0>)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6013      	str	r3, [r2, #0]
}
 800724a:	bf00      	nop
 800724c:	3714      	adds	r7, #20
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	20000c74 	.word	0x20000c74
 800725c:	20000c60 	.word	0x20000c60
 8007260:	20000c54 	.word	0x20000c54
 8007264:	2000077c 	.word	0x2000077c
 8007268:	20000778 	.word	0x20000778

0800726c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10a      	bne.n	8007292 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800727c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	60fb      	str	r3, [r7, #12]
}
 800728e:	bf00      	nop
 8007290:	e7fe      	b.n	8007290 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007292:	4b07      	ldr	r3, [pc, #28]	; (80072b0 <vTaskPlaceOnEventList+0x44>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3318      	adds	r3, #24
 8007298:	4619      	mov	r1, r3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7fe fe87 	bl	8005fae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072a0:	2101      	movs	r1, #1
 80072a2:	6838      	ldr	r0, [r7, #0]
 80072a4:	f000 fa7c 	bl	80077a0 <prvAddCurrentTaskToDelayedList>
}
 80072a8:	bf00      	nop
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	20000778 	.word	0x20000778

080072b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10a      	bne.n	80072dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80072c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ca:	f383 8811 	msr	BASEPRI, r3
 80072ce:	f3bf 8f6f 	isb	sy
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	617b      	str	r3, [r7, #20]
}
 80072d8:	bf00      	nop
 80072da:	e7fe      	b.n	80072da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072dc:	4b0a      	ldr	r3, [pc, #40]	; (8007308 <vTaskPlaceOnEventListRestricted+0x54>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	3318      	adds	r3, #24
 80072e2:	4619      	mov	r1, r3
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f7fe fe3e 	bl	8005f66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80072f0:	f04f 33ff 	mov.w	r3, #4294967295
 80072f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072f6:	6879      	ldr	r1, [r7, #4]
 80072f8:	68b8      	ldr	r0, [r7, #8]
 80072fa:	f000 fa51 	bl	80077a0 <prvAddCurrentTaskToDelayedList>
	}
 80072fe:	bf00      	nop
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20000778 	.word	0x20000778

0800730c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10a      	bne.n	8007338 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	60fb      	str	r3, [r7, #12]
}
 8007334:	bf00      	nop
 8007336:	e7fe      	b.n	8007336 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	3318      	adds	r3, #24
 800733c:	4618      	mov	r0, r3
 800733e:	f7fe fe6f 	bl	8006020 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007342:	4b1e      	ldr	r3, [pc, #120]	; (80073bc <xTaskRemoveFromEventList+0xb0>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d11d      	bne.n	8007386 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	3304      	adds	r3, #4
 800734e:	4618      	mov	r0, r3
 8007350:	f7fe fe66 	bl	8006020 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007358:	4b19      	ldr	r3, [pc, #100]	; (80073c0 <xTaskRemoveFromEventList+0xb4>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	429a      	cmp	r2, r3
 800735e:	d903      	bls.n	8007368 <xTaskRemoveFromEventList+0x5c>
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007364:	4a16      	ldr	r2, [pc, #88]	; (80073c0 <xTaskRemoveFromEventList+0xb4>)
 8007366:	6013      	str	r3, [r2, #0]
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736c:	4613      	mov	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4a13      	ldr	r2, [pc, #76]	; (80073c4 <xTaskRemoveFromEventList+0xb8>)
 8007376:	441a      	add	r2, r3
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	3304      	adds	r3, #4
 800737c:	4619      	mov	r1, r3
 800737e:	4610      	mov	r0, r2
 8007380:	f7fe fdf1 	bl	8005f66 <vListInsertEnd>
 8007384:	e005      	b.n	8007392 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	3318      	adds	r3, #24
 800738a:	4619      	mov	r1, r3
 800738c:	480e      	ldr	r0, [pc, #56]	; (80073c8 <xTaskRemoveFromEventList+0xbc>)
 800738e:	f7fe fdea 	bl	8005f66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007396:	4b0d      	ldr	r3, [pc, #52]	; (80073cc <xTaskRemoveFromEventList+0xc0>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739c:	429a      	cmp	r2, r3
 800739e:	d905      	bls.n	80073ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073a0:	2301      	movs	r3, #1
 80073a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80073a4:	4b0a      	ldr	r3, [pc, #40]	; (80073d0 <xTaskRemoveFromEventList+0xc4>)
 80073a6:	2201      	movs	r2, #1
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	e001      	b.n	80073b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80073ac:	2300      	movs	r3, #0
 80073ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80073b0:	697b      	ldr	r3, [r7, #20]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3718      	adds	r7, #24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20000c74 	.word	0x20000c74
 80073c0:	20000c54 	.word	0x20000c54
 80073c4:	2000077c 	.word	0x2000077c
 80073c8:	20000c0c 	.word	0x20000c0c
 80073cc:	20000778 	.word	0x20000778
 80073d0:	20000c60 	.word	0x20000c60

080073d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073dc:	4b06      	ldr	r3, [pc, #24]	; (80073f8 <vTaskInternalSetTimeOutState+0x24>)
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073e4:	4b05      	ldr	r3, [pc, #20]	; (80073fc <vTaskInternalSetTimeOutState+0x28>)
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	605a      	str	r2, [r3, #4]
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	20000c64 	.word	0x20000c64
 80073fc:	20000c50 	.word	0x20000c50

08007400 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10a      	bne.n	8007426 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	613b      	str	r3, [r7, #16]
}
 8007422:	bf00      	nop
 8007424:	e7fe      	b.n	8007424 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10a      	bne.n	8007442 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	60fb      	str	r3, [r7, #12]
}
 800743e:	bf00      	nop
 8007440:	e7fe      	b.n	8007440 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007442:	f000 fe7f 	bl	8008144 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007446:	4b1d      	ldr	r3, [pc, #116]	; (80074bc <xTaskCheckForTimeOut+0xbc>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745e:	d102      	bne.n	8007466 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007460:	2300      	movs	r3, #0
 8007462:	61fb      	str	r3, [r7, #28]
 8007464:	e023      	b.n	80074ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	4b15      	ldr	r3, [pc, #84]	; (80074c0 <xTaskCheckForTimeOut+0xc0>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d007      	beq.n	8007482 <xTaskCheckForTimeOut+0x82>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	69ba      	ldr	r2, [r7, #24]
 8007478:	429a      	cmp	r2, r3
 800747a:	d302      	bcc.n	8007482 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800747c:	2301      	movs	r3, #1
 800747e:	61fb      	str	r3, [r7, #28]
 8007480:	e015      	b.n	80074ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	429a      	cmp	r2, r3
 800748a:	d20b      	bcs.n	80074a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	1ad2      	subs	r2, r2, r3
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7ff ff9b 	bl	80073d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800749e:	2300      	movs	r3, #0
 80074a0:	61fb      	str	r3, [r7, #28]
 80074a2:	e004      	b.n	80074ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2200      	movs	r2, #0
 80074a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80074aa:	2301      	movs	r3, #1
 80074ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074ae:	f000 fe79 	bl	80081a4 <vPortExitCritical>

	return xReturn;
 80074b2:	69fb      	ldr	r3, [r7, #28]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3720      	adds	r7, #32
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	20000c50 	.word	0x20000c50
 80074c0:	20000c64 	.word	0x20000c64

080074c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074c4:	b480      	push	{r7}
 80074c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074c8:	4b03      	ldr	r3, [pc, #12]	; (80074d8 <vTaskMissedYield+0x14>)
 80074ca:	2201      	movs	r2, #1
 80074cc:	601a      	str	r2, [r3, #0]
}
 80074ce:	bf00      	nop
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	20000c60 	.word	0x20000c60

080074dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074e4:	f000 f852 	bl	800758c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074e8:	4b06      	ldr	r3, [pc, #24]	; (8007504 <prvIdleTask+0x28>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d9f9      	bls.n	80074e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074f0:	4b05      	ldr	r3, [pc, #20]	; (8007508 <prvIdleTask+0x2c>)
 80074f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007500:	e7f0      	b.n	80074e4 <prvIdleTask+0x8>
 8007502:	bf00      	nop
 8007504:	2000077c 	.word	0x2000077c
 8007508:	e000ed04 	.word	0xe000ed04

0800750c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007512:	2300      	movs	r3, #0
 8007514:	607b      	str	r3, [r7, #4]
 8007516:	e00c      	b.n	8007532 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	4613      	mov	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4a12      	ldr	r2, [pc, #72]	; (800756c <prvInitialiseTaskLists+0x60>)
 8007524:	4413      	add	r3, r2
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe fcf0 	bl	8005f0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	3301      	adds	r3, #1
 8007530:	607b      	str	r3, [r7, #4]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b37      	cmp	r3, #55	; 0x37
 8007536:	d9ef      	bls.n	8007518 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007538:	480d      	ldr	r0, [pc, #52]	; (8007570 <prvInitialiseTaskLists+0x64>)
 800753a:	f7fe fce7 	bl	8005f0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800753e:	480d      	ldr	r0, [pc, #52]	; (8007574 <prvInitialiseTaskLists+0x68>)
 8007540:	f7fe fce4 	bl	8005f0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007544:	480c      	ldr	r0, [pc, #48]	; (8007578 <prvInitialiseTaskLists+0x6c>)
 8007546:	f7fe fce1 	bl	8005f0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800754a:	480c      	ldr	r0, [pc, #48]	; (800757c <prvInitialiseTaskLists+0x70>)
 800754c:	f7fe fcde 	bl	8005f0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007550:	480b      	ldr	r0, [pc, #44]	; (8007580 <prvInitialiseTaskLists+0x74>)
 8007552:	f7fe fcdb 	bl	8005f0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007556:	4b0b      	ldr	r3, [pc, #44]	; (8007584 <prvInitialiseTaskLists+0x78>)
 8007558:	4a05      	ldr	r2, [pc, #20]	; (8007570 <prvInitialiseTaskLists+0x64>)
 800755a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800755c:	4b0a      	ldr	r3, [pc, #40]	; (8007588 <prvInitialiseTaskLists+0x7c>)
 800755e:	4a05      	ldr	r2, [pc, #20]	; (8007574 <prvInitialiseTaskLists+0x68>)
 8007560:	601a      	str	r2, [r3, #0]
}
 8007562:	bf00      	nop
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	2000077c 	.word	0x2000077c
 8007570:	20000bdc 	.word	0x20000bdc
 8007574:	20000bf0 	.word	0x20000bf0
 8007578:	20000c0c 	.word	0x20000c0c
 800757c:	20000c20 	.word	0x20000c20
 8007580:	20000c38 	.word	0x20000c38
 8007584:	20000c04 	.word	0x20000c04
 8007588:	20000c08 	.word	0x20000c08

0800758c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007592:	e019      	b.n	80075c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007594:	f000 fdd6 	bl	8008144 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007598:	4b10      	ldr	r3, [pc, #64]	; (80075dc <prvCheckTasksWaitingTermination+0x50>)
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	3304      	adds	r3, #4
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fe fd3b 	bl	8006020 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075aa:	4b0d      	ldr	r3, [pc, #52]	; (80075e0 <prvCheckTasksWaitingTermination+0x54>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	4a0b      	ldr	r2, [pc, #44]	; (80075e0 <prvCheckTasksWaitingTermination+0x54>)
 80075b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075b4:	4b0b      	ldr	r3, [pc, #44]	; (80075e4 <prvCheckTasksWaitingTermination+0x58>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3b01      	subs	r3, #1
 80075ba:	4a0a      	ldr	r2, [pc, #40]	; (80075e4 <prvCheckTasksWaitingTermination+0x58>)
 80075bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075be:	f000 fdf1 	bl	80081a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f810 	bl	80075e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075c8:	4b06      	ldr	r3, [pc, #24]	; (80075e4 <prvCheckTasksWaitingTermination+0x58>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1e1      	bne.n	8007594 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075d0:	bf00      	nop
 80075d2:	bf00      	nop
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	20000c20 	.word	0x20000c20
 80075e0:	20000c4c 	.word	0x20000c4c
 80075e4:	20000c34 	.word	0x20000c34

080075e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d108      	bne.n	800760c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 ff8e 	bl	8008520 <vPortFree>
				vPortFree( pxTCB );
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 ff8b 	bl	8008520 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800760a:	e018      	b.n	800763e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007612:	2b01      	cmp	r3, #1
 8007614:	d103      	bne.n	800761e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 ff82 	bl	8008520 <vPortFree>
	}
 800761c:	e00f      	b.n	800763e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007624:	2b02      	cmp	r3, #2
 8007626:	d00a      	beq.n	800763e <prvDeleteTCB+0x56>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	60fb      	str	r3, [r7, #12]
}
 800763a:	bf00      	nop
 800763c:	e7fe      	b.n	800763c <prvDeleteTCB+0x54>
	}
 800763e:	bf00      	nop
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
	...

08007648 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800764e:	4b0c      	ldr	r3, [pc, #48]	; (8007680 <prvResetNextTaskUnblockTime+0x38>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d104      	bne.n	8007662 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007658:	4b0a      	ldr	r3, [pc, #40]	; (8007684 <prvResetNextTaskUnblockTime+0x3c>)
 800765a:	f04f 32ff 	mov.w	r2, #4294967295
 800765e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007660:	e008      	b.n	8007674 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007662:	4b07      	ldr	r3, [pc, #28]	; (8007680 <prvResetNextTaskUnblockTime+0x38>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	4a04      	ldr	r2, [pc, #16]	; (8007684 <prvResetNextTaskUnblockTime+0x3c>)
 8007672:	6013      	str	r3, [r2, #0]
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	20000c04 	.word	0x20000c04
 8007684:	20000c6c 	.word	0x20000c6c

08007688 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800768e:	4b0b      	ldr	r3, [pc, #44]	; (80076bc <xTaskGetSchedulerState+0x34>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d102      	bne.n	800769c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007696:	2301      	movs	r3, #1
 8007698:	607b      	str	r3, [r7, #4]
 800769a:	e008      	b.n	80076ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800769c:	4b08      	ldr	r3, [pc, #32]	; (80076c0 <xTaskGetSchedulerState+0x38>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d102      	bne.n	80076aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076a4:	2302      	movs	r3, #2
 80076a6:	607b      	str	r3, [r7, #4]
 80076a8:	e001      	b.n	80076ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80076aa:	2300      	movs	r3, #0
 80076ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076ae:	687b      	ldr	r3, [r7, #4]
	}
 80076b0:	4618      	mov	r0, r3
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	20000c58 	.word	0x20000c58
 80076c0:	20000c74 	.word	0x20000c74

080076c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076d0:	2300      	movs	r3, #0
 80076d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d056      	beq.n	8007788 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076da:	4b2e      	ldr	r3, [pc, #184]	; (8007794 <xTaskPriorityDisinherit+0xd0>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d00a      	beq.n	80076fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80076e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	60fb      	str	r3, [r7, #12]
}
 80076f6:	bf00      	nop
 80076f8:	e7fe      	b.n	80076f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10a      	bne.n	8007718 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	60bb      	str	r3, [r7, #8]
}
 8007714:	bf00      	nop
 8007716:	e7fe      	b.n	8007716 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800771c:	1e5a      	subs	r2, r3, #1
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800772a:	429a      	cmp	r2, r3
 800772c:	d02c      	beq.n	8007788 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007732:	2b00      	cmp	r3, #0
 8007734:	d128      	bne.n	8007788 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	3304      	adds	r3, #4
 800773a:	4618      	mov	r0, r3
 800773c:	f7fe fc70 	bl	8006020 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007758:	4b0f      	ldr	r3, [pc, #60]	; (8007798 <xTaskPriorityDisinherit+0xd4>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	429a      	cmp	r2, r3
 800775e:	d903      	bls.n	8007768 <xTaskPriorityDisinherit+0xa4>
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007764:	4a0c      	ldr	r2, [pc, #48]	; (8007798 <xTaskPriorityDisinherit+0xd4>)
 8007766:	6013      	str	r3, [r2, #0]
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800776c:	4613      	mov	r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	4413      	add	r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4a09      	ldr	r2, [pc, #36]	; (800779c <xTaskPriorityDisinherit+0xd8>)
 8007776:	441a      	add	r2, r3
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	3304      	adds	r3, #4
 800777c:	4619      	mov	r1, r3
 800777e:	4610      	mov	r0, r2
 8007780:	f7fe fbf1 	bl	8005f66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007784:	2301      	movs	r3, #1
 8007786:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007788:	697b      	ldr	r3, [r7, #20]
	}
 800778a:	4618      	mov	r0, r3
 800778c:	3718      	adds	r7, #24
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	20000778 	.word	0x20000778
 8007798:	20000c54 	.word	0x20000c54
 800779c:	2000077c 	.word	0x2000077c

080077a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077aa:	4b21      	ldr	r3, [pc, #132]	; (8007830 <prvAddCurrentTaskToDelayedList+0x90>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077b0:	4b20      	ldr	r3, [pc, #128]	; (8007834 <prvAddCurrentTaskToDelayedList+0x94>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3304      	adds	r3, #4
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fe fc32 	bl	8006020 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c2:	d10a      	bne.n	80077da <prvAddCurrentTaskToDelayedList+0x3a>
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d007      	beq.n	80077da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077ca:	4b1a      	ldr	r3, [pc, #104]	; (8007834 <prvAddCurrentTaskToDelayedList+0x94>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3304      	adds	r3, #4
 80077d0:	4619      	mov	r1, r3
 80077d2:	4819      	ldr	r0, [pc, #100]	; (8007838 <prvAddCurrentTaskToDelayedList+0x98>)
 80077d4:	f7fe fbc7 	bl	8005f66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077d8:	e026      	b.n	8007828 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4413      	add	r3, r2
 80077e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077e2:	4b14      	ldr	r3, [pc, #80]	; (8007834 <prvAddCurrentTaskToDelayedList+0x94>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68ba      	ldr	r2, [r7, #8]
 80077e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d209      	bcs.n	8007806 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077f2:	4b12      	ldr	r3, [pc, #72]	; (800783c <prvAddCurrentTaskToDelayedList+0x9c>)
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	4b0f      	ldr	r3, [pc, #60]	; (8007834 <prvAddCurrentTaskToDelayedList+0x94>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3304      	adds	r3, #4
 80077fc:	4619      	mov	r1, r3
 80077fe:	4610      	mov	r0, r2
 8007800:	f7fe fbd5 	bl	8005fae <vListInsert>
}
 8007804:	e010      	b.n	8007828 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007806:	4b0e      	ldr	r3, [pc, #56]	; (8007840 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	4b0a      	ldr	r3, [pc, #40]	; (8007834 <prvAddCurrentTaskToDelayedList+0x94>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3304      	adds	r3, #4
 8007810:	4619      	mov	r1, r3
 8007812:	4610      	mov	r0, r2
 8007814:	f7fe fbcb 	bl	8005fae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007818:	4b0a      	ldr	r3, [pc, #40]	; (8007844 <prvAddCurrentTaskToDelayedList+0xa4>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	429a      	cmp	r2, r3
 8007820:	d202      	bcs.n	8007828 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007822:	4a08      	ldr	r2, [pc, #32]	; (8007844 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	6013      	str	r3, [r2, #0]
}
 8007828:	bf00      	nop
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	20000c50 	.word	0x20000c50
 8007834:	20000778 	.word	0x20000778
 8007838:	20000c38 	.word	0x20000c38
 800783c:	20000c08 	.word	0x20000c08
 8007840:	20000c04 	.word	0x20000c04
 8007844:	20000c6c 	.word	0x20000c6c

08007848 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b08a      	sub	sp, #40	; 0x28
 800784c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800784e:	2300      	movs	r3, #0
 8007850:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007852:	f000 fb07 	bl	8007e64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007856:	4b1c      	ldr	r3, [pc, #112]	; (80078c8 <xTimerCreateTimerTask+0x80>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d021      	beq.n	80078a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800785e:	2300      	movs	r3, #0
 8007860:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007862:	2300      	movs	r3, #0
 8007864:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007866:	1d3a      	adds	r2, r7, #4
 8007868:	f107 0108 	add.w	r1, r7, #8
 800786c:	f107 030c 	add.w	r3, r7, #12
 8007870:	4618      	mov	r0, r3
 8007872:	f7fe fb31 	bl	8005ed8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007876:	6879      	ldr	r1, [r7, #4]
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	9202      	str	r2, [sp, #8]
 800787e:	9301      	str	r3, [sp, #4]
 8007880:	2302      	movs	r3, #2
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	2300      	movs	r3, #0
 8007886:	460a      	mov	r2, r1
 8007888:	4910      	ldr	r1, [pc, #64]	; (80078cc <xTimerCreateTimerTask+0x84>)
 800788a:	4811      	ldr	r0, [pc, #68]	; (80078d0 <xTimerCreateTimerTask+0x88>)
 800788c:	f7ff f8de 	bl	8006a4c <xTaskCreateStatic>
 8007890:	4603      	mov	r3, r0
 8007892:	4a10      	ldr	r2, [pc, #64]	; (80078d4 <xTimerCreateTimerTask+0x8c>)
 8007894:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007896:	4b0f      	ldr	r3, [pc, #60]	; (80078d4 <xTimerCreateTimerTask+0x8c>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800789e:	2301      	movs	r3, #1
 80078a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10a      	bne.n	80078be <xTimerCreateTimerTask+0x76>
	__asm volatile
 80078a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ac:	f383 8811 	msr	BASEPRI, r3
 80078b0:	f3bf 8f6f 	isb	sy
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	613b      	str	r3, [r7, #16]
}
 80078ba:	bf00      	nop
 80078bc:	e7fe      	b.n	80078bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80078be:	697b      	ldr	r3, [r7, #20]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3718      	adds	r7, #24
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	20000ca8 	.word	0x20000ca8
 80078cc:	0800a44c 	.word	0x0800a44c
 80078d0:	08007a0d 	.word	0x08007a0d
 80078d4:	20000cac 	.word	0x20000cac

080078d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08a      	sub	sp, #40	; 0x28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
 80078e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10a      	bne.n	8007906 <xTimerGenericCommand+0x2e>
	__asm volatile
 80078f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f4:	f383 8811 	msr	BASEPRI, r3
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	623b      	str	r3, [r7, #32]
}
 8007902:	bf00      	nop
 8007904:	e7fe      	b.n	8007904 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007906:	4b1a      	ldr	r3, [pc, #104]	; (8007970 <xTimerGenericCommand+0x98>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d02a      	beq.n	8007964 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	2b05      	cmp	r3, #5
 800791e:	dc18      	bgt.n	8007952 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007920:	f7ff feb2 	bl	8007688 <xTaskGetSchedulerState>
 8007924:	4603      	mov	r3, r0
 8007926:	2b02      	cmp	r3, #2
 8007928:	d109      	bne.n	800793e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800792a:	4b11      	ldr	r3, [pc, #68]	; (8007970 <xTimerGenericCommand+0x98>)
 800792c:	6818      	ldr	r0, [r3, #0]
 800792e:	f107 0110 	add.w	r1, r7, #16
 8007932:	2300      	movs	r3, #0
 8007934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007936:	f7fe fca1 	bl	800627c <xQueueGenericSend>
 800793a:	6278      	str	r0, [r7, #36]	; 0x24
 800793c:	e012      	b.n	8007964 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800793e:	4b0c      	ldr	r3, [pc, #48]	; (8007970 <xTimerGenericCommand+0x98>)
 8007940:	6818      	ldr	r0, [r3, #0]
 8007942:	f107 0110 	add.w	r1, r7, #16
 8007946:	2300      	movs	r3, #0
 8007948:	2200      	movs	r2, #0
 800794a:	f7fe fc97 	bl	800627c <xQueueGenericSend>
 800794e:	6278      	str	r0, [r7, #36]	; 0x24
 8007950:	e008      	b.n	8007964 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007952:	4b07      	ldr	r3, [pc, #28]	; (8007970 <xTimerGenericCommand+0x98>)
 8007954:	6818      	ldr	r0, [r3, #0]
 8007956:	f107 0110 	add.w	r1, r7, #16
 800795a:	2300      	movs	r3, #0
 800795c:	683a      	ldr	r2, [r7, #0]
 800795e:	f7fe fd8b 	bl	8006478 <xQueueGenericSendFromISR>
 8007962:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007966:	4618      	mov	r0, r3
 8007968:	3728      	adds	r7, #40	; 0x28
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	20000ca8 	.word	0x20000ca8

08007974 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b088      	sub	sp, #32
 8007978:	af02      	add	r7, sp, #8
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800797e:	4b22      	ldr	r3, [pc, #136]	; (8007a08 <prvProcessExpiredTimer+0x94>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	3304      	adds	r3, #4
 800798c:	4618      	mov	r0, r3
 800798e:	f7fe fb47 	bl	8006020 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007998:	f003 0304 	and.w	r3, r3, #4
 800799c:	2b00      	cmp	r3, #0
 800799e:	d022      	beq.n	80079e6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	699a      	ldr	r2, [r3, #24]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	18d1      	adds	r1, r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	6978      	ldr	r0, [r7, #20]
 80079ae:	f000 f8d1 	bl	8007b54 <prvInsertTimerInActiveList>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d01f      	beq.n	80079f8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079b8:	2300      	movs	r3, #0
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	2300      	movs	r3, #0
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	2100      	movs	r1, #0
 80079c2:	6978      	ldr	r0, [r7, #20]
 80079c4:	f7ff ff88 	bl	80078d8 <xTimerGenericCommand>
 80079c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d113      	bne.n	80079f8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	60fb      	str	r3, [r7, #12]
}
 80079e2:	bf00      	nop
 80079e4:	e7fe      	b.n	80079e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079ec:	f023 0301 	bic.w	r3, r3, #1
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	6978      	ldr	r0, [r7, #20]
 80079fe:	4798      	blx	r3
}
 8007a00:	bf00      	nop
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	20000ca0 	.word	0x20000ca0

08007a0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a14:	f107 0308 	add.w	r3, r7, #8
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f000 f857 	bl	8007acc <prvGetNextExpireTime>
 8007a1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	4619      	mov	r1, r3
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 f803 	bl	8007a30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a2a:	f000 f8d5 	bl	8007bd8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a2e:	e7f1      	b.n	8007a14 <prvTimerTask+0x8>

08007a30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a3a:	f7ff fa43 	bl	8006ec4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a3e:	f107 0308 	add.w	r3, r7, #8
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 f866 	bl	8007b14 <prvSampleTimeNow>
 8007a48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d130      	bne.n	8007ab2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10a      	bne.n	8007a6c <prvProcessTimerOrBlockTask+0x3c>
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d806      	bhi.n	8007a6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a5e:	f7ff fa3f 	bl	8006ee0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a62:	68f9      	ldr	r1, [r7, #12]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7ff ff85 	bl	8007974 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a6a:	e024      	b.n	8007ab6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d008      	beq.n	8007a84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a72:	4b13      	ldr	r3, [pc, #76]	; (8007ac0 <prvProcessTimerOrBlockTask+0x90>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d101      	bne.n	8007a80 <prvProcessTimerOrBlockTask+0x50>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e000      	b.n	8007a82 <prvProcessTimerOrBlockTask+0x52>
 8007a80:	2300      	movs	r3, #0
 8007a82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a84:	4b0f      	ldr	r3, [pc, #60]	; (8007ac4 <prvProcessTimerOrBlockTask+0x94>)
 8007a86:	6818      	ldr	r0, [r3, #0]
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	4619      	mov	r1, r3
 8007a92:	f7fe ffa7 	bl	80069e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a96:	f7ff fa23 	bl	8006ee0 <xTaskResumeAll>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10a      	bne.n	8007ab6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007aa0:	4b09      	ldr	r3, [pc, #36]	; (8007ac8 <prvProcessTimerOrBlockTask+0x98>)
 8007aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	f3bf 8f6f 	isb	sy
}
 8007ab0:	e001      	b.n	8007ab6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007ab2:	f7ff fa15 	bl	8006ee0 <xTaskResumeAll>
}
 8007ab6:	bf00      	nop
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	20000ca4 	.word	0x20000ca4
 8007ac4:	20000ca8 	.word	0x20000ca8
 8007ac8:	e000ed04 	.word	0xe000ed04

08007acc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ad4:	4b0e      	ldr	r3, [pc, #56]	; (8007b10 <prvGetNextExpireTime+0x44>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <prvGetNextExpireTime+0x16>
 8007ade:	2201      	movs	r2, #1
 8007ae0:	e000      	b.n	8007ae4 <prvGetNextExpireTime+0x18>
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d105      	bne.n	8007afc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007af0:	4b07      	ldr	r3, [pc, #28]	; (8007b10 <prvGetNextExpireTime+0x44>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	60fb      	str	r3, [r7, #12]
 8007afa:	e001      	b.n	8007b00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007afc:	2300      	movs	r3, #0
 8007afe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b00:	68fb      	ldr	r3, [r7, #12]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	20000ca0 	.word	0x20000ca0

08007b14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b1c:	f7ff fa7e 	bl	800701c <xTaskGetTickCount>
 8007b20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b22:	4b0b      	ldr	r3, [pc, #44]	; (8007b50 <prvSampleTimeNow+0x3c>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d205      	bcs.n	8007b38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b2c:	f000 f936 	bl	8007d9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	e002      	b.n	8007b3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b3e:	4a04      	ldr	r2, [pc, #16]	; (8007b50 <prvSampleTimeNow+0x3c>)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b44:	68fb      	ldr	r3, [r7, #12]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	20000cb0 	.word	0x20000cb0

08007b54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b086      	sub	sp, #24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
 8007b60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b62:	2300      	movs	r3, #0
 8007b64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d812      	bhi.n	8007ba0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	1ad2      	subs	r2, r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d302      	bcc.n	8007b8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	617b      	str	r3, [r7, #20]
 8007b8c:	e01b      	b.n	8007bc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b8e:	4b10      	ldr	r3, [pc, #64]	; (8007bd0 <prvInsertTimerInActiveList+0x7c>)
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	3304      	adds	r3, #4
 8007b96:	4619      	mov	r1, r3
 8007b98:	4610      	mov	r0, r2
 8007b9a:	f7fe fa08 	bl	8005fae <vListInsert>
 8007b9e:	e012      	b.n	8007bc6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d206      	bcs.n	8007bb6 <prvInsertTimerInActiveList+0x62>
 8007ba8:	68ba      	ldr	r2, [r7, #8]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d302      	bcc.n	8007bb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	e007      	b.n	8007bc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bb6:	4b07      	ldr	r3, [pc, #28]	; (8007bd4 <prvInsertTimerInActiveList+0x80>)
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	3304      	adds	r3, #4
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	f7fe f9f4 	bl	8005fae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007bc6:	697b      	ldr	r3, [r7, #20]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3718      	adds	r7, #24
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	20000ca4 	.word	0x20000ca4
 8007bd4:	20000ca0 	.word	0x20000ca0

08007bd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b08e      	sub	sp, #56	; 0x38
 8007bdc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bde:	e0ca      	b.n	8007d76 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	da18      	bge.n	8007c18 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007be6:	1d3b      	adds	r3, r7, #4
 8007be8:	3304      	adds	r3, #4
 8007bea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10a      	bne.n	8007c08 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	61fb      	str	r3, [r7, #28]
}
 8007c04:	bf00      	nop
 8007c06:	e7fe      	b.n	8007c06 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c0e:	6850      	ldr	r0, [r2, #4]
 8007c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c12:	6892      	ldr	r2, [r2, #8]
 8007c14:	4611      	mov	r1, r2
 8007c16:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f2c0 80aa 	blt.w	8007d74 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d004      	beq.n	8007c36 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2e:	3304      	adds	r3, #4
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7fe f9f5 	bl	8006020 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c36:	463b      	mov	r3, r7
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7ff ff6b 	bl	8007b14 <prvSampleTimeNow>
 8007c3e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b09      	cmp	r3, #9
 8007c44:	f200 8097 	bhi.w	8007d76 <prvProcessReceivedCommands+0x19e>
 8007c48:	a201      	add	r2, pc, #4	; (adr r2, 8007c50 <prvProcessReceivedCommands+0x78>)
 8007c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4e:	bf00      	nop
 8007c50:	08007c79 	.word	0x08007c79
 8007c54:	08007c79 	.word	0x08007c79
 8007c58:	08007c79 	.word	0x08007c79
 8007c5c:	08007ced 	.word	0x08007ced
 8007c60:	08007d01 	.word	0x08007d01
 8007c64:	08007d4b 	.word	0x08007d4b
 8007c68:	08007c79 	.word	0x08007c79
 8007c6c:	08007c79 	.word	0x08007c79
 8007c70:	08007ced 	.word	0x08007ced
 8007c74:	08007d01 	.word	0x08007d01
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c7e:	f043 0301 	orr.w	r3, r3, #1
 8007c82:	b2da      	uxtb	r2, r3
 8007c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	18d1      	adds	r1, r2, r3
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c98:	f7ff ff5c 	bl	8007b54 <prvInsertTimerInActiveList>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d069      	beq.n	8007d76 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ca8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cb0:	f003 0304 	and.w	r3, r3, #4
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d05e      	beq.n	8007d76 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	441a      	add	r2, r3
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cca:	f7ff fe05 	bl	80078d8 <xTimerGenericCommand>
 8007cce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d14f      	bne.n	8007d76 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	61bb      	str	r3, [r7, #24]
}
 8007ce8:	bf00      	nop
 8007cea:	e7fe      	b.n	8007cea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cf2:	f023 0301 	bic.w	r3, r3, #1
 8007cf6:	b2da      	uxtb	r2, r3
 8007cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007cfe:	e03a      	b.n	8007d76 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d06:	f043 0301 	orr.w	r3, r3, #1
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d16:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10a      	bne.n	8007d36 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	617b      	str	r3, [r7, #20]
}
 8007d32:	bf00      	nop
 8007d34:	e7fe      	b.n	8007d34 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d38:	699a      	ldr	r2, [r3, #24]
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3c:	18d1      	adds	r1, r2, r3
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d44:	f7ff ff06 	bl	8007b54 <prvInsertTimerInActiveList>
					break;
 8007d48:	e015      	b.n	8007d76 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d50:	f003 0302 	and.w	r3, r3, #2
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d103      	bne.n	8007d60 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007d58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d5a:	f000 fbe1 	bl	8008520 <vPortFree>
 8007d5e:	e00a      	b.n	8007d76 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d66:	f023 0301 	bic.w	r3, r3, #1
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d72:	e000      	b.n	8007d76 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d76:	4b08      	ldr	r3, [pc, #32]	; (8007d98 <prvProcessReceivedCommands+0x1c0>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	1d39      	adds	r1, r7, #4
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fe fc16 	bl	80065b0 <xQueueReceive>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f47f af2a 	bne.w	8007be0 <prvProcessReceivedCommands+0x8>
	}
}
 8007d8c:	bf00      	nop
 8007d8e:	bf00      	nop
 8007d90:	3730      	adds	r7, #48	; 0x30
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	20000ca8 	.word	0x20000ca8

08007d9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b088      	sub	sp, #32
 8007da0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007da2:	e048      	b.n	8007e36 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007da4:	4b2d      	ldr	r3, [pc, #180]	; (8007e5c <prvSwitchTimerLists+0xc0>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dae:	4b2b      	ldr	r3, [pc, #172]	; (8007e5c <prvSwitchTimerLists+0xc0>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	3304      	adds	r3, #4
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fe f92f 	bl	8006020 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dd0:	f003 0304 	and.w	r3, r3, #4
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d02e      	beq.n	8007e36 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	699b      	ldr	r3, [r3, #24]
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	4413      	add	r3, r2
 8007de0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d90e      	bls.n	8007e08 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007df6:	4b19      	ldr	r3, [pc, #100]	; (8007e5c <prvSwitchTimerLists+0xc0>)
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	4619      	mov	r1, r3
 8007e00:	4610      	mov	r0, r2
 8007e02:	f7fe f8d4 	bl	8005fae <vListInsert>
 8007e06:	e016      	b.n	8007e36 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e08:	2300      	movs	r3, #0
 8007e0a:	9300      	str	r3, [sp, #0]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	2100      	movs	r1, #0
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f7ff fd60 	bl	80078d8 <xTimerGenericCommand>
 8007e18:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10a      	bne.n	8007e36 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	603b      	str	r3, [r7, #0]
}
 8007e32:	bf00      	nop
 8007e34:	e7fe      	b.n	8007e34 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e36:	4b09      	ldr	r3, [pc, #36]	; (8007e5c <prvSwitchTimerLists+0xc0>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1b1      	bne.n	8007da4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e40:	4b06      	ldr	r3, [pc, #24]	; (8007e5c <prvSwitchTimerLists+0xc0>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e46:	4b06      	ldr	r3, [pc, #24]	; (8007e60 <prvSwitchTimerLists+0xc4>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a04      	ldr	r2, [pc, #16]	; (8007e5c <prvSwitchTimerLists+0xc0>)
 8007e4c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e4e:	4a04      	ldr	r2, [pc, #16]	; (8007e60 <prvSwitchTimerLists+0xc4>)
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	6013      	str	r3, [r2, #0]
}
 8007e54:	bf00      	nop
 8007e56:	3718      	adds	r7, #24
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	20000ca0 	.word	0x20000ca0
 8007e60:	20000ca4 	.word	0x20000ca4

08007e64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e6a:	f000 f96b 	bl	8008144 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e6e:	4b15      	ldr	r3, [pc, #84]	; (8007ec4 <prvCheckForValidListAndQueue+0x60>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d120      	bne.n	8007eb8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e76:	4814      	ldr	r0, [pc, #80]	; (8007ec8 <prvCheckForValidListAndQueue+0x64>)
 8007e78:	f7fe f848 	bl	8005f0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e7c:	4813      	ldr	r0, [pc, #76]	; (8007ecc <prvCheckForValidListAndQueue+0x68>)
 8007e7e:	f7fe f845 	bl	8005f0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e82:	4b13      	ldr	r3, [pc, #76]	; (8007ed0 <prvCheckForValidListAndQueue+0x6c>)
 8007e84:	4a10      	ldr	r2, [pc, #64]	; (8007ec8 <prvCheckForValidListAndQueue+0x64>)
 8007e86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e88:	4b12      	ldr	r3, [pc, #72]	; (8007ed4 <prvCheckForValidListAndQueue+0x70>)
 8007e8a:	4a10      	ldr	r2, [pc, #64]	; (8007ecc <prvCheckForValidListAndQueue+0x68>)
 8007e8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e8e:	2300      	movs	r3, #0
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	4b11      	ldr	r3, [pc, #68]	; (8007ed8 <prvCheckForValidListAndQueue+0x74>)
 8007e94:	4a11      	ldr	r2, [pc, #68]	; (8007edc <prvCheckForValidListAndQueue+0x78>)
 8007e96:	2110      	movs	r1, #16
 8007e98:	200a      	movs	r0, #10
 8007e9a:	f7fe f953 	bl	8006144 <xQueueGenericCreateStatic>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	4a08      	ldr	r2, [pc, #32]	; (8007ec4 <prvCheckForValidListAndQueue+0x60>)
 8007ea2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ea4:	4b07      	ldr	r3, [pc, #28]	; (8007ec4 <prvCheckForValidListAndQueue+0x60>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d005      	beq.n	8007eb8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007eac:	4b05      	ldr	r3, [pc, #20]	; (8007ec4 <prvCheckForValidListAndQueue+0x60>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	490b      	ldr	r1, [pc, #44]	; (8007ee0 <prvCheckForValidListAndQueue+0x7c>)
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fe fd6c 	bl	8006990 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007eb8:	f000 f974 	bl	80081a4 <vPortExitCritical>
}
 8007ebc:	bf00      	nop
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	20000ca8 	.word	0x20000ca8
 8007ec8:	20000c78 	.word	0x20000c78
 8007ecc:	20000c8c 	.word	0x20000c8c
 8007ed0:	20000ca0 	.word	0x20000ca0
 8007ed4:	20000ca4 	.word	0x20000ca4
 8007ed8:	20000d54 	.word	0x20000d54
 8007edc:	20000cb4 	.word	0x20000cb4
 8007ee0:	0800a454 	.word	0x0800a454

08007ee4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	3b04      	subs	r3, #4
 8007ef4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007efc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	3b04      	subs	r3, #4
 8007f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	f023 0201 	bic.w	r2, r3, #1
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	3b04      	subs	r3, #4
 8007f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f14:	4a0c      	ldr	r2, [pc, #48]	; (8007f48 <pxPortInitialiseStack+0x64>)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	3b14      	subs	r3, #20
 8007f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	3b04      	subs	r3, #4
 8007f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f06f 0202 	mvn.w	r2, #2
 8007f32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	3b20      	subs	r3, #32
 8007f38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr
 8007f48:	08007f4d 	.word	0x08007f4d

08007f4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f52:	2300      	movs	r3, #0
 8007f54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f56:	4b12      	ldr	r3, [pc, #72]	; (8007fa0 <prvTaskExitError+0x54>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5e:	d00a      	beq.n	8007f76 <prvTaskExitError+0x2a>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	60fb      	str	r3, [r7, #12]
}
 8007f72:	bf00      	nop
 8007f74:	e7fe      	b.n	8007f74 <prvTaskExitError+0x28>
	__asm volatile
 8007f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7a:	f383 8811 	msr	BASEPRI, r3
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	60bb      	str	r3, [r7, #8]
}
 8007f88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f8a:	bf00      	nop
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d0fc      	beq.n	8007f8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f92:	bf00      	nop
 8007f94:	bf00      	nop
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	2000000c 	.word	0x2000000c
	...

08007fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007fb0:	4b07      	ldr	r3, [pc, #28]	; (8007fd0 <pxCurrentTCBConst2>)
 8007fb2:	6819      	ldr	r1, [r3, #0]
 8007fb4:	6808      	ldr	r0, [r1, #0]
 8007fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fba:	f380 8809 	msr	PSP, r0
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f04f 0000 	mov.w	r0, #0
 8007fc6:	f380 8811 	msr	BASEPRI, r0
 8007fca:	4770      	bx	lr
 8007fcc:	f3af 8000 	nop.w

08007fd0 <pxCurrentTCBConst2>:
 8007fd0:	20000778 	.word	0x20000778
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007fd4:	bf00      	nop
 8007fd6:	bf00      	nop

08007fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007fd8:	4808      	ldr	r0, [pc, #32]	; (8007ffc <prvPortStartFirstTask+0x24>)
 8007fda:	6800      	ldr	r0, [r0, #0]
 8007fdc:	6800      	ldr	r0, [r0, #0]
 8007fde:	f380 8808 	msr	MSP, r0
 8007fe2:	f04f 0000 	mov.w	r0, #0
 8007fe6:	f380 8814 	msr	CONTROL, r0
 8007fea:	b662      	cpsie	i
 8007fec:	b661      	cpsie	f
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	df00      	svc	0
 8007ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007ffa:	bf00      	nop
 8007ffc:	e000ed08 	.word	0xe000ed08

08008000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008006:	4b46      	ldr	r3, [pc, #280]	; (8008120 <xPortStartScheduler+0x120>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a46      	ldr	r2, [pc, #280]	; (8008124 <xPortStartScheduler+0x124>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d10a      	bne.n	8008026 <xPortStartScheduler+0x26>
	__asm volatile
 8008010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	613b      	str	r3, [r7, #16]
}
 8008022:	bf00      	nop
 8008024:	e7fe      	b.n	8008024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008026:	4b3e      	ldr	r3, [pc, #248]	; (8008120 <xPortStartScheduler+0x120>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a3f      	ldr	r2, [pc, #252]	; (8008128 <xPortStartScheduler+0x128>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d10a      	bne.n	8008046 <xPortStartScheduler+0x46>
	__asm volatile
 8008030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	60fb      	str	r3, [r7, #12]
}
 8008042:	bf00      	nop
 8008044:	e7fe      	b.n	8008044 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008046:	4b39      	ldr	r3, [pc, #228]	; (800812c <xPortStartScheduler+0x12c>)
 8008048:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	b2db      	uxtb	r3, r3
 8008050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	22ff      	movs	r2, #255	; 0xff
 8008056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	b2db      	uxtb	r3, r3
 800805e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008060:	78fb      	ldrb	r3, [r7, #3]
 8008062:	b2db      	uxtb	r3, r3
 8008064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008068:	b2da      	uxtb	r2, r3
 800806a:	4b31      	ldr	r3, [pc, #196]	; (8008130 <xPortStartScheduler+0x130>)
 800806c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800806e:	4b31      	ldr	r3, [pc, #196]	; (8008134 <xPortStartScheduler+0x134>)
 8008070:	2207      	movs	r2, #7
 8008072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008074:	e009      	b.n	800808a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008076:	4b2f      	ldr	r3, [pc, #188]	; (8008134 <xPortStartScheduler+0x134>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	3b01      	subs	r3, #1
 800807c:	4a2d      	ldr	r2, [pc, #180]	; (8008134 <xPortStartScheduler+0x134>)
 800807e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008080:	78fb      	ldrb	r3, [r7, #3]
 8008082:	b2db      	uxtb	r3, r3
 8008084:	005b      	lsls	r3, r3, #1
 8008086:	b2db      	uxtb	r3, r3
 8008088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800808a:	78fb      	ldrb	r3, [r7, #3]
 800808c:	b2db      	uxtb	r3, r3
 800808e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008092:	2b80      	cmp	r3, #128	; 0x80
 8008094:	d0ef      	beq.n	8008076 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008096:	4b27      	ldr	r3, [pc, #156]	; (8008134 <xPortStartScheduler+0x134>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f1c3 0307 	rsb	r3, r3, #7
 800809e:	2b04      	cmp	r3, #4
 80080a0:	d00a      	beq.n	80080b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80080a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	60bb      	str	r3, [r7, #8]
}
 80080b4:	bf00      	nop
 80080b6:	e7fe      	b.n	80080b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080b8:	4b1e      	ldr	r3, [pc, #120]	; (8008134 <xPortStartScheduler+0x134>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	021b      	lsls	r3, r3, #8
 80080be:	4a1d      	ldr	r2, [pc, #116]	; (8008134 <xPortStartScheduler+0x134>)
 80080c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80080c2:	4b1c      	ldr	r3, [pc, #112]	; (8008134 <xPortStartScheduler+0x134>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080ca:	4a1a      	ldr	r2, [pc, #104]	; (8008134 <xPortStartScheduler+0x134>)
 80080cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80080d6:	4b18      	ldr	r3, [pc, #96]	; (8008138 <xPortStartScheduler+0x138>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a17      	ldr	r2, [pc, #92]	; (8008138 <xPortStartScheduler+0x138>)
 80080dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80080e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80080e2:	4b15      	ldr	r3, [pc, #84]	; (8008138 <xPortStartScheduler+0x138>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a14      	ldr	r2, [pc, #80]	; (8008138 <xPortStartScheduler+0x138>)
 80080e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80080ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80080ee:	f000 f8dd 	bl	80082ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80080f2:	4b12      	ldr	r3, [pc, #72]	; (800813c <xPortStartScheduler+0x13c>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80080f8:	f000 f8fc 	bl	80082f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80080fc:	4b10      	ldr	r3, [pc, #64]	; (8008140 <xPortStartScheduler+0x140>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a0f      	ldr	r2, [pc, #60]	; (8008140 <xPortStartScheduler+0x140>)
 8008102:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008106:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008108:	f7ff ff66 	bl	8007fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800810c:	f7ff f850 	bl	80071b0 <vTaskSwitchContext>
	prvTaskExitError();
 8008110:	f7ff ff1c 	bl	8007f4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3718      	adds	r7, #24
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	e000ed00 	.word	0xe000ed00
 8008124:	410fc271 	.word	0x410fc271
 8008128:	410fc270 	.word	0x410fc270
 800812c:	e000e400 	.word	0xe000e400
 8008130:	20000da4 	.word	0x20000da4
 8008134:	20000da8 	.word	0x20000da8
 8008138:	e000ed20 	.word	0xe000ed20
 800813c:	2000000c 	.word	0x2000000c
 8008140:	e000ef34 	.word	0xe000ef34

08008144 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
	__asm volatile
 800814a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	607b      	str	r3, [r7, #4]
}
 800815c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800815e:	4b0f      	ldr	r3, [pc, #60]	; (800819c <vPortEnterCritical+0x58>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	3301      	adds	r3, #1
 8008164:	4a0d      	ldr	r2, [pc, #52]	; (800819c <vPortEnterCritical+0x58>)
 8008166:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008168:	4b0c      	ldr	r3, [pc, #48]	; (800819c <vPortEnterCritical+0x58>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d10f      	bne.n	8008190 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008170:	4b0b      	ldr	r3, [pc, #44]	; (80081a0 <vPortEnterCritical+0x5c>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00a      	beq.n	8008190 <vPortEnterCritical+0x4c>
	__asm volatile
 800817a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817e:	f383 8811 	msr	BASEPRI, r3
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	f3bf 8f4f 	dsb	sy
 800818a:	603b      	str	r3, [r7, #0]
}
 800818c:	bf00      	nop
 800818e:	e7fe      	b.n	800818e <vPortEnterCritical+0x4a>
	}
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	2000000c 	.word	0x2000000c
 80081a0:	e000ed04 	.word	0xe000ed04

080081a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081aa:	4b12      	ldr	r3, [pc, #72]	; (80081f4 <vPortExitCritical+0x50>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10a      	bne.n	80081c8 <vPortExitCritical+0x24>
	__asm volatile
 80081b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b6:	f383 8811 	msr	BASEPRI, r3
 80081ba:	f3bf 8f6f 	isb	sy
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	607b      	str	r3, [r7, #4]
}
 80081c4:	bf00      	nop
 80081c6:	e7fe      	b.n	80081c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80081c8:	4b0a      	ldr	r3, [pc, #40]	; (80081f4 <vPortExitCritical+0x50>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	4a09      	ldr	r2, [pc, #36]	; (80081f4 <vPortExitCritical+0x50>)
 80081d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80081d2:	4b08      	ldr	r3, [pc, #32]	; (80081f4 <vPortExitCritical+0x50>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d105      	bne.n	80081e6 <vPortExitCritical+0x42>
 80081da:	2300      	movs	r3, #0
 80081dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	f383 8811 	msr	BASEPRI, r3
}
 80081e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	2000000c 	.word	0x2000000c
	...

08008200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008200:	f3ef 8009 	mrs	r0, PSP
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	4b15      	ldr	r3, [pc, #84]	; (8008260 <pxCurrentTCBConst>)
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	f01e 0f10 	tst.w	lr, #16
 8008210:	bf08      	it	eq
 8008212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821a:	6010      	str	r0, [r2, #0]
 800821c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008224:	f380 8811 	msr	BASEPRI, r0
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f7fe ffbe 	bl	80071b0 <vTaskSwitchContext>
 8008234:	f04f 0000 	mov.w	r0, #0
 8008238:	f380 8811 	msr	BASEPRI, r0
 800823c:	bc09      	pop	{r0, r3}
 800823e:	6819      	ldr	r1, [r3, #0]
 8008240:	6808      	ldr	r0, [r1, #0]
 8008242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008246:	f01e 0f10 	tst.w	lr, #16
 800824a:	bf08      	it	eq
 800824c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008250:	f380 8809 	msr	PSP, r0
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	f3af 8000 	nop.w

08008260 <pxCurrentTCBConst>:
 8008260:	20000778 	.word	0x20000778
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008264:	bf00      	nop
 8008266:	bf00      	nop

08008268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	607b      	str	r3, [r7, #4]
}
 8008280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008282:	f7fe fedb 	bl	800703c <xTaskIncrementTick>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d003      	beq.n	8008294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800828c:	4b06      	ldr	r3, [pc, #24]	; (80082a8 <xPortSysTickHandler+0x40>)
 800828e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	2300      	movs	r3, #0
 8008296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	f383 8811 	msr	BASEPRI, r3
}
 800829e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80082a0:	bf00      	nop
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	e000ed04 	.word	0xe000ed04

080082ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082ac:	b480      	push	{r7}
 80082ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80082b0:	4b0b      	ldr	r3, [pc, #44]	; (80082e0 <vPortSetupTimerInterrupt+0x34>)
 80082b2:	2200      	movs	r2, #0
 80082b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80082b6:	4b0b      	ldr	r3, [pc, #44]	; (80082e4 <vPortSetupTimerInterrupt+0x38>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80082bc:	4b0a      	ldr	r3, [pc, #40]	; (80082e8 <vPortSetupTimerInterrupt+0x3c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a0a      	ldr	r2, [pc, #40]	; (80082ec <vPortSetupTimerInterrupt+0x40>)
 80082c2:	fba2 2303 	umull	r2, r3, r2, r3
 80082c6:	099b      	lsrs	r3, r3, #6
 80082c8:	4a09      	ldr	r2, [pc, #36]	; (80082f0 <vPortSetupTimerInterrupt+0x44>)
 80082ca:	3b01      	subs	r3, #1
 80082cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80082ce:	4b04      	ldr	r3, [pc, #16]	; (80082e0 <vPortSetupTimerInterrupt+0x34>)
 80082d0:	2207      	movs	r2, #7
 80082d2:	601a      	str	r2, [r3, #0]
}
 80082d4:	bf00      	nop
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	e000e010 	.word	0xe000e010
 80082e4:	e000e018 	.word	0xe000e018
 80082e8:	20000000 	.word	0x20000000
 80082ec:	10624dd3 	.word	0x10624dd3
 80082f0:	e000e014 	.word	0xe000e014

080082f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80082f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008304 <vPortEnableVFP+0x10>
 80082f8:	6801      	ldr	r1, [r0, #0]
 80082fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80082fe:	6001      	str	r1, [r0, #0]
 8008300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008302:	bf00      	nop
 8008304:	e000ed88 	.word	0xe000ed88

08008308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800830e:	f3ef 8305 	mrs	r3, IPSR
 8008312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2b0f      	cmp	r3, #15
 8008318:	d914      	bls.n	8008344 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800831a:	4a17      	ldr	r2, [pc, #92]	; (8008378 <vPortValidateInterruptPriority+0x70>)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	4413      	add	r3, r2
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008324:	4b15      	ldr	r3, [pc, #84]	; (800837c <vPortValidateInterruptPriority+0x74>)
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	7afa      	ldrb	r2, [r7, #11]
 800832a:	429a      	cmp	r2, r3
 800832c:	d20a      	bcs.n	8008344 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	607b      	str	r3, [r7, #4]
}
 8008340:	bf00      	nop
 8008342:	e7fe      	b.n	8008342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008344:	4b0e      	ldr	r3, [pc, #56]	; (8008380 <vPortValidateInterruptPriority+0x78>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800834c:	4b0d      	ldr	r3, [pc, #52]	; (8008384 <vPortValidateInterruptPriority+0x7c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	429a      	cmp	r2, r3
 8008352:	d90a      	bls.n	800836a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	603b      	str	r3, [r7, #0]
}
 8008366:	bf00      	nop
 8008368:	e7fe      	b.n	8008368 <vPortValidateInterruptPriority+0x60>
	}
 800836a:	bf00      	nop
 800836c:	3714      	adds	r7, #20
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	e000e3f0 	.word	0xe000e3f0
 800837c:	20000da4 	.word	0x20000da4
 8008380:	e000ed0c 	.word	0xe000ed0c
 8008384:	20000da8 	.word	0x20000da8

08008388 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08a      	sub	sp, #40	; 0x28
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008390:	2300      	movs	r3, #0
 8008392:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008394:	f7fe fd96 	bl	8006ec4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008398:	4b5b      	ldr	r3, [pc, #364]	; (8008508 <pvPortMalloc+0x180>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d101      	bne.n	80083a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80083a0:	f000 f920 	bl	80085e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083a4:	4b59      	ldr	r3, [pc, #356]	; (800850c <pvPortMalloc+0x184>)
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4013      	ands	r3, r2
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f040 8093 	bne.w	80084d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d01d      	beq.n	80083f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80083b8:	2208      	movs	r2, #8
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4413      	add	r3, r2
 80083be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f003 0307 	and.w	r3, r3, #7
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d014      	beq.n	80083f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f023 0307 	bic.w	r3, r3, #7
 80083d0:	3308      	adds	r3, #8
 80083d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f003 0307 	and.w	r3, r3, #7
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <pvPortMalloc+0x6c>
	__asm volatile
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	617b      	str	r3, [r7, #20]
}
 80083f0:	bf00      	nop
 80083f2:	e7fe      	b.n	80083f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d06e      	beq.n	80084d8 <pvPortMalloc+0x150>
 80083fa:	4b45      	ldr	r3, [pc, #276]	; (8008510 <pvPortMalloc+0x188>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	429a      	cmp	r2, r3
 8008402:	d869      	bhi.n	80084d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008404:	4b43      	ldr	r3, [pc, #268]	; (8008514 <pvPortMalloc+0x18c>)
 8008406:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008408:	4b42      	ldr	r3, [pc, #264]	; (8008514 <pvPortMalloc+0x18c>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800840e:	e004      	b.n	800841a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	429a      	cmp	r2, r3
 8008422:	d903      	bls.n	800842c <pvPortMalloc+0xa4>
 8008424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1f1      	bne.n	8008410 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800842c:	4b36      	ldr	r3, [pc, #216]	; (8008508 <pvPortMalloc+0x180>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008432:	429a      	cmp	r2, r3
 8008434:	d050      	beq.n	80084d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008436:	6a3b      	ldr	r3, [r7, #32]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2208      	movs	r2, #8
 800843c:	4413      	add	r3, r2
 800843e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	6a3b      	ldr	r3, [r7, #32]
 8008446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	1ad2      	subs	r2, r2, r3
 8008450:	2308      	movs	r3, #8
 8008452:	005b      	lsls	r3, r3, #1
 8008454:	429a      	cmp	r2, r3
 8008456:	d91f      	bls.n	8008498 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4413      	add	r3, r2
 800845e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	f003 0307 	and.w	r3, r3, #7
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00a      	beq.n	8008480 <pvPortMalloc+0xf8>
	__asm volatile
 800846a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846e:	f383 8811 	msr	BASEPRI, r3
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	613b      	str	r3, [r7, #16]
}
 800847c:	bf00      	nop
 800847e:	e7fe      	b.n	800847e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	685a      	ldr	r2, [r3, #4]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	1ad2      	subs	r2, r2, r3
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008492:	69b8      	ldr	r0, [r7, #24]
 8008494:	f000 f908 	bl	80086a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008498:	4b1d      	ldr	r3, [pc, #116]	; (8008510 <pvPortMalloc+0x188>)
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	4a1b      	ldr	r2, [pc, #108]	; (8008510 <pvPortMalloc+0x188>)
 80084a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084a6:	4b1a      	ldr	r3, [pc, #104]	; (8008510 <pvPortMalloc+0x188>)
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	4b1b      	ldr	r3, [pc, #108]	; (8008518 <pvPortMalloc+0x190>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d203      	bcs.n	80084ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80084b2:	4b17      	ldr	r3, [pc, #92]	; (8008510 <pvPortMalloc+0x188>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a18      	ldr	r2, [pc, #96]	; (8008518 <pvPortMalloc+0x190>)
 80084b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	4b13      	ldr	r3, [pc, #76]	; (800850c <pvPortMalloc+0x184>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	431a      	orrs	r2, r3
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80084c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ca:	2200      	movs	r2, #0
 80084cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80084ce:	4b13      	ldr	r3, [pc, #76]	; (800851c <pvPortMalloc+0x194>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	3301      	adds	r3, #1
 80084d4:	4a11      	ldr	r2, [pc, #68]	; (800851c <pvPortMalloc+0x194>)
 80084d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80084d8:	f7fe fd02 	bl	8006ee0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	f003 0307 	and.w	r3, r3, #7
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00a      	beq.n	80084fc <pvPortMalloc+0x174>
	__asm volatile
 80084e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	60fb      	str	r3, [r7, #12]
}
 80084f8:	bf00      	nop
 80084fa:	e7fe      	b.n	80084fa <pvPortMalloc+0x172>
	return pvReturn;
 80084fc:	69fb      	ldr	r3, [r7, #28]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3728      	adds	r7, #40	; 0x28
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	200049b4 	.word	0x200049b4
 800850c:	200049c8 	.word	0x200049c8
 8008510:	200049b8 	.word	0x200049b8
 8008514:	200049ac 	.word	0x200049ac
 8008518:	200049bc 	.word	0x200049bc
 800851c:	200049c0 	.word	0x200049c0

08008520 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b086      	sub	sp, #24
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d04d      	beq.n	80085ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008532:	2308      	movs	r3, #8
 8008534:	425b      	negs	r3, r3
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	4413      	add	r3, r2
 800853a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	685a      	ldr	r2, [r3, #4]
 8008544:	4b24      	ldr	r3, [pc, #144]	; (80085d8 <vPortFree+0xb8>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4013      	ands	r3, r2
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10a      	bne.n	8008564 <vPortFree+0x44>
	__asm volatile
 800854e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	60fb      	str	r3, [r7, #12]
}
 8008560:	bf00      	nop
 8008562:	e7fe      	b.n	8008562 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00a      	beq.n	8008582 <vPortFree+0x62>
	__asm volatile
 800856c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008570:	f383 8811 	msr	BASEPRI, r3
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	60bb      	str	r3, [r7, #8]
}
 800857e:	bf00      	nop
 8008580:	e7fe      	b.n	8008580 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	685a      	ldr	r2, [r3, #4]
 8008586:	4b14      	ldr	r3, [pc, #80]	; (80085d8 <vPortFree+0xb8>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4013      	ands	r3, r2
 800858c:	2b00      	cmp	r3, #0
 800858e:	d01e      	beq.n	80085ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d11a      	bne.n	80085ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	4b0e      	ldr	r3, [pc, #56]	; (80085d8 <vPortFree+0xb8>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	43db      	mvns	r3, r3
 80085a2:	401a      	ands	r2, r3
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085a8:	f7fe fc8c 	bl	8006ec4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	685a      	ldr	r2, [r3, #4]
 80085b0:	4b0a      	ldr	r3, [pc, #40]	; (80085dc <vPortFree+0xbc>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4413      	add	r3, r2
 80085b6:	4a09      	ldr	r2, [pc, #36]	; (80085dc <vPortFree+0xbc>)
 80085b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80085ba:	6938      	ldr	r0, [r7, #16]
 80085bc:	f000 f874 	bl	80086a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80085c0:	4b07      	ldr	r3, [pc, #28]	; (80085e0 <vPortFree+0xc0>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3301      	adds	r3, #1
 80085c6:	4a06      	ldr	r2, [pc, #24]	; (80085e0 <vPortFree+0xc0>)
 80085c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80085ca:	f7fe fc89 	bl	8006ee0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80085ce:	bf00      	nop
 80085d0:	3718      	adds	r7, #24
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	200049c8 	.word	0x200049c8
 80085dc:	200049b8 	.word	0x200049b8
 80085e0:	200049c4 	.word	0x200049c4

080085e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80085ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80085ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80085f0:	4b27      	ldr	r3, [pc, #156]	; (8008690 <prvHeapInit+0xac>)
 80085f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f003 0307 	and.w	r3, r3, #7
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00c      	beq.n	8008618 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	3307      	adds	r3, #7
 8008602:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f023 0307 	bic.w	r3, r3, #7
 800860a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	4a1f      	ldr	r2, [pc, #124]	; (8008690 <prvHeapInit+0xac>)
 8008614:	4413      	add	r3, r2
 8008616:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800861c:	4a1d      	ldr	r2, [pc, #116]	; (8008694 <prvHeapInit+0xb0>)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008622:	4b1c      	ldr	r3, [pc, #112]	; (8008694 <prvHeapInit+0xb0>)
 8008624:	2200      	movs	r2, #0
 8008626:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	4413      	add	r3, r2
 800862e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008630:	2208      	movs	r2, #8
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	1a9b      	subs	r3, r3, r2
 8008636:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f023 0307 	bic.w	r3, r3, #7
 800863e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	4a15      	ldr	r2, [pc, #84]	; (8008698 <prvHeapInit+0xb4>)
 8008644:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008646:	4b14      	ldr	r3, [pc, #80]	; (8008698 <prvHeapInit+0xb4>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2200      	movs	r2, #0
 800864c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800864e:	4b12      	ldr	r3, [pc, #72]	; (8008698 <prvHeapInit+0xb4>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2200      	movs	r2, #0
 8008654:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	1ad2      	subs	r2, r2, r3
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008664:	4b0c      	ldr	r3, [pc, #48]	; (8008698 <prvHeapInit+0xb4>)
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	4a0a      	ldr	r2, [pc, #40]	; (800869c <prvHeapInit+0xb8>)
 8008672:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	4a09      	ldr	r2, [pc, #36]	; (80086a0 <prvHeapInit+0xbc>)
 800867a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800867c:	4b09      	ldr	r3, [pc, #36]	; (80086a4 <prvHeapInit+0xc0>)
 800867e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008682:	601a      	str	r2, [r3, #0]
}
 8008684:	bf00      	nop
 8008686:	3714      	adds	r7, #20
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	20000dac 	.word	0x20000dac
 8008694:	200049ac 	.word	0x200049ac
 8008698:	200049b4 	.word	0x200049b4
 800869c:	200049bc 	.word	0x200049bc
 80086a0:	200049b8 	.word	0x200049b8
 80086a4:	200049c8 	.word	0x200049c8

080086a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086b0:	4b28      	ldr	r3, [pc, #160]	; (8008754 <prvInsertBlockIntoFreeList+0xac>)
 80086b2:	60fb      	str	r3, [r7, #12]
 80086b4:	e002      	b.n	80086bc <prvInsertBlockIntoFreeList+0x14>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d8f7      	bhi.n	80086b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	4413      	add	r3, r2
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d108      	bne.n	80086ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	685a      	ldr	r2, [r3, #4]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	441a      	add	r2, r3
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	441a      	add	r2, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d118      	bne.n	8008730 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	4b15      	ldr	r3, [pc, #84]	; (8008758 <prvInsertBlockIntoFreeList+0xb0>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	429a      	cmp	r2, r3
 8008708:	d00d      	beq.n	8008726 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	441a      	add	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	601a      	str	r2, [r3, #0]
 8008724:	e008      	b.n	8008738 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008726:	4b0c      	ldr	r3, [pc, #48]	; (8008758 <prvInsertBlockIntoFreeList+0xb0>)
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	601a      	str	r2, [r3, #0]
 800872e:	e003      	b.n	8008738 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	429a      	cmp	r2, r3
 800873e:	d002      	beq.n	8008746 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008746:	bf00      	nop
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	200049ac 	.word	0x200049ac
 8008758:	200049b4 	.word	0x200049b4

0800875c <OLED_Refresh_Gram>:
#include "stdlib.h"
#include "oledfont.h"  

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8008762:	2300      	movs	r3, #0
 8008764:	71fb      	strb	r3, [r7, #7]
 8008766:	e026      	b.n	80087b6 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8008768:	79fb      	ldrb	r3, [r7, #7]
 800876a:	3b50      	subs	r3, #80	; 0x50
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2100      	movs	r1, #0
 8008770:	4618      	mov	r0, r3
 8008772:	f000 f82b 	bl	80087cc <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8008776:	2100      	movs	r1, #0
 8008778:	2000      	movs	r0, #0
 800877a:	f000 f827 	bl	80087cc <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800877e:	2100      	movs	r1, #0
 8008780:	2010      	movs	r0, #16
 8008782:	f000 f823 	bl	80087cc <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8008786:	2300      	movs	r3, #0
 8008788:	71bb      	strb	r3, [r7, #6]
 800878a:	e00d      	b.n	80087a8 <OLED_Refresh_Gram+0x4c>
 800878c:	79ba      	ldrb	r2, [r7, #6]
 800878e:	79fb      	ldrb	r3, [r7, #7]
 8008790:	490d      	ldr	r1, [pc, #52]	; (80087c8 <OLED_Refresh_Gram+0x6c>)
 8008792:	00d2      	lsls	r2, r2, #3
 8008794:	440a      	add	r2, r1
 8008796:	4413      	add	r3, r2
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	2101      	movs	r1, #1
 800879c:	4618      	mov	r0, r3
 800879e:	f000 f815 	bl	80087cc <OLED_WR_Byte>
 80087a2:	79bb      	ldrb	r3, [r7, #6]
 80087a4:	3301      	adds	r3, #1
 80087a6:	71bb      	strb	r3, [r7, #6]
 80087a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	daed      	bge.n	800878c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	3301      	adds	r3, #1
 80087b4:	71fb      	strb	r3, [r7, #7]
 80087b6:	79fb      	ldrb	r3, [r7, #7]
 80087b8:	2b07      	cmp	r3, #7
 80087ba:	d9d5      	bls.n	8008768 <OLED_Refresh_Gram+0xc>
	}   
}
 80087bc:	bf00      	nop
 80087be:	bf00      	nop
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	20004c04 	.word	0x20004c04

080087cc <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	4603      	mov	r3, r0
 80087d4:	460a      	mov	r2, r1
 80087d6:	71fb      	strb	r3, [r7, #7]
 80087d8:	4613      	mov	r3, r2
 80087da:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 80087dc:	79bb      	ldrb	r3, [r7, #6]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d006      	beq.n	80087f0 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 80087e2:	2201      	movs	r2, #1
 80087e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80087e8:	481c      	ldr	r0, [pc, #112]	; (800885c <OLED_WR_Byte+0x90>)
 80087ea:	f7fa f915 	bl	8002a18 <HAL_GPIO_WritePin>
 80087ee:	e005      	b.n	80087fc <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 80087f0:	2200      	movs	r2, #0
 80087f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80087f6:	4819      	ldr	r0, [pc, #100]	; (800885c <OLED_WR_Byte+0x90>)
 80087f8:	f7fa f90e 	bl	8002a18 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80087fc:	2300      	movs	r3, #0
 80087fe:	73fb      	strb	r3, [r7, #15]
 8008800:	e01e      	b.n	8008840 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8008802:	2200      	movs	r2, #0
 8008804:	2120      	movs	r1, #32
 8008806:	4815      	ldr	r0, [pc, #84]	; (800885c <OLED_WR_Byte+0x90>)
 8008808:	f7fa f906 	bl	8002a18 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800880c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008810:	2b00      	cmp	r3, #0
 8008812:	da05      	bge.n	8008820 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8008814:	2201      	movs	r2, #1
 8008816:	2140      	movs	r1, #64	; 0x40
 8008818:	4810      	ldr	r0, [pc, #64]	; (800885c <OLED_WR_Byte+0x90>)
 800881a:	f7fa f8fd 	bl	8002a18 <HAL_GPIO_WritePin>
 800881e:	e004      	b.n	800882a <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8008820:	2200      	movs	r2, #0
 8008822:	2140      	movs	r1, #64	; 0x40
 8008824:	480d      	ldr	r0, [pc, #52]	; (800885c <OLED_WR_Byte+0x90>)
 8008826:	f7fa f8f7 	bl	8002a18 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800882a:	2201      	movs	r2, #1
 800882c:	2120      	movs	r1, #32
 800882e:	480b      	ldr	r0, [pc, #44]	; (800885c <OLED_WR_Byte+0x90>)
 8008830:	f7fa f8f2 	bl	8002a18 <HAL_GPIO_WritePin>
		dat<<=1;   
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	005b      	lsls	r3, r3, #1
 8008838:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800883a:	7bfb      	ldrb	r3, [r7, #15]
 800883c:	3301      	adds	r3, #1
 800883e:	73fb      	strb	r3, [r7, #15]
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	2b07      	cmp	r3, #7
 8008844:	d9dd      	bls.n	8008802 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8008846:	2201      	movs	r2, #1
 8008848:	f44f 7180 	mov.w	r1, #256	; 0x100
 800884c:	4803      	ldr	r0, [pc, #12]	; (800885c <OLED_WR_Byte+0x90>)
 800884e:	f7fa f8e3 	bl	8002a18 <HAL_GPIO_WritePin>
} 
 8008852:	bf00      	nop
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	40021000 	.word	0x40021000

08008860 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8008866:	2300      	movs	r3, #0
 8008868:	71fb      	strb	r3, [r7, #7]
 800886a:	e014      	b.n	8008896 <OLED_Clear+0x36>
 800886c:	2300      	movs	r3, #0
 800886e:	71bb      	strb	r3, [r7, #6]
 8008870:	e00a      	b.n	8008888 <OLED_Clear+0x28>
 8008872:	79ba      	ldrb	r2, [r7, #6]
 8008874:	79fb      	ldrb	r3, [r7, #7]
 8008876:	490c      	ldr	r1, [pc, #48]	; (80088a8 <OLED_Clear+0x48>)
 8008878:	00d2      	lsls	r2, r2, #3
 800887a:	440a      	add	r2, r1
 800887c:	4413      	add	r3, r2
 800887e:	2200      	movs	r2, #0
 8008880:	701a      	strb	r2, [r3, #0]
 8008882:	79bb      	ldrb	r3, [r7, #6]
 8008884:	3301      	adds	r3, #1
 8008886:	71bb      	strb	r3, [r7, #6]
 8008888:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800888c:	2b00      	cmp	r3, #0
 800888e:	daf0      	bge.n	8008872 <OLED_Clear+0x12>
 8008890:	79fb      	ldrb	r3, [r7, #7]
 8008892:	3301      	adds	r3, #1
 8008894:	71fb      	strb	r3, [r7, #7]
 8008896:	79fb      	ldrb	r3, [r7, #7]
 8008898:	2b07      	cmp	r3, #7
 800889a:	d9e7      	bls.n	800886c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800889c:	f7ff ff5e 	bl	800875c <OLED_Refresh_Gram>
}
 80088a0:	bf00      	nop
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	20004c04 	.word	0x20004c04

080088ac <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	4603      	mov	r3, r0
 80088b4:	71fb      	strb	r3, [r7, #7]
 80088b6:	460b      	mov	r3, r1
 80088b8:	71bb      	strb	r3, [r7, #6]
 80088ba:	4613      	mov	r3, r2
 80088bc:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80088be:	2300      	movs	r3, #0
 80088c0:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80088c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	db41      	blt.n	800894e <OLED_DrawPoint+0xa2>
 80088ca:	79bb      	ldrb	r3, [r7, #6]
 80088cc:	2b3f      	cmp	r3, #63	; 0x3f
 80088ce:	d83e      	bhi.n	800894e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80088d0:	79bb      	ldrb	r3, [r7, #6]
 80088d2:	08db      	lsrs	r3, r3, #3
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	f1c3 0307 	rsb	r3, r3, #7
 80088da:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 80088dc:	79bb      	ldrb	r3, [r7, #6]
 80088de:	f003 0307 	and.w	r3, r3, #7
 80088e2:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 80088e4:	7b7b      	ldrb	r3, [r7, #13]
 80088e6:	f1c3 0307 	rsb	r3, r3, #7
 80088ea:	2201      	movs	r2, #1
 80088ec:	fa02 f303 	lsl.w	r3, r2, r3
 80088f0:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80088f2:	797b      	ldrb	r3, [r7, #5]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d012      	beq.n	800891e <OLED_DrawPoint+0x72>
 80088f8:	79fa      	ldrb	r2, [r7, #7]
 80088fa:	7bbb      	ldrb	r3, [r7, #14]
 80088fc:	4917      	ldr	r1, [pc, #92]	; (800895c <OLED_DrawPoint+0xb0>)
 80088fe:	00d2      	lsls	r2, r2, #3
 8008900:	440a      	add	r2, r1
 8008902:	4413      	add	r3, r2
 8008904:	7818      	ldrb	r0, [r3, #0]
 8008906:	79fa      	ldrb	r2, [r7, #7]
 8008908:	7bbb      	ldrb	r3, [r7, #14]
 800890a:	7bf9      	ldrb	r1, [r7, #15]
 800890c:	4301      	orrs	r1, r0
 800890e:	b2c8      	uxtb	r0, r1
 8008910:	4912      	ldr	r1, [pc, #72]	; (800895c <OLED_DrawPoint+0xb0>)
 8008912:	00d2      	lsls	r2, r2, #3
 8008914:	440a      	add	r2, r1
 8008916:	4413      	add	r3, r2
 8008918:	4602      	mov	r2, r0
 800891a:	701a      	strb	r2, [r3, #0]
 800891c:	e018      	b.n	8008950 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800891e:	79fa      	ldrb	r2, [r7, #7]
 8008920:	7bbb      	ldrb	r3, [r7, #14]
 8008922:	490e      	ldr	r1, [pc, #56]	; (800895c <OLED_DrawPoint+0xb0>)
 8008924:	00d2      	lsls	r2, r2, #3
 8008926:	440a      	add	r2, r1
 8008928:	4413      	add	r3, r2
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	b25a      	sxtb	r2, r3
 800892e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008932:	43db      	mvns	r3, r3
 8008934:	b25b      	sxtb	r3, r3
 8008936:	4013      	ands	r3, r2
 8008938:	b259      	sxtb	r1, r3
 800893a:	79fa      	ldrb	r2, [r7, #7]
 800893c:	7bbb      	ldrb	r3, [r7, #14]
 800893e:	b2c8      	uxtb	r0, r1
 8008940:	4906      	ldr	r1, [pc, #24]	; (800895c <OLED_DrawPoint+0xb0>)
 8008942:	00d2      	lsls	r2, r2, #3
 8008944:	440a      	add	r2, r1
 8008946:	4413      	add	r3, r2
 8008948:	4602      	mov	r2, r0
 800894a:	701a      	strb	r2, [r3, #0]
 800894c:	e000      	b.n	8008950 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800894e:	bf00      	nop
}
 8008950:	3714      	adds	r7, #20
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	20004c04 	.word	0x20004c04

08008960 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8008960:	b590      	push	{r4, r7, lr}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	4604      	mov	r4, r0
 8008968:	4608      	mov	r0, r1
 800896a:	4611      	mov	r1, r2
 800896c:	461a      	mov	r2, r3
 800896e:	4623      	mov	r3, r4
 8008970:	71fb      	strb	r3, [r7, #7]
 8008972:	4603      	mov	r3, r0
 8008974:	71bb      	strb	r3, [r7, #6]
 8008976:	460b      	mov	r3, r1
 8008978:	717b      	strb	r3, [r7, #5]
 800897a:	4613      	mov	r3, r2
 800897c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800897e:	79bb      	ldrb	r3, [r7, #6]
 8008980:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8008982:	797b      	ldrb	r3, [r7, #5]
 8008984:	3b20      	subs	r3, #32
 8008986:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8008988:	2300      	movs	r3, #0
 800898a:	73bb      	strb	r3, [r7, #14]
 800898c:	e04d      	b.n	8008a2a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800898e:	793b      	ldrb	r3, [r7, #4]
 8008990:	2b0c      	cmp	r3, #12
 8008992:	d10b      	bne.n	80089ac <OLED_ShowChar+0x4c>
 8008994:	797a      	ldrb	r2, [r7, #5]
 8008996:	7bb9      	ldrb	r1, [r7, #14]
 8008998:	4828      	ldr	r0, [pc, #160]	; (8008a3c <OLED_ShowChar+0xdc>)
 800899a:	4613      	mov	r3, r2
 800899c:	005b      	lsls	r3, r3, #1
 800899e:	4413      	add	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4403      	add	r3, r0
 80089a4:	440b      	add	r3, r1
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	73fb      	strb	r3, [r7, #15]
 80089aa:	e007      	b.n	80089bc <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 80089ac:	797a      	ldrb	r2, [r7, #5]
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	4923      	ldr	r1, [pc, #140]	; (8008a40 <OLED_ShowChar+0xe0>)
 80089b2:	0112      	lsls	r2, r2, #4
 80089b4:	440a      	add	r2, r1
 80089b6:	4413      	add	r3, r2
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80089bc:	2300      	movs	r3, #0
 80089be:	737b      	strb	r3, [r7, #13]
 80089c0:	e02d      	b.n	8008a1e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80089c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	da07      	bge.n	80089da <OLED_ShowChar+0x7a>
 80089ca:	f897 2020 	ldrb.w	r2, [r7, #32]
 80089ce:	79b9      	ldrb	r1, [r7, #6]
 80089d0:	79fb      	ldrb	r3, [r7, #7]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7ff ff6a 	bl	80088ac <OLED_DrawPoint>
 80089d8:	e00c      	b.n	80089f4 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 80089da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	bf0c      	ite	eq
 80089e2:	2301      	moveq	r3, #1
 80089e4:	2300      	movne	r3, #0
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	461a      	mov	r2, r3
 80089ea:	79b9      	ldrb	r1, [r7, #6]
 80089ec:	79fb      	ldrb	r3, [r7, #7]
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7ff ff5c 	bl	80088ac <OLED_DrawPoint>
			temp<<=1;
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
 80089f6:	005b      	lsls	r3, r3, #1
 80089f8:	73fb      	strb	r3, [r7, #15]
			y++;
 80089fa:	79bb      	ldrb	r3, [r7, #6]
 80089fc:	3301      	adds	r3, #1
 80089fe:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8008a00:	79ba      	ldrb	r2, [r7, #6]
 8008a02:	7b3b      	ldrb	r3, [r7, #12]
 8008a04:	1ad2      	subs	r2, r2, r3
 8008a06:	793b      	ldrb	r3, [r7, #4]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d105      	bne.n	8008a18 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8008a0c:	7b3b      	ldrb	r3, [r7, #12]
 8008a0e:	71bb      	strb	r3, [r7, #6]
				x++;
 8008a10:	79fb      	ldrb	r3, [r7, #7]
 8008a12:	3301      	adds	r3, #1
 8008a14:	71fb      	strb	r3, [r7, #7]
				break;
 8008a16:	e005      	b.n	8008a24 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8008a18:	7b7b      	ldrb	r3, [r7, #13]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	737b      	strb	r3, [r7, #13]
 8008a1e:	7b7b      	ldrb	r3, [r7, #13]
 8008a20:	2b07      	cmp	r3, #7
 8008a22:	d9ce      	bls.n	80089c2 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8008a24:	7bbb      	ldrb	r3, [r7, #14]
 8008a26:	3301      	adds	r3, #1
 8008a28:	73bb      	strb	r3, [r7, #14]
 8008a2a:	7bba      	ldrb	r2, [r7, #14]
 8008a2c:	793b      	ldrb	r3, [r7, #4]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d3ad      	bcc.n	800898e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8008a32:	bf00      	nop
 8008a34:	bf00      	nop
 8008a36:	3714      	adds	r7, #20
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd90      	pop	{r4, r7, pc}
 8008a3c:	0800a4bc 	.word	0x0800a4bc
 8008a40:	0800a930 	.word	0x0800a930

08008a44 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af02      	add	r7, sp, #8
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	603a      	str	r2, [r7, #0]
 8008a4e:	71fb      	strb	r3, [r7, #7]
 8008a50:	460b      	mov	r3, r1
 8008a52:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8008a54:	e01f      	b.n	8008a96 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8008a56:	79fb      	ldrb	r3, [r7, #7]
 8008a58:	2b7a      	cmp	r3, #122	; 0x7a
 8008a5a:	d904      	bls.n	8008a66 <OLED_ShowString+0x22>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	71fb      	strb	r3, [r7, #7]
 8008a60:	79bb      	ldrb	r3, [r7, #6]
 8008a62:	3310      	adds	r3, #16
 8008a64:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8008a66:	79bb      	ldrb	r3, [r7, #6]
 8008a68:	2b3a      	cmp	r3, #58	; 0x3a
 8008a6a:	d905      	bls.n	8008a78 <OLED_ShowString+0x34>
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	71fb      	strb	r3, [r7, #7]
 8008a70:	79fb      	ldrb	r3, [r7, #7]
 8008a72:	71bb      	strb	r3, [r7, #6]
 8008a74:	f7ff fef4 	bl	8008860 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	781a      	ldrb	r2, [r3, #0]
 8008a7c:	79b9      	ldrb	r1, [r7, #6]
 8008a7e:	79f8      	ldrb	r0, [r7, #7]
 8008a80:	2301      	movs	r3, #1
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	230c      	movs	r3, #12
 8008a86:	f7ff ff6b 	bl	8008960 <OLED_ShowChar>
        x+=8;
 8008a8a:	79fb      	ldrb	r3, [r7, #7]
 8008a8c:	3308      	adds	r3, #8
 8008a8e:	71fb      	strb	r3, [r7, #7]
        p++;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	3301      	adds	r3, #1
 8008a94:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1db      	bne.n	8008a56 <OLED_ShowString+0x12>
    }  
}	 
 8008a9e:	bf00      	nop
 8008aa0:	bf00      	nop
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <OLED_Init>:

void OLED_Init(void)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8008aac:	f7f9 ffce 	bl	8002a4c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8008ab0:	4b41      	ldr	r3, [pc, #260]	; (8008bb8 <OLED_Init+0x110>)
 8008ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab4:	4a40      	ldr	r2, [pc, #256]	; (8008bb8 <OLED_Init+0x110>)
 8008ab6:	f023 0301 	bic.w	r3, r3, #1
 8008aba:	6713      	str	r3, [r2, #112]	; 0x70
 8008abc:	4b3e      	ldr	r3, [pc, #248]	; (8008bb8 <OLED_Init+0x110>)
 8008abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac0:	4a3d      	ldr	r2, [pc, #244]	; (8008bb8 <OLED_Init+0x110>)
 8008ac2:	f023 0304 	bic.w	r3, r3, #4
 8008ac6:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8008ac8:	f7f9 ffd4 	bl	8002a74 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8008acc:	2200      	movs	r2, #0
 8008ace:	2180      	movs	r1, #128	; 0x80
 8008ad0:	483a      	ldr	r0, [pc, #232]	; (8008bbc <OLED_Init+0x114>)
 8008ad2:	f7f9 ffa1 	bl	8002a18 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8008ad6:	2064      	movs	r0, #100	; 0x64
 8008ad8:	f7f9 fc3a 	bl	8002350 <HAL_Delay>
	OLED_RST_Set();
 8008adc:	2201      	movs	r2, #1
 8008ade:	2180      	movs	r1, #128	; 0x80
 8008ae0:	4836      	ldr	r0, [pc, #216]	; (8008bbc <OLED_Init+0x114>)
 8008ae2:	f7f9 ff99 	bl	8002a18 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	20ae      	movs	r0, #174	; 0xae
 8008aea:	f7ff fe6f 	bl	80087cc <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8008aee:	2100      	movs	r1, #0
 8008af0:	20d5      	movs	r0, #213	; 0xd5
 8008af2:	f7ff fe6b 	bl	80087cc <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8008af6:	2100      	movs	r1, #0
 8008af8:	2050      	movs	r0, #80	; 0x50
 8008afa:	f7ff fe67 	bl	80087cc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8008afe:	2100      	movs	r1, #0
 8008b00:	20a8      	movs	r0, #168	; 0xa8
 8008b02:	f7ff fe63 	bl	80087cc <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8008b06:	2100      	movs	r1, #0
 8008b08:	203f      	movs	r0, #63	; 0x3f
 8008b0a:	f7ff fe5f 	bl	80087cc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8008b0e:	2100      	movs	r1, #0
 8008b10:	20d3      	movs	r0, #211	; 0xd3
 8008b12:	f7ff fe5b 	bl	80087cc <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8008b16:	2100      	movs	r1, #0
 8008b18:	2000      	movs	r0, #0
 8008b1a:	f7ff fe57 	bl	80087cc <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8008b1e:	2100      	movs	r1, #0
 8008b20:	2040      	movs	r0, #64	; 0x40
 8008b22:	f7ff fe53 	bl	80087cc <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8008b26:	2100      	movs	r1, #0
 8008b28:	208d      	movs	r0, #141	; 0x8d
 8008b2a:	f7ff fe4f 	bl	80087cc <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8008b2e:	2100      	movs	r1, #0
 8008b30:	2014      	movs	r0, #20
 8008b32:	f7ff fe4b 	bl	80087cc <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8008b36:	2100      	movs	r1, #0
 8008b38:	2020      	movs	r0, #32
 8008b3a:	f7ff fe47 	bl	80087cc <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8008b3e:	2100      	movs	r1, #0
 8008b40:	2002      	movs	r0, #2
 8008b42:	f7ff fe43 	bl	80087cc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8008b46:	2100      	movs	r1, #0
 8008b48:	20a1      	movs	r0, #161	; 0xa1
 8008b4a:	f7ff fe3f 	bl	80087cc <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8008b4e:	2100      	movs	r1, #0
 8008b50:	20c0      	movs	r0, #192	; 0xc0
 8008b52:	f7ff fe3b 	bl	80087cc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8008b56:	2100      	movs	r1, #0
 8008b58:	20da      	movs	r0, #218	; 0xda
 8008b5a:	f7ff fe37 	bl	80087cc <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8008b5e:	2100      	movs	r1, #0
 8008b60:	2012      	movs	r0, #18
 8008b62:	f7ff fe33 	bl	80087cc <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8008b66:	2100      	movs	r1, #0
 8008b68:	2081      	movs	r0, #129	; 0x81
 8008b6a:	f7ff fe2f 	bl	80087cc <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8008b6e:	2100      	movs	r1, #0
 8008b70:	20ef      	movs	r0, #239	; 0xef
 8008b72:	f7ff fe2b 	bl	80087cc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8008b76:	2100      	movs	r1, #0
 8008b78:	20d9      	movs	r0, #217	; 0xd9
 8008b7a:	f7ff fe27 	bl	80087cc <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8008b7e:	2100      	movs	r1, #0
 8008b80:	20f1      	movs	r0, #241	; 0xf1
 8008b82:	f7ff fe23 	bl	80087cc <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8008b86:	2100      	movs	r1, #0
 8008b88:	20db      	movs	r0, #219	; 0xdb
 8008b8a:	f7ff fe1f 	bl	80087cc <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8008b8e:	2100      	movs	r1, #0
 8008b90:	2030      	movs	r0, #48	; 0x30
 8008b92:	f7ff fe1b 	bl	80087cc <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8008b96:	2100      	movs	r1, #0
 8008b98:	20a4      	movs	r0, #164	; 0xa4
 8008b9a:	f7ff fe17 	bl	80087cc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	20a6      	movs	r0, #166	; 0xa6
 8008ba2:	f7ff fe13 	bl	80087cc <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	20af      	movs	r0, #175	; 0xaf
 8008baa:	f7ff fe0f 	bl	80087cc <OLED_WR_Byte>
	OLED_Clear(); 
 8008bae:	f7ff fe57 	bl	8008860 <OLED_Clear>
 8008bb2:	bf00      	nop
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	40023800 	.word	0x40023800
 8008bbc:	40021000 	.word	0x40021000

08008bc0 <__errno>:
 8008bc0:	4b01      	ldr	r3, [pc, #4]	; (8008bc8 <__errno+0x8>)
 8008bc2:	6818      	ldr	r0, [r3, #0]
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	20000010 	.word	0x20000010

08008bcc <__libc_init_array>:
 8008bcc:	b570      	push	{r4, r5, r6, lr}
 8008bce:	4d0d      	ldr	r5, [pc, #52]	; (8008c04 <__libc_init_array+0x38>)
 8008bd0:	4c0d      	ldr	r4, [pc, #52]	; (8008c08 <__libc_init_array+0x3c>)
 8008bd2:	1b64      	subs	r4, r4, r5
 8008bd4:	10a4      	asrs	r4, r4, #2
 8008bd6:	2600      	movs	r6, #0
 8008bd8:	42a6      	cmp	r6, r4
 8008bda:	d109      	bne.n	8008bf0 <__libc_init_array+0x24>
 8008bdc:	4d0b      	ldr	r5, [pc, #44]	; (8008c0c <__libc_init_array+0x40>)
 8008bde:	4c0c      	ldr	r4, [pc, #48]	; (8008c10 <__libc_init_array+0x44>)
 8008be0:	f001 fc04 	bl	800a3ec <_init>
 8008be4:	1b64      	subs	r4, r4, r5
 8008be6:	10a4      	asrs	r4, r4, #2
 8008be8:	2600      	movs	r6, #0
 8008bea:	42a6      	cmp	r6, r4
 8008bec:	d105      	bne.n	8008bfa <__libc_init_array+0x2e>
 8008bee:	bd70      	pop	{r4, r5, r6, pc}
 8008bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bf4:	4798      	blx	r3
 8008bf6:	3601      	adds	r6, #1
 8008bf8:	e7ee      	b.n	8008bd8 <__libc_init_array+0xc>
 8008bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bfe:	4798      	blx	r3
 8008c00:	3601      	adds	r6, #1
 8008c02:	e7f2      	b.n	8008bea <__libc_init_array+0x1e>
 8008c04:	0800afa0 	.word	0x0800afa0
 8008c08:	0800afa0 	.word	0x0800afa0
 8008c0c:	0800afa0 	.word	0x0800afa0
 8008c10:	0800afa4 	.word	0x0800afa4

08008c14 <memcpy>:
 8008c14:	440a      	add	r2, r1
 8008c16:	4291      	cmp	r1, r2
 8008c18:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c1c:	d100      	bne.n	8008c20 <memcpy+0xc>
 8008c1e:	4770      	bx	lr
 8008c20:	b510      	push	{r4, lr}
 8008c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c2a:	4291      	cmp	r1, r2
 8008c2c:	d1f9      	bne.n	8008c22 <memcpy+0xe>
 8008c2e:	bd10      	pop	{r4, pc}

08008c30 <memset>:
 8008c30:	4402      	add	r2, r0
 8008c32:	4603      	mov	r3, r0
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d100      	bne.n	8008c3a <memset+0xa>
 8008c38:	4770      	bx	lr
 8008c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c3e:	e7f9      	b.n	8008c34 <memset+0x4>

08008c40 <siprintf>:
 8008c40:	b40e      	push	{r1, r2, r3}
 8008c42:	b500      	push	{lr}
 8008c44:	b09c      	sub	sp, #112	; 0x70
 8008c46:	ab1d      	add	r3, sp, #116	; 0x74
 8008c48:	9002      	str	r0, [sp, #8]
 8008c4a:	9006      	str	r0, [sp, #24]
 8008c4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c50:	4809      	ldr	r0, [pc, #36]	; (8008c78 <siprintf+0x38>)
 8008c52:	9107      	str	r1, [sp, #28]
 8008c54:	9104      	str	r1, [sp, #16]
 8008c56:	4909      	ldr	r1, [pc, #36]	; (8008c7c <siprintf+0x3c>)
 8008c58:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c5c:	9105      	str	r1, [sp, #20]
 8008c5e:	6800      	ldr	r0, [r0, #0]
 8008c60:	9301      	str	r3, [sp, #4]
 8008c62:	a902      	add	r1, sp, #8
 8008c64:	f000 f868 	bl	8008d38 <_svfiprintf_r>
 8008c68:	9b02      	ldr	r3, [sp, #8]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	701a      	strb	r2, [r3, #0]
 8008c6e:	b01c      	add	sp, #112	; 0x70
 8008c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c74:	b003      	add	sp, #12
 8008c76:	4770      	bx	lr
 8008c78:	20000010 	.word	0x20000010
 8008c7c:	ffff0208 	.word	0xffff0208

08008c80 <__ssputs_r>:
 8008c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c84:	688e      	ldr	r6, [r1, #8]
 8008c86:	429e      	cmp	r6, r3
 8008c88:	4682      	mov	sl, r0
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	4690      	mov	r8, r2
 8008c8e:	461f      	mov	r7, r3
 8008c90:	d838      	bhi.n	8008d04 <__ssputs_r+0x84>
 8008c92:	898a      	ldrh	r2, [r1, #12]
 8008c94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c98:	d032      	beq.n	8008d00 <__ssputs_r+0x80>
 8008c9a:	6825      	ldr	r5, [r4, #0]
 8008c9c:	6909      	ldr	r1, [r1, #16]
 8008c9e:	eba5 0901 	sub.w	r9, r5, r1
 8008ca2:	6965      	ldr	r5, [r4, #20]
 8008ca4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ca8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cac:	3301      	adds	r3, #1
 8008cae:	444b      	add	r3, r9
 8008cb0:	106d      	asrs	r5, r5, #1
 8008cb2:	429d      	cmp	r5, r3
 8008cb4:	bf38      	it	cc
 8008cb6:	461d      	movcc	r5, r3
 8008cb8:	0553      	lsls	r3, r2, #21
 8008cba:	d531      	bpl.n	8008d20 <__ssputs_r+0xa0>
 8008cbc:	4629      	mov	r1, r5
 8008cbe:	f000 fb39 	bl	8009334 <_malloc_r>
 8008cc2:	4606      	mov	r6, r0
 8008cc4:	b950      	cbnz	r0, 8008cdc <__ssputs_r+0x5c>
 8008cc6:	230c      	movs	r3, #12
 8008cc8:	f8ca 3000 	str.w	r3, [sl]
 8008ccc:	89a3      	ldrh	r3, [r4, #12]
 8008cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cd2:	81a3      	strh	r3, [r4, #12]
 8008cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cdc:	6921      	ldr	r1, [r4, #16]
 8008cde:	464a      	mov	r2, r9
 8008ce0:	f7ff ff98 	bl	8008c14 <memcpy>
 8008ce4:	89a3      	ldrh	r3, [r4, #12]
 8008ce6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cee:	81a3      	strh	r3, [r4, #12]
 8008cf0:	6126      	str	r6, [r4, #16]
 8008cf2:	6165      	str	r5, [r4, #20]
 8008cf4:	444e      	add	r6, r9
 8008cf6:	eba5 0509 	sub.w	r5, r5, r9
 8008cfa:	6026      	str	r6, [r4, #0]
 8008cfc:	60a5      	str	r5, [r4, #8]
 8008cfe:	463e      	mov	r6, r7
 8008d00:	42be      	cmp	r6, r7
 8008d02:	d900      	bls.n	8008d06 <__ssputs_r+0x86>
 8008d04:	463e      	mov	r6, r7
 8008d06:	4632      	mov	r2, r6
 8008d08:	6820      	ldr	r0, [r4, #0]
 8008d0a:	4641      	mov	r1, r8
 8008d0c:	f000 faa8 	bl	8009260 <memmove>
 8008d10:	68a3      	ldr	r3, [r4, #8]
 8008d12:	6822      	ldr	r2, [r4, #0]
 8008d14:	1b9b      	subs	r3, r3, r6
 8008d16:	4432      	add	r2, r6
 8008d18:	60a3      	str	r3, [r4, #8]
 8008d1a:	6022      	str	r2, [r4, #0]
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	e7db      	b.n	8008cd8 <__ssputs_r+0x58>
 8008d20:	462a      	mov	r2, r5
 8008d22:	f000 fb61 	bl	80093e8 <_realloc_r>
 8008d26:	4606      	mov	r6, r0
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	d1e1      	bne.n	8008cf0 <__ssputs_r+0x70>
 8008d2c:	6921      	ldr	r1, [r4, #16]
 8008d2e:	4650      	mov	r0, sl
 8008d30:	f000 fab0 	bl	8009294 <_free_r>
 8008d34:	e7c7      	b.n	8008cc6 <__ssputs_r+0x46>
	...

08008d38 <_svfiprintf_r>:
 8008d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3c:	4698      	mov	r8, r3
 8008d3e:	898b      	ldrh	r3, [r1, #12]
 8008d40:	061b      	lsls	r3, r3, #24
 8008d42:	b09d      	sub	sp, #116	; 0x74
 8008d44:	4607      	mov	r7, r0
 8008d46:	460d      	mov	r5, r1
 8008d48:	4614      	mov	r4, r2
 8008d4a:	d50e      	bpl.n	8008d6a <_svfiprintf_r+0x32>
 8008d4c:	690b      	ldr	r3, [r1, #16]
 8008d4e:	b963      	cbnz	r3, 8008d6a <_svfiprintf_r+0x32>
 8008d50:	2140      	movs	r1, #64	; 0x40
 8008d52:	f000 faef 	bl	8009334 <_malloc_r>
 8008d56:	6028      	str	r0, [r5, #0]
 8008d58:	6128      	str	r0, [r5, #16]
 8008d5a:	b920      	cbnz	r0, 8008d66 <_svfiprintf_r+0x2e>
 8008d5c:	230c      	movs	r3, #12
 8008d5e:	603b      	str	r3, [r7, #0]
 8008d60:	f04f 30ff 	mov.w	r0, #4294967295
 8008d64:	e0d1      	b.n	8008f0a <_svfiprintf_r+0x1d2>
 8008d66:	2340      	movs	r3, #64	; 0x40
 8008d68:	616b      	str	r3, [r5, #20]
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d6e:	2320      	movs	r3, #32
 8008d70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d74:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d78:	2330      	movs	r3, #48	; 0x30
 8008d7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008f24 <_svfiprintf_r+0x1ec>
 8008d7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d82:	f04f 0901 	mov.w	r9, #1
 8008d86:	4623      	mov	r3, r4
 8008d88:	469a      	mov	sl, r3
 8008d8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d8e:	b10a      	cbz	r2, 8008d94 <_svfiprintf_r+0x5c>
 8008d90:	2a25      	cmp	r2, #37	; 0x25
 8008d92:	d1f9      	bne.n	8008d88 <_svfiprintf_r+0x50>
 8008d94:	ebba 0b04 	subs.w	fp, sl, r4
 8008d98:	d00b      	beq.n	8008db2 <_svfiprintf_r+0x7a>
 8008d9a:	465b      	mov	r3, fp
 8008d9c:	4622      	mov	r2, r4
 8008d9e:	4629      	mov	r1, r5
 8008da0:	4638      	mov	r0, r7
 8008da2:	f7ff ff6d 	bl	8008c80 <__ssputs_r>
 8008da6:	3001      	adds	r0, #1
 8008da8:	f000 80aa 	beq.w	8008f00 <_svfiprintf_r+0x1c8>
 8008dac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dae:	445a      	add	r2, fp
 8008db0:	9209      	str	r2, [sp, #36]	; 0x24
 8008db2:	f89a 3000 	ldrb.w	r3, [sl]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f000 80a2 	beq.w	8008f00 <_svfiprintf_r+0x1c8>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dc6:	f10a 0a01 	add.w	sl, sl, #1
 8008dca:	9304      	str	r3, [sp, #16]
 8008dcc:	9307      	str	r3, [sp, #28]
 8008dce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dd2:	931a      	str	r3, [sp, #104]	; 0x68
 8008dd4:	4654      	mov	r4, sl
 8008dd6:	2205      	movs	r2, #5
 8008dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ddc:	4851      	ldr	r0, [pc, #324]	; (8008f24 <_svfiprintf_r+0x1ec>)
 8008dde:	f7f7 f9f7 	bl	80001d0 <memchr>
 8008de2:	9a04      	ldr	r2, [sp, #16]
 8008de4:	b9d8      	cbnz	r0, 8008e1e <_svfiprintf_r+0xe6>
 8008de6:	06d0      	lsls	r0, r2, #27
 8008de8:	bf44      	itt	mi
 8008dea:	2320      	movmi	r3, #32
 8008dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008df0:	0711      	lsls	r1, r2, #28
 8008df2:	bf44      	itt	mi
 8008df4:	232b      	movmi	r3, #43	; 0x2b
 8008df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8008dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8008e00:	d015      	beq.n	8008e2e <_svfiprintf_r+0xf6>
 8008e02:	9a07      	ldr	r2, [sp, #28]
 8008e04:	4654      	mov	r4, sl
 8008e06:	2000      	movs	r0, #0
 8008e08:	f04f 0c0a 	mov.w	ip, #10
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e12:	3b30      	subs	r3, #48	; 0x30
 8008e14:	2b09      	cmp	r3, #9
 8008e16:	d94e      	bls.n	8008eb6 <_svfiprintf_r+0x17e>
 8008e18:	b1b0      	cbz	r0, 8008e48 <_svfiprintf_r+0x110>
 8008e1a:	9207      	str	r2, [sp, #28]
 8008e1c:	e014      	b.n	8008e48 <_svfiprintf_r+0x110>
 8008e1e:	eba0 0308 	sub.w	r3, r0, r8
 8008e22:	fa09 f303 	lsl.w	r3, r9, r3
 8008e26:	4313      	orrs	r3, r2
 8008e28:	9304      	str	r3, [sp, #16]
 8008e2a:	46a2      	mov	sl, r4
 8008e2c:	e7d2      	b.n	8008dd4 <_svfiprintf_r+0x9c>
 8008e2e:	9b03      	ldr	r3, [sp, #12]
 8008e30:	1d19      	adds	r1, r3, #4
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	9103      	str	r1, [sp, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	bfbb      	ittet	lt
 8008e3a:	425b      	neglt	r3, r3
 8008e3c:	f042 0202 	orrlt.w	r2, r2, #2
 8008e40:	9307      	strge	r3, [sp, #28]
 8008e42:	9307      	strlt	r3, [sp, #28]
 8008e44:	bfb8      	it	lt
 8008e46:	9204      	strlt	r2, [sp, #16]
 8008e48:	7823      	ldrb	r3, [r4, #0]
 8008e4a:	2b2e      	cmp	r3, #46	; 0x2e
 8008e4c:	d10c      	bne.n	8008e68 <_svfiprintf_r+0x130>
 8008e4e:	7863      	ldrb	r3, [r4, #1]
 8008e50:	2b2a      	cmp	r3, #42	; 0x2a
 8008e52:	d135      	bne.n	8008ec0 <_svfiprintf_r+0x188>
 8008e54:	9b03      	ldr	r3, [sp, #12]
 8008e56:	1d1a      	adds	r2, r3, #4
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	9203      	str	r2, [sp, #12]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	bfb8      	it	lt
 8008e60:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e64:	3402      	adds	r4, #2
 8008e66:	9305      	str	r3, [sp, #20]
 8008e68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f34 <_svfiprintf_r+0x1fc>
 8008e6c:	7821      	ldrb	r1, [r4, #0]
 8008e6e:	2203      	movs	r2, #3
 8008e70:	4650      	mov	r0, sl
 8008e72:	f7f7 f9ad 	bl	80001d0 <memchr>
 8008e76:	b140      	cbz	r0, 8008e8a <_svfiprintf_r+0x152>
 8008e78:	2340      	movs	r3, #64	; 0x40
 8008e7a:	eba0 000a 	sub.w	r0, r0, sl
 8008e7e:	fa03 f000 	lsl.w	r0, r3, r0
 8008e82:	9b04      	ldr	r3, [sp, #16]
 8008e84:	4303      	orrs	r3, r0
 8008e86:	3401      	adds	r4, #1
 8008e88:	9304      	str	r3, [sp, #16]
 8008e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e8e:	4826      	ldr	r0, [pc, #152]	; (8008f28 <_svfiprintf_r+0x1f0>)
 8008e90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e94:	2206      	movs	r2, #6
 8008e96:	f7f7 f99b 	bl	80001d0 <memchr>
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	d038      	beq.n	8008f10 <_svfiprintf_r+0x1d8>
 8008e9e:	4b23      	ldr	r3, [pc, #140]	; (8008f2c <_svfiprintf_r+0x1f4>)
 8008ea0:	bb1b      	cbnz	r3, 8008eea <_svfiprintf_r+0x1b2>
 8008ea2:	9b03      	ldr	r3, [sp, #12]
 8008ea4:	3307      	adds	r3, #7
 8008ea6:	f023 0307 	bic.w	r3, r3, #7
 8008eaa:	3308      	adds	r3, #8
 8008eac:	9303      	str	r3, [sp, #12]
 8008eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eb0:	4433      	add	r3, r6
 8008eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8008eb4:	e767      	b.n	8008d86 <_svfiprintf_r+0x4e>
 8008eb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eba:	460c      	mov	r4, r1
 8008ebc:	2001      	movs	r0, #1
 8008ebe:	e7a5      	b.n	8008e0c <_svfiprintf_r+0xd4>
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	3401      	adds	r4, #1
 8008ec4:	9305      	str	r3, [sp, #20]
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	f04f 0c0a 	mov.w	ip, #10
 8008ecc:	4620      	mov	r0, r4
 8008ece:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ed2:	3a30      	subs	r2, #48	; 0x30
 8008ed4:	2a09      	cmp	r2, #9
 8008ed6:	d903      	bls.n	8008ee0 <_svfiprintf_r+0x1a8>
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d0c5      	beq.n	8008e68 <_svfiprintf_r+0x130>
 8008edc:	9105      	str	r1, [sp, #20]
 8008ede:	e7c3      	b.n	8008e68 <_svfiprintf_r+0x130>
 8008ee0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e7f0      	b.n	8008ecc <_svfiprintf_r+0x194>
 8008eea:	ab03      	add	r3, sp, #12
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	462a      	mov	r2, r5
 8008ef0:	4b0f      	ldr	r3, [pc, #60]	; (8008f30 <_svfiprintf_r+0x1f8>)
 8008ef2:	a904      	add	r1, sp, #16
 8008ef4:	4638      	mov	r0, r7
 8008ef6:	f3af 8000 	nop.w
 8008efa:	1c42      	adds	r2, r0, #1
 8008efc:	4606      	mov	r6, r0
 8008efe:	d1d6      	bne.n	8008eae <_svfiprintf_r+0x176>
 8008f00:	89ab      	ldrh	r3, [r5, #12]
 8008f02:	065b      	lsls	r3, r3, #25
 8008f04:	f53f af2c 	bmi.w	8008d60 <_svfiprintf_r+0x28>
 8008f08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f0a:	b01d      	add	sp, #116	; 0x74
 8008f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f10:	ab03      	add	r3, sp, #12
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	462a      	mov	r2, r5
 8008f16:	4b06      	ldr	r3, [pc, #24]	; (8008f30 <_svfiprintf_r+0x1f8>)
 8008f18:	a904      	add	r1, sp, #16
 8008f1a:	4638      	mov	r0, r7
 8008f1c:	f000 f87a 	bl	8009014 <_printf_i>
 8008f20:	e7eb      	b.n	8008efa <_svfiprintf_r+0x1c2>
 8008f22:	bf00      	nop
 8008f24:	0800af20 	.word	0x0800af20
 8008f28:	0800af2a 	.word	0x0800af2a
 8008f2c:	00000000 	.word	0x00000000
 8008f30:	08008c81 	.word	0x08008c81
 8008f34:	0800af26 	.word	0x0800af26

08008f38 <_printf_common>:
 8008f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f3c:	4616      	mov	r6, r2
 8008f3e:	4699      	mov	r9, r3
 8008f40:	688a      	ldr	r2, [r1, #8]
 8008f42:	690b      	ldr	r3, [r1, #16]
 8008f44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	bfb8      	it	lt
 8008f4c:	4613      	movlt	r3, r2
 8008f4e:	6033      	str	r3, [r6, #0]
 8008f50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f54:	4607      	mov	r7, r0
 8008f56:	460c      	mov	r4, r1
 8008f58:	b10a      	cbz	r2, 8008f5e <_printf_common+0x26>
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	6033      	str	r3, [r6, #0]
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	0699      	lsls	r1, r3, #26
 8008f62:	bf42      	ittt	mi
 8008f64:	6833      	ldrmi	r3, [r6, #0]
 8008f66:	3302      	addmi	r3, #2
 8008f68:	6033      	strmi	r3, [r6, #0]
 8008f6a:	6825      	ldr	r5, [r4, #0]
 8008f6c:	f015 0506 	ands.w	r5, r5, #6
 8008f70:	d106      	bne.n	8008f80 <_printf_common+0x48>
 8008f72:	f104 0a19 	add.w	sl, r4, #25
 8008f76:	68e3      	ldr	r3, [r4, #12]
 8008f78:	6832      	ldr	r2, [r6, #0]
 8008f7a:	1a9b      	subs	r3, r3, r2
 8008f7c:	42ab      	cmp	r3, r5
 8008f7e:	dc26      	bgt.n	8008fce <_printf_common+0x96>
 8008f80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f84:	1e13      	subs	r3, r2, #0
 8008f86:	6822      	ldr	r2, [r4, #0]
 8008f88:	bf18      	it	ne
 8008f8a:	2301      	movne	r3, #1
 8008f8c:	0692      	lsls	r2, r2, #26
 8008f8e:	d42b      	bmi.n	8008fe8 <_printf_common+0xb0>
 8008f90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f94:	4649      	mov	r1, r9
 8008f96:	4638      	mov	r0, r7
 8008f98:	47c0      	blx	r8
 8008f9a:	3001      	adds	r0, #1
 8008f9c:	d01e      	beq.n	8008fdc <_printf_common+0xa4>
 8008f9e:	6823      	ldr	r3, [r4, #0]
 8008fa0:	68e5      	ldr	r5, [r4, #12]
 8008fa2:	6832      	ldr	r2, [r6, #0]
 8008fa4:	f003 0306 	and.w	r3, r3, #6
 8008fa8:	2b04      	cmp	r3, #4
 8008faa:	bf08      	it	eq
 8008fac:	1aad      	subeq	r5, r5, r2
 8008fae:	68a3      	ldr	r3, [r4, #8]
 8008fb0:	6922      	ldr	r2, [r4, #16]
 8008fb2:	bf0c      	ite	eq
 8008fb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fb8:	2500      	movne	r5, #0
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	bfc4      	itt	gt
 8008fbe:	1a9b      	subgt	r3, r3, r2
 8008fc0:	18ed      	addgt	r5, r5, r3
 8008fc2:	2600      	movs	r6, #0
 8008fc4:	341a      	adds	r4, #26
 8008fc6:	42b5      	cmp	r5, r6
 8008fc8:	d11a      	bne.n	8009000 <_printf_common+0xc8>
 8008fca:	2000      	movs	r0, #0
 8008fcc:	e008      	b.n	8008fe0 <_printf_common+0xa8>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	4652      	mov	r2, sl
 8008fd2:	4649      	mov	r1, r9
 8008fd4:	4638      	mov	r0, r7
 8008fd6:	47c0      	blx	r8
 8008fd8:	3001      	adds	r0, #1
 8008fda:	d103      	bne.n	8008fe4 <_printf_common+0xac>
 8008fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe4:	3501      	adds	r5, #1
 8008fe6:	e7c6      	b.n	8008f76 <_printf_common+0x3e>
 8008fe8:	18e1      	adds	r1, r4, r3
 8008fea:	1c5a      	adds	r2, r3, #1
 8008fec:	2030      	movs	r0, #48	; 0x30
 8008fee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ff2:	4422      	add	r2, r4
 8008ff4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ff8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ffc:	3302      	adds	r3, #2
 8008ffe:	e7c7      	b.n	8008f90 <_printf_common+0x58>
 8009000:	2301      	movs	r3, #1
 8009002:	4622      	mov	r2, r4
 8009004:	4649      	mov	r1, r9
 8009006:	4638      	mov	r0, r7
 8009008:	47c0      	blx	r8
 800900a:	3001      	adds	r0, #1
 800900c:	d0e6      	beq.n	8008fdc <_printf_common+0xa4>
 800900e:	3601      	adds	r6, #1
 8009010:	e7d9      	b.n	8008fc6 <_printf_common+0x8e>
	...

08009014 <_printf_i>:
 8009014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009018:	460c      	mov	r4, r1
 800901a:	4691      	mov	r9, r2
 800901c:	7e27      	ldrb	r7, [r4, #24]
 800901e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009020:	2f78      	cmp	r7, #120	; 0x78
 8009022:	4680      	mov	r8, r0
 8009024:	469a      	mov	sl, r3
 8009026:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800902a:	d807      	bhi.n	800903c <_printf_i+0x28>
 800902c:	2f62      	cmp	r7, #98	; 0x62
 800902e:	d80a      	bhi.n	8009046 <_printf_i+0x32>
 8009030:	2f00      	cmp	r7, #0
 8009032:	f000 80d8 	beq.w	80091e6 <_printf_i+0x1d2>
 8009036:	2f58      	cmp	r7, #88	; 0x58
 8009038:	f000 80a3 	beq.w	8009182 <_printf_i+0x16e>
 800903c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009040:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009044:	e03a      	b.n	80090bc <_printf_i+0xa8>
 8009046:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800904a:	2b15      	cmp	r3, #21
 800904c:	d8f6      	bhi.n	800903c <_printf_i+0x28>
 800904e:	a001      	add	r0, pc, #4	; (adr r0, 8009054 <_printf_i+0x40>)
 8009050:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009054:	080090ad 	.word	0x080090ad
 8009058:	080090c1 	.word	0x080090c1
 800905c:	0800903d 	.word	0x0800903d
 8009060:	0800903d 	.word	0x0800903d
 8009064:	0800903d 	.word	0x0800903d
 8009068:	0800903d 	.word	0x0800903d
 800906c:	080090c1 	.word	0x080090c1
 8009070:	0800903d 	.word	0x0800903d
 8009074:	0800903d 	.word	0x0800903d
 8009078:	0800903d 	.word	0x0800903d
 800907c:	0800903d 	.word	0x0800903d
 8009080:	080091cd 	.word	0x080091cd
 8009084:	080090f1 	.word	0x080090f1
 8009088:	080091af 	.word	0x080091af
 800908c:	0800903d 	.word	0x0800903d
 8009090:	0800903d 	.word	0x0800903d
 8009094:	080091ef 	.word	0x080091ef
 8009098:	0800903d 	.word	0x0800903d
 800909c:	080090f1 	.word	0x080090f1
 80090a0:	0800903d 	.word	0x0800903d
 80090a4:	0800903d 	.word	0x0800903d
 80090a8:	080091b7 	.word	0x080091b7
 80090ac:	680b      	ldr	r3, [r1, #0]
 80090ae:	1d1a      	adds	r2, r3, #4
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	600a      	str	r2, [r1, #0]
 80090b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80090b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090bc:	2301      	movs	r3, #1
 80090be:	e0a3      	b.n	8009208 <_printf_i+0x1f4>
 80090c0:	6825      	ldr	r5, [r4, #0]
 80090c2:	6808      	ldr	r0, [r1, #0]
 80090c4:	062e      	lsls	r6, r5, #24
 80090c6:	f100 0304 	add.w	r3, r0, #4
 80090ca:	d50a      	bpl.n	80090e2 <_printf_i+0xce>
 80090cc:	6805      	ldr	r5, [r0, #0]
 80090ce:	600b      	str	r3, [r1, #0]
 80090d0:	2d00      	cmp	r5, #0
 80090d2:	da03      	bge.n	80090dc <_printf_i+0xc8>
 80090d4:	232d      	movs	r3, #45	; 0x2d
 80090d6:	426d      	negs	r5, r5
 80090d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090dc:	485e      	ldr	r0, [pc, #376]	; (8009258 <_printf_i+0x244>)
 80090de:	230a      	movs	r3, #10
 80090e0:	e019      	b.n	8009116 <_printf_i+0x102>
 80090e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80090e6:	6805      	ldr	r5, [r0, #0]
 80090e8:	600b      	str	r3, [r1, #0]
 80090ea:	bf18      	it	ne
 80090ec:	b22d      	sxthne	r5, r5
 80090ee:	e7ef      	b.n	80090d0 <_printf_i+0xbc>
 80090f0:	680b      	ldr	r3, [r1, #0]
 80090f2:	6825      	ldr	r5, [r4, #0]
 80090f4:	1d18      	adds	r0, r3, #4
 80090f6:	6008      	str	r0, [r1, #0]
 80090f8:	0628      	lsls	r0, r5, #24
 80090fa:	d501      	bpl.n	8009100 <_printf_i+0xec>
 80090fc:	681d      	ldr	r5, [r3, #0]
 80090fe:	e002      	b.n	8009106 <_printf_i+0xf2>
 8009100:	0669      	lsls	r1, r5, #25
 8009102:	d5fb      	bpl.n	80090fc <_printf_i+0xe8>
 8009104:	881d      	ldrh	r5, [r3, #0]
 8009106:	4854      	ldr	r0, [pc, #336]	; (8009258 <_printf_i+0x244>)
 8009108:	2f6f      	cmp	r7, #111	; 0x6f
 800910a:	bf0c      	ite	eq
 800910c:	2308      	moveq	r3, #8
 800910e:	230a      	movne	r3, #10
 8009110:	2100      	movs	r1, #0
 8009112:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009116:	6866      	ldr	r6, [r4, #4]
 8009118:	60a6      	str	r6, [r4, #8]
 800911a:	2e00      	cmp	r6, #0
 800911c:	bfa2      	ittt	ge
 800911e:	6821      	ldrge	r1, [r4, #0]
 8009120:	f021 0104 	bicge.w	r1, r1, #4
 8009124:	6021      	strge	r1, [r4, #0]
 8009126:	b90d      	cbnz	r5, 800912c <_printf_i+0x118>
 8009128:	2e00      	cmp	r6, #0
 800912a:	d04d      	beq.n	80091c8 <_printf_i+0x1b4>
 800912c:	4616      	mov	r6, r2
 800912e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009132:	fb03 5711 	mls	r7, r3, r1, r5
 8009136:	5dc7      	ldrb	r7, [r0, r7]
 8009138:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800913c:	462f      	mov	r7, r5
 800913e:	42bb      	cmp	r3, r7
 8009140:	460d      	mov	r5, r1
 8009142:	d9f4      	bls.n	800912e <_printf_i+0x11a>
 8009144:	2b08      	cmp	r3, #8
 8009146:	d10b      	bne.n	8009160 <_printf_i+0x14c>
 8009148:	6823      	ldr	r3, [r4, #0]
 800914a:	07df      	lsls	r7, r3, #31
 800914c:	d508      	bpl.n	8009160 <_printf_i+0x14c>
 800914e:	6923      	ldr	r3, [r4, #16]
 8009150:	6861      	ldr	r1, [r4, #4]
 8009152:	4299      	cmp	r1, r3
 8009154:	bfde      	ittt	le
 8009156:	2330      	movle	r3, #48	; 0x30
 8009158:	f806 3c01 	strble.w	r3, [r6, #-1]
 800915c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009160:	1b92      	subs	r2, r2, r6
 8009162:	6122      	str	r2, [r4, #16]
 8009164:	f8cd a000 	str.w	sl, [sp]
 8009168:	464b      	mov	r3, r9
 800916a:	aa03      	add	r2, sp, #12
 800916c:	4621      	mov	r1, r4
 800916e:	4640      	mov	r0, r8
 8009170:	f7ff fee2 	bl	8008f38 <_printf_common>
 8009174:	3001      	adds	r0, #1
 8009176:	d14c      	bne.n	8009212 <_printf_i+0x1fe>
 8009178:	f04f 30ff 	mov.w	r0, #4294967295
 800917c:	b004      	add	sp, #16
 800917e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009182:	4835      	ldr	r0, [pc, #212]	; (8009258 <_printf_i+0x244>)
 8009184:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009188:	6823      	ldr	r3, [r4, #0]
 800918a:	680e      	ldr	r6, [r1, #0]
 800918c:	061f      	lsls	r7, r3, #24
 800918e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009192:	600e      	str	r6, [r1, #0]
 8009194:	d514      	bpl.n	80091c0 <_printf_i+0x1ac>
 8009196:	07d9      	lsls	r1, r3, #31
 8009198:	bf44      	itt	mi
 800919a:	f043 0320 	orrmi.w	r3, r3, #32
 800919e:	6023      	strmi	r3, [r4, #0]
 80091a0:	b91d      	cbnz	r5, 80091aa <_printf_i+0x196>
 80091a2:	6823      	ldr	r3, [r4, #0]
 80091a4:	f023 0320 	bic.w	r3, r3, #32
 80091a8:	6023      	str	r3, [r4, #0]
 80091aa:	2310      	movs	r3, #16
 80091ac:	e7b0      	b.n	8009110 <_printf_i+0xfc>
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	f043 0320 	orr.w	r3, r3, #32
 80091b4:	6023      	str	r3, [r4, #0]
 80091b6:	2378      	movs	r3, #120	; 0x78
 80091b8:	4828      	ldr	r0, [pc, #160]	; (800925c <_printf_i+0x248>)
 80091ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091be:	e7e3      	b.n	8009188 <_printf_i+0x174>
 80091c0:	065e      	lsls	r6, r3, #25
 80091c2:	bf48      	it	mi
 80091c4:	b2ad      	uxthmi	r5, r5
 80091c6:	e7e6      	b.n	8009196 <_printf_i+0x182>
 80091c8:	4616      	mov	r6, r2
 80091ca:	e7bb      	b.n	8009144 <_printf_i+0x130>
 80091cc:	680b      	ldr	r3, [r1, #0]
 80091ce:	6826      	ldr	r6, [r4, #0]
 80091d0:	6960      	ldr	r0, [r4, #20]
 80091d2:	1d1d      	adds	r5, r3, #4
 80091d4:	600d      	str	r5, [r1, #0]
 80091d6:	0635      	lsls	r5, r6, #24
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	d501      	bpl.n	80091e0 <_printf_i+0x1cc>
 80091dc:	6018      	str	r0, [r3, #0]
 80091de:	e002      	b.n	80091e6 <_printf_i+0x1d2>
 80091e0:	0671      	lsls	r1, r6, #25
 80091e2:	d5fb      	bpl.n	80091dc <_printf_i+0x1c8>
 80091e4:	8018      	strh	r0, [r3, #0]
 80091e6:	2300      	movs	r3, #0
 80091e8:	6123      	str	r3, [r4, #16]
 80091ea:	4616      	mov	r6, r2
 80091ec:	e7ba      	b.n	8009164 <_printf_i+0x150>
 80091ee:	680b      	ldr	r3, [r1, #0]
 80091f0:	1d1a      	adds	r2, r3, #4
 80091f2:	600a      	str	r2, [r1, #0]
 80091f4:	681e      	ldr	r6, [r3, #0]
 80091f6:	6862      	ldr	r2, [r4, #4]
 80091f8:	2100      	movs	r1, #0
 80091fa:	4630      	mov	r0, r6
 80091fc:	f7f6 ffe8 	bl	80001d0 <memchr>
 8009200:	b108      	cbz	r0, 8009206 <_printf_i+0x1f2>
 8009202:	1b80      	subs	r0, r0, r6
 8009204:	6060      	str	r0, [r4, #4]
 8009206:	6863      	ldr	r3, [r4, #4]
 8009208:	6123      	str	r3, [r4, #16]
 800920a:	2300      	movs	r3, #0
 800920c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009210:	e7a8      	b.n	8009164 <_printf_i+0x150>
 8009212:	6923      	ldr	r3, [r4, #16]
 8009214:	4632      	mov	r2, r6
 8009216:	4649      	mov	r1, r9
 8009218:	4640      	mov	r0, r8
 800921a:	47d0      	blx	sl
 800921c:	3001      	adds	r0, #1
 800921e:	d0ab      	beq.n	8009178 <_printf_i+0x164>
 8009220:	6823      	ldr	r3, [r4, #0]
 8009222:	079b      	lsls	r3, r3, #30
 8009224:	d413      	bmi.n	800924e <_printf_i+0x23a>
 8009226:	68e0      	ldr	r0, [r4, #12]
 8009228:	9b03      	ldr	r3, [sp, #12]
 800922a:	4298      	cmp	r0, r3
 800922c:	bfb8      	it	lt
 800922e:	4618      	movlt	r0, r3
 8009230:	e7a4      	b.n	800917c <_printf_i+0x168>
 8009232:	2301      	movs	r3, #1
 8009234:	4632      	mov	r2, r6
 8009236:	4649      	mov	r1, r9
 8009238:	4640      	mov	r0, r8
 800923a:	47d0      	blx	sl
 800923c:	3001      	adds	r0, #1
 800923e:	d09b      	beq.n	8009178 <_printf_i+0x164>
 8009240:	3501      	adds	r5, #1
 8009242:	68e3      	ldr	r3, [r4, #12]
 8009244:	9903      	ldr	r1, [sp, #12]
 8009246:	1a5b      	subs	r3, r3, r1
 8009248:	42ab      	cmp	r3, r5
 800924a:	dcf2      	bgt.n	8009232 <_printf_i+0x21e>
 800924c:	e7eb      	b.n	8009226 <_printf_i+0x212>
 800924e:	2500      	movs	r5, #0
 8009250:	f104 0619 	add.w	r6, r4, #25
 8009254:	e7f5      	b.n	8009242 <_printf_i+0x22e>
 8009256:	bf00      	nop
 8009258:	0800af31 	.word	0x0800af31
 800925c:	0800af42 	.word	0x0800af42

08009260 <memmove>:
 8009260:	4288      	cmp	r0, r1
 8009262:	b510      	push	{r4, lr}
 8009264:	eb01 0402 	add.w	r4, r1, r2
 8009268:	d902      	bls.n	8009270 <memmove+0x10>
 800926a:	4284      	cmp	r4, r0
 800926c:	4623      	mov	r3, r4
 800926e:	d807      	bhi.n	8009280 <memmove+0x20>
 8009270:	1e43      	subs	r3, r0, #1
 8009272:	42a1      	cmp	r1, r4
 8009274:	d008      	beq.n	8009288 <memmove+0x28>
 8009276:	f811 2b01 	ldrb.w	r2, [r1], #1
 800927a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800927e:	e7f8      	b.n	8009272 <memmove+0x12>
 8009280:	4402      	add	r2, r0
 8009282:	4601      	mov	r1, r0
 8009284:	428a      	cmp	r2, r1
 8009286:	d100      	bne.n	800928a <memmove+0x2a>
 8009288:	bd10      	pop	{r4, pc}
 800928a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800928e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009292:	e7f7      	b.n	8009284 <memmove+0x24>

08009294 <_free_r>:
 8009294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009296:	2900      	cmp	r1, #0
 8009298:	d048      	beq.n	800932c <_free_r+0x98>
 800929a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800929e:	9001      	str	r0, [sp, #4]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f1a1 0404 	sub.w	r4, r1, #4
 80092a6:	bfb8      	it	lt
 80092a8:	18e4      	addlt	r4, r4, r3
 80092aa:	f000 f8d3 	bl	8009454 <__malloc_lock>
 80092ae:	4a20      	ldr	r2, [pc, #128]	; (8009330 <_free_r+0x9c>)
 80092b0:	9801      	ldr	r0, [sp, #4]
 80092b2:	6813      	ldr	r3, [r2, #0]
 80092b4:	4615      	mov	r5, r2
 80092b6:	b933      	cbnz	r3, 80092c6 <_free_r+0x32>
 80092b8:	6063      	str	r3, [r4, #4]
 80092ba:	6014      	str	r4, [r2, #0]
 80092bc:	b003      	add	sp, #12
 80092be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092c2:	f000 b8cd 	b.w	8009460 <__malloc_unlock>
 80092c6:	42a3      	cmp	r3, r4
 80092c8:	d90b      	bls.n	80092e2 <_free_r+0x4e>
 80092ca:	6821      	ldr	r1, [r4, #0]
 80092cc:	1862      	adds	r2, r4, r1
 80092ce:	4293      	cmp	r3, r2
 80092d0:	bf04      	itt	eq
 80092d2:	681a      	ldreq	r2, [r3, #0]
 80092d4:	685b      	ldreq	r3, [r3, #4]
 80092d6:	6063      	str	r3, [r4, #4]
 80092d8:	bf04      	itt	eq
 80092da:	1852      	addeq	r2, r2, r1
 80092dc:	6022      	streq	r2, [r4, #0]
 80092de:	602c      	str	r4, [r5, #0]
 80092e0:	e7ec      	b.n	80092bc <_free_r+0x28>
 80092e2:	461a      	mov	r2, r3
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	b10b      	cbz	r3, 80092ec <_free_r+0x58>
 80092e8:	42a3      	cmp	r3, r4
 80092ea:	d9fa      	bls.n	80092e2 <_free_r+0x4e>
 80092ec:	6811      	ldr	r1, [r2, #0]
 80092ee:	1855      	adds	r5, r2, r1
 80092f0:	42a5      	cmp	r5, r4
 80092f2:	d10b      	bne.n	800930c <_free_r+0x78>
 80092f4:	6824      	ldr	r4, [r4, #0]
 80092f6:	4421      	add	r1, r4
 80092f8:	1854      	adds	r4, r2, r1
 80092fa:	42a3      	cmp	r3, r4
 80092fc:	6011      	str	r1, [r2, #0]
 80092fe:	d1dd      	bne.n	80092bc <_free_r+0x28>
 8009300:	681c      	ldr	r4, [r3, #0]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	6053      	str	r3, [r2, #4]
 8009306:	4421      	add	r1, r4
 8009308:	6011      	str	r1, [r2, #0]
 800930a:	e7d7      	b.n	80092bc <_free_r+0x28>
 800930c:	d902      	bls.n	8009314 <_free_r+0x80>
 800930e:	230c      	movs	r3, #12
 8009310:	6003      	str	r3, [r0, #0]
 8009312:	e7d3      	b.n	80092bc <_free_r+0x28>
 8009314:	6825      	ldr	r5, [r4, #0]
 8009316:	1961      	adds	r1, r4, r5
 8009318:	428b      	cmp	r3, r1
 800931a:	bf04      	itt	eq
 800931c:	6819      	ldreq	r1, [r3, #0]
 800931e:	685b      	ldreq	r3, [r3, #4]
 8009320:	6063      	str	r3, [r4, #4]
 8009322:	bf04      	itt	eq
 8009324:	1949      	addeq	r1, r1, r5
 8009326:	6021      	streq	r1, [r4, #0]
 8009328:	6054      	str	r4, [r2, #4]
 800932a:	e7c7      	b.n	80092bc <_free_r+0x28>
 800932c:	b003      	add	sp, #12
 800932e:	bd30      	pop	{r4, r5, pc}
 8009330:	200049cc 	.word	0x200049cc

08009334 <_malloc_r>:
 8009334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009336:	1ccd      	adds	r5, r1, #3
 8009338:	f025 0503 	bic.w	r5, r5, #3
 800933c:	3508      	adds	r5, #8
 800933e:	2d0c      	cmp	r5, #12
 8009340:	bf38      	it	cc
 8009342:	250c      	movcc	r5, #12
 8009344:	2d00      	cmp	r5, #0
 8009346:	4606      	mov	r6, r0
 8009348:	db01      	blt.n	800934e <_malloc_r+0x1a>
 800934a:	42a9      	cmp	r1, r5
 800934c:	d903      	bls.n	8009356 <_malloc_r+0x22>
 800934e:	230c      	movs	r3, #12
 8009350:	6033      	str	r3, [r6, #0]
 8009352:	2000      	movs	r0, #0
 8009354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009356:	f000 f87d 	bl	8009454 <__malloc_lock>
 800935a:	4921      	ldr	r1, [pc, #132]	; (80093e0 <_malloc_r+0xac>)
 800935c:	680a      	ldr	r2, [r1, #0]
 800935e:	4614      	mov	r4, r2
 8009360:	b99c      	cbnz	r4, 800938a <_malloc_r+0x56>
 8009362:	4f20      	ldr	r7, [pc, #128]	; (80093e4 <_malloc_r+0xb0>)
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	b923      	cbnz	r3, 8009372 <_malloc_r+0x3e>
 8009368:	4621      	mov	r1, r4
 800936a:	4630      	mov	r0, r6
 800936c:	f000 f862 	bl	8009434 <_sbrk_r>
 8009370:	6038      	str	r0, [r7, #0]
 8009372:	4629      	mov	r1, r5
 8009374:	4630      	mov	r0, r6
 8009376:	f000 f85d 	bl	8009434 <_sbrk_r>
 800937a:	1c43      	adds	r3, r0, #1
 800937c:	d123      	bne.n	80093c6 <_malloc_r+0x92>
 800937e:	230c      	movs	r3, #12
 8009380:	6033      	str	r3, [r6, #0]
 8009382:	4630      	mov	r0, r6
 8009384:	f000 f86c 	bl	8009460 <__malloc_unlock>
 8009388:	e7e3      	b.n	8009352 <_malloc_r+0x1e>
 800938a:	6823      	ldr	r3, [r4, #0]
 800938c:	1b5b      	subs	r3, r3, r5
 800938e:	d417      	bmi.n	80093c0 <_malloc_r+0x8c>
 8009390:	2b0b      	cmp	r3, #11
 8009392:	d903      	bls.n	800939c <_malloc_r+0x68>
 8009394:	6023      	str	r3, [r4, #0]
 8009396:	441c      	add	r4, r3
 8009398:	6025      	str	r5, [r4, #0]
 800939a:	e004      	b.n	80093a6 <_malloc_r+0x72>
 800939c:	6863      	ldr	r3, [r4, #4]
 800939e:	42a2      	cmp	r2, r4
 80093a0:	bf0c      	ite	eq
 80093a2:	600b      	streq	r3, [r1, #0]
 80093a4:	6053      	strne	r3, [r2, #4]
 80093a6:	4630      	mov	r0, r6
 80093a8:	f000 f85a 	bl	8009460 <__malloc_unlock>
 80093ac:	f104 000b 	add.w	r0, r4, #11
 80093b0:	1d23      	adds	r3, r4, #4
 80093b2:	f020 0007 	bic.w	r0, r0, #7
 80093b6:	1ac2      	subs	r2, r0, r3
 80093b8:	d0cc      	beq.n	8009354 <_malloc_r+0x20>
 80093ba:	1a1b      	subs	r3, r3, r0
 80093bc:	50a3      	str	r3, [r4, r2]
 80093be:	e7c9      	b.n	8009354 <_malloc_r+0x20>
 80093c0:	4622      	mov	r2, r4
 80093c2:	6864      	ldr	r4, [r4, #4]
 80093c4:	e7cc      	b.n	8009360 <_malloc_r+0x2c>
 80093c6:	1cc4      	adds	r4, r0, #3
 80093c8:	f024 0403 	bic.w	r4, r4, #3
 80093cc:	42a0      	cmp	r0, r4
 80093ce:	d0e3      	beq.n	8009398 <_malloc_r+0x64>
 80093d0:	1a21      	subs	r1, r4, r0
 80093d2:	4630      	mov	r0, r6
 80093d4:	f000 f82e 	bl	8009434 <_sbrk_r>
 80093d8:	3001      	adds	r0, #1
 80093da:	d1dd      	bne.n	8009398 <_malloc_r+0x64>
 80093dc:	e7cf      	b.n	800937e <_malloc_r+0x4a>
 80093de:	bf00      	nop
 80093e0:	200049cc 	.word	0x200049cc
 80093e4:	200049d0 	.word	0x200049d0

080093e8 <_realloc_r>:
 80093e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ea:	4607      	mov	r7, r0
 80093ec:	4614      	mov	r4, r2
 80093ee:	460e      	mov	r6, r1
 80093f0:	b921      	cbnz	r1, 80093fc <_realloc_r+0x14>
 80093f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80093f6:	4611      	mov	r1, r2
 80093f8:	f7ff bf9c 	b.w	8009334 <_malloc_r>
 80093fc:	b922      	cbnz	r2, 8009408 <_realloc_r+0x20>
 80093fe:	f7ff ff49 	bl	8009294 <_free_r>
 8009402:	4625      	mov	r5, r4
 8009404:	4628      	mov	r0, r5
 8009406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009408:	f000 f830 	bl	800946c <_malloc_usable_size_r>
 800940c:	42a0      	cmp	r0, r4
 800940e:	d20f      	bcs.n	8009430 <_realloc_r+0x48>
 8009410:	4621      	mov	r1, r4
 8009412:	4638      	mov	r0, r7
 8009414:	f7ff ff8e 	bl	8009334 <_malloc_r>
 8009418:	4605      	mov	r5, r0
 800941a:	2800      	cmp	r0, #0
 800941c:	d0f2      	beq.n	8009404 <_realloc_r+0x1c>
 800941e:	4631      	mov	r1, r6
 8009420:	4622      	mov	r2, r4
 8009422:	f7ff fbf7 	bl	8008c14 <memcpy>
 8009426:	4631      	mov	r1, r6
 8009428:	4638      	mov	r0, r7
 800942a:	f7ff ff33 	bl	8009294 <_free_r>
 800942e:	e7e9      	b.n	8009404 <_realloc_r+0x1c>
 8009430:	4635      	mov	r5, r6
 8009432:	e7e7      	b.n	8009404 <_realloc_r+0x1c>

08009434 <_sbrk_r>:
 8009434:	b538      	push	{r3, r4, r5, lr}
 8009436:	4d06      	ldr	r5, [pc, #24]	; (8009450 <_sbrk_r+0x1c>)
 8009438:	2300      	movs	r3, #0
 800943a:	4604      	mov	r4, r0
 800943c:	4608      	mov	r0, r1
 800943e:	602b      	str	r3, [r5, #0]
 8009440:	f7f8 fea2 	bl	8002188 <_sbrk>
 8009444:	1c43      	adds	r3, r0, #1
 8009446:	d102      	bne.n	800944e <_sbrk_r+0x1a>
 8009448:	682b      	ldr	r3, [r5, #0]
 800944a:	b103      	cbz	r3, 800944e <_sbrk_r+0x1a>
 800944c:	6023      	str	r3, [r4, #0]
 800944e:	bd38      	pop	{r3, r4, r5, pc}
 8009450:	20005004 	.word	0x20005004

08009454 <__malloc_lock>:
 8009454:	4801      	ldr	r0, [pc, #4]	; (800945c <__malloc_lock+0x8>)
 8009456:	f000 b811 	b.w	800947c <__retarget_lock_acquire_recursive>
 800945a:	bf00      	nop
 800945c:	2000500c 	.word	0x2000500c

08009460 <__malloc_unlock>:
 8009460:	4801      	ldr	r0, [pc, #4]	; (8009468 <__malloc_unlock+0x8>)
 8009462:	f000 b80c 	b.w	800947e <__retarget_lock_release_recursive>
 8009466:	bf00      	nop
 8009468:	2000500c 	.word	0x2000500c

0800946c <_malloc_usable_size_r>:
 800946c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009470:	1f18      	subs	r0, r3, #4
 8009472:	2b00      	cmp	r3, #0
 8009474:	bfbc      	itt	lt
 8009476:	580b      	ldrlt	r3, [r1, r0]
 8009478:	18c0      	addlt	r0, r0, r3
 800947a:	4770      	bx	lr

0800947c <__retarget_lock_acquire_recursive>:
 800947c:	4770      	bx	lr

0800947e <__retarget_lock_release_recursive>:
 800947e:	4770      	bx	lr

08009480 <pow>:
 8009480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009484:	ec59 8b10 	vmov	r8, r9, d0
 8009488:	ec57 6b11 	vmov	r6, r7, d1
 800948c:	f000 f8a8 	bl	80095e0 <__ieee754_pow>
 8009490:	4b4e      	ldr	r3, [pc, #312]	; (80095cc <pow+0x14c>)
 8009492:	f993 3000 	ldrsb.w	r3, [r3]
 8009496:	3301      	adds	r3, #1
 8009498:	ec55 4b10 	vmov	r4, r5, d0
 800949c:	d015      	beq.n	80094ca <pow+0x4a>
 800949e:	4632      	mov	r2, r6
 80094a0:	463b      	mov	r3, r7
 80094a2:	4630      	mov	r0, r6
 80094a4:	4639      	mov	r1, r7
 80094a6:	f7f7 fb39 	bl	8000b1c <__aeabi_dcmpun>
 80094aa:	b970      	cbnz	r0, 80094ca <pow+0x4a>
 80094ac:	4642      	mov	r2, r8
 80094ae:	464b      	mov	r3, r9
 80094b0:	4640      	mov	r0, r8
 80094b2:	4649      	mov	r1, r9
 80094b4:	f7f7 fb32 	bl	8000b1c <__aeabi_dcmpun>
 80094b8:	2200      	movs	r2, #0
 80094ba:	2300      	movs	r3, #0
 80094bc:	b148      	cbz	r0, 80094d2 <pow+0x52>
 80094be:	4630      	mov	r0, r6
 80094c0:	4639      	mov	r1, r7
 80094c2:	f7f7 faf9 	bl	8000ab8 <__aeabi_dcmpeq>
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d17d      	bne.n	80095c6 <pow+0x146>
 80094ca:	ec45 4b10 	vmov	d0, r4, r5
 80094ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094d2:	4640      	mov	r0, r8
 80094d4:	4649      	mov	r1, r9
 80094d6:	f7f7 faef 	bl	8000ab8 <__aeabi_dcmpeq>
 80094da:	b1e0      	cbz	r0, 8009516 <pow+0x96>
 80094dc:	2200      	movs	r2, #0
 80094de:	2300      	movs	r3, #0
 80094e0:	4630      	mov	r0, r6
 80094e2:	4639      	mov	r1, r7
 80094e4:	f7f7 fae8 	bl	8000ab8 <__aeabi_dcmpeq>
 80094e8:	2800      	cmp	r0, #0
 80094ea:	d16c      	bne.n	80095c6 <pow+0x146>
 80094ec:	ec47 6b10 	vmov	d0, r6, r7
 80094f0:	f000 fe55 	bl	800a19e <finite>
 80094f4:	2800      	cmp	r0, #0
 80094f6:	d0e8      	beq.n	80094ca <pow+0x4a>
 80094f8:	2200      	movs	r2, #0
 80094fa:	2300      	movs	r3, #0
 80094fc:	4630      	mov	r0, r6
 80094fe:	4639      	mov	r1, r7
 8009500:	f7f7 fae4 	bl	8000acc <__aeabi_dcmplt>
 8009504:	2800      	cmp	r0, #0
 8009506:	d0e0      	beq.n	80094ca <pow+0x4a>
 8009508:	f7ff fb5a 	bl	8008bc0 <__errno>
 800950c:	2321      	movs	r3, #33	; 0x21
 800950e:	6003      	str	r3, [r0, #0]
 8009510:	2400      	movs	r4, #0
 8009512:	4d2f      	ldr	r5, [pc, #188]	; (80095d0 <pow+0x150>)
 8009514:	e7d9      	b.n	80094ca <pow+0x4a>
 8009516:	ec45 4b10 	vmov	d0, r4, r5
 800951a:	f000 fe40 	bl	800a19e <finite>
 800951e:	bbb8      	cbnz	r0, 8009590 <pow+0x110>
 8009520:	ec49 8b10 	vmov	d0, r8, r9
 8009524:	f000 fe3b 	bl	800a19e <finite>
 8009528:	b390      	cbz	r0, 8009590 <pow+0x110>
 800952a:	ec47 6b10 	vmov	d0, r6, r7
 800952e:	f000 fe36 	bl	800a19e <finite>
 8009532:	b368      	cbz	r0, 8009590 <pow+0x110>
 8009534:	4622      	mov	r2, r4
 8009536:	462b      	mov	r3, r5
 8009538:	4620      	mov	r0, r4
 800953a:	4629      	mov	r1, r5
 800953c:	f7f7 faee 	bl	8000b1c <__aeabi_dcmpun>
 8009540:	b160      	cbz	r0, 800955c <pow+0xdc>
 8009542:	f7ff fb3d 	bl	8008bc0 <__errno>
 8009546:	2321      	movs	r3, #33	; 0x21
 8009548:	6003      	str	r3, [r0, #0]
 800954a:	2200      	movs	r2, #0
 800954c:	2300      	movs	r3, #0
 800954e:	4610      	mov	r0, r2
 8009550:	4619      	mov	r1, r3
 8009552:	f7f7 f973 	bl	800083c <__aeabi_ddiv>
 8009556:	4604      	mov	r4, r0
 8009558:	460d      	mov	r5, r1
 800955a:	e7b6      	b.n	80094ca <pow+0x4a>
 800955c:	f7ff fb30 	bl	8008bc0 <__errno>
 8009560:	2322      	movs	r3, #34	; 0x22
 8009562:	6003      	str	r3, [r0, #0]
 8009564:	2200      	movs	r2, #0
 8009566:	2300      	movs	r3, #0
 8009568:	4640      	mov	r0, r8
 800956a:	4649      	mov	r1, r9
 800956c:	f7f7 faae 	bl	8000acc <__aeabi_dcmplt>
 8009570:	2400      	movs	r4, #0
 8009572:	b158      	cbz	r0, 800958c <pow+0x10c>
 8009574:	ec47 6b10 	vmov	d0, r6, r7
 8009578:	f000 fe26 	bl	800a1c8 <rint>
 800957c:	4632      	mov	r2, r6
 800957e:	ec51 0b10 	vmov	r0, r1, d0
 8009582:	463b      	mov	r3, r7
 8009584:	f7f7 fa98 	bl	8000ab8 <__aeabi_dcmpeq>
 8009588:	2800      	cmp	r0, #0
 800958a:	d0c2      	beq.n	8009512 <pow+0x92>
 800958c:	4d11      	ldr	r5, [pc, #68]	; (80095d4 <pow+0x154>)
 800958e:	e79c      	b.n	80094ca <pow+0x4a>
 8009590:	2200      	movs	r2, #0
 8009592:	2300      	movs	r3, #0
 8009594:	4620      	mov	r0, r4
 8009596:	4629      	mov	r1, r5
 8009598:	f7f7 fa8e 	bl	8000ab8 <__aeabi_dcmpeq>
 800959c:	2800      	cmp	r0, #0
 800959e:	d094      	beq.n	80094ca <pow+0x4a>
 80095a0:	ec49 8b10 	vmov	d0, r8, r9
 80095a4:	f000 fdfb 	bl	800a19e <finite>
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d08e      	beq.n	80094ca <pow+0x4a>
 80095ac:	ec47 6b10 	vmov	d0, r6, r7
 80095b0:	f000 fdf5 	bl	800a19e <finite>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d088      	beq.n	80094ca <pow+0x4a>
 80095b8:	f7ff fb02 	bl	8008bc0 <__errno>
 80095bc:	2322      	movs	r3, #34	; 0x22
 80095be:	6003      	str	r3, [r0, #0]
 80095c0:	2400      	movs	r4, #0
 80095c2:	2500      	movs	r5, #0
 80095c4:	e781      	b.n	80094ca <pow+0x4a>
 80095c6:	4d04      	ldr	r5, [pc, #16]	; (80095d8 <pow+0x158>)
 80095c8:	2400      	movs	r4, #0
 80095ca:	e77e      	b.n	80094ca <pow+0x4a>
 80095cc:	20000074 	.word	0x20000074
 80095d0:	fff00000 	.word	0xfff00000
 80095d4:	7ff00000 	.word	0x7ff00000
 80095d8:	3ff00000 	.word	0x3ff00000
 80095dc:	00000000 	.word	0x00000000

080095e0 <__ieee754_pow>:
 80095e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e4:	ed2d 8b06 	vpush	{d8-d10}
 80095e8:	b08d      	sub	sp, #52	; 0x34
 80095ea:	ed8d 1b02 	vstr	d1, [sp, #8]
 80095ee:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80095f2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80095f6:	ea56 0100 	orrs.w	r1, r6, r0
 80095fa:	ec53 2b10 	vmov	r2, r3, d0
 80095fe:	f000 84d1 	beq.w	8009fa4 <__ieee754_pow+0x9c4>
 8009602:	497f      	ldr	r1, [pc, #508]	; (8009800 <__ieee754_pow+0x220>)
 8009604:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8009608:	428c      	cmp	r4, r1
 800960a:	ee10 8a10 	vmov	r8, s0
 800960e:	4699      	mov	r9, r3
 8009610:	dc09      	bgt.n	8009626 <__ieee754_pow+0x46>
 8009612:	d103      	bne.n	800961c <__ieee754_pow+0x3c>
 8009614:	b97a      	cbnz	r2, 8009636 <__ieee754_pow+0x56>
 8009616:	42a6      	cmp	r6, r4
 8009618:	dd02      	ble.n	8009620 <__ieee754_pow+0x40>
 800961a:	e00c      	b.n	8009636 <__ieee754_pow+0x56>
 800961c:	428e      	cmp	r6, r1
 800961e:	dc02      	bgt.n	8009626 <__ieee754_pow+0x46>
 8009620:	428e      	cmp	r6, r1
 8009622:	d110      	bne.n	8009646 <__ieee754_pow+0x66>
 8009624:	b178      	cbz	r0, 8009646 <__ieee754_pow+0x66>
 8009626:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800962a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800962e:	ea54 0308 	orrs.w	r3, r4, r8
 8009632:	f000 84b7 	beq.w	8009fa4 <__ieee754_pow+0x9c4>
 8009636:	4873      	ldr	r0, [pc, #460]	; (8009804 <__ieee754_pow+0x224>)
 8009638:	b00d      	add	sp, #52	; 0x34
 800963a:	ecbd 8b06 	vpop	{d8-d10}
 800963e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009642:	f000 bdb9 	b.w	800a1b8 <nan>
 8009646:	f1b9 0f00 	cmp.w	r9, #0
 800964a:	da36      	bge.n	80096ba <__ieee754_pow+0xda>
 800964c:	496e      	ldr	r1, [pc, #440]	; (8009808 <__ieee754_pow+0x228>)
 800964e:	428e      	cmp	r6, r1
 8009650:	dc51      	bgt.n	80096f6 <__ieee754_pow+0x116>
 8009652:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8009656:	428e      	cmp	r6, r1
 8009658:	f340 84af 	ble.w	8009fba <__ieee754_pow+0x9da>
 800965c:	1531      	asrs	r1, r6, #20
 800965e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009662:	2914      	cmp	r1, #20
 8009664:	dd0f      	ble.n	8009686 <__ieee754_pow+0xa6>
 8009666:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800966a:	fa20 fc01 	lsr.w	ip, r0, r1
 800966e:	fa0c f101 	lsl.w	r1, ip, r1
 8009672:	4281      	cmp	r1, r0
 8009674:	f040 84a1 	bne.w	8009fba <__ieee754_pow+0x9da>
 8009678:	f00c 0c01 	and.w	ip, ip, #1
 800967c:	f1cc 0102 	rsb	r1, ip, #2
 8009680:	9100      	str	r1, [sp, #0]
 8009682:	b180      	cbz	r0, 80096a6 <__ieee754_pow+0xc6>
 8009684:	e059      	b.n	800973a <__ieee754_pow+0x15a>
 8009686:	2800      	cmp	r0, #0
 8009688:	d155      	bne.n	8009736 <__ieee754_pow+0x156>
 800968a:	f1c1 0114 	rsb	r1, r1, #20
 800968e:	fa46 fc01 	asr.w	ip, r6, r1
 8009692:	fa0c f101 	lsl.w	r1, ip, r1
 8009696:	42b1      	cmp	r1, r6
 8009698:	f040 848c 	bne.w	8009fb4 <__ieee754_pow+0x9d4>
 800969c:	f00c 0c01 	and.w	ip, ip, #1
 80096a0:	f1cc 0102 	rsb	r1, ip, #2
 80096a4:	9100      	str	r1, [sp, #0]
 80096a6:	4959      	ldr	r1, [pc, #356]	; (800980c <__ieee754_pow+0x22c>)
 80096a8:	428e      	cmp	r6, r1
 80096aa:	d12d      	bne.n	8009708 <__ieee754_pow+0x128>
 80096ac:	2f00      	cmp	r7, #0
 80096ae:	da79      	bge.n	80097a4 <__ieee754_pow+0x1c4>
 80096b0:	4956      	ldr	r1, [pc, #344]	; (800980c <__ieee754_pow+0x22c>)
 80096b2:	2000      	movs	r0, #0
 80096b4:	f7f7 f8c2 	bl	800083c <__aeabi_ddiv>
 80096b8:	e016      	b.n	80096e8 <__ieee754_pow+0x108>
 80096ba:	2100      	movs	r1, #0
 80096bc:	9100      	str	r1, [sp, #0]
 80096be:	2800      	cmp	r0, #0
 80096c0:	d13b      	bne.n	800973a <__ieee754_pow+0x15a>
 80096c2:	494f      	ldr	r1, [pc, #316]	; (8009800 <__ieee754_pow+0x220>)
 80096c4:	428e      	cmp	r6, r1
 80096c6:	d1ee      	bne.n	80096a6 <__ieee754_pow+0xc6>
 80096c8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80096cc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80096d0:	ea53 0308 	orrs.w	r3, r3, r8
 80096d4:	f000 8466 	beq.w	8009fa4 <__ieee754_pow+0x9c4>
 80096d8:	4b4d      	ldr	r3, [pc, #308]	; (8009810 <__ieee754_pow+0x230>)
 80096da:	429c      	cmp	r4, r3
 80096dc:	dd0d      	ble.n	80096fa <__ieee754_pow+0x11a>
 80096de:	2f00      	cmp	r7, #0
 80096e0:	f280 8464 	bge.w	8009fac <__ieee754_pow+0x9cc>
 80096e4:	2000      	movs	r0, #0
 80096e6:	2100      	movs	r1, #0
 80096e8:	ec41 0b10 	vmov	d0, r0, r1
 80096ec:	b00d      	add	sp, #52	; 0x34
 80096ee:	ecbd 8b06 	vpop	{d8-d10}
 80096f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f6:	2102      	movs	r1, #2
 80096f8:	e7e0      	b.n	80096bc <__ieee754_pow+0xdc>
 80096fa:	2f00      	cmp	r7, #0
 80096fc:	daf2      	bge.n	80096e4 <__ieee754_pow+0x104>
 80096fe:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8009702:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009706:	e7ef      	b.n	80096e8 <__ieee754_pow+0x108>
 8009708:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800970c:	d104      	bne.n	8009718 <__ieee754_pow+0x138>
 800970e:	4610      	mov	r0, r2
 8009710:	4619      	mov	r1, r3
 8009712:	f7f6 ff69 	bl	80005e8 <__aeabi_dmul>
 8009716:	e7e7      	b.n	80096e8 <__ieee754_pow+0x108>
 8009718:	493e      	ldr	r1, [pc, #248]	; (8009814 <__ieee754_pow+0x234>)
 800971a:	428f      	cmp	r7, r1
 800971c:	d10d      	bne.n	800973a <__ieee754_pow+0x15a>
 800971e:	f1b9 0f00 	cmp.w	r9, #0
 8009722:	db0a      	blt.n	800973a <__ieee754_pow+0x15a>
 8009724:	ec43 2b10 	vmov	d0, r2, r3
 8009728:	b00d      	add	sp, #52	; 0x34
 800972a:	ecbd 8b06 	vpop	{d8-d10}
 800972e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009732:	f000 bc77 	b.w	800a024 <__ieee754_sqrt>
 8009736:	2100      	movs	r1, #0
 8009738:	9100      	str	r1, [sp, #0]
 800973a:	ec43 2b10 	vmov	d0, r2, r3
 800973e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009742:	f000 fd23 	bl	800a18c <fabs>
 8009746:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800974a:	ec51 0b10 	vmov	r0, r1, d0
 800974e:	f1b8 0f00 	cmp.w	r8, #0
 8009752:	d12a      	bne.n	80097aa <__ieee754_pow+0x1ca>
 8009754:	b12c      	cbz	r4, 8009762 <__ieee754_pow+0x182>
 8009756:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800980c <__ieee754_pow+0x22c>
 800975a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800975e:	45e6      	cmp	lr, ip
 8009760:	d123      	bne.n	80097aa <__ieee754_pow+0x1ca>
 8009762:	2f00      	cmp	r7, #0
 8009764:	da05      	bge.n	8009772 <__ieee754_pow+0x192>
 8009766:	4602      	mov	r2, r0
 8009768:	460b      	mov	r3, r1
 800976a:	2000      	movs	r0, #0
 800976c:	4927      	ldr	r1, [pc, #156]	; (800980c <__ieee754_pow+0x22c>)
 800976e:	f7f7 f865 	bl	800083c <__aeabi_ddiv>
 8009772:	f1b9 0f00 	cmp.w	r9, #0
 8009776:	dab7      	bge.n	80096e8 <__ieee754_pow+0x108>
 8009778:	9b00      	ldr	r3, [sp, #0]
 800977a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800977e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009782:	4323      	orrs	r3, r4
 8009784:	d108      	bne.n	8009798 <__ieee754_pow+0x1b8>
 8009786:	4602      	mov	r2, r0
 8009788:	460b      	mov	r3, r1
 800978a:	4610      	mov	r0, r2
 800978c:	4619      	mov	r1, r3
 800978e:	f7f6 fd73 	bl	8000278 <__aeabi_dsub>
 8009792:	4602      	mov	r2, r0
 8009794:	460b      	mov	r3, r1
 8009796:	e78d      	b.n	80096b4 <__ieee754_pow+0xd4>
 8009798:	9b00      	ldr	r3, [sp, #0]
 800979a:	2b01      	cmp	r3, #1
 800979c:	d1a4      	bne.n	80096e8 <__ieee754_pow+0x108>
 800979e:	4602      	mov	r2, r0
 80097a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097a4:	4610      	mov	r0, r2
 80097a6:	4619      	mov	r1, r3
 80097a8:	e79e      	b.n	80096e8 <__ieee754_pow+0x108>
 80097aa:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80097ae:	f10c 35ff 	add.w	r5, ip, #4294967295
 80097b2:	950a      	str	r5, [sp, #40]	; 0x28
 80097b4:	9d00      	ldr	r5, [sp, #0]
 80097b6:	46ac      	mov	ip, r5
 80097b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80097ba:	ea5c 0505 	orrs.w	r5, ip, r5
 80097be:	d0e4      	beq.n	800978a <__ieee754_pow+0x1aa>
 80097c0:	4b15      	ldr	r3, [pc, #84]	; (8009818 <__ieee754_pow+0x238>)
 80097c2:	429e      	cmp	r6, r3
 80097c4:	f340 80fc 	ble.w	80099c0 <__ieee754_pow+0x3e0>
 80097c8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80097cc:	429e      	cmp	r6, r3
 80097ce:	4b10      	ldr	r3, [pc, #64]	; (8009810 <__ieee754_pow+0x230>)
 80097d0:	dd07      	ble.n	80097e2 <__ieee754_pow+0x202>
 80097d2:	429c      	cmp	r4, r3
 80097d4:	dc0a      	bgt.n	80097ec <__ieee754_pow+0x20c>
 80097d6:	2f00      	cmp	r7, #0
 80097d8:	da84      	bge.n	80096e4 <__ieee754_pow+0x104>
 80097da:	a307      	add	r3, pc, #28	; (adr r3, 80097f8 <__ieee754_pow+0x218>)
 80097dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e0:	e795      	b.n	800970e <__ieee754_pow+0x12e>
 80097e2:	429c      	cmp	r4, r3
 80097e4:	dbf7      	blt.n	80097d6 <__ieee754_pow+0x1f6>
 80097e6:	4b09      	ldr	r3, [pc, #36]	; (800980c <__ieee754_pow+0x22c>)
 80097e8:	429c      	cmp	r4, r3
 80097ea:	dd17      	ble.n	800981c <__ieee754_pow+0x23c>
 80097ec:	2f00      	cmp	r7, #0
 80097ee:	dcf4      	bgt.n	80097da <__ieee754_pow+0x1fa>
 80097f0:	e778      	b.n	80096e4 <__ieee754_pow+0x104>
 80097f2:	bf00      	nop
 80097f4:	f3af 8000 	nop.w
 80097f8:	8800759c 	.word	0x8800759c
 80097fc:	7e37e43c 	.word	0x7e37e43c
 8009800:	7ff00000 	.word	0x7ff00000
 8009804:	0800af25 	.word	0x0800af25
 8009808:	433fffff 	.word	0x433fffff
 800980c:	3ff00000 	.word	0x3ff00000
 8009810:	3fefffff 	.word	0x3fefffff
 8009814:	3fe00000 	.word	0x3fe00000
 8009818:	41e00000 	.word	0x41e00000
 800981c:	4b64      	ldr	r3, [pc, #400]	; (80099b0 <__ieee754_pow+0x3d0>)
 800981e:	2200      	movs	r2, #0
 8009820:	f7f6 fd2a 	bl	8000278 <__aeabi_dsub>
 8009824:	a356      	add	r3, pc, #344	; (adr r3, 8009980 <__ieee754_pow+0x3a0>)
 8009826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982a:	4604      	mov	r4, r0
 800982c:	460d      	mov	r5, r1
 800982e:	f7f6 fedb 	bl	80005e8 <__aeabi_dmul>
 8009832:	a355      	add	r3, pc, #340	; (adr r3, 8009988 <__ieee754_pow+0x3a8>)
 8009834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009838:	4606      	mov	r6, r0
 800983a:	460f      	mov	r7, r1
 800983c:	4620      	mov	r0, r4
 800983e:	4629      	mov	r1, r5
 8009840:	f7f6 fed2 	bl	80005e8 <__aeabi_dmul>
 8009844:	4b5b      	ldr	r3, [pc, #364]	; (80099b4 <__ieee754_pow+0x3d4>)
 8009846:	4682      	mov	sl, r0
 8009848:	468b      	mov	fp, r1
 800984a:	2200      	movs	r2, #0
 800984c:	4620      	mov	r0, r4
 800984e:	4629      	mov	r1, r5
 8009850:	f7f6 feca 	bl	80005e8 <__aeabi_dmul>
 8009854:	4602      	mov	r2, r0
 8009856:	460b      	mov	r3, r1
 8009858:	a14d      	add	r1, pc, #308	; (adr r1, 8009990 <__ieee754_pow+0x3b0>)
 800985a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800985e:	f7f6 fd0b 	bl	8000278 <__aeabi_dsub>
 8009862:	4622      	mov	r2, r4
 8009864:	462b      	mov	r3, r5
 8009866:	f7f6 febf 	bl	80005e8 <__aeabi_dmul>
 800986a:	4602      	mov	r2, r0
 800986c:	460b      	mov	r3, r1
 800986e:	2000      	movs	r0, #0
 8009870:	4951      	ldr	r1, [pc, #324]	; (80099b8 <__ieee754_pow+0x3d8>)
 8009872:	f7f6 fd01 	bl	8000278 <__aeabi_dsub>
 8009876:	4622      	mov	r2, r4
 8009878:	4680      	mov	r8, r0
 800987a:	4689      	mov	r9, r1
 800987c:	462b      	mov	r3, r5
 800987e:	4620      	mov	r0, r4
 8009880:	4629      	mov	r1, r5
 8009882:	f7f6 feb1 	bl	80005e8 <__aeabi_dmul>
 8009886:	4602      	mov	r2, r0
 8009888:	460b      	mov	r3, r1
 800988a:	4640      	mov	r0, r8
 800988c:	4649      	mov	r1, r9
 800988e:	f7f6 feab 	bl	80005e8 <__aeabi_dmul>
 8009892:	a341      	add	r3, pc, #260	; (adr r3, 8009998 <__ieee754_pow+0x3b8>)
 8009894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009898:	f7f6 fea6 	bl	80005e8 <__aeabi_dmul>
 800989c:	4602      	mov	r2, r0
 800989e:	460b      	mov	r3, r1
 80098a0:	4650      	mov	r0, sl
 80098a2:	4659      	mov	r1, fp
 80098a4:	f7f6 fce8 	bl	8000278 <__aeabi_dsub>
 80098a8:	4602      	mov	r2, r0
 80098aa:	460b      	mov	r3, r1
 80098ac:	4680      	mov	r8, r0
 80098ae:	4689      	mov	r9, r1
 80098b0:	4630      	mov	r0, r6
 80098b2:	4639      	mov	r1, r7
 80098b4:	f7f6 fce2 	bl	800027c <__adddf3>
 80098b8:	2400      	movs	r4, #0
 80098ba:	4632      	mov	r2, r6
 80098bc:	463b      	mov	r3, r7
 80098be:	4620      	mov	r0, r4
 80098c0:	460d      	mov	r5, r1
 80098c2:	f7f6 fcd9 	bl	8000278 <__aeabi_dsub>
 80098c6:	4602      	mov	r2, r0
 80098c8:	460b      	mov	r3, r1
 80098ca:	4640      	mov	r0, r8
 80098cc:	4649      	mov	r1, r9
 80098ce:	f7f6 fcd3 	bl	8000278 <__aeabi_dsub>
 80098d2:	9b00      	ldr	r3, [sp, #0]
 80098d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098d6:	3b01      	subs	r3, #1
 80098d8:	4313      	orrs	r3, r2
 80098da:	4682      	mov	sl, r0
 80098dc:	468b      	mov	fp, r1
 80098de:	f040 81f1 	bne.w	8009cc4 <__ieee754_pow+0x6e4>
 80098e2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80099a0 <__ieee754_pow+0x3c0>
 80098e6:	eeb0 8a47 	vmov.f32	s16, s14
 80098ea:	eef0 8a67 	vmov.f32	s17, s15
 80098ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80098f2:	2600      	movs	r6, #0
 80098f4:	4632      	mov	r2, r6
 80098f6:	463b      	mov	r3, r7
 80098f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098fc:	f7f6 fcbc 	bl	8000278 <__aeabi_dsub>
 8009900:	4622      	mov	r2, r4
 8009902:	462b      	mov	r3, r5
 8009904:	f7f6 fe70 	bl	80005e8 <__aeabi_dmul>
 8009908:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800990c:	4680      	mov	r8, r0
 800990e:	4689      	mov	r9, r1
 8009910:	4650      	mov	r0, sl
 8009912:	4659      	mov	r1, fp
 8009914:	f7f6 fe68 	bl	80005e8 <__aeabi_dmul>
 8009918:	4602      	mov	r2, r0
 800991a:	460b      	mov	r3, r1
 800991c:	4640      	mov	r0, r8
 800991e:	4649      	mov	r1, r9
 8009920:	f7f6 fcac 	bl	800027c <__adddf3>
 8009924:	4632      	mov	r2, r6
 8009926:	463b      	mov	r3, r7
 8009928:	4680      	mov	r8, r0
 800992a:	4689      	mov	r9, r1
 800992c:	4620      	mov	r0, r4
 800992e:	4629      	mov	r1, r5
 8009930:	f7f6 fe5a 	bl	80005e8 <__aeabi_dmul>
 8009934:	460b      	mov	r3, r1
 8009936:	4604      	mov	r4, r0
 8009938:	460d      	mov	r5, r1
 800993a:	4602      	mov	r2, r0
 800993c:	4649      	mov	r1, r9
 800993e:	4640      	mov	r0, r8
 8009940:	f7f6 fc9c 	bl	800027c <__adddf3>
 8009944:	4b1d      	ldr	r3, [pc, #116]	; (80099bc <__ieee754_pow+0x3dc>)
 8009946:	4299      	cmp	r1, r3
 8009948:	ec45 4b19 	vmov	d9, r4, r5
 800994c:	4606      	mov	r6, r0
 800994e:	460f      	mov	r7, r1
 8009950:	468b      	mov	fp, r1
 8009952:	f340 82fe 	ble.w	8009f52 <__ieee754_pow+0x972>
 8009956:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800995a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800995e:	4303      	orrs	r3, r0
 8009960:	f000 81f0 	beq.w	8009d44 <__ieee754_pow+0x764>
 8009964:	a310      	add	r3, pc, #64	; (adr r3, 80099a8 <__ieee754_pow+0x3c8>)
 8009966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996a:	ec51 0b18 	vmov	r0, r1, d8
 800996e:	f7f6 fe3b 	bl	80005e8 <__aeabi_dmul>
 8009972:	a30d      	add	r3, pc, #52	; (adr r3, 80099a8 <__ieee754_pow+0x3c8>)
 8009974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009978:	e6cb      	b.n	8009712 <__ieee754_pow+0x132>
 800997a:	bf00      	nop
 800997c:	f3af 8000 	nop.w
 8009980:	60000000 	.word	0x60000000
 8009984:	3ff71547 	.word	0x3ff71547
 8009988:	f85ddf44 	.word	0xf85ddf44
 800998c:	3e54ae0b 	.word	0x3e54ae0b
 8009990:	55555555 	.word	0x55555555
 8009994:	3fd55555 	.word	0x3fd55555
 8009998:	652b82fe 	.word	0x652b82fe
 800999c:	3ff71547 	.word	0x3ff71547
 80099a0:	00000000 	.word	0x00000000
 80099a4:	bff00000 	.word	0xbff00000
 80099a8:	8800759c 	.word	0x8800759c
 80099ac:	7e37e43c 	.word	0x7e37e43c
 80099b0:	3ff00000 	.word	0x3ff00000
 80099b4:	3fd00000 	.word	0x3fd00000
 80099b8:	3fe00000 	.word	0x3fe00000
 80099bc:	408fffff 	.word	0x408fffff
 80099c0:	4bd7      	ldr	r3, [pc, #860]	; (8009d20 <__ieee754_pow+0x740>)
 80099c2:	ea03 0309 	and.w	r3, r3, r9
 80099c6:	2200      	movs	r2, #0
 80099c8:	b92b      	cbnz	r3, 80099d6 <__ieee754_pow+0x3f6>
 80099ca:	4bd6      	ldr	r3, [pc, #856]	; (8009d24 <__ieee754_pow+0x744>)
 80099cc:	f7f6 fe0c 	bl	80005e8 <__aeabi_dmul>
 80099d0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80099d4:	460c      	mov	r4, r1
 80099d6:	1523      	asrs	r3, r4, #20
 80099d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80099dc:	4413      	add	r3, r2
 80099de:	9309      	str	r3, [sp, #36]	; 0x24
 80099e0:	4bd1      	ldr	r3, [pc, #836]	; (8009d28 <__ieee754_pow+0x748>)
 80099e2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80099e6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80099ea:	429c      	cmp	r4, r3
 80099ec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80099f0:	dd08      	ble.n	8009a04 <__ieee754_pow+0x424>
 80099f2:	4bce      	ldr	r3, [pc, #824]	; (8009d2c <__ieee754_pow+0x74c>)
 80099f4:	429c      	cmp	r4, r3
 80099f6:	f340 8163 	ble.w	8009cc0 <__ieee754_pow+0x6e0>
 80099fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099fc:	3301      	adds	r3, #1
 80099fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009a00:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009a04:	2400      	movs	r4, #0
 8009a06:	00e3      	lsls	r3, r4, #3
 8009a08:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a0a:	4bc9      	ldr	r3, [pc, #804]	; (8009d30 <__ieee754_pow+0x750>)
 8009a0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a10:	ed93 7b00 	vldr	d7, [r3]
 8009a14:	4629      	mov	r1, r5
 8009a16:	ec53 2b17 	vmov	r2, r3, d7
 8009a1a:	eeb0 8a47 	vmov.f32	s16, s14
 8009a1e:	eef0 8a67 	vmov.f32	s17, s15
 8009a22:	4682      	mov	sl, r0
 8009a24:	f7f6 fc28 	bl	8000278 <__aeabi_dsub>
 8009a28:	4652      	mov	r2, sl
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	460f      	mov	r7, r1
 8009a2e:	462b      	mov	r3, r5
 8009a30:	ec51 0b18 	vmov	r0, r1, d8
 8009a34:	f7f6 fc22 	bl	800027c <__adddf3>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	49bd      	ldr	r1, [pc, #756]	; (8009d34 <__ieee754_pow+0x754>)
 8009a40:	f7f6 fefc 	bl	800083c <__aeabi_ddiv>
 8009a44:	ec41 0b19 	vmov	d9, r0, r1
 8009a48:	4602      	mov	r2, r0
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	4639      	mov	r1, r7
 8009a50:	f7f6 fdca 	bl	80005e8 <__aeabi_dmul>
 8009a54:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009a58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a60:	2300      	movs	r3, #0
 8009a62:	9304      	str	r3, [sp, #16]
 8009a64:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009a68:	46ab      	mov	fp, r5
 8009a6a:	106d      	asrs	r5, r5, #1
 8009a6c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009a70:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009a74:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009a78:	2200      	movs	r2, #0
 8009a7a:	4640      	mov	r0, r8
 8009a7c:	4649      	mov	r1, r9
 8009a7e:	4614      	mov	r4, r2
 8009a80:	461d      	mov	r5, r3
 8009a82:	f7f6 fdb1 	bl	80005e8 <__aeabi_dmul>
 8009a86:	4602      	mov	r2, r0
 8009a88:	460b      	mov	r3, r1
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	4639      	mov	r1, r7
 8009a8e:	f7f6 fbf3 	bl	8000278 <__aeabi_dsub>
 8009a92:	ec53 2b18 	vmov	r2, r3, d8
 8009a96:	4606      	mov	r6, r0
 8009a98:	460f      	mov	r7, r1
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	4629      	mov	r1, r5
 8009a9e:	f7f6 fbeb 	bl	8000278 <__aeabi_dsub>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	4650      	mov	r0, sl
 8009aa8:	4659      	mov	r1, fp
 8009aaa:	f7f6 fbe5 	bl	8000278 <__aeabi_dsub>
 8009aae:	4642      	mov	r2, r8
 8009ab0:	464b      	mov	r3, r9
 8009ab2:	f7f6 fd99 	bl	80005e8 <__aeabi_dmul>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	460b      	mov	r3, r1
 8009aba:	4630      	mov	r0, r6
 8009abc:	4639      	mov	r1, r7
 8009abe:	f7f6 fbdb 	bl	8000278 <__aeabi_dsub>
 8009ac2:	ec53 2b19 	vmov	r2, r3, d9
 8009ac6:	f7f6 fd8f 	bl	80005e8 <__aeabi_dmul>
 8009aca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ace:	ec41 0b18 	vmov	d8, r0, r1
 8009ad2:	4610      	mov	r0, r2
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	f7f6 fd87 	bl	80005e8 <__aeabi_dmul>
 8009ada:	a37d      	add	r3, pc, #500	; (adr r3, 8009cd0 <__ieee754_pow+0x6f0>)
 8009adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae0:	4604      	mov	r4, r0
 8009ae2:	460d      	mov	r5, r1
 8009ae4:	f7f6 fd80 	bl	80005e8 <__aeabi_dmul>
 8009ae8:	a37b      	add	r3, pc, #492	; (adr r3, 8009cd8 <__ieee754_pow+0x6f8>)
 8009aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aee:	f7f6 fbc5 	bl	800027c <__adddf3>
 8009af2:	4622      	mov	r2, r4
 8009af4:	462b      	mov	r3, r5
 8009af6:	f7f6 fd77 	bl	80005e8 <__aeabi_dmul>
 8009afa:	a379      	add	r3, pc, #484	; (adr r3, 8009ce0 <__ieee754_pow+0x700>)
 8009afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b00:	f7f6 fbbc 	bl	800027c <__adddf3>
 8009b04:	4622      	mov	r2, r4
 8009b06:	462b      	mov	r3, r5
 8009b08:	f7f6 fd6e 	bl	80005e8 <__aeabi_dmul>
 8009b0c:	a376      	add	r3, pc, #472	; (adr r3, 8009ce8 <__ieee754_pow+0x708>)
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	f7f6 fbb3 	bl	800027c <__adddf3>
 8009b16:	4622      	mov	r2, r4
 8009b18:	462b      	mov	r3, r5
 8009b1a:	f7f6 fd65 	bl	80005e8 <__aeabi_dmul>
 8009b1e:	a374      	add	r3, pc, #464	; (adr r3, 8009cf0 <__ieee754_pow+0x710>)
 8009b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b24:	f7f6 fbaa 	bl	800027c <__adddf3>
 8009b28:	4622      	mov	r2, r4
 8009b2a:	462b      	mov	r3, r5
 8009b2c:	f7f6 fd5c 	bl	80005e8 <__aeabi_dmul>
 8009b30:	a371      	add	r3, pc, #452	; (adr r3, 8009cf8 <__ieee754_pow+0x718>)
 8009b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b36:	f7f6 fba1 	bl	800027c <__adddf3>
 8009b3a:	4622      	mov	r2, r4
 8009b3c:	4606      	mov	r6, r0
 8009b3e:	460f      	mov	r7, r1
 8009b40:	462b      	mov	r3, r5
 8009b42:	4620      	mov	r0, r4
 8009b44:	4629      	mov	r1, r5
 8009b46:	f7f6 fd4f 	bl	80005e8 <__aeabi_dmul>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	4630      	mov	r0, r6
 8009b50:	4639      	mov	r1, r7
 8009b52:	f7f6 fd49 	bl	80005e8 <__aeabi_dmul>
 8009b56:	4642      	mov	r2, r8
 8009b58:	4604      	mov	r4, r0
 8009b5a:	460d      	mov	r5, r1
 8009b5c:	464b      	mov	r3, r9
 8009b5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b62:	f7f6 fb8b 	bl	800027c <__adddf3>
 8009b66:	ec53 2b18 	vmov	r2, r3, d8
 8009b6a:	f7f6 fd3d 	bl	80005e8 <__aeabi_dmul>
 8009b6e:	4622      	mov	r2, r4
 8009b70:	462b      	mov	r3, r5
 8009b72:	f7f6 fb83 	bl	800027c <__adddf3>
 8009b76:	4642      	mov	r2, r8
 8009b78:	4682      	mov	sl, r0
 8009b7a:	468b      	mov	fp, r1
 8009b7c:	464b      	mov	r3, r9
 8009b7e:	4640      	mov	r0, r8
 8009b80:	4649      	mov	r1, r9
 8009b82:	f7f6 fd31 	bl	80005e8 <__aeabi_dmul>
 8009b86:	4b6c      	ldr	r3, [pc, #432]	; (8009d38 <__ieee754_pow+0x758>)
 8009b88:	2200      	movs	r2, #0
 8009b8a:	4606      	mov	r6, r0
 8009b8c:	460f      	mov	r7, r1
 8009b8e:	f7f6 fb75 	bl	800027c <__adddf3>
 8009b92:	4652      	mov	r2, sl
 8009b94:	465b      	mov	r3, fp
 8009b96:	f7f6 fb71 	bl	800027c <__adddf3>
 8009b9a:	9c04      	ldr	r4, [sp, #16]
 8009b9c:	460d      	mov	r5, r1
 8009b9e:	4622      	mov	r2, r4
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	4640      	mov	r0, r8
 8009ba4:	4649      	mov	r1, r9
 8009ba6:	f7f6 fd1f 	bl	80005e8 <__aeabi_dmul>
 8009baa:	4b63      	ldr	r3, [pc, #396]	; (8009d38 <__ieee754_pow+0x758>)
 8009bac:	4680      	mov	r8, r0
 8009bae:	4689      	mov	r9, r1
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	4629      	mov	r1, r5
 8009bb6:	f7f6 fb5f 	bl	8000278 <__aeabi_dsub>
 8009bba:	4632      	mov	r2, r6
 8009bbc:	463b      	mov	r3, r7
 8009bbe:	f7f6 fb5b 	bl	8000278 <__aeabi_dsub>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	4650      	mov	r0, sl
 8009bc8:	4659      	mov	r1, fp
 8009bca:	f7f6 fb55 	bl	8000278 <__aeabi_dsub>
 8009bce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bd2:	f7f6 fd09 	bl	80005e8 <__aeabi_dmul>
 8009bd6:	4622      	mov	r2, r4
 8009bd8:	4606      	mov	r6, r0
 8009bda:	460f      	mov	r7, r1
 8009bdc:	462b      	mov	r3, r5
 8009bde:	ec51 0b18 	vmov	r0, r1, d8
 8009be2:	f7f6 fd01 	bl	80005e8 <__aeabi_dmul>
 8009be6:	4602      	mov	r2, r0
 8009be8:	460b      	mov	r3, r1
 8009bea:	4630      	mov	r0, r6
 8009bec:	4639      	mov	r1, r7
 8009bee:	f7f6 fb45 	bl	800027c <__adddf3>
 8009bf2:	4606      	mov	r6, r0
 8009bf4:	460f      	mov	r7, r1
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	4640      	mov	r0, r8
 8009bfc:	4649      	mov	r1, r9
 8009bfe:	f7f6 fb3d 	bl	800027c <__adddf3>
 8009c02:	9c04      	ldr	r4, [sp, #16]
 8009c04:	a33e      	add	r3, pc, #248	; (adr r3, 8009d00 <__ieee754_pow+0x720>)
 8009c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	460d      	mov	r5, r1
 8009c0e:	f7f6 fceb 	bl	80005e8 <__aeabi_dmul>
 8009c12:	4642      	mov	r2, r8
 8009c14:	ec41 0b18 	vmov	d8, r0, r1
 8009c18:	464b      	mov	r3, r9
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	4629      	mov	r1, r5
 8009c1e:	f7f6 fb2b 	bl	8000278 <__aeabi_dsub>
 8009c22:	4602      	mov	r2, r0
 8009c24:	460b      	mov	r3, r1
 8009c26:	4630      	mov	r0, r6
 8009c28:	4639      	mov	r1, r7
 8009c2a:	f7f6 fb25 	bl	8000278 <__aeabi_dsub>
 8009c2e:	a336      	add	r3, pc, #216	; (adr r3, 8009d08 <__ieee754_pow+0x728>)
 8009c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c34:	f7f6 fcd8 	bl	80005e8 <__aeabi_dmul>
 8009c38:	a335      	add	r3, pc, #212	; (adr r3, 8009d10 <__ieee754_pow+0x730>)
 8009c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3e:	4606      	mov	r6, r0
 8009c40:	460f      	mov	r7, r1
 8009c42:	4620      	mov	r0, r4
 8009c44:	4629      	mov	r1, r5
 8009c46:	f7f6 fccf 	bl	80005e8 <__aeabi_dmul>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	4630      	mov	r0, r6
 8009c50:	4639      	mov	r1, r7
 8009c52:	f7f6 fb13 	bl	800027c <__adddf3>
 8009c56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c58:	4b38      	ldr	r3, [pc, #224]	; (8009d3c <__ieee754_pow+0x75c>)
 8009c5a:	4413      	add	r3, r2
 8009c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c60:	f7f6 fb0c 	bl	800027c <__adddf3>
 8009c64:	4682      	mov	sl, r0
 8009c66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c68:	468b      	mov	fp, r1
 8009c6a:	f7f6 fc53 	bl	8000514 <__aeabi_i2d>
 8009c6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c70:	4b33      	ldr	r3, [pc, #204]	; (8009d40 <__ieee754_pow+0x760>)
 8009c72:	4413      	add	r3, r2
 8009c74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c78:	4606      	mov	r6, r0
 8009c7a:	460f      	mov	r7, r1
 8009c7c:	4652      	mov	r2, sl
 8009c7e:	465b      	mov	r3, fp
 8009c80:	ec51 0b18 	vmov	r0, r1, d8
 8009c84:	f7f6 fafa 	bl	800027c <__adddf3>
 8009c88:	4642      	mov	r2, r8
 8009c8a:	464b      	mov	r3, r9
 8009c8c:	f7f6 faf6 	bl	800027c <__adddf3>
 8009c90:	4632      	mov	r2, r6
 8009c92:	463b      	mov	r3, r7
 8009c94:	f7f6 faf2 	bl	800027c <__adddf3>
 8009c98:	9c04      	ldr	r4, [sp, #16]
 8009c9a:	4632      	mov	r2, r6
 8009c9c:	463b      	mov	r3, r7
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	460d      	mov	r5, r1
 8009ca2:	f7f6 fae9 	bl	8000278 <__aeabi_dsub>
 8009ca6:	4642      	mov	r2, r8
 8009ca8:	464b      	mov	r3, r9
 8009caa:	f7f6 fae5 	bl	8000278 <__aeabi_dsub>
 8009cae:	ec53 2b18 	vmov	r2, r3, d8
 8009cb2:	f7f6 fae1 	bl	8000278 <__aeabi_dsub>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	460b      	mov	r3, r1
 8009cba:	4650      	mov	r0, sl
 8009cbc:	4659      	mov	r1, fp
 8009cbe:	e606      	b.n	80098ce <__ieee754_pow+0x2ee>
 8009cc0:	2401      	movs	r4, #1
 8009cc2:	e6a0      	b.n	8009a06 <__ieee754_pow+0x426>
 8009cc4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009d18 <__ieee754_pow+0x738>
 8009cc8:	e60d      	b.n	80098e6 <__ieee754_pow+0x306>
 8009cca:	bf00      	nop
 8009ccc:	f3af 8000 	nop.w
 8009cd0:	4a454eef 	.word	0x4a454eef
 8009cd4:	3fca7e28 	.word	0x3fca7e28
 8009cd8:	93c9db65 	.word	0x93c9db65
 8009cdc:	3fcd864a 	.word	0x3fcd864a
 8009ce0:	a91d4101 	.word	0xa91d4101
 8009ce4:	3fd17460 	.word	0x3fd17460
 8009ce8:	518f264d 	.word	0x518f264d
 8009cec:	3fd55555 	.word	0x3fd55555
 8009cf0:	db6fabff 	.word	0xdb6fabff
 8009cf4:	3fdb6db6 	.word	0x3fdb6db6
 8009cf8:	33333303 	.word	0x33333303
 8009cfc:	3fe33333 	.word	0x3fe33333
 8009d00:	e0000000 	.word	0xe0000000
 8009d04:	3feec709 	.word	0x3feec709
 8009d08:	dc3a03fd 	.word	0xdc3a03fd
 8009d0c:	3feec709 	.word	0x3feec709
 8009d10:	145b01f5 	.word	0x145b01f5
 8009d14:	be3e2fe0 	.word	0xbe3e2fe0
 8009d18:	00000000 	.word	0x00000000
 8009d1c:	3ff00000 	.word	0x3ff00000
 8009d20:	7ff00000 	.word	0x7ff00000
 8009d24:	43400000 	.word	0x43400000
 8009d28:	0003988e 	.word	0x0003988e
 8009d2c:	000bb679 	.word	0x000bb679
 8009d30:	0800af58 	.word	0x0800af58
 8009d34:	3ff00000 	.word	0x3ff00000
 8009d38:	40080000 	.word	0x40080000
 8009d3c:	0800af78 	.word	0x0800af78
 8009d40:	0800af68 	.word	0x0800af68
 8009d44:	a3b5      	add	r3, pc, #724	; (adr r3, 800a01c <__ieee754_pow+0xa3c>)
 8009d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4a:	4640      	mov	r0, r8
 8009d4c:	4649      	mov	r1, r9
 8009d4e:	f7f6 fa95 	bl	800027c <__adddf3>
 8009d52:	4622      	mov	r2, r4
 8009d54:	ec41 0b1a 	vmov	d10, r0, r1
 8009d58:	462b      	mov	r3, r5
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	4639      	mov	r1, r7
 8009d5e:	f7f6 fa8b 	bl	8000278 <__aeabi_dsub>
 8009d62:	4602      	mov	r2, r0
 8009d64:	460b      	mov	r3, r1
 8009d66:	ec51 0b1a 	vmov	r0, r1, d10
 8009d6a:	f7f6 fecd 	bl	8000b08 <__aeabi_dcmpgt>
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	f47f adf8 	bne.w	8009964 <__ieee754_pow+0x384>
 8009d74:	4aa4      	ldr	r2, [pc, #656]	; (800a008 <__ieee754_pow+0xa28>)
 8009d76:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	f340 810b 	ble.w	8009f96 <__ieee754_pow+0x9b6>
 8009d80:	151b      	asrs	r3, r3, #20
 8009d82:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009d86:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009d8a:	fa4a f303 	asr.w	r3, sl, r3
 8009d8e:	445b      	add	r3, fp
 8009d90:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009d94:	4e9d      	ldr	r6, [pc, #628]	; (800a00c <__ieee754_pow+0xa2c>)
 8009d96:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009d9a:	4116      	asrs	r6, r2
 8009d9c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009da0:	2000      	movs	r0, #0
 8009da2:	ea23 0106 	bic.w	r1, r3, r6
 8009da6:	f1c2 0214 	rsb	r2, r2, #20
 8009daa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009dae:	fa4a fa02 	asr.w	sl, sl, r2
 8009db2:	f1bb 0f00 	cmp.w	fp, #0
 8009db6:	4602      	mov	r2, r0
 8009db8:	460b      	mov	r3, r1
 8009dba:	4620      	mov	r0, r4
 8009dbc:	4629      	mov	r1, r5
 8009dbe:	bfb8      	it	lt
 8009dc0:	f1ca 0a00 	rsblt	sl, sl, #0
 8009dc4:	f7f6 fa58 	bl	8000278 <__aeabi_dsub>
 8009dc8:	ec41 0b19 	vmov	d9, r0, r1
 8009dcc:	4642      	mov	r2, r8
 8009dce:	464b      	mov	r3, r9
 8009dd0:	ec51 0b19 	vmov	r0, r1, d9
 8009dd4:	f7f6 fa52 	bl	800027c <__adddf3>
 8009dd8:	2400      	movs	r4, #0
 8009dda:	a379      	add	r3, pc, #484	; (adr r3, 8009fc0 <__ieee754_pow+0x9e0>)
 8009ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de0:	4620      	mov	r0, r4
 8009de2:	460d      	mov	r5, r1
 8009de4:	f7f6 fc00 	bl	80005e8 <__aeabi_dmul>
 8009de8:	ec53 2b19 	vmov	r2, r3, d9
 8009dec:	4606      	mov	r6, r0
 8009dee:	460f      	mov	r7, r1
 8009df0:	4620      	mov	r0, r4
 8009df2:	4629      	mov	r1, r5
 8009df4:	f7f6 fa40 	bl	8000278 <__aeabi_dsub>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	4640      	mov	r0, r8
 8009dfe:	4649      	mov	r1, r9
 8009e00:	f7f6 fa3a 	bl	8000278 <__aeabi_dsub>
 8009e04:	a370      	add	r3, pc, #448	; (adr r3, 8009fc8 <__ieee754_pow+0x9e8>)
 8009e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0a:	f7f6 fbed 	bl	80005e8 <__aeabi_dmul>
 8009e0e:	a370      	add	r3, pc, #448	; (adr r3, 8009fd0 <__ieee754_pow+0x9f0>)
 8009e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e14:	4680      	mov	r8, r0
 8009e16:	4689      	mov	r9, r1
 8009e18:	4620      	mov	r0, r4
 8009e1a:	4629      	mov	r1, r5
 8009e1c:	f7f6 fbe4 	bl	80005e8 <__aeabi_dmul>
 8009e20:	4602      	mov	r2, r0
 8009e22:	460b      	mov	r3, r1
 8009e24:	4640      	mov	r0, r8
 8009e26:	4649      	mov	r1, r9
 8009e28:	f7f6 fa28 	bl	800027c <__adddf3>
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	460d      	mov	r5, r1
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	4630      	mov	r0, r6
 8009e36:	4639      	mov	r1, r7
 8009e38:	f7f6 fa20 	bl	800027c <__adddf3>
 8009e3c:	4632      	mov	r2, r6
 8009e3e:	463b      	mov	r3, r7
 8009e40:	4680      	mov	r8, r0
 8009e42:	4689      	mov	r9, r1
 8009e44:	f7f6 fa18 	bl	8000278 <__aeabi_dsub>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	4629      	mov	r1, r5
 8009e50:	f7f6 fa12 	bl	8000278 <__aeabi_dsub>
 8009e54:	4642      	mov	r2, r8
 8009e56:	4606      	mov	r6, r0
 8009e58:	460f      	mov	r7, r1
 8009e5a:	464b      	mov	r3, r9
 8009e5c:	4640      	mov	r0, r8
 8009e5e:	4649      	mov	r1, r9
 8009e60:	f7f6 fbc2 	bl	80005e8 <__aeabi_dmul>
 8009e64:	a35c      	add	r3, pc, #368	; (adr r3, 8009fd8 <__ieee754_pow+0x9f8>)
 8009e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	460d      	mov	r5, r1
 8009e6e:	f7f6 fbbb 	bl	80005e8 <__aeabi_dmul>
 8009e72:	a35b      	add	r3, pc, #364	; (adr r3, 8009fe0 <__ieee754_pow+0xa00>)
 8009e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e78:	f7f6 f9fe 	bl	8000278 <__aeabi_dsub>
 8009e7c:	4622      	mov	r2, r4
 8009e7e:	462b      	mov	r3, r5
 8009e80:	f7f6 fbb2 	bl	80005e8 <__aeabi_dmul>
 8009e84:	a358      	add	r3, pc, #352	; (adr r3, 8009fe8 <__ieee754_pow+0xa08>)
 8009e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8a:	f7f6 f9f7 	bl	800027c <__adddf3>
 8009e8e:	4622      	mov	r2, r4
 8009e90:	462b      	mov	r3, r5
 8009e92:	f7f6 fba9 	bl	80005e8 <__aeabi_dmul>
 8009e96:	a356      	add	r3, pc, #344	; (adr r3, 8009ff0 <__ieee754_pow+0xa10>)
 8009e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9c:	f7f6 f9ec 	bl	8000278 <__aeabi_dsub>
 8009ea0:	4622      	mov	r2, r4
 8009ea2:	462b      	mov	r3, r5
 8009ea4:	f7f6 fba0 	bl	80005e8 <__aeabi_dmul>
 8009ea8:	a353      	add	r3, pc, #332	; (adr r3, 8009ff8 <__ieee754_pow+0xa18>)
 8009eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eae:	f7f6 f9e5 	bl	800027c <__adddf3>
 8009eb2:	4622      	mov	r2, r4
 8009eb4:	462b      	mov	r3, r5
 8009eb6:	f7f6 fb97 	bl	80005e8 <__aeabi_dmul>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	4640      	mov	r0, r8
 8009ec0:	4649      	mov	r1, r9
 8009ec2:	f7f6 f9d9 	bl	8000278 <__aeabi_dsub>
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	460d      	mov	r5, r1
 8009eca:	4602      	mov	r2, r0
 8009ecc:	460b      	mov	r3, r1
 8009ece:	4640      	mov	r0, r8
 8009ed0:	4649      	mov	r1, r9
 8009ed2:	f7f6 fb89 	bl	80005e8 <__aeabi_dmul>
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	ec41 0b19 	vmov	d9, r0, r1
 8009edc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	4629      	mov	r1, r5
 8009ee4:	f7f6 f9c8 	bl	8000278 <__aeabi_dsub>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	460b      	mov	r3, r1
 8009eec:	ec51 0b19 	vmov	r0, r1, d9
 8009ef0:	f7f6 fca4 	bl	800083c <__aeabi_ddiv>
 8009ef4:	4632      	mov	r2, r6
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	460d      	mov	r5, r1
 8009efa:	463b      	mov	r3, r7
 8009efc:	4640      	mov	r0, r8
 8009efe:	4649      	mov	r1, r9
 8009f00:	f7f6 fb72 	bl	80005e8 <__aeabi_dmul>
 8009f04:	4632      	mov	r2, r6
 8009f06:	463b      	mov	r3, r7
 8009f08:	f7f6 f9b8 	bl	800027c <__adddf3>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	460b      	mov	r3, r1
 8009f10:	4620      	mov	r0, r4
 8009f12:	4629      	mov	r1, r5
 8009f14:	f7f6 f9b0 	bl	8000278 <__aeabi_dsub>
 8009f18:	4642      	mov	r2, r8
 8009f1a:	464b      	mov	r3, r9
 8009f1c:	f7f6 f9ac 	bl	8000278 <__aeabi_dsub>
 8009f20:	460b      	mov	r3, r1
 8009f22:	4602      	mov	r2, r0
 8009f24:	493a      	ldr	r1, [pc, #232]	; (800a010 <__ieee754_pow+0xa30>)
 8009f26:	2000      	movs	r0, #0
 8009f28:	f7f6 f9a6 	bl	8000278 <__aeabi_dsub>
 8009f2c:	e9cd 0100 	strd	r0, r1, [sp]
 8009f30:	9b01      	ldr	r3, [sp, #4]
 8009f32:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f3a:	da2f      	bge.n	8009f9c <__ieee754_pow+0x9bc>
 8009f3c:	4650      	mov	r0, sl
 8009f3e:	ed9d 0b00 	vldr	d0, [sp]
 8009f42:	f000 f9cd 	bl	800a2e0 <scalbn>
 8009f46:	ec51 0b10 	vmov	r0, r1, d0
 8009f4a:	ec53 2b18 	vmov	r2, r3, d8
 8009f4e:	f7ff bbe0 	b.w	8009712 <__ieee754_pow+0x132>
 8009f52:	4b30      	ldr	r3, [pc, #192]	; (800a014 <__ieee754_pow+0xa34>)
 8009f54:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009f58:	429e      	cmp	r6, r3
 8009f5a:	f77f af0b 	ble.w	8009d74 <__ieee754_pow+0x794>
 8009f5e:	4b2e      	ldr	r3, [pc, #184]	; (800a018 <__ieee754_pow+0xa38>)
 8009f60:	440b      	add	r3, r1
 8009f62:	4303      	orrs	r3, r0
 8009f64:	d00b      	beq.n	8009f7e <__ieee754_pow+0x99e>
 8009f66:	a326      	add	r3, pc, #152	; (adr r3, 800a000 <__ieee754_pow+0xa20>)
 8009f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6c:	ec51 0b18 	vmov	r0, r1, d8
 8009f70:	f7f6 fb3a 	bl	80005e8 <__aeabi_dmul>
 8009f74:	a322      	add	r3, pc, #136	; (adr r3, 800a000 <__ieee754_pow+0xa20>)
 8009f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7a:	f7ff bbca 	b.w	8009712 <__ieee754_pow+0x132>
 8009f7e:	4622      	mov	r2, r4
 8009f80:	462b      	mov	r3, r5
 8009f82:	f7f6 f979 	bl	8000278 <__aeabi_dsub>
 8009f86:	4642      	mov	r2, r8
 8009f88:	464b      	mov	r3, r9
 8009f8a:	f7f6 fdb3 	bl	8000af4 <__aeabi_dcmpge>
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	f43f aef0 	beq.w	8009d74 <__ieee754_pow+0x794>
 8009f94:	e7e7      	b.n	8009f66 <__ieee754_pow+0x986>
 8009f96:	f04f 0a00 	mov.w	sl, #0
 8009f9a:	e717      	b.n	8009dcc <__ieee754_pow+0x7ec>
 8009f9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	e7d2      	b.n	8009f4a <__ieee754_pow+0x96a>
 8009fa4:	491a      	ldr	r1, [pc, #104]	; (800a010 <__ieee754_pow+0xa30>)
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	f7ff bb9e 	b.w	80096e8 <__ieee754_pow+0x108>
 8009fac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fb0:	f7ff bb9a 	b.w	80096e8 <__ieee754_pow+0x108>
 8009fb4:	9000      	str	r0, [sp, #0]
 8009fb6:	f7ff bb76 	b.w	80096a6 <__ieee754_pow+0xc6>
 8009fba:	2100      	movs	r1, #0
 8009fbc:	f7ff bb60 	b.w	8009680 <__ieee754_pow+0xa0>
 8009fc0:	00000000 	.word	0x00000000
 8009fc4:	3fe62e43 	.word	0x3fe62e43
 8009fc8:	fefa39ef 	.word	0xfefa39ef
 8009fcc:	3fe62e42 	.word	0x3fe62e42
 8009fd0:	0ca86c39 	.word	0x0ca86c39
 8009fd4:	be205c61 	.word	0xbe205c61
 8009fd8:	72bea4d0 	.word	0x72bea4d0
 8009fdc:	3e663769 	.word	0x3e663769
 8009fe0:	c5d26bf1 	.word	0xc5d26bf1
 8009fe4:	3ebbbd41 	.word	0x3ebbbd41
 8009fe8:	af25de2c 	.word	0xaf25de2c
 8009fec:	3f11566a 	.word	0x3f11566a
 8009ff0:	16bebd93 	.word	0x16bebd93
 8009ff4:	3f66c16c 	.word	0x3f66c16c
 8009ff8:	5555553e 	.word	0x5555553e
 8009ffc:	3fc55555 	.word	0x3fc55555
 800a000:	c2f8f359 	.word	0xc2f8f359
 800a004:	01a56e1f 	.word	0x01a56e1f
 800a008:	3fe00000 	.word	0x3fe00000
 800a00c:	000fffff 	.word	0x000fffff
 800a010:	3ff00000 	.word	0x3ff00000
 800a014:	4090cbff 	.word	0x4090cbff
 800a018:	3f6f3400 	.word	0x3f6f3400
 800a01c:	652b82fe 	.word	0x652b82fe
 800a020:	3c971547 	.word	0x3c971547

0800a024 <__ieee754_sqrt>:
 800a024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a028:	ec55 4b10 	vmov	r4, r5, d0
 800a02c:	4e56      	ldr	r6, [pc, #344]	; (800a188 <__ieee754_sqrt+0x164>)
 800a02e:	43ae      	bics	r6, r5
 800a030:	ee10 0a10 	vmov	r0, s0
 800a034:	ee10 3a10 	vmov	r3, s0
 800a038:	4629      	mov	r1, r5
 800a03a:	462a      	mov	r2, r5
 800a03c:	d110      	bne.n	800a060 <__ieee754_sqrt+0x3c>
 800a03e:	ee10 2a10 	vmov	r2, s0
 800a042:	462b      	mov	r3, r5
 800a044:	f7f6 fad0 	bl	80005e8 <__aeabi_dmul>
 800a048:	4602      	mov	r2, r0
 800a04a:	460b      	mov	r3, r1
 800a04c:	4620      	mov	r0, r4
 800a04e:	4629      	mov	r1, r5
 800a050:	f7f6 f914 	bl	800027c <__adddf3>
 800a054:	4604      	mov	r4, r0
 800a056:	460d      	mov	r5, r1
 800a058:	ec45 4b10 	vmov	d0, r4, r5
 800a05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a060:	2d00      	cmp	r5, #0
 800a062:	dc10      	bgt.n	800a086 <__ieee754_sqrt+0x62>
 800a064:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a068:	4330      	orrs	r0, r6
 800a06a:	d0f5      	beq.n	800a058 <__ieee754_sqrt+0x34>
 800a06c:	b15d      	cbz	r5, 800a086 <__ieee754_sqrt+0x62>
 800a06e:	ee10 2a10 	vmov	r2, s0
 800a072:	462b      	mov	r3, r5
 800a074:	ee10 0a10 	vmov	r0, s0
 800a078:	f7f6 f8fe 	bl	8000278 <__aeabi_dsub>
 800a07c:	4602      	mov	r2, r0
 800a07e:	460b      	mov	r3, r1
 800a080:	f7f6 fbdc 	bl	800083c <__aeabi_ddiv>
 800a084:	e7e6      	b.n	800a054 <__ieee754_sqrt+0x30>
 800a086:	1509      	asrs	r1, r1, #20
 800a088:	d076      	beq.n	800a178 <__ieee754_sqrt+0x154>
 800a08a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a08e:	07ce      	lsls	r6, r1, #31
 800a090:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a094:	bf5e      	ittt	pl
 800a096:	0fda      	lsrpl	r2, r3, #31
 800a098:	005b      	lslpl	r3, r3, #1
 800a09a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a09e:	0fda      	lsrs	r2, r3, #31
 800a0a0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a0a4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a0a8:	2000      	movs	r0, #0
 800a0aa:	106d      	asrs	r5, r5, #1
 800a0ac:	005b      	lsls	r3, r3, #1
 800a0ae:	f04f 0e16 	mov.w	lr, #22
 800a0b2:	4684      	mov	ip, r0
 800a0b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a0b8:	eb0c 0401 	add.w	r4, ip, r1
 800a0bc:	4294      	cmp	r4, r2
 800a0be:	bfde      	ittt	le
 800a0c0:	1b12      	suble	r2, r2, r4
 800a0c2:	eb04 0c01 	addle.w	ip, r4, r1
 800a0c6:	1840      	addle	r0, r0, r1
 800a0c8:	0052      	lsls	r2, r2, #1
 800a0ca:	f1be 0e01 	subs.w	lr, lr, #1
 800a0ce:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a0d2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a0d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a0da:	d1ed      	bne.n	800a0b8 <__ieee754_sqrt+0x94>
 800a0dc:	4671      	mov	r1, lr
 800a0de:	2720      	movs	r7, #32
 800a0e0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a0e4:	4562      	cmp	r2, ip
 800a0e6:	eb04 060e 	add.w	r6, r4, lr
 800a0ea:	dc02      	bgt.n	800a0f2 <__ieee754_sqrt+0xce>
 800a0ec:	d113      	bne.n	800a116 <__ieee754_sqrt+0xf2>
 800a0ee:	429e      	cmp	r6, r3
 800a0f0:	d811      	bhi.n	800a116 <__ieee754_sqrt+0xf2>
 800a0f2:	2e00      	cmp	r6, #0
 800a0f4:	eb06 0e04 	add.w	lr, r6, r4
 800a0f8:	da43      	bge.n	800a182 <__ieee754_sqrt+0x15e>
 800a0fa:	f1be 0f00 	cmp.w	lr, #0
 800a0fe:	db40      	blt.n	800a182 <__ieee754_sqrt+0x15e>
 800a100:	f10c 0801 	add.w	r8, ip, #1
 800a104:	eba2 020c 	sub.w	r2, r2, ip
 800a108:	429e      	cmp	r6, r3
 800a10a:	bf88      	it	hi
 800a10c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a110:	1b9b      	subs	r3, r3, r6
 800a112:	4421      	add	r1, r4
 800a114:	46c4      	mov	ip, r8
 800a116:	0052      	lsls	r2, r2, #1
 800a118:	3f01      	subs	r7, #1
 800a11a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a11e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a122:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a126:	d1dd      	bne.n	800a0e4 <__ieee754_sqrt+0xc0>
 800a128:	4313      	orrs	r3, r2
 800a12a:	d006      	beq.n	800a13a <__ieee754_sqrt+0x116>
 800a12c:	1c4c      	adds	r4, r1, #1
 800a12e:	bf13      	iteet	ne
 800a130:	3101      	addne	r1, #1
 800a132:	3001      	addeq	r0, #1
 800a134:	4639      	moveq	r1, r7
 800a136:	f021 0101 	bicne.w	r1, r1, #1
 800a13a:	1043      	asrs	r3, r0, #1
 800a13c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a140:	0849      	lsrs	r1, r1, #1
 800a142:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a146:	07c2      	lsls	r2, r0, #31
 800a148:	bf48      	it	mi
 800a14a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a14e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a152:	460c      	mov	r4, r1
 800a154:	463d      	mov	r5, r7
 800a156:	e77f      	b.n	800a058 <__ieee754_sqrt+0x34>
 800a158:	0ada      	lsrs	r2, r3, #11
 800a15a:	3815      	subs	r0, #21
 800a15c:	055b      	lsls	r3, r3, #21
 800a15e:	2a00      	cmp	r2, #0
 800a160:	d0fa      	beq.n	800a158 <__ieee754_sqrt+0x134>
 800a162:	02d7      	lsls	r7, r2, #11
 800a164:	d50a      	bpl.n	800a17c <__ieee754_sqrt+0x158>
 800a166:	f1c1 0420 	rsb	r4, r1, #32
 800a16a:	fa23 f404 	lsr.w	r4, r3, r4
 800a16e:	1e4d      	subs	r5, r1, #1
 800a170:	408b      	lsls	r3, r1
 800a172:	4322      	orrs	r2, r4
 800a174:	1b41      	subs	r1, r0, r5
 800a176:	e788      	b.n	800a08a <__ieee754_sqrt+0x66>
 800a178:	4608      	mov	r0, r1
 800a17a:	e7f0      	b.n	800a15e <__ieee754_sqrt+0x13a>
 800a17c:	0052      	lsls	r2, r2, #1
 800a17e:	3101      	adds	r1, #1
 800a180:	e7ef      	b.n	800a162 <__ieee754_sqrt+0x13e>
 800a182:	46e0      	mov	r8, ip
 800a184:	e7be      	b.n	800a104 <__ieee754_sqrt+0xe0>
 800a186:	bf00      	nop
 800a188:	7ff00000 	.word	0x7ff00000

0800a18c <fabs>:
 800a18c:	ec51 0b10 	vmov	r0, r1, d0
 800a190:	ee10 2a10 	vmov	r2, s0
 800a194:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a198:	ec43 2b10 	vmov	d0, r2, r3
 800a19c:	4770      	bx	lr

0800a19e <finite>:
 800a19e:	b082      	sub	sp, #8
 800a1a0:	ed8d 0b00 	vstr	d0, [sp]
 800a1a4:	9801      	ldr	r0, [sp, #4]
 800a1a6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a1aa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a1ae:	0fc0      	lsrs	r0, r0, #31
 800a1b0:	b002      	add	sp, #8
 800a1b2:	4770      	bx	lr
 800a1b4:	0000      	movs	r0, r0
	...

0800a1b8 <nan>:
 800a1b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a1c0 <nan+0x8>
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop
 800a1c0:	00000000 	.word	0x00000000
 800a1c4:	7ff80000 	.word	0x7ff80000

0800a1c8 <rint>:
 800a1c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1ca:	ec51 0b10 	vmov	r0, r1, d0
 800a1ce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a1d2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a1d6:	2e13      	cmp	r6, #19
 800a1d8:	ee10 4a10 	vmov	r4, s0
 800a1dc:	460b      	mov	r3, r1
 800a1de:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a1e2:	dc58      	bgt.n	800a296 <rint+0xce>
 800a1e4:	2e00      	cmp	r6, #0
 800a1e6:	da2b      	bge.n	800a240 <rint+0x78>
 800a1e8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a1ec:	4302      	orrs	r2, r0
 800a1ee:	d023      	beq.n	800a238 <rint+0x70>
 800a1f0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a1f4:	4302      	orrs	r2, r0
 800a1f6:	4254      	negs	r4, r2
 800a1f8:	4314      	orrs	r4, r2
 800a1fa:	0c4b      	lsrs	r3, r1, #17
 800a1fc:	0b24      	lsrs	r4, r4, #12
 800a1fe:	045b      	lsls	r3, r3, #17
 800a200:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a204:	ea44 0103 	orr.w	r1, r4, r3
 800a208:	4b32      	ldr	r3, [pc, #200]	; (800a2d4 <rint+0x10c>)
 800a20a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a20e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a212:	4602      	mov	r2, r0
 800a214:	460b      	mov	r3, r1
 800a216:	4630      	mov	r0, r6
 800a218:	4639      	mov	r1, r7
 800a21a:	f7f6 f82f 	bl	800027c <__adddf3>
 800a21e:	e9cd 0100 	strd	r0, r1, [sp]
 800a222:	463b      	mov	r3, r7
 800a224:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a228:	4632      	mov	r2, r6
 800a22a:	f7f6 f825 	bl	8000278 <__aeabi_dsub>
 800a22e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a232:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a236:	4639      	mov	r1, r7
 800a238:	ec41 0b10 	vmov	d0, r0, r1
 800a23c:	b003      	add	sp, #12
 800a23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a240:	4a25      	ldr	r2, [pc, #148]	; (800a2d8 <rint+0x110>)
 800a242:	4132      	asrs	r2, r6
 800a244:	ea01 0702 	and.w	r7, r1, r2
 800a248:	4307      	orrs	r7, r0
 800a24a:	d0f5      	beq.n	800a238 <rint+0x70>
 800a24c:	0851      	lsrs	r1, r2, #1
 800a24e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800a252:	4314      	orrs	r4, r2
 800a254:	d00c      	beq.n	800a270 <rint+0xa8>
 800a256:	ea23 0201 	bic.w	r2, r3, r1
 800a25a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a25e:	2e13      	cmp	r6, #19
 800a260:	fa43 f606 	asr.w	r6, r3, r6
 800a264:	bf0c      	ite	eq
 800a266:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a26a:	2400      	movne	r4, #0
 800a26c:	ea42 0306 	orr.w	r3, r2, r6
 800a270:	4918      	ldr	r1, [pc, #96]	; (800a2d4 <rint+0x10c>)
 800a272:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a276:	4622      	mov	r2, r4
 800a278:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a27c:	4620      	mov	r0, r4
 800a27e:	4629      	mov	r1, r5
 800a280:	f7f5 fffc 	bl	800027c <__adddf3>
 800a284:	e9cd 0100 	strd	r0, r1, [sp]
 800a288:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a28c:	4622      	mov	r2, r4
 800a28e:	462b      	mov	r3, r5
 800a290:	f7f5 fff2 	bl	8000278 <__aeabi_dsub>
 800a294:	e7d0      	b.n	800a238 <rint+0x70>
 800a296:	2e33      	cmp	r6, #51	; 0x33
 800a298:	dd07      	ble.n	800a2aa <rint+0xe2>
 800a29a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a29e:	d1cb      	bne.n	800a238 <rint+0x70>
 800a2a0:	ee10 2a10 	vmov	r2, s0
 800a2a4:	f7f5 ffea 	bl	800027c <__adddf3>
 800a2a8:	e7c6      	b.n	800a238 <rint+0x70>
 800a2aa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800a2ae:	f04f 36ff 	mov.w	r6, #4294967295
 800a2b2:	40d6      	lsrs	r6, r2
 800a2b4:	4230      	tst	r0, r6
 800a2b6:	d0bf      	beq.n	800a238 <rint+0x70>
 800a2b8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800a2bc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800a2c0:	bf1f      	itttt	ne
 800a2c2:	ea24 0101 	bicne.w	r1, r4, r1
 800a2c6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a2ca:	fa44 f202 	asrne.w	r2, r4, r2
 800a2ce:	ea41 0402 	orrne.w	r4, r1, r2
 800a2d2:	e7cd      	b.n	800a270 <rint+0xa8>
 800a2d4:	0800af88 	.word	0x0800af88
 800a2d8:	000fffff 	.word	0x000fffff
 800a2dc:	00000000 	.word	0x00000000

0800a2e0 <scalbn>:
 800a2e0:	b570      	push	{r4, r5, r6, lr}
 800a2e2:	ec55 4b10 	vmov	r4, r5, d0
 800a2e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a2ea:	4606      	mov	r6, r0
 800a2ec:	462b      	mov	r3, r5
 800a2ee:	b99a      	cbnz	r2, 800a318 <scalbn+0x38>
 800a2f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a2f4:	4323      	orrs	r3, r4
 800a2f6:	d036      	beq.n	800a366 <scalbn+0x86>
 800a2f8:	4b39      	ldr	r3, [pc, #228]	; (800a3e0 <scalbn+0x100>)
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	ee10 0a10 	vmov	r0, s0
 800a300:	2200      	movs	r2, #0
 800a302:	f7f6 f971 	bl	80005e8 <__aeabi_dmul>
 800a306:	4b37      	ldr	r3, [pc, #220]	; (800a3e4 <scalbn+0x104>)
 800a308:	429e      	cmp	r6, r3
 800a30a:	4604      	mov	r4, r0
 800a30c:	460d      	mov	r5, r1
 800a30e:	da10      	bge.n	800a332 <scalbn+0x52>
 800a310:	a32b      	add	r3, pc, #172	; (adr r3, 800a3c0 <scalbn+0xe0>)
 800a312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a316:	e03a      	b.n	800a38e <scalbn+0xae>
 800a318:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a31c:	428a      	cmp	r2, r1
 800a31e:	d10c      	bne.n	800a33a <scalbn+0x5a>
 800a320:	ee10 2a10 	vmov	r2, s0
 800a324:	4620      	mov	r0, r4
 800a326:	4629      	mov	r1, r5
 800a328:	f7f5 ffa8 	bl	800027c <__adddf3>
 800a32c:	4604      	mov	r4, r0
 800a32e:	460d      	mov	r5, r1
 800a330:	e019      	b.n	800a366 <scalbn+0x86>
 800a332:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a336:	460b      	mov	r3, r1
 800a338:	3a36      	subs	r2, #54	; 0x36
 800a33a:	4432      	add	r2, r6
 800a33c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a340:	428a      	cmp	r2, r1
 800a342:	dd08      	ble.n	800a356 <scalbn+0x76>
 800a344:	2d00      	cmp	r5, #0
 800a346:	a120      	add	r1, pc, #128	; (adr r1, 800a3c8 <scalbn+0xe8>)
 800a348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a34c:	da1c      	bge.n	800a388 <scalbn+0xa8>
 800a34e:	a120      	add	r1, pc, #128	; (adr r1, 800a3d0 <scalbn+0xf0>)
 800a350:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a354:	e018      	b.n	800a388 <scalbn+0xa8>
 800a356:	2a00      	cmp	r2, #0
 800a358:	dd08      	ble.n	800a36c <scalbn+0x8c>
 800a35a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a35e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a362:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a366:	ec45 4b10 	vmov	d0, r4, r5
 800a36a:	bd70      	pop	{r4, r5, r6, pc}
 800a36c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a370:	da19      	bge.n	800a3a6 <scalbn+0xc6>
 800a372:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a376:	429e      	cmp	r6, r3
 800a378:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a37c:	dd0a      	ble.n	800a394 <scalbn+0xb4>
 800a37e:	a112      	add	r1, pc, #72	; (adr r1, 800a3c8 <scalbn+0xe8>)
 800a380:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d1e2      	bne.n	800a34e <scalbn+0x6e>
 800a388:	a30f      	add	r3, pc, #60	; (adr r3, 800a3c8 <scalbn+0xe8>)
 800a38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38e:	f7f6 f92b 	bl	80005e8 <__aeabi_dmul>
 800a392:	e7cb      	b.n	800a32c <scalbn+0x4c>
 800a394:	a10a      	add	r1, pc, #40	; (adr r1, 800a3c0 <scalbn+0xe0>)
 800a396:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d0b8      	beq.n	800a310 <scalbn+0x30>
 800a39e:	a10e      	add	r1, pc, #56	; (adr r1, 800a3d8 <scalbn+0xf8>)
 800a3a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3a4:	e7b4      	b.n	800a310 <scalbn+0x30>
 800a3a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a3aa:	3236      	adds	r2, #54	; 0x36
 800a3ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a3b0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	4b0c      	ldr	r3, [pc, #48]	; (800a3e8 <scalbn+0x108>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	e7e8      	b.n	800a38e <scalbn+0xae>
 800a3bc:	f3af 8000 	nop.w
 800a3c0:	c2f8f359 	.word	0xc2f8f359
 800a3c4:	01a56e1f 	.word	0x01a56e1f
 800a3c8:	8800759c 	.word	0x8800759c
 800a3cc:	7e37e43c 	.word	0x7e37e43c
 800a3d0:	8800759c 	.word	0x8800759c
 800a3d4:	fe37e43c 	.word	0xfe37e43c
 800a3d8:	c2f8f359 	.word	0xc2f8f359
 800a3dc:	81a56e1f 	.word	0x81a56e1f
 800a3e0:	43500000 	.word	0x43500000
 800a3e4:	ffff3cb0 	.word	0xffff3cb0
 800a3e8:	3c900000 	.word	0x3c900000

0800a3ec <_init>:
 800a3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ee:	bf00      	nop
 800a3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3f2:	bc08      	pop	{r3}
 800a3f4:	469e      	mov	lr, r3
 800a3f6:	4770      	bx	lr

0800a3f8 <_fini>:
 800a3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fa:	bf00      	nop
 800a3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3fe:	bc08      	pop	{r3}
 800a400:	469e      	mov	lr, r3
 800a402:	4770      	bx	lr
