
MDP_grp13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a208  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b94  0800a398  0800a398  0001a398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af2c  0800af2c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800af2c  0800af2c  0001af2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af34  0800af34  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af34  0800af34  0001af34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af38  0800af38  0001af38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800af3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00005034  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200050a8  200050a8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ec92  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003abf  00000000  00000000  0003ed36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001720  00000000  00000000  000427f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015f0  00000000  00000000  00043f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000443d  00000000  00000000  00045508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000197ae  00000000  00000000  00049945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e266d  00000000  00000000  000630f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00145760  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006794  00000000  00000000  001457b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a380 	.word	0x0800a380

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800a380 	.word	0x0800a380

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bd0:	f000 b96e 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f040 8083 	bne.w	8000d02 <__udivmoddi4+0x116>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4617      	mov	r7, r2
 8000c00:	d947      	bls.n	8000c92 <__udivmoddi4+0xa6>
 8000c02:	fab2 f282 	clz	r2, r2
 8000c06:	b142      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c08:	f1c2 0020 	rsb	r0, r2, #32
 8000c0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c10:	4091      	lsls	r1, r2
 8000c12:	4097      	lsls	r7, r2
 8000c14:	ea40 0c01 	orr.w	ip, r0, r1
 8000c18:	4094      	lsls	r4, r2
 8000c1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fbbc f6f8 	udiv	r6, ip, r8
 8000c24:	fa1f fe87 	uxth.w	lr, r7
 8000c28:	fb08 c116 	mls	r1, r8, r6, ip
 8000c2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c30:	fb06 f10e 	mul.w	r1, r6, lr
 8000c34:	4299      	cmp	r1, r3
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x60>
 8000c38:	18fb      	adds	r3, r7, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c3e:	f080 8119 	bcs.w	8000e74 <__udivmoddi4+0x288>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 8116 	bls.w	8000e74 <__udivmoddi4+0x288>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	443b      	add	r3, r7
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x8c>
 8000c64:	193c      	adds	r4, r7, r4
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 8105 	bcs.w	8000e78 <__udivmoddi4+0x28c>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	f240 8102 	bls.w	8000e78 <__udivmoddi4+0x28c>
 8000c74:	3802      	subs	r0, #2
 8000c76:	443c      	add	r4, r7
 8000c78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7c:	eba4 040e 	sub.w	r4, r4, lr
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa0>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	b902      	cbnz	r2, 8000c96 <__udivmoddi4+0xaa>
 8000c94:	deff      	udf	#255	; 0xff
 8000c96:	fab2 f282 	clz	r2, r2
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d150      	bne.n	8000d40 <__udivmoddi4+0x154>
 8000c9e:	1bcb      	subs	r3, r1, r7
 8000ca0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca4:	fa1f f887 	uxth.w	r8, r7
 8000ca8:	2601      	movs	r6, #1
 8000caa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cae:	0c21      	lsrs	r1, r4, #16
 8000cb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cbc:	428b      	cmp	r3, r1
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0xe4>
 8000cc0:	1879      	adds	r1, r7, r1
 8000cc2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0xe2>
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	f200 80e9 	bhi.w	8000ea0 <__udivmoddi4+0x2b4>
 8000cce:	4684      	mov	ip, r0
 8000cd0:	1ac9      	subs	r1, r1, r3
 8000cd2:	b2a3      	uxth	r3, r4
 8000cd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ce0:	fb08 f800 	mul.w	r8, r8, r0
 8000ce4:	45a0      	cmp	r8, r4
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x10c>
 8000ce8:	193c      	adds	r4, r7, r4
 8000cea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x10a>
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	f200 80d9 	bhi.w	8000ea8 <__udivmoddi4+0x2bc>
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	eba4 0408 	sub.w	r4, r4, r8
 8000cfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d00:	e7bf      	b.n	8000c82 <__udivmoddi4+0x96>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x12e>
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	f000 80b1 	beq.w	8000e6e <__udivmoddi4+0x282>
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d12:	4630      	mov	r0, r6
 8000d14:	4631      	mov	r1, r6
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f683 	clz	r6, r3
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d14a      	bne.n	8000db8 <__udivmoddi4+0x1cc>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0x140>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80b8 	bhi.w	8000e9c <__udivmoddi4+0x2b0>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	468c      	mov	ip, r1
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0a8      	beq.n	8000c8c <__udivmoddi4+0xa0>
 8000d3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3e:	e7a5      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f603 	lsr.w	r6, r0, r3
 8000d48:	4097      	lsls	r7, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d52:	40d9      	lsrs	r1, r3
 8000d54:	4330      	orrs	r0, r6
 8000d56:	0c03      	lsrs	r3, r0, #16
 8000d58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d5c:	fa1f f887 	uxth.w	r8, r7
 8000d60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f108 	mul.w	r1, r6, r8
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x19c>
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 808d 	bcs.w	8000e98 <__udivmoddi4+0x2ac>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 808a 	bls.w	8000e98 <__udivmoddi4+0x2ac>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	443b      	add	r3, r7
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b281      	uxth	r1, r0
 8000d8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d98:	fb00 f308 	mul.w	r3, r0, r8
 8000d9c:	428b      	cmp	r3, r1
 8000d9e:	d907      	bls.n	8000db0 <__udivmoddi4+0x1c4>
 8000da0:	1879      	adds	r1, r7, r1
 8000da2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000da6:	d273      	bcs.n	8000e90 <__udivmoddi4+0x2a4>
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d971      	bls.n	8000e90 <__udivmoddi4+0x2a4>
 8000dac:	3802      	subs	r0, #2
 8000dae:	4439      	add	r1, r7
 8000db0:	1acb      	subs	r3, r1, r3
 8000db2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db6:	e778      	b.n	8000caa <__udivmoddi4+0xbe>
 8000db8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000dc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc4:	431c      	orrs	r4, r3
 8000dc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dca:	fa01 f306 	lsl.w	r3, r1, r6
 8000dce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd6:	431f      	orrs	r7, r3
 8000dd8:	0c3b      	lsrs	r3, r7, #16
 8000dda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dde:	fa1f f884 	uxth.w	r8, r4
 8000de2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dea:	fb09 fa08 	mul.w	sl, r9, r8
 8000dee:	458a      	cmp	sl, r1
 8000df0:	fa02 f206 	lsl.w	r2, r2, r6
 8000df4:	fa00 f306 	lsl.w	r3, r0, r6
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x220>
 8000dfa:	1861      	adds	r1, r4, r1
 8000dfc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e00:	d248      	bcs.n	8000e94 <__udivmoddi4+0x2a8>
 8000e02:	458a      	cmp	sl, r1
 8000e04:	d946      	bls.n	8000e94 <__udivmoddi4+0x2a8>
 8000e06:	f1a9 0902 	sub.w	r9, r9, #2
 8000e0a:	4421      	add	r1, r4
 8000e0c:	eba1 010a 	sub.w	r1, r1, sl
 8000e10:	b2bf      	uxth	r7, r7
 8000e12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1e:	fb00 f808 	mul.w	r8, r0, r8
 8000e22:	45b8      	cmp	r8, r7
 8000e24:	d907      	bls.n	8000e36 <__udivmoddi4+0x24a>
 8000e26:	19e7      	adds	r7, r4, r7
 8000e28:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e2c:	d22e      	bcs.n	8000e8c <__udivmoddi4+0x2a0>
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d92c      	bls.n	8000e8c <__udivmoddi4+0x2a0>
 8000e32:	3802      	subs	r0, #2
 8000e34:	4427      	add	r7, r4
 8000e36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e3a:	eba7 0708 	sub.w	r7, r7, r8
 8000e3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e42:	454f      	cmp	r7, r9
 8000e44:	46c6      	mov	lr, r8
 8000e46:	4649      	mov	r1, r9
 8000e48:	d31a      	bcc.n	8000e80 <__udivmoddi4+0x294>
 8000e4a:	d017      	beq.n	8000e7c <__udivmoddi4+0x290>
 8000e4c:	b15d      	cbz	r5, 8000e66 <__udivmoddi4+0x27a>
 8000e4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e52:	eb67 0701 	sbc.w	r7, r7, r1
 8000e56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e5a:	40f2      	lsrs	r2, r6
 8000e5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e60:	40f7      	lsrs	r7, r6
 8000e62:	e9c5 2700 	strd	r2, r7, [r5]
 8000e66:	2600      	movs	r6, #0
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	462e      	mov	r6, r5
 8000e70:	4628      	mov	r0, r5
 8000e72:	e70b      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000e74:	4606      	mov	r6, r0
 8000e76:	e6e9      	b.n	8000c4c <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fd      	b.n	8000c78 <__udivmoddi4+0x8c>
 8000e7c:	4543      	cmp	r3, r8
 8000e7e:	d2e5      	bcs.n	8000e4c <__udivmoddi4+0x260>
 8000e80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e84:	eb69 0104 	sbc.w	r1, r9, r4
 8000e88:	3801      	subs	r0, #1
 8000e8a:	e7df      	b.n	8000e4c <__udivmoddi4+0x260>
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	e7d2      	b.n	8000e36 <__udivmoddi4+0x24a>
 8000e90:	4660      	mov	r0, ip
 8000e92:	e78d      	b.n	8000db0 <__udivmoddi4+0x1c4>
 8000e94:	4681      	mov	r9, r0
 8000e96:	e7b9      	b.n	8000e0c <__udivmoddi4+0x220>
 8000e98:	4666      	mov	r6, ip
 8000e9a:	e775      	b.n	8000d88 <__udivmoddi4+0x19c>
 8000e9c:	4630      	mov	r0, r6
 8000e9e:	e74a      	b.n	8000d36 <__udivmoddi4+0x14a>
 8000ea0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea4:	4439      	add	r1, r7
 8000ea6:	e713      	b.n	8000cd0 <__udivmoddi4+0xe4>
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	443c      	add	r4, r7
 8000eac:	e724      	b.n	8000cf8 <__udivmoddi4+0x10c>
 8000eae:	bf00      	nop

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <delay>:
uint8_t aRxBuffer[1];
/* IR */
uint32_t ir1Dist = 0;
uint32_t ir2Dist = 0;

void delay(uint16_t time){  //provide us delay
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <delay+0x30>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim4) < time);
 8000ec6:	bf00      	nop
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <delay+0x30>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d3f9      	bcc.n	8000ec8 <delay+0x14>
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20004a20 	.word	0x20004a20

08000ee8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)		//For HCSR04_Read();
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	7f1b      	ldrb	r3, [r3, #28]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	f040 8083 	bne.w	8001000 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000efa:	4b45      	ldr	r3, [pc, #276]	; (8001010 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d11a      	bne.n	8000f38 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000f02:	2100      	movs	r1, #0
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f004 f88f 	bl	8005028 <HAL_TIM_ReadCapturedValue>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4a41      	ldr	r2, [pc, #260]	; (8001014 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f0e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000f10:	4b3f      	ldr	r3, [pc, #252]	; (8001010 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	601a      	str	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	6a1a      	ldr	r2, [r3, #32]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f022 020a 	bic.w	r2, r2, #10
 8000f24:	621a      	str	r2, [r3, #32]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6a1a      	ldr	r2, [r3, #32]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f042 0202 	orr.w	r2, r2, #2
 8000f34:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 8000f36:	e063      	b.n	8001000 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000f38:	4b35      	ldr	r3, [pc, #212]	; (8001010 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d15f      	bne.n	8001000 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000f40:	2100      	movs	r1, #0
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f004 f870 	bl	8005028 <HAL_TIM_ReadCapturedValue>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4a33      	ldr	r2, [pc, #204]	; (8001018 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f4c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 8000f56:	4b30      	ldr	r3, [pc, #192]	; (8001018 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d907      	bls.n	8000f72 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000f62:	4b2d      	ldr	r3, [pc, #180]	; (8001018 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	4a2b      	ldr	r2, [pc, #172]	; (800101c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	e00f      	b.n	8000f92 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2) {
 8000f72:	4b28      	ldr	r3, [pc, #160]	; (8001014 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4b28      	ldr	r3, [pc, #160]	; (8001018 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d909      	bls.n	8000f92 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000f7e:	4b26      	ldr	r3, [pc, #152]	; (8001018 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4b24      	ldr	r3, [pc, #144]	; (8001014 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000f8c:	33ff      	adds	r3, #255	; 0xff
 8000f8e:	4a23      	ldr	r2, [pc, #140]	; (800101c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f90:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000f92:	4b22      	ldr	r3, [pc, #136]	; (800101c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fab4 	bl	8000504 <__aeabi_ui2d>
 8000f9c:	a31a      	add	r3, pc, #104	; (adr r3, 8001008 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa2:	f7ff fb29 	bl	80005f8 <__aeabi_dmul>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	4610      	mov	r0, r2
 8000fac:	4619      	mov	r1, r3
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fb6:	f7ff fc49 	bl	800084c <__aeabi_ddiv>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f7ff fddb 	bl	8000b7c <__aeabi_d2uiz>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000fcc:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6a1a      	ldr	r2, [r3, #32]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 020a 	bic.w	r2, r2, #10
 8000fe2:	621a      	str	r2, [r3, #32]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6a12      	ldr	r2, [r2, #32]
 8000fee:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	68da      	ldr	r2, [r3, #12]
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 0202 	bic.w	r2, r2, #2
 8000ffe:	60da      	str	r2, [r3, #12]
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	b020c49c 	.word	0xb020c49c
 800100c:	3fa16872 	.word	0x3fa16872
 8001010:	200000a8 	.word	0x200000a8
 8001014:	2000009c 	.word	0x2000009c
 8001018:	200000a0 	.word	0x200000a0
 800101c:	200000a4 	.word	0x200000a4
 8001020:	200000ac 	.word	0x200000ac
 8001024:	20004a20 	.word	0x20004a20

08001028 <HCSR04_Read>:

uint16_t HCSR04_Read (void)		//Read Ultrasonic Distance
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <HCSR04_Read+0x3c>)
 8001034:	f002 fc2e 	bl	8003894 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8001038:	200a      	movs	r0, #10
 800103a:	f7ff ff3b 	bl	8000eb4 <delay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001044:	4807      	ldr	r0, [pc, #28]	; (8001064 <HCSR04_Read+0x3c>)
 8001046:	f002 fc25 	bl	8003894 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <HCSR04_Read+0x40>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <HCSR04_Read+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f042 0202 	orr.w	r2, r2, #2
 8001058:	60da      	str	r2, [r3, #12]
	return Distance;
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <HCSR04_Read+0x44>)
 800105c:	881b      	ldrh	r3, [r3, #0]
}
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40020c00 	.word	0x40020c00
 8001068:	20004a20 	.word	0x20004a20
 800106c:	200000ac 	.word	0x200000ac

08001070 <ultraDistCheck>:

void ultraDistCheck (void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	uDistCheck1 = HCSR04_Read();
 8001074:	f7ff ffd8 	bl	8001028 <HCSR04_Read>
 8001078:	4603      	mov	r3, r0
 800107a:	461a      	mov	r2, r3
 800107c:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <ultraDistCheck+0x88>)
 800107e:	801a      	strh	r2, [r3, #0]
	HAL_Delay(100);
 8001080:	2064      	movs	r0, #100	; 0x64
 8001082:	f001 fe41 	bl	8002d08 <HAL_Delay>
	uDistCheck2 = HCSR04_Read();
 8001086:	f7ff ffcf 	bl	8001028 <HCSR04_Read>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <ultraDistCheck+0x8c>)
 8001090:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8001092:	2064      	movs	r0, #100	; 0x64
 8001094:	f001 fe38 	bl	8002d08 <HAL_Delay>
	while (uDistCheck1 - uDistCheck2 >= 5 || uDistCheck2 - uDistCheck1 >= 5) {
 8001098:	e011      	b.n	80010be <ultraDistCheck+0x4e>
		uDistCheck1 = HCSR04_Read();
 800109a:	f7ff ffc5 	bl	8001028 <HCSR04_Read>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <ultraDistCheck+0x88>)
 80010a4:	801a      	strh	r2, [r3, #0]
		HAL_Delay(100);
 80010a6:	2064      	movs	r0, #100	; 0x64
 80010a8:	f001 fe2e 	bl	8002d08 <HAL_Delay>
		uDistCheck2 = HCSR04_Read();
 80010ac:	f7ff ffbc 	bl	8001028 <HCSR04_Read>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <ultraDistCheck+0x8c>)
 80010b6:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 80010b8:	2064      	movs	r0, #100	; 0x64
 80010ba:	f001 fe25 	bl	8002d08 <HAL_Delay>
	while (uDistCheck1 - uDistCheck2 >= 5 || uDistCheck2 - uDistCheck1 >= 5) {
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <ultraDistCheck+0x88>)
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <ultraDistCheck+0x8c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	dce5      	bgt.n	800109a <ultraDistCheck+0x2a>
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <ultraDistCheck+0x8c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a09      	ldr	r2, [pc, #36]	; (80010f8 <ultraDistCheck+0x88>)
 80010d4:	8812      	ldrh	r2, [r2, #0]
 80010d6:	1a9b      	subs	r3, r3, r2
 80010d8:	2b04      	cmp	r3, #4
 80010da:	dcde      	bgt.n	800109a <ultraDistCheck+0x2a>
	}
	uDistFinal = (uDistCheck1 + uDistCheck2)/2;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <ultraDistCheck+0x88>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <ultraDistCheck+0x8c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	0fda      	lsrs	r2, r3, #31
 80010ea:	4413      	add	r3, r2
 80010ec:	105b      	asrs	r3, r3, #1
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <ultraDistCheck+0x90>)
 80010f2:	601a      	str	r2, [r3, #0]
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200000ae 	.word	0x200000ae
 80010fc:	200000b0 	.word	0x200000b0
 8001100:	200000b4 	.word	0x200000b4

08001104 <waitCmd>:


	ir2Dist = 32.6167 * pow(V, -1.0928);
}

void waitCmd (void) {	//not complete
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	while (*aRxBuffer == 'Z') {
 8001108:	e004      	b.n	8001114 <waitCmd+0x10>
		HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 1);
 800110a:	2201      	movs	r2, #1
 800110c:	4905      	ldr	r1, [pc, #20]	; (8001124 <waitCmd+0x20>)
 800110e:	4806      	ldr	r0, [pc, #24]	; (8001128 <waitCmd+0x24>)
 8001110:	f004 fe36 	bl	8005d80 <HAL_UART_Receive_IT>
	while (*aRxBuffer == 'Z') {
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <waitCmd+0x20>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b5a      	cmp	r3, #90	; 0x5a
 800111a:	d0f6      	beq.n	800110a <waitCmd+0x6>
	}
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20004bf4 	.word	0x20004bf4
 8001128:	20004a6c 	.word	0x20004a6c
 800112c:	00000000 	.word	0x00000000

08001130 <motorCont>:
//	htim1.Instance->CCR4 = 74;
//	HAL_Delay(50);
//	motorControl(1000, 1000, 'F', 'F', 0, 1000, 2);
}

int motorCont(int speedL, int speedR, char dirL, char dirR, int turn, int time, double dist){
 8001130:	b5b0      	push	{r4, r5, r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6178      	str	r0, [r7, #20]
 8001138:	6139      	str	r1, [r7, #16]
 800113a:	4611      	mov	r1, r2
 800113c:	461a      	mov	r2, r3
 800113e:	ed87 0b00 	vstr	d0, [r7]
 8001142:	460b      	mov	r3, r1
 8001144:	73fb      	strb	r3, [r7, #15]
 8001146:	4613      	mov	r3, r2
 8001148:	73bb      	strb	r3, [r7, #14]
	*aRxBuffer = 'Z';
 800114a:	4ba9      	ldr	r3, [pc, #676]	; (80013f0 <motorCont+0x2c0>)
 800114c:	225a      	movs	r2, #90	; 0x5a
 800114e:	701a      	strb	r2, [r3, #0]
	//declaration
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);		//left encoder(MotorA) start
 8001150:	213c      	movs	r1, #60	; 0x3c
 8001152:	48a8      	ldr	r0, [pc, #672]	; (80013f4 <motorCont+0x2c4>)
 8001154:	f003 fbac 	bl	80048b0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		//right encoder(MotorB) start
 8001158:	213c      	movs	r1, #60	; 0x3c
 800115a:	48a7      	ldr	r0, [pc, #668]	; (80013f8 <motorCont+0x2c8>)
 800115c:	f003 fba8 	bl	80048b0 <HAL_TIM_Encoder_Start>
	cntl1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001160:	4ba4      	ldr	r3, [pc, #656]	; (80013f4 <motorCont+0x2c4>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001166:	b21a      	sxth	r2, r3
 8001168:	4ba4      	ldr	r3, [pc, #656]	; (80013fc <motorCont+0x2cc>)
 800116a:	801a      	strh	r2, [r3, #0]
	cntr1 = __HAL_TIM_GET_COUNTER(&htim3);
 800116c:	4ba2      	ldr	r3, [pc, #648]	; (80013f8 <motorCont+0x2c8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001172:	b21a      	sxth	r2, r3
 8001174:	4ba2      	ldr	r3, [pc, #648]	; (8001400 <motorCont+0x2d0>)
 8001176:	801a      	strh	r2, [r3, #0]
	tick = HAL_GetTick();
 8001178:	f001 fdba 	bl	8002cf0 <HAL_GetTick>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	4ba0      	ldr	r3, [pc, #640]	; (8001404 <motorCont+0x2d4>)
 8001182:	601a      	str	r2, [r3, #0]
	double encDist = dist * 68;
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	4b9f      	ldr	r3, [pc, #636]	; (8001408 <motorCont+0x2d8>)
 800118a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800118e:	f7ff fa33 	bl	80005f8 <__aeabi_dmul>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	e9c7 2308 	strd	r2, r3, [r7, #32]

	int currTime = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]

	//Select direction of motor//

	switch(dirL){
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	2b46      	cmp	r3, #70	; 0x46
 80011a2:	d002      	beq.n	80011aa <motorCont+0x7a>
 80011a4:	2b52      	cmp	r3, #82	; 0x52
 80011a6:	d00b      	beq.n	80011c0 <motorCont+0x90>
 80011a8:	e015      	b.n	80011d6 <motorCont+0xa6>
		case 'F':
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	2108      	movs	r1, #8
 80011ae:	4897      	ldr	r0, [pc, #604]	; (800140c <motorCont+0x2dc>)
 80011b0:	f002 fb70 	bl	8003894 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2104      	movs	r1, #4
 80011b8:	4894      	ldr	r0, [pc, #592]	; (800140c <motorCont+0x2dc>)
 80011ba:	f002 fb6b 	bl	8003894 <HAL_GPIO_WritePin>
			break;
 80011be:	e00a      	b.n	80011d6 <motorCont+0xa6>

		case 'R':
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2108      	movs	r1, #8
 80011c4:	4891      	ldr	r0, [pc, #580]	; (800140c <motorCont+0x2dc>)
 80011c6:	f002 fb65 	bl	8003894 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	2104      	movs	r1, #4
 80011ce:	488f      	ldr	r0, [pc, #572]	; (800140c <motorCont+0x2dc>)
 80011d0:	f002 fb60 	bl	8003894 <HAL_GPIO_WritePin>
			break;
 80011d4:	bf00      	nop
	}

	switch(dirR){
 80011d6:	7bbb      	ldrb	r3, [r7, #14]
 80011d8:	2b46      	cmp	r3, #70	; 0x46
 80011da:	d002      	beq.n	80011e2 <motorCont+0xb2>
 80011dc:	2b52      	cmp	r3, #82	; 0x52
 80011de:	d00b      	beq.n	80011f8 <motorCont+0xc8>
 80011e0:	e015      	b.n	800120e <motorCont+0xde>
		case 'F':
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80011e2:	2201      	movs	r2, #1
 80011e4:	2110      	movs	r1, #16
 80011e6:	4889      	ldr	r0, [pc, #548]	; (800140c <motorCont+0x2dc>)
 80011e8:	f002 fb54 	bl	8003894 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2120      	movs	r1, #32
 80011f0:	4886      	ldr	r0, [pc, #536]	; (800140c <motorCont+0x2dc>)
 80011f2:	f002 fb4f 	bl	8003894 <HAL_GPIO_WritePin>
			break;
 80011f6:	e00a      	b.n	800120e <motorCont+0xde>

		case 'R':
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2110      	movs	r1, #16
 80011fc:	4883      	ldr	r0, [pc, #524]	; (800140c <motorCont+0x2dc>)
 80011fe:	f002 fb49 	bl	8003894 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	2120      	movs	r1, #32
 8001206:	4881      	ldr	r0, [pc, #516]	; (800140c <motorCont+0x2dc>)
 8001208:	f002 fb44 	bl	8003894 <HAL_GPIO_WritePin>
			break;
 800120c:	bf00      	nop
	}
	//End of motor direction selection//

	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, speedL);
 800120e:	4b80      	ldr	r3, [pc, #512]	; (8001410 <motorCont+0x2e0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, speedR);
 8001216:	4b7e      	ldr	r3, [pc, #504]	; (8001410 <motorCont+0x2e0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	639a      	str	r2, [r3, #56]	; 0x38


	while(currTime<time){
 800121e:	e0b7      	b.n	8001390 <motorCont+0x260>
			cntl2 = __HAL_TIM_GET_COUNTER(&htim2);
 8001220:	4b74      	ldr	r3, [pc, #464]	; (80013f4 <motorCont+0x2c4>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	b21a      	sxth	r2, r3
 8001228:	4b7a      	ldr	r3, [pc, #488]	; (8001414 <motorCont+0x2e4>)
 800122a:	801a      	strh	r2, [r3, #0]
			cntr2 = __HAL_TIM_GET_COUNTER(&htim3);
 800122c:	4b72      	ldr	r3, [pc, #456]	; (80013f8 <motorCont+0x2c8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001232:	b21a      	sxth	r2, r3
 8001234:	4b78      	ldr	r3, [pc, #480]	; (8001418 <motorCont+0x2e8>)
 8001236:	801a      	strh	r2, [r3, #0]
			diffl = abs(cntl2);
 8001238:	4b76      	ldr	r3, [pc, #472]	; (8001414 <motorCont+0x2e4>)
 800123a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123e:	2b00      	cmp	r3, #0
 8001240:	bfb8      	it	lt
 8001242:	425b      	neglt	r3, r3
 8001244:	b29b      	uxth	r3, r3
 8001246:	b21a      	sxth	r2, r3
 8001248:	4b74      	ldr	r3, [pc, #464]	; (800141c <motorCont+0x2ec>)
 800124a:	801a      	strh	r2, [r3, #0]
			diffr =abs(cntr2);
 800124c:	4b72      	ldr	r3, [pc, #456]	; (8001418 <motorCont+0x2e8>)
 800124e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001252:	2b00      	cmp	r3, #0
 8001254:	bfb8      	it	lt
 8001256:	425b      	neglt	r3, r3
 8001258:	b29b      	uxth	r3, r3
 800125a:	b21a      	sxth	r2, r3
 800125c:	4b70      	ldr	r3, [pc, #448]	; (8001420 <motorCont+0x2f0>)
 800125e:	801a      	strh	r2, [r3, #0]
			avg = abs((diffl+diffr)/2);
 8001260:	4b6e      	ldr	r3, [pc, #440]	; (800141c <motorCont+0x2ec>)
 8001262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001266:	461a      	mov	r2, r3
 8001268:	4b6d      	ldr	r3, [pc, #436]	; (8001420 <motorCont+0x2f0>)
 800126a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126e:	4413      	add	r3, r2
 8001270:	0fda      	lsrs	r2, r3, #31
 8001272:	4413      	add	r3, r2
 8001274:	105b      	asrs	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	bfb8      	it	lt
 800127a:	425b      	neglt	r3, r3
 800127c:	b21a      	sxth	r2, r3
 800127e:	4b69      	ldr	r3, [pc, #420]	; (8001424 <motorCont+0x2f4>)
 8001280:	801a      	strh	r2, [r3, #0]
			sprintf(display,"Left:%5d\0", diffl/68);
 8001282:	4b66      	ldr	r3, [pc, #408]	; (800141c <motorCont+0x2ec>)
 8001284:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001288:	4a67      	ldr	r2, [pc, #412]	; (8001428 <motorCont+0x2f8>)
 800128a:	fb82 1203 	smull	r1, r2, r2, r3
 800128e:	1152      	asrs	r2, r2, #5
 8001290:	17db      	asrs	r3, r3, #31
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	b21b      	sxth	r3, r3
 8001296:	461a      	mov	r2, r3
 8001298:	4964      	ldr	r1, [pc, #400]	; (800142c <motorCont+0x2fc>)
 800129a:	4865      	ldr	r0, [pc, #404]	; (8001430 <motorCont+0x300>)
 800129c:	f008 fc50 	bl	8009b40 <siprintf>
			OLED_ShowString(10,35,display);
 80012a0:	4a63      	ldr	r2, [pc, #396]	; (8001430 <motorCont+0x300>)
 80012a2:	2123      	movs	r1, #35	; 0x23
 80012a4:	200a      	movs	r0, #10
 80012a6:	f008 fb4d 	bl	8009944 <OLED_ShowString>
			sprintf(display,"Right:%5d\0", diffr/68);
 80012aa:	4b5d      	ldr	r3, [pc, #372]	; (8001420 <motorCont+0x2f0>)
 80012ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b0:	4a5d      	ldr	r2, [pc, #372]	; (8001428 <motorCont+0x2f8>)
 80012b2:	fb82 1203 	smull	r1, r2, r2, r3
 80012b6:	1152      	asrs	r2, r2, #5
 80012b8:	17db      	asrs	r3, r3, #31
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	b21b      	sxth	r3, r3
 80012be:	461a      	mov	r2, r3
 80012c0:	495c      	ldr	r1, [pc, #368]	; (8001434 <motorCont+0x304>)
 80012c2:	485b      	ldr	r0, [pc, #364]	; (8001430 <motorCont+0x300>)
 80012c4:	f008 fc3c 	bl	8009b40 <siprintf>
			OLED_ShowString(10,50,display);
 80012c8:	4a59      	ldr	r2, [pc, #356]	; (8001430 <motorCont+0x300>)
 80012ca:	2132      	movs	r1, #50	; 0x32
 80012cc:	200a      	movs	r0, #10
 80012ce:	f008 fb39 	bl	8009944 <OLED_ShowString>
			OLED_Refresh_Gram();
 80012d2:	f008 f9c3 	bl	800965c <OLED_Refresh_Gram>

			if(avg>=encDist*0.95){
 80012d6:	4b53      	ldr	r3, [pc, #332]	; (8001424 <motorCont+0x2f4>)
 80012d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f921 	bl	8000524 <__aeabi_i2d>
 80012e2:	4604      	mov	r4, r0
 80012e4:	460d      	mov	r5, r1
 80012e6:	a340      	add	r3, pc, #256	; (adr r3, 80013e8 <motorCont+0x2b8>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012f0:	f7ff f982 	bl	80005f8 <__aeabi_dmul>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4620      	mov	r0, r4
 80012fa:	4629      	mov	r1, r5
 80012fc:	f7ff fc02 	bl	8000b04 <__aeabi_dcmpge>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d027      	beq.n	8001356 <motorCont+0x226>
				speedL = speedL*0.95;
 8001306:	6978      	ldr	r0, [r7, #20]
 8001308:	f7ff f90c 	bl	8000524 <__aeabi_i2d>
 800130c:	a336      	add	r3, pc, #216	; (adr r3, 80013e8 <motorCont+0x2b8>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff f971 	bl	80005f8 <__aeabi_dmul>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fc05 	bl	8000b2c <__aeabi_d2iz>
 8001322:	4603      	mov	r3, r0
 8001324:	617b      	str	r3, [r7, #20]
				speedR = speedR*0.95;
 8001326:	6938      	ldr	r0, [r7, #16]
 8001328:	f7ff f8fc 	bl	8000524 <__aeabi_i2d>
 800132c:	a32e      	add	r3, pc, #184	; (adr r3, 80013e8 <motorCont+0x2b8>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7ff f961 	bl	80005f8 <__aeabi_dmul>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fbf5 	bl	8000b2c <__aeabi_d2iz>
 8001342:	4603      	mov	r3, r0
 8001344:	613b      	str	r3, [r7, #16]
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, speedL);
 8001346:	4b32      	ldr	r3, [pc, #200]	; (8001410 <motorCont+0x2e0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, speedR);
 800134e:	4b30      	ldr	r3, [pc, #192]	; (8001410 <motorCont+0x2e0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	639a      	str	r2, [r3, #56]	; 0x38
			}

			if(avg>=encDist){
 8001356:	4b33      	ldr	r3, [pc, #204]	; (8001424 <motorCont+0x2f4>)
 8001358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f8e1 	bl	8000524 <__aeabi_i2d>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800136a:	f7ff fbc1 	bl	8000af0 <__aeabi_dcmple>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d100      	bne.n	8001376 <motorCont+0x246>
 8001374:	e00c      	b.n	8001390 <motorCont+0x260>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001376:	4b26      	ldr	r3, [pc, #152]	; (8001410 <motorCont+0x2e0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2200      	movs	r2, #0
 800137c:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 800137e:	4b24      	ldr	r3, [pc, #144]	; (8001410 <motorCont+0x2e0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2200      	movs	r2, #0
 8001384:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(500);
 8001386:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800138a:	f001 fcbd 	bl	8002d08 <HAL_Delay>
				break;
 800138e:	e004      	b.n	800139a <motorCont+0x26a>
	while(currTime<time){
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001394:	429a      	cmp	r2, r3
 8001396:	f6ff af43 	blt.w	8001220 <motorCont+0xf0>
			}

		}
		__HAL_TIM_SET_COUNTER(&htim2,0);
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <motorCont+0x2c4>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2200      	movs	r2, #0
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim3,0);
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <motorCont+0x2c8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2200      	movs	r2, #0
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24

		speedL=speedR=tick=diffl=diffr=0;
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <motorCont+0x2f0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	801a      	strh	r2, [r3, #0]
 80013b0:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <motorCont+0x2f0>)
 80013b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013b6:	4b19      	ldr	r3, [pc, #100]	; (800141c <motorCont+0x2ec>)
 80013b8:	801a      	strh	r2, [r3, #0]
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <motorCont+0x2ec>)
 80013bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <motorCont+0x2d4>)
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <motorCont+0x2d4>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	617b      	str	r3, [r7, #20]
		OLED_Refresh_Gram();
 80013d0:	f008 f944 	bl	800965c <OLED_Refresh_Gram>
		*aRxBuffer = 'Z';
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <motorCont+0x2c0>)
 80013d6:	225a      	movs	r2, #90	; 0x5a
 80013d8:	701a      	strb	r2, [r3, #0]
}
 80013da:	bf00      	nop
 80013dc:	4618      	mov	r0, r3
 80013de:	3728      	adds	r7, #40	; 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bdb0      	pop	{r4, r5, r7, pc}
 80013e4:	f3af 8000 	nop.w
 80013e8:	66666666 	.word	0x66666666
 80013ec:	3fee6666 	.word	0x3fee6666
 80013f0:	20004bf4 	.word	0x20004bf4
 80013f4:	20004bf8 	.word	0x20004bf8
 80013f8:	20004b18 	.word	0x20004b18
 80013fc:	20004a68 	.word	0x20004a68
 8001400:	20004bf0 	.word	0x20004bf0
 8001404:	20000098 	.word	0x20000098
 8001408:	40510000 	.word	0x40510000
 800140c:	40020000 	.word	0x40020000
 8001410:	200049d8 	.word	0x200049d8
 8001414:	20004b00 	.word	0x20004b00
 8001418:	200049d4 	.word	0x200049d4
 800141c:	20000090 	.word	0x20000090
 8001420:	20000092 	.word	0x20000092
 8001424:	20000094 	.word	0x20000094
 8001428:	78787879 	.word	0x78787879
 800142c:	0800a3b0 	.word	0x0800a3b0
 8001430:	20004b04 	.word	0x20004b04
 8001434:	0800a3bc 	.word	0x0800a3bc

08001438 <degTurn>:

void degTurn(int mode){
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af02      	add	r7, sp, #8
 800143e:	6078      	str	r0, [r7, #4]
	switch(mode){
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d003      	beq.n	800144e <degTurn+0x16>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d017      	beq.n	800147c <degTurn+0x44>
			motorCont(2200,500,'F','F',1,1000,105*0.57);
			break;
	}


}
 800144c:	e02d      	b.n	80014aa <degTurn+0x72>
			htim1.Instance->CCR4 = 56;
 800144e:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <degTurn+0x90>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2238      	movs	r2, #56	; 0x38
 8001454:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 8001456:	2064      	movs	r0, #100	; 0x64
 8001458:	f001 fc56 	bl	8002d08 <HAL_Delay>
			motorCont(500,2200,'F','F',1,1000,88*0.57);
 800145c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	2301      	movs	r3, #1
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80014b8 <degTurn+0x80>
 800146a:	2346      	movs	r3, #70	; 0x46
 800146c:	2246      	movs	r2, #70	; 0x46
 800146e:	f640 0198 	movw	r1, #2200	; 0x898
 8001472:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001476:	f7ff fe5b 	bl	8001130 <motorCont>
			break;
 800147a:	e016      	b.n	80014aa <degTurn+0x72>
			htim1.Instance->CCR4 = 104;
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <degTurn+0x90>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2268      	movs	r2, #104	; 0x68
 8001482:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 8001484:	2064      	movs	r0, #100	; 0x64
 8001486:	f001 fc3f 	bl	8002d08 <HAL_Delay>
			motorCont(2200,500,'F','F',1,1000,105*0.57);
 800148a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	2301      	movs	r3, #1
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 80014c0 <degTurn+0x88>
 8001498:	2346      	movs	r3, #70	; 0x46
 800149a:	2246      	movs	r2, #70	; 0x46
 800149c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80014a0:	f640 0098 	movw	r0, #2200	; 0x898
 80014a4:	f7ff fe44 	bl	8001130 <motorCont>
			break;
 80014a8:	bf00      	nop
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	f3af 8000 	nop.w
 80014b8:	e147ae14 	.word	0xe147ae14
 80014bc:	4049147a 	.word	0x4049147a
 80014c0:	cccccccc 	.word	0xcccccccc
 80014c4:	404deccc 	.word	0x404deccc
 80014c8:	20004ba8 	.word	0x20004ba8
 80014cc:	00000000 	.word	0x00000000

080014d0 <forward>:

void forward(int mode){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af02      	add	r7, sp, #8
 80014d6:	6078      	str	r0, [r7, #4]
	htim1.Instance->CCR4 = 74;
 80014d8:	4b77      	ldr	r3, [pc, #476]	; (80016b8 <forward+0x1e8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	224a      	movs	r2, #74	; 0x4a
 80014de:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(100);
 80014e0:	2064      	movs	r0, #100	; 0x64
 80014e2:	f001 fc11 	bl	8002d08 <HAL_Delay>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b09      	cmp	r3, #9
 80014ea:	f200 80b7 	bhi.w	800165c <forward+0x18c>
 80014ee:	a201      	add	r2, pc, #4	; (adr r2, 80014f4 <forward+0x24>)
 80014f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f4:	0800151d 	.word	0x0800151d
 80014f8:	0800153d 	.word	0x0800153d
 80014fc:	0800155d 	.word	0x0800155d
 8001500:	0800157d 	.word	0x0800157d
 8001504:	0800159d 	.word	0x0800159d
 8001508:	080015bd 	.word	0x080015bd
 800150c:	080015dd 	.word	0x080015dd
 8001510:	080015fd 	.word	0x080015fd
 8001514:	0800161d 	.word	0x0800161d
 8001518:	0800163d 	.word	0x0800163d
	switch(mode){
	case 0:
			motorCont(2000, 2000, 'F', 'F', 1, 1000, 100);break;
 800151c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001520:	9301      	str	r3, [sp, #4]
 8001522:	2301      	movs	r3, #1
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8001668 <forward+0x198>
 800152a:	2346      	movs	r3, #70	; 0x46
 800152c:	2246      	movs	r2, #70	; 0x46
 800152e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001532:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001536:	f7ff fdfb 	bl	8001130 <motorCont>
 800153a:	e08f      	b.n	800165c <forward+0x18c>
	case 1:
			motorCont(1000, 900, 'F', 'F', 1, 1000, 9);break;
 800153c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	2301      	movs	r3, #1
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	ed9f 0b4a 	vldr	d0, [pc, #296]	; 8001670 <forward+0x1a0>
 800154a:	2346      	movs	r3, #70	; 0x46
 800154c:	2246      	movs	r2, #70	; 0x46
 800154e:	f44f 7161 	mov.w	r1, #900	; 0x384
 8001552:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001556:	f7ff fdeb 	bl	8001130 <motorCont>
 800155a:	e07f      	b.n	800165c <forward+0x18c>
	case 2:
			motorCont(1100, 980, 'F', 'F', 1, 1000, 19.5);break;
 800155c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	2301      	movs	r3, #1
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	ed9f 0b44 	vldr	d0, [pc, #272]	; 8001678 <forward+0x1a8>
 800156a:	2346      	movs	r3, #70	; 0x46
 800156c:	2246      	movs	r2, #70	; 0x46
 800156e:	f44f 7175 	mov.w	r1, #980	; 0x3d4
 8001572:	f240 404c 	movw	r0, #1100	; 0x44c
 8001576:	f7ff fddb 	bl	8001130 <motorCont>
 800157a:	e06f      	b.n	800165c <forward+0x18c>
	case 3:
			motorCont(1200, 1080, 'F', 'F', 1, 1000, 29);break;
 800157c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	2301      	movs	r3, #1
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8001680 <forward+0x1b0>
 800158a:	2346      	movs	r3, #70	; 0x46
 800158c:	2246      	movs	r2, #70	; 0x46
 800158e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001592:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001596:	f7ff fdcb 	bl	8001130 <motorCont>
 800159a:	e05f      	b.n	800165c <forward+0x18c>
	case 4:
			motorCont(1300, 1300, 'F', 'F', 1, 1000, 40);break;
 800159c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	2301      	movs	r3, #1
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	ed9f 0b38 	vldr	d0, [pc, #224]	; 8001688 <forward+0x1b8>
 80015aa:	2346      	movs	r3, #70	; 0x46
 80015ac:	2246      	movs	r2, #70	; 0x46
 80015ae:	f240 5114 	movw	r1, #1300	; 0x514
 80015b2:	f240 5014 	movw	r0, #1300	; 0x514
 80015b6:	f7ff fdbb 	bl	8001130 <motorCont>
 80015ba:	e04f      	b.n	800165c <forward+0x18c>
	case 5:
			motorCont(1400, 1400, 'F', 'F', 1, 1000, 50);break;
 80015bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	2301      	movs	r3, #1
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8001690 <forward+0x1c0>
 80015ca:	2346      	movs	r3, #70	; 0x46
 80015cc:	2246      	movs	r2, #70	; 0x46
 80015ce:	f44f 61af 	mov.w	r1, #1400	; 0x578
 80015d2:	f44f 60af 	mov.w	r0, #1400	; 0x578
 80015d6:	f7ff fdab 	bl	8001130 <motorCont>
 80015da:	e03f      	b.n	800165c <forward+0x18c>
	case 6:
			motorCont(1500, 1500, 'F', 'F', 1, 1000, 60);break;
 80015dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	2301      	movs	r3, #1
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8001698 <forward+0x1c8>
 80015ea:	2346      	movs	r3, #70	; 0x46
 80015ec:	2246      	movs	r2, #70	; 0x46
 80015ee:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80015f2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80015f6:	f7ff fd9b 	bl	8001130 <motorCont>
 80015fa:	e02f      	b.n	800165c <forward+0x18c>
	case 7:
			motorCont(1600, 1600, 'F', 'F', 1, 1000, 70);break;
 80015fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	2301      	movs	r3, #1
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	ed9f 0b26 	vldr	d0, [pc, #152]	; 80016a0 <forward+0x1d0>
 800160a:	2346      	movs	r3, #70	; 0x46
 800160c:	2246      	movs	r2, #70	; 0x46
 800160e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8001612:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8001616:	f7ff fd8b 	bl	8001130 <motorCont>
 800161a:	e01f      	b.n	800165c <forward+0x18c>
	case 8:
			motorCont(1700, 1700, 'F', 'F', 1, 1000, 80);break;
 800161c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	2301      	movs	r3, #1
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	ed9f 0b20 	vldr	d0, [pc, #128]	; 80016a8 <forward+0x1d8>
 800162a:	2346      	movs	r3, #70	; 0x46
 800162c:	2246      	movs	r2, #70	; 0x46
 800162e:	f240 61a4 	movw	r1, #1700	; 0x6a4
 8001632:	f240 60a4 	movw	r0, #1700	; 0x6a4
 8001636:	f7ff fd7b 	bl	8001130 <motorCont>
 800163a:	e00f      	b.n	800165c <forward+0x18c>
	case 9:
			motorCont(1800, 1800, 'F', 'F', 1, 1000, 90);break;
 800163c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	2301      	movs	r3, #1
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80016b0 <forward+0x1e0>
 800164a:	2346      	movs	r3, #70	; 0x46
 800164c:	2246      	movs	r2, #70	; 0x46
 800164e:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8001652:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8001656:	f7ff fd6b 	bl	8001130 <motorCont>
 800165a:	bf00      	nop

	}
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	f3af 8000 	nop.w
 8001668:	00000000 	.word	0x00000000
 800166c:	40590000 	.word	0x40590000
 8001670:	00000000 	.word	0x00000000
 8001674:	40220000 	.word	0x40220000
 8001678:	00000000 	.word	0x00000000
 800167c:	40338000 	.word	0x40338000
 8001680:	00000000 	.word	0x00000000
 8001684:	403d0000 	.word	0x403d0000
 8001688:	00000000 	.word	0x00000000
 800168c:	40440000 	.word	0x40440000
 8001690:	00000000 	.word	0x00000000
 8001694:	40490000 	.word	0x40490000
 8001698:	00000000 	.word	0x00000000
 800169c:	404e0000 	.word	0x404e0000
 80016a0:	00000000 	.word	0x00000000
 80016a4:	40518000 	.word	0x40518000
 80016a8:	00000000 	.word	0x00000000
 80016ac:	40540000 	.word	0x40540000
 80016b0:	00000000 	.word	0x00000000
 80016b4:	40568000 	.word	0x40568000
 80016b8:	20004ba8 	.word	0x20004ba8
 80016bc:	00000000 	.word	0x00000000

080016c0 <spotTurn>:

void spotTurn(int mode){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	6078      	str	r0, [r7, #4]
	switch(mode){
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d003      	beq.n	80016d6 <spotTurn+0x16>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d04a      	beq.n	800176a <spotTurn+0xaa>
		HAL_Delay(500);
		motorCont(1500, 500, 'F', 'F', 1, 1000, 6);
		htim1.Instance->CCR4 = 74;
		break;
	}
}
 80016d4:	e093      	b.n	80017fe <spotTurn+0x13e>
		htim1.Instance->CCR4 = 56;
 80016d6:	4b56      	ldr	r3, [pc, #344]	; (8001830 <spotTurn+0x170>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2238      	movs	r2, #56	; 0x38
 80016dc:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(500);
 80016de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016e2:	f001 fb11 	bl	8002d08 <HAL_Delay>
		motorCont(500, 1500, 'F', 'F', 1, 1000, 22);
 80016e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	2301      	movs	r3, #1
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8001808 <spotTurn+0x148>
 80016f4:	2346      	movs	r3, #70	; 0x46
 80016f6:	2246      	movs	r2, #70	; 0x46
 80016f8:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80016fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001700:	f7ff fd16 	bl	8001130 <motorCont>
		htim1.Instance->CCR4 = 104;
 8001704:	4b4a      	ldr	r3, [pc, #296]	; (8001830 <spotTurn+0x170>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2268      	movs	r2, #104	; 0x68
 800170a:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(500);
 800170c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001710:	f001 fafa 	bl	8002d08 <HAL_Delay>
		motorCont(1500, 500, 'R', 'R', 1, 1000, 21);
 8001714:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	2301      	movs	r3, #1
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	ed9f 0b3c 	vldr	d0, [pc, #240]	; 8001810 <spotTurn+0x150>
 8001722:	2352      	movs	r3, #82	; 0x52
 8001724:	2252      	movs	r2, #82	; 0x52
 8001726:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800172a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800172e:	f7ff fcff 	bl	8001130 <motorCont>
		htim1.Instance->CCR4 = 56;
 8001732:	4b3f      	ldr	r3, [pc, #252]	; (8001830 <spotTurn+0x170>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2238      	movs	r2, #56	; 0x38
 8001738:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(500);
 800173a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800173e:	f001 fae3 	bl	8002d08 <HAL_Delay>
		motorCont(500, 1500, 'F', 'F', 1, 1000, 4.5);
 8001742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	2301      	movs	r3, #1
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8001818 <spotTurn+0x158>
 8001750:	2346      	movs	r3, #70	; 0x46
 8001752:	2246      	movs	r2, #70	; 0x46
 8001754:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001758:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800175c:	f7ff fce8 	bl	8001130 <motorCont>
		htim1.Instance->CCR4 = 74;
 8001760:	4b33      	ldr	r3, [pc, #204]	; (8001830 <spotTurn+0x170>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	224a      	movs	r2, #74	; 0x4a
 8001766:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8001768:	e049      	b.n	80017fe <spotTurn+0x13e>
		htim1.Instance->CCR4 = 104;
 800176a:	4b31      	ldr	r3, [pc, #196]	; (8001830 <spotTurn+0x170>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2268      	movs	r2, #104	; 0x68
 8001770:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(500);
 8001772:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001776:	f001 fac7 	bl	8002d08 <HAL_Delay>
		motorCont(1500, 500, 'F', 'F', 1, 1000, 22);
 800177a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	2301      	movs	r3, #1
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8001808 <spotTurn+0x148>
 8001788:	2346      	movs	r3, #70	; 0x46
 800178a:	2246      	movs	r2, #70	; 0x46
 800178c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001790:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001794:	f7ff fccc 	bl	8001130 <motorCont>
		htim1.Instance->CCR4 = 56;
 8001798:	4b25      	ldr	r3, [pc, #148]	; (8001830 <spotTurn+0x170>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2238      	movs	r2, #56	; 0x38
 800179e:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(500);
 80017a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017a4:	f001 fab0 	bl	8002d08 <HAL_Delay>
		motorCont(500, 1500, 'R', 'R', 1, 1000, 19.5);
 80017a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	2301      	movs	r3, #1
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8001820 <spotTurn+0x160>
 80017b6:	2352      	movs	r3, #82	; 0x52
 80017b8:	2252      	movs	r2, #82	; 0x52
 80017ba:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80017be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017c2:	f7ff fcb5 	bl	8001130 <motorCont>
		htim1.Instance->CCR4 = 104;
 80017c6:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <spotTurn+0x170>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2268      	movs	r2, #104	; 0x68
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(500);
 80017ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017d2:	f001 fa99 	bl	8002d08 <HAL_Delay>
		motorCont(1500, 500, 'F', 'F', 1, 1000, 6);
 80017d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	2301      	movs	r3, #1
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8001828 <spotTurn+0x168>
 80017e4:	2346      	movs	r3, #70	; 0x46
 80017e6:	2246      	movs	r2, #70	; 0x46
 80017e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80017ec:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80017f0:	f7ff fc9e 	bl	8001130 <motorCont>
		htim1.Instance->CCR4 = 74;
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <spotTurn+0x170>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	224a      	movs	r2, #74	; 0x4a
 80017fa:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80017fc:	bf00      	nop
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	00000000 	.word	0x00000000
 800180c:	40360000 	.word	0x40360000
 8001810:	00000000 	.word	0x00000000
 8001814:	40350000 	.word	0x40350000
 8001818:	00000000 	.word	0x00000000
 800181c:	40120000 	.word	0x40120000
 8001820:	00000000 	.word	0x00000000
 8001824:	40338000 	.word	0x40338000
 8001828:	00000000 	.word	0x00000000
 800182c:	40180000 	.word	0x40180000
 8001830:	20004ba8 	.word	0x20004ba8

08001834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001838:	f001 f9f4 	bl	8002c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800183c:	f000 f844 	bl	80018c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001840:	f000 fb96 	bl	8001f70 <MX_GPIO_Init>
  MX_TIM8_Init();
 8001844:	f000 fade 	bl	8001e04 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001848:	f000 f9e0 	bl	8001c0c <MX_TIM2_Init>
  MX_TIM1_Init();
 800184c:	f000 f93e 	bl	8001acc <MX_TIM1_Init>
  MX_TIM3_Init();
 8001850:	f000 fa30 	bl	8001cb4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001854:	f000 fa82 	bl	8001d5c <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001858:	f000 fb60 	bl	8001f1c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800185c:	f000 f892 	bl	8001984 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001860:	f000 f8e2 	bl	8001a28 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001864:	2100      	movs	r1, #0
 8001866:	480f      	ldr	r0, [pc, #60]	; (80018a4 <main+0x70>)
 8001868:	f002 fe54 	bl	8004514 <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 1);
 800186c:	2201      	movs	r2, #1
 800186e:	490e      	ldr	r1, [pc, #56]	; (80018a8 <main+0x74>)
 8001870:	480e      	ldr	r0, [pc, #56]	; (80018ac <main+0x78>)
 8001872:	f004 fa85 	bl	8005d80 <HAL_UART_Receive_IT>
  OLED_Init();
 8001876:	f008 f897 	bl	80099a8 <OLED_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800187a:	f005 f99d 	bl	8006bb8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LED_Toggle */
  LED_ToggleHandle = osThreadNew(StartDefaultTask, NULL, &LED_Toggle_attributes);
 800187e:	4a0c      	ldr	r2, [pc, #48]	; (80018b0 <main+0x7c>)
 8001880:	2100      	movs	r1, #0
 8001882:	480c      	ldr	r0, [pc, #48]	; (80018b4 <main+0x80>)
 8001884:	f005 f9e2 	bl	8006c4c <osThreadNew>
 8001888:	4603      	mov	r3, r0
 800188a:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <main+0x84>)
 800188c:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 800188e:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <main+0x88>)
 8001890:	2100      	movs	r1, #0
 8001892:	480b      	ldr	r0, [pc, #44]	; (80018c0 <main+0x8c>)
 8001894:	f005 f9da 	bl	8006c4c <osThreadNew>
 8001898:	4603      	mov	r3, r0
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <main+0x90>)
 800189c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800189e:	f005 f9af 	bl	8006c00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <main+0x6e>
 80018a4:	20004a20 	.word	0x20004a20
 80018a8:	20004bf4 	.word	0x20004bf4
 80018ac:	20004a6c 	.word	0x20004a6c
 80018b0:	0800a434 	.word	0x0800a434
 80018b4:	080020e9 	.word	0x080020e9
 80018b8:	20004af8 	.word	0x20004af8
 80018bc:	0800a458 	.word	0x0800a458
 80018c0:	080021c1 	.word	0x080021c1
 80018c4:	20004afc 	.word	0x20004afc

080018c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b094      	sub	sp, #80	; 0x50
 80018cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ce:	f107 0320 	add.w	r3, r7, #32
 80018d2:	2230      	movs	r2, #48	; 0x30
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f008 f92a 	bl	8009b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ec:	2300      	movs	r3, #0
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	4b22      	ldr	r3, [pc, #136]	; (800197c <SystemClock_Config+0xb4>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	4a21      	ldr	r2, [pc, #132]	; (800197c <SystemClock_Config+0xb4>)
 80018f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fa:	6413      	str	r3, [r2, #64]	; 0x40
 80018fc:	4b1f      	ldr	r3, [pc, #124]	; (800197c <SystemClock_Config+0xb4>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001908:	2300      	movs	r3, #0
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <SystemClock_Config+0xb8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a1b      	ldr	r2, [pc, #108]	; (8001980 <SystemClock_Config+0xb8>)
 8001912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	4b19      	ldr	r3, [pc, #100]	; (8001980 <SystemClock_Config+0xb8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001924:	2302      	movs	r3, #2
 8001926:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001928:	2301      	movs	r3, #1
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800192c:	2310      	movs	r3, #16
 800192e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001930:	2300      	movs	r3, #0
 8001932:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001934:	f107 0320 	add.w	r3, r7, #32
 8001938:	4618      	mov	r0, r3
 800193a:	f001 ffed 	bl	8003918 <HAL_RCC_OscConfig>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001944:	f000 fe40 	bl	80025c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001948:	230f      	movs	r3, #15
 800194a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f002 fa50 	bl	8003e08 <HAL_RCC_ClockConfig>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800196e:	f000 fe2b 	bl	80025c8 <Error_Handler>
  }
}
 8001972:	bf00      	nop
 8001974:	3750      	adds	r7, #80	; 0x50
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	40007000 	.word	0x40007000

08001984 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800198a:	463b      	mov	r3, r7
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001996:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <MX_ADC1_Init+0x98>)
 8001998:	4a21      	ldr	r2, [pc, #132]	; (8001a20 <MX_ADC1_Init+0x9c>)
 800199a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800199c:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <MX_ADC1_Init+0x98>)
 800199e:	2200      	movs	r2, #0
 80019a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019a2:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <MX_ADC1_Init+0x98>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80019a8:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <MX_ADC1_Init+0x98>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019ae:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <MX_ADC1_Init+0x98>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <MX_ADC1_Init+0x98>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019bc:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <MX_ADC1_Init+0x98>)
 80019be:	2200      	movs	r2, #0
 80019c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019c2:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <MX_ADC1_Init+0x98>)
 80019c4:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <MX_ADC1_Init+0xa0>)
 80019c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <MX_ADC1_Init+0x98>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <MX_ADC1_Init+0x98>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <MX_ADC1_Init+0x98>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019dc:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <MX_ADC1_Init+0x98>)
 80019de:	2201      	movs	r2, #1
 80019e0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019e2:	480e      	ldr	r0, [pc, #56]	; (8001a1c <MX_ADC1_Init+0x98>)
 80019e4:	f001 f9b4 	bl	8002d50 <HAL_ADC_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80019ee:	f000 fdeb 	bl	80025c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80019f2:	230b      	movs	r3, #11
 80019f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019f6:	2301      	movs	r3, #1
 80019f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019fe:	463b      	mov	r3, r7
 8001a00:	4619      	mov	r1, r3
 8001a02:	4806      	ldr	r0, [pc, #24]	; (8001a1c <MX_ADC1_Init+0x98>)
 8001a04:	f001 f9e8 	bl	8002dd8 <HAL_ADC_ConfigChannel>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a0e:	f000 fddb 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20004b60 	.word	0x20004b60
 8001a20:	40012000 	.word	0x40012000
 8001a24:	0f000001 	.word	0x0f000001

08001a28 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001a3a:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <MX_ADC2_Init+0x98>)
 8001a3c:	4a21      	ldr	r2, [pc, #132]	; (8001ac4 <MX_ADC2_Init+0x9c>)
 8001a3e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a40:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <MX_ADC2_Init+0x98>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001a46:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <MX_ADC2_Init+0x98>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <MX_ADC2_Init+0x98>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001a52:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <MX_ADC2_Init+0x98>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001a58:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <MX_ADC2_Init+0x98>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a60:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <MX_ADC2_Init+0x98>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <MX_ADC2_Init+0x98>)
 8001a68:	4a17      	ldr	r2, [pc, #92]	; (8001ac8 <MX_ADC2_Init+0xa0>)
 8001a6a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a6c:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <MX_ADC2_Init+0x98>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001a72:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <MX_ADC2_Init+0x98>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <MX_ADC2_Init+0x98>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <MX_ADC2_Init+0x98>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001a86:	480e      	ldr	r0, [pc, #56]	; (8001ac0 <MX_ADC2_Init+0x98>)
 8001a88:	f001 f962 	bl	8002d50 <HAL_ADC_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001a92:	f000 fd99 	bl	80025c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001a96:	230c      	movs	r3, #12
 8001a98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <MX_ADC2_Init+0x98>)
 8001aa8:	f001 f996 	bl	8002dd8 <HAL_ADC_ConfigChannel>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001ab2:	f000 fd89 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20004ab0 	.word	0x20004ab0
 8001ac4:	40012100 	.word	0x40012100
 8001ac8:	0f000001 	.word	0x0f000001

08001acc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b096      	sub	sp, #88	; 0x58
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
 8001af8:	611a      	str	r2, [r3, #16]
 8001afa:	615a      	str	r2, [r3, #20]
 8001afc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	2220      	movs	r2, #32
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f008 f813 	bl	8009b30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b0a:	4b3e      	ldr	r3, [pc, #248]	; (8001c04 <MX_TIM1_Init+0x138>)
 8001b0c:	4a3e      	ldr	r2, [pc, #248]	; (8001c08 <MX_TIM1_Init+0x13c>)
 8001b0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320;
 8001b10:	4b3c      	ldr	r3, [pc, #240]	; (8001c04 <MX_TIM1_Init+0x138>)
 8001b12:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001b16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b18:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <MX_TIM1_Init+0x138>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001b1e:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <MX_TIM1_Init+0x138>)
 8001b20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b26:	4b37      	ldr	r3, [pc, #220]	; (8001c04 <MX_TIM1_Init+0x138>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b2c:	4b35      	ldr	r3, [pc, #212]	; (8001c04 <MX_TIM1_Init+0x138>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b32:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <MX_TIM1_Init+0x138>)
 8001b34:	2280      	movs	r2, #128	; 0x80
 8001b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b38:	4832      	ldr	r0, [pc, #200]	; (8001c04 <MX_TIM1_Init+0x138>)
 8001b3a:	f002 fb35 	bl	80041a8 <HAL_TIM_Base_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001b44:	f000 fd40 	bl	80025c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b52:	4619      	mov	r1, r3
 8001b54:	482b      	ldr	r0, [pc, #172]	; (8001c04 <MX_TIM1_Init+0x138>)
 8001b56:	f003 f99f 	bl	8004e98 <HAL_TIM_ConfigClockSource>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001b60:	f000 fd32 	bl	80025c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b64:	4827      	ldr	r0, [pc, #156]	; (8001c04 <MX_TIM1_Init+0x138>)
 8001b66:	f002 fb6e 	bl	8004246 <HAL_TIM_PWM_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001b70:	f000 fd2a 	bl	80025c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b74:	2300      	movs	r3, #0
 8001b76:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b80:	4619      	mov	r1, r3
 8001b82:	4820      	ldr	r0, [pc, #128]	; (8001c04 <MX_TIM1_Init+0x138>)
 8001b84:	f003 fef6 	bl	8005974 <HAL_TIMEx_MasterConfigSynchronization>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001b8e:	f000 fd1b 	bl	80025c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b92:	2360      	movs	r3, #96	; 0x60
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bae:	220c      	movs	r2, #12
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4814      	ldr	r0, [pc, #80]	; (8001c04 <MX_TIM1_Init+0x138>)
 8001bb4:	f003 f8ae 	bl	8004d14 <HAL_TIM_PWM_ConfigChannel>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001bbe:	f000 fd03 	bl	80025c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bda:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	4619      	mov	r1, r3
 8001be4:	4807      	ldr	r0, [pc, #28]	; (8001c04 <MX_TIM1_Init+0x138>)
 8001be6:	f003 ff41 	bl	8005a6c <HAL_TIMEx_ConfigBreakDeadTime>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001bf0:	f000 fcea 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bf4:	4803      	ldr	r0, [pc, #12]	; (8001c04 <MX_TIM1_Init+0x138>)
 8001bf6:	f000 fee1 	bl	80029bc <HAL_TIM_MspPostInit>

}
 8001bfa:	bf00      	nop
 8001bfc:	3758      	adds	r7, #88	; 0x58
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20004ba8 	.word	0x20004ba8
 8001c08:	40010000 	.word	0x40010000

08001c0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08c      	sub	sp, #48	; 0x30
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	2224      	movs	r2, #36	; 0x24
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f007 ff88 	bl	8009b30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c28:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <MX_TIM2_Init+0xa4>)
 8001c2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c30:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <MX_TIM2_Init+0xa4>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c36:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <MX_TIM2_Init+0xa4>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <MX_TIM2_Init+0xa4>)
 8001c3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c44:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <MX_TIM2_Init+0xa4>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4a:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <MX_TIM2_Init+0xa4>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c50:	2303      	movs	r3, #3
 8001c52:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001c60:	230a      	movs	r3, #10
 8001c62:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c64:	2300      	movs	r3, #0
 8001c66:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001c70:	230a      	movs	r3, #10
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	4619      	mov	r1, r3
 8001c7a:	480d      	ldr	r0, [pc, #52]	; (8001cb0 <MX_TIM2_Init+0xa4>)
 8001c7c:	f002 fd72 	bl	8004764 <HAL_TIM_Encoder_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c86:	f000 fc9f 	bl	80025c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	4619      	mov	r1, r3
 8001c96:	4806      	ldr	r0, [pc, #24]	; (8001cb0 <MX_TIM2_Init+0xa4>)
 8001c98:	f003 fe6c 	bl	8005974 <HAL_TIMEx_MasterConfigSynchronization>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001ca2:	f000 fc91 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	3730      	adds	r7, #48	; 0x30
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20004bf8 	.word	0x20004bf8

08001cb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08c      	sub	sp, #48	; 0x30
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cba:	f107 030c 	add.w	r3, r7, #12
 8001cbe:	2224      	movs	r2, #36	; 0x24
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f007 ff34 	bl	8009b30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cd0:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <MX_TIM3_Init+0xa0>)
 8001cd2:	4a21      	ldr	r2, [pc, #132]	; (8001d58 <MX_TIM3_Init+0xa4>)
 8001cd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cd6:	4b1f      	ldr	r3, [pc, #124]	; (8001d54 <MX_TIM3_Init+0xa0>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cdc:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <MX_TIM3_Init+0xa0>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <MX_TIM3_Init+0xa0>)
 8001ce4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ce8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <MX_TIM3_Init+0xa0>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <MX_TIM3_Init+0xa0>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001d06:	230a      	movs	r3, #10
 8001d08:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d12:	2300      	movs	r3, #0
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001d16:	230a      	movs	r3, #10
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d1a:	f107 030c 	add.w	r3, r7, #12
 8001d1e:	4619      	mov	r1, r3
 8001d20:	480c      	ldr	r0, [pc, #48]	; (8001d54 <MX_TIM3_Init+0xa0>)
 8001d22:	f002 fd1f 	bl	8004764 <HAL_TIM_Encoder_Init>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001d2c:	f000 fc4c 	bl	80025c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d30:	2300      	movs	r3, #0
 8001d32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4805      	ldr	r0, [pc, #20]	; (8001d54 <MX_TIM3_Init+0xa0>)
 8001d3e:	f003 fe19 	bl	8005974 <HAL_TIMEx_MasterConfigSynchronization>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001d48:	f000 fc3e 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d4c:	bf00      	nop
 8001d4e:	3730      	adds	r7, #48	; 0x30
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20004b18 	.word	0x20004b18
 8001d58:	40000400 	.word	0x40000400

08001d5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d62:	f107 0310 	add.w	r3, r7, #16
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d6c:	463b      	mov	r3, r7
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d78:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <MX_TIM4_Init+0xa0>)
 8001d7a:	4a21      	ldr	r2, [pc, #132]	; (8001e00 <MX_TIM4_Init+0xa4>)
 8001d7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <MX_TIM4_Init+0xa0>)
 8001d80:	220f      	movs	r2, #15
 8001d82:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d84:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <MX_TIM4_Init+0xa0>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <MX_TIM4_Init+0xa0>)
 8001d8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001d90:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d92:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <MX_TIM4_Init+0xa0>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d98:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <MX_TIM4_Init+0xa0>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001d9e:	4817      	ldr	r0, [pc, #92]	; (8001dfc <MX_TIM4_Init+0xa0>)
 8001da0:	f002 fb68 	bl	8004474 <HAL_TIM_IC_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001daa:	f000 fc0d 	bl	80025c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001db6:	f107 0310 	add.w	r3, r7, #16
 8001dba:	4619      	mov	r1, r3
 8001dbc:	480f      	ldr	r0, [pc, #60]	; (8001dfc <MX_TIM4_Init+0xa0>)
 8001dbe:	f003 fdd9 	bl	8005974 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001dc8:	f000 fbfe 	bl	80025c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ddc:	463b      	mov	r3, r7
 8001dde:	2200      	movs	r2, #0
 8001de0:	4619      	mov	r1, r3
 8001de2:	4806      	ldr	r0, [pc, #24]	; (8001dfc <MX_TIM4_Init+0xa0>)
 8001de4:	f002 fefa 	bl	8004bdc <HAL_TIM_IC_ConfigChannel>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001dee:	f000 fbeb 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001df2:	bf00      	nop
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20004a20 	.word	0x20004a20
 8001e00:	40000800 	.word	0x40000800

08001e04 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b092      	sub	sp, #72	; 0x48
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
 8001e24:	615a      	str	r2, [r3, #20]
 8001e26:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f007 fe7e 	bl	8009b30 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e34:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <MX_TIM8_Init+0x110>)
 8001e36:	4a38      	ldr	r2, [pc, #224]	; (8001f18 <MX_TIM8_Init+0x114>)
 8001e38:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001e3a:	4b36      	ldr	r3, [pc, #216]	; (8001f14 <MX_TIM8_Init+0x110>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e40:	4b34      	ldr	r3, [pc, #208]	; (8001f14 <MX_TIM8_Init+0x110>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001e46:	4b33      	ldr	r3, [pc, #204]	; (8001f14 <MX_TIM8_Init+0x110>)
 8001e48:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001e4c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4e:	4b31      	ldr	r3, [pc, #196]	; (8001f14 <MX_TIM8_Init+0x110>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e54:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <MX_TIM8_Init+0x110>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5a:	4b2e      	ldr	r3, [pc, #184]	; (8001f14 <MX_TIM8_Init+0x110>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001e60:	482c      	ldr	r0, [pc, #176]	; (8001f14 <MX_TIM8_Init+0x110>)
 8001e62:	f002 f9f0 	bl	8004246 <HAL_TIM_PWM_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001e6c:	f000 fbac 	bl	80025c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e70:	2300      	movs	r3, #0
 8001e72:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4825      	ldr	r0, [pc, #148]	; (8001f14 <MX_TIM8_Init+0x110>)
 8001e80:	f003 fd78 	bl	8005974 <HAL_TIMEx_MasterConfigSynchronization>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8001e8a:	f000 fb9d 	bl	80025c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e8e:	2360      	movs	r3, #96	; 0x60
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e96:	2300      	movs	r3, #0
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eae:	2200      	movs	r2, #0
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4818      	ldr	r0, [pc, #96]	; (8001f14 <MX_TIM8_Init+0x110>)
 8001eb4:	f002 ff2e 	bl	8004d14 <HAL_TIM_PWM_ConfigChannel>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8001ebe:	f000 fb83 	bl	80025c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec6:	2204      	movs	r2, #4
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4812      	ldr	r0, [pc, #72]	; (8001f14 <MX_TIM8_Init+0x110>)
 8001ecc:	f002 ff22 	bl	8004d14 <HAL_TIM_PWM_ConfigChannel>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8001ed6:	f000 fb77 	bl	80025c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001eee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ef2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	4619      	mov	r1, r3
 8001efc:	4805      	ldr	r0, [pc, #20]	; (8001f14 <MX_TIM8_Init+0x110>)
 8001efe:	f003 fdb5 	bl	8005a6c <HAL_TIMEx_ConfigBreakDeadTime>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001f08:	f000 fb5e 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001f0c:	bf00      	nop
 8001f0e:	3748      	adds	r7, #72	; 0x48
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200049d8 	.word	0x200049d8
 8001f18:	40010400 	.word	0x40010400

08001f1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f22:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <MX_USART3_UART_Init+0x50>)
 8001f24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f42:	220c      	movs	r2, #12
 8001f44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f54:	f003 fdf0 	bl	8005b38 <HAL_UART_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f5e:	f000 fb33 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20004a6c 	.word	0x20004a6c
 8001f6c:	40004800 	.word	0x40004800

08001f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	; 0x28
 8001f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	4b49      	ldr	r3, [pc, #292]	; (80020b0 <MX_GPIO_Init+0x140>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	4a48      	ldr	r2, [pc, #288]	; (80020b0 <MX_GPIO_Init+0x140>)
 8001f90:	f043 0310 	orr.w	r3, r3, #16
 8001f94:	6313      	str	r3, [r2, #48]	; 0x30
 8001f96:	4b46      	ldr	r3, [pc, #280]	; (80020b0 <MX_GPIO_Init+0x140>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f003 0310 	and.w	r3, r3, #16
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	4b42      	ldr	r3, [pc, #264]	; (80020b0 <MX_GPIO_Init+0x140>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	4a41      	ldr	r2, [pc, #260]	; (80020b0 <MX_GPIO_Init+0x140>)
 8001fac:	f043 0304 	orr.w	r3, r3, #4
 8001fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb2:	4b3f      	ldr	r3, [pc, #252]	; (80020b0 <MX_GPIO_Init+0x140>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <MX_GPIO_Init+0x140>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a3a      	ldr	r2, [pc, #232]	; (80020b0 <MX_GPIO_Init+0x140>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b38      	ldr	r3, [pc, #224]	; (80020b0 <MX_GPIO_Init+0x140>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	4b34      	ldr	r3, [pc, #208]	; (80020b0 <MX_GPIO_Init+0x140>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a33      	ldr	r2, [pc, #204]	; (80020b0 <MX_GPIO_Init+0x140>)
 8001fe4:	f043 0308 	orr.w	r3, r3, #8
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b31      	ldr	r3, [pc, #196]	; (80020b0 <MX_GPIO_Init+0x140>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	603b      	str	r3, [r7, #0]
 8001ffa:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <MX_GPIO_Init+0x140>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	4a2c      	ldr	r2, [pc, #176]	; (80020b0 <MX_GPIO_Init+0x140>)
 8002000:	f043 0302 	orr.w	r3, r3, #2
 8002004:	6313      	str	r3, [r2, #48]	; 0x30
 8002006:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <MX_GPIO_Init+0x140>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8002012:	2200      	movs	r2, #0
 8002014:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8002018:	4826      	ldr	r0, [pc, #152]	; (80020b4 <MX_GPIO_Init+0x144>)
 800201a:	f001 fc3b 	bl	8003894 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 800201e:	2200      	movs	r2, #0
 8002020:	213c      	movs	r1, #60	; 0x3c
 8002022:	4825      	ldr	r0, [pc, #148]	; (80020b8 <MX_GPIO_Init+0x148>)
 8002024:	f001 fc36 	bl	8003894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8002028:	2200      	movs	r2, #0
 800202a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800202e:	4823      	ldr	r0, [pc, #140]	; (80020bc <MX_GPIO_Init+0x14c>)
 8002030:	f001 fc30 	bl	8003894 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8002034:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8002038:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203a:	2301      	movs	r3, #1
 800203c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002046:	f107 0314 	add.w	r3, r7, #20
 800204a:	4619      	mov	r1, r3
 800204c:	4819      	ldr	r0, [pc, #100]	; (80020b4 <MX_GPIO_Init+0x144>)
 800204e:	f001 fa85 	bl	800355c <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8002052:	233c      	movs	r3, #60	; 0x3c
 8002054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002056:	2301      	movs	r3, #1
 8002058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800205e:	2302      	movs	r3, #2
 8002060:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002062:	f107 0314 	add.w	r3, r7, #20
 8002066:	4619      	mov	r1, r3
 8002068:	4813      	ldr	r0, [pc, #76]	; (80020b8 <MX_GPIO_Init+0x148>)
 800206a:	f001 fa77 	bl	800355c <HAL_GPIO_Init>

  /*Configure GPIO pin : USRBUT_Pin */
  GPIO_InitStruct.Pin = USRBUT_Pin;
 800206e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002074:	2300      	movs	r3, #0
 8002076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USRBUT_GPIO_Port, &GPIO_InitStruct);
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	4619      	mov	r1, r3
 8002082:	480e      	ldr	r0, [pc, #56]	; (80020bc <MX_GPIO_Init+0x14c>)
 8002084:	f001 fa6a 	bl	800355c <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8002088:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800208c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208e:	2301      	movs	r3, #1
 8002090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4619      	mov	r1, r3
 80020a0:	4806      	ldr	r0, [pc, #24]	; (80020bc <MX_GPIO_Init+0x14c>)
 80020a2:	f001 fa5b 	bl	800355c <HAL_GPIO_Init>

}
 80020a6:	bf00      	nop
 80020a8:	3728      	adds	r7, #40	; 0x28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40020000 	.word	0x40020000
 80020bc:	40020c00 	.word	0x40020c00

080020c0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	/*Prevent unused argument(s) compilation warning*/
	UNUSED(huart);
	HAL_UART_Transmit(&huart3,(uint8_t *)aRxBuffer,10,0xFFFF); //might not nd
 80020c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020cc:	220a      	movs	r2, #10
 80020ce:	4904      	ldr	r1, [pc, #16]	; (80020e0 <HAL_UART_RxCpltCallback+0x20>)
 80020d0:	4804      	ldr	r0, [pc, #16]	; (80020e4 <HAL_UART_RxCpltCallback+0x24>)
 80020d2:	f003 fd7e 	bl	8005bd2 <HAL_UART_Transmit>
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20004bf4 	.word	0x20004bf4
 80020e4:	20004a6c 	.word	0x20004a6c

080020e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08e      	sub	sp, #56	; 0x38
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t test[20] = "Testing Pi";
 80020f0:	4a2a      	ldr	r2, [pc, #168]	; (800219c <StartDefaultTask+0xb4>)
 80020f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80020f8:	c303      	stmia	r3!, {r0, r1}
 80020fa:	801a      	strh	r2, [r3, #0]
 80020fc:	3302      	adds	r3, #2
 80020fe:	0c12      	lsrs	r2, r2, #16
 8002100:	701a      	strb	r2, [r3, #0]
 8002102:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	721a      	strb	r2, [r3, #8]
	uint8_t checkPi[1];

	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 1);
 800210e:	2201      	movs	r2, #1
 8002110:	4923      	ldr	r1, [pc, #140]	; (80021a0 <StartDefaultTask+0xb8>)
 8002112:	4824      	ldr	r0, [pc, #144]	; (80021a4 <StartDefaultTask+0xbc>)
 8002114:	f003 fe34 	bl	8005d80 <HAL_UART_Receive_IT>
		OLED_ShowString(5,5,test);
 8002118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211c:	461a      	mov	r2, r3
 800211e:	2105      	movs	r1, #5
 8002120:	2005      	movs	r0, #5
 8002122:	f007 fc0f 	bl	8009944 <OLED_ShowString>
//		sprintf(checkPi, "Pi cmd: %s\0", aRxBuffer);
//		OLED_ShowString(10, 20, checkPi);
		OLED_Clear();
 8002126:	f007 fb1b 	bl	8009760 <OLED_Clear>
		ultraDistCheck();
 800212a:	f7fe ffa1 	bl	8001070 <ultraDistCheck>
		HAL_Delay(200);
 800212e:	20c8      	movs	r0, #200	; 0xc8
 8002130:	f000 fdea 	bl	8002d08 <HAL_Delay>
		sprintf(ultra, "uDistF: %u\0", uDistFinal);
 8002134:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <StartDefaultTask+0xc0>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	f107 0310 	add.w	r3, r7, #16
 800213c:	491b      	ldr	r1, [pc, #108]	; (80021ac <StartDefaultTask+0xc4>)
 800213e:	4618      	mov	r0, r3
 8002140:	f007 fcfe 	bl	8009b40 <siprintf>
		OLED_ShowString(10, 50, ultra);
 8002144:	f107 0310 	add.w	r3, r7, #16
 8002148:	461a      	mov	r2, r3
 800214a:	2132      	movs	r1, #50	; 0x32
 800214c:	200a      	movs	r0, #10
 800214e:	f007 fbf9 	bl	8009944 <OLED_ShowString>

		sprintf(ultra, "uDist1: %u\0", uDistCheck1);
 8002152:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <StartDefaultTask+0xc8>)
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	4915      	ldr	r1, [pc, #84]	; (80021b4 <StartDefaultTask+0xcc>)
 800215e:	4618      	mov	r0, r3
 8002160:	f007 fcee 	bl	8009b40 <siprintf>
		OLED_ShowString(10, 25, ultra);
 8002164:	f107 0310 	add.w	r3, r7, #16
 8002168:	461a      	mov	r2, r3
 800216a:	2119      	movs	r1, #25
 800216c:	200a      	movs	r0, #10
 800216e:	f007 fbe9 	bl	8009944 <OLED_ShowString>

		sprintf(ultra, "uDist2: %u\0", uDistCheck2);
 8002172:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <StartDefaultTask+0xd0>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	f107 0310 	add.w	r3, r7, #16
 800217a:	4910      	ldr	r1, [pc, #64]	; (80021bc <StartDefaultTask+0xd4>)
 800217c:	4618      	mov	r0, r3
 800217e:	f007 fcdf 	bl	8009b40 <siprintf>
		OLED_ShowString(10, 35, ultra);
 8002182:	f107 0310 	add.w	r3, r7, #16
 8002186:	461a      	mov	r2, r3
 8002188:	2123      	movs	r1, #35	; 0x23
 800218a:	200a      	movs	r0, #10
 800218c:	f007 fbda 	bl	8009944 <OLED_ShowString>
//		HAL_Delay(100);
//		sprintf(ultra, "IR right: %u\0", ir2Dist);
//		OLED_ShowString(10, 40, ultra);


		OLED_Refresh_Gram();
 8002190:	f007 fa64 	bl	800965c <OLED_Refresh_Gram>
		//	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
		osDelay(100);
 8002194:	2064      	movs	r0, #100	; 0x64
 8002196:	f004 fdeb 	bl	8006d70 <osDelay>
	{
 800219a:	e7b8      	b.n	800210e <StartDefaultTask+0x26>
 800219c:	0800a3ec 	.word	0x0800a3ec
 80021a0:	20004bf4 	.word	0x20004bf4
 80021a4:	20004a6c 	.word	0x20004a6c
 80021a8:	200000b4 	.word	0x200000b4
 80021ac:	0800a3c8 	.word	0x0800a3c8
 80021b0:	200000ae 	.word	0x200000ae
 80021b4:	0800a3d4 	.word	0x0800a3d4
 80021b8:	200000b0 	.word	0x200000b0
 80021bc:	0800a3e0 	.word	0x0800a3e0

080021c0 <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80021c8:	2100      	movs	r1, #0
 80021ca:	48b6      	ldr	r0, [pc, #728]	; (80024a4 <motor+0x2e4>)
 80021cc:	f002 f88a 	bl	80042e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80021d0:	2104      	movs	r1, #4
 80021d2:	48b4      	ldr	r0, [pc, #720]	; (80024a4 <motor+0x2e4>)
 80021d4:	f002 f886 	bl	80042e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80021d8:	210c      	movs	r1, #12
 80021da:	48b3      	ldr	r0, [pc, #716]	; (80024a8 <motor+0x2e8>)
 80021dc:	f002 f882 	bl	80042e4 <HAL_TIM_PWM_Start>
	int x = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61fb      	str	r3, [r7, #28]

	//*aRxBuffer = '\0';
	*aRxBuffer = '1';
 80021e4:	4bb1      	ldr	r3, [pc, #708]	; (80024ac <motor+0x2ec>)
 80021e6:	2231      	movs	r2, #49	; 0x31
 80021e8:	701a      	strb	r2, [r3, #0]
	uint8_t toRpiTest[6] = "NiHao";
 80021ea:	4ab1      	ldr	r2, [pc, #708]	; (80024b0 <motor+0x2f0>)
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021f4:	6018      	str	r0, [r3, #0]
 80021f6:	3304      	adds	r3, #4
 80021f8:	8019      	strh	r1, [r3, #0]
		for(;;)
		  {
			switch (*aRxBuffer)
 80021fa:	4bac      	ldr	r3, [pc, #688]	; (80024ac <motor+0x2ec>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b5a      	cmp	r3, #90	; 0x5a
 8002200:	f200 81cb 	bhi.w	800259a <motor+0x3da>
 8002204:	a201      	add	r2, pc, #4	; (adr r2, 800220c <motor+0x4c>)
 8002206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220a:	bf00      	nop
 800220c:	08002379 	.word	0x08002379
 8002210:	0800259b 	.word	0x0800259b
 8002214:	0800259b 	.word	0x0800259b
 8002218:	0800259b 	.word	0x0800259b
 800221c:	0800259b 	.word	0x0800259b
 8002220:	0800259b 	.word	0x0800259b
 8002224:	0800259b 	.word	0x0800259b
 8002228:	0800259b 	.word	0x0800259b
 800222c:	0800259b 	.word	0x0800259b
 8002230:	0800259b 	.word	0x0800259b
 8002234:	0800259b 	.word	0x0800259b
 8002238:	0800259b 	.word	0x0800259b
 800223c:	0800259b 	.word	0x0800259b
 8002240:	0800259b 	.word	0x0800259b
 8002244:	0800259b 	.word	0x0800259b
 8002248:	0800259b 	.word	0x0800259b
 800224c:	0800259b 	.word	0x0800259b
 8002250:	0800259b 	.word	0x0800259b
 8002254:	0800259b 	.word	0x0800259b
 8002258:	0800259b 	.word	0x0800259b
 800225c:	0800259b 	.word	0x0800259b
 8002260:	0800259b 	.word	0x0800259b
 8002264:	0800259b 	.word	0x0800259b
 8002268:	0800259b 	.word	0x0800259b
 800226c:	0800259b 	.word	0x0800259b
 8002270:	0800259b 	.word	0x0800259b
 8002274:	0800259b 	.word	0x0800259b
 8002278:	0800259b 	.word	0x0800259b
 800227c:	0800259b 	.word	0x0800259b
 8002280:	0800259b 	.word	0x0800259b
 8002284:	0800259b 	.word	0x0800259b
 8002288:	0800259b 	.word	0x0800259b
 800228c:	0800259b 	.word	0x0800259b
 8002290:	0800259b 	.word	0x0800259b
 8002294:	0800259b 	.word	0x0800259b
 8002298:	0800259b 	.word	0x0800259b
 800229c:	0800259b 	.word	0x0800259b
 80022a0:	0800259b 	.word	0x0800259b
 80022a4:	0800259b 	.word	0x0800259b
 80022a8:	0800259b 	.word	0x0800259b
 80022ac:	0800259b 	.word	0x0800259b
 80022b0:	0800259b 	.word	0x0800259b
 80022b4:	0800259b 	.word	0x0800259b
 80022b8:	0800259b 	.word	0x0800259b
 80022bc:	0800259b 	.word	0x0800259b
 80022c0:	0800259b 	.word	0x0800259b
 80022c4:	0800259b 	.word	0x0800259b
 80022c8:	0800259b 	.word	0x0800259b
 80022cc:	08002433 	.word	0x08002433
 80022d0:	0800243b 	.word	0x0800243b
 80022d4:	08002443 	.word	0x08002443
 80022d8:	0800244b 	.word	0x0800244b
 80022dc:	08002453 	.word	0x08002453
 80022e0:	0800245b 	.word	0x0800245b
 80022e4:	08002463 	.word	0x08002463
 80022e8:	0800246b 	.word	0x0800246b
 80022ec:	08002473 	.word	0x08002473
 80022f0:	0800247b 	.word	0x0800247b
 80022f4:	0800259b 	.word	0x0800259b
 80022f8:	0800259b 	.word	0x0800259b
 80022fc:	0800259b 	.word	0x0800259b
 8002300:	0800259b 	.word	0x0800259b
 8002304:	0800259b 	.word	0x0800259b
 8002308:	0800259b 	.word	0x0800259b
 800230c:	0800259b 	.word	0x0800259b
 8002310:	0800259b 	.word	0x0800259b
 8002314:	0800259b 	.word	0x0800259b
 8002318:	0800259b 	.word	0x0800259b
 800231c:	0800259b 	.word	0x0800259b
 8002320:	0800249b 	.word	0x0800249b
 8002324:	0800259b 	.word	0x0800259b
 8002328:	0800259b 	.word	0x0800259b
 800232c:	0800238d 	.word	0x0800238d
 8002330:	0800259b 	.word	0x0800259b
 8002334:	0800259b 	.word	0x0800259b
 8002338:	080023a9 	.word	0x080023a9
 800233c:	08002483 	.word	0x08002483
 8002340:	0800259b 	.word	0x0800259b
 8002344:	0800259b 	.word	0x0800259b
 8002348:	080023c1 	.word	0x080023c1
 800234c:	0800259b 	.word	0x0800259b
 8002350:	08002493 	.word	0x08002493
 8002354:	0800248b 	.word	0x0800248b
 8002358:	0800259b 	.word	0x0800259b
 800235c:	0800259b 	.word	0x0800259b
 8002360:	080024c1 	.word	0x080024c1
 8002364:	0800259b 	.word	0x0800259b
 8002368:	0800259b 	.word	0x0800259b
 800236c:	0800259b 	.word	0x0800259b
 8002370:	0800259b 	.word	0x0800259b
 8002374:	08002595 	.word	0x08002595
			{
			case '\0': // initialize
				htim1.Instance->CCR4 = 74;
 8002378:	4b4b      	ldr	r3, [pc, #300]	; (80024a8 <motor+0x2e8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	224a      	movs	r2, #74	; 0x4a
 800237e:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 1);
 8002380:	2201      	movs	r2, #1
 8002382:	494a      	ldr	r1, [pc, #296]	; (80024ac <motor+0x2ec>)
 8002384:	484b      	ldr	r0, [pc, #300]	; (80024b4 <motor+0x2f4>)
 8002386:	f003 fcfb 	bl	8005d80 <HAL_UART_Receive_IT>
				break;
 800238a:	e10c      	b.n	80025a6 <motor+0x3e6>
			case 'H':
				HAL_UART_Transmit_IT(&huart3,(uint8_t *)&toRpiTest,6);
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	2206      	movs	r2, #6
 8002392:	4619      	mov	r1, r3
 8002394:	4847      	ldr	r0, [pc, #284]	; (80024b4 <motor+0x2f4>)
 8002396:	f003 fcae 	bl	8005cf6 <HAL_UART_Transmit_IT>
				osDelay(50);
 800239a:	2032      	movs	r0, #50	; 0x32
 800239c:	f004 fce8 	bl	8006d70 <osDelay>
				*aRxBuffer = 'Z';
 80023a0:	4b42      	ldr	r3, [pc, #264]	; (80024ac <motor+0x2ec>)
 80023a2:	225a      	movs	r2, #90	; 0x5a
 80023a4:	701a      	strb	r2, [r3, #0]
				break;
 80023a6:	e0fe      	b.n	80025a6 <motor+0x3e6>
			case 'K':
				HAL_UART_Transmit_IT(&huart3,(uint8_t *)"OK?\n",4);
 80023a8:	2204      	movs	r2, #4
 80023aa:	4943      	ldr	r1, [pc, #268]	; (80024b8 <motor+0x2f8>)
 80023ac:	4841      	ldr	r0, [pc, #260]	; (80024b4 <motor+0x2f4>)
 80023ae:	f003 fca2 	bl	8005cf6 <HAL_UART_Transmit_IT>
				osDelay(50);
 80023b2:	2032      	movs	r0, #50	; 0x32
 80023b4:	f004 fcdc 	bl	8006d70 <osDelay>
				*aRxBuffer = 'Z';
 80023b8:	4b3c      	ldr	r3, [pc, #240]	; (80024ac <motor+0x2ec>)
 80023ba:	225a      	movs	r2, #90	; 0x5a
 80023bc:	701a      	strb	r2, [r3, #0]
				break;
 80023be:	e0f2      	b.n	80025a6 <motor+0x3e6>
			case 'O':
				HAL_UART_Transmit_IT(&huart3,(uint8_t *)"O",1);
 80023c0:	2201      	movs	r2, #1
 80023c2:	493e      	ldr	r1, [pc, #248]	; (80024bc <motor+0x2fc>)
 80023c4:	483b      	ldr	r0, [pc, #236]	; (80024b4 <motor+0x2f4>)
 80023c6:	f003 fc96 	bl	8005cf6 <HAL_UART_Transmit_IT>
				while(*aRxBuffer=='O'){
 80023ca:	e02a      	b.n	8002422 <motor+0x262>
					HAL_Delay(100);
 80023cc:	2064      	movs	r0, #100	; 0x64
 80023ce:	f000 fc9b 	bl	8002d08 <HAL_Delay>
					spotTurn(1);
 80023d2:	2001      	movs	r0, #1
 80023d4:	f7ff f974 	bl	80016c0 <spotTurn>
					HAL_Delay(100);
 80023d8:	2064      	movs	r0, #100	; 0x64
 80023da:	f000 fc95 	bl	8002d08 <HAL_Delay>
					forward(37);
 80023de:	2025      	movs	r0, #37	; 0x25
 80023e0:	f7ff f876 	bl	80014d0 <forward>
					HAL_Delay(100);
 80023e4:	2064      	movs	r0, #100	; 0x64
 80023e6:	f000 fc8f 	bl	8002d08 <HAL_Delay>
					spotTurn(2);
 80023ea:	2002      	movs	r0, #2
 80023ec:	f7ff f968 	bl	80016c0 <spotTurn>
					HAL_Delay(100);
 80023f0:	2064      	movs	r0, #100	; 0x64
 80023f2:	f000 fc89 	bl	8002d08 <HAL_Delay>
					forward(27);
 80023f6:	201b      	movs	r0, #27
 80023f8:	f7ff f86a 	bl	80014d0 <forward>
					HAL_Delay(100);
 80023fc:	2064      	movs	r0, #100	; 0x64
 80023fe:	f000 fc83 	bl	8002d08 <HAL_Delay>
					spotTurn(2);
 8002402:	2002      	movs	r0, #2
 8002404:	f7ff f95c 	bl	80016c0 <spotTurn>
					HAL_Delay(100);
 8002408:	2064      	movs	r0, #100	; 0x64
 800240a:	f000 fc7d 	bl	8002d08 <HAL_Delay>
					HAL_UART_Transmit_IT(&huart3,(uint8_t *)"O",1);
 800240e:	2201      	movs	r2, #1
 8002410:	492a      	ldr	r1, [pc, #168]	; (80024bc <motor+0x2fc>)
 8002412:	4828      	ldr	r0, [pc, #160]	; (80024b4 <motor+0x2f4>)
 8002414:	f003 fc6f 	bl	8005cf6 <HAL_UART_Transmit_IT>
					*aRxBuffer = 'Z';
 8002418:	4b24      	ldr	r3, [pc, #144]	; (80024ac <motor+0x2ec>)
 800241a:	225a      	movs	r2, #90	; 0x5a
 800241c:	701a      	strb	r2, [r3, #0]
					waitCmd();
 800241e:	f7fe fe71 	bl	8001104 <waitCmd>
				while(*aRxBuffer=='O'){
 8002422:	4b22      	ldr	r3, [pc, #136]	; (80024ac <motor+0x2ec>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b4f      	cmp	r3, #79	; 0x4f
 8002428:	d0d0      	beq.n	80023cc <motor+0x20c>
				}
//				*aRxBuffer = 'F'; //put in motorControl(). cuz wun come back here
				*aRxBuffer = 'Z';
 800242a:	4b20      	ldr	r3, [pc, #128]	; (80024ac <motor+0x2ec>)
 800242c:	225a      	movs	r2, #90	; 0x5a
 800242e:	701a      	strb	r2, [r3, #0]
				break;
 8002430:	e0b9      	b.n	80025a6 <motor+0x3e6>
			case '0':
				forward(0);break;
 8002432:	2000      	movs	r0, #0
 8002434:	f7ff f84c 	bl	80014d0 <forward>
 8002438:	e0b5      	b.n	80025a6 <motor+0x3e6>
			case '1':
				forward(1);break;
 800243a:	2001      	movs	r0, #1
 800243c:	f7ff f848 	bl	80014d0 <forward>
 8002440:	e0b1      	b.n	80025a6 <motor+0x3e6>
			case '2':
				forward(2);break;
 8002442:	2002      	movs	r0, #2
 8002444:	f7ff f844 	bl	80014d0 <forward>
 8002448:	e0ad      	b.n	80025a6 <motor+0x3e6>
			case '3':
				forward(3);break;
 800244a:	2003      	movs	r0, #3
 800244c:	f7ff f840 	bl	80014d0 <forward>
 8002450:	e0a9      	b.n	80025a6 <motor+0x3e6>
			case '4':
				forward(4);break;
 8002452:	2004      	movs	r0, #4
 8002454:	f7ff f83c 	bl	80014d0 <forward>
 8002458:	e0a5      	b.n	80025a6 <motor+0x3e6>
			case '5':
				forward(5);break;
 800245a:	2005      	movs	r0, #5
 800245c:	f7ff f838 	bl	80014d0 <forward>
 8002460:	e0a1      	b.n	80025a6 <motor+0x3e6>
			case '6':
				forward(6);break;
 8002462:	2006      	movs	r0, #6
 8002464:	f7ff f834 	bl	80014d0 <forward>
 8002468:	e09d      	b.n	80025a6 <motor+0x3e6>
			case '7':
				forward(7);break;
 800246a:	2007      	movs	r0, #7
 800246c:	f7ff f830 	bl	80014d0 <forward>
 8002470:	e099      	b.n	80025a6 <motor+0x3e6>
			case '8':
				forward(8);break;
 8002472:	2008      	movs	r0, #8
 8002474:	f7ff f82c 	bl	80014d0 <forward>
 8002478:	e095      	b.n	80025a6 <motor+0x3e6>
			case '9':
				forward(9);break;
 800247a:	2009      	movs	r0, #9
 800247c:	f7ff f828 	bl	80014d0 <forward>
 8002480:	e091      	b.n	80025a6 <motor+0x3e6>
			case 'L':
				spotTurn(1);break;
 8002482:	2001      	movs	r0, #1
 8002484:	f7ff f91c 	bl	80016c0 <spotTurn>
 8002488:	e08d      	b.n	80025a6 <motor+0x3e6>

			case 'R':
				spotTurn(2);break;
 800248a:	2002      	movs	r0, #2
 800248c:	f7ff f918 	bl	80016c0 <spotTurn>
 8002490:	e089      	b.n	80025a6 <motor+0x3e6>
			case 'Q':
				degTurn(1);break;
 8002492:	2001      	movs	r0, #1
 8002494:	f7fe ffd0 	bl	8001438 <degTurn>
 8002498:	e085      	b.n	80025a6 <motor+0x3e6>
			case 'E':
				degTurn(2);break;
 800249a:	2002      	movs	r0, #2
 800249c:	f7fe ffcc 	bl	8001438 <degTurn>
 80024a0:	e081      	b.n	80025a6 <motor+0x3e6>
 80024a2:	bf00      	nop
 80024a4:	200049d8 	.word	0x200049d8
 80024a8:	20004ba8 	.word	0x20004ba8
 80024ac:	20004bf4 	.word	0x20004bf4
 80024b0:	0800a40c 	.word	0x0800a40c
 80024b4:	20004a6c 	.word	0x20004a6c
 80024b8:	0800a400 	.word	0x0800a400
 80024bc:	0800a408 	.word	0x0800a408
			case 'U':
				ultraDistCheck();
 80024c0:	f7fe fdd6 	bl	8001070 <ultraDistCheck>
				HAL_Delay(200);
 80024c4:	20c8      	movs	r0, #200	; 0xc8
 80024c6:	f000 fc1f 	bl	8002d08 <HAL_Delay>
				char reply[] = "000\n";
 80024ca:	4a39      	ldr	r2, [pc, #228]	; (80025b0 <motor+0x3f0>)
 80024cc:	f107 030c 	add.w	r3, r7, #12
 80024d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024d4:	6018      	str	r0, [r3, #0]
 80024d6:	3304      	adds	r3, #4
 80024d8:	7019      	strb	r1, [r3, #0]
				reply[0] += uDistFinal / 100 % 10;
 80024da:	7b38      	ldrb	r0, [r7, #12]
 80024dc:	4b35      	ldr	r3, [pc, #212]	; (80025b4 <motor+0x3f4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a35      	ldr	r2, [pc, #212]	; (80025b8 <motor+0x3f8>)
 80024e2:	fb82 1203 	smull	r1, r2, r2, r3
 80024e6:	1152      	asrs	r2, r2, #5
 80024e8:	17db      	asrs	r3, r3, #31
 80024ea:	1ad2      	subs	r2, r2, r3
 80024ec:	4b33      	ldr	r3, [pc, #204]	; (80025bc <motor+0x3fc>)
 80024ee:	fb83 1302 	smull	r1, r3, r3, r2
 80024f2:	1099      	asrs	r1, r3, #2
 80024f4:	17d3      	asrs	r3, r2, #31
 80024f6:	1ac9      	subs	r1, r1, r3
 80024f8:	460b      	mov	r3, r1
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	1ad1      	subs	r1, r2, r3
 8002502:	b2cb      	uxtb	r3, r1
 8002504:	4403      	add	r3, r0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	733b      	strb	r3, [r7, #12]
				reply[1] += uDistFinal / 10 % 10;
 800250a:	7b78      	ldrb	r0, [r7, #13]
 800250c:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <motor+0x3f4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a2a      	ldr	r2, [pc, #168]	; (80025bc <motor+0x3fc>)
 8002512:	fb82 1203 	smull	r1, r2, r2, r3
 8002516:	1092      	asrs	r2, r2, #2
 8002518:	17db      	asrs	r3, r3, #31
 800251a:	1ad2      	subs	r2, r2, r3
 800251c:	4b27      	ldr	r3, [pc, #156]	; (80025bc <motor+0x3fc>)
 800251e:	fb83 1302 	smull	r1, r3, r3, r2
 8002522:	1099      	asrs	r1, r3, #2
 8002524:	17d3      	asrs	r3, r2, #31
 8002526:	1ac9      	subs	r1, r1, r3
 8002528:	460b      	mov	r3, r1
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	1ad1      	subs	r1, r2, r3
 8002532:	b2cb      	uxtb	r3, r1
 8002534:	4403      	add	r3, r0
 8002536:	b2db      	uxtb	r3, r3
 8002538:	737b      	strb	r3, [r7, #13]
				reply[2] += uDistFinal % 10;
 800253a:	7bb8      	ldrb	r0, [r7, #14]
 800253c:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <motor+0x3f4>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b1e      	ldr	r3, [pc, #120]	; (80025bc <motor+0x3fc>)
 8002542:	fb83 1302 	smull	r1, r3, r3, r2
 8002546:	1099      	asrs	r1, r3, #2
 8002548:	17d3      	asrs	r3, r2, #31
 800254a:	1ac9      	subs	r1, r1, r3
 800254c:	460b      	mov	r3, r1
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	1ad1      	subs	r1, r2, r3
 8002556:	b2cb      	uxtb	r3, r1
 8002558:	4403      	add	r3, r0
 800255a:	b2db      	uxtb	r3, r3
 800255c:	73bb      	strb	r3, [r7, #14]
				if (uDistFinal > 999)
 800255e:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <motor+0x3f4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002566:	db01      	blt.n	800256c <motor+0x3ac>
					reply[0] = '9';
 8002568:	2339      	movs	r3, #57	; 0x39
 800256a:	733b      	strb	r3, [r7, #12]
				HAL_UART_Transmit_IT(&huart3, (uint8_t *)reply, strlen(reply));
 800256c:	f107 030c 	add.w	r3, r7, #12
 8002570:	4618      	mov	r0, r3
 8002572:	f7fd fe2d 	bl	80001d0 <strlen>
 8002576:	4603      	mov	r3, r0
 8002578:	b29a      	uxth	r2, r3
 800257a:	f107 030c 	add.w	r3, r7, #12
 800257e:	4619      	mov	r1, r3
 8002580:	480f      	ldr	r0, [pc, #60]	; (80025c0 <motor+0x400>)
 8002582:	f003 fbb8 	bl	8005cf6 <HAL_UART_Transmit_IT>
				osDelay(50);
 8002586:	2032      	movs	r0, #50	; 0x32
 8002588:	f004 fbf2 	bl	8006d70 <osDelay>
				*aRxBuffer = 'Z';
 800258c:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <motor+0x404>)
 800258e:	225a      	movs	r2, #90	; 0x5a
 8002590:	701a      	strb	r2, [r3, #0]
				break;
 8002592:	e008      	b.n	80025a6 <motor+0x3e6>
//				HAL_UART_Transmit_IT(&huart3, (uint8_t *)reply2, strlen(reply3));
//				osDelay(50);
//				*aRxBuffer = 'R';
//				break;
			case 'Z':
				waitCmd();
 8002594:	f7fe fdb6 	bl	8001104 <waitCmd>
				break;
 8002598:	e005      	b.n	80025a6 <motor+0x3e6>
			default:
//				*aRxBuffer = 'R';
				HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 1);
 800259a:	2201      	movs	r2, #1
 800259c:	4909      	ldr	r1, [pc, #36]	; (80025c4 <motor+0x404>)
 800259e:	4808      	ldr	r0, [pc, #32]	; (80025c0 <motor+0x400>)
 80025a0:	f003 fbee 	bl	8005d80 <HAL_UART_Receive_IT>
				break;
 80025a4:	bf00      	nop
			}
			HAL_Delay(100);
 80025a6:	2064      	movs	r0, #100	; 0x64
 80025a8:	f000 fbae 	bl	8002d08 <HAL_Delay>
			switch (*aRxBuffer)
 80025ac:	e625      	b.n	80021fa <motor+0x3a>
 80025ae:	bf00      	nop
 80025b0:	0800a414 	.word	0x0800a414
 80025b4:	200000b4 	.word	0x200000b4
 80025b8:	51eb851f 	.word	0x51eb851f
 80025bc:	66666667 	.word	0x66666667
 80025c0:	20004a6c 	.word	0x20004a6c
 80025c4:	20004bf4 	.word	0x20004bf4

080025c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025cc:	b672      	cpsid	i
}
 80025ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025d0:	e7fe      	b.n	80025d0 <Error_Handler+0x8>
	...

080025d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	4b12      	ldr	r3, [pc, #72]	; (8002628 <HAL_MspInit+0x54>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	4a11      	ldr	r2, [pc, #68]	; (8002628 <HAL_MspInit+0x54>)
 80025e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ea:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <HAL_MspInit+0x54>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f2:	607b      	str	r3, [r7, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	603b      	str	r3, [r7, #0]
 80025fa:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_MspInit+0x54>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	4a0a      	ldr	r2, [pc, #40]	; (8002628 <HAL_MspInit+0x54>)
 8002600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002604:	6413      	str	r3, [r2, #64]	; 0x40
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <HAL_MspInit+0x54>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002612:	2200      	movs	r2, #0
 8002614:	210f      	movs	r1, #15
 8002616:	f06f 0001 	mvn.w	r0, #1
 800261a:	f000 fed6 	bl	80033ca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800

0800262c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08c      	sub	sp, #48	; 0x30
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 031c 	add.w	r3, r7, #28
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a2e      	ldr	r2, [pc, #184]	; (8002704 <HAL_ADC_MspInit+0xd8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d128      	bne.n	80026a0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
 8002652:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <HAL_ADC_MspInit+0xdc>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	4a2c      	ldr	r2, [pc, #176]	; (8002708 <HAL_ADC_MspInit+0xdc>)
 8002658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265c:	6453      	str	r3, [r2, #68]	; 0x44
 800265e:	4b2a      	ldr	r3, [pc, #168]	; (8002708 <HAL_ADC_MspInit+0xdc>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	61bb      	str	r3, [r7, #24]
 8002668:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	4b26      	ldr	r3, [pc, #152]	; (8002708 <HAL_ADC_MspInit+0xdc>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	4a25      	ldr	r2, [pc, #148]	; (8002708 <HAL_ADC_MspInit+0xdc>)
 8002674:	f043 0304 	orr.w	r3, r3, #4
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	4b23      	ldr	r3, [pc, #140]	; (8002708 <HAL_ADC_MspInit+0xdc>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002686:	2302      	movs	r3, #2
 8002688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800268a:	2303      	movs	r3, #3
 800268c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002692:	f107 031c 	add.w	r3, r7, #28
 8002696:	4619      	mov	r1, r3
 8002698:	481c      	ldr	r0, [pc, #112]	; (800270c <HAL_ADC_MspInit+0xe0>)
 800269a:	f000 ff5f 	bl	800355c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800269e:	e02c      	b.n	80026fa <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a1a      	ldr	r2, [pc, #104]	; (8002710 <HAL_ADC_MspInit+0xe4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d127      	bne.n	80026fa <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	4b16      	ldr	r3, [pc, #88]	; (8002708 <HAL_ADC_MspInit+0xdc>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	4a15      	ldr	r2, [pc, #84]	; (8002708 <HAL_ADC_MspInit+0xdc>)
 80026b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026b8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ba:	4b13      	ldr	r3, [pc, #76]	; (8002708 <HAL_ADC_MspInit+0xdc>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <HAL_ADC_MspInit+0xdc>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	4a0e      	ldr	r2, [pc, #56]	; (8002708 <HAL_ADC_MspInit+0xdc>)
 80026d0:	f043 0304 	orr.w	r3, r3, #4
 80026d4:	6313      	str	r3, [r2, #48]	; 0x30
 80026d6:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <HAL_ADC_MspInit+0xdc>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026e2:	2304      	movs	r3, #4
 80026e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026e6:	2303      	movs	r3, #3
 80026e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ee:	f107 031c 	add.w	r3, r7, #28
 80026f2:	4619      	mov	r1, r3
 80026f4:	4805      	ldr	r0, [pc, #20]	; (800270c <HAL_ADC_MspInit+0xe0>)
 80026f6:	f000 ff31 	bl	800355c <HAL_GPIO_Init>
}
 80026fa:	bf00      	nop
 80026fc:	3730      	adds	r7, #48	; 0x30
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40012000 	.word	0x40012000
 8002708:	40023800 	.word	0x40023800
 800270c:	40020800 	.word	0x40020800
 8002710:	40012100 	.word	0x40012100

08002714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0b      	ldr	r2, [pc, #44]	; (8002750 <HAL_TIM_Base_MspInit+0x3c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d10d      	bne.n	8002742 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <HAL_TIM_Base_MspInit+0x40>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	4a09      	ldr	r2, [pc, #36]	; (8002754 <HAL_TIM_Base_MspInit+0x40>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6453      	str	r3, [r2, #68]	; 0x44
 8002736:	4b07      	ldr	r3, [pc, #28]	; (8002754 <HAL_TIM_Base_MspInit+0x40>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002742:	bf00      	nop
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40010000 	.word	0x40010000
 8002754:	40023800 	.word	0x40023800

08002758 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08c      	sub	sp, #48	; 0x30
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002760:	f107 031c 	add.w	r3, r7, #28
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002778:	d14b      	bne.n	8002812 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	61bb      	str	r3, [r7, #24]
 800277e:	4b3f      	ldr	r3, [pc, #252]	; (800287c <HAL_TIM_Encoder_MspInit+0x124>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	4a3e      	ldr	r2, [pc, #248]	; (800287c <HAL_TIM_Encoder_MspInit+0x124>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6413      	str	r3, [r2, #64]	; 0x40
 800278a:	4b3c      	ldr	r3, [pc, #240]	; (800287c <HAL_TIM_Encoder_MspInit+0x124>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	61bb      	str	r3, [r7, #24]
 8002794:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	4b38      	ldr	r3, [pc, #224]	; (800287c <HAL_TIM_Encoder_MspInit+0x124>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a37      	ldr	r2, [pc, #220]	; (800287c <HAL_TIM_Encoder_MspInit+0x124>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
 80027a6:	4b35      	ldr	r3, [pc, #212]	; (800287c <HAL_TIM_Encoder_MspInit+0x124>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	4b31      	ldr	r3, [pc, #196]	; (800287c <HAL_TIM_Encoder_MspInit+0x124>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a30      	ldr	r2, [pc, #192]	; (800287c <HAL_TIM_Encoder_MspInit+0x124>)
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b2e      	ldr	r3, [pc, #184]	; (800287c <HAL_TIM_Encoder_MspInit+0x124>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80027ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d4:	2302      	movs	r3, #2
 80027d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027dc:	2300      	movs	r3, #0
 80027de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027e0:	2301      	movs	r3, #1
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e4:	f107 031c 	add.w	r3, r7, #28
 80027e8:	4619      	mov	r1, r3
 80027ea:	4825      	ldr	r0, [pc, #148]	; (8002880 <HAL_TIM_Encoder_MspInit+0x128>)
 80027ec:	f000 feb6 	bl	800355c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027f0:	2308      	movs	r3, #8
 80027f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f4:	2302      	movs	r3, #2
 80027f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fc:	2300      	movs	r3, #0
 80027fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002800:	2301      	movs	r3, #1
 8002802:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002804:	f107 031c 	add.w	r3, r7, #28
 8002808:	4619      	mov	r1, r3
 800280a:	481e      	ldr	r0, [pc, #120]	; (8002884 <HAL_TIM_Encoder_MspInit+0x12c>)
 800280c:	f000 fea6 	bl	800355c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002810:	e030      	b.n	8002874 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1c      	ldr	r2, [pc, #112]	; (8002888 <HAL_TIM_Encoder_MspInit+0x130>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d12b      	bne.n	8002874 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800281c:	2300      	movs	r3, #0
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	4b16      	ldr	r3, [pc, #88]	; (800287c <HAL_TIM_Encoder_MspInit+0x124>)
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	4a15      	ldr	r2, [pc, #84]	; (800287c <HAL_TIM_Encoder_MspInit+0x124>)
 8002826:	f043 0302 	orr.w	r3, r3, #2
 800282a:	6413      	str	r3, [r2, #64]	; 0x40
 800282c:	4b13      	ldr	r3, [pc, #76]	; (800287c <HAL_TIM_Encoder_MspInit+0x124>)
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002838:	2300      	movs	r3, #0
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <HAL_TIM_Encoder_MspInit+0x124>)
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	4a0e      	ldr	r2, [pc, #56]	; (800287c <HAL_TIM_Encoder_MspInit+0x124>)
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	6313      	str	r3, [r2, #48]	; 0x30
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <HAL_TIM_Encoder_MspInit+0x124>)
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002854:	23c0      	movs	r3, #192	; 0xc0
 8002856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002858:	2302      	movs	r3, #2
 800285a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002860:	2300      	movs	r3, #0
 8002862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002864:	2302      	movs	r3, #2
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002868:	f107 031c 	add.w	r3, r7, #28
 800286c:	4619      	mov	r1, r3
 800286e:	4804      	ldr	r0, [pc, #16]	; (8002880 <HAL_TIM_Encoder_MspInit+0x128>)
 8002870:	f000 fe74 	bl	800355c <HAL_GPIO_Init>
}
 8002874:	bf00      	nop
 8002876:	3730      	adds	r7, #48	; 0x30
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40023800 	.word	0x40023800
 8002880:	40020000 	.word	0x40020000
 8002884:	40020400 	.word	0x40020400
 8002888:	40000400 	.word	0x40000400

0800288c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	; 0x28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	f107 0314 	add.w	r3, r7, #20
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1d      	ldr	r2, [pc, #116]	; (8002920 <HAL_TIM_IC_MspInit+0x94>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d134      	bne.n	8002918 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	4b1c      	ldr	r3, [pc, #112]	; (8002924 <HAL_TIM_IC_MspInit+0x98>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	4a1b      	ldr	r2, [pc, #108]	; (8002924 <HAL_TIM_IC_MspInit+0x98>)
 80028b8:	f043 0304 	orr.w	r3, r3, #4
 80028bc:	6413      	str	r3, [r2, #64]	; 0x40
 80028be:	4b19      	ldr	r3, [pc, #100]	; (8002924 <HAL_TIM_IC_MspInit+0x98>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <HAL_TIM_IC_MspInit+0x98>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a14      	ldr	r2, [pc, #80]	; (8002924 <HAL_TIM_IC_MspInit+0x98>)
 80028d4:	f043 0308 	orr.w	r3, r3, #8
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
 80028da:	4b12      	ldr	r3, [pc, #72]	; (8002924 <HAL_TIM_IC_MspInit+0x98>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80028e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ec:	2302      	movs	r3, #2
 80028ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f4:	2300      	movs	r3, #0
 80028f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80028f8:	2302      	movs	r3, #2
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	4619      	mov	r1, r3
 8002902:	4809      	ldr	r0, [pc, #36]	; (8002928 <HAL_TIM_IC_MspInit+0x9c>)
 8002904:	f000 fe2a 	bl	800355c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002908:	2200      	movs	r2, #0
 800290a:	2105      	movs	r1, #5
 800290c:	201e      	movs	r0, #30
 800290e:	f000 fd5c 	bl	80033ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002912:	201e      	movs	r0, #30
 8002914:	f000 fd75 	bl	8003402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002918:	bf00      	nop
 800291a:	3728      	adds	r7, #40	; 0x28
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40000800 	.word	0x40000800
 8002924:	40023800 	.word	0x40023800
 8002928:	40020c00 	.word	0x40020c00

0800292c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM8)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a19      	ldr	r2, [pc, #100]	; (80029b0 <HAL_TIM_PWM_MspInit+0x84>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d12b      	bne.n	80029a6 <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <HAL_TIM_PWM_MspInit+0x88>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	4a17      	ldr	r2, [pc, #92]	; (80029b4 <HAL_TIM_PWM_MspInit+0x88>)
 8002958:	f043 0302 	orr.w	r3, r3, #2
 800295c:	6453      	str	r3, [r2, #68]	; 0x44
 800295e:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <HAL_TIM_PWM_MspInit+0x88>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <HAL_TIM_PWM_MspInit+0x88>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a10      	ldr	r2, [pc, #64]	; (80029b4 <HAL_TIM_PWM_MspInit+0x88>)
 8002974:	f043 0304 	orr.w	r3, r3, #4
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <HAL_TIM_PWM_MspInit+0x88>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8002986:	23c0      	movs	r3, #192	; 0xc0
 8002988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002992:	2300      	movs	r3, #0
 8002994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002996:	2303      	movs	r3, #3
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	4619      	mov	r1, r3
 80029a0:	4805      	ldr	r0, [pc, #20]	; (80029b8 <HAL_TIM_PWM_MspInit+0x8c>)
 80029a2:	f000 fddb 	bl	800355c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80029a6:	bf00      	nop
 80029a8:	3728      	adds	r7, #40	; 0x28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40010400 	.word	0x40010400
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40020800 	.word	0x40020800

080029bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c4:	f107 030c 	add.w	r3, r7, #12
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a12      	ldr	r2, [pc, #72]	; (8002a24 <HAL_TIM_MspPostInit+0x68>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d11e      	bne.n	8002a1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <HAL_TIM_MspPostInit+0x6c>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	4a10      	ldr	r2, [pc, #64]	; (8002a28 <HAL_TIM_MspPostInit+0x6c>)
 80029e8:	f043 0310 	orr.w	r3, r3, #16
 80029ec:	6313      	str	r3, [r2, #48]	; 0x30
 80029ee:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <HAL_TIM_MspPostInit+0x6c>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80029fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	2302      	movs	r3, #2
 8002a02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a10:	f107 030c 	add.w	r3, r7, #12
 8002a14:	4619      	mov	r1, r3
 8002a16:	4805      	ldr	r0, [pc, #20]	; (8002a2c <HAL_TIM_MspPostInit+0x70>)
 8002a18:	f000 fda0 	bl	800355c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a1c:	bf00      	nop
 8002a1e:	3720      	adds	r7, #32
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40010000 	.word	0x40010000
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40021000 	.word	0x40021000

08002a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08a      	sub	sp, #40	; 0x28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a38:	f107 0314 	add.w	r3, r7, #20
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a1d      	ldr	r2, [pc, #116]	; (8002ac4 <HAL_UART_MspInit+0x94>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d134      	bne.n	8002abc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	4b1c      	ldr	r3, [pc, #112]	; (8002ac8 <HAL_UART_MspInit+0x98>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	4a1b      	ldr	r2, [pc, #108]	; (8002ac8 <HAL_UART_MspInit+0x98>)
 8002a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a60:	6413      	str	r3, [r2, #64]	; 0x40
 8002a62:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_UART_MspInit+0x98>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <HAL_UART_MspInit+0x98>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	4a14      	ldr	r2, [pc, #80]	; (8002ac8 <HAL_UART_MspInit+0x98>)
 8002a78:	f043 0304 	orr.w	r3, r3, #4
 8002a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7e:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <HAL_UART_MspInit+0x98>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a8a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a90:	2302      	movs	r3, #2
 8002a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a9c:	2307      	movs	r3, #7
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa0:	f107 0314 	add.w	r3, r7, #20
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4809      	ldr	r0, [pc, #36]	; (8002acc <HAL_UART_MspInit+0x9c>)
 8002aa8:	f000 fd58 	bl	800355c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002aac:	2200      	movs	r2, #0
 8002aae:	2105      	movs	r1, #5
 8002ab0:	2027      	movs	r0, #39	; 0x27
 8002ab2:	f000 fc8a 	bl	80033ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ab6:	2027      	movs	r0, #39	; 0x27
 8002ab8:	f000 fca3 	bl	8003402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002abc:	bf00      	nop
 8002abe:	3728      	adds	r7, #40	; 0x28
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40004800 	.word	0x40004800
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40020800 	.word	0x40020800

08002ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ad4:	e7fe      	b.n	8002ad4 <NMI_Handler+0x4>

08002ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ada:	e7fe      	b.n	8002ada <HardFault_Handler+0x4>

08002adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ae0:	e7fe      	b.n	8002ae0 <MemManage_Handler+0x4>

08002ae2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ae6:	e7fe      	b.n	8002ae6 <BusFault_Handler+0x4>

08002ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aec:	e7fe      	b.n	8002aec <UsageFault_Handler+0x4>

08002aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aee:	b480      	push	{r7}
 8002af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b00:	f000 f8e2 	bl	8002cc8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002b04:	f005 fd42 	bl	800858c <xTaskGetSchedulerState>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d001      	beq.n	8002b12 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002b0e:	f006 fb2b 	bl	8009168 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b1c:	4802      	ldr	r0, [pc, #8]	; (8002b28 <TIM4_IRQHandler+0x10>)
 8002b1e:	f001 ff55 	bl	80049cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20004a20 	.word	0x20004a20

08002b2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b30:	4802      	ldr	r0, [pc, #8]	; (8002b3c <USART3_IRQHandler+0x10>)
 8002b32:	f003 f955 	bl	8005de0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20004a6c 	.word	0x20004a6c

08002b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b48:	4a14      	ldr	r2, [pc, #80]	; (8002b9c <_sbrk+0x5c>)
 8002b4a:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <_sbrk+0x60>)
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b54:	4b13      	ldr	r3, [pc, #76]	; (8002ba4 <_sbrk+0x64>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d102      	bne.n	8002b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <_sbrk+0x64>)
 8002b5e:	4a12      	ldr	r2, [pc, #72]	; (8002ba8 <_sbrk+0x68>)
 8002b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b62:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <_sbrk+0x64>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d207      	bcs.n	8002b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b70:	f006 ffa6 	bl	8009ac0 <__errno>
 8002b74:	4603      	mov	r3, r0
 8002b76:	220c      	movs	r2, #12
 8002b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b7e:	e009      	b.n	8002b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b80:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <_sbrk+0x64>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b86:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <_sbrk+0x64>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	4a05      	ldr	r2, [pc, #20]	; (8002ba4 <_sbrk+0x64>)
 8002b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b92:	68fb      	ldr	r3, [r7, #12]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20020000 	.word	0x20020000
 8002ba0:	00000400 	.word	0x00000400
 8002ba4:	200000b8 	.word	0x200000b8
 8002ba8:	200050a8 	.word	0x200050a8

08002bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <SystemInit+0x20>)
 8002bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb6:	4a05      	ldr	r2, [pc, #20]	; (8002bcc <SystemInit+0x20>)
 8002bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bc0:	bf00      	nop
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bd4:	480d      	ldr	r0, [pc, #52]	; (8002c0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bd6:	490e      	ldr	r1, [pc, #56]	; (8002c10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bd8:	4a0e      	ldr	r2, [pc, #56]	; (8002c14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bdc:	e002      	b.n	8002be4 <LoopCopyDataInit>

08002bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002be2:	3304      	adds	r3, #4

08002be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002be8:	d3f9      	bcc.n	8002bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bea:	4a0b      	ldr	r2, [pc, #44]	; (8002c18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bec:	4c0b      	ldr	r4, [pc, #44]	; (8002c1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bf0:	e001      	b.n	8002bf6 <LoopFillZerobss>

08002bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bf4:	3204      	adds	r2, #4

08002bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bf8:	d3fb      	bcc.n	8002bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bfa:	f7ff ffd7 	bl	8002bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bfe:	f006 ff65 	bl	8009acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c02:	f7fe fe17 	bl	8001834 <main>
  bx  lr    
 8002c06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c10:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002c14:	0800af3c 	.word	0x0800af3c
  ldr r2, =_sbss
 8002c18:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002c1c:	200050a8 	.word	0x200050a8

08002c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c20:	e7fe      	b.n	8002c20 <ADC_IRQHandler>
	...

08002c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c28:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <HAL_Init+0x40>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a0d      	ldr	r2, [pc, #52]	; (8002c64 <HAL_Init+0x40>)
 8002c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HAL_Init+0x40>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <HAL_Init+0x40>)
 8002c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c40:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <HAL_Init+0x40>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a07      	ldr	r2, [pc, #28]	; (8002c64 <HAL_Init+0x40>)
 8002c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c4c:	2003      	movs	r0, #3
 8002c4e:	f000 fbb1 	bl	80033b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c52:	200f      	movs	r0, #15
 8002c54:	f000 f808 	bl	8002c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c58:	f7ff fcbc 	bl	80025d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40023c00 	.word	0x40023c00

08002c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_InitTick+0x54>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <HAL_InitTick+0x58>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fbc9 	bl	800341e <HAL_SYSTICK_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e00e      	b.n	8002cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b0f      	cmp	r3, #15
 8002c9a:	d80a      	bhi.n	8002cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ca4:	f000 fb91 	bl	80033ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ca8:	4a06      	ldr	r2, [pc, #24]	; (8002cc4 <HAL_InitTick+0x5c>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e000      	b.n	8002cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	20000008 	.word	0x20000008
 8002cc4:	20000004 	.word	0x20000004

08002cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_IncTick+0x20>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_IncTick+0x24>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4a04      	ldr	r2, [pc, #16]	; (8002cec <HAL_IncTick+0x24>)
 8002cda:	6013      	str	r3, [r2, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	20000008 	.word	0x20000008
 8002cec:	20004c54 	.word	0x20004c54

08002cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <HAL_GetTick+0x14>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20004c54 	.word	0x20004c54

08002d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d10:	f7ff ffee 	bl	8002cf0 <HAL_GetTick>
 8002d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d20:	d005      	beq.n	8002d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d22:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <HAL_Delay+0x44>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d2e:	bf00      	nop
 8002d30:	f7ff ffde 	bl	8002cf0 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d8f7      	bhi.n	8002d30 <HAL_Delay+0x28>
  {
  }
}
 8002d40:	bf00      	nop
 8002d42:	bf00      	nop
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000008 	.word	0x20000008

08002d50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e033      	b.n	8002dce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff fc5c 	bl	800262c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d118      	bne.n	8002dc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d96:	f023 0302 	bic.w	r3, r3, #2
 8002d9a:	f043 0202 	orr.w	r2, r3, #2
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f93a 	bl	800301c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f023 0303 	bic.w	r3, r3, #3
 8002db6:	f043 0201 	orr.w	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40
 8002dbe:	e001      	b.n	8002dc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x1c>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e105      	b.n	8003000 <HAL_ADC_ConfigChannel+0x228>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b09      	cmp	r3, #9
 8002e02:	d925      	bls.n	8002e50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68d9      	ldr	r1, [r3, #12]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	461a      	mov	r2, r3
 8002e12:	4613      	mov	r3, r2
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	4413      	add	r3, r2
 8002e18:	3b1e      	subs	r3, #30
 8002e1a:	2207      	movs	r2, #7
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43da      	mvns	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	400a      	ands	r2, r1
 8002e28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68d9      	ldr	r1, [r3, #12]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4403      	add	r3, r0
 8002e42:	3b1e      	subs	r3, #30
 8002e44:	409a      	lsls	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	60da      	str	r2, [r3, #12]
 8002e4e:	e022      	b.n	8002e96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6919      	ldr	r1, [r3, #16]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4613      	mov	r3, r2
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4413      	add	r3, r2
 8002e64:	2207      	movs	r2, #7
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43da      	mvns	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	400a      	ands	r2, r1
 8002e72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6919      	ldr	r1, [r3, #16]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	4618      	mov	r0, r3
 8002e86:	4603      	mov	r3, r0
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	4403      	add	r3, r0
 8002e8c:	409a      	lsls	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b06      	cmp	r3, #6
 8002e9c:	d824      	bhi.n	8002ee8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	3b05      	subs	r3, #5
 8002eb0:	221f      	movs	r2, #31
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43da      	mvns	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	400a      	ands	r2, r1
 8002ebe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	4618      	mov	r0, r3
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3b05      	subs	r3, #5
 8002eda:	fa00 f203 	lsl.w	r2, r0, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ee6:	e04c      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b0c      	cmp	r3, #12
 8002eee:	d824      	bhi.n	8002f3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	3b23      	subs	r3, #35	; 0x23
 8002f02:	221f      	movs	r2, #31
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43da      	mvns	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	400a      	ands	r2, r1
 8002f10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	4618      	mov	r0, r3
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	3b23      	subs	r3, #35	; 0x23
 8002f2c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
 8002f38:	e023      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	3b41      	subs	r3, #65	; 0x41
 8002f4c:	221f      	movs	r2, #31
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43da      	mvns	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	400a      	ands	r2, r1
 8002f5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	4618      	mov	r0, r3
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	3b41      	subs	r3, #65	; 0x41
 8002f76:	fa00 f203 	lsl.w	r2, r0, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f82:	4b22      	ldr	r3, [pc, #136]	; (800300c <HAL_ADC_ConfigChannel+0x234>)
 8002f84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a21      	ldr	r2, [pc, #132]	; (8003010 <HAL_ADC_ConfigChannel+0x238>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d109      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x1cc>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b12      	cmp	r3, #18
 8002f96:	d105      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a19      	ldr	r2, [pc, #100]	; (8003010 <HAL_ADC_ConfigChannel+0x238>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d123      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x21e>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b10      	cmp	r3, #16
 8002fb4:	d003      	beq.n	8002fbe <HAL_ADC_ConfigChannel+0x1e6>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b11      	cmp	r3, #17
 8002fbc:	d11b      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b10      	cmp	r3, #16
 8002fd0:	d111      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fd2:	4b10      	ldr	r3, [pc, #64]	; (8003014 <HAL_ADC_ConfigChannel+0x23c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a10      	ldr	r2, [pc, #64]	; (8003018 <HAL_ADC_ConfigChannel+0x240>)
 8002fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fdc:	0c9a      	lsrs	r2, r3, #18
 8002fde:	4613      	mov	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fe8:	e002      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	3b01      	subs	r3, #1
 8002fee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f9      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	40012300 	.word	0x40012300
 8003010:	40012000 	.word	0x40012000
 8003014:	20000000 	.word	0x20000000
 8003018:	431bde83 	.word	0x431bde83

0800301c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003024:	4b79      	ldr	r3, [pc, #484]	; (800320c <ADC_Init+0x1f0>)
 8003026:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	431a      	orrs	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003050:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6859      	ldr	r1, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	021a      	lsls	r2, r3, #8
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003074:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6859      	ldr	r1, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003096:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6899      	ldr	r1, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	4a58      	ldr	r2, [pc, #352]	; (8003210 <ADC_Init+0x1f4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d022      	beq.n	80030fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6899      	ldr	r1, [r3, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6899      	ldr	r1, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	609a      	str	r2, [r3, #8]
 80030f8:	e00f      	b.n	800311a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003108:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003118:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0202 	bic.w	r2, r2, #2
 8003128:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6899      	ldr	r1, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	7e1b      	ldrb	r3, [r3, #24]
 8003134:	005a      	lsls	r2, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d01b      	beq.n	8003180 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003156:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003166:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6859      	ldr	r1, [r3, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	3b01      	subs	r3, #1
 8003174:	035a      	lsls	r2, r3, #13
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	e007      	b.n	8003190 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800318e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800319e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	051a      	lsls	r2, r3, #20
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6899      	ldr	r1, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031d2:	025a      	lsls	r2, r3, #9
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6899      	ldr	r1, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	029a      	lsls	r2, r3, #10
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	609a      	str	r2, [r3, #8]
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	40012300 	.word	0x40012300
 8003210:	0f000001 	.word	0x0f000001

08003214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <__NVIC_SetPriorityGrouping+0x44>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003230:	4013      	ands	r3, r2
 8003232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800323c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003246:	4a04      	ldr	r2, [pc, #16]	; (8003258 <__NVIC_SetPriorityGrouping+0x44>)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	60d3      	str	r3, [r2, #12]
}
 800324c:	bf00      	nop
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	e000ed00 	.word	0xe000ed00

0800325c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003260:	4b04      	ldr	r3, [pc, #16]	; (8003274 <__NVIC_GetPriorityGrouping+0x18>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	0a1b      	lsrs	r3, r3, #8
 8003266:	f003 0307 	and.w	r3, r3, #7
}
 800326a:	4618      	mov	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	e000ed00 	.word	0xe000ed00

08003278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	2b00      	cmp	r3, #0
 8003288:	db0b      	blt.n	80032a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	f003 021f 	and.w	r2, r3, #31
 8003290:	4907      	ldr	r1, [pc, #28]	; (80032b0 <__NVIC_EnableIRQ+0x38>)
 8003292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	2001      	movs	r0, #1
 800329a:	fa00 f202 	lsl.w	r2, r0, r2
 800329e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	e000e100 	.word	0xe000e100

080032b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	6039      	str	r1, [r7, #0]
 80032be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	db0a      	blt.n	80032de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	490c      	ldr	r1, [pc, #48]	; (8003300 <__NVIC_SetPriority+0x4c>)
 80032ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d2:	0112      	lsls	r2, r2, #4
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	440b      	add	r3, r1
 80032d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032dc:	e00a      	b.n	80032f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	4908      	ldr	r1, [pc, #32]	; (8003304 <__NVIC_SetPriority+0x50>)
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	3b04      	subs	r3, #4
 80032ec:	0112      	lsls	r2, r2, #4
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	440b      	add	r3, r1
 80032f2:	761a      	strb	r2, [r3, #24]
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	e000e100 	.word	0xe000e100
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003308:	b480      	push	{r7}
 800330a:	b089      	sub	sp, #36	; 0x24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f1c3 0307 	rsb	r3, r3, #7
 8003322:	2b04      	cmp	r3, #4
 8003324:	bf28      	it	cs
 8003326:	2304      	movcs	r3, #4
 8003328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	3304      	adds	r3, #4
 800332e:	2b06      	cmp	r3, #6
 8003330:	d902      	bls.n	8003338 <NVIC_EncodePriority+0x30>
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	3b03      	subs	r3, #3
 8003336:	e000      	b.n	800333a <NVIC_EncodePriority+0x32>
 8003338:	2300      	movs	r3, #0
 800333a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800333c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43da      	mvns	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	401a      	ands	r2, r3
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003350:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	fa01 f303 	lsl.w	r3, r1, r3
 800335a:	43d9      	mvns	r1, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003360:	4313      	orrs	r3, r2
         );
}
 8003362:	4618      	mov	r0, r3
 8003364:	3724      	adds	r7, #36	; 0x24
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
	...

08003370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3b01      	subs	r3, #1
 800337c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003380:	d301      	bcc.n	8003386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003382:	2301      	movs	r3, #1
 8003384:	e00f      	b.n	80033a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003386:	4a0a      	ldr	r2, [pc, #40]	; (80033b0 <SysTick_Config+0x40>)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3b01      	subs	r3, #1
 800338c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800338e:	210f      	movs	r1, #15
 8003390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003394:	f7ff ff8e 	bl	80032b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <SysTick_Config+0x40>)
 800339a:	2200      	movs	r2, #0
 800339c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800339e:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <SysTick_Config+0x40>)
 80033a0:	2207      	movs	r2, #7
 80033a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	e000e010 	.word	0xe000e010

080033b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff ff29 	bl	8003214 <__NVIC_SetPriorityGrouping>
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b086      	sub	sp, #24
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	4603      	mov	r3, r0
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
 80033d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033dc:	f7ff ff3e 	bl	800325c <__NVIC_GetPriorityGrouping>
 80033e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	6978      	ldr	r0, [r7, #20]
 80033e8:	f7ff ff8e 	bl	8003308 <NVIC_EncodePriority>
 80033ec:	4602      	mov	r2, r0
 80033ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f2:	4611      	mov	r1, r2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff ff5d 	bl	80032b4 <__NVIC_SetPriority>
}
 80033fa:	bf00      	nop
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	4603      	mov	r3, r0
 800340a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800340c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff ff31 	bl	8003278 <__NVIC_EnableIRQ>
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff ffa2 	bl	8003370 <SysTick_Config>
 800342c:	4603      	mov	r3, r0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003442:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003444:	f7ff fc54 	bl	8002cf0 <HAL_GetTick>
 8003448:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d008      	beq.n	8003468 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2280      	movs	r2, #128	; 0x80
 800345a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e052      	b.n	800350e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0216 	bic.w	r2, r2, #22
 8003476:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695a      	ldr	r2, [r3, #20]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003486:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	2b00      	cmp	r3, #0
 800348e:	d103      	bne.n	8003498 <HAL_DMA_Abort+0x62>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003494:	2b00      	cmp	r3, #0
 8003496:	d007      	beq.n	80034a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0208 	bic.w	r2, r2, #8
 80034a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0201 	bic.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034b8:	e013      	b.n	80034e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034ba:	f7ff fc19 	bl	8002cf0 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b05      	cmp	r3, #5
 80034c6:	d90c      	bls.n	80034e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2203      	movs	r2, #3
 80034d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e015      	b.n	800350e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1e4      	bne.n	80034ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f4:	223f      	movs	r2, #63	; 0x3f
 80034f6:	409a      	lsls	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d004      	beq.n	8003534 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2280      	movs	r2, #128	; 0x80
 800352e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e00c      	b.n	800354e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2205      	movs	r2, #5
 8003538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0201 	bic.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800355c:	b480      	push	{r7}
 800355e:	b089      	sub	sp, #36	; 0x24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800356a:	2300      	movs	r3, #0
 800356c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800356e:	2300      	movs	r3, #0
 8003570:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003572:	2300      	movs	r3, #0
 8003574:	61fb      	str	r3, [r7, #28]
 8003576:	e16b      	b.n	8003850 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003578:	2201      	movs	r2, #1
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4013      	ands	r3, r2
 800358a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	429a      	cmp	r2, r3
 8003592:	f040 815a 	bne.w	800384a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d005      	beq.n	80035ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d130      	bne.n	8003610 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	2203      	movs	r2, #3
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43db      	mvns	r3, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4013      	ands	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035e4:	2201      	movs	r2, #1
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43db      	mvns	r3, r3
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4013      	ands	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	091b      	lsrs	r3, r3, #4
 80035fa:	f003 0201 	and.w	r2, r3, #1
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4313      	orrs	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	2b03      	cmp	r3, #3
 800361a:	d017      	beq.n	800364c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	2203      	movs	r2, #3
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4313      	orrs	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d123      	bne.n	80036a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	08da      	lsrs	r2, r3, #3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3208      	adds	r2, #8
 8003660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003664:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	220f      	movs	r2, #15
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	43db      	mvns	r3, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4013      	ands	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	08da      	lsrs	r2, r3, #3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3208      	adds	r2, #8
 800369a:	69b9      	ldr	r1, [r7, #24]
 800369c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	2203      	movs	r2, #3
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4013      	ands	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 0203 	and.w	r2, r3, #3
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80b4 	beq.w	800384a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	4b60      	ldr	r3, [pc, #384]	; (8003868 <HAL_GPIO_Init+0x30c>)
 80036e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ea:	4a5f      	ldr	r2, [pc, #380]	; (8003868 <HAL_GPIO_Init+0x30c>)
 80036ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036f0:	6453      	str	r3, [r2, #68]	; 0x44
 80036f2:	4b5d      	ldr	r3, [pc, #372]	; (8003868 <HAL_GPIO_Init+0x30c>)
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036fe:	4a5b      	ldr	r2, [pc, #364]	; (800386c <HAL_GPIO_Init+0x310>)
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	089b      	lsrs	r3, r3, #2
 8003704:	3302      	adds	r3, #2
 8003706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800370a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	220f      	movs	r2, #15
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43db      	mvns	r3, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4013      	ands	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a52      	ldr	r2, [pc, #328]	; (8003870 <HAL_GPIO_Init+0x314>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d02b      	beq.n	8003782 <HAL_GPIO_Init+0x226>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a51      	ldr	r2, [pc, #324]	; (8003874 <HAL_GPIO_Init+0x318>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d025      	beq.n	800377e <HAL_GPIO_Init+0x222>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a50      	ldr	r2, [pc, #320]	; (8003878 <HAL_GPIO_Init+0x31c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d01f      	beq.n	800377a <HAL_GPIO_Init+0x21e>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a4f      	ldr	r2, [pc, #316]	; (800387c <HAL_GPIO_Init+0x320>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d019      	beq.n	8003776 <HAL_GPIO_Init+0x21a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a4e      	ldr	r2, [pc, #312]	; (8003880 <HAL_GPIO_Init+0x324>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d013      	beq.n	8003772 <HAL_GPIO_Init+0x216>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a4d      	ldr	r2, [pc, #308]	; (8003884 <HAL_GPIO_Init+0x328>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d00d      	beq.n	800376e <HAL_GPIO_Init+0x212>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a4c      	ldr	r2, [pc, #304]	; (8003888 <HAL_GPIO_Init+0x32c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d007      	beq.n	800376a <HAL_GPIO_Init+0x20e>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a4b      	ldr	r2, [pc, #300]	; (800388c <HAL_GPIO_Init+0x330>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d101      	bne.n	8003766 <HAL_GPIO_Init+0x20a>
 8003762:	2307      	movs	r3, #7
 8003764:	e00e      	b.n	8003784 <HAL_GPIO_Init+0x228>
 8003766:	2308      	movs	r3, #8
 8003768:	e00c      	b.n	8003784 <HAL_GPIO_Init+0x228>
 800376a:	2306      	movs	r3, #6
 800376c:	e00a      	b.n	8003784 <HAL_GPIO_Init+0x228>
 800376e:	2305      	movs	r3, #5
 8003770:	e008      	b.n	8003784 <HAL_GPIO_Init+0x228>
 8003772:	2304      	movs	r3, #4
 8003774:	e006      	b.n	8003784 <HAL_GPIO_Init+0x228>
 8003776:	2303      	movs	r3, #3
 8003778:	e004      	b.n	8003784 <HAL_GPIO_Init+0x228>
 800377a:	2302      	movs	r3, #2
 800377c:	e002      	b.n	8003784 <HAL_GPIO_Init+0x228>
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <HAL_GPIO_Init+0x228>
 8003782:	2300      	movs	r3, #0
 8003784:	69fa      	ldr	r2, [r7, #28]
 8003786:	f002 0203 	and.w	r2, r2, #3
 800378a:	0092      	lsls	r2, r2, #2
 800378c:	4093      	lsls	r3, r2
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	4313      	orrs	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003794:	4935      	ldr	r1, [pc, #212]	; (800386c <HAL_GPIO_Init+0x310>)
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	089b      	lsrs	r3, r3, #2
 800379a:	3302      	adds	r3, #2
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037a2:	4b3b      	ldr	r3, [pc, #236]	; (8003890 <HAL_GPIO_Init+0x334>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	43db      	mvns	r3, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4013      	ands	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037c6:	4a32      	ldr	r2, [pc, #200]	; (8003890 <HAL_GPIO_Init+0x334>)
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037cc:	4b30      	ldr	r3, [pc, #192]	; (8003890 <HAL_GPIO_Init+0x334>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037f0:	4a27      	ldr	r2, [pc, #156]	; (8003890 <HAL_GPIO_Init+0x334>)
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037f6:	4b26      	ldr	r3, [pc, #152]	; (8003890 <HAL_GPIO_Init+0x334>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	43db      	mvns	r3, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4013      	ands	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4313      	orrs	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800381a:	4a1d      	ldr	r2, [pc, #116]	; (8003890 <HAL_GPIO_Init+0x334>)
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003820:	4b1b      	ldr	r3, [pc, #108]	; (8003890 <HAL_GPIO_Init+0x334>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003844:	4a12      	ldr	r2, [pc, #72]	; (8003890 <HAL_GPIO_Init+0x334>)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	3301      	adds	r3, #1
 800384e:	61fb      	str	r3, [r7, #28]
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	2b0f      	cmp	r3, #15
 8003854:	f67f ae90 	bls.w	8003578 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003858:	bf00      	nop
 800385a:	bf00      	nop
 800385c:	3724      	adds	r7, #36	; 0x24
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40023800 	.word	0x40023800
 800386c:	40013800 	.word	0x40013800
 8003870:	40020000 	.word	0x40020000
 8003874:	40020400 	.word	0x40020400
 8003878:	40020800 	.word	0x40020800
 800387c:	40020c00 	.word	0x40020c00
 8003880:	40021000 	.word	0x40021000
 8003884:	40021400 	.word	0x40021400
 8003888:	40021800 	.word	0x40021800
 800388c:	40021c00 	.word	0x40021c00
 8003890:	40013c00 	.word	0x40013c00

08003894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	807b      	strh	r3, [r7, #2]
 80038a0:	4613      	mov	r3, r2
 80038a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038a4:	787b      	ldrb	r3, [r7, #1]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038aa:	887a      	ldrh	r2, [r7, #2]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038b0:	e003      	b.n	80038ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038b2:	887b      	ldrh	r3, [r7, #2]
 80038b4:	041a      	lsls	r2, r3, #16
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	619a      	str	r2, [r3, #24]
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80038ce:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <HAL_PWR_EnableBkUpAccess+0x20>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <HAL_PWR_EnableBkUpAccess+0x24>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80038da:	687b      	ldr	r3, [r7, #4]
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	420e0020 	.word	0x420e0020
 80038ec:	40007000 	.word	0x40007000

080038f0 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80038f6:	4b06      	ldr	r3, [pc, #24]	; (8003910 <HAL_PWR_DisableBkUpAccess+0x20>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80038fc:	4b05      	ldr	r3, [pc, #20]	; (8003914 <HAL_PWR_DisableBkUpAccess+0x24>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8003902:	687b      	ldr	r3, [r7, #4]
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	420e0020 	.word	0x420e0020
 8003914:	40007000 	.word	0x40007000

08003918 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e264      	b.n	8003df4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d075      	beq.n	8003a22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003936:	4ba3      	ldr	r3, [pc, #652]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b04      	cmp	r3, #4
 8003940:	d00c      	beq.n	800395c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003942:	4ba0      	ldr	r3, [pc, #640]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800394a:	2b08      	cmp	r3, #8
 800394c:	d112      	bne.n	8003974 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800394e:	4b9d      	ldr	r3, [pc, #628]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800395a:	d10b      	bne.n	8003974 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800395c:	4b99      	ldr	r3, [pc, #612]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d05b      	beq.n	8003a20 <HAL_RCC_OscConfig+0x108>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d157      	bne.n	8003a20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e23f      	b.n	8003df4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800397c:	d106      	bne.n	800398c <HAL_RCC_OscConfig+0x74>
 800397e:	4b91      	ldr	r3, [pc, #580]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a90      	ldr	r2, [pc, #576]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	e01d      	b.n	80039c8 <HAL_RCC_OscConfig+0xb0>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003994:	d10c      	bne.n	80039b0 <HAL_RCC_OscConfig+0x98>
 8003996:	4b8b      	ldr	r3, [pc, #556]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a8a      	ldr	r2, [pc, #552]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 800399c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	4b88      	ldr	r3, [pc, #544]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a87      	ldr	r2, [pc, #540]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	e00b      	b.n	80039c8 <HAL_RCC_OscConfig+0xb0>
 80039b0:	4b84      	ldr	r3, [pc, #528]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a83      	ldr	r2, [pc, #524]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 80039b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	4b81      	ldr	r3, [pc, #516]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a80      	ldr	r2, [pc, #512]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 80039c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d013      	beq.n	80039f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d0:	f7ff f98e 	bl	8002cf0 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039d8:	f7ff f98a 	bl	8002cf0 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b64      	cmp	r3, #100	; 0x64
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e204      	b.n	8003df4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ea:	4b76      	ldr	r3, [pc, #472]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0xc0>
 80039f6:	e014      	b.n	8003a22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f8:	f7ff f97a 	bl	8002cf0 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a00:	f7ff f976 	bl	8002cf0 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b64      	cmp	r3, #100	; 0x64
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e1f0      	b.n	8003df4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a12:	4b6c      	ldr	r3, [pc, #432]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0xe8>
 8003a1e:	e000      	b.n	8003a22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d063      	beq.n	8003af6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a2e:	4b65      	ldr	r3, [pc, #404]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00b      	beq.n	8003a52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a3a:	4b62      	ldr	r3, [pc, #392]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d11c      	bne.n	8003a80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a46:	4b5f      	ldr	r3, [pc, #380]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d116      	bne.n	8003a80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a52:	4b5c      	ldr	r3, [pc, #368]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <HAL_RCC_OscConfig+0x152>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d001      	beq.n	8003a6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e1c4      	b.n	8003df4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6a:	4b56      	ldr	r3, [pc, #344]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4952      	ldr	r1, [pc, #328]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7e:	e03a      	b.n	8003af6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d020      	beq.n	8003aca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a88:	4b4f      	ldr	r3, [pc, #316]	; (8003bc8 <HAL_RCC_OscConfig+0x2b0>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8e:	f7ff f92f 	bl	8002cf0 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a96:	f7ff f92b 	bl	8002cf0 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e1a5      	b.n	8003df4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa8:	4b46      	ldr	r3, [pc, #280]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab4:	4b43      	ldr	r3, [pc, #268]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	4940      	ldr	r1, [pc, #256]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	600b      	str	r3, [r1, #0]
 8003ac8:	e015      	b.n	8003af6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aca:	4b3f      	ldr	r3, [pc, #252]	; (8003bc8 <HAL_RCC_OscConfig+0x2b0>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7ff f90e 	bl	8002cf0 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad8:	f7ff f90a 	bl	8002cf0 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e184      	b.n	8003df4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aea:	4b36      	ldr	r3, [pc, #216]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d030      	beq.n	8003b64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d016      	beq.n	8003b38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b0a:	4b30      	ldr	r3, [pc, #192]	; (8003bcc <HAL_RCC_OscConfig+0x2b4>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b10:	f7ff f8ee 	bl	8002cf0 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b18:	f7ff f8ea 	bl	8002cf0 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e164      	b.n	8003df4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2a:	4b26      	ldr	r3, [pc, #152]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x200>
 8003b36:	e015      	b.n	8003b64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b38:	4b24      	ldr	r3, [pc, #144]	; (8003bcc <HAL_RCC_OscConfig+0x2b4>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3e:	f7ff f8d7 	bl	8002cf0 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b46:	f7ff f8d3 	bl	8002cf0 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e14d      	b.n	8003df4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b58:	4b1a      	ldr	r3, [pc, #104]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1f0      	bne.n	8003b46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80a0 	beq.w	8003cb2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b72:	2300      	movs	r3, #0
 8003b74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b76:	4b13      	ldr	r3, [pc, #76]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10f      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	4b0f      	ldr	r3, [pc, #60]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	4a0e      	ldr	r2, [pc, #56]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b90:	6413      	str	r3, [r2, #64]	; 0x40
 8003b92:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	60bb      	str	r3, [r7, #8]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba2:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <HAL_RCC_OscConfig+0x2b8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d121      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bae:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <HAL_RCC_OscConfig+0x2b8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a07      	ldr	r2, [pc, #28]	; (8003bd0 <HAL_RCC_OscConfig+0x2b8>)
 8003bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bba:	f7ff f899 	bl	8002cf0 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc0:	e011      	b.n	8003be6 <HAL_RCC_OscConfig+0x2ce>
 8003bc2:	bf00      	nop
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	42470000 	.word	0x42470000
 8003bcc:	42470e80 	.word	0x42470e80
 8003bd0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd4:	f7ff f88c 	bl	8002cf0 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e106      	b.n	8003df4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be6:	4b85      	ldr	r3, [pc, #532]	; (8003dfc <HAL_RCC_OscConfig+0x4e4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d106      	bne.n	8003c08 <HAL_RCC_OscConfig+0x2f0>
 8003bfa:	4b81      	ldr	r3, [pc, #516]	; (8003e00 <HAL_RCC_OscConfig+0x4e8>)
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfe:	4a80      	ldr	r2, [pc, #512]	; (8003e00 <HAL_RCC_OscConfig+0x4e8>)
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	6713      	str	r3, [r2, #112]	; 0x70
 8003c06:	e01c      	b.n	8003c42 <HAL_RCC_OscConfig+0x32a>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	2b05      	cmp	r3, #5
 8003c0e:	d10c      	bne.n	8003c2a <HAL_RCC_OscConfig+0x312>
 8003c10:	4b7b      	ldr	r3, [pc, #492]	; (8003e00 <HAL_RCC_OscConfig+0x4e8>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c14:	4a7a      	ldr	r2, [pc, #488]	; (8003e00 <HAL_RCC_OscConfig+0x4e8>)
 8003c16:	f043 0304 	orr.w	r3, r3, #4
 8003c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c1c:	4b78      	ldr	r3, [pc, #480]	; (8003e00 <HAL_RCC_OscConfig+0x4e8>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c20:	4a77      	ldr	r2, [pc, #476]	; (8003e00 <HAL_RCC_OscConfig+0x4e8>)
 8003c22:	f043 0301 	orr.w	r3, r3, #1
 8003c26:	6713      	str	r3, [r2, #112]	; 0x70
 8003c28:	e00b      	b.n	8003c42 <HAL_RCC_OscConfig+0x32a>
 8003c2a:	4b75      	ldr	r3, [pc, #468]	; (8003e00 <HAL_RCC_OscConfig+0x4e8>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2e:	4a74      	ldr	r2, [pc, #464]	; (8003e00 <HAL_RCC_OscConfig+0x4e8>)
 8003c30:	f023 0301 	bic.w	r3, r3, #1
 8003c34:	6713      	str	r3, [r2, #112]	; 0x70
 8003c36:	4b72      	ldr	r3, [pc, #456]	; (8003e00 <HAL_RCC_OscConfig+0x4e8>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3a:	4a71      	ldr	r2, [pc, #452]	; (8003e00 <HAL_RCC_OscConfig+0x4e8>)
 8003c3c:	f023 0304 	bic.w	r3, r3, #4
 8003c40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d015      	beq.n	8003c76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4a:	f7ff f851 	bl	8002cf0 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c50:	e00a      	b.n	8003c68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c52:	f7ff f84d 	bl	8002cf0 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e0c5      	b.n	8003df4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c68:	4b65      	ldr	r3, [pc, #404]	; (8003e00 <HAL_RCC_OscConfig+0x4e8>)
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0ee      	beq.n	8003c52 <HAL_RCC_OscConfig+0x33a>
 8003c74:	e014      	b.n	8003ca0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c76:	f7ff f83b 	bl	8002cf0 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c7e:	f7ff f837 	bl	8002cf0 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e0af      	b.n	8003df4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c94:	4b5a      	ldr	r3, [pc, #360]	; (8003e00 <HAL_RCC_OscConfig+0x4e8>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1ee      	bne.n	8003c7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ca0:	7dfb      	ldrb	r3, [r7, #23]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d105      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca6:	4b56      	ldr	r3, [pc, #344]	; (8003e00 <HAL_RCC_OscConfig+0x4e8>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	4a55      	ldr	r2, [pc, #340]	; (8003e00 <HAL_RCC_OscConfig+0x4e8>)
 8003cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 809b 	beq.w	8003df2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cbc:	4b50      	ldr	r3, [pc, #320]	; (8003e00 <HAL_RCC_OscConfig+0x4e8>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 030c 	and.w	r3, r3, #12
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d05c      	beq.n	8003d82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d141      	bne.n	8003d54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd0:	4b4c      	ldr	r3, [pc, #304]	; (8003e04 <HAL_RCC_OscConfig+0x4ec>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd6:	f7ff f80b 	bl	8002cf0 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cde:	f7ff f807 	bl	8002cf0 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e081      	b.n	8003df4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cf0:	4b43      	ldr	r3, [pc, #268]	; (8003e00 <HAL_RCC_OscConfig+0x4e8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f0      	bne.n	8003cde <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69da      	ldr	r2, [r3, #28]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	431a      	orrs	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	019b      	lsls	r3, r3, #6
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d12:	085b      	lsrs	r3, r3, #1
 8003d14:	3b01      	subs	r3, #1
 8003d16:	041b      	lsls	r3, r3, #16
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	061b      	lsls	r3, r3, #24
 8003d20:	4937      	ldr	r1, [pc, #220]	; (8003e00 <HAL_RCC_OscConfig+0x4e8>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d26:	4b37      	ldr	r3, [pc, #220]	; (8003e04 <HAL_RCC_OscConfig+0x4ec>)
 8003d28:	2201      	movs	r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2c:	f7fe ffe0 	bl	8002cf0 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d34:	f7fe ffdc 	bl	8002cf0 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e056      	b.n	8003df4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d46:	4b2e      	ldr	r3, [pc, #184]	; (8003e00 <HAL_RCC_OscConfig+0x4e8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0x41c>
 8003d52:	e04e      	b.n	8003df2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d54:	4b2b      	ldr	r3, [pc, #172]	; (8003e04 <HAL_RCC_OscConfig+0x4ec>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5a:	f7fe ffc9 	bl	8002cf0 <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d62:	f7fe ffc5 	bl	8002cf0 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e03f      	b.n	8003df4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d74:	4b22      	ldr	r3, [pc, #136]	; (8003e00 <HAL_RCC_OscConfig+0x4e8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f0      	bne.n	8003d62 <HAL_RCC_OscConfig+0x44a>
 8003d80:	e037      	b.n	8003df2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d101      	bne.n	8003d8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e032      	b.n	8003df4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d8e:	4b1c      	ldr	r3, [pc, #112]	; (8003e00 <HAL_RCC_OscConfig+0x4e8>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d028      	beq.n	8003dee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d121      	bne.n	8003dee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d11a      	bne.n	8003dee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dc4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d111      	bne.n	8003dee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd4:	085b      	lsrs	r3, r3, #1
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d107      	bne.n	8003dee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d001      	beq.n	8003df2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40007000 	.word	0x40007000
 8003e00:	40023800 	.word	0x40023800
 8003e04:	42470060 	.word	0x42470060

08003e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0cc      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e1c:	4b68      	ldr	r3, [pc, #416]	; (8003fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d90c      	bls.n	8003e44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2a:	4b65      	ldr	r3, [pc, #404]	; (8003fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e32:	4b63      	ldr	r3, [pc, #396]	; (8003fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d001      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e0b8      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d020      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d005      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e5c:	4b59      	ldr	r3, [pc, #356]	; (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	4a58      	ldr	r2, [pc, #352]	; (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0308 	and.w	r3, r3, #8
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e74:	4b53      	ldr	r3, [pc, #332]	; (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	4a52      	ldr	r2, [pc, #328]	; (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e80:	4b50      	ldr	r3, [pc, #320]	; (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	494d      	ldr	r1, [pc, #308]	; (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d044      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d107      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea6:	4b47      	ldr	r3, [pc, #284]	; (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d119      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e07f      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d003      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	d107      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec6:	4b3f      	ldr	r3, [pc, #252]	; (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d109      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e06f      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed6:	4b3b      	ldr	r3, [pc, #236]	; (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e067      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ee6:	4b37      	ldr	r3, [pc, #220]	; (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f023 0203 	bic.w	r2, r3, #3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	4934      	ldr	r1, [pc, #208]	; (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ef8:	f7fe fefa 	bl	8002cf0 <HAL_GetTick>
 8003efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efe:	e00a      	b.n	8003f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f00:	f7fe fef6 	bl	8002cf0 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e04f      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f16:	4b2b      	ldr	r3, [pc, #172]	; (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 020c 	and.w	r2, r3, #12
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d1eb      	bne.n	8003f00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f28:	4b25      	ldr	r3, [pc, #148]	; (8003fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d20c      	bcs.n	8003f50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f36:	4b22      	ldr	r3, [pc, #136]	; (8003fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3e:	4b20      	ldr	r3, [pc, #128]	; (8003fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d001      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e032      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d008      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f5c:	4b19      	ldr	r3, [pc, #100]	; (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	4916      	ldr	r1, [pc, #88]	; (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d009      	beq.n	8003f8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f7a:	4b12      	ldr	r3, [pc, #72]	; (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	490e      	ldr	r1, [pc, #56]	; (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f8e:	f000 f821 	bl	8003fd4 <HAL_RCC_GetSysClockFreq>
 8003f92:	4602      	mov	r2, r0
 8003f94:	4b0b      	ldr	r3, [pc, #44]	; (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	091b      	lsrs	r3, r3, #4
 8003f9a:	f003 030f 	and.w	r3, r3, #15
 8003f9e:	490a      	ldr	r1, [pc, #40]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa0:	5ccb      	ldrb	r3, [r1, r3]
 8003fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa6:	4a09      	ldr	r2, [pc, #36]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003faa:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fe fe5a 	bl	8002c68 <HAL_InitTick>

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40023c00 	.word	0x40023c00
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	0800a47c 	.word	0x0800a47c
 8003fcc:	20000000 	.word	0x20000000
 8003fd0:	20000004 	.word	0x20000004

08003fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fd4:	b5b0      	push	{r4, r5, r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fda:	2100      	movs	r1, #0
 8003fdc:	6079      	str	r1, [r7, #4]
 8003fde:	2100      	movs	r1, #0
 8003fe0:	60f9      	str	r1, [r7, #12]
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fea:	4952      	ldr	r1, [pc, #328]	; (8004134 <HAL_RCC_GetSysClockFreq+0x160>)
 8003fec:	6889      	ldr	r1, [r1, #8]
 8003fee:	f001 010c 	and.w	r1, r1, #12
 8003ff2:	2908      	cmp	r1, #8
 8003ff4:	d00d      	beq.n	8004012 <HAL_RCC_GetSysClockFreq+0x3e>
 8003ff6:	2908      	cmp	r1, #8
 8003ff8:	f200 8094 	bhi.w	8004124 <HAL_RCC_GetSysClockFreq+0x150>
 8003ffc:	2900      	cmp	r1, #0
 8003ffe:	d002      	beq.n	8004006 <HAL_RCC_GetSysClockFreq+0x32>
 8004000:	2904      	cmp	r1, #4
 8004002:	d003      	beq.n	800400c <HAL_RCC_GetSysClockFreq+0x38>
 8004004:	e08e      	b.n	8004124 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004006:	4b4c      	ldr	r3, [pc, #304]	; (8004138 <HAL_RCC_GetSysClockFreq+0x164>)
 8004008:	60bb      	str	r3, [r7, #8]
       break;
 800400a:	e08e      	b.n	800412a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800400c:	4b4b      	ldr	r3, [pc, #300]	; (800413c <HAL_RCC_GetSysClockFreq+0x168>)
 800400e:	60bb      	str	r3, [r7, #8]
      break;
 8004010:	e08b      	b.n	800412a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004012:	4948      	ldr	r1, [pc, #288]	; (8004134 <HAL_RCC_GetSysClockFreq+0x160>)
 8004014:	6849      	ldr	r1, [r1, #4]
 8004016:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800401a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800401c:	4945      	ldr	r1, [pc, #276]	; (8004134 <HAL_RCC_GetSysClockFreq+0x160>)
 800401e:	6849      	ldr	r1, [r1, #4]
 8004020:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004024:	2900      	cmp	r1, #0
 8004026:	d024      	beq.n	8004072 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004028:	4942      	ldr	r1, [pc, #264]	; (8004134 <HAL_RCC_GetSysClockFreq+0x160>)
 800402a:	6849      	ldr	r1, [r1, #4]
 800402c:	0989      	lsrs	r1, r1, #6
 800402e:	4608      	mov	r0, r1
 8004030:	f04f 0100 	mov.w	r1, #0
 8004034:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004038:	f04f 0500 	mov.w	r5, #0
 800403c:	ea00 0204 	and.w	r2, r0, r4
 8004040:	ea01 0305 	and.w	r3, r1, r5
 8004044:	493d      	ldr	r1, [pc, #244]	; (800413c <HAL_RCC_GetSysClockFreq+0x168>)
 8004046:	fb01 f003 	mul.w	r0, r1, r3
 800404a:	2100      	movs	r1, #0
 800404c:	fb01 f102 	mul.w	r1, r1, r2
 8004050:	1844      	adds	r4, r0, r1
 8004052:	493a      	ldr	r1, [pc, #232]	; (800413c <HAL_RCC_GetSysClockFreq+0x168>)
 8004054:	fba2 0101 	umull	r0, r1, r2, r1
 8004058:	1863      	adds	r3, r4, r1
 800405a:	4619      	mov	r1, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	461a      	mov	r2, r3
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	f7fc fdaa 	bl	8000bbc <__aeabi_uldivmod>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4613      	mov	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	e04a      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004072:	4b30      	ldr	r3, [pc, #192]	; (8004134 <HAL_RCC_GetSysClockFreq+0x160>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	099b      	lsrs	r3, r3, #6
 8004078:	461a      	mov	r2, r3
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004082:	f04f 0100 	mov.w	r1, #0
 8004086:	ea02 0400 	and.w	r4, r2, r0
 800408a:	ea03 0501 	and.w	r5, r3, r1
 800408e:	4620      	mov	r0, r4
 8004090:	4629      	mov	r1, r5
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 0300 	mov.w	r3, #0
 800409a:	014b      	lsls	r3, r1, #5
 800409c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040a0:	0142      	lsls	r2, r0, #5
 80040a2:	4610      	mov	r0, r2
 80040a4:	4619      	mov	r1, r3
 80040a6:	1b00      	subs	r0, r0, r4
 80040a8:	eb61 0105 	sbc.w	r1, r1, r5
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	018b      	lsls	r3, r1, #6
 80040b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040ba:	0182      	lsls	r2, r0, #6
 80040bc:	1a12      	subs	r2, r2, r0
 80040be:	eb63 0301 	sbc.w	r3, r3, r1
 80040c2:	f04f 0000 	mov.w	r0, #0
 80040c6:	f04f 0100 	mov.w	r1, #0
 80040ca:	00d9      	lsls	r1, r3, #3
 80040cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040d0:	00d0      	lsls	r0, r2, #3
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	1912      	adds	r2, r2, r4
 80040d8:	eb45 0303 	adc.w	r3, r5, r3
 80040dc:	f04f 0000 	mov.w	r0, #0
 80040e0:	f04f 0100 	mov.w	r1, #0
 80040e4:	0299      	lsls	r1, r3, #10
 80040e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80040ea:	0290      	lsls	r0, r2, #10
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4610      	mov	r0, r2
 80040f2:	4619      	mov	r1, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	f7fc fd5e 	bl	8000bbc <__aeabi_uldivmod>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4613      	mov	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004108:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <HAL_RCC_GetSysClockFreq+0x160>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	0c1b      	lsrs	r3, r3, #16
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	3301      	adds	r3, #1
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004120:	60bb      	str	r3, [r7, #8]
      break;
 8004122:	e002      	b.n	800412a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004124:	4b04      	ldr	r3, [pc, #16]	; (8004138 <HAL_RCC_GetSysClockFreq+0x164>)
 8004126:	60bb      	str	r3, [r7, #8]
      break;
 8004128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800412a:	68bb      	ldr	r3, [r7, #8]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bdb0      	pop	{r4, r5, r7, pc}
 8004134:	40023800 	.word	0x40023800
 8004138:	00f42400 	.word	0x00f42400
 800413c:	017d7840 	.word	0x017d7840

08004140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004144:	4b03      	ldr	r3, [pc, #12]	; (8004154 <HAL_RCC_GetHCLKFreq+0x14>)
 8004146:	681b      	ldr	r3, [r3, #0]
}
 8004148:	4618      	mov	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	20000000 	.word	0x20000000

08004158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800415c:	f7ff fff0 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 8004160:	4602      	mov	r2, r0
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	0a9b      	lsrs	r3, r3, #10
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	4903      	ldr	r1, [pc, #12]	; (800417c <HAL_RCC_GetPCLK1Freq+0x24>)
 800416e:	5ccb      	ldrb	r3, [r1, r3]
 8004170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004174:	4618      	mov	r0, r3
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40023800 	.word	0x40023800
 800417c:	0800a48c 	.word	0x0800a48c

08004180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004184:	f7ff ffdc 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 8004188:	4602      	mov	r2, r0
 800418a:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	0b5b      	lsrs	r3, r3, #13
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	4903      	ldr	r1, [pc, #12]	; (80041a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004196:	5ccb      	ldrb	r3, [r1, r3]
 8004198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800419c:	4618      	mov	r0, r3
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40023800 	.word	0x40023800
 80041a4:	0800a48c 	.word	0x0800a48c

080041a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e041      	b.n	800423e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fe faa0 	bl	8002714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	4619      	mov	r1, r3
 80041e6:	4610      	mov	r0, r2
 80041e8:	f000 ff8a 	bl	8005100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b082      	sub	sp, #8
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e041      	b.n	80042dc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d106      	bne.n	8004272 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7fe fb5d 	bl	800292c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2202      	movs	r2, #2
 8004276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3304      	adds	r3, #4
 8004282:	4619      	mov	r1, r3
 8004284:	4610      	mov	r0, r2
 8004286:	f000 ff3b 	bl	8005100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d109      	bne.n	8004308 <HAL_TIM_PWM_Start+0x24>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	bf14      	ite	ne
 8004300:	2301      	movne	r3, #1
 8004302:	2300      	moveq	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	e022      	b.n	800434e <HAL_TIM_PWM_Start+0x6a>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	2b04      	cmp	r3, #4
 800430c:	d109      	bne.n	8004322 <HAL_TIM_PWM_Start+0x3e>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b01      	cmp	r3, #1
 8004318:	bf14      	ite	ne
 800431a:	2301      	movne	r3, #1
 800431c:	2300      	moveq	r3, #0
 800431e:	b2db      	uxtb	r3, r3
 8004320:	e015      	b.n	800434e <HAL_TIM_PWM_Start+0x6a>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b08      	cmp	r3, #8
 8004326:	d109      	bne.n	800433c <HAL_TIM_PWM_Start+0x58>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b01      	cmp	r3, #1
 8004332:	bf14      	ite	ne
 8004334:	2301      	movne	r3, #1
 8004336:	2300      	moveq	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	e008      	b.n	800434e <HAL_TIM_PWM_Start+0x6a>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	bf14      	ite	ne
 8004348:	2301      	movne	r3, #1
 800434a:	2300      	moveq	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e07c      	b.n	8004450 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d104      	bne.n	8004366 <HAL_TIM_PWM_Start+0x82>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004364:	e013      	b.n	800438e <HAL_TIM_PWM_Start+0xaa>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b04      	cmp	r3, #4
 800436a:	d104      	bne.n	8004376 <HAL_TIM_PWM_Start+0x92>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004374:	e00b      	b.n	800438e <HAL_TIM_PWM_Start+0xaa>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b08      	cmp	r3, #8
 800437a:	d104      	bne.n	8004386 <HAL_TIM_PWM_Start+0xa2>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004384:	e003      	b.n	800438e <HAL_TIM_PWM_Start+0xaa>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2202      	movs	r2, #2
 800438a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2201      	movs	r2, #1
 8004394:	6839      	ldr	r1, [r7, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f001 fac6 	bl	8005928 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a2d      	ldr	r2, [pc, #180]	; (8004458 <HAL_TIM_PWM_Start+0x174>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d004      	beq.n	80043b0 <HAL_TIM_PWM_Start+0xcc>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a2c      	ldr	r2, [pc, #176]	; (800445c <HAL_TIM_PWM_Start+0x178>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d101      	bne.n	80043b4 <HAL_TIM_PWM_Start+0xd0>
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <HAL_TIM_PWM_Start+0xd2>
 80043b4:	2300      	movs	r3, #0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a22      	ldr	r2, [pc, #136]	; (8004458 <HAL_TIM_PWM_Start+0x174>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d022      	beq.n	800441a <HAL_TIM_PWM_Start+0x136>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043dc:	d01d      	beq.n	800441a <HAL_TIM_PWM_Start+0x136>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a1f      	ldr	r2, [pc, #124]	; (8004460 <HAL_TIM_PWM_Start+0x17c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d018      	beq.n	800441a <HAL_TIM_PWM_Start+0x136>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a1d      	ldr	r2, [pc, #116]	; (8004464 <HAL_TIM_PWM_Start+0x180>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d013      	beq.n	800441a <HAL_TIM_PWM_Start+0x136>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a1c      	ldr	r2, [pc, #112]	; (8004468 <HAL_TIM_PWM_Start+0x184>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d00e      	beq.n	800441a <HAL_TIM_PWM_Start+0x136>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a16      	ldr	r2, [pc, #88]	; (800445c <HAL_TIM_PWM_Start+0x178>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d009      	beq.n	800441a <HAL_TIM_PWM_Start+0x136>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a18      	ldr	r2, [pc, #96]	; (800446c <HAL_TIM_PWM_Start+0x188>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d004      	beq.n	800441a <HAL_TIM_PWM_Start+0x136>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a16      	ldr	r2, [pc, #88]	; (8004470 <HAL_TIM_PWM_Start+0x18c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d111      	bne.n	800443e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b06      	cmp	r3, #6
 800442a:	d010      	beq.n	800444e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443c:	e007      	b.n	800444e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 0201 	orr.w	r2, r2, #1
 800444c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40010000 	.word	0x40010000
 800445c:	40010400 	.word	0x40010400
 8004460:	40000400 	.word	0x40000400
 8004464:	40000800 	.word	0x40000800
 8004468:	40000c00 	.word	0x40000c00
 800446c:	40014000 	.word	0x40014000
 8004470:	40001800 	.word	0x40001800

08004474 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e041      	b.n	800450a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d106      	bne.n	80044a0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fe f9f6 	bl	800288c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3304      	adds	r3, #4
 80044b0:	4619      	mov	r1, r3
 80044b2:	4610      	mov	r0, r2
 80044b4:	f000 fe24 	bl	8005100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d104      	bne.n	8004532 <HAL_TIM_IC_Start_IT+0x1e>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800452e:	b2db      	uxtb	r3, r3
 8004530:	e013      	b.n	800455a <HAL_TIM_IC_Start_IT+0x46>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b04      	cmp	r3, #4
 8004536:	d104      	bne.n	8004542 <HAL_TIM_IC_Start_IT+0x2e>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800453e:	b2db      	uxtb	r3, r3
 8004540:	e00b      	b.n	800455a <HAL_TIM_IC_Start_IT+0x46>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b08      	cmp	r3, #8
 8004546:	d104      	bne.n	8004552 <HAL_TIM_IC_Start_IT+0x3e>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800454e:	b2db      	uxtb	r3, r3
 8004550:	e003      	b.n	800455a <HAL_TIM_IC_Start_IT+0x46>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004558:	b2db      	uxtb	r3, r3
 800455a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d104      	bne.n	800456c <HAL_TIM_IC_Start_IT+0x58>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004568:	b2db      	uxtb	r3, r3
 800456a:	e013      	b.n	8004594 <HAL_TIM_IC_Start_IT+0x80>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2b04      	cmp	r3, #4
 8004570:	d104      	bne.n	800457c <HAL_TIM_IC_Start_IT+0x68>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004578:	b2db      	uxtb	r3, r3
 800457a:	e00b      	b.n	8004594 <HAL_TIM_IC_Start_IT+0x80>
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2b08      	cmp	r3, #8
 8004580:	d104      	bne.n	800458c <HAL_TIM_IC_Start_IT+0x78>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004588:	b2db      	uxtb	r3, r3
 800458a:	e003      	b.n	8004594 <HAL_TIM_IC_Start_IT+0x80>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004592:	b2db      	uxtb	r3, r3
 8004594:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004596:	7bbb      	ldrb	r3, [r7, #14]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d102      	bne.n	80045a2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800459c:	7b7b      	ldrb	r3, [r7, #13]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d001      	beq.n	80045a6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e0cc      	b.n	8004740 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d104      	bne.n	80045b6 <HAL_TIM_IC_Start_IT+0xa2>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b4:	e013      	b.n	80045de <HAL_TIM_IC_Start_IT+0xca>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	d104      	bne.n	80045c6 <HAL_TIM_IC_Start_IT+0xb2>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045c4:	e00b      	b.n	80045de <HAL_TIM_IC_Start_IT+0xca>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d104      	bne.n	80045d6 <HAL_TIM_IC_Start_IT+0xc2>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045d4:	e003      	b.n	80045de <HAL_TIM_IC_Start_IT+0xca>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2202      	movs	r2, #2
 80045da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d104      	bne.n	80045ee <HAL_TIM_IC_Start_IT+0xda>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045ec:	e013      	b.n	8004616 <HAL_TIM_IC_Start_IT+0x102>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d104      	bne.n	80045fe <HAL_TIM_IC_Start_IT+0xea>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045fc:	e00b      	b.n	8004616 <HAL_TIM_IC_Start_IT+0x102>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b08      	cmp	r3, #8
 8004602:	d104      	bne.n	800460e <HAL_TIM_IC_Start_IT+0xfa>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800460c:	e003      	b.n	8004616 <HAL_TIM_IC_Start_IT+0x102>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2202      	movs	r2, #2
 8004612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b0c      	cmp	r3, #12
 800461a:	d841      	bhi.n	80046a0 <HAL_TIM_IC_Start_IT+0x18c>
 800461c:	a201      	add	r2, pc, #4	; (adr r2, 8004624 <HAL_TIM_IC_Start_IT+0x110>)
 800461e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004622:	bf00      	nop
 8004624:	08004659 	.word	0x08004659
 8004628:	080046a1 	.word	0x080046a1
 800462c:	080046a1 	.word	0x080046a1
 8004630:	080046a1 	.word	0x080046a1
 8004634:	0800466b 	.word	0x0800466b
 8004638:	080046a1 	.word	0x080046a1
 800463c:	080046a1 	.word	0x080046a1
 8004640:	080046a1 	.word	0x080046a1
 8004644:	0800467d 	.word	0x0800467d
 8004648:	080046a1 	.word	0x080046a1
 800464c:	080046a1 	.word	0x080046a1
 8004650:	080046a1 	.word	0x080046a1
 8004654:	0800468f 	.word	0x0800468f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0202 	orr.w	r2, r2, #2
 8004666:	60da      	str	r2, [r3, #12]
      break;
 8004668:	e01d      	b.n	80046a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0204 	orr.w	r2, r2, #4
 8004678:	60da      	str	r2, [r3, #12]
      break;
 800467a:	e014      	b.n	80046a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0208 	orr.w	r2, r2, #8
 800468a:	60da      	str	r2, [r3, #12]
      break;
 800468c:	e00b      	b.n	80046a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f042 0210 	orr.w	r2, r2, #16
 800469c:	60da      	str	r2, [r3, #12]
      break;
 800469e:	e002      	b.n	80046a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	73fb      	strb	r3, [r7, #15]
      break;
 80046a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80046a6:	7bfb      	ldrb	r3, [r7, #15]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d148      	bne.n	800473e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2201      	movs	r2, #1
 80046b2:	6839      	ldr	r1, [r7, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f001 f937 	bl	8005928 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a22      	ldr	r2, [pc, #136]	; (8004748 <HAL_TIM_IC_Start_IT+0x234>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d022      	beq.n	800470a <HAL_TIM_IC_Start_IT+0x1f6>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046cc:	d01d      	beq.n	800470a <HAL_TIM_IC_Start_IT+0x1f6>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a1e      	ldr	r2, [pc, #120]	; (800474c <HAL_TIM_IC_Start_IT+0x238>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d018      	beq.n	800470a <HAL_TIM_IC_Start_IT+0x1f6>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a1c      	ldr	r2, [pc, #112]	; (8004750 <HAL_TIM_IC_Start_IT+0x23c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d013      	beq.n	800470a <HAL_TIM_IC_Start_IT+0x1f6>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a1b      	ldr	r2, [pc, #108]	; (8004754 <HAL_TIM_IC_Start_IT+0x240>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d00e      	beq.n	800470a <HAL_TIM_IC_Start_IT+0x1f6>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a19      	ldr	r2, [pc, #100]	; (8004758 <HAL_TIM_IC_Start_IT+0x244>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d009      	beq.n	800470a <HAL_TIM_IC_Start_IT+0x1f6>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a18      	ldr	r2, [pc, #96]	; (800475c <HAL_TIM_IC_Start_IT+0x248>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d004      	beq.n	800470a <HAL_TIM_IC_Start_IT+0x1f6>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a16      	ldr	r2, [pc, #88]	; (8004760 <HAL_TIM_IC_Start_IT+0x24c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d111      	bne.n	800472e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b06      	cmp	r3, #6
 800471a:	d010      	beq.n	800473e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800472c:	e007      	b.n	800473e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f042 0201 	orr.w	r2, r2, #1
 800473c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800473e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40010000 	.word	0x40010000
 800474c:	40000400 	.word	0x40000400
 8004750:	40000800 	.word	0x40000800
 8004754:	40000c00 	.word	0x40000c00
 8004758:	40010400 	.word	0x40010400
 800475c:	40014000 	.word	0x40014000
 8004760:	40001800 	.word	0x40001800

08004764 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e097      	b.n	80048a8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d106      	bne.n	8004792 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7fd ffe3 	bl	8002758 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2202      	movs	r2, #2
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6812      	ldr	r2, [r2, #0]
 80047a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047a8:	f023 0307 	bic.w	r3, r3, #7
 80047ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3304      	adds	r3, #4
 80047b6:	4619      	mov	r1, r3
 80047b8:	4610      	mov	r0, r2
 80047ba:	f000 fca1 	bl	8005100 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e6:	f023 0303 	bic.w	r3, r3, #3
 80047ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	021b      	lsls	r3, r3, #8
 80047f6:	4313      	orrs	r3, r2
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004804:	f023 030c 	bic.w	r3, r3, #12
 8004808:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004810:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004814:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	4313      	orrs	r3, r2
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	011a      	lsls	r2, r3, #4
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	031b      	lsls	r3, r3, #12
 8004834:	4313      	orrs	r3, r2
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004842:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800484a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	4313      	orrs	r3, r2
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d110      	bne.n	8004902 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d102      	bne.n	80048ec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80048e6:	7b7b      	ldrb	r3, [r7, #13]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d001      	beq.n	80048f0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e069      	b.n	80049c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004900:	e031      	b.n	8004966 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b04      	cmp	r3, #4
 8004906:	d110      	bne.n	800492a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004908:	7bbb      	ldrb	r3, [r7, #14]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d102      	bne.n	8004914 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800490e:	7b3b      	ldrb	r3, [r7, #12]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d001      	beq.n	8004918 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e055      	b.n	80049c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004928:	e01d      	b.n	8004966 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800492a:	7bfb      	ldrb	r3, [r7, #15]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d108      	bne.n	8004942 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004930:	7bbb      	ldrb	r3, [r7, #14]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d105      	bne.n	8004942 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004936:	7b7b      	ldrb	r3, [r7, #13]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d102      	bne.n	8004942 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800493c:	7b3b      	ldrb	r3, [r7, #12]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d001      	beq.n	8004946 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e03e      	b.n	80049c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2202      	movs	r2, #2
 800494a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2202      	movs	r2, #2
 8004952:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2202      	movs	r2, #2
 800495a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2202      	movs	r2, #2
 8004962:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_TIM_Encoder_Start+0xc4>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2b04      	cmp	r3, #4
 8004970:	d008      	beq.n	8004984 <HAL_TIM_Encoder_Start+0xd4>
 8004972:	e00f      	b.n	8004994 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2201      	movs	r2, #1
 800497a:	2100      	movs	r1, #0
 800497c:	4618      	mov	r0, r3
 800497e:	f000 ffd3 	bl	8005928 <TIM_CCxChannelCmd>
      break;
 8004982:	e016      	b.n	80049b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2201      	movs	r2, #1
 800498a:	2104      	movs	r1, #4
 800498c:	4618      	mov	r0, r3
 800498e:	f000 ffcb 	bl	8005928 <TIM_CCxChannelCmd>
      break;
 8004992:	e00e      	b.n	80049b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2201      	movs	r2, #1
 800499a:	2100      	movs	r1, #0
 800499c:	4618      	mov	r0, r3
 800499e:	f000 ffc3 	bl	8005928 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2201      	movs	r2, #1
 80049a8:	2104      	movs	r1, #4
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 ffbc 	bl	8005928 <TIM_CCxChannelCmd>
      break;
 80049b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0201 	orr.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d122      	bne.n	8004a28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d11b      	bne.n	8004a28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0202 	mvn.w	r2, #2
 80049f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fc fa6a 	bl	8000ee8 <HAL_TIM_IC_CaptureCallback>
 8004a14:	e005      	b.n	8004a22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fb54 	bl	80050c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fb5b 	bl	80050d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	f003 0304 	and.w	r3, r3, #4
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d122      	bne.n	8004a7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d11b      	bne.n	8004a7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f06f 0204 	mvn.w	r2, #4
 8004a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2202      	movs	r2, #2
 8004a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7fc fa40 	bl	8000ee8 <HAL_TIM_IC_CaptureCallback>
 8004a68:	e005      	b.n	8004a76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fb2a 	bl	80050c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 fb31 	bl	80050d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d122      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f003 0308 	and.w	r3, r3, #8
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d11b      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f06f 0208 	mvn.w	r2, #8
 8004aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2204      	movs	r2, #4
 8004aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fc fa16 	bl	8000ee8 <HAL_TIM_IC_CaptureCallback>
 8004abc:	e005      	b.n	8004aca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 fb00 	bl	80050c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fb07 	bl	80050d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f003 0310 	and.w	r3, r3, #16
 8004ada:	2b10      	cmp	r3, #16
 8004adc:	d122      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f003 0310 	and.w	r3, r3, #16
 8004ae8:	2b10      	cmp	r3, #16
 8004aea:	d11b      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0210 	mvn.w	r2, #16
 8004af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2208      	movs	r2, #8
 8004afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7fc f9ec 	bl	8000ee8 <HAL_TIM_IC_CaptureCallback>
 8004b10:	e005      	b.n	8004b1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fad6 	bl	80050c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fadd 	bl	80050d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d10e      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d107      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f06f 0201 	mvn.w	r2, #1
 8004b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fab0 	bl	80050b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5a:	2b80      	cmp	r3, #128	; 0x80
 8004b5c:	d10e      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b68:	2b80      	cmp	r3, #128	; 0x80
 8004b6a:	d107      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 ffd4 	bl	8005b24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b86:	2b40      	cmp	r3, #64	; 0x40
 8004b88:	d10e      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b94:	2b40      	cmp	r3, #64	; 0x40
 8004b96:	d107      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 faa2 	bl	80050ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b20      	cmp	r3, #32
 8004bb4:	d10e      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f003 0320 	and.w	r3, r3, #32
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	d107      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0220 	mvn.w	r2, #32
 8004bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 ff9e 	bl	8005b10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bd4:	bf00      	nop
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <HAL_TIM_IC_ConfigChannel+0x1e>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e088      	b.n	8004d0c <HAL_TIM_IC_ConfigChannel+0x130>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d11b      	bne.n	8004c40 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6818      	ldr	r0, [r3, #0]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	6819      	ldr	r1, [r3, #0]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f000 fcc2 	bl	80055a0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	699a      	ldr	r2, [r3, #24]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 020c 	bic.w	r2, r2, #12
 8004c2a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6999      	ldr	r1, [r3, #24]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	689a      	ldr	r2, [r3, #8]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	619a      	str	r2, [r3, #24]
 8004c3e:	e060      	b.n	8004d02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	d11c      	bne.n	8004c80 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6818      	ldr	r0, [r3, #0]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	6819      	ldr	r1, [r3, #0]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f000 fd46 	bl	80056e6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	699a      	ldr	r2, [r3, #24]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004c68:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6999      	ldr	r1, [r3, #24]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	021a      	lsls	r2, r3, #8
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	619a      	str	r2, [r3, #24]
 8004c7e:	e040      	b.n	8004d02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	d11b      	bne.n	8004cbe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6818      	ldr	r0, [r3, #0]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	6819      	ldr	r1, [r3, #0]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f000 fd93 	bl	80057c0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 020c 	bic.w	r2, r2, #12
 8004ca8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69d9      	ldr	r1, [r3, #28]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	61da      	str	r2, [r3, #28]
 8004cbc:	e021      	b.n	8004d02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b0c      	cmp	r3, #12
 8004cc2:	d11c      	bne.n	8004cfe <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6818      	ldr	r0, [r3, #0]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	6819      	ldr	r1, [r3, #0]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f000 fdb0 	bl	8005838 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69da      	ldr	r2, [r3, #28]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ce6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	69d9      	ldr	r1, [r3, #28]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	021a      	lsls	r2, r3, #8
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	61da      	str	r2, [r3, #28]
 8004cfc:	e001      	b.n	8004d02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d101      	bne.n	8004d32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e0ae      	b.n	8004e90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b0c      	cmp	r3, #12
 8004d3e:	f200 809f 	bhi.w	8004e80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d42:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d48:	08004d7d 	.word	0x08004d7d
 8004d4c:	08004e81 	.word	0x08004e81
 8004d50:	08004e81 	.word	0x08004e81
 8004d54:	08004e81 	.word	0x08004e81
 8004d58:	08004dbd 	.word	0x08004dbd
 8004d5c:	08004e81 	.word	0x08004e81
 8004d60:	08004e81 	.word	0x08004e81
 8004d64:	08004e81 	.word	0x08004e81
 8004d68:	08004dff 	.word	0x08004dff
 8004d6c:	08004e81 	.word	0x08004e81
 8004d70:	08004e81 	.word	0x08004e81
 8004d74:	08004e81 	.word	0x08004e81
 8004d78:	08004e3f 	.word	0x08004e3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68b9      	ldr	r1, [r7, #8]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fa5c 	bl	8005240 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699a      	ldr	r2, [r3, #24]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0208 	orr.w	r2, r2, #8
 8004d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699a      	ldr	r2, [r3, #24]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0204 	bic.w	r2, r2, #4
 8004da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6999      	ldr	r1, [r3, #24]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	691a      	ldr	r2, [r3, #16]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	619a      	str	r2, [r3, #24]
      break;
 8004dba:	e064      	b.n	8004e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68b9      	ldr	r1, [r7, #8]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 faac 	bl	8005320 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699a      	ldr	r2, [r3, #24]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699a      	ldr	r2, [r3, #24]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6999      	ldr	r1, [r3, #24]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	021a      	lsls	r2, r3, #8
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	619a      	str	r2, [r3, #24]
      break;
 8004dfc:	e043      	b.n	8004e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68b9      	ldr	r1, [r7, #8]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fb01 	bl	800540c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69da      	ldr	r2, [r3, #28]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0208 	orr.w	r2, r2, #8
 8004e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0204 	bic.w	r2, r2, #4
 8004e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69d9      	ldr	r1, [r3, #28]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	61da      	str	r2, [r3, #28]
      break;
 8004e3c:	e023      	b.n	8004e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68b9      	ldr	r1, [r7, #8]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 fb55 	bl	80054f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69da      	ldr	r2, [r3, #28]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69da      	ldr	r2, [r3, #28]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69d9      	ldr	r1, [r3, #28]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	021a      	lsls	r2, r3, #8
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	61da      	str	r2, [r3, #28]
      break;
 8004e7e:	e002      	b.n	8004e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	75fb      	strb	r3, [r7, #23]
      break;
 8004e84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3718      	adds	r7, #24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d101      	bne.n	8004eb4 <HAL_TIM_ConfigClockSource+0x1c>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	e0b4      	b.n	800501e <HAL_TIM_ConfigClockSource+0x186>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eec:	d03e      	beq.n	8004f6c <HAL_TIM_ConfigClockSource+0xd4>
 8004eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ef2:	f200 8087 	bhi.w	8005004 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004efa:	f000 8086 	beq.w	800500a <HAL_TIM_ConfigClockSource+0x172>
 8004efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f02:	d87f      	bhi.n	8005004 <HAL_TIM_ConfigClockSource+0x16c>
 8004f04:	2b70      	cmp	r3, #112	; 0x70
 8004f06:	d01a      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0xa6>
 8004f08:	2b70      	cmp	r3, #112	; 0x70
 8004f0a:	d87b      	bhi.n	8005004 <HAL_TIM_ConfigClockSource+0x16c>
 8004f0c:	2b60      	cmp	r3, #96	; 0x60
 8004f0e:	d050      	beq.n	8004fb2 <HAL_TIM_ConfigClockSource+0x11a>
 8004f10:	2b60      	cmp	r3, #96	; 0x60
 8004f12:	d877      	bhi.n	8005004 <HAL_TIM_ConfigClockSource+0x16c>
 8004f14:	2b50      	cmp	r3, #80	; 0x50
 8004f16:	d03c      	beq.n	8004f92 <HAL_TIM_ConfigClockSource+0xfa>
 8004f18:	2b50      	cmp	r3, #80	; 0x50
 8004f1a:	d873      	bhi.n	8005004 <HAL_TIM_ConfigClockSource+0x16c>
 8004f1c:	2b40      	cmp	r3, #64	; 0x40
 8004f1e:	d058      	beq.n	8004fd2 <HAL_TIM_ConfigClockSource+0x13a>
 8004f20:	2b40      	cmp	r3, #64	; 0x40
 8004f22:	d86f      	bhi.n	8005004 <HAL_TIM_ConfigClockSource+0x16c>
 8004f24:	2b30      	cmp	r3, #48	; 0x30
 8004f26:	d064      	beq.n	8004ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f28:	2b30      	cmp	r3, #48	; 0x30
 8004f2a:	d86b      	bhi.n	8005004 <HAL_TIM_ConfigClockSource+0x16c>
 8004f2c:	2b20      	cmp	r3, #32
 8004f2e:	d060      	beq.n	8004ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f30:	2b20      	cmp	r3, #32
 8004f32:	d867      	bhi.n	8005004 <HAL_TIM_ConfigClockSource+0x16c>
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d05c      	beq.n	8004ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f38:	2b10      	cmp	r3, #16
 8004f3a:	d05a      	beq.n	8004ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f3c:	e062      	b.n	8005004 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6818      	ldr	r0, [r3, #0]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	6899      	ldr	r1, [r3, #8]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f000 fccb 	bl	80058e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	609a      	str	r2, [r3, #8]
      break;
 8004f6a:	e04f      	b.n	800500c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6818      	ldr	r0, [r3, #0]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	6899      	ldr	r1, [r3, #8]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f000 fcb4 	bl	80058e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f8e:	609a      	str	r2, [r3, #8]
      break;
 8004f90:	e03c      	b.n	800500c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6818      	ldr	r0, [r3, #0]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	6859      	ldr	r1, [r3, #4]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f000 fb72 	bl	8005688 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2150      	movs	r1, #80	; 0x50
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fc81 	bl	80058b2 <TIM_ITRx_SetConfig>
      break;
 8004fb0:	e02c      	b.n	800500c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6818      	ldr	r0, [r3, #0]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	6859      	ldr	r1, [r3, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f000 fbce 	bl	8005760 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2160      	movs	r1, #96	; 0x60
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 fc71 	bl	80058b2 <TIM_ITRx_SetConfig>
      break;
 8004fd0:	e01c      	b.n	800500c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6818      	ldr	r0, [r3, #0]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	6859      	ldr	r1, [r3, #4]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f000 fb52 	bl	8005688 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2140      	movs	r1, #64	; 0x40
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fc61 	bl	80058b2 <TIM_ITRx_SetConfig>
      break;
 8004ff0:	e00c      	b.n	800500c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	f000 fc58 	bl	80058b2 <TIM_ITRx_SetConfig>
      break;
 8005002:	e003      	b.n	800500c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	73fb      	strb	r3, [r7, #15]
      break;
 8005008:	e000      	b.n	800500c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800500a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800501c:	7bfb      	ldrb	r3, [r7, #15]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b0c      	cmp	r3, #12
 800503a:	d831      	bhi.n	80050a0 <HAL_TIM_ReadCapturedValue+0x78>
 800503c:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <HAL_TIM_ReadCapturedValue+0x1c>)
 800503e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005042:	bf00      	nop
 8005044:	08005079 	.word	0x08005079
 8005048:	080050a1 	.word	0x080050a1
 800504c:	080050a1 	.word	0x080050a1
 8005050:	080050a1 	.word	0x080050a1
 8005054:	08005083 	.word	0x08005083
 8005058:	080050a1 	.word	0x080050a1
 800505c:	080050a1 	.word	0x080050a1
 8005060:	080050a1 	.word	0x080050a1
 8005064:	0800508d 	.word	0x0800508d
 8005068:	080050a1 	.word	0x080050a1
 800506c:	080050a1 	.word	0x080050a1
 8005070:	080050a1 	.word	0x080050a1
 8005074:	08005097 	.word	0x08005097
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507e:	60fb      	str	r3, [r7, #12]

      break;
 8005080:	e00f      	b.n	80050a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005088:	60fb      	str	r3, [r7, #12]

      break;
 800508a:	e00a      	b.n	80050a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005092:	60fb      	str	r3, [r7, #12]

      break;
 8005094:	e005      	b.n	80050a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	60fb      	str	r3, [r7, #12]

      break;
 800509e:	e000      	b.n	80050a2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80050a0:	bf00      	nop
  }

  return tmpreg;
 80050a2:	68fb      	ldr	r3, [r7, #12]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a40      	ldr	r2, [pc, #256]	; (8005214 <TIM_Base_SetConfig+0x114>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d013      	beq.n	8005140 <TIM_Base_SetConfig+0x40>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511e:	d00f      	beq.n	8005140 <TIM_Base_SetConfig+0x40>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a3d      	ldr	r2, [pc, #244]	; (8005218 <TIM_Base_SetConfig+0x118>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00b      	beq.n	8005140 <TIM_Base_SetConfig+0x40>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a3c      	ldr	r2, [pc, #240]	; (800521c <TIM_Base_SetConfig+0x11c>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d007      	beq.n	8005140 <TIM_Base_SetConfig+0x40>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a3b      	ldr	r2, [pc, #236]	; (8005220 <TIM_Base_SetConfig+0x120>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d003      	beq.n	8005140 <TIM_Base_SetConfig+0x40>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a3a      	ldr	r2, [pc, #232]	; (8005224 <TIM_Base_SetConfig+0x124>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d108      	bne.n	8005152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	4313      	orrs	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a2f      	ldr	r2, [pc, #188]	; (8005214 <TIM_Base_SetConfig+0x114>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d02b      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005160:	d027      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a2c      	ldr	r2, [pc, #176]	; (8005218 <TIM_Base_SetConfig+0x118>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d023      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a2b      	ldr	r2, [pc, #172]	; (800521c <TIM_Base_SetConfig+0x11c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d01f      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a2a      	ldr	r2, [pc, #168]	; (8005220 <TIM_Base_SetConfig+0x120>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d01b      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a29      	ldr	r2, [pc, #164]	; (8005224 <TIM_Base_SetConfig+0x124>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d017      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a28      	ldr	r2, [pc, #160]	; (8005228 <TIM_Base_SetConfig+0x128>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d013      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a27      	ldr	r2, [pc, #156]	; (800522c <TIM_Base_SetConfig+0x12c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00f      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a26      	ldr	r2, [pc, #152]	; (8005230 <TIM_Base_SetConfig+0x130>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00b      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a25      	ldr	r2, [pc, #148]	; (8005234 <TIM_Base_SetConfig+0x134>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d007      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a24      	ldr	r2, [pc, #144]	; (8005238 <TIM_Base_SetConfig+0x138>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d003      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a23      	ldr	r2, [pc, #140]	; (800523c <TIM_Base_SetConfig+0x13c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d108      	bne.n	80051c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a0a      	ldr	r2, [pc, #40]	; (8005214 <TIM_Base_SetConfig+0x114>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d003      	beq.n	80051f8 <TIM_Base_SetConfig+0xf8>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a0c      	ldr	r2, [pc, #48]	; (8005224 <TIM_Base_SetConfig+0x124>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d103      	bne.n	8005200 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	615a      	str	r2, [r3, #20]
}
 8005206:	bf00      	nop
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40010000 	.word	0x40010000
 8005218:	40000400 	.word	0x40000400
 800521c:	40000800 	.word	0x40000800
 8005220:	40000c00 	.word	0x40000c00
 8005224:	40010400 	.word	0x40010400
 8005228:	40014000 	.word	0x40014000
 800522c:	40014400 	.word	0x40014400
 8005230:	40014800 	.word	0x40014800
 8005234:	40001800 	.word	0x40001800
 8005238:	40001c00 	.word	0x40001c00
 800523c:	40002000 	.word	0x40002000

08005240 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	f023 0201 	bic.w	r2, r3, #1
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0303 	bic.w	r3, r3, #3
 8005276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f023 0302 	bic.w	r3, r3, #2
 8005288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a20      	ldr	r2, [pc, #128]	; (8005318 <TIM_OC1_SetConfig+0xd8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d003      	beq.n	80052a4 <TIM_OC1_SetConfig+0x64>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a1f      	ldr	r2, [pc, #124]	; (800531c <TIM_OC1_SetConfig+0xdc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d10c      	bne.n	80052be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f023 0308 	bic.w	r3, r3, #8
 80052aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f023 0304 	bic.w	r3, r3, #4
 80052bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a15      	ldr	r2, [pc, #84]	; (8005318 <TIM_OC1_SetConfig+0xd8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d003      	beq.n	80052ce <TIM_OC1_SetConfig+0x8e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a14      	ldr	r2, [pc, #80]	; (800531c <TIM_OC1_SetConfig+0xdc>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d111      	bne.n	80052f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	621a      	str	r2, [r3, #32]
}
 800530c:	bf00      	nop
 800530e:	371c      	adds	r7, #28
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	40010000 	.word	0x40010000
 800531c:	40010400 	.word	0x40010400

08005320 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	f023 0210 	bic.w	r2, r3, #16
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800534e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	021b      	lsls	r3, r3, #8
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	4313      	orrs	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f023 0320 	bic.w	r3, r3, #32
 800536a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a22      	ldr	r2, [pc, #136]	; (8005404 <TIM_OC2_SetConfig+0xe4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d003      	beq.n	8005388 <TIM_OC2_SetConfig+0x68>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a21      	ldr	r2, [pc, #132]	; (8005408 <TIM_OC2_SetConfig+0xe8>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d10d      	bne.n	80053a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800538e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	4313      	orrs	r3, r2
 800539a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a17      	ldr	r2, [pc, #92]	; (8005404 <TIM_OC2_SetConfig+0xe4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d003      	beq.n	80053b4 <TIM_OC2_SetConfig+0x94>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a16      	ldr	r2, [pc, #88]	; (8005408 <TIM_OC2_SetConfig+0xe8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d113      	bne.n	80053dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	4313      	orrs	r3, r2
 80053da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	621a      	str	r2, [r3, #32]
}
 80053f6:	bf00      	nop
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40010000 	.word	0x40010000
 8005408:	40010400 	.word	0x40010400

0800540c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0303 	bic.w	r3, r3, #3
 8005442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	021b      	lsls	r3, r3, #8
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	4313      	orrs	r3, r2
 8005460:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a21      	ldr	r2, [pc, #132]	; (80054ec <TIM_OC3_SetConfig+0xe0>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d003      	beq.n	8005472 <TIM_OC3_SetConfig+0x66>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a20      	ldr	r2, [pc, #128]	; (80054f0 <TIM_OC3_SetConfig+0xe4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d10d      	bne.n	800548e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005478:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	021b      	lsls	r3, r3, #8
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	4313      	orrs	r3, r2
 8005484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800548c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a16      	ldr	r2, [pc, #88]	; (80054ec <TIM_OC3_SetConfig+0xe0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d003      	beq.n	800549e <TIM_OC3_SetConfig+0x92>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a15      	ldr	r2, [pc, #84]	; (80054f0 <TIM_OC3_SetConfig+0xe4>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d113      	bne.n	80054c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	621a      	str	r2, [r3, #32]
}
 80054e0:	bf00      	nop
 80054e2:	371c      	adds	r7, #28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	40010000 	.word	0x40010000
 80054f0:	40010400 	.word	0x40010400

080054f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800552a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	021b      	lsls	r3, r3, #8
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800553e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	031b      	lsls	r3, r3, #12
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a12      	ldr	r2, [pc, #72]	; (8005598 <TIM_OC4_SetConfig+0xa4>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d003      	beq.n	800555c <TIM_OC4_SetConfig+0x68>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a11      	ldr	r2, [pc, #68]	; (800559c <TIM_OC4_SetConfig+0xa8>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d109      	bne.n	8005570 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005562:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	019b      	lsls	r3, r3, #6
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	4313      	orrs	r3, r2
 800556e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	621a      	str	r2, [r3, #32]
}
 800558a:	bf00      	nop
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	40010000 	.word	0x40010000
 800559c:	40010400 	.word	0x40010400

080055a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	f023 0201 	bic.w	r2, r3, #1
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4a28      	ldr	r2, [pc, #160]	; (800566c <TIM_TI1_SetConfig+0xcc>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d01b      	beq.n	8005606 <TIM_TI1_SetConfig+0x66>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d4:	d017      	beq.n	8005606 <TIM_TI1_SetConfig+0x66>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4a25      	ldr	r2, [pc, #148]	; (8005670 <TIM_TI1_SetConfig+0xd0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d013      	beq.n	8005606 <TIM_TI1_SetConfig+0x66>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4a24      	ldr	r2, [pc, #144]	; (8005674 <TIM_TI1_SetConfig+0xd4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00f      	beq.n	8005606 <TIM_TI1_SetConfig+0x66>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	4a23      	ldr	r2, [pc, #140]	; (8005678 <TIM_TI1_SetConfig+0xd8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00b      	beq.n	8005606 <TIM_TI1_SetConfig+0x66>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4a22      	ldr	r2, [pc, #136]	; (800567c <TIM_TI1_SetConfig+0xdc>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d007      	beq.n	8005606 <TIM_TI1_SetConfig+0x66>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	4a21      	ldr	r2, [pc, #132]	; (8005680 <TIM_TI1_SetConfig+0xe0>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d003      	beq.n	8005606 <TIM_TI1_SetConfig+0x66>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4a20      	ldr	r2, [pc, #128]	; (8005684 <TIM_TI1_SetConfig+0xe4>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d101      	bne.n	800560a <TIM_TI1_SetConfig+0x6a>
 8005606:	2301      	movs	r3, #1
 8005608:	e000      	b.n	800560c <TIM_TI1_SetConfig+0x6c>
 800560a:	2300      	movs	r3, #0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d008      	beq.n	8005622 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f023 0303 	bic.w	r3, r3, #3
 8005616:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	e003      	b.n	800562a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f043 0301 	orr.w	r3, r3, #1
 8005628:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005630:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	b2db      	uxtb	r3, r3
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	4313      	orrs	r3, r2
 800563c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f023 030a 	bic.w	r3, r3, #10
 8005644:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f003 030a 	and.w	r3, r3, #10
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	4313      	orrs	r3, r2
 8005650:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	621a      	str	r2, [r3, #32]
}
 800565e:	bf00      	nop
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	40010000 	.word	0x40010000
 8005670:	40000400 	.word	0x40000400
 8005674:	40000800 	.word	0x40000800
 8005678:	40000c00 	.word	0x40000c00
 800567c:	40010400 	.word	0x40010400
 8005680:	40014000 	.word	0x40014000
 8005684:	40001800 	.word	0x40001800

08005688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	f023 0201 	bic.w	r2, r3, #1
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f023 030a 	bic.w	r3, r3, #10
 80056c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	621a      	str	r2, [r3, #32]
}
 80056da:	bf00      	nop
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b087      	sub	sp, #28
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	60f8      	str	r0, [r7, #12]
 80056ee:	60b9      	str	r1, [r7, #8]
 80056f0:	607a      	str	r2, [r7, #4]
 80056f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	f023 0210 	bic.w	r2, r3, #16
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005712:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	021b      	lsls	r3, r3, #8
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	4313      	orrs	r3, r2
 800571c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005724:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	031b      	lsls	r3, r3, #12
 800572a:	b29b      	uxth	r3, r3
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	4313      	orrs	r3, r2
 8005730:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005738:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	621a      	str	r2, [r3, #32]
}
 8005754:	bf00      	nop
 8005756:	371c      	adds	r7, #28
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	f023 0210 	bic.w	r2, r3, #16
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800578a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	031b      	lsls	r3, r3, #12
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	4313      	orrs	r3, r2
 8005794:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800579c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	621a      	str	r2, [r3, #32]
}
 80057b4:	bf00      	nop
 80057b6:	371c      	adds	r7, #28
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f023 0303 	bic.w	r3, r3, #3
 80057ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	b2db      	uxtb	r3, r3
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	4313      	orrs	r3, r2
 8005808:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005810:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	021b      	lsls	r3, r3, #8
 8005816:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	621a      	str	r2, [r3, #32]
}
 800582c:	bf00      	nop
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005864:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	021b      	lsls	r3, r3, #8
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	4313      	orrs	r3, r2
 800586e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005876:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	031b      	lsls	r3, r3, #12
 800587c:	b29b      	uxth	r3, r3
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	4313      	orrs	r3, r2
 8005882:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800588a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	031b      	lsls	r3, r3, #12
 8005890:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	621a      	str	r2, [r3, #32]
}
 80058a6:	bf00      	nop
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b085      	sub	sp, #20
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f043 0307 	orr.w	r3, r3, #7
 80058d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	609a      	str	r2, [r3, #8]
}
 80058dc:	bf00      	nop
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005902:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	021a      	lsls	r2, r3, #8
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	431a      	orrs	r2, r3
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4313      	orrs	r3, r2
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	4313      	orrs	r3, r2
 8005914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	609a      	str	r2, [r3, #8]
}
 800591c:	bf00      	nop
 800591e:	371c      	adds	r7, #28
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f003 031f 	and.w	r3, r3, #31
 800593a:	2201      	movs	r2, #1
 800593c:	fa02 f303 	lsl.w	r3, r2, r3
 8005940:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6a1a      	ldr	r2, [r3, #32]
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	43db      	mvns	r3, r3
 800594a:	401a      	ands	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a1a      	ldr	r2, [r3, #32]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f003 031f 	and.w	r3, r3, #31
 800595a:	6879      	ldr	r1, [r7, #4]
 800595c:	fa01 f303 	lsl.w	r3, r1, r3
 8005960:	431a      	orrs	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	621a      	str	r2, [r3, #32]
}
 8005966:	bf00      	nop
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
	...

08005974 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005984:	2b01      	cmp	r3, #1
 8005986:	d101      	bne.n	800598c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005988:	2302      	movs	r3, #2
 800598a:	e05a      	b.n	8005a42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a21      	ldr	r2, [pc, #132]	; (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d022      	beq.n	8005a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d8:	d01d      	beq.n	8005a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a1d      	ldr	r2, [pc, #116]	; (8005a54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d018      	beq.n	8005a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a1b      	ldr	r2, [pc, #108]	; (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d013      	beq.n	8005a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a1a      	ldr	r2, [pc, #104]	; (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d00e      	beq.n	8005a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a18      	ldr	r2, [pc, #96]	; (8005a60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d009      	beq.n	8005a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a17      	ldr	r2, [pc, #92]	; (8005a64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d004      	beq.n	8005a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a15      	ldr	r2, [pc, #84]	; (8005a68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d10c      	bne.n	8005a30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40010000 	.word	0x40010000
 8005a54:	40000400 	.word	0x40000400
 8005a58:	40000800 	.word	0x40000800
 8005a5c:	40000c00 	.word	0x40000c00
 8005a60:	40010400 	.word	0x40010400
 8005a64:	40014000 	.word	0x40014000
 8005a68:	40001800 	.word	0x40001800

08005a6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e03d      	b.n	8005b04 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e03f      	b.n	8005bca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d106      	bne.n	8005b64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7fc ff66 	bl	8002a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2224      	movs	r2, #36	; 0x24
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fe1f 	bl	80067c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	691a      	ldr	r2, [r3, #16]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	695a      	ldr	r2, [r3, #20]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ba0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68da      	ldr	r2, [r3, #12]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b08a      	sub	sp, #40	; 0x28
 8005bd6:	af02      	add	r7, sp, #8
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	603b      	str	r3, [r7, #0]
 8005bde:	4613      	mov	r3, r2
 8005be0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b20      	cmp	r3, #32
 8005bf0:	d17c      	bne.n	8005cec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <HAL_UART_Transmit+0x2c>
 8005bf8:	88fb      	ldrh	r3, [r7, #6]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e075      	b.n	8005cee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <HAL_UART_Transmit+0x3e>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e06e      	b.n	8005cee <HAL_UART_Transmit+0x11c>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2221      	movs	r2, #33	; 0x21
 8005c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c26:	f7fd f863 	bl	8002cf0 <HAL_GetTick>
 8005c2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	88fa      	ldrh	r2, [r7, #6]
 8005c30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	88fa      	ldrh	r2, [r7, #6]
 8005c36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c40:	d108      	bne.n	8005c54 <HAL_UART_Transmit+0x82>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d104      	bne.n	8005c54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	61bb      	str	r3, [r7, #24]
 8005c52:	e003      	b.n	8005c5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005c64:	e02a      	b.n	8005cbc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	2180      	movs	r1, #128	; 0x80
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 fb63 	bl	800633c <UART_WaitOnFlagUntilTimeout>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e036      	b.n	8005cee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10b      	bne.n	8005c9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	3302      	adds	r3, #2
 8005c9a:	61bb      	str	r3, [r7, #24]
 8005c9c:	e007      	b.n	8005cae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	781a      	ldrb	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	3301      	adds	r3, #1
 8005cac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1cf      	bne.n	8005c66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2140      	movs	r1, #64	; 0x40
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 fb33 	bl	800633c <UART_WaitOnFlagUntilTimeout>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e006      	b.n	8005cee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	e000      	b.n	8005cee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005cec:	2302      	movs	r3, #2
  }
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3720      	adds	r7, #32
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b085      	sub	sp, #20
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	60f8      	str	r0, [r7, #12]
 8005cfe:	60b9      	str	r1, [r7, #8]
 8005d00:	4613      	mov	r3, r2
 8005d02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b20      	cmp	r3, #32
 8005d0e:	d130      	bne.n	8005d72 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <HAL_UART_Transmit_IT+0x26>
 8005d16:	88fb      	ldrh	r3, [r7, #6]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e029      	b.n	8005d74 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d101      	bne.n	8005d2e <HAL_UART_Transmit_IT+0x38>
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	e022      	b.n	8005d74 <HAL_UART_Transmit_IT+0x7e>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	88fa      	ldrh	r2, [r7, #6]
 8005d40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	88fa      	ldrh	r2, [r7, #6]
 8005d46:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2221      	movs	r2, #33	; 0x21
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d6c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	e000      	b.n	8005d74 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005d72:	2302      	movs	r3, #2
  }
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d11d      	bne.n	8005dd6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d002      	beq.n	8005da6 <HAL_UART_Receive_IT+0x26>
 8005da0:	88fb      	ldrh	r3, [r7, #6]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e016      	b.n	8005dd8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d101      	bne.n	8005db8 <HAL_UART_Receive_IT+0x38>
 8005db4:	2302      	movs	r3, #2
 8005db6:	e00f      	b.n	8005dd8 <HAL_UART_Receive_IT+0x58>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005dc6:	88fb      	ldrh	r3, [r7, #6]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	68b9      	ldr	r1, [r7, #8]
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 fb23 	bl	8006418 <UART_Start_Receive_IT>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	e000      	b.n	8005dd8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005dd6:	2302      	movs	r3, #2
  }
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b0ba      	sub	sp, #232	; 0xe8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005e06:	2300      	movs	r3, #0
 8005e08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e16:	f003 030f 	and.w	r3, r3, #15
 8005e1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005e1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10f      	bne.n	8005e46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e2a:	f003 0320 	and.w	r3, r3, #32
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d009      	beq.n	8005e46 <HAL_UART_IRQHandler+0x66>
 8005e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e36:	f003 0320 	and.w	r3, r3, #32
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 fc03 	bl	800664a <UART_Receive_IT>
      return;
 8005e44:	e256      	b.n	80062f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 80de 	beq.w	800600c <HAL_UART_IRQHandler+0x22c>
 8005e50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d106      	bne.n	8005e6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e60:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f000 80d1 	beq.w	800600c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00b      	beq.n	8005e8e <HAL_UART_IRQHandler+0xae>
 8005e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d005      	beq.n	8005e8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	f043 0201 	orr.w	r2, r3, #1
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e92:	f003 0304 	and.w	r3, r3, #4
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00b      	beq.n	8005eb2 <HAL_UART_IRQHandler+0xd2>
 8005e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d005      	beq.n	8005eb2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	f043 0202 	orr.w	r2, r3, #2
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00b      	beq.n	8005ed6 <HAL_UART_IRQHandler+0xf6>
 8005ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	f043 0204 	orr.w	r2, r3, #4
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eda:	f003 0308 	and.w	r3, r3, #8
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d011      	beq.n	8005f06 <HAL_UART_IRQHandler+0x126>
 8005ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d105      	bne.n	8005efa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d005      	beq.n	8005f06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	f043 0208 	orr.w	r2, r3, #8
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 81ed 	beq.w	80062ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f14:	f003 0320 	and.w	r3, r3, #32
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d008      	beq.n	8005f2e <HAL_UART_IRQHandler+0x14e>
 8005f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f20:	f003 0320 	and.w	r3, r3, #32
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fb8e 	bl	800664a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f38:	2b40      	cmp	r3, #64	; 0x40
 8005f3a:	bf0c      	ite	eq
 8005f3c:	2301      	moveq	r3, #1
 8005f3e:	2300      	movne	r3, #0
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	f003 0308 	and.w	r3, r3, #8
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d103      	bne.n	8005f5a <HAL_UART_IRQHandler+0x17a>
 8005f52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d04f      	beq.n	8005ffa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fa96 	bl	800648c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6a:	2b40      	cmp	r3, #64	; 0x40
 8005f6c:	d141      	bne.n	8005ff2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3314      	adds	r3, #20
 8005f74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f7c:	e853 3f00 	ldrex	r3, [r3]
 8005f80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3314      	adds	r3, #20
 8005f96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005fa6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005faa:	e841 2300 	strex	r3, r2, [r1]
 8005fae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005fb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1d9      	bne.n	8005f6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d013      	beq.n	8005fea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc6:	4a7d      	ldr	r2, [pc, #500]	; (80061bc <HAL_UART_IRQHandler+0x3dc>)
 8005fc8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fd faa1 	bl	8003516 <HAL_DMA_Abort_IT>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d016      	beq.n	8006008 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe8:	e00e      	b.n	8006008 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f990 	bl	8006310 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff0:	e00a      	b.n	8006008 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f98c 	bl	8006310 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff8:	e006      	b.n	8006008 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f988 	bl	8006310 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006006:	e170      	b.n	80062ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006008:	bf00      	nop
    return;
 800600a:	e16e      	b.n	80062ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006010:	2b01      	cmp	r3, #1
 8006012:	f040 814a 	bne.w	80062aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800601a:	f003 0310 	and.w	r3, r3, #16
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 8143 	beq.w	80062aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006028:	f003 0310 	and.w	r3, r3, #16
 800602c:	2b00      	cmp	r3, #0
 800602e:	f000 813c 	beq.w	80062aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006032:	2300      	movs	r3, #0
 8006034:	60bb      	str	r3, [r7, #8]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	60bb      	str	r3, [r7, #8]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	60bb      	str	r3, [r7, #8]
 8006046:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006052:	2b40      	cmp	r3, #64	; 0x40
 8006054:	f040 80b4 	bne.w	80061c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006064:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 8140 	beq.w	80062ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006076:	429a      	cmp	r2, r3
 8006078:	f080 8139 	bcs.w	80062ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006082:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800608e:	f000 8088 	beq.w	80061a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	330c      	adds	r3, #12
 8006098:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060a0:	e853 3f00 	ldrex	r3, [r3]
 80060a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	330c      	adds	r3, #12
 80060ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80060be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060ce:	e841 2300 	strex	r3, r2, [r1]
 80060d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1d9      	bne.n	8006092 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3314      	adds	r3, #20
 80060e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060f0:	f023 0301 	bic.w	r3, r3, #1
 80060f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	3314      	adds	r3, #20
 80060fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006102:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006106:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800610a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800610e:	e841 2300 	strex	r3, r2, [r1]
 8006112:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006114:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1e1      	bne.n	80060de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3314      	adds	r3, #20
 8006120:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006122:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006124:	e853 3f00 	ldrex	r3, [r3]
 8006128:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800612a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800612c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006130:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3314      	adds	r3, #20
 800613a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800613e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006140:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006144:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006146:	e841 2300 	strex	r3, r2, [r1]
 800614a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800614c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1e3      	bne.n	800611a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2220      	movs	r2, #32
 8006156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	330c      	adds	r3, #12
 8006166:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800616a:	e853 3f00 	ldrex	r3, [r3]
 800616e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006172:	f023 0310 	bic.w	r3, r3, #16
 8006176:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	330c      	adds	r3, #12
 8006180:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006184:	65ba      	str	r2, [r7, #88]	; 0x58
 8006186:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006188:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800618a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800618c:	e841 2300 	strex	r3, r2, [r1]
 8006190:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1e3      	bne.n	8006160 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619c:	4618      	mov	r0, r3
 800619e:	f7fd f94a 	bl	8003436 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	4619      	mov	r1, r3
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f8b6 	bl	8006324 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061b8:	e099      	b.n	80062ee <HAL_UART_IRQHandler+0x50e>
 80061ba:	bf00      	nop
 80061bc:	08006553 	.word	0x08006553
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f000 808b 	beq.w	80062f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80061dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 8086 	beq.w	80062f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	330c      	adds	r3, #12
 80061ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f0:	e853 3f00 	ldrex	r3, [r3]
 80061f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	330c      	adds	r3, #12
 8006206:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800620a:	647a      	str	r2, [r7, #68]	; 0x44
 800620c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006210:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006212:	e841 2300 	strex	r3, r2, [r1]
 8006216:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1e3      	bne.n	80061e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3314      	adds	r3, #20
 8006224:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	e853 3f00 	ldrex	r3, [r3]
 800622c:	623b      	str	r3, [r7, #32]
   return(result);
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	f023 0301 	bic.w	r3, r3, #1
 8006234:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3314      	adds	r3, #20
 800623e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006242:	633a      	str	r2, [r7, #48]	; 0x30
 8006244:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006246:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800624a:	e841 2300 	strex	r3, r2, [r1]
 800624e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1e3      	bne.n	800621e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2220      	movs	r2, #32
 800625a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	330c      	adds	r3, #12
 800626a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	e853 3f00 	ldrex	r3, [r3]
 8006272:	60fb      	str	r3, [r7, #12]
   return(result);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0310 	bic.w	r3, r3, #16
 800627a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	330c      	adds	r3, #12
 8006284:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006288:	61fa      	str	r2, [r7, #28]
 800628a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628c:	69b9      	ldr	r1, [r7, #24]
 800628e:	69fa      	ldr	r2, [r7, #28]
 8006290:	e841 2300 	strex	r3, r2, [r1]
 8006294:	617b      	str	r3, [r7, #20]
   return(result);
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1e3      	bne.n	8006264 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800629c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062a0:	4619      	mov	r1, r3
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f83e 	bl	8006324 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062a8:	e023      	b.n	80062f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d009      	beq.n	80062ca <HAL_UART_IRQHandler+0x4ea>
 80062b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f959 	bl	800657a <UART_Transmit_IT>
    return;
 80062c8:	e014      	b.n	80062f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00e      	beq.n	80062f4 <HAL_UART_IRQHandler+0x514>
 80062d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d008      	beq.n	80062f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f999 	bl	800661a <UART_EndTransmit_IT>
    return;
 80062e8:	e004      	b.n	80062f4 <HAL_UART_IRQHandler+0x514>
    return;
 80062ea:	bf00      	nop
 80062ec:	e002      	b.n	80062f4 <HAL_UART_IRQHandler+0x514>
      return;
 80062ee:	bf00      	nop
 80062f0:	e000      	b.n	80062f4 <HAL_UART_IRQHandler+0x514>
      return;
 80062f2:	bf00      	nop
  }
}
 80062f4:	37e8      	adds	r7, #232	; 0xe8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop

080062fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	460b      	mov	r3, r1
 800632e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b090      	sub	sp, #64	; 0x40
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	603b      	str	r3, [r7, #0]
 8006348:	4613      	mov	r3, r2
 800634a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800634c:	e050      	b.n	80063f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800634e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006354:	d04c      	beq.n	80063f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006358:	2b00      	cmp	r3, #0
 800635a:	d007      	beq.n	800636c <UART_WaitOnFlagUntilTimeout+0x30>
 800635c:	f7fc fcc8 	bl	8002cf0 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006368:	429a      	cmp	r2, r3
 800636a:	d241      	bcs.n	80063f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	330c      	adds	r3, #12
 8006372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006376:	e853 3f00 	ldrex	r3, [r3]
 800637a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	330c      	adds	r3, #12
 800638a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800638c:	637a      	str	r2, [r7, #52]	; 0x34
 800638e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006394:	e841 2300 	strex	r3, r2, [r1]
 8006398:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800639a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e5      	bne.n	800636c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3314      	adds	r3, #20
 80063a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	e853 3f00 	ldrex	r3, [r3]
 80063ae:	613b      	str	r3, [r7, #16]
   return(result);
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	f023 0301 	bic.w	r3, r3, #1
 80063b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3314      	adds	r3, #20
 80063be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063c0:	623a      	str	r2, [r7, #32]
 80063c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c4:	69f9      	ldr	r1, [r7, #28]
 80063c6:	6a3a      	ldr	r2, [r7, #32]
 80063c8:	e841 2300 	strex	r3, r2, [r1]
 80063cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1e5      	bne.n	80063a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2220      	movs	r2, #32
 80063e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e00f      	b.n	8006410 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	4013      	ands	r3, r2
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	bf0c      	ite	eq
 8006400:	2301      	moveq	r3, #1
 8006402:	2300      	movne	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	461a      	mov	r2, r3
 8006408:	79fb      	ldrb	r3, [r7, #7]
 800640a:	429a      	cmp	r2, r3
 800640c:	d09f      	beq.n	800634e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3740      	adds	r7, #64	; 0x40
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	4613      	mov	r3, r2
 8006424:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	88fa      	ldrh	r2, [r7, #6]
 8006430:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	88fa      	ldrh	r2, [r7, #6]
 8006436:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2222      	movs	r2, #34	; 0x22
 8006442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68da      	ldr	r2, [r3, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800645c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	695a      	ldr	r2, [r3, #20]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f042 0201 	orr.w	r2, r2, #1
 800646c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f042 0220 	orr.w	r2, r2, #32
 800647c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800648c:	b480      	push	{r7}
 800648e:	b095      	sub	sp, #84	; 0x54
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	330c      	adds	r3, #12
 800649a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649e:	e853 3f00 	ldrex	r3, [r3]
 80064a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	330c      	adds	r3, #12
 80064b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064b4:	643a      	str	r2, [r7, #64]	; 0x40
 80064b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064bc:	e841 2300 	strex	r3, r2, [r1]
 80064c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1e5      	bne.n	8006494 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3314      	adds	r3, #20
 80064ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	e853 3f00 	ldrex	r3, [r3]
 80064d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	f023 0301 	bic.w	r3, r3, #1
 80064de:	64bb      	str	r3, [r7, #72]	; 0x48
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3314      	adds	r3, #20
 80064e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064f0:	e841 2300 	strex	r3, r2, [r1]
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1e5      	bne.n	80064c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006500:	2b01      	cmp	r3, #1
 8006502:	d119      	bne.n	8006538 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	330c      	adds	r3, #12
 800650a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	e853 3f00 	ldrex	r3, [r3]
 8006512:	60bb      	str	r3, [r7, #8]
   return(result);
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f023 0310 	bic.w	r3, r3, #16
 800651a:	647b      	str	r3, [r7, #68]	; 0x44
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	330c      	adds	r3, #12
 8006522:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006524:	61ba      	str	r2, [r7, #24]
 8006526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006528:	6979      	ldr	r1, [r7, #20]
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	e841 2300 	strex	r3, r2, [r1]
 8006530:	613b      	str	r3, [r7, #16]
   return(result);
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1e5      	bne.n	8006504 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2220      	movs	r2, #32
 800653c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006546:	bf00      	nop
 8006548:	3754      	adds	r7, #84	; 0x54
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b084      	sub	sp, #16
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f7ff fecf 	bl	8006310 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006572:	bf00      	nop
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800657a:	b480      	push	{r7}
 800657c:	b085      	sub	sp, #20
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b21      	cmp	r3, #33	; 0x21
 800658c:	d13e      	bne.n	800660c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006596:	d114      	bne.n	80065c2 <UART_Transmit_IT+0x48>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d110      	bne.n	80065c2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	1c9a      	adds	r2, r3, #2
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	621a      	str	r2, [r3, #32]
 80065c0:	e008      	b.n	80065d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	1c59      	adds	r1, r3, #1
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	6211      	str	r1, [r2, #32]
 80065cc:	781a      	ldrb	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065d8:	b29b      	uxth	r3, r3
 80065da:	3b01      	subs	r3, #1
 80065dc:	b29b      	uxth	r3, r3
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	4619      	mov	r1, r3
 80065e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10f      	bne.n	8006608 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68da      	ldr	r2, [r3, #12]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68da      	ldr	r2, [r3, #12]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006606:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	e000      	b.n	800660e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800660c:	2302      	movs	r3, #2
  }
}
 800660e:	4618      	mov	r0, r3
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b082      	sub	sp, #8
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006630:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2220      	movs	r2, #32
 8006636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7ff fe5e 	bl	80062fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b08c      	sub	sp, #48	; 0x30
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b22      	cmp	r3, #34	; 0x22
 800665c:	f040 80ab 	bne.w	80067b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006668:	d117      	bne.n	800669a <UART_Receive_IT+0x50>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d113      	bne.n	800669a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006672:	2300      	movs	r3, #0
 8006674:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	b29b      	uxth	r3, r3
 8006684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006688:	b29a      	uxth	r2, r3
 800668a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006692:	1c9a      	adds	r2, r3, #2
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	629a      	str	r2, [r3, #40]	; 0x28
 8006698:	e026      	b.n	80066e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80066a0:	2300      	movs	r3, #0
 80066a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ac:	d007      	beq.n	80066be <UART_Receive_IT+0x74>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10a      	bne.n	80066cc <UART_Receive_IT+0x82>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d106      	bne.n	80066cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c8:	701a      	strb	r2, [r3, #0]
 80066ca:	e008      	b.n	80066de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e2:	1c5a      	adds	r2, r3, #1
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	3b01      	subs	r3, #1
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	4619      	mov	r1, r3
 80066f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d15a      	bne.n	80067b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68da      	ldr	r2, [r3, #12]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 0220 	bic.w	r2, r2, #32
 800670a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800671a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	695a      	ldr	r2, [r3, #20]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0201 	bic.w	r2, r2, #1
 800672a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2220      	movs	r2, #32
 8006730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006738:	2b01      	cmp	r3, #1
 800673a:	d135      	bne.n	80067a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	330c      	adds	r3, #12
 8006748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	e853 3f00 	ldrex	r3, [r3]
 8006750:	613b      	str	r3, [r7, #16]
   return(result);
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f023 0310 	bic.w	r3, r3, #16
 8006758:	627b      	str	r3, [r7, #36]	; 0x24
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	330c      	adds	r3, #12
 8006760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006762:	623a      	str	r2, [r7, #32]
 8006764:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	69f9      	ldr	r1, [r7, #28]
 8006768:	6a3a      	ldr	r2, [r7, #32]
 800676a:	e841 2300 	strex	r3, r2, [r1]
 800676e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1e5      	bne.n	8006742 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0310 	and.w	r3, r3, #16
 8006780:	2b10      	cmp	r3, #16
 8006782:	d10a      	bne.n	800679a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006784:	2300      	movs	r3, #0
 8006786:	60fb      	str	r3, [r7, #12]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	60fb      	str	r3, [r7, #12]
 8006798:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800679e:	4619      	mov	r1, r3
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7ff fdbf 	bl	8006324 <HAL_UARTEx_RxEventCallback>
 80067a6:	e002      	b.n	80067ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7fb fc89 	bl	80020c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	e002      	b.n	80067b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	e000      	b.n	80067b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80067b6:	2302      	movs	r3, #2
  }
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3730      	adds	r7, #48	; 0x30
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c4:	b09f      	sub	sp, #124	; 0x7c
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d6:	68d9      	ldr	r1, [r3, #12]
 80067d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	ea40 0301 	orr.w	r3, r0, r1
 80067e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e4:	689a      	ldr	r2, [r3, #8]
 80067e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	431a      	orrs	r2, r3
 80067ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	431a      	orrs	r2, r3
 80067f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80067fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006804:	f021 010c 	bic.w	r1, r1, #12
 8006808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800680e:	430b      	orrs	r3, r1
 8006810:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800681c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800681e:	6999      	ldr	r1, [r3, #24]
 8006820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	ea40 0301 	orr.w	r3, r0, r1
 8006828:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800682a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	4bc5      	ldr	r3, [pc, #788]	; (8006b44 <UART_SetConfig+0x384>)
 8006830:	429a      	cmp	r2, r3
 8006832:	d004      	beq.n	800683e <UART_SetConfig+0x7e>
 8006834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	4bc3      	ldr	r3, [pc, #780]	; (8006b48 <UART_SetConfig+0x388>)
 800683a:	429a      	cmp	r2, r3
 800683c:	d103      	bne.n	8006846 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800683e:	f7fd fc9f 	bl	8004180 <HAL_RCC_GetPCLK2Freq>
 8006842:	6778      	str	r0, [r7, #116]	; 0x74
 8006844:	e002      	b.n	800684c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006846:	f7fd fc87 	bl	8004158 <HAL_RCC_GetPCLK1Freq>
 800684a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800684c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006854:	f040 80b6 	bne.w	80069c4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800685a:	461c      	mov	r4, r3
 800685c:	f04f 0500 	mov.w	r5, #0
 8006860:	4622      	mov	r2, r4
 8006862:	462b      	mov	r3, r5
 8006864:	1891      	adds	r1, r2, r2
 8006866:	6439      	str	r1, [r7, #64]	; 0x40
 8006868:	415b      	adcs	r3, r3
 800686a:	647b      	str	r3, [r7, #68]	; 0x44
 800686c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006870:	1912      	adds	r2, r2, r4
 8006872:	eb45 0303 	adc.w	r3, r5, r3
 8006876:	f04f 0000 	mov.w	r0, #0
 800687a:	f04f 0100 	mov.w	r1, #0
 800687e:	00d9      	lsls	r1, r3, #3
 8006880:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006884:	00d0      	lsls	r0, r2, #3
 8006886:	4602      	mov	r2, r0
 8006888:	460b      	mov	r3, r1
 800688a:	1911      	adds	r1, r2, r4
 800688c:	6639      	str	r1, [r7, #96]	; 0x60
 800688e:	416b      	adcs	r3, r5
 8006890:	667b      	str	r3, [r7, #100]	; 0x64
 8006892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	461a      	mov	r2, r3
 8006898:	f04f 0300 	mov.w	r3, #0
 800689c:	1891      	adds	r1, r2, r2
 800689e:	63b9      	str	r1, [r7, #56]	; 0x38
 80068a0:	415b      	adcs	r3, r3
 80068a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80068a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80068ac:	f7fa f986 	bl	8000bbc <__aeabi_uldivmod>
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	4ba5      	ldr	r3, [pc, #660]	; (8006b4c <UART_SetConfig+0x38c>)
 80068b6:	fba3 2302 	umull	r2, r3, r3, r2
 80068ba:	095b      	lsrs	r3, r3, #5
 80068bc:	011e      	lsls	r6, r3, #4
 80068be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068c0:	461c      	mov	r4, r3
 80068c2:	f04f 0500 	mov.w	r5, #0
 80068c6:	4622      	mov	r2, r4
 80068c8:	462b      	mov	r3, r5
 80068ca:	1891      	adds	r1, r2, r2
 80068cc:	6339      	str	r1, [r7, #48]	; 0x30
 80068ce:	415b      	adcs	r3, r3
 80068d0:	637b      	str	r3, [r7, #52]	; 0x34
 80068d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80068d6:	1912      	adds	r2, r2, r4
 80068d8:	eb45 0303 	adc.w	r3, r5, r3
 80068dc:	f04f 0000 	mov.w	r0, #0
 80068e0:	f04f 0100 	mov.w	r1, #0
 80068e4:	00d9      	lsls	r1, r3, #3
 80068e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068ea:	00d0      	lsls	r0, r2, #3
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	1911      	adds	r1, r2, r4
 80068f2:	65b9      	str	r1, [r7, #88]	; 0x58
 80068f4:	416b      	adcs	r3, r5
 80068f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	461a      	mov	r2, r3
 80068fe:	f04f 0300 	mov.w	r3, #0
 8006902:	1891      	adds	r1, r2, r2
 8006904:	62b9      	str	r1, [r7, #40]	; 0x28
 8006906:	415b      	adcs	r3, r3
 8006908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800690a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800690e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006912:	f7fa f953 	bl	8000bbc <__aeabi_uldivmod>
 8006916:	4602      	mov	r2, r0
 8006918:	460b      	mov	r3, r1
 800691a:	4b8c      	ldr	r3, [pc, #560]	; (8006b4c <UART_SetConfig+0x38c>)
 800691c:	fba3 1302 	umull	r1, r3, r3, r2
 8006920:	095b      	lsrs	r3, r3, #5
 8006922:	2164      	movs	r1, #100	; 0x64
 8006924:	fb01 f303 	mul.w	r3, r1, r3
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	00db      	lsls	r3, r3, #3
 800692c:	3332      	adds	r3, #50	; 0x32
 800692e:	4a87      	ldr	r2, [pc, #540]	; (8006b4c <UART_SetConfig+0x38c>)
 8006930:	fba2 2303 	umull	r2, r3, r2, r3
 8006934:	095b      	lsrs	r3, r3, #5
 8006936:	005b      	lsls	r3, r3, #1
 8006938:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800693c:	441e      	add	r6, r3
 800693e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006940:	4618      	mov	r0, r3
 8006942:	f04f 0100 	mov.w	r1, #0
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	1894      	adds	r4, r2, r2
 800694c:	623c      	str	r4, [r7, #32]
 800694e:	415b      	adcs	r3, r3
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
 8006952:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006956:	1812      	adds	r2, r2, r0
 8006958:	eb41 0303 	adc.w	r3, r1, r3
 800695c:	f04f 0400 	mov.w	r4, #0
 8006960:	f04f 0500 	mov.w	r5, #0
 8006964:	00dd      	lsls	r5, r3, #3
 8006966:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800696a:	00d4      	lsls	r4, r2, #3
 800696c:	4622      	mov	r2, r4
 800696e:	462b      	mov	r3, r5
 8006970:	1814      	adds	r4, r2, r0
 8006972:	653c      	str	r4, [r7, #80]	; 0x50
 8006974:	414b      	adcs	r3, r1
 8006976:	657b      	str	r3, [r7, #84]	; 0x54
 8006978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	461a      	mov	r2, r3
 800697e:	f04f 0300 	mov.w	r3, #0
 8006982:	1891      	adds	r1, r2, r2
 8006984:	61b9      	str	r1, [r7, #24]
 8006986:	415b      	adcs	r3, r3
 8006988:	61fb      	str	r3, [r7, #28]
 800698a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800698e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006992:	f7fa f913 	bl	8000bbc <__aeabi_uldivmod>
 8006996:	4602      	mov	r2, r0
 8006998:	460b      	mov	r3, r1
 800699a:	4b6c      	ldr	r3, [pc, #432]	; (8006b4c <UART_SetConfig+0x38c>)
 800699c:	fba3 1302 	umull	r1, r3, r3, r2
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	2164      	movs	r1, #100	; 0x64
 80069a4:	fb01 f303 	mul.w	r3, r1, r3
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	00db      	lsls	r3, r3, #3
 80069ac:	3332      	adds	r3, #50	; 0x32
 80069ae:	4a67      	ldr	r2, [pc, #412]	; (8006b4c <UART_SetConfig+0x38c>)
 80069b0:	fba2 2303 	umull	r2, r3, r2, r3
 80069b4:	095b      	lsrs	r3, r3, #5
 80069b6:	f003 0207 	and.w	r2, r3, #7
 80069ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4432      	add	r2, r6
 80069c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80069c2:	e0b9      	b.n	8006b38 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069c6:	461c      	mov	r4, r3
 80069c8:	f04f 0500 	mov.w	r5, #0
 80069cc:	4622      	mov	r2, r4
 80069ce:	462b      	mov	r3, r5
 80069d0:	1891      	adds	r1, r2, r2
 80069d2:	6139      	str	r1, [r7, #16]
 80069d4:	415b      	adcs	r3, r3
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80069dc:	1912      	adds	r2, r2, r4
 80069de:	eb45 0303 	adc.w	r3, r5, r3
 80069e2:	f04f 0000 	mov.w	r0, #0
 80069e6:	f04f 0100 	mov.w	r1, #0
 80069ea:	00d9      	lsls	r1, r3, #3
 80069ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069f0:	00d0      	lsls	r0, r2, #3
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	eb12 0804 	adds.w	r8, r2, r4
 80069fa:	eb43 0905 	adc.w	r9, r3, r5
 80069fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f04f 0100 	mov.w	r1, #0
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	f04f 0300 	mov.w	r3, #0
 8006a10:	008b      	lsls	r3, r1, #2
 8006a12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006a16:	0082      	lsls	r2, r0, #2
 8006a18:	4640      	mov	r0, r8
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	f7fa f8ce 	bl	8000bbc <__aeabi_uldivmod>
 8006a20:	4602      	mov	r2, r0
 8006a22:	460b      	mov	r3, r1
 8006a24:	4b49      	ldr	r3, [pc, #292]	; (8006b4c <UART_SetConfig+0x38c>)
 8006a26:	fba3 2302 	umull	r2, r3, r3, r2
 8006a2a:	095b      	lsrs	r3, r3, #5
 8006a2c:	011e      	lsls	r6, r3, #4
 8006a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a30:	4618      	mov	r0, r3
 8006a32:	f04f 0100 	mov.w	r1, #0
 8006a36:	4602      	mov	r2, r0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	1894      	adds	r4, r2, r2
 8006a3c:	60bc      	str	r4, [r7, #8]
 8006a3e:	415b      	adcs	r3, r3
 8006a40:	60fb      	str	r3, [r7, #12]
 8006a42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a46:	1812      	adds	r2, r2, r0
 8006a48:	eb41 0303 	adc.w	r3, r1, r3
 8006a4c:	f04f 0400 	mov.w	r4, #0
 8006a50:	f04f 0500 	mov.w	r5, #0
 8006a54:	00dd      	lsls	r5, r3, #3
 8006a56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a5a:	00d4      	lsls	r4, r2, #3
 8006a5c:	4622      	mov	r2, r4
 8006a5e:	462b      	mov	r3, r5
 8006a60:	1814      	adds	r4, r2, r0
 8006a62:	64bc      	str	r4, [r7, #72]	; 0x48
 8006a64:	414b      	adcs	r3, r1
 8006a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f04f 0100 	mov.w	r1, #0
 8006a72:	f04f 0200 	mov.w	r2, #0
 8006a76:	f04f 0300 	mov.w	r3, #0
 8006a7a:	008b      	lsls	r3, r1, #2
 8006a7c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006a80:	0082      	lsls	r2, r0, #2
 8006a82:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006a86:	f7fa f899 	bl	8000bbc <__aeabi_uldivmod>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	4b2f      	ldr	r3, [pc, #188]	; (8006b4c <UART_SetConfig+0x38c>)
 8006a90:	fba3 1302 	umull	r1, r3, r3, r2
 8006a94:	095b      	lsrs	r3, r3, #5
 8006a96:	2164      	movs	r1, #100	; 0x64
 8006a98:	fb01 f303 	mul.w	r3, r1, r3
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	011b      	lsls	r3, r3, #4
 8006aa0:	3332      	adds	r3, #50	; 0x32
 8006aa2:	4a2a      	ldr	r2, [pc, #168]	; (8006b4c <UART_SetConfig+0x38c>)
 8006aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa8:	095b      	lsrs	r3, r3, #5
 8006aaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006aae:	441e      	add	r6, r3
 8006ab0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f04f 0100 	mov.w	r1, #0
 8006ab8:	4602      	mov	r2, r0
 8006aba:	460b      	mov	r3, r1
 8006abc:	1894      	adds	r4, r2, r2
 8006abe:	603c      	str	r4, [r7, #0]
 8006ac0:	415b      	adcs	r3, r3
 8006ac2:	607b      	str	r3, [r7, #4]
 8006ac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ac8:	1812      	adds	r2, r2, r0
 8006aca:	eb41 0303 	adc.w	r3, r1, r3
 8006ace:	f04f 0400 	mov.w	r4, #0
 8006ad2:	f04f 0500 	mov.w	r5, #0
 8006ad6:	00dd      	lsls	r5, r3, #3
 8006ad8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006adc:	00d4      	lsls	r4, r2, #3
 8006ade:	4622      	mov	r2, r4
 8006ae0:	462b      	mov	r3, r5
 8006ae2:	eb12 0a00 	adds.w	sl, r2, r0
 8006ae6:	eb43 0b01 	adc.w	fp, r3, r1
 8006aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f04f 0100 	mov.w	r1, #0
 8006af4:	f04f 0200 	mov.w	r2, #0
 8006af8:	f04f 0300 	mov.w	r3, #0
 8006afc:	008b      	lsls	r3, r1, #2
 8006afe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b02:	0082      	lsls	r2, r0, #2
 8006b04:	4650      	mov	r0, sl
 8006b06:	4659      	mov	r1, fp
 8006b08:	f7fa f858 	bl	8000bbc <__aeabi_uldivmod>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4b0e      	ldr	r3, [pc, #56]	; (8006b4c <UART_SetConfig+0x38c>)
 8006b12:	fba3 1302 	umull	r1, r3, r3, r2
 8006b16:	095b      	lsrs	r3, r3, #5
 8006b18:	2164      	movs	r1, #100	; 0x64
 8006b1a:	fb01 f303 	mul.w	r3, r1, r3
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	011b      	lsls	r3, r3, #4
 8006b22:	3332      	adds	r3, #50	; 0x32
 8006b24:	4a09      	ldr	r2, [pc, #36]	; (8006b4c <UART_SetConfig+0x38c>)
 8006b26:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2a:	095b      	lsrs	r3, r3, #5
 8006b2c:	f003 020f 	and.w	r2, r3, #15
 8006b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4432      	add	r2, r6
 8006b36:	609a      	str	r2, [r3, #8]
}
 8006b38:	bf00      	nop
 8006b3a:	377c      	adds	r7, #124	; 0x7c
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b42:	bf00      	nop
 8006b44:	40011000 	.word	0x40011000
 8006b48:	40011400 	.word	0x40011400
 8006b4c:	51eb851f 	.word	0x51eb851f

08006b50 <__NVIC_SetPriority>:
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	6039      	str	r1, [r7, #0]
 8006b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	db0a      	blt.n	8006b7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	490c      	ldr	r1, [pc, #48]	; (8006b9c <__NVIC_SetPriority+0x4c>)
 8006b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b6e:	0112      	lsls	r2, r2, #4
 8006b70:	b2d2      	uxtb	r2, r2
 8006b72:	440b      	add	r3, r1
 8006b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006b78:	e00a      	b.n	8006b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	4908      	ldr	r1, [pc, #32]	; (8006ba0 <__NVIC_SetPriority+0x50>)
 8006b80:	79fb      	ldrb	r3, [r7, #7]
 8006b82:	f003 030f 	and.w	r3, r3, #15
 8006b86:	3b04      	subs	r3, #4
 8006b88:	0112      	lsls	r2, r2, #4
 8006b8a:	b2d2      	uxtb	r2, r2
 8006b8c:	440b      	add	r3, r1
 8006b8e:	761a      	strb	r2, [r3, #24]
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	e000e100 	.word	0xe000e100
 8006ba0:	e000ed00 	.word	0xe000ed00

08006ba4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006ba8:	2100      	movs	r1, #0
 8006baa:	f06f 0004 	mvn.w	r0, #4
 8006bae:	f7ff ffcf 	bl	8006b50 <__NVIC_SetPriority>
#endif
}
 8006bb2:	bf00      	nop
 8006bb4:	bd80      	pop	{r7, pc}
	...

08006bb8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bbe:	f3ef 8305 	mrs	r3, IPSR
 8006bc2:	603b      	str	r3, [r7, #0]
  return(result);
 8006bc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006bca:	f06f 0305 	mvn.w	r3, #5
 8006bce:	607b      	str	r3, [r7, #4]
 8006bd0:	e00c      	b.n	8006bec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006bd2:	4b0a      	ldr	r3, [pc, #40]	; (8006bfc <osKernelInitialize+0x44>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d105      	bne.n	8006be6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006bda:	4b08      	ldr	r3, [pc, #32]	; (8006bfc <osKernelInitialize+0x44>)
 8006bdc:	2201      	movs	r2, #1
 8006bde:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	607b      	str	r3, [r7, #4]
 8006be4:	e002      	b.n	8006bec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006bec:	687b      	ldr	r3, [r7, #4]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	200000bc 	.word	0x200000bc

08006c00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c06:	f3ef 8305 	mrs	r3, IPSR
 8006c0a:	603b      	str	r3, [r7, #0]
  return(result);
 8006c0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006c12:	f06f 0305 	mvn.w	r3, #5
 8006c16:	607b      	str	r3, [r7, #4]
 8006c18:	e010      	b.n	8006c3c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006c1a:	4b0b      	ldr	r3, [pc, #44]	; (8006c48 <osKernelStart+0x48>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d109      	bne.n	8006c36 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006c22:	f7ff ffbf 	bl	8006ba4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006c26:	4b08      	ldr	r3, [pc, #32]	; (8006c48 <osKernelStart+0x48>)
 8006c28:	2202      	movs	r2, #2
 8006c2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006c2c:	f001 f866 	bl	8007cfc <vTaskStartScheduler>
      stat = osOK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	607b      	str	r3, [r7, #4]
 8006c34:	e002      	b.n	8006c3c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006c3c:	687b      	ldr	r3, [r7, #4]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	200000bc 	.word	0x200000bc

08006c4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b08e      	sub	sp, #56	; 0x38
 8006c50:	af04      	add	r7, sp, #16
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c5c:	f3ef 8305 	mrs	r3, IPSR
 8006c60:	617b      	str	r3, [r7, #20]
  return(result);
 8006c62:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d17e      	bne.n	8006d66 <osThreadNew+0x11a>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d07b      	beq.n	8006d66 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006c6e:	2380      	movs	r3, #128	; 0x80
 8006c70:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006c72:	2318      	movs	r3, #24
 8006c74:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006c76:	2300      	movs	r3, #0
 8006c78:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c7e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d045      	beq.n	8006d12 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d002      	beq.n	8006c94 <osThreadNew+0x48>
        name = attr->name;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d008      	beq.n	8006cba <osThreadNew+0x6e>
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	2b38      	cmp	r3, #56	; 0x38
 8006cac:	d805      	bhi.n	8006cba <osThreadNew+0x6e>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <osThreadNew+0x72>
        return (NULL);
 8006cba:	2300      	movs	r3, #0
 8006cbc:	e054      	b.n	8006d68 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d003      	beq.n	8006cce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	089b      	lsrs	r3, r3, #2
 8006ccc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00e      	beq.n	8006cf4 <osThreadNew+0xa8>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	2b5b      	cmp	r3, #91	; 0x5b
 8006cdc:	d90a      	bls.n	8006cf4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d006      	beq.n	8006cf4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d002      	beq.n	8006cf4 <osThreadNew+0xa8>
        mem = 1;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	61bb      	str	r3, [r7, #24]
 8006cf2:	e010      	b.n	8006d16 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10c      	bne.n	8006d16 <osThreadNew+0xca>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d108      	bne.n	8006d16 <osThreadNew+0xca>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d104      	bne.n	8006d16 <osThreadNew+0xca>
          mem = 0;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	61bb      	str	r3, [r7, #24]
 8006d10:	e001      	b.n	8006d16 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006d12:	2300      	movs	r3, #0
 8006d14:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d110      	bne.n	8006d3e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d24:	9202      	str	r2, [sp, #8]
 8006d26:	9301      	str	r3, [sp, #4]
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	9300      	str	r3, [sp, #0]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	6a3a      	ldr	r2, [r7, #32]
 8006d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f000 fe0c 	bl	8007950 <xTaskCreateStatic>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	613b      	str	r3, [r7, #16]
 8006d3c:	e013      	b.n	8006d66 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d110      	bne.n	8006d66 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	f107 0310 	add.w	r3, r7, #16
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 fe57 	bl	8007a0a <xTaskCreate>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d001      	beq.n	8006d66 <osThreadNew+0x11a>
            hTask = NULL;
 8006d62:	2300      	movs	r3, #0
 8006d64:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006d66:	693b      	ldr	r3, [r7, #16]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3728      	adds	r7, #40	; 0x28
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d78:	f3ef 8305 	mrs	r3, IPSR
 8006d7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d7e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <osDelay+0x1c>
    stat = osErrorISR;
 8006d84:	f06f 0305 	mvn.w	r3, #5
 8006d88:	60fb      	str	r3, [r7, #12]
 8006d8a:	e007      	b.n	8006d9c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 ff7c 	bl	8007c94 <vTaskDelay>
    }
  }

  return (stat);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
	...

08006da8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4a07      	ldr	r2, [pc, #28]	; (8006dd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8006db8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	4a06      	ldr	r2, [pc, #24]	; (8006dd8 <vApplicationGetIdleTaskMemory+0x30>)
 8006dbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2280      	movs	r2, #128	; 0x80
 8006dc4:	601a      	str	r2, [r3, #0]
}
 8006dc6:	bf00      	nop
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	200000c0 	.word	0x200000c0
 8006dd8:	2000011c 	.word	0x2000011c

08006ddc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4a07      	ldr	r2, [pc, #28]	; (8006e08 <vApplicationGetTimerTaskMemory+0x2c>)
 8006dec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	4a06      	ldr	r2, [pc, #24]	; (8006e0c <vApplicationGetTimerTaskMemory+0x30>)
 8006df2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dfa:	601a      	str	r2, [r3, #0]
}
 8006dfc:	bf00      	nop
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	2000031c 	.word	0x2000031c
 8006e0c:	20000378 	.word	0x20000378

08006e10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f103 0208 	add.w	r2, r3, #8
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f103 0208 	add.w	r2, r3, #8
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f103 0208 	add.w	r2, r3, #8
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e5e:	bf00      	nop
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b085      	sub	sp, #20
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	1c5a      	adds	r2, r3, #1
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	601a      	str	r2, [r3, #0]
}
 8006ea6:	bf00      	nop
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b085      	sub	sp, #20
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ec8:	d103      	bne.n	8006ed2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	e00c      	b.n	8006eec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3308      	adds	r3, #8
 8006ed6:	60fb      	str	r3, [r7, #12]
 8006ed8:	e002      	b.n	8006ee0 <vListInsert+0x2e>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	60fb      	str	r3, [r7, #12]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d2f6      	bcs.n	8006eda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	601a      	str	r2, [r3, #0]
}
 8006f18:	bf00      	nop
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	6892      	ldr	r2, [r2, #8]
 8006f3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	6852      	ldr	r2, [r2, #4]
 8006f44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d103      	bne.n	8006f58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	1e5a      	subs	r2, r3, #1
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10a      	bne.n	8006fa2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f9e:	bf00      	nop
 8006fa0:	e7fe      	b.n	8006fa0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006fa2:	f002 f84f 	bl	8009044 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fae:	68f9      	ldr	r1, [r7, #12]
 8006fb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006fb2:	fb01 f303 	mul.w	r3, r1, r3
 8006fb6:	441a      	add	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	68f9      	ldr	r1, [r7, #12]
 8006fd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006fd8:	fb01 f303 	mul.w	r3, r1, r3
 8006fdc:	441a      	add	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	22ff      	movs	r2, #255	; 0xff
 8006fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	22ff      	movs	r2, #255	; 0xff
 8006fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d114      	bne.n	8007022 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01a      	beq.n	8007036 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	3310      	adds	r3, #16
 8007004:	4618      	mov	r0, r3
 8007006:	f001 f903 	bl	8008210 <xTaskRemoveFromEventList>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d012      	beq.n	8007036 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007010:	4b0c      	ldr	r3, [pc, #48]	; (8007044 <xQueueGenericReset+0xcc>)
 8007012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	e009      	b.n	8007036 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3310      	adds	r3, #16
 8007026:	4618      	mov	r0, r3
 8007028:	f7ff fef2 	bl	8006e10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	3324      	adds	r3, #36	; 0x24
 8007030:	4618      	mov	r0, r3
 8007032:	f7ff feed 	bl	8006e10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007036:	f002 f835 	bl	80090a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800703a:	2301      	movs	r3, #1
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	e000ed04 	.word	0xe000ed04

08007048 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007048:	b580      	push	{r7, lr}
 800704a:	b08e      	sub	sp, #56	; 0x38
 800704c:	af02      	add	r7, sp, #8
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10a      	bne.n	8007072 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800706e:	bf00      	nop
 8007070:	e7fe      	b.n	8007070 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10a      	bne.n	800708e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707c:	f383 8811 	msr	BASEPRI, r3
 8007080:	f3bf 8f6f 	isb	sy
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	627b      	str	r3, [r7, #36]	; 0x24
}
 800708a:	bf00      	nop
 800708c:	e7fe      	b.n	800708c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d002      	beq.n	800709a <xQueueGenericCreateStatic+0x52>
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <xQueueGenericCreateStatic+0x56>
 800709a:	2301      	movs	r3, #1
 800709c:	e000      	b.n	80070a0 <xQueueGenericCreateStatic+0x58>
 800709e:	2300      	movs	r3, #0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10a      	bne.n	80070ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80070a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	623b      	str	r3, [r7, #32]
}
 80070b6:	bf00      	nop
 80070b8:	e7fe      	b.n	80070b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d102      	bne.n	80070c6 <xQueueGenericCreateStatic+0x7e>
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <xQueueGenericCreateStatic+0x82>
 80070c6:	2301      	movs	r3, #1
 80070c8:	e000      	b.n	80070cc <xQueueGenericCreateStatic+0x84>
 80070ca:	2300      	movs	r3, #0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10a      	bne.n	80070e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	61fb      	str	r3, [r7, #28]
}
 80070e2:	bf00      	nop
 80070e4:	e7fe      	b.n	80070e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80070e6:	2350      	movs	r3, #80	; 0x50
 80070e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2b50      	cmp	r3, #80	; 0x50
 80070ee:	d00a      	beq.n	8007106 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	61bb      	str	r3, [r7, #24]
}
 8007102:	bf00      	nop
 8007104:	e7fe      	b.n	8007104 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007106:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800710c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00d      	beq.n	800712e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800711a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800711e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	4613      	mov	r3, r2
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	68b9      	ldr	r1, [r7, #8]
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 f805 	bl	8007138 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800712e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007130:	4618      	mov	r0, r3
 8007132:	3730      	adds	r7, #48	; 0x30
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
 8007144:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d103      	bne.n	8007154 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	601a      	str	r2, [r3, #0]
 8007152:	e002      	b.n	800715a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007166:	2101      	movs	r1, #1
 8007168:	69b8      	ldr	r0, [r7, #24]
 800716a:	f7ff ff05 	bl	8006f78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	78fa      	ldrb	r2, [r7, #3]
 8007172:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007176:	bf00      	nop
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
	...

08007180 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b08e      	sub	sp, #56	; 0x38
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
 800718c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800718e:	2300      	movs	r3, #0
 8007190:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10a      	bne.n	80071b2 <xQueueGenericSend+0x32>
	__asm volatile
 800719c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a0:	f383 8811 	msr	BASEPRI, r3
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80071ae:	bf00      	nop
 80071b0:	e7fe      	b.n	80071b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d103      	bne.n	80071c0 <xQueueGenericSend+0x40>
 80071b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <xQueueGenericSend+0x44>
 80071c0:	2301      	movs	r3, #1
 80071c2:	e000      	b.n	80071c6 <xQueueGenericSend+0x46>
 80071c4:	2300      	movs	r3, #0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10a      	bne.n	80071e0 <xQueueGenericSend+0x60>
	__asm volatile
 80071ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071dc:	bf00      	nop
 80071de:	e7fe      	b.n	80071de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d103      	bne.n	80071ee <xQueueGenericSend+0x6e>
 80071e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d101      	bne.n	80071f2 <xQueueGenericSend+0x72>
 80071ee:	2301      	movs	r3, #1
 80071f0:	e000      	b.n	80071f4 <xQueueGenericSend+0x74>
 80071f2:	2300      	movs	r3, #0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10a      	bne.n	800720e <xQueueGenericSend+0x8e>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	623b      	str	r3, [r7, #32]
}
 800720a:	bf00      	nop
 800720c:	e7fe      	b.n	800720c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800720e:	f001 f9bd 	bl	800858c <xTaskGetSchedulerState>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d102      	bne.n	800721e <xQueueGenericSend+0x9e>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <xQueueGenericSend+0xa2>
 800721e:	2301      	movs	r3, #1
 8007220:	e000      	b.n	8007224 <xQueueGenericSend+0xa4>
 8007222:	2300      	movs	r3, #0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10a      	bne.n	800723e <xQueueGenericSend+0xbe>
	__asm volatile
 8007228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722c:	f383 8811 	msr	BASEPRI, r3
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	61fb      	str	r3, [r7, #28]
}
 800723a:	bf00      	nop
 800723c:	e7fe      	b.n	800723c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800723e:	f001 ff01 	bl	8009044 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724a:	429a      	cmp	r2, r3
 800724c:	d302      	bcc.n	8007254 <xQueueGenericSend+0xd4>
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b02      	cmp	r3, #2
 8007252:	d129      	bne.n	80072a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007254:	683a      	ldr	r2, [r7, #0]
 8007256:	68b9      	ldr	r1, [r7, #8]
 8007258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800725a:	f000 fa0b 	bl	8007674 <prvCopyDataToQueue>
 800725e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007264:	2b00      	cmp	r3, #0
 8007266:	d010      	beq.n	800728a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726a:	3324      	adds	r3, #36	; 0x24
 800726c:	4618      	mov	r0, r3
 800726e:	f000 ffcf 	bl	8008210 <xTaskRemoveFromEventList>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d013      	beq.n	80072a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007278:	4b3f      	ldr	r3, [pc, #252]	; (8007378 <xQueueGenericSend+0x1f8>)
 800727a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800727e:	601a      	str	r2, [r3, #0]
 8007280:	f3bf 8f4f 	dsb	sy
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	e00a      	b.n	80072a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800728a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728c:	2b00      	cmp	r3, #0
 800728e:	d007      	beq.n	80072a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007290:	4b39      	ldr	r3, [pc, #228]	; (8007378 <xQueueGenericSend+0x1f8>)
 8007292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007296:	601a      	str	r2, [r3, #0]
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80072a0:	f001 ff00 	bl	80090a4 <vPortExitCritical>
				return pdPASS;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e063      	b.n	8007370 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d103      	bne.n	80072b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80072ae:	f001 fef9 	bl	80090a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	e05c      	b.n	8007370 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d106      	bne.n	80072ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072bc:	f107 0314 	add.w	r3, r7, #20
 80072c0:	4618      	mov	r0, r3
 80072c2:	f001 f809 	bl	80082d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072c6:	2301      	movs	r3, #1
 80072c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072ca:	f001 feeb 	bl	80090a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072ce:	f000 fd7b 	bl	8007dc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072d2:	f001 feb7 	bl	8009044 <vPortEnterCritical>
 80072d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072dc:	b25b      	sxtb	r3, r3
 80072de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072e2:	d103      	bne.n	80072ec <xQueueGenericSend+0x16c>
 80072e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072f2:	b25b      	sxtb	r3, r3
 80072f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072f8:	d103      	bne.n	8007302 <xQueueGenericSend+0x182>
 80072fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007302:	f001 fecf 	bl	80090a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007306:	1d3a      	adds	r2, r7, #4
 8007308:	f107 0314 	add.w	r3, r7, #20
 800730c:	4611      	mov	r1, r2
 800730e:	4618      	mov	r0, r3
 8007310:	f000 fff8 	bl	8008304 <xTaskCheckForTimeOut>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d124      	bne.n	8007364 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800731a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800731c:	f000 faa2 	bl	8007864 <prvIsQueueFull>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d018      	beq.n	8007358 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007328:	3310      	adds	r3, #16
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	4611      	mov	r1, r2
 800732e:	4618      	mov	r0, r3
 8007330:	f000 ff1e 	bl	8008170 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007336:	f000 fa2d 	bl	8007794 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800733a:	f000 fd53 	bl	8007de4 <xTaskResumeAll>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	f47f af7c 	bne.w	800723e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007346:	4b0c      	ldr	r3, [pc, #48]	; (8007378 <xQueueGenericSend+0x1f8>)
 8007348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	e772      	b.n	800723e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800735a:	f000 fa1b 	bl	8007794 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800735e:	f000 fd41 	bl	8007de4 <xTaskResumeAll>
 8007362:	e76c      	b.n	800723e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007366:	f000 fa15 	bl	8007794 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800736a:	f000 fd3b 	bl	8007de4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800736e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007370:	4618      	mov	r0, r3
 8007372:	3738      	adds	r7, #56	; 0x38
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	e000ed04 	.word	0xe000ed04

0800737c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b090      	sub	sp, #64	; 0x40
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
 8007388:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800738e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10a      	bne.n	80073aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007398:	f383 8811 	msr	BASEPRI, r3
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80073a6:	bf00      	nop
 80073a8:	e7fe      	b.n	80073a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d103      	bne.n	80073b8 <xQueueGenericSendFromISR+0x3c>
 80073b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <xQueueGenericSendFromISR+0x40>
 80073b8:	2301      	movs	r3, #1
 80073ba:	e000      	b.n	80073be <xQueueGenericSendFromISR+0x42>
 80073bc:	2300      	movs	r3, #0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10a      	bne.n	80073d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80073c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c6:	f383 8811 	msr	BASEPRI, r3
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073d4:	bf00      	nop
 80073d6:	e7fe      	b.n	80073d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d103      	bne.n	80073e6 <xQueueGenericSendFromISR+0x6a>
 80073de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d101      	bne.n	80073ea <xQueueGenericSendFromISR+0x6e>
 80073e6:	2301      	movs	r3, #1
 80073e8:	e000      	b.n	80073ec <xQueueGenericSendFromISR+0x70>
 80073ea:	2300      	movs	r3, #0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10a      	bne.n	8007406 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80073f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	623b      	str	r3, [r7, #32]
}
 8007402:	bf00      	nop
 8007404:	e7fe      	b.n	8007404 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007406:	f001 feff 	bl	8009208 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800740a:	f3ef 8211 	mrs	r2, BASEPRI
 800740e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	61fa      	str	r2, [r7, #28]
 8007420:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007422:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007424:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800742a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742e:	429a      	cmp	r2, r3
 8007430:	d302      	bcc.n	8007438 <xQueueGenericSendFromISR+0xbc>
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2b02      	cmp	r3, #2
 8007436:	d12f      	bne.n	8007498 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800743e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007446:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	68b9      	ldr	r1, [r7, #8]
 800744c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800744e:	f000 f911 	bl	8007674 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007452:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800745a:	d112      	bne.n	8007482 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800745c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007460:	2b00      	cmp	r3, #0
 8007462:	d016      	beq.n	8007492 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007466:	3324      	adds	r3, #36	; 0x24
 8007468:	4618      	mov	r0, r3
 800746a:	f000 fed1 	bl	8008210 <xTaskRemoveFromEventList>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00e      	beq.n	8007492 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00b      	beq.n	8007492 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	e007      	b.n	8007492 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007482:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007486:	3301      	adds	r3, #1
 8007488:	b2db      	uxtb	r3, r3
 800748a:	b25a      	sxtb	r2, r3
 800748c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007492:	2301      	movs	r3, #1
 8007494:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007496:	e001      	b.n	800749c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007498:	2300      	movs	r3, #0
 800749a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800749c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800749e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80074a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80074a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3740      	adds	r7, #64	; 0x40
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
	...

080074b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08c      	sub	sp, #48	; 0x30
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80074c0:	2300      	movs	r3, #0
 80074c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80074c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10a      	bne.n	80074e4 <xQueueReceive+0x30>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	623b      	str	r3, [r7, #32]
}
 80074e0:	bf00      	nop
 80074e2:	e7fe      	b.n	80074e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d103      	bne.n	80074f2 <xQueueReceive+0x3e>
 80074ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <xQueueReceive+0x42>
 80074f2:	2301      	movs	r3, #1
 80074f4:	e000      	b.n	80074f8 <xQueueReceive+0x44>
 80074f6:	2300      	movs	r3, #0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10a      	bne.n	8007512 <xQueueReceive+0x5e>
	__asm volatile
 80074fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007500:	f383 8811 	msr	BASEPRI, r3
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	61fb      	str	r3, [r7, #28]
}
 800750e:	bf00      	nop
 8007510:	e7fe      	b.n	8007510 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007512:	f001 f83b 	bl	800858c <xTaskGetSchedulerState>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d102      	bne.n	8007522 <xQueueReceive+0x6e>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <xQueueReceive+0x72>
 8007522:	2301      	movs	r3, #1
 8007524:	e000      	b.n	8007528 <xQueueReceive+0x74>
 8007526:	2300      	movs	r3, #0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10a      	bne.n	8007542 <xQueueReceive+0x8e>
	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	61bb      	str	r3, [r7, #24]
}
 800753e:	bf00      	nop
 8007540:	e7fe      	b.n	8007540 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007542:	f001 fd7f 	bl	8009044 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	2b00      	cmp	r3, #0
 8007550:	d01f      	beq.n	8007592 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007552:	68b9      	ldr	r1, [r7, #8]
 8007554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007556:	f000 f8f7 	bl	8007748 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	1e5a      	subs	r2, r3, #1
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00f      	beq.n	800758a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756c:	3310      	adds	r3, #16
 800756e:	4618      	mov	r0, r3
 8007570:	f000 fe4e 	bl	8008210 <xTaskRemoveFromEventList>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d007      	beq.n	800758a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800757a:	4b3d      	ldr	r3, [pc, #244]	; (8007670 <xQueueReceive+0x1bc>)
 800757c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800758a:	f001 fd8b 	bl	80090a4 <vPortExitCritical>
				return pdPASS;
 800758e:	2301      	movs	r3, #1
 8007590:	e069      	b.n	8007666 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d103      	bne.n	80075a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007598:	f001 fd84 	bl	80090a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800759c:	2300      	movs	r3, #0
 800759e:	e062      	b.n	8007666 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d106      	bne.n	80075b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075a6:	f107 0310 	add.w	r3, r7, #16
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 fe94 	bl	80082d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075b0:	2301      	movs	r3, #1
 80075b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075b4:	f001 fd76 	bl	80090a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075b8:	f000 fc06 	bl	8007dc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075bc:	f001 fd42 	bl	8009044 <vPortEnterCritical>
 80075c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075c6:	b25b      	sxtb	r3, r3
 80075c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075cc:	d103      	bne.n	80075d6 <xQueueReceive+0x122>
 80075ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075dc:	b25b      	sxtb	r3, r3
 80075de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075e2:	d103      	bne.n	80075ec <xQueueReceive+0x138>
 80075e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075ec:	f001 fd5a 	bl	80090a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075f0:	1d3a      	adds	r2, r7, #4
 80075f2:	f107 0310 	add.w	r3, r7, #16
 80075f6:	4611      	mov	r1, r2
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 fe83 	bl	8008304 <xTaskCheckForTimeOut>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d123      	bne.n	800764c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007606:	f000 f917 	bl	8007838 <prvIsQueueEmpty>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d017      	beq.n	8007640 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007612:	3324      	adds	r3, #36	; 0x24
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	4611      	mov	r1, r2
 8007618:	4618      	mov	r0, r3
 800761a:	f000 fda9 	bl	8008170 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800761e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007620:	f000 f8b8 	bl	8007794 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007624:	f000 fbde 	bl	8007de4 <xTaskResumeAll>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d189      	bne.n	8007542 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800762e:	4b10      	ldr	r3, [pc, #64]	; (8007670 <xQueueReceive+0x1bc>)
 8007630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007634:	601a      	str	r2, [r3, #0]
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	e780      	b.n	8007542 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007642:	f000 f8a7 	bl	8007794 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007646:	f000 fbcd 	bl	8007de4 <xTaskResumeAll>
 800764a:	e77a      	b.n	8007542 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800764c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800764e:	f000 f8a1 	bl	8007794 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007652:	f000 fbc7 	bl	8007de4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007658:	f000 f8ee 	bl	8007838 <prvIsQueueEmpty>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	f43f af6f 	beq.w	8007542 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007664:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007666:	4618      	mov	r0, r3
 8007668:	3730      	adds	r7, #48	; 0x30
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	e000ed04 	.word	0xe000ed04

08007674 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007680:	2300      	movs	r3, #0
 8007682:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007688:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10d      	bne.n	80076ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d14d      	bne.n	8007736 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	4618      	mov	r0, r3
 80076a0:	f000 ff92 	bl	80085c8 <xTaskPriorityDisinherit>
 80076a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	609a      	str	r2, [r3, #8]
 80076ac:	e043      	b.n	8007736 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d119      	bne.n	80076e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6858      	ldr	r0, [r3, #4]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076bc:	461a      	mov	r2, r3
 80076be:	68b9      	ldr	r1, [r7, #8]
 80076c0:	f002 fa28 	bl	8009b14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076cc:	441a      	add	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d32b      	bcc.n	8007736 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	605a      	str	r2, [r3, #4]
 80076e6:	e026      	b.n	8007736 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	68d8      	ldr	r0, [r3, #12]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f0:	461a      	mov	r2, r3
 80076f2:	68b9      	ldr	r1, [r7, #8]
 80076f4:	f002 fa0e 	bl	8009b14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	68da      	ldr	r2, [r3, #12]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007700:	425b      	negs	r3, r3
 8007702:	441a      	add	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	68da      	ldr	r2, [r3, #12]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	429a      	cmp	r2, r3
 8007712:	d207      	bcs.n	8007724 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	689a      	ldr	r2, [r3, #8]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771c:	425b      	negs	r3, r3
 800771e:	441a      	add	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b02      	cmp	r3, #2
 8007728:	d105      	bne.n	8007736 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	3b01      	subs	r3, #1
 8007734:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800773e:	697b      	ldr	r3, [r7, #20]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007756:	2b00      	cmp	r3, #0
 8007758:	d018      	beq.n	800778c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68da      	ldr	r2, [r3, #12]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	441a      	add	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68da      	ldr	r2, [r3, #12]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	429a      	cmp	r2, r3
 8007772:	d303      	bcc.n	800777c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	68d9      	ldr	r1, [r3, #12]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007784:	461a      	mov	r2, r3
 8007786:	6838      	ldr	r0, [r7, #0]
 8007788:	f002 f9c4 	bl	8009b14 <memcpy>
	}
}
 800778c:	bf00      	nop
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800779c:	f001 fc52 	bl	8009044 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077a8:	e011      	b.n	80077ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d012      	beq.n	80077d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	3324      	adds	r3, #36	; 0x24
 80077b6:	4618      	mov	r0, r3
 80077b8:	f000 fd2a 	bl	8008210 <xTaskRemoveFromEventList>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80077c2:	f000 fe01 	bl	80083c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
 80077c8:	3b01      	subs	r3, #1
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	dce9      	bgt.n	80077aa <prvUnlockQueue+0x16>
 80077d6:	e000      	b.n	80077da <prvUnlockQueue+0x46>
					break;
 80077d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	22ff      	movs	r2, #255	; 0xff
 80077de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80077e2:	f001 fc5f 	bl	80090a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80077e6:	f001 fc2d 	bl	8009044 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077f2:	e011      	b.n	8007818 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d012      	beq.n	8007822 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	3310      	adds	r3, #16
 8007800:	4618      	mov	r0, r3
 8007802:	f000 fd05 	bl	8008210 <xTaskRemoveFromEventList>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d001      	beq.n	8007810 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800780c:	f000 fddc 	bl	80083c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007810:	7bbb      	ldrb	r3, [r7, #14]
 8007812:	3b01      	subs	r3, #1
 8007814:	b2db      	uxtb	r3, r3
 8007816:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007818:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800781c:	2b00      	cmp	r3, #0
 800781e:	dce9      	bgt.n	80077f4 <prvUnlockQueue+0x60>
 8007820:	e000      	b.n	8007824 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007822:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	22ff      	movs	r2, #255	; 0xff
 8007828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800782c:	f001 fc3a 	bl	80090a4 <vPortExitCritical>
}
 8007830:	bf00      	nop
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007840:	f001 fc00 	bl	8009044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007848:	2b00      	cmp	r3, #0
 800784a:	d102      	bne.n	8007852 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800784c:	2301      	movs	r3, #1
 800784e:	60fb      	str	r3, [r7, #12]
 8007850:	e001      	b.n	8007856 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007852:	2300      	movs	r3, #0
 8007854:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007856:	f001 fc25 	bl	80090a4 <vPortExitCritical>

	return xReturn;
 800785a:	68fb      	ldr	r3, [r7, #12]
}
 800785c:	4618      	mov	r0, r3
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800786c:	f001 fbea 	bl	8009044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007878:	429a      	cmp	r2, r3
 800787a:	d102      	bne.n	8007882 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800787c:	2301      	movs	r3, #1
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	e001      	b.n	8007886 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007882:	2300      	movs	r3, #0
 8007884:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007886:	f001 fc0d 	bl	80090a4 <vPortExitCritical>

	return xReturn;
 800788a:	68fb      	ldr	r3, [r7, #12]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800789e:	2300      	movs	r3, #0
 80078a0:	60fb      	str	r3, [r7, #12]
 80078a2:	e014      	b.n	80078ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80078a4:	4a0f      	ldr	r2, [pc, #60]	; (80078e4 <vQueueAddToRegistry+0x50>)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10b      	bne.n	80078c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80078b0:	490c      	ldr	r1, [pc, #48]	; (80078e4 <vQueueAddToRegistry+0x50>)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80078ba:	4a0a      	ldr	r2, [pc, #40]	; (80078e4 <vQueueAddToRegistry+0x50>)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	00db      	lsls	r3, r3, #3
 80078c0:	4413      	add	r3, r2
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80078c6:	e006      	b.n	80078d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3301      	adds	r3, #1
 80078cc:	60fb      	str	r3, [r7, #12]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2b07      	cmp	r3, #7
 80078d2:	d9e7      	bls.n	80078a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80078d4:	bf00      	nop
 80078d6:	bf00      	nop
 80078d8:	3714      	adds	r7, #20
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	20004c58 	.word	0x20004c58

080078e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b086      	sub	sp, #24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80078f8:	f001 fba4 	bl	8009044 <vPortEnterCritical>
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007902:	b25b      	sxtb	r3, r3
 8007904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007908:	d103      	bne.n	8007912 <vQueueWaitForMessageRestricted+0x2a>
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007918:	b25b      	sxtb	r3, r3
 800791a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800791e:	d103      	bne.n	8007928 <vQueueWaitForMessageRestricted+0x40>
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007928:	f001 fbbc 	bl	80090a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007930:	2b00      	cmp	r3, #0
 8007932:	d106      	bne.n	8007942 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	3324      	adds	r3, #36	; 0x24
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	68b9      	ldr	r1, [r7, #8]
 800793c:	4618      	mov	r0, r3
 800793e:	f000 fc3b 	bl	80081b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007942:	6978      	ldr	r0, [r7, #20]
 8007944:	f7ff ff26 	bl	8007794 <prvUnlockQueue>
	}
 8007948:	bf00      	nop
 800794a:	3718      	adds	r7, #24
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007950:	b580      	push	{r7, lr}
 8007952:	b08e      	sub	sp, #56	; 0x38
 8007954:	af04      	add	r7, sp, #16
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
 800795c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800795e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10a      	bne.n	800797a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007968:	f383 8811 	msr	BASEPRI, r3
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	623b      	str	r3, [r7, #32]
}
 8007976:	bf00      	nop
 8007978:	e7fe      	b.n	8007978 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800797a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10a      	bne.n	8007996 <xTaskCreateStatic+0x46>
	__asm volatile
 8007980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007984:	f383 8811 	msr	BASEPRI, r3
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	61fb      	str	r3, [r7, #28]
}
 8007992:	bf00      	nop
 8007994:	e7fe      	b.n	8007994 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007996:	235c      	movs	r3, #92	; 0x5c
 8007998:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	2b5c      	cmp	r3, #92	; 0x5c
 800799e:	d00a      	beq.n	80079b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	61bb      	str	r3, [r7, #24]
}
 80079b2:	bf00      	nop
 80079b4:	e7fe      	b.n	80079b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80079b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80079b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d01e      	beq.n	80079fc <xTaskCreateStatic+0xac>
 80079be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d01b      	beq.n	80079fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80079ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d0:	2202      	movs	r2, #2
 80079d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80079d6:	2300      	movs	r3, #0
 80079d8:	9303      	str	r3, [sp, #12]
 80079da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079dc:	9302      	str	r3, [sp, #8]
 80079de:	f107 0314 	add.w	r3, r7, #20
 80079e2:	9301      	str	r3, [sp, #4]
 80079e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	68b9      	ldr	r1, [r7, #8]
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f000 f850 	bl	8007a94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079f6:	f000 f8dd 	bl	8007bb4 <prvAddNewTaskToReadyList>
 80079fa:	e001      	b.n	8007a00 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80079fc:	2300      	movs	r3, #0
 80079fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007a00:	697b      	ldr	r3, [r7, #20]
	}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3728      	adds	r7, #40	; 0x28
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b08c      	sub	sp, #48	; 0x30
 8007a0e:	af04      	add	r7, sp, #16
 8007a10:	60f8      	str	r0, [r7, #12]
 8007a12:	60b9      	str	r1, [r7, #8]
 8007a14:	603b      	str	r3, [r7, #0]
 8007a16:	4613      	mov	r3, r2
 8007a18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a1a:	88fb      	ldrh	r3, [r7, #6]
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f001 fc32 	bl	8009288 <pvPortMalloc>
 8007a24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00e      	beq.n	8007a4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a2c:	205c      	movs	r0, #92	; 0x5c
 8007a2e:	f001 fc2b 	bl	8009288 <pvPortMalloc>
 8007a32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	697a      	ldr	r2, [r7, #20]
 8007a3e:	631a      	str	r2, [r3, #48]	; 0x30
 8007a40:	e005      	b.n	8007a4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a42:	6978      	ldr	r0, [r7, #20]
 8007a44:	f001 fcec 	bl	8009420 <vPortFree>
 8007a48:	e001      	b.n	8007a4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d017      	beq.n	8007a84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a5c:	88fa      	ldrh	r2, [r7, #6]
 8007a5e:	2300      	movs	r3, #0
 8007a60:	9303      	str	r3, [sp, #12]
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	9302      	str	r3, [sp, #8]
 8007a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a68:	9301      	str	r3, [sp, #4]
 8007a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	68b9      	ldr	r1, [r7, #8]
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f000 f80e 	bl	8007a94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a78:	69f8      	ldr	r0, [r7, #28]
 8007a7a:	f000 f89b 	bl	8007bb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	61bb      	str	r3, [r7, #24]
 8007a82:	e002      	b.n	8007a8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a8a:	69bb      	ldr	r3, [r7, #24]
	}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3720      	adds	r7, #32
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b088      	sub	sp, #32
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
 8007aa0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	461a      	mov	r2, r3
 8007aac:	21a5      	movs	r1, #165	; 0xa5
 8007aae:	f002 f83f 	bl	8009b30 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007abc:	3b01      	subs	r3, #1
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	f023 0307 	bic.w	r3, r3, #7
 8007aca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	f003 0307 	and.w	r3, r3, #7
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00a      	beq.n	8007aec <prvInitialiseNewTask+0x58>
	__asm volatile
 8007ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	617b      	str	r3, [r7, #20]
}
 8007ae8:	bf00      	nop
 8007aea:	e7fe      	b.n	8007aea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d01f      	beq.n	8007b32 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007af2:	2300      	movs	r3, #0
 8007af4:	61fb      	str	r3, [r7, #28]
 8007af6:	e012      	b.n	8007b1e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	4413      	add	r3, r2
 8007afe:	7819      	ldrb	r1, [r3, #0]
 8007b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	4413      	add	r3, r2
 8007b06:	3334      	adds	r3, #52	; 0x34
 8007b08:	460a      	mov	r2, r1
 8007b0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	4413      	add	r3, r2
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d006      	beq.n	8007b26 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	61fb      	str	r3, [r7, #28]
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	2b0f      	cmp	r3, #15
 8007b22:	d9e9      	bls.n	8007af8 <prvInitialiseNewTask+0x64>
 8007b24:	e000      	b.n	8007b28 <prvInitialiseNewTask+0x94>
			{
				break;
 8007b26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b30:	e003      	b.n	8007b3a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3c:	2b37      	cmp	r3, #55	; 0x37
 8007b3e:	d901      	bls.n	8007b44 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b40:	2337      	movs	r3, #55	; 0x37
 8007b42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b52:	2200      	movs	r2, #0
 8007b54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b58:	3304      	adds	r3, #4
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7ff f978 	bl	8006e50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b62:	3318      	adds	r3, #24
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7ff f973 	bl	8006e50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b82:	2200      	movs	r2, #0
 8007b84:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	68f9      	ldr	r1, [r7, #12]
 8007b92:	69b8      	ldr	r0, [r7, #24]
 8007b94:	f001 f928 	bl	8008de8 <pxPortInitialiseStack>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ba8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007baa:	bf00      	nop
 8007bac:	3720      	adds	r7, #32
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007bbc:	f001 fa42 	bl	8009044 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007bc0:	4b2d      	ldr	r3, [pc, #180]	; (8007c78 <prvAddNewTaskToReadyList+0xc4>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	4a2c      	ldr	r2, [pc, #176]	; (8007c78 <prvAddNewTaskToReadyList+0xc4>)
 8007bc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007bca:	4b2c      	ldr	r3, [pc, #176]	; (8007c7c <prvAddNewTaskToReadyList+0xc8>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d109      	bne.n	8007be6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007bd2:	4a2a      	ldr	r2, [pc, #168]	; (8007c7c <prvAddNewTaskToReadyList+0xc8>)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007bd8:	4b27      	ldr	r3, [pc, #156]	; (8007c78 <prvAddNewTaskToReadyList+0xc4>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d110      	bne.n	8007c02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007be0:	f000 fc16 	bl	8008410 <prvInitialiseTaskLists>
 8007be4:	e00d      	b.n	8007c02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007be6:	4b26      	ldr	r3, [pc, #152]	; (8007c80 <prvAddNewTaskToReadyList+0xcc>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d109      	bne.n	8007c02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007bee:	4b23      	ldr	r3, [pc, #140]	; (8007c7c <prvAddNewTaskToReadyList+0xc8>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d802      	bhi.n	8007c02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007bfc:	4a1f      	ldr	r2, [pc, #124]	; (8007c7c <prvAddNewTaskToReadyList+0xc8>)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c02:	4b20      	ldr	r3, [pc, #128]	; (8007c84 <prvAddNewTaskToReadyList+0xd0>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	3301      	adds	r3, #1
 8007c08:	4a1e      	ldr	r2, [pc, #120]	; (8007c84 <prvAddNewTaskToReadyList+0xd0>)
 8007c0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007c0c:	4b1d      	ldr	r3, [pc, #116]	; (8007c84 <prvAddNewTaskToReadyList+0xd0>)
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c18:	4b1b      	ldr	r3, [pc, #108]	; (8007c88 <prvAddNewTaskToReadyList+0xd4>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d903      	bls.n	8007c28 <prvAddNewTaskToReadyList+0x74>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c24:	4a18      	ldr	r2, [pc, #96]	; (8007c88 <prvAddNewTaskToReadyList+0xd4>)
 8007c26:	6013      	str	r3, [r2, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4a15      	ldr	r2, [pc, #84]	; (8007c8c <prvAddNewTaskToReadyList+0xd8>)
 8007c36:	441a      	add	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	4610      	mov	r0, r2
 8007c40:	f7ff f913 	bl	8006e6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c44:	f001 fa2e 	bl	80090a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007c48:	4b0d      	ldr	r3, [pc, #52]	; (8007c80 <prvAddNewTaskToReadyList+0xcc>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00e      	beq.n	8007c6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007c50:	4b0a      	ldr	r3, [pc, #40]	; (8007c7c <prvAddNewTaskToReadyList+0xc8>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d207      	bcs.n	8007c6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007c5e:	4b0c      	ldr	r3, [pc, #48]	; (8007c90 <prvAddNewTaskToReadyList+0xdc>)
 8007c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c64:	601a      	str	r2, [r3, #0]
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c6e:	bf00      	nop
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	20000c4c 	.word	0x20000c4c
 8007c7c:	20000778 	.word	0x20000778
 8007c80:	20000c58 	.word	0x20000c58
 8007c84:	20000c68 	.word	0x20000c68
 8007c88:	20000c54 	.word	0x20000c54
 8007c8c:	2000077c 	.word	0x2000077c
 8007c90:	e000ed04 	.word	0xe000ed04

08007c94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d017      	beq.n	8007cd6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ca6:	4b13      	ldr	r3, [pc, #76]	; (8007cf4 <vTaskDelay+0x60>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00a      	beq.n	8007cc4 <vTaskDelay+0x30>
	__asm volatile
 8007cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	60bb      	str	r3, [r7, #8]
}
 8007cc0:	bf00      	nop
 8007cc2:	e7fe      	b.n	8007cc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007cc4:	f000 f880 	bl	8007dc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007cc8:	2100      	movs	r1, #0
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fcea 	bl	80086a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007cd0:	f000 f888 	bl	8007de4 <xTaskResumeAll>
 8007cd4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d107      	bne.n	8007cec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007cdc:	4b06      	ldr	r3, [pc, #24]	; (8007cf8 <vTaskDelay+0x64>)
 8007cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007cec:	bf00      	nop
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	20000c74 	.word	0x20000c74
 8007cf8:	e000ed04 	.word	0xe000ed04

08007cfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b08a      	sub	sp, #40	; 0x28
 8007d00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d02:	2300      	movs	r3, #0
 8007d04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d06:	2300      	movs	r3, #0
 8007d08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d0a:	463a      	mov	r2, r7
 8007d0c:	1d39      	adds	r1, r7, #4
 8007d0e:	f107 0308 	add.w	r3, r7, #8
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7ff f848 	bl	8006da8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	9202      	str	r2, [sp, #8]
 8007d20:	9301      	str	r3, [sp, #4]
 8007d22:	2300      	movs	r3, #0
 8007d24:	9300      	str	r3, [sp, #0]
 8007d26:	2300      	movs	r3, #0
 8007d28:	460a      	mov	r2, r1
 8007d2a:	4921      	ldr	r1, [pc, #132]	; (8007db0 <vTaskStartScheduler+0xb4>)
 8007d2c:	4821      	ldr	r0, [pc, #132]	; (8007db4 <vTaskStartScheduler+0xb8>)
 8007d2e:	f7ff fe0f 	bl	8007950 <xTaskCreateStatic>
 8007d32:	4603      	mov	r3, r0
 8007d34:	4a20      	ldr	r2, [pc, #128]	; (8007db8 <vTaskStartScheduler+0xbc>)
 8007d36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d38:	4b1f      	ldr	r3, [pc, #124]	; (8007db8 <vTaskStartScheduler+0xbc>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d002      	beq.n	8007d46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d40:	2301      	movs	r3, #1
 8007d42:	617b      	str	r3, [r7, #20]
 8007d44:	e001      	b.n	8007d4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d46:	2300      	movs	r3, #0
 8007d48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d102      	bne.n	8007d56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007d50:	f000 fcfc 	bl	800874c <xTimerCreateTimerTask>
 8007d54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d116      	bne.n	8007d8a <vTaskStartScheduler+0x8e>
	__asm volatile
 8007d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d60:	f383 8811 	msr	BASEPRI, r3
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	613b      	str	r3, [r7, #16]
}
 8007d6e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d70:	4b12      	ldr	r3, [pc, #72]	; (8007dbc <vTaskStartScheduler+0xc0>)
 8007d72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d78:	4b11      	ldr	r3, [pc, #68]	; (8007dc0 <vTaskStartScheduler+0xc4>)
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007d7e:	4b11      	ldr	r3, [pc, #68]	; (8007dc4 <vTaskStartScheduler+0xc8>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007d84:	f001 f8bc 	bl	8008f00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007d88:	e00e      	b.n	8007da8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d90:	d10a      	bne.n	8007da8 <vTaskStartScheduler+0xac>
	__asm volatile
 8007d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	60fb      	str	r3, [r7, #12]
}
 8007da4:	bf00      	nop
 8007da6:	e7fe      	b.n	8007da6 <vTaskStartScheduler+0xaa>
}
 8007da8:	bf00      	nop
 8007daa:	3718      	adds	r7, #24
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	0800a41c 	.word	0x0800a41c
 8007db4:	080083e1 	.word	0x080083e1
 8007db8:	20000c70 	.word	0x20000c70
 8007dbc:	20000c6c 	.word	0x20000c6c
 8007dc0:	20000c58 	.word	0x20000c58
 8007dc4:	20000c50 	.word	0x20000c50

08007dc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007dc8:	b480      	push	{r7}
 8007dca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007dcc:	4b04      	ldr	r3, [pc, #16]	; (8007de0 <vTaskSuspendAll+0x18>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	4a03      	ldr	r2, [pc, #12]	; (8007de0 <vTaskSuspendAll+0x18>)
 8007dd4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007dd6:	bf00      	nop
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr
 8007de0:	20000c74 	.word	0x20000c74

08007de4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007dee:	2300      	movs	r3, #0
 8007df0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007df2:	4b42      	ldr	r3, [pc, #264]	; (8007efc <xTaskResumeAll+0x118>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10a      	bne.n	8007e10 <xTaskResumeAll+0x2c>
	__asm volatile
 8007dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	603b      	str	r3, [r7, #0]
}
 8007e0c:	bf00      	nop
 8007e0e:	e7fe      	b.n	8007e0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e10:	f001 f918 	bl	8009044 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e14:	4b39      	ldr	r3, [pc, #228]	; (8007efc <xTaskResumeAll+0x118>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	4a38      	ldr	r2, [pc, #224]	; (8007efc <xTaskResumeAll+0x118>)
 8007e1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e1e:	4b37      	ldr	r3, [pc, #220]	; (8007efc <xTaskResumeAll+0x118>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d162      	bne.n	8007eec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e26:	4b36      	ldr	r3, [pc, #216]	; (8007f00 <xTaskResumeAll+0x11c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d05e      	beq.n	8007eec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e2e:	e02f      	b.n	8007e90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e30:	4b34      	ldr	r3, [pc, #208]	; (8007f04 <xTaskResumeAll+0x120>)
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	3318      	adds	r3, #24
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7ff f871 	bl	8006f24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	3304      	adds	r3, #4
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7ff f86c 	bl	8006f24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e50:	4b2d      	ldr	r3, [pc, #180]	; (8007f08 <xTaskResumeAll+0x124>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d903      	bls.n	8007e60 <xTaskResumeAll+0x7c>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5c:	4a2a      	ldr	r2, [pc, #168]	; (8007f08 <xTaskResumeAll+0x124>)
 8007e5e:	6013      	str	r3, [r2, #0]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e64:	4613      	mov	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4a27      	ldr	r2, [pc, #156]	; (8007f0c <xTaskResumeAll+0x128>)
 8007e6e:	441a      	add	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	3304      	adds	r3, #4
 8007e74:	4619      	mov	r1, r3
 8007e76:	4610      	mov	r0, r2
 8007e78:	f7fe fff7 	bl	8006e6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e80:	4b23      	ldr	r3, [pc, #140]	; (8007f10 <xTaskResumeAll+0x12c>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d302      	bcc.n	8007e90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007e8a:	4b22      	ldr	r3, [pc, #136]	; (8007f14 <xTaskResumeAll+0x130>)
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e90:	4b1c      	ldr	r3, [pc, #112]	; (8007f04 <xTaskResumeAll+0x120>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1cb      	bne.n	8007e30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d001      	beq.n	8007ea2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e9e:	f000 fb55 	bl	800854c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007ea2:	4b1d      	ldr	r3, [pc, #116]	; (8007f18 <xTaskResumeAll+0x134>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d010      	beq.n	8007ed0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007eae:	f000 f847 	bl	8007f40 <xTaskIncrementTick>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d002      	beq.n	8007ebe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007eb8:	4b16      	ldr	r3, [pc, #88]	; (8007f14 <xTaskResumeAll+0x130>)
 8007eba:	2201      	movs	r2, #1
 8007ebc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1f1      	bne.n	8007eae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007eca:	4b13      	ldr	r3, [pc, #76]	; (8007f18 <xTaskResumeAll+0x134>)
 8007ecc:	2200      	movs	r2, #0
 8007ece:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ed0:	4b10      	ldr	r3, [pc, #64]	; (8007f14 <xTaskResumeAll+0x130>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d009      	beq.n	8007eec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007edc:	4b0f      	ldr	r3, [pc, #60]	; (8007f1c <xTaskResumeAll+0x138>)
 8007ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007eec:	f001 f8da 	bl	80090a4 <vPortExitCritical>

	return xAlreadyYielded;
 8007ef0:	68bb      	ldr	r3, [r7, #8]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	20000c74 	.word	0x20000c74
 8007f00:	20000c4c 	.word	0x20000c4c
 8007f04:	20000c0c 	.word	0x20000c0c
 8007f08:	20000c54 	.word	0x20000c54
 8007f0c:	2000077c 	.word	0x2000077c
 8007f10:	20000778 	.word	0x20000778
 8007f14:	20000c60 	.word	0x20000c60
 8007f18:	20000c5c 	.word	0x20000c5c
 8007f1c:	e000ed04 	.word	0xe000ed04

08007f20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007f26:	4b05      	ldr	r3, [pc, #20]	; (8007f3c <xTaskGetTickCount+0x1c>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007f2c:	687b      	ldr	r3, [r7, #4]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	20000c50 	.word	0x20000c50

08007f40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f46:	2300      	movs	r3, #0
 8007f48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f4a:	4b4f      	ldr	r3, [pc, #316]	; (8008088 <xTaskIncrementTick+0x148>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f040 808f 	bne.w	8008072 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f54:	4b4d      	ldr	r3, [pc, #308]	; (800808c <xTaskIncrementTick+0x14c>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f5c:	4a4b      	ldr	r2, [pc, #300]	; (800808c <xTaskIncrementTick+0x14c>)
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d120      	bne.n	8007faa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007f68:	4b49      	ldr	r3, [pc, #292]	; (8008090 <xTaskIncrementTick+0x150>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00a      	beq.n	8007f88 <xTaskIncrementTick+0x48>
	__asm volatile
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	603b      	str	r3, [r7, #0]
}
 8007f84:	bf00      	nop
 8007f86:	e7fe      	b.n	8007f86 <xTaskIncrementTick+0x46>
 8007f88:	4b41      	ldr	r3, [pc, #260]	; (8008090 <xTaskIncrementTick+0x150>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	60fb      	str	r3, [r7, #12]
 8007f8e:	4b41      	ldr	r3, [pc, #260]	; (8008094 <xTaskIncrementTick+0x154>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a3f      	ldr	r2, [pc, #252]	; (8008090 <xTaskIncrementTick+0x150>)
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	4a3f      	ldr	r2, [pc, #252]	; (8008094 <xTaskIncrementTick+0x154>)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6013      	str	r3, [r2, #0]
 8007f9c:	4b3e      	ldr	r3, [pc, #248]	; (8008098 <xTaskIncrementTick+0x158>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	4a3d      	ldr	r2, [pc, #244]	; (8008098 <xTaskIncrementTick+0x158>)
 8007fa4:	6013      	str	r3, [r2, #0]
 8007fa6:	f000 fad1 	bl	800854c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007faa:	4b3c      	ldr	r3, [pc, #240]	; (800809c <xTaskIncrementTick+0x15c>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d349      	bcc.n	8008048 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fb4:	4b36      	ldr	r3, [pc, #216]	; (8008090 <xTaskIncrementTick+0x150>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d104      	bne.n	8007fc8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fbe:	4b37      	ldr	r3, [pc, #220]	; (800809c <xTaskIncrementTick+0x15c>)
 8007fc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fc4:	601a      	str	r2, [r3, #0]
					break;
 8007fc6:	e03f      	b.n	8008048 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fc8:	4b31      	ldr	r3, [pc, #196]	; (8008090 <xTaskIncrementTick+0x150>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d203      	bcs.n	8007fe8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007fe0:	4a2e      	ldr	r2, [pc, #184]	; (800809c <xTaskIncrementTick+0x15c>)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007fe6:	e02f      	b.n	8008048 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	3304      	adds	r3, #4
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fe ff99 	bl	8006f24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d004      	beq.n	8008004 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	3318      	adds	r3, #24
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fe ff90 	bl	8006f24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008008:	4b25      	ldr	r3, [pc, #148]	; (80080a0 <xTaskIncrementTick+0x160>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	429a      	cmp	r2, r3
 800800e:	d903      	bls.n	8008018 <xTaskIncrementTick+0xd8>
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008014:	4a22      	ldr	r2, [pc, #136]	; (80080a0 <xTaskIncrementTick+0x160>)
 8008016:	6013      	str	r3, [r2, #0]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800801c:	4613      	mov	r3, r2
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	4413      	add	r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4a1f      	ldr	r2, [pc, #124]	; (80080a4 <xTaskIncrementTick+0x164>)
 8008026:	441a      	add	r2, r3
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	3304      	adds	r3, #4
 800802c:	4619      	mov	r1, r3
 800802e:	4610      	mov	r0, r2
 8008030:	f7fe ff1b 	bl	8006e6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008038:	4b1b      	ldr	r3, [pc, #108]	; (80080a8 <xTaskIncrementTick+0x168>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803e:	429a      	cmp	r2, r3
 8008040:	d3b8      	bcc.n	8007fb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008042:	2301      	movs	r3, #1
 8008044:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008046:	e7b5      	b.n	8007fb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008048:	4b17      	ldr	r3, [pc, #92]	; (80080a8 <xTaskIncrementTick+0x168>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800804e:	4915      	ldr	r1, [pc, #84]	; (80080a4 <xTaskIncrementTick+0x164>)
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	440b      	add	r3, r1
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d901      	bls.n	8008064 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008060:	2301      	movs	r3, #1
 8008062:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008064:	4b11      	ldr	r3, [pc, #68]	; (80080ac <xTaskIncrementTick+0x16c>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d007      	beq.n	800807c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800806c:	2301      	movs	r3, #1
 800806e:	617b      	str	r3, [r7, #20]
 8008070:	e004      	b.n	800807c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008072:	4b0f      	ldr	r3, [pc, #60]	; (80080b0 <xTaskIncrementTick+0x170>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	3301      	adds	r3, #1
 8008078:	4a0d      	ldr	r2, [pc, #52]	; (80080b0 <xTaskIncrementTick+0x170>)
 800807a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800807c:	697b      	ldr	r3, [r7, #20]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3718      	adds	r7, #24
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	20000c74 	.word	0x20000c74
 800808c:	20000c50 	.word	0x20000c50
 8008090:	20000c04 	.word	0x20000c04
 8008094:	20000c08 	.word	0x20000c08
 8008098:	20000c64 	.word	0x20000c64
 800809c:	20000c6c 	.word	0x20000c6c
 80080a0:	20000c54 	.word	0x20000c54
 80080a4:	2000077c 	.word	0x2000077c
 80080a8:	20000778 	.word	0x20000778
 80080ac:	20000c60 	.word	0x20000c60
 80080b0:	20000c5c 	.word	0x20000c5c

080080b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080ba:	4b28      	ldr	r3, [pc, #160]	; (800815c <vTaskSwitchContext+0xa8>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80080c2:	4b27      	ldr	r3, [pc, #156]	; (8008160 <vTaskSwitchContext+0xac>)
 80080c4:	2201      	movs	r2, #1
 80080c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80080c8:	e041      	b.n	800814e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80080ca:	4b25      	ldr	r3, [pc, #148]	; (8008160 <vTaskSwitchContext+0xac>)
 80080cc:	2200      	movs	r2, #0
 80080ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080d0:	4b24      	ldr	r3, [pc, #144]	; (8008164 <vTaskSwitchContext+0xb0>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	60fb      	str	r3, [r7, #12]
 80080d6:	e010      	b.n	80080fa <vTaskSwitchContext+0x46>
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d10a      	bne.n	80080f4 <vTaskSwitchContext+0x40>
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	607b      	str	r3, [r7, #4]
}
 80080f0:	bf00      	nop
 80080f2:	e7fe      	b.n	80080f2 <vTaskSwitchContext+0x3e>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	3b01      	subs	r3, #1
 80080f8:	60fb      	str	r3, [r7, #12]
 80080fa:	491b      	ldr	r1, [pc, #108]	; (8008168 <vTaskSwitchContext+0xb4>)
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	4613      	mov	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	440b      	add	r3, r1
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d0e4      	beq.n	80080d8 <vTaskSwitchContext+0x24>
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	4613      	mov	r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4413      	add	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4a13      	ldr	r2, [pc, #76]	; (8008168 <vTaskSwitchContext+0xb4>)
 800811a:	4413      	add	r3, r2
 800811c:	60bb      	str	r3, [r7, #8]
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	685a      	ldr	r2, [r3, #4]
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	605a      	str	r2, [r3, #4]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	685a      	ldr	r2, [r3, #4]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	3308      	adds	r3, #8
 8008130:	429a      	cmp	r2, r3
 8008132:	d104      	bne.n	800813e <vTaskSwitchContext+0x8a>
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	685a      	ldr	r2, [r3, #4]
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	605a      	str	r2, [r3, #4]
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	4a09      	ldr	r2, [pc, #36]	; (800816c <vTaskSwitchContext+0xb8>)
 8008146:	6013      	str	r3, [r2, #0]
 8008148:	4a06      	ldr	r2, [pc, #24]	; (8008164 <vTaskSwitchContext+0xb0>)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6013      	str	r3, [r2, #0]
}
 800814e:	bf00      	nop
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	20000c74 	.word	0x20000c74
 8008160:	20000c60 	.word	0x20000c60
 8008164:	20000c54 	.word	0x20000c54
 8008168:	2000077c 	.word	0x2000077c
 800816c:	20000778 	.word	0x20000778

08008170 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10a      	bne.n	8008196 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	60fb      	str	r3, [r7, #12]
}
 8008192:	bf00      	nop
 8008194:	e7fe      	b.n	8008194 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008196:	4b07      	ldr	r3, [pc, #28]	; (80081b4 <vTaskPlaceOnEventList+0x44>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	3318      	adds	r3, #24
 800819c:	4619      	mov	r1, r3
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f7fe fe87 	bl	8006eb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80081a4:	2101      	movs	r1, #1
 80081a6:	6838      	ldr	r0, [r7, #0]
 80081a8:	f000 fa7c 	bl	80086a4 <prvAddCurrentTaskToDelayedList>
}
 80081ac:	bf00      	nop
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	20000778 	.word	0x20000778

080081b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10a      	bne.n	80081e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80081ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	617b      	str	r3, [r7, #20]
}
 80081dc:	bf00      	nop
 80081de:	e7fe      	b.n	80081de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081e0:	4b0a      	ldr	r3, [pc, #40]	; (800820c <vTaskPlaceOnEventListRestricted+0x54>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	3318      	adds	r3, #24
 80081e6:	4619      	mov	r1, r3
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f7fe fe3e 	bl	8006e6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d002      	beq.n	80081fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80081f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	68b8      	ldr	r0, [r7, #8]
 80081fe:	f000 fa51 	bl	80086a4 <prvAddCurrentTaskToDelayedList>
	}
 8008202:	bf00      	nop
 8008204:	3718      	adds	r7, #24
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	20000778 	.word	0x20000778

08008210 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10a      	bne.n	800823c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	60fb      	str	r3, [r7, #12]
}
 8008238:	bf00      	nop
 800823a:	e7fe      	b.n	800823a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	3318      	adds	r3, #24
 8008240:	4618      	mov	r0, r3
 8008242:	f7fe fe6f 	bl	8006f24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008246:	4b1e      	ldr	r3, [pc, #120]	; (80082c0 <xTaskRemoveFromEventList+0xb0>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d11d      	bne.n	800828a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	3304      	adds	r3, #4
 8008252:	4618      	mov	r0, r3
 8008254:	f7fe fe66 	bl	8006f24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800825c:	4b19      	ldr	r3, [pc, #100]	; (80082c4 <xTaskRemoveFromEventList+0xb4>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	429a      	cmp	r2, r3
 8008262:	d903      	bls.n	800826c <xTaskRemoveFromEventList+0x5c>
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008268:	4a16      	ldr	r2, [pc, #88]	; (80082c4 <xTaskRemoveFromEventList+0xb4>)
 800826a:	6013      	str	r3, [r2, #0]
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008270:	4613      	mov	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4413      	add	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4a13      	ldr	r2, [pc, #76]	; (80082c8 <xTaskRemoveFromEventList+0xb8>)
 800827a:	441a      	add	r2, r3
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	3304      	adds	r3, #4
 8008280:	4619      	mov	r1, r3
 8008282:	4610      	mov	r0, r2
 8008284:	f7fe fdf1 	bl	8006e6a <vListInsertEnd>
 8008288:	e005      	b.n	8008296 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	3318      	adds	r3, #24
 800828e:	4619      	mov	r1, r3
 8008290:	480e      	ldr	r0, [pc, #56]	; (80082cc <xTaskRemoveFromEventList+0xbc>)
 8008292:	f7fe fdea 	bl	8006e6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800829a:	4b0d      	ldr	r3, [pc, #52]	; (80082d0 <xTaskRemoveFromEventList+0xc0>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d905      	bls.n	80082b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80082a4:	2301      	movs	r3, #1
 80082a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80082a8:	4b0a      	ldr	r3, [pc, #40]	; (80082d4 <xTaskRemoveFromEventList+0xc4>)
 80082aa:	2201      	movs	r2, #1
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	e001      	b.n	80082b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80082b0:	2300      	movs	r3, #0
 80082b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80082b4:	697b      	ldr	r3, [r7, #20]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	20000c74 	.word	0x20000c74
 80082c4:	20000c54 	.word	0x20000c54
 80082c8:	2000077c 	.word	0x2000077c
 80082cc:	20000c0c 	.word	0x20000c0c
 80082d0:	20000778 	.word	0x20000778
 80082d4:	20000c60 	.word	0x20000c60

080082d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80082e0:	4b06      	ldr	r3, [pc, #24]	; (80082fc <vTaskInternalSetTimeOutState+0x24>)
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80082e8:	4b05      	ldr	r3, [pc, #20]	; (8008300 <vTaskInternalSetTimeOutState+0x28>)
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	605a      	str	r2, [r3, #4]
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	20000c64 	.word	0x20000c64
 8008300:	20000c50 	.word	0x20000c50

08008304 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b088      	sub	sp, #32
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d10a      	bne.n	800832a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008318:	f383 8811 	msr	BASEPRI, r3
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	613b      	str	r3, [r7, #16]
}
 8008326:	bf00      	nop
 8008328:	e7fe      	b.n	8008328 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10a      	bne.n	8008346 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	60fb      	str	r3, [r7, #12]
}
 8008342:	bf00      	nop
 8008344:	e7fe      	b.n	8008344 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008346:	f000 fe7d 	bl	8009044 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800834a:	4b1d      	ldr	r3, [pc, #116]	; (80083c0 <xTaskCheckForTimeOut+0xbc>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	69ba      	ldr	r2, [r7, #24]
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008362:	d102      	bne.n	800836a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008364:	2300      	movs	r3, #0
 8008366:	61fb      	str	r3, [r7, #28]
 8008368:	e023      	b.n	80083b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	4b15      	ldr	r3, [pc, #84]	; (80083c4 <xTaskCheckForTimeOut+0xc0>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	429a      	cmp	r2, r3
 8008374:	d007      	beq.n	8008386 <xTaskCheckForTimeOut+0x82>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	69ba      	ldr	r2, [r7, #24]
 800837c:	429a      	cmp	r2, r3
 800837e:	d302      	bcc.n	8008386 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008380:	2301      	movs	r3, #1
 8008382:	61fb      	str	r3, [r7, #28]
 8008384:	e015      	b.n	80083b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	429a      	cmp	r2, r3
 800838e:	d20b      	bcs.n	80083a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	1ad2      	subs	r2, r2, r3
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7ff ff9b 	bl	80082d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80083a2:	2300      	movs	r3, #0
 80083a4:	61fb      	str	r3, [r7, #28]
 80083a6:	e004      	b.n	80083b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	2200      	movs	r2, #0
 80083ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80083ae:	2301      	movs	r3, #1
 80083b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80083b2:	f000 fe77 	bl	80090a4 <vPortExitCritical>

	return xReturn;
 80083b6:	69fb      	ldr	r3, [r7, #28]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3720      	adds	r7, #32
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	20000c50 	.word	0x20000c50
 80083c4:	20000c64 	.word	0x20000c64

080083c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80083c8:	b480      	push	{r7}
 80083ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80083cc:	4b03      	ldr	r3, [pc, #12]	; (80083dc <vTaskMissedYield+0x14>)
 80083ce:	2201      	movs	r2, #1
 80083d0:	601a      	str	r2, [r3, #0]
}
 80083d2:	bf00      	nop
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	20000c60 	.word	0x20000c60

080083e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80083e8:	f000 f852 	bl	8008490 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80083ec:	4b06      	ldr	r3, [pc, #24]	; (8008408 <prvIdleTask+0x28>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d9f9      	bls.n	80083e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80083f4:	4b05      	ldr	r3, [pc, #20]	; (800840c <prvIdleTask+0x2c>)
 80083f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083fa:	601a      	str	r2, [r3, #0]
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008404:	e7f0      	b.n	80083e8 <prvIdleTask+0x8>
 8008406:	bf00      	nop
 8008408:	2000077c 	.word	0x2000077c
 800840c:	e000ed04 	.word	0xe000ed04

08008410 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008416:	2300      	movs	r3, #0
 8008418:	607b      	str	r3, [r7, #4]
 800841a:	e00c      	b.n	8008436 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	4613      	mov	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4413      	add	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4a12      	ldr	r2, [pc, #72]	; (8008470 <prvInitialiseTaskLists+0x60>)
 8008428:	4413      	add	r3, r2
 800842a:	4618      	mov	r0, r3
 800842c:	f7fe fcf0 	bl	8006e10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	3301      	adds	r3, #1
 8008434:	607b      	str	r3, [r7, #4]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b37      	cmp	r3, #55	; 0x37
 800843a:	d9ef      	bls.n	800841c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800843c:	480d      	ldr	r0, [pc, #52]	; (8008474 <prvInitialiseTaskLists+0x64>)
 800843e:	f7fe fce7 	bl	8006e10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008442:	480d      	ldr	r0, [pc, #52]	; (8008478 <prvInitialiseTaskLists+0x68>)
 8008444:	f7fe fce4 	bl	8006e10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008448:	480c      	ldr	r0, [pc, #48]	; (800847c <prvInitialiseTaskLists+0x6c>)
 800844a:	f7fe fce1 	bl	8006e10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800844e:	480c      	ldr	r0, [pc, #48]	; (8008480 <prvInitialiseTaskLists+0x70>)
 8008450:	f7fe fcde 	bl	8006e10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008454:	480b      	ldr	r0, [pc, #44]	; (8008484 <prvInitialiseTaskLists+0x74>)
 8008456:	f7fe fcdb 	bl	8006e10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800845a:	4b0b      	ldr	r3, [pc, #44]	; (8008488 <prvInitialiseTaskLists+0x78>)
 800845c:	4a05      	ldr	r2, [pc, #20]	; (8008474 <prvInitialiseTaskLists+0x64>)
 800845e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008460:	4b0a      	ldr	r3, [pc, #40]	; (800848c <prvInitialiseTaskLists+0x7c>)
 8008462:	4a05      	ldr	r2, [pc, #20]	; (8008478 <prvInitialiseTaskLists+0x68>)
 8008464:	601a      	str	r2, [r3, #0]
}
 8008466:	bf00      	nop
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	2000077c 	.word	0x2000077c
 8008474:	20000bdc 	.word	0x20000bdc
 8008478:	20000bf0 	.word	0x20000bf0
 800847c:	20000c0c 	.word	0x20000c0c
 8008480:	20000c20 	.word	0x20000c20
 8008484:	20000c38 	.word	0x20000c38
 8008488:	20000c04 	.word	0x20000c04
 800848c:	20000c08 	.word	0x20000c08

08008490 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008496:	e019      	b.n	80084cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008498:	f000 fdd4 	bl	8009044 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800849c:	4b10      	ldr	r3, [pc, #64]	; (80084e0 <prvCheckTasksWaitingTermination+0x50>)
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	3304      	adds	r3, #4
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7fe fd3b 	bl	8006f24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80084ae:	4b0d      	ldr	r3, [pc, #52]	; (80084e4 <prvCheckTasksWaitingTermination+0x54>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3b01      	subs	r3, #1
 80084b4:	4a0b      	ldr	r2, [pc, #44]	; (80084e4 <prvCheckTasksWaitingTermination+0x54>)
 80084b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80084b8:	4b0b      	ldr	r3, [pc, #44]	; (80084e8 <prvCheckTasksWaitingTermination+0x58>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	3b01      	subs	r3, #1
 80084be:	4a0a      	ldr	r2, [pc, #40]	; (80084e8 <prvCheckTasksWaitingTermination+0x58>)
 80084c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80084c2:	f000 fdef 	bl	80090a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f810 	bl	80084ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084cc:	4b06      	ldr	r3, [pc, #24]	; (80084e8 <prvCheckTasksWaitingTermination+0x58>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1e1      	bne.n	8008498 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80084d4:	bf00      	nop
 80084d6:	bf00      	nop
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	20000c20 	.word	0x20000c20
 80084e4:	20000c4c 	.word	0x20000c4c
 80084e8:	20000c34 	.word	0x20000c34

080084ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d108      	bne.n	8008510 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008502:	4618      	mov	r0, r3
 8008504:	f000 ff8c 	bl	8009420 <vPortFree>
				vPortFree( pxTCB );
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 ff89 	bl	8009420 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800850e:	e018      	b.n	8008542 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008516:	2b01      	cmp	r3, #1
 8008518:	d103      	bne.n	8008522 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 ff80 	bl	8009420 <vPortFree>
	}
 8008520:	e00f      	b.n	8008542 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008528:	2b02      	cmp	r3, #2
 800852a:	d00a      	beq.n	8008542 <prvDeleteTCB+0x56>
	__asm volatile
 800852c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	60fb      	str	r3, [r7, #12]
}
 800853e:	bf00      	nop
 8008540:	e7fe      	b.n	8008540 <prvDeleteTCB+0x54>
	}
 8008542:	bf00      	nop
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
	...

0800854c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008552:	4b0c      	ldr	r3, [pc, #48]	; (8008584 <prvResetNextTaskUnblockTime+0x38>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d104      	bne.n	8008566 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800855c:	4b0a      	ldr	r3, [pc, #40]	; (8008588 <prvResetNextTaskUnblockTime+0x3c>)
 800855e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008562:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008564:	e008      	b.n	8008578 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008566:	4b07      	ldr	r3, [pc, #28]	; (8008584 <prvResetNextTaskUnblockTime+0x38>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	4a04      	ldr	r2, [pc, #16]	; (8008588 <prvResetNextTaskUnblockTime+0x3c>)
 8008576:	6013      	str	r3, [r2, #0]
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr
 8008584:	20000c04 	.word	0x20000c04
 8008588:	20000c6c 	.word	0x20000c6c

0800858c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008592:	4b0b      	ldr	r3, [pc, #44]	; (80085c0 <xTaskGetSchedulerState+0x34>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d102      	bne.n	80085a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800859a:	2301      	movs	r3, #1
 800859c:	607b      	str	r3, [r7, #4]
 800859e:	e008      	b.n	80085b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085a0:	4b08      	ldr	r3, [pc, #32]	; (80085c4 <xTaskGetSchedulerState+0x38>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d102      	bne.n	80085ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80085a8:	2302      	movs	r3, #2
 80085aa:	607b      	str	r3, [r7, #4]
 80085ac:	e001      	b.n	80085b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80085ae:	2300      	movs	r3, #0
 80085b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80085b2:	687b      	ldr	r3, [r7, #4]
	}
 80085b4:	4618      	mov	r0, r3
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr
 80085c0:	20000c58 	.word	0x20000c58
 80085c4:	20000c74 	.word	0x20000c74

080085c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80085d4:	2300      	movs	r3, #0
 80085d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d056      	beq.n	800868c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80085de:	4b2e      	ldr	r3, [pc, #184]	; (8008698 <xTaskPriorityDisinherit+0xd0>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d00a      	beq.n	80085fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80085e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ec:	f383 8811 	msr	BASEPRI, r3
 80085f0:	f3bf 8f6f 	isb	sy
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	60fb      	str	r3, [r7, #12]
}
 80085fa:	bf00      	nop
 80085fc:	e7fe      	b.n	80085fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10a      	bne.n	800861c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860a:	f383 8811 	msr	BASEPRI, r3
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	f3bf 8f4f 	dsb	sy
 8008616:	60bb      	str	r3, [r7, #8]
}
 8008618:	bf00      	nop
 800861a:	e7fe      	b.n	800861a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008620:	1e5a      	subs	r2, r3, #1
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800862e:	429a      	cmp	r2, r3
 8008630:	d02c      	beq.n	800868c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008636:	2b00      	cmp	r3, #0
 8008638:	d128      	bne.n	800868c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	3304      	adds	r3, #4
 800863e:	4618      	mov	r0, r3
 8008640:	f7fe fc70 	bl	8006f24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008650:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800865c:	4b0f      	ldr	r3, [pc, #60]	; (800869c <xTaskPriorityDisinherit+0xd4>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	429a      	cmp	r2, r3
 8008662:	d903      	bls.n	800866c <xTaskPriorityDisinherit+0xa4>
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008668:	4a0c      	ldr	r2, [pc, #48]	; (800869c <xTaskPriorityDisinherit+0xd4>)
 800866a:	6013      	str	r3, [r2, #0]
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008670:	4613      	mov	r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4413      	add	r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4a09      	ldr	r2, [pc, #36]	; (80086a0 <xTaskPriorityDisinherit+0xd8>)
 800867a:	441a      	add	r2, r3
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	3304      	adds	r3, #4
 8008680:	4619      	mov	r1, r3
 8008682:	4610      	mov	r0, r2
 8008684:	f7fe fbf1 	bl	8006e6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008688:	2301      	movs	r3, #1
 800868a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800868c:	697b      	ldr	r3, [r7, #20]
	}
 800868e:	4618      	mov	r0, r3
 8008690:	3718      	adds	r7, #24
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	20000778 	.word	0x20000778
 800869c:	20000c54 	.word	0x20000c54
 80086a0:	2000077c 	.word	0x2000077c

080086a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80086ae:	4b21      	ldr	r3, [pc, #132]	; (8008734 <prvAddCurrentTaskToDelayedList+0x90>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086b4:	4b20      	ldr	r3, [pc, #128]	; (8008738 <prvAddCurrentTaskToDelayedList+0x94>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	3304      	adds	r3, #4
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fe fc32 	bl	8006f24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086c6:	d10a      	bne.n	80086de <prvAddCurrentTaskToDelayedList+0x3a>
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d007      	beq.n	80086de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086ce:	4b1a      	ldr	r3, [pc, #104]	; (8008738 <prvAddCurrentTaskToDelayedList+0x94>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	3304      	adds	r3, #4
 80086d4:	4619      	mov	r1, r3
 80086d6:	4819      	ldr	r0, [pc, #100]	; (800873c <prvAddCurrentTaskToDelayedList+0x98>)
 80086d8:	f7fe fbc7 	bl	8006e6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80086dc:	e026      	b.n	800872c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4413      	add	r3, r2
 80086e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80086e6:	4b14      	ldr	r3, [pc, #80]	; (8008738 <prvAddCurrentTaskToDelayedList+0x94>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d209      	bcs.n	800870a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086f6:	4b12      	ldr	r3, [pc, #72]	; (8008740 <prvAddCurrentTaskToDelayedList+0x9c>)
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	4b0f      	ldr	r3, [pc, #60]	; (8008738 <prvAddCurrentTaskToDelayedList+0x94>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	3304      	adds	r3, #4
 8008700:	4619      	mov	r1, r3
 8008702:	4610      	mov	r0, r2
 8008704:	f7fe fbd5 	bl	8006eb2 <vListInsert>
}
 8008708:	e010      	b.n	800872c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800870a:	4b0e      	ldr	r3, [pc, #56]	; (8008744 <prvAddCurrentTaskToDelayedList+0xa0>)
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	4b0a      	ldr	r3, [pc, #40]	; (8008738 <prvAddCurrentTaskToDelayedList+0x94>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3304      	adds	r3, #4
 8008714:	4619      	mov	r1, r3
 8008716:	4610      	mov	r0, r2
 8008718:	f7fe fbcb 	bl	8006eb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800871c:	4b0a      	ldr	r3, [pc, #40]	; (8008748 <prvAddCurrentTaskToDelayedList+0xa4>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	429a      	cmp	r2, r3
 8008724:	d202      	bcs.n	800872c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008726:	4a08      	ldr	r2, [pc, #32]	; (8008748 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	6013      	str	r3, [r2, #0]
}
 800872c:	bf00      	nop
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	20000c50 	.word	0x20000c50
 8008738:	20000778 	.word	0x20000778
 800873c:	20000c38 	.word	0x20000c38
 8008740:	20000c08 	.word	0x20000c08
 8008744:	20000c04 	.word	0x20000c04
 8008748:	20000c6c 	.word	0x20000c6c

0800874c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b08a      	sub	sp, #40	; 0x28
 8008750:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008752:	2300      	movs	r3, #0
 8008754:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008756:	f000 fb07 	bl	8008d68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800875a:	4b1c      	ldr	r3, [pc, #112]	; (80087cc <xTimerCreateTimerTask+0x80>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d021      	beq.n	80087a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008762:	2300      	movs	r3, #0
 8008764:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008766:	2300      	movs	r3, #0
 8008768:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800876a:	1d3a      	adds	r2, r7, #4
 800876c:	f107 0108 	add.w	r1, r7, #8
 8008770:	f107 030c 	add.w	r3, r7, #12
 8008774:	4618      	mov	r0, r3
 8008776:	f7fe fb31 	bl	8006ddc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800877a:	6879      	ldr	r1, [r7, #4]
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	9202      	str	r2, [sp, #8]
 8008782:	9301      	str	r3, [sp, #4]
 8008784:	2302      	movs	r3, #2
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	2300      	movs	r3, #0
 800878a:	460a      	mov	r2, r1
 800878c:	4910      	ldr	r1, [pc, #64]	; (80087d0 <xTimerCreateTimerTask+0x84>)
 800878e:	4811      	ldr	r0, [pc, #68]	; (80087d4 <xTimerCreateTimerTask+0x88>)
 8008790:	f7ff f8de 	bl	8007950 <xTaskCreateStatic>
 8008794:	4603      	mov	r3, r0
 8008796:	4a10      	ldr	r2, [pc, #64]	; (80087d8 <xTimerCreateTimerTask+0x8c>)
 8008798:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800879a:	4b0f      	ldr	r3, [pc, #60]	; (80087d8 <xTimerCreateTimerTask+0x8c>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80087a2:	2301      	movs	r3, #1
 80087a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10a      	bne.n	80087c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80087ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	613b      	str	r3, [r7, #16]
}
 80087be:	bf00      	nop
 80087c0:	e7fe      	b.n	80087c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80087c2:	697b      	ldr	r3, [r7, #20]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3718      	adds	r7, #24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	20000ca8 	.word	0x20000ca8
 80087d0:	0800a424 	.word	0x0800a424
 80087d4:	08008911 	.word	0x08008911
 80087d8:	20000cac 	.word	0x20000cac

080087dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b08a      	sub	sp, #40	; 0x28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
 80087e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80087ea:	2300      	movs	r3, #0
 80087ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10a      	bne.n	800880a <xTimerGenericCommand+0x2e>
	__asm volatile
 80087f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f8:	f383 8811 	msr	BASEPRI, r3
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	623b      	str	r3, [r7, #32]
}
 8008806:	bf00      	nop
 8008808:	e7fe      	b.n	8008808 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800880a:	4b1a      	ldr	r3, [pc, #104]	; (8008874 <xTimerGenericCommand+0x98>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d02a      	beq.n	8008868 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2b05      	cmp	r3, #5
 8008822:	dc18      	bgt.n	8008856 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008824:	f7ff feb2 	bl	800858c <xTaskGetSchedulerState>
 8008828:	4603      	mov	r3, r0
 800882a:	2b02      	cmp	r3, #2
 800882c:	d109      	bne.n	8008842 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800882e:	4b11      	ldr	r3, [pc, #68]	; (8008874 <xTimerGenericCommand+0x98>)
 8008830:	6818      	ldr	r0, [r3, #0]
 8008832:	f107 0110 	add.w	r1, r7, #16
 8008836:	2300      	movs	r3, #0
 8008838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800883a:	f7fe fca1 	bl	8007180 <xQueueGenericSend>
 800883e:	6278      	str	r0, [r7, #36]	; 0x24
 8008840:	e012      	b.n	8008868 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008842:	4b0c      	ldr	r3, [pc, #48]	; (8008874 <xTimerGenericCommand+0x98>)
 8008844:	6818      	ldr	r0, [r3, #0]
 8008846:	f107 0110 	add.w	r1, r7, #16
 800884a:	2300      	movs	r3, #0
 800884c:	2200      	movs	r2, #0
 800884e:	f7fe fc97 	bl	8007180 <xQueueGenericSend>
 8008852:	6278      	str	r0, [r7, #36]	; 0x24
 8008854:	e008      	b.n	8008868 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008856:	4b07      	ldr	r3, [pc, #28]	; (8008874 <xTimerGenericCommand+0x98>)
 8008858:	6818      	ldr	r0, [r3, #0]
 800885a:	f107 0110 	add.w	r1, r7, #16
 800885e:	2300      	movs	r3, #0
 8008860:	683a      	ldr	r2, [r7, #0]
 8008862:	f7fe fd8b 	bl	800737c <xQueueGenericSendFromISR>
 8008866:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800886a:	4618      	mov	r0, r3
 800886c:	3728      	adds	r7, #40	; 0x28
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	20000ca8 	.word	0x20000ca8

08008878 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b088      	sub	sp, #32
 800887c:	af02      	add	r7, sp, #8
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008882:	4b22      	ldr	r3, [pc, #136]	; (800890c <prvProcessExpiredTimer+0x94>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	3304      	adds	r3, #4
 8008890:	4618      	mov	r0, r3
 8008892:	f7fe fb47 	bl	8006f24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800889c:	f003 0304 	and.w	r3, r3, #4
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d022      	beq.n	80088ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	699a      	ldr	r2, [r3, #24]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	18d1      	adds	r1, r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	6978      	ldr	r0, [r7, #20]
 80088b2:	f000 f8d1 	bl	8008a58 <prvInsertTimerInActiveList>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d01f      	beq.n	80088fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088bc:	2300      	movs	r3, #0
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	2300      	movs	r3, #0
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	2100      	movs	r1, #0
 80088c6:	6978      	ldr	r0, [r7, #20]
 80088c8:	f7ff ff88 	bl	80087dc <xTimerGenericCommand>
 80088cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d113      	bne.n	80088fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80088d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d8:	f383 8811 	msr	BASEPRI, r3
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	60fb      	str	r3, [r7, #12]
}
 80088e6:	bf00      	nop
 80088e8:	e7fe      	b.n	80088e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088f0:	f023 0301 	bic.w	r3, r3, #1
 80088f4:	b2da      	uxtb	r2, r3
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	6a1b      	ldr	r3, [r3, #32]
 8008900:	6978      	ldr	r0, [r7, #20]
 8008902:	4798      	blx	r3
}
 8008904:	bf00      	nop
 8008906:	3718      	adds	r7, #24
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	20000ca0 	.word	0x20000ca0

08008910 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008918:	f107 0308 	add.w	r3, r7, #8
 800891c:	4618      	mov	r0, r3
 800891e:	f000 f857 	bl	80089d0 <prvGetNextExpireTime>
 8008922:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	4619      	mov	r1, r3
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f000 f803 	bl	8008934 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800892e:	f000 f8d5 	bl	8008adc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008932:	e7f1      	b.n	8008918 <prvTimerTask+0x8>

08008934 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800893e:	f7ff fa43 	bl	8007dc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008942:	f107 0308 	add.w	r3, r7, #8
 8008946:	4618      	mov	r0, r3
 8008948:	f000 f866 	bl	8008a18 <prvSampleTimeNow>
 800894c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d130      	bne.n	80089b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10a      	bne.n	8008970 <prvProcessTimerOrBlockTask+0x3c>
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	429a      	cmp	r2, r3
 8008960:	d806      	bhi.n	8008970 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008962:	f7ff fa3f 	bl	8007de4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008966:	68f9      	ldr	r1, [r7, #12]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f7ff ff85 	bl	8008878 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800896e:	e024      	b.n	80089ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d008      	beq.n	8008988 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008976:	4b13      	ldr	r3, [pc, #76]	; (80089c4 <prvProcessTimerOrBlockTask+0x90>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d101      	bne.n	8008984 <prvProcessTimerOrBlockTask+0x50>
 8008980:	2301      	movs	r3, #1
 8008982:	e000      	b.n	8008986 <prvProcessTimerOrBlockTask+0x52>
 8008984:	2300      	movs	r3, #0
 8008986:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008988:	4b0f      	ldr	r3, [pc, #60]	; (80089c8 <prvProcessTimerOrBlockTask+0x94>)
 800898a:	6818      	ldr	r0, [r3, #0]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	4619      	mov	r1, r3
 8008996:	f7fe ffa7 	bl	80078e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800899a:	f7ff fa23 	bl	8007de4 <xTaskResumeAll>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10a      	bne.n	80089ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80089a4:	4b09      	ldr	r3, [pc, #36]	; (80089cc <prvProcessTimerOrBlockTask+0x98>)
 80089a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089aa:	601a      	str	r2, [r3, #0]
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	f3bf 8f6f 	isb	sy
}
 80089b4:	e001      	b.n	80089ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80089b6:	f7ff fa15 	bl	8007de4 <xTaskResumeAll>
}
 80089ba:	bf00      	nop
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	20000ca4 	.word	0x20000ca4
 80089c8:	20000ca8 	.word	0x20000ca8
 80089cc:	e000ed04 	.word	0xe000ed04

080089d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80089d8:	4b0e      	ldr	r3, [pc, #56]	; (8008a14 <prvGetNextExpireTime+0x44>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d101      	bne.n	80089e6 <prvGetNextExpireTime+0x16>
 80089e2:	2201      	movs	r2, #1
 80089e4:	e000      	b.n	80089e8 <prvGetNextExpireTime+0x18>
 80089e6:	2200      	movs	r2, #0
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d105      	bne.n	8008a00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089f4:	4b07      	ldr	r3, [pc, #28]	; (8008a14 <prvGetNextExpireTime+0x44>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	60fb      	str	r3, [r7, #12]
 80089fe:	e001      	b.n	8008a04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008a00:	2300      	movs	r3, #0
 8008a02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a04:	68fb      	ldr	r3, [r7, #12]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	20000ca0 	.word	0x20000ca0

08008a18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008a20:	f7ff fa7e 	bl	8007f20 <xTaskGetTickCount>
 8008a24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008a26:	4b0b      	ldr	r3, [pc, #44]	; (8008a54 <prvSampleTimeNow+0x3c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d205      	bcs.n	8008a3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a30:	f000 f936 	bl	8008ca0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	601a      	str	r2, [r3, #0]
 8008a3a:	e002      	b.n	8008a42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008a42:	4a04      	ldr	r2, [pc, #16]	; (8008a54 <prvSampleTimeNow+0x3c>)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a48:	68fb      	ldr	r3, [r7, #12]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	20000cb0 	.word	0x20000cb0

08008a58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b086      	sub	sp, #24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]
 8008a64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a66:	2300      	movs	r3, #0
 8008a68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d812      	bhi.n	8008aa4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	1ad2      	subs	r2, r2, r3
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d302      	bcc.n	8008a92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	617b      	str	r3, [r7, #20]
 8008a90:	e01b      	b.n	8008aca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a92:	4b10      	ldr	r3, [pc, #64]	; (8008ad4 <prvInsertTimerInActiveList+0x7c>)
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	3304      	adds	r3, #4
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	f7fe fa08 	bl	8006eb2 <vListInsert>
 8008aa2:	e012      	b.n	8008aca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d206      	bcs.n	8008aba <prvInsertTimerInActiveList+0x62>
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d302      	bcc.n	8008aba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	617b      	str	r3, [r7, #20]
 8008ab8:	e007      	b.n	8008aca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008aba:	4b07      	ldr	r3, [pc, #28]	; (8008ad8 <prvInsertTimerInActiveList+0x80>)
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	4610      	mov	r0, r2
 8008ac6:	f7fe f9f4 	bl	8006eb2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008aca:	697b      	ldr	r3, [r7, #20]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3718      	adds	r7, #24
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	20000ca4 	.word	0x20000ca4
 8008ad8:	20000ca0 	.word	0x20000ca0

08008adc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b08e      	sub	sp, #56	; 0x38
 8008ae0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ae2:	e0ca      	b.n	8008c7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	da18      	bge.n	8008b1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008aea:	1d3b      	adds	r3, r7, #4
 8008aec:	3304      	adds	r3, #4
 8008aee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10a      	bne.n	8008b0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	61fb      	str	r3, [r7, #28]
}
 8008b08:	bf00      	nop
 8008b0a:	e7fe      	b.n	8008b0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b12:	6850      	ldr	r0, [r2, #4]
 8008b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b16:	6892      	ldr	r2, [r2, #8]
 8008b18:	4611      	mov	r1, r2
 8008b1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f2c0 80aa 	blt.w	8008c78 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2a:	695b      	ldr	r3, [r3, #20]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d004      	beq.n	8008b3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b32:	3304      	adds	r3, #4
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fe f9f5 	bl	8006f24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b3a:	463b      	mov	r3, r7
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7ff ff6b 	bl	8008a18 <prvSampleTimeNow>
 8008b42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b09      	cmp	r3, #9
 8008b48:	f200 8097 	bhi.w	8008c7a <prvProcessReceivedCommands+0x19e>
 8008b4c:	a201      	add	r2, pc, #4	; (adr r2, 8008b54 <prvProcessReceivedCommands+0x78>)
 8008b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b52:	bf00      	nop
 8008b54:	08008b7d 	.word	0x08008b7d
 8008b58:	08008b7d 	.word	0x08008b7d
 8008b5c:	08008b7d 	.word	0x08008b7d
 8008b60:	08008bf1 	.word	0x08008bf1
 8008b64:	08008c05 	.word	0x08008c05
 8008b68:	08008c4f 	.word	0x08008c4f
 8008b6c:	08008b7d 	.word	0x08008b7d
 8008b70:	08008b7d 	.word	0x08008b7d
 8008b74:	08008bf1 	.word	0x08008bf1
 8008b78:	08008c05 	.word	0x08008c05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b82:	f043 0301 	orr.w	r3, r3, #1
 8008b86:	b2da      	uxtb	r2, r3
 8008b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	18d1      	adds	r1, r2, r3
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b9c:	f7ff ff5c 	bl	8008a58 <prvInsertTimerInActiveList>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d069      	beq.n	8008c7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bb4:	f003 0304 	and.w	r3, r3, #4
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d05e      	beq.n	8008c7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	441a      	add	r2, r3
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	2300      	movs	r3, #0
 8008bca:	2100      	movs	r1, #0
 8008bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bce:	f7ff fe05 	bl	80087dc <xTimerGenericCommand>
 8008bd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008bd4:	6a3b      	ldr	r3, [r7, #32]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d14f      	bne.n	8008c7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	61bb      	str	r3, [r7, #24]
}
 8008bec:	bf00      	nop
 8008bee:	e7fe      	b.n	8008bee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bf6:	f023 0301 	bic.w	r3, r3, #1
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008c02:	e03a      	b.n	8008c7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c0a:	f043 0301 	orr.w	r3, r3, #1
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10a      	bne.n	8008c3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c28:	f383 8811 	msr	BASEPRI, r3
 8008c2c:	f3bf 8f6f 	isb	sy
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	617b      	str	r3, [r7, #20]
}
 8008c36:	bf00      	nop
 8008c38:	e7fe      	b.n	8008c38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3c:	699a      	ldr	r2, [r3, #24]
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c40:	18d1      	adds	r1, r2, r3
 8008c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c48:	f7ff ff06 	bl	8008a58 <prvInsertTimerInActiveList>
					break;
 8008c4c:	e015      	b.n	8008c7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c54:	f003 0302 	and.w	r3, r3, #2
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d103      	bne.n	8008c64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c5e:	f000 fbdf 	bl	8009420 <vPortFree>
 8008c62:	e00a      	b.n	8008c7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c6a:	f023 0301 	bic.w	r3, r3, #1
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c76:	e000      	b.n	8008c7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008c78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c7a:	4b08      	ldr	r3, [pc, #32]	; (8008c9c <prvProcessReceivedCommands+0x1c0>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	1d39      	adds	r1, r7, #4
 8008c80:	2200      	movs	r2, #0
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fe fc16 	bl	80074b4 <xQueueReceive>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f47f af2a 	bne.w	8008ae4 <prvProcessReceivedCommands+0x8>
	}
}
 8008c90:	bf00      	nop
 8008c92:	bf00      	nop
 8008c94:	3730      	adds	r7, #48	; 0x30
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	20000ca8 	.word	0x20000ca8

08008ca0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b088      	sub	sp, #32
 8008ca4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ca6:	e048      	b.n	8008d3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ca8:	4b2d      	ldr	r3, [pc, #180]	; (8008d60 <prvSwitchTimerLists+0xc0>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cb2:	4b2b      	ldr	r3, [pc, #172]	; (8008d60 <prvSwitchTimerLists+0xc0>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	3304      	adds	r3, #4
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fe f92f 	bl	8006f24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cd4:	f003 0304 	and.w	r3, r3, #4
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d02e      	beq.n	8008d3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d90e      	bls.n	8008d0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cfa:	4b19      	ldr	r3, [pc, #100]	; (8008d60 <prvSwitchTimerLists+0xc0>)
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	3304      	adds	r3, #4
 8008d02:	4619      	mov	r1, r3
 8008d04:	4610      	mov	r0, r2
 8008d06:	f7fe f8d4 	bl	8006eb2 <vListInsert>
 8008d0a:	e016      	b.n	8008d3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	2300      	movs	r3, #0
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	2100      	movs	r1, #0
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f7ff fd60 	bl	80087dc <xTimerGenericCommand>
 8008d1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d10a      	bne.n	8008d3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	603b      	str	r3, [r7, #0]
}
 8008d36:	bf00      	nop
 8008d38:	e7fe      	b.n	8008d38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d3a:	4b09      	ldr	r3, [pc, #36]	; (8008d60 <prvSwitchTimerLists+0xc0>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1b1      	bne.n	8008ca8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008d44:	4b06      	ldr	r3, [pc, #24]	; (8008d60 <prvSwitchTimerLists+0xc0>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d4a:	4b06      	ldr	r3, [pc, #24]	; (8008d64 <prvSwitchTimerLists+0xc4>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a04      	ldr	r2, [pc, #16]	; (8008d60 <prvSwitchTimerLists+0xc0>)
 8008d50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d52:	4a04      	ldr	r2, [pc, #16]	; (8008d64 <prvSwitchTimerLists+0xc4>)
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	6013      	str	r3, [r2, #0]
}
 8008d58:	bf00      	nop
 8008d5a:	3718      	adds	r7, #24
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	20000ca0 	.word	0x20000ca0
 8008d64:	20000ca4 	.word	0x20000ca4

08008d68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d6e:	f000 f969 	bl	8009044 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d72:	4b15      	ldr	r3, [pc, #84]	; (8008dc8 <prvCheckForValidListAndQueue+0x60>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d120      	bne.n	8008dbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d7a:	4814      	ldr	r0, [pc, #80]	; (8008dcc <prvCheckForValidListAndQueue+0x64>)
 8008d7c:	f7fe f848 	bl	8006e10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d80:	4813      	ldr	r0, [pc, #76]	; (8008dd0 <prvCheckForValidListAndQueue+0x68>)
 8008d82:	f7fe f845 	bl	8006e10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d86:	4b13      	ldr	r3, [pc, #76]	; (8008dd4 <prvCheckForValidListAndQueue+0x6c>)
 8008d88:	4a10      	ldr	r2, [pc, #64]	; (8008dcc <prvCheckForValidListAndQueue+0x64>)
 8008d8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d8c:	4b12      	ldr	r3, [pc, #72]	; (8008dd8 <prvCheckForValidListAndQueue+0x70>)
 8008d8e:	4a10      	ldr	r2, [pc, #64]	; (8008dd0 <prvCheckForValidListAndQueue+0x68>)
 8008d90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d92:	2300      	movs	r3, #0
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	4b11      	ldr	r3, [pc, #68]	; (8008ddc <prvCheckForValidListAndQueue+0x74>)
 8008d98:	4a11      	ldr	r2, [pc, #68]	; (8008de0 <prvCheckForValidListAndQueue+0x78>)
 8008d9a:	2110      	movs	r1, #16
 8008d9c:	200a      	movs	r0, #10
 8008d9e:	f7fe f953 	bl	8007048 <xQueueGenericCreateStatic>
 8008da2:	4603      	mov	r3, r0
 8008da4:	4a08      	ldr	r2, [pc, #32]	; (8008dc8 <prvCheckForValidListAndQueue+0x60>)
 8008da6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008da8:	4b07      	ldr	r3, [pc, #28]	; (8008dc8 <prvCheckForValidListAndQueue+0x60>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d005      	beq.n	8008dbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008db0:	4b05      	ldr	r3, [pc, #20]	; (8008dc8 <prvCheckForValidListAndQueue+0x60>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	490b      	ldr	r1, [pc, #44]	; (8008de4 <prvCheckForValidListAndQueue+0x7c>)
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fe fd6c 	bl	8007894 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008dbc:	f000 f972 	bl	80090a4 <vPortExitCritical>
}
 8008dc0:	bf00      	nop
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	20000ca8 	.word	0x20000ca8
 8008dcc:	20000c78 	.word	0x20000c78
 8008dd0:	20000c8c 	.word	0x20000c8c
 8008dd4:	20000ca0 	.word	0x20000ca0
 8008dd8:	20000ca4 	.word	0x20000ca4
 8008ddc:	20000d54 	.word	0x20000d54
 8008de0:	20000cb4 	.word	0x20000cb4
 8008de4:	0800a42c 	.word	0x0800a42c

08008de8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	3b04      	subs	r3, #4
 8008df8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	3b04      	subs	r3, #4
 8008e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	f023 0201 	bic.w	r2, r3, #1
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	3b04      	subs	r3, #4
 8008e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e18:	4a0c      	ldr	r2, [pc, #48]	; (8008e4c <pxPortInitialiseStack+0x64>)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	3b14      	subs	r3, #20
 8008e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	3b04      	subs	r3, #4
 8008e2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f06f 0202 	mvn.w	r2, #2
 8008e36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	3b20      	subs	r3, #32
 8008e3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3714      	adds	r7, #20
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr
 8008e4c:	08008e51 	.word	0x08008e51

08008e50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e56:	2300      	movs	r3, #0
 8008e58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e5a:	4b12      	ldr	r3, [pc, #72]	; (8008ea4 <prvTaskExitError+0x54>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e62:	d00a      	beq.n	8008e7a <prvTaskExitError+0x2a>
	__asm volatile
 8008e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e68:	f383 8811 	msr	BASEPRI, r3
 8008e6c:	f3bf 8f6f 	isb	sy
 8008e70:	f3bf 8f4f 	dsb	sy
 8008e74:	60fb      	str	r3, [r7, #12]
}
 8008e76:	bf00      	nop
 8008e78:	e7fe      	b.n	8008e78 <prvTaskExitError+0x28>
	__asm volatile
 8008e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7e:	f383 8811 	msr	BASEPRI, r3
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	60bb      	str	r3, [r7, #8]
}
 8008e8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e8e:	bf00      	nop
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d0fc      	beq.n	8008e90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e96:	bf00      	nop
 8008e98:	bf00      	nop
 8008e9a:	3714      	adds	r7, #20
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr
 8008ea4:	2000000c 	.word	0x2000000c
	...

08008eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008eb0:	4b07      	ldr	r3, [pc, #28]	; (8008ed0 <pxCurrentTCBConst2>)
 8008eb2:	6819      	ldr	r1, [r3, #0]
 8008eb4:	6808      	ldr	r0, [r1, #0]
 8008eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eba:	f380 8809 	msr	PSP, r0
 8008ebe:	f3bf 8f6f 	isb	sy
 8008ec2:	f04f 0000 	mov.w	r0, #0
 8008ec6:	f380 8811 	msr	BASEPRI, r0
 8008eca:	4770      	bx	lr
 8008ecc:	f3af 8000 	nop.w

08008ed0 <pxCurrentTCBConst2>:
 8008ed0:	20000778 	.word	0x20000778
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ed4:	bf00      	nop
 8008ed6:	bf00      	nop

08008ed8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ed8:	4808      	ldr	r0, [pc, #32]	; (8008efc <prvPortStartFirstTask+0x24>)
 8008eda:	6800      	ldr	r0, [r0, #0]
 8008edc:	6800      	ldr	r0, [r0, #0]
 8008ede:	f380 8808 	msr	MSP, r0
 8008ee2:	f04f 0000 	mov.w	r0, #0
 8008ee6:	f380 8814 	msr	CONTROL, r0
 8008eea:	b662      	cpsie	i
 8008eec:	b661      	cpsie	f
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	df00      	svc	0
 8008ef8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008efa:	bf00      	nop
 8008efc:	e000ed08 	.word	0xe000ed08

08008f00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008f06:	4b46      	ldr	r3, [pc, #280]	; (8009020 <xPortStartScheduler+0x120>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a46      	ldr	r2, [pc, #280]	; (8009024 <xPortStartScheduler+0x124>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d10a      	bne.n	8008f26 <xPortStartScheduler+0x26>
	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	613b      	str	r3, [r7, #16]
}
 8008f22:	bf00      	nop
 8008f24:	e7fe      	b.n	8008f24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008f26:	4b3e      	ldr	r3, [pc, #248]	; (8009020 <xPortStartScheduler+0x120>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a3f      	ldr	r2, [pc, #252]	; (8009028 <xPortStartScheduler+0x128>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d10a      	bne.n	8008f46 <xPortStartScheduler+0x46>
	__asm volatile
 8008f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	60fb      	str	r3, [r7, #12]
}
 8008f42:	bf00      	nop
 8008f44:	e7fe      	b.n	8008f44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f46:	4b39      	ldr	r3, [pc, #228]	; (800902c <xPortStartScheduler+0x12c>)
 8008f48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	22ff      	movs	r2, #255	; 0xff
 8008f56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f60:	78fb      	ldrb	r3, [r7, #3]
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	4b31      	ldr	r3, [pc, #196]	; (8009030 <xPortStartScheduler+0x130>)
 8008f6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f6e:	4b31      	ldr	r3, [pc, #196]	; (8009034 <xPortStartScheduler+0x134>)
 8008f70:	2207      	movs	r2, #7
 8008f72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f74:	e009      	b.n	8008f8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008f76:	4b2f      	ldr	r3, [pc, #188]	; (8009034 <xPortStartScheduler+0x134>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	4a2d      	ldr	r2, [pc, #180]	; (8009034 <xPortStartScheduler+0x134>)
 8008f7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f80:	78fb      	ldrb	r3, [r7, #3]
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	005b      	lsls	r3, r3, #1
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f8a:	78fb      	ldrb	r3, [r7, #3]
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f92:	2b80      	cmp	r3, #128	; 0x80
 8008f94:	d0ef      	beq.n	8008f76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f96:	4b27      	ldr	r3, [pc, #156]	; (8009034 <xPortStartScheduler+0x134>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f1c3 0307 	rsb	r3, r3, #7
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d00a      	beq.n	8008fb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa6:	f383 8811 	msr	BASEPRI, r3
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	60bb      	str	r3, [r7, #8]
}
 8008fb4:	bf00      	nop
 8008fb6:	e7fe      	b.n	8008fb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008fb8:	4b1e      	ldr	r3, [pc, #120]	; (8009034 <xPortStartScheduler+0x134>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	021b      	lsls	r3, r3, #8
 8008fbe:	4a1d      	ldr	r2, [pc, #116]	; (8009034 <xPortStartScheduler+0x134>)
 8008fc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008fc2:	4b1c      	ldr	r3, [pc, #112]	; (8009034 <xPortStartScheduler+0x134>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fca:	4a1a      	ldr	r2, [pc, #104]	; (8009034 <xPortStartScheduler+0x134>)
 8008fcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fd6:	4b18      	ldr	r3, [pc, #96]	; (8009038 <xPortStartScheduler+0x138>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a17      	ldr	r2, [pc, #92]	; (8009038 <xPortStartScheduler+0x138>)
 8008fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008fe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fe2:	4b15      	ldr	r3, [pc, #84]	; (8009038 <xPortStartScheduler+0x138>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a14      	ldr	r2, [pc, #80]	; (8009038 <xPortStartScheduler+0x138>)
 8008fe8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008fec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008fee:	f000 f8dd 	bl	80091ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ff2:	4b12      	ldr	r3, [pc, #72]	; (800903c <xPortStartScheduler+0x13c>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ff8:	f000 f8fc 	bl	80091f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ffc:	4b10      	ldr	r3, [pc, #64]	; (8009040 <xPortStartScheduler+0x140>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a0f      	ldr	r2, [pc, #60]	; (8009040 <xPortStartScheduler+0x140>)
 8009002:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009006:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009008:	f7ff ff66 	bl	8008ed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800900c:	f7ff f852 	bl	80080b4 <vTaskSwitchContext>
	prvTaskExitError();
 8009010:	f7ff ff1e 	bl	8008e50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3718      	adds	r7, #24
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	e000ed00 	.word	0xe000ed00
 8009024:	410fc271 	.word	0x410fc271
 8009028:	410fc270 	.word	0x410fc270
 800902c:	e000e400 	.word	0xe000e400
 8009030:	20000da4 	.word	0x20000da4
 8009034:	20000da8 	.word	0x20000da8
 8009038:	e000ed20 	.word	0xe000ed20
 800903c:	2000000c 	.word	0x2000000c
 8009040:	e000ef34 	.word	0xe000ef34

08009044 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
	__asm volatile
 800904a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	607b      	str	r3, [r7, #4]
}
 800905c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800905e:	4b0f      	ldr	r3, [pc, #60]	; (800909c <vPortEnterCritical+0x58>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	3301      	adds	r3, #1
 8009064:	4a0d      	ldr	r2, [pc, #52]	; (800909c <vPortEnterCritical+0x58>)
 8009066:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009068:	4b0c      	ldr	r3, [pc, #48]	; (800909c <vPortEnterCritical+0x58>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d10f      	bne.n	8009090 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009070:	4b0b      	ldr	r3, [pc, #44]	; (80090a0 <vPortEnterCritical+0x5c>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00a      	beq.n	8009090 <vPortEnterCritical+0x4c>
	__asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	603b      	str	r3, [r7, #0]
}
 800908c:	bf00      	nop
 800908e:	e7fe      	b.n	800908e <vPortEnterCritical+0x4a>
	}
}
 8009090:	bf00      	nop
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr
 800909c:	2000000c 	.word	0x2000000c
 80090a0:	e000ed04 	.word	0xe000ed04

080090a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80090aa:	4b12      	ldr	r3, [pc, #72]	; (80090f4 <vPortExitCritical+0x50>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10a      	bne.n	80090c8 <vPortExitCritical+0x24>
	__asm volatile
 80090b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b6:	f383 8811 	msr	BASEPRI, r3
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	607b      	str	r3, [r7, #4]
}
 80090c4:	bf00      	nop
 80090c6:	e7fe      	b.n	80090c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80090c8:	4b0a      	ldr	r3, [pc, #40]	; (80090f4 <vPortExitCritical+0x50>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	3b01      	subs	r3, #1
 80090ce:	4a09      	ldr	r2, [pc, #36]	; (80090f4 <vPortExitCritical+0x50>)
 80090d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090d2:	4b08      	ldr	r3, [pc, #32]	; (80090f4 <vPortExitCritical+0x50>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d105      	bne.n	80090e6 <vPortExitCritical+0x42>
 80090da:	2300      	movs	r3, #0
 80090dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	f383 8811 	msr	BASEPRI, r3
}
 80090e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80090e6:	bf00      	nop
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	2000000c 	.word	0x2000000c
	...

08009100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009100:	f3ef 8009 	mrs	r0, PSP
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	4b15      	ldr	r3, [pc, #84]	; (8009160 <pxCurrentTCBConst>)
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	f01e 0f10 	tst.w	lr, #16
 8009110:	bf08      	it	eq
 8009112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911a:	6010      	str	r0, [r2, #0]
 800911c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009124:	f380 8811 	msr	BASEPRI, r0
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	f3bf 8f6f 	isb	sy
 8009130:	f7fe ffc0 	bl	80080b4 <vTaskSwitchContext>
 8009134:	f04f 0000 	mov.w	r0, #0
 8009138:	f380 8811 	msr	BASEPRI, r0
 800913c:	bc09      	pop	{r0, r3}
 800913e:	6819      	ldr	r1, [r3, #0]
 8009140:	6808      	ldr	r0, [r1, #0]
 8009142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009146:	f01e 0f10 	tst.w	lr, #16
 800914a:	bf08      	it	eq
 800914c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009150:	f380 8809 	msr	PSP, r0
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	f3af 8000 	nop.w

08009160 <pxCurrentTCBConst>:
 8009160:	20000778 	.word	0x20000778
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009164:	bf00      	nop
 8009166:	bf00      	nop

08009168 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
	__asm volatile
 800916e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009172:	f383 8811 	msr	BASEPRI, r3
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	607b      	str	r3, [r7, #4]
}
 8009180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009182:	f7fe fedd 	bl	8007f40 <xTaskIncrementTick>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d003      	beq.n	8009194 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800918c:	4b06      	ldr	r3, [pc, #24]	; (80091a8 <xPortSysTickHandler+0x40>)
 800918e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009192:	601a      	str	r2, [r3, #0]
 8009194:	2300      	movs	r3, #0
 8009196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	f383 8811 	msr	BASEPRI, r3
}
 800919e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80091a0:	bf00      	nop
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	e000ed04 	.word	0xe000ed04

080091ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80091ac:	b480      	push	{r7}
 80091ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091b0:	4b0b      	ldr	r3, [pc, #44]	; (80091e0 <vPortSetupTimerInterrupt+0x34>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091b6:	4b0b      	ldr	r3, [pc, #44]	; (80091e4 <vPortSetupTimerInterrupt+0x38>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091bc:	4b0a      	ldr	r3, [pc, #40]	; (80091e8 <vPortSetupTimerInterrupt+0x3c>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a0a      	ldr	r2, [pc, #40]	; (80091ec <vPortSetupTimerInterrupt+0x40>)
 80091c2:	fba2 2303 	umull	r2, r3, r2, r3
 80091c6:	099b      	lsrs	r3, r3, #6
 80091c8:	4a09      	ldr	r2, [pc, #36]	; (80091f0 <vPortSetupTimerInterrupt+0x44>)
 80091ca:	3b01      	subs	r3, #1
 80091cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091ce:	4b04      	ldr	r3, [pc, #16]	; (80091e0 <vPortSetupTimerInterrupt+0x34>)
 80091d0:	2207      	movs	r2, #7
 80091d2:	601a      	str	r2, [r3, #0]
}
 80091d4:	bf00      	nop
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	e000e010 	.word	0xe000e010
 80091e4:	e000e018 	.word	0xe000e018
 80091e8:	20000000 	.word	0x20000000
 80091ec:	10624dd3 	.word	0x10624dd3
 80091f0:	e000e014 	.word	0xe000e014

080091f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009204 <vPortEnableVFP+0x10>
 80091f8:	6801      	ldr	r1, [r0, #0]
 80091fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80091fe:	6001      	str	r1, [r0, #0]
 8009200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009202:	bf00      	nop
 8009204:	e000ed88 	.word	0xe000ed88

08009208 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800920e:	f3ef 8305 	mrs	r3, IPSR
 8009212:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2b0f      	cmp	r3, #15
 8009218:	d914      	bls.n	8009244 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800921a:	4a17      	ldr	r2, [pc, #92]	; (8009278 <vPortValidateInterruptPriority+0x70>)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	4413      	add	r3, r2
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009224:	4b15      	ldr	r3, [pc, #84]	; (800927c <vPortValidateInterruptPriority+0x74>)
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	7afa      	ldrb	r2, [r7, #11]
 800922a:	429a      	cmp	r2, r3
 800922c:	d20a      	bcs.n	8009244 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	607b      	str	r3, [r7, #4]
}
 8009240:	bf00      	nop
 8009242:	e7fe      	b.n	8009242 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009244:	4b0e      	ldr	r3, [pc, #56]	; (8009280 <vPortValidateInterruptPriority+0x78>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800924c:	4b0d      	ldr	r3, [pc, #52]	; (8009284 <vPortValidateInterruptPriority+0x7c>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	429a      	cmp	r2, r3
 8009252:	d90a      	bls.n	800926a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	603b      	str	r3, [r7, #0]
}
 8009266:	bf00      	nop
 8009268:	e7fe      	b.n	8009268 <vPortValidateInterruptPriority+0x60>
	}
 800926a:	bf00      	nop
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	e000e3f0 	.word	0xe000e3f0
 800927c:	20000da4 	.word	0x20000da4
 8009280:	e000ed0c 	.word	0xe000ed0c
 8009284:	20000da8 	.word	0x20000da8

08009288 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b08a      	sub	sp, #40	; 0x28
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009290:	2300      	movs	r3, #0
 8009292:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009294:	f7fe fd98 	bl	8007dc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009298:	4b5b      	ldr	r3, [pc, #364]	; (8009408 <pvPortMalloc+0x180>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d101      	bne.n	80092a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80092a0:	f000 f920 	bl	80094e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092a4:	4b59      	ldr	r3, [pc, #356]	; (800940c <pvPortMalloc+0x184>)
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4013      	ands	r3, r2
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f040 8093 	bne.w	80093d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d01d      	beq.n	80092f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80092b8:	2208      	movs	r2, #8
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4413      	add	r3, r2
 80092be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f003 0307 	and.w	r3, r3, #7
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d014      	beq.n	80092f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f023 0307 	bic.w	r3, r3, #7
 80092d0:	3308      	adds	r3, #8
 80092d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f003 0307 	and.w	r3, r3, #7
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00a      	beq.n	80092f4 <pvPortMalloc+0x6c>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	617b      	str	r3, [r7, #20]
}
 80092f0:	bf00      	nop
 80092f2:	e7fe      	b.n	80092f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d06e      	beq.n	80093d8 <pvPortMalloc+0x150>
 80092fa:	4b45      	ldr	r3, [pc, #276]	; (8009410 <pvPortMalloc+0x188>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	429a      	cmp	r2, r3
 8009302:	d869      	bhi.n	80093d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009304:	4b43      	ldr	r3, [pc, #268]	; (8009414 <pvPortMalloc+0x18c>)
 8009306:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009308:	4b42      	ldr	r3, [pc, #264]	; (8009414 <pvPortMalloc+0x18c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800930e:	e004      	b.n	800931a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009312:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800931a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	429a      	cmp	r2, r3
 8009322:	d903      	bls.n	800932c <pvPortMalloc+0xa4>
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1f1      	bne.n	8009310 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800932c:	4b36      	ldr	r3, [pc, #216]	; (8009408 <pvPortMalloc+0x180>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009332:	429a      	cmp	r2, r3
 8009334:	d050      	beq.n	80093d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2208      	movs	r2, #8
 800933c:	4413      	add	r3, r2
 800933e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	6a3b      	ldr	r3, [r7, #32]
 8009346:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	1ad2      	subs	r2, r2, r3
 8009350:	2308      	movs	r3, #8
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	429a      	cmp	r2, r3
 8009356:	d91f      	bls.n	8009398 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4413      	add	r3, r2
 800935e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	f003 0307 	and.w	r3, r3, #7
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00a      	beq.n	8009380 <pvPortMalloc+0xf8>
	__asm volatile
 800936a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	613b      	str	r3, [r7, #16]
}
 800937c:	bf00      	nop
 800937e:	e7fe      	b.n	800937e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009382:	685a      	ldr	r2, [r3, #4]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	1ad2      	subs	r2, r2, r3
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009392:	69b8      	ldr	r0, [r7, #24]
 8009394:	f000 f908 	bl	80095a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009398:	4b1d      	ldr	r3, [pc, #116]	; (8009410 <pvPortMalloc+0x188>)
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	4a1b      	ldr	r2, [pc, #108]	; (8009410 <pvPortMalloc+0x188>)
 80093a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093a6:	4b1a      	ldr	r3, [pc, #104]	; (8009410 <pvPortMalloc+0x188>)
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	4b1b      	ldr	r3, [pc, #108]	; (8009418 <pvPortMalloc+0x190>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d203      	bcs.n	80093ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093b2:	4b17      	ldr	r3, [pc, #92]	; (8009410 <pvPortMalloc+0x188>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a18      	ldr	r2, [pc, #96]	; (8009418 <pvPortMalloc+0x190>)
 80093b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	685a      	ldr	r2, [r3, #4]
 80093be:	4b13      	ldr	r3, [pc, #76]	; (800940c <pvPortMalloc+0x184>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	431a      	orrs	r2, r3
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ca:	2200      	movs	r2, #0
 80093cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80093ce:	4b13      	ldr	r3, [pc, #76]	; (800941c <pvPortMalloc+0x194>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3301      	adds	r3, #1
 80093d4:	4a11      	ldr	r2, [pc, #68]	; (800941c <pvPortMalloc+0x194>)
 80093d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80093d8:	f7fe fd04 	bl	8007de4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	f003 0307 	and.w	r3, r3, #7
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00a      	beq.n	80093fc <pvPortMalloc+0x174>
	__asm volatile
 80093e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ea:	f383 8811 	msr	BASEPRI, r3
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f3bf 8f4f 	dsb	sy
 80093f6:	60fb      	str	r3, [r7, #12]
}
 80093f8:	bf00      	nop
 80093fa:	e7fe      	b.n	80093fa <pvPortMalloc+0x172>
	return pvReturn;
 80093fc:	69fb      	ldr	r3, [r7, #28]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3728      	adds	r7, #40	; 0x28
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	200049b4 	.word	0x200049b4
 800940c:	200049c8 	.word	0x200049c8
 8009410:	200049b8 	.word	0x200049b8
 8009414:	200049ac 	.word	0x200049ac
 8009418:	200049bc 	.word	0x200049bc
 800941c:	200049c0 	.word	0x200049c0

08009420 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d04d      	beq.n	80094ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009432:	2308      	movs	r3, #8
 8009434:	425b      	negs	r3, r3
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	4413      	add	r3, r2
 800943a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	4b24      	ldr	r3, [pc, #144]	; (80094d8 <vPortFree+0xb8>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4013      	ands	r3, r2
 800944a:	2b00      	cmp	r3, #0
 800944c:	d10a      	bne.n	8009464 <vPortFree+0x44>
	__asm volatile
 800944e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009452:	f383 8811 	msr	BASEPRI, r3
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	f3bf 8f4f 	dsb	sy
 800945e:	60fb      	str	r3, [r7, #12]
}
 8009460:	bf00      	nop
 8009462:	e7fe      	b.n	8009462 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00a      	beq.n	8009482 <vPortFree+0x62>
	__asm volatile
 800946c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009470:	f383 8811 	msr	BASEPRI, r3
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	60bb      	str	r3, [r7, #8]
}
 800947e:	bf00      	nop
 8009480:	e7fe      	b.n	8009480 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	4b14      	ldr	r3, [pc, #80]	; (80094d8 <vPortFree+0xb8>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4013      	ands	r3, r2
 800948c:	2b00      	cmp	r3, #0
 800948e:	d01e      	beq.n	80094ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d11a      	bne.n	80094ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	4b0e      	ldr	r3, [pc, #56]	; (80094d8 <vPortFree+0xb8>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	43db      	mvns	r3, r3
 80094a2:	401a      	ands	r2, r3
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80094a8:	f7fe fc8e 	bl	8007dc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	4b0a      	ldr	r3, [pc, #40]	; (80094dc <vPortFree+0xbc>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4413      	add	r3, r2
 80094b6:	4a09      	ldr	r2, [pc, #36]	; (80094dc <vPortFree+0xbc>)
 80094b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80094ba:	6938      	ldr	r0, [r7, #16]
 80094bc:	f000 f874 	bl	80095a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80094c0:	4b07      	ldr	r3, [pc, #28]	; (80094e0 <vPortFree+0xc0>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	3301      	adds	r3, #1
 80094c6:	4a06      	ldr	r2, [pc, #24]	; (80094e0 <vPortFree+0xc0>)
 80094c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80094ca:	f7fe fc8b 	bl	8007de4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80094ce:	bf00      	nop
 80094d0:	3718      	adds	r7, #24
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	200049c8 	.word	0x200049c8
 80094dc:	200049b8 	.word	0x200049b8
 80094e0:	200049c4 	.word	0x200049c4

080094e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80094ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80094ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094f0:	4b27      	ldr	r3, [pc, #156]	; (8009590 <prvHeapInit+0xac>)
 80094f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f003 0307 	and.w	r3, r3, #7
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00c      	beq.n	8009518 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	3307      	adds	r3, #7
 8009502:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f023 0307 	bic.w	r3, r3, #7
 800950a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	4a1f      	ldr	r2, [pc, #124]	; (8009590 <prvHeapInit+0xac>)
 8009514:	4413      	add	r3, r2
 8009516:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800951c:	4a1d      	ldr	r2, [pc, #116]	; (8009594 <prvHeapInit+0xb0>)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009522:	4b1c      	ldr	r3, [pc, #112]	; (8009594 <prvHeapInit+0xb0>)
 8009524:	2200      	movs	r2, #0
 8009526:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	68ba      	ldr	r2, [r7, #8]
 800952c:	4413      	add	r3, r2
 800952e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009530:	2208      	movs	r2, #8
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	1a9b      	subs	r3, r3, r2
 8009536:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f023 0307 	bic.w	r3, r3, #7
 800953e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	4a15      	ldr	r2, [pc, #84]	; (8009598 <prvHeapInit+0xb4>)
 8009544:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009546:	4b14      	ldr	r3, [pc, #80]	; (8009598 <prvHeapInit+0xb4>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2200      	movs	r2, #0
 800954c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800954e:	4b12      	ldr	r3, [pc, #72]	; (8009598 <prvHeapInit+0xb4>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2200      	movs	r2, #0
 8009554:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	1ad2      	subs	r2, r2, r3
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009564:	4b0c      	ldr	r3, [pc, #48]	; (8009598 <prvHeapInit+0xb4>)
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	4a0a      	ldr	r2, [pc, #40]	; (800959c <prvHeapInit+0xb8>)
 8009572:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	4a09      	ldr	r2, [pc, #36]	; (80095a0 <prvHeapInit+0xbc>)
 800957a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800957c:	4b09      	ldr	r3, [pc, #36]	; (80095a4 <prvHeapInit+0xc0>)
 800957e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009582:	601a      	str	r2, [r3, #0]
}
 8009584:	bf00      	nop
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	20000dac 	.word	0x20000dac
 8009594:	200049ac 	.word	0x200049ac
 8009598:	200049b4 	.word	0x200049b4
 800959c:	200049bc 	.word	0x200049bc
 80095a0:	200049b8 	.word	0x200049b8
 80095a4:	200049c8 	.word	0x200049c8

080095a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80095b0:	4b28      	ldr	r3, [pc, #160]	; (8009654 <prvInsertBlockIntoFreeList+0xac>)
 80095b2:	60fb      	str	r3, [r7, #12]
 80095b4:	e002      	b.n	80095bc <prvInsertBlockIntoFreeList+0x14>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	60fb      	str	r3, [r7, #12]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d8f7      	bhi.n	80095b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	4413      	add	r3, r2
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d108      	bne.n	80095ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	685a      	ldr	r2, [r3, #4]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	441a      	add	r2, r3
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	441a      	add	r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d118      	bne.n	8009630 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	4b15      	ldr	r3, [pc, #84]	; (8009658 <prvInsertBlockIntoFreeList+0xb0>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	429a      	cmp	r2, r3
 8009608:	d00d      	beq.n	8009626 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	685a      	ldr	r2, [r3, #4]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	441a      	add	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	601a      	str	r2, [r3, #0]
 8009624:	e008      	b.n	8009638 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009626:	4b0c      	ldr	r3, [pc, #48]	; (8009658 <prvInsertBlockIntoFreeList+0xb0>)
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	e003      	b.n	8009638 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	429a      	cmp	r2, r3
 800963e:	d002      	beq.n	8009646 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009646:	bf00      	nop
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	200049ac 	.word	0x200049ac
 8009658:	200049b4 	.word	0x200049b4

0800965c <OLED_Refresh_Gram>:
#include "stdlib.h"
#include "oledfont.h"  

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8009662:	2300      	movs	r3, #0
 8009664:	71fb      	strb	r3, [r7, #7]
 8009666:	e026      	b.n	80096b6 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8009668:	79fb      	ldrb	r3, [r7, #7]
 800966a:	3b50      	subs	r3, #80	; 0x50
 800966c:	b2db      	uxtb	r3, r3
 800966e:	2100      	movs	r1, #0
 8009670:	4618      	mov	r0, r3
 8009672:	f000 f82b 	bl	80096cc <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8009676:	2100      	movs	r1, #0
 8009678:	2000      	movs	r0, #0
 800967a:	f000 f827 	bl	80096cc <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800967e:	2100      	movs	r1, #0
 8009680:	2010      	movs	r0, #16
 8009682:	f000 f823 	bl	80096cc <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8009686:	2300      	movs	r3, #0
 8009688:	71bb      	strb	r3, [r7, #6]
 800968a:	e00d      	b.n	80096a8 <OLED_Refresh_Gram+0x4c>
 800968c:	79ba      	ldrb	r2, [r7, #6]
 800968e:	79fb      	ldrb	r3, [r7, #7]
 8009690:	490d      	ldr	r1, [pc, #52]	; (80096c8 <OLED_Refresh_Gram+0x6c>)
 8009692:	00d2      	lsls	r2, r2, #3
 8009694:	440a      	add	r2, r1
 8009696:	4413      	add	r3, r2
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	2101      	movs	r1, #1
 800969c:	4618      	mov	r0, r3
 800969e:	f000 f815 	bl	80096cc <OLED_WR_Byte>
 80096a2:	79bb      	ldrb	r3, [r7, #6]
 80096a4:	3301      	adds	r3, #1
 80096a6:	71bb      	strb	r3, [r7, #6]
 80096a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	daed      	bge.n	800968c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 80096b0:	79fb      	ldrb	r3, [r7, #7]
 80096b2:	3301      	adds	r3, #1
 80096b4:	71fb      	strb	r3, [r7, #7]
 80096b6:	79fb      	ldrb	r3, [r7, #7]
 80096b8:	2b07      	cmp	r3, #7
 80096ba:	d9d5      	bls.n	8009668 <OLED_Refresh_Gram+0xc>
	}   
}
 80096bc:	bf00      	nop
 80096be:	bf00      	nop
 80096c0:	3708      	adds	r7, #8
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	20004c98 	.word	0x20004c98

080096cc <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	4603      	mov	r3, r0
 80096d4:	460a      	mov	r2, r1
 80096d6:	71fb      	strb	r3, [r7, #7]
 80096d8:	4613      	mov	r3, r2
 80096da:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 80096dc:	79bb      	ldrb	r3, [r7, #6]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d006      	beq.n	80096f0 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 80096e2:	2201      	movs	r2, #1
 80096e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80096e8:	481c      	ldr	r0, [pc, #112]	; (800975c <OLED_WR_Byte+0x90>)
 80096ea:	f7fa f8d3 	bl	8003894 <HAL_GPIO_WritePin>
 80096ee:	e005      	b.n	80096fc <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 80096f0:	2200      	movs	r2, #0
 80096f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80096f6:	4819      	ldr	r0, [pc, #100]	; (800975c <OLED_WR_Byte+0x90>)
 80096f8:	f7fa f8cc 	bl	8003894 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80096fc:	2300      	movs	r3, #0
 80096fe:	73fb      	strb	r3, [r7, #15]
 8009700:	e01e      	b.n	8009740 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8009702:	2200      	movs	r2, #0
 8009704:	2120      	movs	r1, #32
 8009706:	4815      	ldr	r0, [pc, #84]	; (800975c <OLED_WR_Byte+0x90>)
 8009708:	f7fa f8c4 	bl	8003894 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800970c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009710:	2b00      	cmp	r3, #0
 8009712:	da05      	bge.n	8009720 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8009714:	2201      	movs	r2, #1
 8009716:	2140      	movs	r1, #64	; 0x40
 8009718:	4810      	ldr	r0, [pc, #64]	; (800975c <OLED_WR_Byte+0x90>)
 800971a:	f7fa f8bb 	bl	8003894 <HAL_GPIO_WritePin>
 800971e:	e004      	b.n	800972a <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8009720:	2200      	movs	r2, #0
 8009722:	2140      	movs	r1, #64	; 0x40
 8009724:	480d      	ldr	r0, [pc, #52]	; (800975c <OLED_WR_Byte+0x90>)
 8009726:	f7fa f8b5 	bl	8003894 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800972a:	2201      	movs	r2, #1
 800972c:	2120      	movs	r1, #32
 800972e:	480b      	ldr	r0, [pc, #44]	; (800975c <OLED_WR_Byte+0x90>)
 8009730:	f7fa f8b0 	bl	8003894 <HAL_GPIO_WritePin>
		dat<<=1;   
 8009734:	79fb      	ldrb	r3, [r7, #7]
 8009736:	005b      	lsls	r3, r3, #1
 8009738:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800973a:	7bfb      	ldrb	r3, [r7, #15]
 800973c:	3301      	adds	r3, #1
 800973e:	73fb      	strb	r3, [r7, #15]
 8009740:	7bfb      	ldrb	r3, [r7, #15]
 8009742:	2b07      	cmp	r3, #7
 8009744:	d9dd      	bls.n	8009702 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8009746:	2201      	movs	r2, #1
 8009748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800974c:	4803      	ldr	r0, [pc, #12]	; (800975c <OLED_WR_Byte+0x90>)
 800974e:	f7fa f8a1 	bl	8003894 <HAL_GPIO_WritePin>
} 
 8009752:	bf00      	nop
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	40021000 	.word	0x40021000

08009760 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8009766:	2300      	movs	r3, #0
 8009768:	71fb      	strb	r3, [r7, #7]
 800976a:	e014      	b.n	8009796 <OLED_Clear+0x36>
 800976c:	2300      	movs	r3, #0
 800976e:	71bb      	strb	r3, [r7, #6]
 8009770:	e00a      	b.n	8009788 <OLED_Clear+0x28>
 8009772:	79ba      	ldrb	r2, [r7, #6]
 8009774:	79fb      	ldrb	r3, [r7, #7]
 8009776:	490c      	ldr	r1, [pc, #48]	; (80097a8 <OLED_Clear+0x48>)
 8009778:	00d2      	lsls	r2, r2, #3
 800977a:	440a      	add	r2, r1
 800977c:	4413      	add	r3, r2
 800977e:	2200      	movs	r2, #0
 8009780:	701a      	strb	r2, [r3, #0]
 8009782:	79bb      	ldrb	r3, [r7, #6]
 8009784:	3301      	adds	r3, #1
 8009786:	71bb      	strb	r3, [r7, #6]
 8009788:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800978c:	2b00      	cmp	r3, #0
 800978e:	daf0      	bge.n	8009772 <OLED_Clear+0x12>
 8009790:	79fb      	ldrb	r3, [r7, #7]
 8009792:	3301      	adds	r3, #1
 8009794:	71fb      	strb	r3, [r7, #7]
 8009796:	79fb      	ldrb	r3, [r7, #7]
 8009798:	2b07      	cmp	r3, #7
 800979a:	d9e7      	bls.n	800976c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800979c:	f7ff ff5e 	bl	800965c <OLED_Refresh_Gram>
}
 80097a0:	bf00      	nop
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	20004c98 	.word	0x20004c98

080097ac <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	4603      	mov	r3, r0
 80097b4:	71fb      	strb	r3, [r7, #7]
 80097b6:	460b      	mov	r3, r1
 80097b8:	71bb      	strb	r3, [r7, #6]
 80097ba:	4613      	mov	r3, r2
 80097bc:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80097be:	2300      	movs	r3, #0
 80097c0:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80097c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	db41      	blt.n	800984e <OLED_DrawPoint+0xa2>
 80097ca:	79bb      	ldrb	r3, [r7, #6]
 80097cc:	2b3f      	cmp	r3, #63	; 0x3f
 80097ce:	d83e      	bhi.n	800984e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80097d0:	79bb      	ldrb	r3, [r7, #6]
 80097d2:	08db      	lsrs	r3, r3, #3
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	f1c3 0307 	rsb	r3, r3, #7
 80097da:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 80097dc:	79bb      	ldrb	r3, [r7, #6]
 80097de:	f003 0307 	and.w	r3, r3, #7
 80097e2:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 80097e4:	7b7b      	ldrb	r3, [r7, #13]
 80097e6:	f1c3 0307 	rsb	r3, r3, #7
 80097ea:	2201      	movs	r2, #1
 80097ec:	fa02 f303 	lsl.w	r3, r2, r3
 80097f0:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80097f2:	797b      	ldrb	r3, [r7, #5]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d012      	beq.n	800981e <OLED_DrawPoint+0x72>
 80097f8:	79fa      	ldrb	r2, [r7, #7]
 80097fa:	7bbb      	ldrb	r3, [r7, #14]
 80097fc:	4917      	ldr	r1, [pc, #92]	; (800985c <OLED_DrawPoint+0xb0>)
 80097fe:	00d2      	lsls	r2, r2, #3
 8009800:	440a      	add	r2, r1
 8009802:	4413      	add	r3, r2
 8009804:	7818      	ldrb	r0, [r3, #0]
 8009806:	79fa      	ldrb	r2, [r7, #7]
 8009808:	7bbb      	ldrb	r3, [r7, #14]
 800980a:	7bf9      	ldrb	r1, [r7, #15]
 800980c:	4301      	orrs	r1, r0
 800980e:	b2c8      	uxtb	r0, r1
 8009810:	4912      	ldr	r1, [pc, #72]	; (800985c <OLED_DrawPoint+0xb0>)
 8009812:	00d2      	lsls	r2, r2, #3
 8009814:	440a      	add	r2, r1
 8009816:	4413      	add	r3, r2
 8009818:	4602      	mov	r2, r0
 800981a:	701a      	strb	r2, [r3, #0]
 800981c:	e018      	b.n	8009850 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800981e:	79fa      	ldrb	r2, [r7, #7]
 8009820:	7bbb      	ldrb	r3, [r7, #14]
 8009822:	490e      	ldr	r1, [pc, #56]	; (800985c <OLED_DrawPoint+0xb0>)
 8009824:	00d2      	lsls	r2, r2, #3
 8009826:	440a      	add	r2, r1
 8009828:	4413      	add	r3, r2
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	b25a      	sxtb	r2, r3
 800982e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009832:	43db      	mvns	r3, r3
 8009834:	b25b      	sxtb	r3, r3
 8009836:	4013      	ands	r3, r2
 8009838:	b259      	sxtb	r1, r3
 800983a:	79fa      	ldrb	r2, [r7, #7]
 800983c:	7bbb      	ldrb	r3, [r7, #14]
 800983e:	b2c8      	uxtb	r0, r1
 8009840:	4906      	ldr	r1, [pc, #24]	; (800985c <OLED_DrawPoint+0xb0>)
 8009842:	00d2      	lsls	r2, r2, #3
 8009844:	440a      	add	r2, r1
 8009846:	4413      	add	r3, r2
 8009848:	4602      	mov	r2, r0
 800984a:	701a      	strb	r2, [r3, #0]
 800984c:	e000      	b.n	8009850 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800984e:	bf00      	nop
}
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	20004c98 	.word	0x20004c98

08009860 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8009860:	b590      	push	{r4, r7, lr}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	4604      	mov	r4, r0
 8009868:	4608      	mov	r0, r1
 800986a:	4611      	mov	r1, r2
 800986c:	461a      	mov	r2, r3
 800986e:	4623      	mov	r3, r4
 8009870:	71fb      	strb	r3, [r7, #7]
 8009872:	4603      	mov	r3, r0
 8009874:	71bb      	strb	r3, [r7, #6]
 8009876:	460b      	mov	r3, r1
 8009878:	717b      	strb	r3, [r7, #5]
 800987a:	4613      	mov	r3, r2
 800987c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800987e:	79bb      	ldrb	r3, [r7, #6]
 8009880:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8009882:	797b      	ldrb	r3, [r7, #5]
 8009884:	3b20      	subs	r3, #32
 8009886:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8009888:	2300      	movs	r3, #0
 800988a:	73bb      	strb	r3, [r7, #14]
 800988c:	e04d      	b.n	800992a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800988e:	793b      	ldrb	r3, [r7, #4]
 8009890:	2b0c      	cmp	r3, #12
 8009892:	d10b      	bne.n	80098ac <OLED_ShowChar+0x4c>
 8009894:	797a      	ldrb	r2, [r7, #5]
 8009896:	7bb9      	ldrb	r1, [r7, #14]
 8009898:	4828      	ldr	r0, [pc, #160]	; (800993c <OLED_ShowChar+0xdc>)
 800989a:	4613      	mov	r3, r2
 800989c:	005b      	lsls	r3, r3, #1
 800989e:	4413      	add	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4403      	add	r3, r0
 80098a4:	440b      	add	r3, r1
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	73fb      	strb	r3, [r7, #15]
 80098aa:	e007      	b.n	80098bc <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 80098ac:	797a      	ldrb	r2, [r7, #5]
 80098ae:	7bbb      	ldrb	r3, [r7, #14]
 80098b0:	4923      	ldr	r1, [pc, #140]	; (8009940 <OLED_ShowChar+0xe0>)
 80098b2:	0112      	lsls	r2, r2, #4
 80098b4:	440a      	add	r2, r1
 80098b6:	4413      	add	r3, r2
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80098bc:	2300      	movs	r3, #0
 80098be:	737b      	strb	r3, [r7, #13]
 80098c0:	e02d      	b.n	800991e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80098c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	da07      	bge.n	80098da <OLED_ShowChar+0x7a>
 80098ca:	f897 2020 	ldrb.w	r2, [r7, #32]
 80098ce:	79b9      	ldrb	r1, [r7, #6]
 80098d0:	79fb      	ldrb	r3, [r7, #7]
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7ff ff6a 	bl	80097ac <OLED_DrawPoint>
 80098d8:	e00c      	b.n	80098f4 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 80098da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	bf0c      	ite	eq
 80098e2:	2301      	moveq	r3, #1
 80098e4:	2300      	movne	r3, #0
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	461a      	mov	r2, r3
 80098ea:	79b9      	ldrb	r1, [r7, #6]
 80098ec:	79fb      	ldrb	r3, [r7, #7]
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7ff ff5c 	bl	80097ac <OLED_DrawPoint>
			temp<<=1;
 80098f4:	7bfb      	ldrb	r3, [r7, #15]
 80098f6:	005b      	lsls	r3, r3, #1
 80098f8:	73fb      	strb	r3, [r7, #15]
			y++;
 80098fa:	79bb      	ldrb	r3, [r7, #6]
 80098fc:	3301      	adds	r3, #1
 80098fe:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8009900:	79ba      	ldrb	r2, [r7, #6]
 8009902:	7b3b      	ldrb	r3, [r7, #12]
 8009904:	1ad2      	subs	r2, r2, r3
 8009906:	793b      	ldrb	r3, [r7, #4]
 8009908:	429a      	cmp	r2, r3
 800990a:	d105      	bne.n	8009918 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800990c:	7b3b      	ldrb	r3, [r7, #12]
 800990e:	71bb      	strb	r3, [r7, #6]
				x++;
 8009910:	79fb      	ldrb	r3, [r7, #7]
 8009912:	3301      	adds	r3, #1
 8009914:	71fb      	strb	r3, [r7, #7]
				break;
 8009916:	e005      	b.n	8009924 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8009918:	7b7b      	ldrb	r3, [r7, #13]
 800991a:	3301      	adds	r3, #1
 800991c:	737b      	strb	r3, [r7, #13]
 800991e:	7b7b      	ldrb	r3, [r7, #13]
 8009920:	2b07      	cmp	r3, #7
 8009922:	d9ce      	bls.n	80098c2 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8009924:	7bbb      	ldrb	r3, [r7, #14]
 8009926:	3301      	adds	r3, #1
 8009928:	73bb      	strb	r3, [r7, #14]
 800992a:	7bba      	ldrb	r2, [r7, #14]
 800992c:	793b      	ldrb	r3, [r7, #4]
 800992e:	429a      	cmp	r2, r3
 8009930:	d3ad      	bcc.n	800988e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8009932:	bf00      	nop
 8009934:	bf00      	nop
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	bd90      	pop	{r4, r7, pc}
 800993c:	0800a494 	.word	0x0800a494
 8009940:	0800a908 	.word	0x0800a908

08009944 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af02      	add	r7, sp, #8
 800994a:	4603      	mov	r3, r0
 800994c:	603a      	str	r2, [r7, #0]
 800994e:	71fb      	strb	r3, [r7, #7]
 8009950:	460b      	mov	r3, r1
 8009952:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8009954:	e01f      	b.n	8009996 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8009956:	79fb      	ldrb	r3, [r7, #7]
 8009958:	2b7a      	cmp	r3, #122	; 0x7a
 800995a:	d904      	bls.n	8009966 <OLED_ShowString+0x22>
 800995c:	2300      	movs	r3, #0
 800995e:	71fb      	strb	r3, [r7, #7]
 8009960:	79bb      	ldrb	r3, [r7, #6]
 8009962:	3310      	adds	r3, #16
 8009964:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8009966:	79bb      	ldrb	r3, [r7, #6]
 8009968:	2b3a      	cmp	r3, #58	; 0x3a
 800996a:	d905      	bls.n	8009978 <OLED_ShowString+0x34>
 800996c:	2300      	movs	r3, #0
 800996e:	71fb      	strb	r3, [r7, #7]
 8009970:	79fb      	ldrb	r3, [r7, #7]
 8009972:	71bb      	strb	r3, [r7, #6]
 8009974:	f7ff fef4 	bl	8009760 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	781a      	ldrb	r2, [r3, #0]
 800997c:	79b9      	ldrb	r1, [r7, #6]
 800997e:	79f8      	ldrb	r0, [r7, #7]
 8009980:	2301      	movs	r3, #1
 8009982:	9300      	str	r3, [sp, #0]
 8009984:	230c      	movs	r3, #12
 8009986:	f7ff ff6b 	bl	8009860 <OLED_ShowChar>
        x+=8;
 800998a:	79fb      	ldrb	r3, [r7, #7]
 800998c:	3308      	adds	r3, #8
 800998e:	71fb      	strb	r3, [r7, #7]
        p++;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	3301      	adds	r3, #1
 8009994:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1db      	bne.n	8009956 <OLED_ShowString+0x12>
    }  
}	 
 800999e:	bf00      	nop
 80099a0:	bf00      	nop
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <OLED_Init>:

void OLED_Init(void)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80099ac:	f7f9 ff8c 	bl	80038c8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 80099b0:	4b41      	ldr	r3, [pc, #260]	; (8009ab8 <OLED_Init+0x110>)
 80099b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099b4:	4a40      	ldr	r2, [pc, #256]	; (8009ab8 <OLED_Init+0x110>)
 80099b6:	f023 0301 	bic.w	r3, r3, #1
 80099ba:	6713      	str	r3, [r2, #112]	; 0x70
 80099bc:	4b3e      	ldr	r3, [pc, #248]	; (8009ab8 <OLED_Init+0x110>)
 80099be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099c0:	4a3d      	ldr	r2, [pc, #244]	; (8009ab8 <OLED_Init+0x110>)
 80099c2:	f023 0304 	bic.w	r3, r3, #4
 80099c6:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80099c8:	f7f9 ff92 	bl	80038f0 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80099cc:	2200      	movs	r2, #0
 80099ce:	2180      	movs	r1, #128	; 0x80
 80099d0:	483a      	ldr	r0, [pc, #232]	; (8009abc <OLED_Init+0x114>)
 80099d2:	f7f9 ff5f 	bl	8003894 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80099d6:	2064      	movs	r0, #100	; 0x64
 80099d8:	f7f9 f996 	bl	8002d08 <HAL_Delay>
	OLED_RST_Set();
 80099dc:	2201      	movs	r2, #1
 80099de:	2180      	movs	r1, #128	; 0x80
 80099e0:	4836      	ldr	r0, [pc, #216]	; (8009abc <OLED_Init+0x114>)
 80099e2:	f7f9 ff57 	bl	8003894 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 80099e6:	2100      	movs	r1, #0
 80099e8:	20ae      	movs	r0, #174	; 0xae
 80099ea:	f7ff fe6f 	bl	80096cc <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 80099ee:	2100      	movs	r1, #0
 80099f0:	20d5      	movs	r0, #213	; 0xd5
 80099f2:	f7ff fe6b 	bl	80096cc <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80099f6:	2100      	movs	r1, #0
 80099f8:	2050      	movs	r0, #80	; 0x50
 80099fa:	f7ff fe67 	bl	80096cc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80099fe:	2100      	movs	r1, #0
 8009a00:	20a8      	movs	r0, #168	; 0xa8
 8009a02:	f7ff fe63 	bl	80096cc <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8009a06:	2100      	movs	r1, #0
 8009a08:	203f      	movs	r0, #63	; 0x3f
 8009a0a:	f7ff fe5f 	bl	80096cc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8009a0e:	2100      	movs	r1, #0
 8009a10:	20d3      	movs	r0, #211	; 0xd3
 8009a12:	f7ff fe5b 	bl	80096cc <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8009a16:	2100      	movs	r1, #0
 8009a18:	2000      	movs	r0, #0
 8009a1a:	f7ff fe57 	bl	80096cc <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8009a1e:	2100      	movs	r1, #0
 8009a20:	2040      	movs	r0, #64	; 0x40
 8009a22:	f7ff fe53 	bl	80096cc <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8009a26:	2100      	movs	r1, #0
 8009a28:	208d      	movs	r0, #141	; 0x8d
 8009a2a:	f7ff fe4f 	bl	80096cc <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8009a2e:	2100      	movs	r1, #0
 8009a30:	2014      	movs	r0, #20
 8009a32:	f7ff fe4b 	bl	80096cc <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8009a36:	2100      	movs	r1, #0
 8009a38:	2020      	movs	r0, #32
 8009a3a:	f7ff fe47 	bl	80096cc <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8009a3e:	2100      	movs	r1, #0
 8009a40:	2002      	movs	r0, #2
 8009a42:	f7ff fe43 	bl	80096cc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8009a46:	2100      	movs	r1, #0
 8009a48:	20a1      	movs	r0, #161	; 0xa1
 8009a4a:	f7ff fe3f 	bl	80096cc <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8009a4e:	2100      	movs	r1, #0
 8009a50:	20c0      	movs	r0, #192	; 0xc0
 8009a52:	f7ff fe3b 	bl	80096cc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8009a56:	2100      	movs	r1, #0
 8009a58:	20da      	movs	r0, #218	; 0xda
 8009a5a:	f7ff fe37 	bl	80096cc <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8009a5e:	2100      	movs	r1, #0
 8009a60:	2012      	movs	r0, #18
 8009a62:	f7ff fe33 	bl	80096cc <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8009a66:	2100      	movs	r1, #0
 8009a68:	2081      	movs	r0, #129	; 0x81
 8009a6a:	f7ff fe2f 	bl	80096cc <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8009a6e:	2100      	movs	r1, #0
 8009a70:	20ef      	movs	r0, #239	; 0xef
 8009a72:	f7ff fe2b 	bl	80096cc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8009a76:	2100      	movs	r1, #0
 8009a78:	20d9      	movs	r0, #217	; 0xd9
 8009a7a:	f7ff fe27 	bl	80096cc <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8009a7e:	2100      	movs	r1, #0
 8009a80:	20f1      	movs	r0, #241	; 0xf1
 8009a82:	f7ff fe23 	bl	80096cc <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8009a86:	2100      	movs	r1, #0
 8009a88:	20db      	movs	r0, #219	; 0xdb
 8009a8a:	f7ff fe1f 	bl	80096cc <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8009a8e:	2100      	movs	r1, #0
 8009a90:	2030      	movs	r0, #48	; 0x30
 8009a92:	f7ff fe1b 	bl	80096cc <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8009a96:	2100      	movs	r1, #0
 8009a98:	20a4      	movs	r0, #164	; 0xa4
 8009a9a:	f7ff fe17 	bl	80096cc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	20a6      	movs	r0, #166	; 0xa6
 8009aa2:	f7ff fe13 	bl	80096cc <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	20af      	movs	r0, #175	; 0xaf
 8009aaa:	f7ff fe0f 	bl	80096cc <OLED_WR_Byte>
	OLED_Clear(); 
 8009aae:	f7ff fe57 	bl	8009760 <OLED_Clear>
 8009ab2:	bf00      	nop
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	40023800 	.word	0x40023800
 8009abc:	40021000 	.word	0x40021000

08009ac0 <__errno>:
 8009ac0:	4b01      	ldr	r3, [pc, #4]	; (8009ac8 <__errno+0x8>)
 8009ac2:	6818      	ldr	r0, [r3, #0]
 8009ac4:	4770      	bx	lr
 8009ac6:	bf00      	nop
 8009ac8:	20000010 	.word	0x20000010

08009acc <__libc_init_array>:
 8009acc:	b570      	push	{r4, r5, r6, lr}
 8009ace:	4d0d      	ldr	r5, [pc, #52]	; (8009b04 <__libc_init_array+0x38>)
 8009ad0:	4c0d      	ldr	r4, [pc, #52]	; (8009b08 <__libc_init_array+0x3c>)
 8009ad2:	1b64      	subs	r4, r4, r5
 8009ad4:	10a4      	asrs	r4, r4, #2
 8009ad6:	2600      	movs	r6, #0
 8009ad8:	42a6      	cmp	r6, r4
 8009ada:	d109      	bne.n	8009af0 <__libc_init_array+0x24>
 8009adc:	4d0b      	ldr	r5, [pc, #44]	; (8009b0c <__libc_init_array+0x40>)
 8009ade:	4c0c      	ldr	r4, [pc, #48]	; (8009b10 <__libc_init_array+0x44>)
 8009ae0:	f000 fc4e 	bl	800a380 <_init>
 8009ae4:	1b64      	subs	r4, r4, r5
 8009ae6:	10a4      	asrs	r4, r4, #2
 8009ae8:	2600      	movs	r6, #0
 8009aea:	42a6      	cmp	r6, r4
 8009aec:	d105      	bne.n	8009afa <__libc_init_array+0x2e>
 8009aee:	bd70      	pop	{r4, r5, r6, pc}
 8009af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009af4:	4798      	blx	r3
 8009af6:	3601      	adds	r6, #1
 8009af8:	e7ee      	b.n	8009ad8 <__libc_init_array+0xc>
 8009afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009afe:	4798      	blx	r3
 8009b00:	3601      	adds	r6, #1
 8009b02:	e7f2      	b.n	8009aea <__libc_init_array+0x1e>
 8009b04:	0800af34 	.word	0x0800af34
 8009b08:	0800af34 	.word	0x0800af34
 8009b0c:	0800af34 	.word	0x0800af34
 8009b10:	0800af38 	.word	0x0800af38

08009b14 <memcpy>:
 8009b14:	440a      	add	r2, r1
 8009b16:	4291      	cmp	r1, r2
 8009b18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009b1c:	d100      	bne.n	8009b20 <memcpy+0xc>
 8009b1e:	4770      	bx	lr
 8009b20:	b510      	push	{r4, lr}
 8009b22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b2a:	4291      	cmp	r1, r2
 8009b2c:	d1f9      	bne.n	8009b22 <memcpy+0xe>
 8009b2e:	bd10      	pop	{r4, pc}

08009b30 <memset>:
 8009b30:	4402      	add	r2, r0
 8009b32:	4603      	mov	r3, r0
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d100      	bne.n	8009b3a <memset+0xa>
 8009b38:	4770      	bx	lr
 8009b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b3e:	e7f9      	b.n	8009b34 <memset+0x4>

08009b40 <siprintf>:
 8009b40:	b40e      	push	{r1, r2, r3}
 8009b42:	b500      	push	{lr}
 8009b44:	b09c      	sub	sp, #112	; 0x70
 8009b46:	ab1d      	add	r3, sp, #116	; 0x74
 8009b48:	9002      	str	r0, [sp, #8]
 8009b4a:	9006      	str	r0, [sp, #24]
 8009b4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b50:	4809      	ldr	r0, [pc, #36]	; (8009b78 <siprintf+0x38>)
 8009b52:	9107      	str	r1, [sp, #28]
 8009b54:	9104      	str	r1, [sp, #16]
 8009b56:	4909      	ldr	r1, [pc, #36]	; (8009b7c <siprintf+0x3c>)
 8009b58:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b5c:	9105      	str	r1, [sp, #20]
 8009b5e:	6800      	ldr	r0, [r0, #0]
 8009b60:	9301      	str	r3, [sp, #4]
 8009b62:	a902      	add	r1, sp, #8
 8009b64:	f000 f868 	bl	8009c38 <_svfiprintf_r>
 8009b68:	9b02      	ldr	r3, [sp, #8]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	701a      	strb	r2, [r3, #0]
 8009b6e:	b01c      	add	sp, #112	; 0x70
 8009b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b74:	b003      	add	sp, #12
 8009b76:	4770      	bx	lr
 8009b78:	20000010 	.word	0x20000010
 8009b7c:	ffff0208 	.word	0xffff0208

08009b80 <__ssputs_r>:
 8009b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b84:	688e      	ldr	r6, [r1, #8]
 8009b86:	429e      	cmp	r6, r3
 8009b88:	4682      	mov	sl, r0
 8009b8a:	460c      	mov	r4, r1
 8009b8c:	4690      	mov	r8, r2
 8009b8e:	461f      	mov	r7, r3
 8009b90:	d838      	bhi.n	8009c04 <__ssputs_r+0x84>
 8009b92:	898a      	ldrh	r2, [r1, #12]
 8009b94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b98:	d032      	beq.n	8009c00 <__ssputs_r+0x80>
 8009b9a:	6825      	ldr	r5, [r4, #0]
 8009b9c:	6909      	ldr	r1, [r1, #16]
 8009b9e:	eba5 0901 	sub.w	r9, r5, r1
 8009ba2:	6965      	ldr	r5, [r4, #20]
 8009ba4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ba8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bac:	3301      	adds	r3, #1
 8009bae:	444b      	add	r3, r9
 8009bb0:	106d      	asrs	r5, r5, #1
 8009bb2:	429d      	cmp	r5, r3
 8009bb4:	bf38      	it	cc
 8009bb6:	461d      	movcc	r5, r3
 8009bb8:	0553      	lsls	r3, r2, #21
 8009bba:	d531      	bpl.n	8009c20 <__ssputs_r+0xa0>
 8009bbc:	4629      	mov	r1, r5
 8009bbe:	f000 fb39 	bl	800a234 <_malloc_r>
 8009bc2:	4606      	mov	r6, r0
 8009bc4:	b950      	cbnz	r0, 8009bdc <__ssputs_r+0x5c>
 8009bc6:	230c      	movs	r3, #12
 8009bc8:	f8ca 3000 	str.w	r3, [sl]
 8009bcc:	89a3      	ldrh	r3, [r4, #12]
 8009bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bd2:	81a3      	strh	r3, [r4, #12]
 8009bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bdc:	6921      	ldr	r1, [r4, #16]
 8009bde:	464a      	mov	r2, r9
 8009be0:	f7ff ff98 	bl	8009b14 <memcpy>
 8009be4:	89a3      	ldrh	r3, [r4, #12]
 8009be6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bee:	81a3      	strh	r3, [r4, #12]
 8009bf0:	6126      	str	r6, [r4, #16]
 8009bf2:	6165      	str	r5, [r4, #20]
 8009bf4:	444e      	add	r6, r9
 8009bf6:	eba5 0509 	sub.w	r5, r5, r9
 8009bfa:	6026      	str	r6, [r4, #0]
 8009bfc:	60a5      	str	r5, [r4, #8]
 8009bfe:	463e      	mov	r6, r7
 8009c00:	42be      	cmp	r6, r7
 8009c02:	d900      	bls.n	8009c06 <__ssputs_r+0x86>
 8009c04:	463e      	mov	r6, r7
 8009c06:	4632      	mov	r2, r6
 8009c08:	6820      	ldr	r0, [r4, #0]
 8009c0a:	4641      	mov	r1, r8
 8009c0c:	f000 faa8 	bl	800a160 <memmove>
 8009c10:	68a3      	ldr	r3, [r4, #8]
 8009c12:	6822      	ldr	r2, [r4, #0]
 8009c14:	1b9b      	subs	r3, r3, r6
 8009c16:	4432      	add	r2, r6
 8009c18:	60a3      	str	r3, [r4, #8]
 8009c1a:	6022      	str	r2, [r4, #0]
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	e7db      	b.n	8009bd8 <__ssputs_r+0x58>
 8009c20:	462a      	mov	r2, r5
 8009c22:	f000 fb61 	bl	800a2e8 <_realloc_r>
 8009c26:	4606      	mov	r6, r0
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	d1e1      	bne.n	8009bf0 <__ssputs_r+0x70>
 8009c2c:	6921      	ldr	r1, [r4, #16]
 8009c2e:	4650      	mov	r0, sl
 8009c30:	f000 fab0 	bl	800a194 <_free_r>
 8009c34:	e7c7      	b.n	8009bc6 <__ssputs_r+0x46>
	...

08009c38 <_svfiprintf_r>:
 8009c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3c:	4698      	mov	r8, r3
 8009c3e:	898b      	ldrh	r3, [r1, #12]
 8009c40:	061b      	lsls	r3, r3, #24
 8009c42:	b09d      	sub	sp, #116	; 0x74
 8009c44:	4607      	mov	r7, r0
 8009c46:	460d      	mov	r5, r1
 8009c48:	4614      	mov	r4, r2
 8009c4a:	d50e      	bpl.n	8009c6a <_svfiprintf_r+0x32>
 8009c4c:	690b      	ldr	r3, [r1, #16]
 8009c4e:	b963      	cbnz	r3, 8009c6a <_svfiprintf_r+0x32>
 8009c50:	2140      	movs	r1, #64	; 0x40
 8009c52:	f000 faef 	bl	800a234 <_malloc_r>
 8009c56:	6028      	str	r0, [r5, #0]
 8009c58:	6128      	str	r0, [r5, #16]
 8009c5a:	b920      	cbnz	r0, 8009c66 <_svfiprintf_r+0x2e>
 8009c5c:	230c      	movs	r3, #12
 8009c5e:	603b      	str	r3, [r7, #0]
 8009c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c64:	e0d1      	b.n	8009e0a <_svfiprintf_r+0x1d2>
 8009c66:	2340      	movs	r3, #64	; 0x40
 8009c68:	616b      	str	r3, [r5, #20]
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c6e:	2320      	movs	r3, #32
 8009c70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c74:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c78:	2330      	movs	r3, #48	; 0x30
 8009c7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009e24 <_svfiprintf_r+0x1ec>
 8009c7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c82:	f04f 0901 	mov.w	r9, #1
 8009c86:	4623      	mov	r3, r4
 8009c88:	469a      	mov	sl, r3
 8009c8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c8e:	b10a      	cbz	r2, 8009c94 <_svfiprintf_r+0x5c>
 8009c90:	2a25      	cmp	r2, #37	; 0x25
 8009c92:	d1f9      	bne.n	8009c88 <_svfiprintf_r+0x50>
 8009c94:	ebba 0b04 	subs.w	fp, sl, r4
 8009c98:	d00b      	beq.n	8009cb2 <_svfiprintf_r+0x7a>
 8009c9a:	465b      	mov	r3, fp
 8009c9c:	4622      	mov	r2, r4
 8009c9e:	4629      	mov	r1, r5
 8009ca0:	4638      	mov	r0, r7
 8009ca2:	f7ff ff6d 	bl	8009b80 <__ssputs_r>
 8009ca6:	3001      	adds	r0, #1
 8009ca8:	f000 80aa 	beq.w	8009e00 <_svfiprintf_r+0x1c8>
 8009cac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cae:	445a      	add	r2, fp
 8009cb0:	9209      	str	r2, [sp, #36]	; 0x24
 8009cb2:	f89a 3000 	ldrb.w	r3, [sl]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f000 80a2 	beq.w	8009e00 <_svfiprintf_r+0x1c8>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cc6:	f10a 0a01 	add.w	sl, sl, #1
 8009cca:	9304      	str	r3, [sp, #16]
 8009ccc:	9307      	str	r3, [sp, #28]
 8009cce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cd2:	931a      	str	r3, [sp, #104]	; 0x68
 8009cd4:	4654      	mov	r4, sl
 8009cd6:	2205      	movs	r2, #5
 8009cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cdc:	4851      	ldr	r0, [pc, #324]	; (8009e24 <_svfiprintf_r+0x1ec>)
 8009cde:	f7f6 fa7f 	bl	80001e0 <memchr>
 8009ce2:	9a04      	ldr	r2, [sp, #16]
 8009ce4:	b9d8      	cbnz	r0, 8009d1e <_svfiprintf_r+0xe6>
 8009ce6:	06d0      	lsls	r0, r2, #27
 8009ce8:	bf44      	itt	mi
 8009cea:	2320      	movmi	r3, #32
 8009cec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cf0:	0711      	lsls	r1, r2, #28
 8009cf2:	bf44      	itt	mi
 8009cf4:	232b      	movmi	r3, #43	; 0x2b
 8009cf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8009cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8009d00:	d015      	beq.n	8009d2e <_svfiprintf_r+0xf6>
 8009d02:	9a07      	ldr	r2, [sp, #28]
 8009d04:	4654      	mov	r4, sl
 8009d06:	2000      	movs	r0, #0
 8009d08:	f04f 0c0a 	mov.w	ip, #10
 8009d0c:	4621      	mov	r1, r4
 8009d0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d12:	3b30      	subs	r3, #48	; 0x30
 8009d14:	2b09      	cmp	r3, #9
 8009d16:	d94e      	bls.n	8009db6 <_svfiprintf_r+0x17e>
 8009d18:	b1b0      	cbz	r0, 8009d48 <_svfiprintf_r+0x110>
 8009d1a:	9207      	str	r2, [sp, #28]
 8009d1c:	e014      	b.n	8009d48 <_svfiprintf_r+0x110>
 8009d1e:	eba0 0308 	sub.w	r3, r0, r8
 8009d22:	fa09 f303 	lsl.w	r3, r9, r3
 8009d26:	4313      	orrs	r3, r2
 8009d28:	9304      	str	r3, [sp, #16]
 8009d2a:	46a2      	mov	sl, r4
 8009d2c:	e7d2      	b.n	8009cd4 <_svfiprintf_r+0x9c>
 8009d2e:	9b03      	ldr	r3, [sp, #12]
 8009d30:	1d19      	adds	r1, r3, #4
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	9103      	str	r1, [sp, #12]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	bfbb      	ittet	lt
 8009d3a:	425b      	neglt	r3, r3
 8009d3c:	f042 0202 	orrlt.w	r2, r2, #2
 8009d40:	9307      	strge	r3, [sp, #28]
 8009d42:	9307      	strlt	r3, [sp, #28]
 8009d44:	bfb8      	it	lt
 8009d46:	9204      	strlt	r2, [sp, #16]
 8009d48:	7823      	ldrb	r3, [r4, #0]
 8009d4a:	2b2e      	cmp	r3, #46	; 0x2e
 8009d4c:	d10c      	bne.n	8009d68 <_svfiprintf_r+0x130>
 8009d4e:	7863      	ldrb	r3, [r4, #1]
 8009d50:	2b2a      	cmp	r3, #42	; 0x2a
 8009d52:	d135      	bne.n	8009dc0 <_svfiprintf_r+0x188>
 8009d54:	9b03      	ldr	r3, [sp, #12]
 8009d56:	1d1a      	adds	r2, r3, #4
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	9203      	str	r2, [sp, #12]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	bfb8      	it	lt
 8009d60:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009d64:	3402      	adds	r4, #2
 8009d66:	9305      	str	r3, [sp, #20]
 8009d68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e34 <_svfiprintf_r+0x1fc>
 8009d6c:	7821      	ldrb	r1, [r4, #0]
 8009d6e:	2203      	movs	r2, #3
 8009d70:	4650      	mov	r0, sl
 8009d72:	f7f6 fa35 	bl	80001e0 <memchr>
 8009d76:	b140      	cbz	r0, 8009d8a <_svfiprintf_r+0x152>
 8009d78:	2340      	movs	r3, #64	; 0x40
 8009d7a:	eba0 000a 	sub.w	r0, r0, sl
 8009d7e:	fa03 f000 	lsl.w	r0, r3, r0
 8009d82:	9b04      	ldr	r3, [sp, #16]
 8009d84:	4303      	orrs	r3, r0
 8009d86:	3401      	adds	r4, #1
 8009d88:	9304      	str	r3, [sp, #16]
 8009d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d8e:	4826      	ldr	r0, [pc, #152]	; (8009e28 <_svfiprintf_r+0x1f0>)
 8009d90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d94:	2206      	movs	r2, #6
 8009d96:	f7f6 fa23 	bl	80001e0 <memchr>
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	d038      	beq.n	8009e10 <_svfiprintf_r+0x1d8>
 8009d9e:	4b23      	ldr	r3, [pc, #140]	; (8009e2c <_svfiprintf_r+0x1f4>)
 8009da0:	bb1b      	cbnz	r3, 8009dea <_svfiprintf_r+0x1b2>
 8009da2:	9b03      	ldr	r3, [sp, #12]
 8009da4:	3307      	adds	r3, #7
 8009da6:	f023 0307 	bic.w	r3, r3, #7
 8009daa:	3308      	adds	r3, #8
 8009dac:	9303      	str	r3, [sp, #12]
 8009dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db0:	4433      	add	r3, r6
 8009db2:	9309      	str	r3, [sp, #36]	; 0x24
 8009db4:	e767      	b.n	8009c86 <_svfiprintf_r+0x4e>
 8009db6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dba:	460c      	mov	r4, r1
 8009dbc:	2001      	movs	r0, #1
 8009dbe:	e7a5      	b.n	8009d0c <_svfiprintf_r+0xd4>
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	3401      	adds	r4, #1
 8009dc4:	9305      	str	r3, [sp, #20]
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	f04f 0c0a 	mov.w	ip, #10
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dd2:	3a30      	subs	r2, #48	; 0x30
 8009dd4:	2a09      	cmp	r2, #9
 8009dd6:	d903      	bls.n	8009de0 <_svfiprintf_r+0x1a8>
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d0c5      	beq.n	8009d68 <_svfiprintf_r+0x130>
 8009ddc:	9105      	str	r1, [sp, #20]
 8009dde:	e7c3      	b.n	8009d68 <_svfiprintf_r+0x130>
 8009de0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009de4:	4604      	mov	r4, r0
 8009de6:	2301      	movs	r3, #1
 8009de8:	e7f0      	b.n	8009dcc <_svfiprintf_r+0x194>
 8009dea:	ab03      	add	r3, sp, #12
 8009dec:	9300      	str	r3, [sp, #0]
 8009dee:	462a      	mov	r2, r5
 8009df0:	4b0f      	ldr	r3, [pc, #60]	; (8009e30 <_svfiprintf_r+0x1f8>)
 8009df2:	a904      	add	r1, sp, #16
 8009df4:	4638      	mov	r0, r7
 8009df6:	f3af 8000 	nop.w
 8009dfa:	1c42      	adds	r2, r0, #1
 8009dfc:	4606      	mov	r6, r0
 8009dfe:	d1d6      	bne.n	8009dae <_svfiprintf_r+0x176>
 8009e00:	89ab      	ldrh	r3, [r5, #12]
 8009e02:	065b      	lsls	r3, r3, #25
 8009e04:	f53f af2c 	bmi.w	8009c60 <_svfiprintf_r+0x28>
 8009e08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e0a:	b01d      	add	sp, #116	; 0x74
 8009e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e10:	ab03      	add	r3, sp, #12
 8009e12:	9300      	str	r3, [sp, #0]
 8009e14:	462a      	mov	r2, r5
 8009e16:	4b06      	ldr	r3, [pc, #24]	; (8009e30 <_svfiprintf_r+0x1f8>)
 8009e18:	a904      	add	r1, sp, #16
 8009e1a:	4638      	mov	r0, r7
 8009e1c:	f000 f87a 	bl	8009f14 <_printf_i>
 8009e20:	e7eb      	b.n	8009dfa <_svfiprintf_r+0x1c2>
 8009e22:	bf00      	nop
 8009e24:	0800aef8 	.word	0x0800aef8
 8009e28:	0800af02 	.word	0x0800af02
 8009e2c:	00000000 	.word	0x00000000
 8009e30:	08009b81 	.word	0x08009b81
 8009e34:	0800aefe 	.word	0x0800aefe

08009e38 <_printf_common>:
 8009e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e3c:	4616      	mov	r6, r2
 8009e3e:	4699      	mov	r9, r3
 8009e40:	688a      	ldr	r2, [r1, #8]
 8009e42:	690b      	ldr	r3, [r1, #16]
 8009e44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	bfb8      	it	lt
 8009e4c:	4613      	movlt	r3, r2
 8009e4e:	6033      	str	r3, [r6, #0]
 8009e50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e54:	4607      	mov	r7, r0
 8009e56:	460c      	mov	r4, r1
 8009e58:	b10a      	cbz	r2, 8009e5e <_printf_common+0x26>
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	6033      	str	r3, [r6, #0]
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	0699      	lsls	r1, r3, #26
 8009e62:	bf42      	ittt	mi
 8009e64:	6833      	ldrmi	r3, [r6, #0]
 8009e66:	3302      	addmi	r3, #2
 8009e68:	6033      	strmi	r3, [r6, #0]
 8009e6a:	6825      	ldr	r5, [r4, #0]
 8009e6c:	f015 0506 	ands.w	r5, r5, #6
 8009e70:	d106      	bne.n	8009e80 <_printf_common+0x48>
 8009e72:	f104 0a19 	add.w	sl, r4, #25
 8009e76:	68e3      	ldr	r3, [r4, #12]
 8009e78:	6832      	ldr	r2, [r6, #0]
 8009e7a:	1a9b      	subs	r3, r3, r2
 8009e7c:	42ab      	cmp	r3, r5
 8009e7e:	dc26      	bgt.n	8009ece <_printf_common+0x96>
 8009e80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e84:	1e13      	subs	r3, r2, #0
 8009e86:	6822      	ldr	r2, [r4, #0]
 8009e88:	bf18      	it	ne
 8009e8a:	2301      	movne	r3, #1
 8009e8c:	0692      	lsls	r2, r2, #26
 8009e8e:	d42b      	bmi.n	8009ee8 <_printf_common+0xb0>
 8009e90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e94:	4649      	mov	r1, r9
 8009e96:	4638      	mov	r0, r7
 8009e98:	47c0      	blx	r8
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	d01e      	beq.n	8009edc <_printf_common+0xa4>
 8009e9e:	6823      	ldr	r3, [r4, #0]
 8009ea0:	68e5      	ldr	r5, [r4, #12]
 8009ea2:	6832      	ldr	r2, [r6, #0]
 8009ea4:	f003 0306 	and.w	r3, r3, #6
 8009ea8:	2b04      	cmp	r3, #4
 8009eaa:	bf08      	it	eq
 8009eac:	1aad      	subeq	r5, r5, r2
 8009eae:	68a3      	ldr	r3, [r4, #8]
 8009eb0:	6922      	ldr	r2, [r4, #16]
 8009eb2:	bf0c      	ite	eq
 8009eb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009eb8:	2500      	movne	r5, #0
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	bfc4      	itt	gt
 8009ebe:	1a9b      	subgt	r3, r3, r2
 8009ec0:	18ed      	addgt	r5, r5, r3
 8009ec2:	2600      	movs	r6, #0
 8009ec4:	341a      	adds	r4, #26
 8009ec6:	42b5      	cmp	r5, r6
 8009ec8:	d11a      	bne.n	8009f00 <_printf_common+0xc8>
 8009eca:	2000      	movs	r0, #0
 8009ecc:	e008      	b.n	8009ee0 <_printf_common+0xa8>
 8009ece:	2301      	movs	r3, #1
 8009ed0:	4652      	mov	r2, sl
 8009ed2:	4649      	mov	r1, r9
 8009ed4:	4638      	mov	r0, r7
 8009ed6:	47c0      	blx	r8
 8009ed8:	3001      	adds	r0, #1
 8009eda:	d103      	bne.n	8009ee4 <_printf_common+0xac>
 8009edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ee4:	3501      	adds	r5, #1
 8009ee6:	e7c6      	b.n	8009e76 <_printf_common+0x3e>
 8009ee8:	18e1      	adds	r1, r4, r3
 8009eea:	1c5a      	adds	r2, r3, #1
 8009eec:	2030      	movs	r0, #48	; 0x30
 8009eee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ef2:	4422      	add	r2, r4
 8009ef4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ef8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009efc:	3302      	adds	r3, #2
 8009efe:	e7c7      	b.n	8009e90 <_printf_common+0x58>
 8009f00:	2301      	movs	r3, #1
 8009f02:	4622      	mov	r2, r4
 8009f04:	4649      	mov	r1, r9
 8009f06:	4638      	mov	r0, r7
 8009f08:	47c0      	blx	r8
 8009f0a:	3001      	adds	r0, #1
 8009f0c:	d0e6      	beq.n	8009edc <_printf_common+0xa4>
 8009f0e:	3601      	adds	r6, #1
 8009f10:	e7d9      	b.n	8009ec6 <_printf_common+0x8e>
	...

08009f14 <_printf_i>:
 8009f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f18:	460c      	mov	r4, r1
 8009f1a:	4691      	mov	r9, r2
 8009f1c:	7e27      	ldrb	r7, [r4, #24]
 8009f1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009f20:	2f78      	cmp	r7, #120	; 0x78
 8009f22:	4680      	mov	r8, r0
 8009f24:	469a      	mov	sl, r3
 8009f26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f2a:	d807      	bhi.n	8009f3c <_printf_i+0x28>
 8009f2c:	2f62      	cmp	r7, #98	; 0x62
 8009f2e:	d80a      	bhi.n	8009f46 <_printf_i+0x32>
 8009f30:	2f00      	cmp	r7, #0
 8009f32:	f000 80d8 	beq.w	800a0e6 <_printf_i+0x1d2>
 8009f36:	2f58      	cmp	r7, #88	; 0x58
 8009f38:	f000 80a3 	beq.w	800a082 <_printf_i+0x16e>
 8009f3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f44:	e03a      	b.n	8009fbc <_printf_i+0xa8>
 8009f46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f4a:	2b15      	cmp	r3, #21
 8009f4c:	d8f6      	bhi.n	8009f3c <_printf_i+0x28>
 8009f4e:	a001      	add	r0, pc, #4	; (adr r0, 8009f54 <_printf_i+0x40>)
 8009f50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009f54:	08009fad 	.word	0x08009fad
 8009f58:	08009fc1 	.word	0x08009fc1
 8009f5c:	08009f3d 	.word	0x08009f3d
 8009f60:	08009f3d 	.word	0x08009f3d
 8009f64:	08009f3d 	.word	0x08009f3d
 8009f68:	08009f3d 	.word	0x08009f3d
 8009f6c:	08009fc1 	.word	0x08009fc1
 8009f70:	08009f3d 	.word	0x08009f3d
 8009f74:	08009f3d 	.word	0x08009f3d
 8009f78:	08009f3d 	.word	0x08009f3d
 8009f7c:	08009f3d 	.word	0x08009f3d
 8009f80:	0800a0cd 	.word	0x0800a0cd
 8009f84:	08009ff1 	.word	0x08009ff1
 8009f88:	0800a0af 	.word	0x0800a0af
 8009f8c:	08009f3d 	.word	0x08009f3d
 8009f90:	08009f3d 	.word	0x08009f3d
 8009f94:	0800a0ef 	.word	0x0800a0ef
 8009f98:	08009f3d 	.word	0x08009f3d
 8009f9c:	08009ff1 	.word	0x08009ff1
 8009fa0:	08009f3d 	.word	0x08009f3d
 8009fa4:	08009f3d 	.word	0x08009f3d
 8009fa8:	0800a0b7 	.word	0x0800a0b7
 8009fac:	680b      	ldr	r3, [r1, #0]
 8009fae:	1d1a      	adds	r2, r3, #4
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	600a      	str	r2, [r1, #0]
 8009fb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009fb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e0a3      	b.n	800a108 <_printf_i+0x1f4>
 8009fc0:	6825      	ldr	r5, [r4, #0]
 8009fc2:	6808      	ldr	r0, [r1, #0]
 8009fc4:	062e      	lsls	r6, r5, #24
 8009fc6:	f100 0304 	add.w	r3, r0, #4
 8009fca:	d50a      	bpl.n	8009fe2 <_printf_i+0xce>
 8009fcc:	6805      	ldr	r5, [r0, #0]
 8009fce:	600b      	str	r3, [r1, #0]
 8009fd0:	2d00      	cmp	r5, #0
 8009fd2:	da03      	bge.n	8009fdc <_printf_i+0xc8>
 8009fd4:	232d      	movs	r3, #45	; 0x2d
 8009fd6:	426d      	negs	r5, r5
 8009fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fdc:	485e      	ldr	r0, [pc, #376]	; (800a158 <_printf_i+0x244>)
 8009fde:	230a      	movs	r3, #10
 8009fe0:	e019      	b.n	800a016 <_printf_i+0x102>
 8009fe2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009fe6:	6805      	ldr	r5, [r0, #0]
 8009fe8:	600b      	str	r3, [r1, #0]
 8009fea:	bf18      	it	ne
 8009fec:	b22d      	sxthne	r5, r5
 8009fee:	e7ef      	b.n	8009fd0 <_printf_i+0xbc>
 8009ff0:	680b      	ldr	r3, [r1, #0]
 8009ff2:	6825      	ldr	r5, [r4, #0]
 8009ff4:	1d18      	adds	r0, r3, #4
 8009ff6:	6008      	str	r0, [r1, #0]
 8009ff8:	0628      	lsls	r0, r5, #24
 8009ffa:	d501      	bpl.n	800a000 <_printf_i+0xec>
 8009ffc:	681d      	ldr	r5, [r3, #0]
 8009ffe:	e002      	b.n	800a006 <_printf_i+0xf2>
 800a000:	0669      	lsls	r1, r5, #25
 800a002:	d5fb      	bpl.n	8009ffc <_printf_i+0xe8>
 800a004:	881d      	ldrh	r5, [r3, #0]
 800a006:	4854      	ldr	r0, [pc, #336]	; (800a158 <_printf_i+0x244>)
 800a008:	2f6f      	cmp	r7, #111	; 0x6f
 800a00a:	bf0c      	ite	eq
 800a00c:	2308      	moveq	r3, #8
 800a00e:	230a      	movne	r3, #10
 800a010:	2100      	movs	r1, #0
 800a012:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a016:	6866      	ldr	r6, [r4, #4]
 800a018:	60a6      	str	r6, [r4, #8]
 800a01a:	2e00      	cmp	r6, #0
 800a01c:	bfa2      	ittt	ge
 800a01e:	6821      	ldrge	r1, [r4, #0]
 800a020:	f021 0104 	bicge.w	r1, r1, #4
 800a024:	6021      	strge	r1, [r4, #0]
 800a026:	b90d      	cbnz	r5, 800a02c <_printf_i+0x118>
 800a028:	2e00      	cmp	r6, #0
 800a02a:	d04d      	beq.n	800a0c8 <_printf_i+0x1b4>
 800a02c:	4616      	mov	r6, r2
 800a02e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a032:	fb03 5711 	mls	r7, r3, r1, r5
 800a036:	5dc7      	ldrb	r7, [r0, r7]
 800a038:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a03c:	462f      	mov	r7, r5
 800a03e:	42bb      	cmp	r3, r7
 800a040:	460d      	mov	r5, r1
 800a042:	d9f4      	bls.n	800a02e <_printf_i+0x11a>
 800a044:	2b08      	cmp	r3, #8
 800a046:	d10b      	bne.n	800a060 <_printf_i+0x14c>
 800a048:	6823      	ldr	r3, [r4, #0]
 800a04a:	07df      	lsls	r7, r3, #31
 800a04c:	d508      	bpl.n	800a060 <_printf_i+0x14c>
 800a04e:	6923      	ldr	r3, [r4, #16]
 800a050:	6861      	ldr	r1, [r4, #4]
 800a052:	4299      	cmp	r1, r3
 800a054:	bfde      	ittt	le
 800a056:	2330      	movle	r3, #48	; 0x30
 800a058:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a05c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a060:	1b92      	subs	r2, r2, r6
 800a062:	6122      	str	r2, [r4, #16]
 800a064:	f8cd a000 	str.w	sl, [sp]
 800a068:	464b      	mov	r3, r9
 800a06a:	aa03      	add	r2, sp, #12
 800a06c:	4621      	mov	r1, r4
 800a06e:	4640      	mov	r0, r8
 800a070:	f7ff fee2 	bl	8009e38 <_printf_common>
 800a074:	3001      	adds	r0, #1
 800a076:	d14c      	bne.n	800a112 <_printf_i+0x1fe>
 800a078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a07c:	b004      	add	sp, #16
 800a07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a082:	4835      	ldr	r0, [pc, #212]	; (800a158 <_printf_i+0x244>)
 800a084:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a088:	6823      	ldr	r3, [r4, #0]
 800a08a:	680e      	ldr	r6, [r1, #0]
 800a08c:	061f      	lsls	r7, r3, #24
 800a08e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a092:	600e      	str	r6, [r1, #0]
 800a094:	d514      	bpl.n	800a0c0 <_printf_i+0x1ac>
 800a096:	07d9      	lsls	r1, r3, #31
 800a098:	bf44      	itt	mi
 800a09a:	f043 0320 	orrmi.w	r3, r3, #32
 800a09e:	6023      	strmi	r3, [r4, #0]
 800a0a0:	b91d      	cbnz	r5, 800a0aa <_printf_i+0x196>
 800a0a2:	6823      	ldr	r3, [r4, #0]
 800a0a4:	f023 0320 	bic.w	r3, r3, #32
 800a0a8:	6023      	str	r3, [r4, #0]
 800a0aa:	2310      	movs	r3, #16
 800a0ac:	e7b0      	b.n	800a010 <_printf_i+0xfc>
 800a0ae:	6823      	ldr	r3, [r4, #0]
 800a0b0:	f043 0320 	orr.w	r3, r3, #32
 800a0b4:	6023      	str	r3, [r4, #0]
 800a0b6:	2378      	movs	r3, #120	; 0x78
 800a0b8:	4828      	ldr	r0, [pc, #160]	; (800a15c <_printf_i+0x248>)
 800a0ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0be:	e7e3      	b.n	800a088 <_printf_i+0x174>
 800a0c0:	065e      	lsls	r6, r3, #25
 800a0c2:	bf48      	it	mi
 800a0c4:	b2ad      	uxthmi	r5, r5
 800a0c6:	e7e6      	b.n	800a096 <_printf_i+0x182>
 800a0c8:	4616      	mov	r6, r2
 800a0ca:	e7bb      	b.n	800a044 <_printf_i+0x130>
 800a0cc:	680b      	ldr	r3, [r1, #0]
 800a0ce:	6826      	ldr	r6, [r4, #0]
 800a0d0:	6960      	ldr	r0, [r4, #20]
 800a0d2:	1d1d      	adds	r5, r3, #4
 800a0d4:	600d      	str	r5, [r1, #0]
 800a0d6:	0635      	lsls	r5, r6, #24
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	d501      	bpl.n	800a0e0 <_printf_i+0x1cc>
 800a0dc:	6018      	str	r0, [r3, #0]
 800a0de:	e002      	b.n	800a0e6 <_printf_i+0x1d2>
 800a0e0:	0671      	lsls	r1, r6, #25
 800a0e2:	d5fb      	bpl.n	800a0dc <_printf_i+0x1c8>
 800a0e4:	8018      	strh	r0, [r3, #0]
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	6123      	str	r3, [r4, #16]
 800a0ea:	4616      	mov	r6, r2
 800a0ec:	e7ba      	b.n	800a064 <_printf_i+0x150>
 800a0ee:	680b      	ldr	r3, [r1, #0]
 800a0f0:	1d1a      	adds	r2, r3, #4
 800a0f2:	600a      	str	r2, [r1, #0]
 800a0f4:	681e      	ldr	r6, [r3, #0]
 800a0f6:	6862      	ldr	r2, [r4, #4]
 800a0f8:	2100      	movs	r1, #0
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	f7f6 f870 	bl	80001e0 <memchr>
 800a100:	b108      	cbz	r0, 800a106 <_printf_i+0x1f2>
 800a102:	1b80      	subs	r0, r0, r6
 800a104:	6060      	str	r0, [r4, #4]
 800a106:	6863      	ldr	r3, [r4, #4]
 800a108:	6123      	str	r3, [r4, #16]
 800a10a:	2300      	movs	r3, #0
 800a10c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a110:	e7a8      	b.n	800a064 <_printf_i+0x150>
 800a112:	6923      	ldr	r3, [r4, #16]
 800a114:	4632      	mov	r2, r6
 800a116:	4649      	mov	r1, r9
 800a118:	4640      	mov	r0, r8
 800a11a:	47d0      	blx	sl
 800a11c:	3001      	adds	r0, #1
 800a11e:	d0ab      	beq.n	800a078 <_printf_i+0x164>
 800a120:	6823      	ldr	r3, [r4, #0]
 800a122:	079b      	lsls	r3, r3, #30
 800a124:	d413      	bmi.n	800a14e <_printf_i+0x23a>
 800a126:	68e0      	ldr	r0, [r4, #12]
 800a128:	9b03      	ldr	r3, [sp, #12]
 800a12a:	4298      	cmp	r0, r3
 800a12c:	bfb8      	it	lt
 800a12e:	4618      	movlt	r0, r3
 800a130:	e7a4      	b.n	800a07c <_printf_i+0x168>
 800a132:	2301      	movs	r3, #1
 800a134:	4632      	mov	r2, r6
 800a136:	4649      	mov	r1, r9
 800a138:	4640      	mov	r0, r8
 800a13a:	47d0      	blx	sl
 800a13c:	3001      	adds	r0, #1
 800a13e:	d09b      	beq.n	800a078 <_printf_i+0x164>
 800a140:	3501      	adds	r5, #1
 800a142:	68e3      	ldr	r3, [r4, #12]
 800a144:	9903      	ldr	r1, [sp, #12]
 800a146:	1a5b      	subs	r3, r3, r1
 800a148:	42ab      	cmp	r3, r5
 800a14a:	dcf2      	bgt.n	800a132 <_printf_i+0x21e>
 800a14c:	e7eb      	b.n	800a126 <_printf_i+0x212>
 800a14e:	2500      	movs	r5, #0
 800a150:	f104 0619 	add.w	r6, r4, #25
 800a154:	e7f5      	b.n	800a142 <_printf_i+0x22e>
 800a156:	bf00      	nop
 800a158:	0800af09 	.word	0x0800af09
 800a15c:	0800af1a 	.word	0x0800af1a

0800a160 <memmove>:
 800a160:	4288      	cmp	r0, r1
 800a162:	b510      	push	{r4, lr}
 800a164:	eb01 0402 	add.w	r4, r1, r2
 800a168:	d902      	bls.n	800a170 <memmove+0x10>
 800a16a:	4284      	cmp	r4, r0
 800a16c:	4623      	mov	r3, r4
 800a16e:	d807      	bhi.n	800a180 <memmove+0x20>
 800a170:	1e43      	subs	r3, r0, #1
 800a172:	42a1      	cmp	r1, r4
 800a174:	d008      	beq.n	800a188 <memmove+0x28>
 800a176:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a17a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a17e:	e7f8      	b.n	800a172 <memmove+0x12>
 800a180:	4402      	add	r2, r0
 800a182:	4601      	mov	r1, r0
 800a184:	428a      	cmp	r2, r1
 800a186:	d100      	bne.n	800a18a <memmove+0x2a>
 800a188:	bd10      	pop	{r4, pc}
 800a18a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a18e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a192:	e7f7      	b.n	800a184 <memmove+0x24>

0800a194 <_free_r>:
 800a194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a196:	2900      	cmp	r1, #0
 800a198:	d048      	beq.n	800a22c <_free_r+0x98>
 800a19a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a19e:	9001      	str	r0, [sp, #4]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f1a1 0404 	sub.w	r4, r1, #4
 800a1a6:	bfb8      	it	lt
 800a1a8:	18e4      	addlt	r4, r4, r3
 800a1aa:	f000 f8d3 	bl	800a354 <__malloc_lock>
 800a1ae:	4a20      	ldr	r2, [pc, #128]	; (800a230 <_free_r+0x9c>)
 800a1b0:	9801      	ldr	r0, [sp, #4]
 800a1b2:	6813      	ldr	r3, [r2, #0]
 800a1b4:	4615      	mov	r5, r2
 800a1b6:	b933      	cbnz	r3, 800a1c6 <_free_r+0x32>
 800a1b8:	6063      	str	r3, [r4, #4]
 800a1ba:	6014      	str	r4, [r2, #0]
 800a1bc:	b003      	add	sp, #12
 800a1be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1c2:	f000 b8cd 	b.w	800a360 <__malloc_unlock>
 800a1c6:	42a3      	cmp	r3, r4
 800a1c8:	d90b      	bls.n	800a1e2 <_free_r+0x4e>
 800a1ca:	6821      	ldr	r1, [r4, #0]
 800a1cc:	1862      	adds	r2, r4, r1
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	bf04      	itt	eq
 800a1d2:	681a      	ldreq	r2, [r3, #0]
 800a1d4:	685b      	ldreq	r3, [r3, #4]
 800a1d6:	6063      	str	r3, [r4, #4]
 800a1d8:	bf04      	itt	eq
 800a1da:	1852      	addeq	r2, r2, r1
 800a1dc:	6022      	streq	r2, [r4, #0]
 800a1de:	602c      	str	r4, [r5, #0]
 800a1e0:	e7ec      	b.n	800a1bc <_free_r+0x28>
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	b10b      	cbz	r3, 800a1ec <_free_r+0x58>
 800a1e8:	42a3      	cmp	r3, r4
 800a1ea:	d9fa      	bls.n	800a1e2 <_free_r+0x4e>
 800a1ec:	6811      	ldr	r1, [r2, #0]
 800a1ee:	1855      	adds	r5, r2, r1
 800a1f0:	42a5      	cmp	r5, r4
 800a1f2:	d10b      	bne.n	800a20c <_free_r+0x78>
 800a1f4:	6824      	ldr	r4, [r4, #0]
 800a1f6:	4421      	add	r1, r4
 800a1f8:	1854      	adds	r4, r2, r1
 800a1fa:	42a3      	cmp	r3, r4
 800a1fc:	6011      	str	r1, [r2, #0]
 800a1fe:	d1dd      	bne.n	800a1bc <_free_r+0x28>
 800a200:	681c      	ldr	r4, [r3, #0]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	6053      	str	r3, [r2, #4]
 800a206:	4421      	add	r1, r4
 800a208:	6011      	str	r1, [r2, #0]
 800a20a:	e7d7      	b.n	800a1bc <_free_r+0x28>
 800a20c:	d902      	bls.n	800a214 <_free_r+0x80>
 800a20e:	230c      	movs	r3, #12
 800a210:	6003      	str	r3, [r0, #0]
 800a212:	e7d3      	b.n	800a1bc <_free_r+0x28>
 800a214:	6825      	ldr	r5, [r4, #0]
 800a216:	1961      	adds	r1, r4, r5
 800a218:	428b      	cmp	r3, r1
 800a21a:	bf04      	itt	eq
 800a21c:	6819      	ldreq	r1, [r3, #0]
 800a21e:	685b      	ldreq	r3, [r3, #4]
 800a220:	6063      	str	r3, [r4, #4]
 800a222:	bf04      	itt	eq
 800a224:	1949      	addeq	r1, r1, r5
 800a226:	6021      	streq	r1, [r4, #0]
 800a228:	6054      	str	r4, [r2, #4]
 800a22a:	e7c7      	b.n	800a1bc <_free_r+0x28>
 800a22c:	b003      	add	sp, #12
 800a22e:	bd30      	pop	{r4, r5, pc}
 800a230:	200049cc 	.word	0x200049cc

0800a234 <_malloc_r>:
 800a234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a236:	1ccd      	adds	r5, r1, #3
 800a238:	f025 0503 	bic.w	r5, r5, #3
 800a23c:	3508      	adds	r5, #8
 800a23e:	2d0c      	cmp	r5, #12
 800a240:	bf38      	it	cc
 800a242:	250c      	movcc	r5, #12
 800a244:	2d00      	cmp	r5, #0
 800a246:	4606      	mov	r6, r0
 800a248:	db01      	blt.n	800a24e <_malloc_r+0x1a>
 800a24a:	42a9      	cmp	r1, r5
 800a24c:	d903      	bls.n	800a256 <_malloc_r+0x22>
 800a24e:	230c      	movs	r3, #12
 800a250:	6033      	str	r3, [r6, #0]
 800a252:	2000      	movs	r0, #0
 800a254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a256:	f000 f87d 	bl	800a354 <__malloc_lock>
 800a25a:	4921      	ldr	r1, [pc, #132]	; (800a2e0 <_malloc_r+0xac>)
 800a25c:	680a      	ldr	r2, [r1, #0]
 800a25e:	4614      	mov	r4, r2
 800a260:	b99c      	cbnz	r4, 800a28a <_malloc_r+0x56>
 800a262:	4f20      	ldr	r7, [pc, #128]	; (800a2e4 <_malloc_r+0xb0>)
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	b923      	cbnz	r3, 800a272 <_malloc_r+0x3e>
 800a268:	4621      	mov	r1, r4
 800a26a:	4630      	mov	r0, r6
 800a26c:	f000 f862 	bl	800a334 <_sbrk_r>
 800a270:	6038      	str	r0, [r7, #0]
 800a272:	4629      	mov	r1, r5
 800a274:	4630      	mov	r0, r6
 800a276:	f000 f85d 	bl	800a334 <_sbrk_r>
 800a27a:	1c43      	adds	r3, r0, #1
 800a27c:	d123      	bne.n	800a2c6 <_malloc_r+0x92>
 800a27e:	230c      	movs	r3, #12
 800a280:	6033      	str	r3, [r6, #0]
 800a282:	4630      	mov	r0, r6
 800a284:	f000 f86c 	bl	800a360 <__malloc_unlock>
 800a288:	e7e3      	b.n	800a252 <_malloc_r+0x1e>
 800a28a:	6823      	ldr	r3, [r4, #0]
 800a28c:	1b5b      	subs	r3, r3, r5
 800a28e:	d417      	bmi.n	800a2c0 <_malloc_r+0x8c>
 800a290:	2b0b      	cmp	r3, #11
 800a292:	d903      	bls.n	800a29c <_malloc_r+0x68>
 800a294:	6023      	str	r3, [r4, #0]
 800a296:	441c      	add	r4, r3
 800a298:	6025      	str	r5, [r4, #0]
 800a29a:	e004      	b.n	800a2a6 <_malloc_r+0x72>
 800a29c:	6863      	ldr	r3, [r4, #4]
 800a29e:	42a2      	cmp	r2, r4
 800a2a0:	bf0c      	ite	eq
 800a2a2:	600b      	streq	r3, [r1, #0]
 800a2a4:	6053      	strne	r3, [r2, #4]
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	f000 f85a 	bl	800a360 <__malloc_unlock>
 800a2ac:	f104 000b 	add.w	r0, r4, #11
 800a2b0:	1d23      	adds	r3, r4, #4
 800a2b2:	f020 0007 	bic.w	r0, r0, #7
 800a2b6:	1ac2      	subs	r2, r0, r3
 800a2b8:	d0cc      	beq.n	800a254 <_malloc_r+0x20>
 800a2ba:	1a1b      	subs	r3, r3, r0
 800a2bc:	50a3      	str	r3, [r4, r2]
 800a2be:	e7c9      	b.n	800a254 <_malloc_r+0x20>
 800a2c0:	4622      	mov	r2, r4
 800a2c2:	6864      	ldr	r4, [r4, #4]
 800a2c4:	e7cc      	b.n	800a260 <_malloc_r+0x2c>
 800a2c6:	1cc4      	adds	r4, r0, #3
 800a2c8:	f024 0403 	bic.w	r4, r4, #3
 800a2cc:	42a0      	cmp	r0, r4
 800a2ce:	d0e3      	beq.n	800a298 <_malloc_r+0x64>
 800a2d0:	1a21      	subs	r1, r4, r0
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	f000 f82e 	bl	800a334 <_sbrk_r>
 800a2d8:	3001      	adds	r0, #1
 800a2da:	d1dd      	bne.n	800a298 <_malloc_r+0x64>
 800a2dc:	e7cf      	b.n	800a27e <_malloc_r+0x4a>
 800a2de:	bf00      	nop
 800a2e0:	200049cc 	.word	0x200049cc
 800a2e4:	200049d0 	.word	0x200049d0

0800a2e8 <_realloc_r>:
 800a2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ea:	4607      	mov	r7, r0
 800a2ec:	4614      	mov	r4, r2
 800a2ee:	460e      	mov	r6, r1
 800a2f0:	b921      	cbnz	r1, 800a2fc <_realloc_r+0x14>
 800a2f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a2f6:	4611      	mov	r1, r2
 800a2f8:	f7ff bf9c 	b.w	800a234 <_malloc_r>
 800a2fc:	b922      	cbnz	r2, 800a308 <_realloc_r+0x20>
 800a2fe:	f7ff ff49 	bl	800a194 <_free_r>
 800a302:	4625      	mov	r5, r4
 800a304:	4628      	mov	r0, r5
 800a306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a308:	f000 f830 	bl	800a36c <_malloc_usable_size_r>
 800a30c:	42a0      	cmp	r0, r4
 800a30e:	d20f      	bcs.n	800a330 <_realloc_r+0x48>
 800a310:	4621      	mov	r1, r4
 800a312:	4638      	mov	r0, r7
 800a314:	f7ff ff8e 	bl	800a234 <_malloc_r>
 800a318:	4605      	mov	r5, r0
 800a31a:	2800      	cmp	r0, #0
 800a31c:	d0f2      	beq.n	800a304 <_realloc_r+0x1c>
 800a31e:	4631      	mov	r1, r6
 800a320:	4622      	mov	r2, r4
 800a322:	f7ff fbf7 	bl	8009b14 <memcpy>
 800a326:	4631      	mov	r1, r6
 800a328:	4638      	mov	r0, r7
 800a32a:	f7ff ff33 	bl	800a194 <_free_r>
 800a32e:	e7e9      	b.n	800a304 <_realloc_r+0x1c>
 800a330:	4635      	mov	r5, r6
 800a332:	e7e7      	b.n	800a304 <_realloc_r+0x1c>

0800a334 <_sbrk_r>:
 800a334:	b538      	push	{r3, r4, r5, lr}
 800a336:	4d06      	ldr	r5, [pc, #24]	; (800a350 <_sbrk_r+0x1c>)
 800a338:	2300      	movs	r3, #0
 800a33a:	4604      	mov	r4, r0
 800a33c:	4608      	mov	r0, r1
 800a33e:	602b      	str	r3, [r5, #0]
 800a340:	f7f8 fbfe 	bl	8002b40 <_sbrk>
 800a344:	1c43      	adds	r3, r0, #1
 800a346:	d102      	bne.n	800a34e <_sbrk_r+0x1a>
 800a348:	682b      	ldr	r3, [r5, #0]
 800a34a:	b103      	cbz	r3, 800a34e <_sbrk_r+0x1a>
 800a34c:	6023      	str	r3, [r4, #0]
 800a34e:	bd38      	pop	{r3, r4, r5, pc}
 800a350:	20005098 	.word	0x20005098

0800a354 <__malloc_lock>:
 800a354:	4801      	ldr	r0, [pc, #4]	; (800a35c <__malloc_lock+0x8>)
 800a356:	f000 b811 	b.w	800a37c <__retarget_lock_acquire_recursive>
 800a35a:	bf00      	nop
 800a35c:	200050a0 	.word	0x200050a0

0800a360 <__malloc_unlock>:
 800a360:	4801      	ldr	r0, [pc, #4]	; (800a368 <__malloc_unlock+0x8>)
 800a362:	f000 b80c 	b.w	800a37e <__retarget_lock_release_recursive>
 800a366:	bf00      	nop
 800a368:	200050a0 	.word	0x200050a0

0800a36c <_malloc_usable_size_r>:
 800a36c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a370:	1f18      	subs	r0, r3, #4
 800a372:	2b00      	cmp	r3, #0
 800a374:	bfbc      	itt	lt
 800a376:	580b      	ldrlt	r3, [r1, r0]
 800a378:	18c0      	addlt	r0, r0, r3
 800a37a:	4770      	bx	lr

0800a37c <__retarget_lock_acquire_recursive>:
 800a37c:	4770      	bx	lr

0800a37e <__retarget_lock_release_recursive>:
 800a37e:	4770      	bx	lr

0800a380 <_init>:
 800a380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a382:	bf00      	nop
 800a384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a386:	bc08      	pop	{r3}
 800a388:	469e      	mov	lr, r3
 800a38a:	4770      	bx	lr

0800a38c <_fini>:
 800a38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a38e:	bf00      	nop
 800a390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a392:	bc08      	pop	{r3}
 800a394:	469e      	mov	lr, r3
 800a396:	4770      	bx	lr
