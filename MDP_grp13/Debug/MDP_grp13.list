
MDP_grp13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007818  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b50  080079a8  080079a8  000179a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084f8  080084f8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080084f8  080084f8  000184f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008500  08008500  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008500  08008500  00018500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008504  08008504  00018504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004f34  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004fa8  20004fa8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000188a9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003250  00000000  00000000  0003894d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001310  00000000  00000000  0003bba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011c8  00000000  00000000  0003ceb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000035ef  00000000  00000000  0003e078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013a88  00000000  00000000  00041667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2b7b  00000000  00000000  000550ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00127c6a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005494  00000000  00000000  00127cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007990 	.word	0x08007990

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007990 	.word	0x08007990

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b96e 	b.w	8000d40 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	4604      	mov	r4, r0
 8000a84:	468c      	mov	ip, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f040 8083 	bne.w	8000b92 <__udivmoddi4+0x116>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4617      	mov	r7, r2
 8000a90:	d947      	bls.n	8000b22 <__udivmoddi4+0xa6>
 8000a92:	fab2 f282 	clz	r2, r2
 8000a96:	b142      	cbz	r2, 8000aaa <__udivmoddi4+0x2e>
 8000a98:	f1c2 0020 	rsb	r0, r2, #32
 8000a9c:	fa24 f000 	lsr.w	r0, r4, r0
 8000aa0:	4091      	lsls	r1, r2
 8000aa2:	4097      	lsls	r7, r2
 8000aa4:	ea40 0c01 	orr.w	ip, r0, r1
 8000aa8:	4094      	lsls	r4, r2
 8000aaa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000aae:	0c23      	lsrs	r3, r4, #16
 8000ab0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ab4:	fa1f fe87 	uxth.w	lr, r7
 8000ab8:	fb08 c116 	mls	r1, r8, r6, ip
 8000abc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ac0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ac4:	4299      	cmp	r1, r3
 8000ac6:	d909      	bls.n	8000adc <__udivmoddi4+0x60>
 8000ac8:	18fb      	adds	r3, r7, r3
 8000aca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ace:	f080 8119 	bcs.w	8000d04 <__udivmoddi4+0x288>
 8000ad2:	4299      	cmp	r1, r3
 8000ad4:	f240 8116 	bls.w	8000d04 <__udivmoddi4+0x288>
 8000ad8:	3e02      	subs	r6, #2
 8000ada:	443b      	add	r3, r7
 8000adc:	1a5b      	subs	r3, r3, r1
 8000ade:	b2a4      	uxth	r4, r4
 8000ae0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ae8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000af0:	45a6      	cmp	lr, r4
 8000af2:	d909      	bls.n	8000b08 <__udivmoddi4+0x8c>
 8000af4:	193c      	adds	r4, r7, r4
 8000af6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000afa:	f080 8105 	bcs.w	8000d08 <__udivmoddi4+0x28c>
 8000afe:	45a6      	cmp	lr, r4
 8000b00:	f240 8102 	bls.w	8000d08 <__udivmoddi4+0x28c>
 8000b04:	3802      	subs	r0, #2
 8000b06:	443c      	add	r4, r7
 8000b08:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b0c:	eba4 040e 	sub.w	r4, r4, lr
 8000b10:	2600      	movs	r6, #0
 8000b12:	b11d      	cbz	r5, 8000b1c <__udivmoddi4+0xa0>
 8000b14:	40d4      	lsrs	r4, r2
 8000b16:	2300      	movs	r3, #0
 8000b18:	e9c5 4300 	strd	r4, r3, [r5]
 8000b1c:	4631      	mov	r1, r6
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	b902      	cbnz	r2, 8000b26 <__udivmoddi4+0xaa>
 8000b24:	deff      	udf	#255	; 0xff
 8000b26:	fab2 f282 	clz	r2, r2
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	d150      	bne.n	8000bd0 <__udivmoddi4+0x154>
 8000b2e:	1bcb      	subs	r3, r1, r7
 8000b30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b34:	fa1f f887 	uxth.w	r8, r7
 8000b38:	2601      	movs	r6, #1
 8000b3a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b3e:	0c21      	lsrs	r1, r4, #16
 8000b40:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b48:	fb08 f30c 	mul.w	r3, r8, ip
 8000b4c:	428b      	cmp	r3, r1
 8000b4e:	d907      	bls.n	8000b60 <__udivmoddi4+0xe4>
 8000b50:	1879      	adds	r1, r7, r1
 8000b52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0xe2>
 8000b58:	428b      	cmp	r3, r1
 8000b5a:	f200 80e9 	bhi.w	8000d30 <__udivmoddi4+0x2b4>
 8000b5e:	4684      	mov	ip, r0
 8000b60:	1ac9      	subs	r1, r1, r3
 8000b62:	b2a3      	uxth	r3, r4
 8000b64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b68:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b6c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b70:	fb08 f800 	mul.w	r8, r8, r0
 8000b74:	45a0      	cmp	r8, r4
 8000b76:	d907      	bls.n	8000b88 <__udivmoddi4+0x10c>
 8000b78:	193c      	adds	r4, r7, r4
 8000b7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b7e:	d202      	bcs.n	8000b86 <__udivmoddi4+0x10a>
 8000b80:	45a0      	cmp	r8, r4
 8000b82:	f200 80d9 	bhi.w	8000d38 <__udivmoddi4+0x2bc>
 8000b86:	4618      	mov	r0, r3
 8000b88:	eba4 0408 	sub.w	r4, r4, r8
 8000b8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b90:	e7bf      	b.n	8000b12 <__udivmoddi4+0x96>
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d909      	bls.n	8000baa <__udivmoddi4+0x12e>
 8000b96:	2d00      	cmp	r5, #0
 8000b98:	f000 80b1 	beq.w	8000cfe <__udivmoddi4+0x282>
 8000b9c:	2600      	movs	r6, #0
 8000b9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	4631      	mov	r1, r6
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	fab3 f683 	clz	r6, r3
 8000bae:	2e00      	cmp	r6, #0
 8000bb0:	d14a      	bne.n	8000c48 <__udivmoddi4+0x1cc>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d302      	bcc.n	8000bbc <__udivmoddi4+0x140>
 8000bb6:	4282      	cmp	r2, r0
 8000bb8:	f200 80b8 	bhi.w	8000d2c <__udivmoddi4+0x2b0>
 8000bbc:	1a84      	subs	r4, r0, r2
 8000bbe:	eb61 0103 	sbc.w	r1, r1, r3
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	468c      	mov	ip, r1
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	d0a8      	beq.n	8000b1c <__udivmoddi4+0xa0>
 8000bca:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bce:	e7a5      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000bd0:	f1c2 0320 	rsb	r3, r2, #32
 8000bd4:	fa20 f603 	lsr.w	r6, r0, r3
 8000bd8:	4097      	lsls	r7, r2
 8000bda:	fa01 f002 	lsl.w	r0, r1, r2
 8000bde:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000be2:	40d9      	lsrs	r1, r3
 8000be4:	4330      	orrs	r0, r6
 8000be6:	0c03      	lsrs	r3, r0, #16
 8000be8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bec:	fa1f f887 	uxth.w	r8, r7
 8000bf0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf8:	fb06 f108 	mul.w	r1, r6, r8
 8000bfc:	4299      	cmp	r1, r3
 8000bfe:	fa04 f402 	lsl.w	r4, r4, r2
 8000c02:	d909      	bls.n	8000c18 <__udivmoddi4+0x19c>
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c0a:	f080 808d 	bcs.w	8000d28 <__udivmoddi4+0x2ac>
 8000c0e:	4299      	cmp	r1, r3
 8000c10:	f240 808a 	bls.w	8000d28 <__udivmoddi4+0x2ac>
 8000c14:	3e02      	subs	r6, #2
 8000c16:	443b      	add	r3, r7
 8000c18:	1a5b      	subs	r3, r3, r1
 8000c1a:	b281      	uxth	r1, r0
 8000c1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c28:	fb00 f308 	mul.w	r3, r0, r8
 8000c2c:	428b      	cmp	r3, r1
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x1c4>
 8000c30:	1879      	adds	r1, r7, r1
 8000c32:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c36:	d273      	bcs.n	8000d20 <__udivmoddi4+0x2a4>
 8000c38:	428b      	cmp	r3, r1
 8000c3a:	d971      	bls.n	8000d20 <__udivmoddi4+0x2a4>
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	4439      	add	r1, r7
 8000c40:	1acb      	subs	r3, r1, r3
 8000c42:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c46:	e778      	b.n	8000b3a <__udivmoddi4+0xbe>
 8000c48:	f1c6 0c20 	rsb	ip, r6, #32
 8000c4c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c50:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c54:	431c      	orrs	r4, r3
 8000c56:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c5e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c62:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c66:	431f      	orrs	r7, r3
 8000c68:	0c3b      	lsrs	r3, r7, #16
 8000c6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c6e:	fa1f f884 	uxth.w	r8, r4
 8000c72:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c76:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c7a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c7e:	458a      	cmp	sl, r1
 8000c80:	fa02 f206 	lsl.w	r2, r2, r6
 8000c84:	fa00 f306 	lsl.w	r3, r0, r6
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x220>
 8000c8a:	1861      	adds	r1, r4, r1
 8000c8c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c90:	d248      	bcs.n	8000d24 <__udivmoddi4+0x2a8>
 8000c92:	458a      	cmp	sl, r1
 8000c94:	d946      	bls.n	8000d24 <__udivmoddi4+0x2a8>
 8000c96:	f1a9 0902 	sub.w	r9, r9, #2
 8000c9a:	4421      	add	r1, r4
 8000c9c:	eba1 010a 	sub.w	r1, r1, sl
 8000ca0:	b2bf      	uxth	r7, r7
 8000ca2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000caa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cae:	fb00 f808 	mul.w	r8, r0, r8
 8000cb2:	45b8      	cmp	r8, r7
 8000cb4:	d907      	bls.n	8000cc6 <__udivmoddi4+0x24a>
 8000cb6:	19e7      	adds	r7, r4, r7
 8000cb8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbc:	d22e      	bcs.n	8000d1c <__udivmoddi4+0x2a0>
 8000cbe:	45b8      	cmp	r8, r7
 8000cc0:	d92c      	bls.n	8000d1c <__udivmoddi4+0x2a0>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	4427      	add	r7, r4
 8000cc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cca:	eba7 0708 	sub.w	r7, r7, r8
 8000cce:	fba0 8902 	umull	r8, r9, r0, r2
 8000cd2:	454f      	cmp	r7, r9
 8000cd4:	46c6      	mov	lr, r8
 8000cd6:	4649      	mov	r1, r9
 8000cd8:	d31a      	bcc.n	8000d10 <__udivmoddi4+0x294>
 8000cda:	d017      	beq.n	8000d0c <__udivmoddi4+0x290>
 8000cdc:	b15d      	cbz	r5, 8000cf6 <__udivmoddi4+0x27a>
 8000cde:	ebb3 020e 	subs.w	r2, r3, lr
 8000ce2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ce6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cea:	40f2      	lsrs	r2, r6
 8000cec:	ea4c 0202 	orr.w	r2, ip, r2
 8000cf0:	40f7      	lsrs	r7, r6
 8000cf2:	e9c5 2700 	strd	r2, r7, [r5]
 8000cf6:	2600      	movs	r6, #0
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	462e      	mov	r6, r5
 8000d00:	4628      	mov	r0, r5
 8000d02:	e70b      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000d04:	4606      	mov	r6, r0
 8000d06:	e6e9      	b.n	8000adc <__udivmoddi4+0x60>
 8000d08:	4618      	mov	r0, r3
 8000d0a:	e6fd      	b.n	8000b08 <__udivmoddi4+0x8c>
 8000d0c:	4543      	cmp	r3, r8
 8000d0e:	d2e5      	bcs.n	8000cdc <__udivmoddi4+0x260>
 8000d10:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d14:	eb69 0104 	sbc.w	r1, r9, r4
 8000d18:	3801      	subs	r0, #1
 8000d1a:	e7df      	b.n	8000cdc <__udivmoddi4+0x260>
 8000d1c:	4608      	mov	r0, r1
 8000d1e:	e7d2      	b.n	8000cc6 <__udivmoddi4+0x24a>
 8000d20:	4660      	mov	r0, ip
 8000d22:	e78d      	b.n	8000c40 <__udivmoddi4+0x1c4>
 8000d24:	4681      	mov	r9, r0
 8000d26:	e7b9      	b.n	8000c9c <__udivmoddi4+0x220>
 8000d28:	4666      	mov	r6, ip
 8000d2a:	e775      	b.n	8000c18 <__udivmoddi4+0x19c>
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	e74a      	b.n	8000bc6 <__udivmoddi4+0x14a>
 8000d30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d34:	4439      	add	r1, r7
 8000d36:	e713      	b.n	8000b60 <__udivmoddi4+0xe4>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	443c      	add	r4, r7
 8000d3c:	e724      	b.n	8000b88 <__udivmoddi4+0x10c>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <delay>:
uint32_t Difference = 0;
int Is_First_Captured = 0;  // boolean function
uint16_t Distance = 0;
uint16_t uDist = 0;

void delay(uint16_t time){  //provide us delay
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <delay+0x30>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2200      	movs	r2, #0
 8000d54:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim4) < time);
 8000d56:	bf00      	nop
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <delay+0x30>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d3f9      	bcc.n	8000d58 <delay+0x14>
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20004a0c 	.word	0x20004a0c

08000d78 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)		//For HCSR04_Read();
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	7f1b      	ldrb	r3, [r3, #28]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	f040 8083 	bne.w	8000e90 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000d8a:	4b45      	ldr	r3, [pc, #276]	; (8000ea0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d11a      	bne.n	8000dc8 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000d92:	2100      	movs	r1, #0
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f002 fc5b 	bl	8003650 <HAL_TIM_ReadCapturedValue>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4a41      	ldr	r2, [pc, #260]	; (8000ea4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d9e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000da0:	4b3f      	ldr	r3, [pc, #252]	; (8000ea0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	601a      	str	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	6a1a      	ldr	r2, [r3, #32]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f022 020a 	bic.w	r2, r2, #10
 8000db4:	621a      	str	r2, [r3, #32]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	6a1a      	ldr	r2, [r3, #32]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f042 0202 	orr.w	r2, r2, #2
 8000dc4:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 8000dc6:	e063      	b.n	8000e90 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000dc8:	4b35      	ldr	r3, [pc, #212]	; (8000ea0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d15f      	bne.n	8000e90 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f002 fc3c 	bl	8003650 <HAL_TIM_ReadCapturedValue>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	4a33      	ldr	r2, [pc, #204]	; (8000ea8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ddc:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 8000de6:	4b30      	ldr	r3, [pc, #192]	; (8000ea8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	4b2e      	ldr	r3, [pc, #184]	; (8000ea4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d907      	bls.n	8000e02 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000df2:	4b2d      	ldr	r3, [pc, #180]	; (8000ea8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	4b2b      	ldr	r3, [pc, #172]	; (8000ea4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	4a2b      	ldr	r2, [pc, #172]	; (8000eac <HAL_TIM_IC_CaptureCallback+0x134>)
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	e00f      	b.n	8000e22 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2) {
 8000e02:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4b28      	ldr	r3, [pc, #160]	; (8000ea8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d909      	bls.n	8000e22 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000e0e:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000e1c:	33ff      	adds	r3, #255	; 0xff
 8000e1e:	4a23      	ldr	r2, [pc, #140]	; (8000eac <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e20:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000e22:	4b22      	ldr	r3, [pc, #136]	; (8000eac <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fb64 	bl	80004f4 <__aeabi_ui2d>
 8000e2c:	a31a      	add	r3, pc, #104	; (adr r3, 8000e98 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e32:	f7ff fbd9 	bl	80005e8 <__aeabi_dmul>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e46:	f7ff fcf9 	bl	800083c <__aeabi_ddiv>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	4610      	mov	r0, r2
 8000e50:	4619      	mov	r1, r3
 8000e52:	f7ff fddb 	bl	8000a0c <__aeabi_d2uiz>
 8000e56:	4603      	mov	r3, r0
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000e5c:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6a1a      	ldr	r2, [r3, #32]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f022 020a 	bic.w	r2, r2, #10
 8000e72:	621a      	str	r2, [r3, #32]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	6a12      	ldr	r2, [r2, #32]
 8000e7e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	68da      	ldr	r2, [r3, #12]
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 0202 	bic.w	r2, r2, #2
 8000e8e:	60da      	str	r2, [r3, #12]
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	b020c49c 	.word	0xb020c49c
 8000e9c:	3fa16872 	.word	0x3fa16872
 8000ea0:	2000009c 	.word	0x2000009c
 8000ea4:	20000090 	.word	0x20000090
 8000ea8:	20000094 	.word	0x20000094
 8000eac:	20000098 	.word	0x20000098
 8000eb0:	200000a0 	.word	0x200000a0
 8000eb4:	20004a0c 	.word	0x20004a0c

08000eb8 <HCSR04_Read>:

uint16_t HCSR04_Read (void)		//Read Ultrasonic Distance
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec2:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <HCSR04_Read+0x3c>)
 8000ec4:	f001 f96a 	bl	800219c <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000ec8:	200a      	movs	r0, #10
 8000eca:	f7ff ff3b 	bl	8000d44 <delay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed4:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <HCSR04_Read+0x3c>)
 8000ed6:	f001 f961 	bl	800219c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <HCSR04_Read+0x40>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	68da      	ldr	r2, [r3, #12]
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <HCSR04_Read+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f042 0202 	orr.w	r2, r2, #2
 8000ee8:	60da      	str	r2, [r3, #12]
	return Distance;
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <HCSR04_Read+0x44>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40020c00 	.word	0x40020c00
 8000ef8:	20004a0c 	.word	0x20004a0c
 8000efc:	200000a0 	.word	0x200000a0

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f04:	f000 fe06 	bl	8001b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f08:	f000 f836 	bl	8000f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0c:	f000 faba 	bl	8001484 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000f10:	f000 fa2c 	bl	800136c <MX_TIM8_Init>
  MX_TIM2_Init();
 8000f14:	f000 f92e 	bl	8001174 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f18:	f000 f88c 	bl	8001034 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f1c:	f000 f97e 	bl	800121c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f20:	f000 f9d0 	bl	80012c4 <MX_TIM4_Init>
  OLED_Init();
 8000f24:	f006 f848 	bl	8006fb8 <OLED_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000f28:	2100      	movs	r1, #0
 8000f2a:	480c      	ldr	r0, [pc, #48]	; (8000f5c <main+0x5c>)
 8000f2c:	f001 fe94 	bl	8002c58 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f30:	f003 f94a 	bl	80041c8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LED_Toggle */
  LED_ToggleHandle = osThreadNew(StartDefaultTask, NULL, &LED_Toggle_attributes);
 8000f34:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <main+0x60>)
 8000f36:	2100      	movs	r1, #0
 8000f38:	480a      	ldr	r0, [pc, #40]	; (8000f64 <main+0x64>)
 8000f3a:	f003 f98f 	bl	800425c <osThreadNew>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4a09      	ldr	r2, [pc, #36]	; (8000f68 <main+0x68>)
 8000f42:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 8000f44:	4a09      	ldr	r2, [pc, #36]	; (8000f6c <main+0x6c>)
 8000f46:	2100      	movs	r1, #0
 8000f48:	4809      	ldr	r0, [pc, #36]	; (8000f70 <main+0x70>)
 8000f4a:	f003 f987 	bl	800425c <osThreadNew>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <main+0x74>)
 8000f52:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f54:	f003 f95c 	bl	8004210 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <main+0x58>
 8000f5a:	bf00      	nop
 8000f5c:	20004a0c 	.word	0x20004a0c
 8000f60:	08007a08 	.word	0x08007a08
 8000f64:	080015b9 	.word	0x080015b9
 8000f68:	20004a58 	.word	0x20004a58
 8000f6c:	08007a2c 	.word	0x08007a2c
 8000f70:	08001635 	.word	0x08001635
 8000f74:	20004a5c 	.word	0x20004a5c

08000f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b094      	sub	sp, #80	; 0x50
 8000f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7e:	f107 0320 	add.w	r3, r7, #32
 8000f82:	2230      	movs	r2, #48	; 0x30
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f006 f8da 	bl	8007140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	4b22      	ldr	r3, [pc, #136]	; (800102c <SystemClock_Config+0xb4>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	4a21      	ldr	r2, [pc, #132]	; (800102c <SystemClock_Config+0xb4>)
 8000fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000faa:	6413      	str	r3, [r2, #64]	; 0x40
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <SystemClock_Config+0xb4>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb8:	2300      	movs	r3, #0
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <SystemClock_Config+0xb8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a1b      	ldr	r2, [pc, #108]	; (8001030 <SystemClock_Config+0xb8>)
 8000fc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <SystemClock_Config+0xb8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fdc:	2310      	movs	r3, #16
 8000fde:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe4:	f107 0320 	add.w	r3, r7, #32
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f001 f933 	bl	8002254 <HAL_RCC_OscConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000ff4:	f000 fb2e 	bl	8001654 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f001 fb96 	bl	8002744 <HAL_RCC_ClockConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800101e:	f000 fb19 	bl	8001654 <Error_Handler>
  }
}
 8001022:	bf00      	nop
 8001024:	3750      	adds	r7, #80	; 0x50
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800
 8001030:	40007000 	.word	0x40007000

08001034 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b096      	sub	sp, #88	; 0x58
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001048:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2220      	movs	r2, #32
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f006 f867 	bl	8007140 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001072:	4b3e      	ldr	r3, [pc, #248]	; (800116c <MX_TIM1_Init+0x138>)
 8001074:	4a3e      	ldr	r2, [pc, #248]	; (8001170 <MX_TIM1_Init+0x13c>)
 8001076:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320;
 8001078:	4b3c      	ldr	r3, [pc, #240]	; (800116c <MX_TIM1_Init+0x138>)
 800107a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800107e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001080:	4b3a      	ldr	r3, [pc, #232]	; (800116c <MX_TIM1_Init+0x138>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001086:	4b39      	ldr	r3, [pc, #228]	; (800116c <MX_TIM1_Init+0x138>)
 8001088:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800108c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108e:	4b37      	ldr	r3, [pc, #220]	; (800116c <MX_TIM1_Init+0x138>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001094:	4b35      	ldr	r3, [pc, #212]	; (800116c <MX_TIM1_Init+0x138>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800109a:	4b34      	ldr	r3, [pc, #208]	; (800116c <MX_TIM1_Init+0x138>)
 800109c:	2280      	movs	r2, #128	; 0x80
 800109e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010a0:	4832      	ldr	r0, [pc, #200]	; (800116c <MX_TIM1_Init+0x138>)
 80010a2:	f001 fceb 	bl	8002a7c <HAL_TIM_Base_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80010ac:	f000 fad2 	bl	8001654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010ba:	4619      	mov	r1, r3
 80010bc:	482b      	ldr	r0, [pc, #172]	; (800116c <MX_TIM1_Init+0x138>)
 80010be:	f002 f9ff 	bl	80034c0 <HAL_TIM_ConfigClockSource>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80010c8:	f000 fac4 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010cc:	4827      	ldr	r0, [pc, #156]	; (800116c <MX_TIM1_Init+0x138>)
 80010ce:	f001 fd24 	bl	8002b1a <HAL_TIM_PWM_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80010d8:	f000 fabc 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010dc:	2300      	movs	r3, #0
 80010de:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010e8:	4619      	mov	r1, r3
 80010ea:	4820      	ldr	r0, [pc, #128]	; (800116c <MX_TIM1_Init+0x138>)
 80010ec:	f002 ff56 	bl	8003f9c <HAL_TIMEx_MasterConfigSynchronization>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80010f6:	f000 faad 	bl	8001654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010fa:	2360      	movs	r3, #96	; 0x60
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001102:	2300      	movs	r3, #0
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001116:	220c      	movs	r2, #12
 8001118:	4619      	mov	r1, r3
 800111a:	4814      	ldr	r0, [pc, #80]	; (800116c <MX_TIM1_Init+0x138>)
 800111c:	f002 f90e 	bl	800333c <HAL_TIM_PWM_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001126:	f000 fa95 	bl	8001654 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800113e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001142:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	4619      	mov	r1, r3
 800114c:	4807      	ldr	r0, [pc, #28]	; (800116c <MX_TIM1_Init+0x138>)
 800114e:	f002 ffa1 	bl	8004094 <HAL_TIMEx_ConfigBreakDeadTime>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001158:	f000 fa7c 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <MX_TIM1_Init+0x138>)
 800115e:	f000 fbff 	bl	8001960 <HAL_TIM_MspPostInit>

}
 8001162:	bf00      	nop
 8001164:	3758      	adds	r7, #88	; 0x58
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20004ac0 	.word	0x20004ac0
 8001170:	40010000 	.word	0x40010000

08001174 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08c      	sub	sp, #48	; 0x30
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	2224      	movs	r2, #36	; 0x24
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f005 ffdc 	bl	8007140 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001190:	4b21      	ldr	r3, [pc, #132]	; (8001218 <MX_TIM2_Init+0xa4>)
 8001192:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001196:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <MX_TIM2_Init+0xa4>)
 800119a:	2200      	movs	r2, #0
 800119c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <MX_TIM2_Init+0xa4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <MX_TIM2_Init+0xa4>)
 80011a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_TIM2_Init+0xa4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <MX_TIM2_Init+0xa4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011b8:	2303      	movs	r3, #3
 80011ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011c0:	2301      	movs	r3, #1
 80011c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80011c8:	230a      	movs	r3, #10
 80011ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011cc:	2300      	movs	r3, #0
 80011ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011d0:	2301      	movs	r3, #1
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80011d8:	230a      	movs	r3, #10
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	4619      	mov	r1, r3
 80011e2:	480d      	ldr	r0, [pc, #52]	; (8001218 <MX_TIM2_Init+0xa4>)
 80011e4:	f001 fe60 	bl	8002ea8 <HAL_TIM_Encoder_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80011ee:	f000 fa31 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	4619      	mov	r1, r3
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <MX_TIM2_Init+0xa4>)
 8001200:	f002 fecc 	bl	8003f9c <HAL_TIMEx_MasterConfigSynchronization>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800120a:	f000 fa23 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	3730      	adds	r7, #48	; 0x30
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20004b0c 	.word	0x20004b0c

0800121c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	; 0x30
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	2224      	movs	r2, #36	; 0x24
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f005 ff88 	bl	8007140 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001238:	4b20      	ldr	r3, [pc, #128]	; (80012bc <MX_TIM3_Init+0xa0>)
 800123a:	4a21      	ldr	r2, [pc, #132]	; (80012c0 <MX_TIM3_Init+0xa4>)
 800123c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <MX_TIM3_Init+0xa0>)
 8001240:	2200      	movs	r2, #0
 8001242:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001244:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <MX_TIM3_Init+0xa0>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <MX_TIM3_Init+0xa0>)
 800124c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001250:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001252:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <MX_TIM3_Init+0xa0>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <MX_TIM3_Init+0xa0>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800125e:	2303      	movs	r3, #3
 8001260:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001266:	2301      	movs	r3, #1
 8001268:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800126e:	230a      	movs	r3, #10
 8001270:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001276:	2301      	movs	r3, #1
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800127e:	230a      	movs	r3, #10
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001282:	f107 030c 	add.w	r3, r7, #12
 8001286:	4619      	mov	r1, r3
 8001288:	480c      	ldr	r0, [pc, #48]	; (80012bc <MX_TIM3_Init+0xa0>)
 800128a:	f001 fe0d 	bl	8002ea8 <HAL_TIM_Encoder_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001294:	f000 f9de 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <MX_TIM3_Init+0xa0>)
 80012a6:	f002 fe79 	bl	8003f9c <HAL_TIMEx_MasterConfigSynchronization>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80012b0:	f000 f9d0 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	3730      	adds	r7, #48	; 0x30
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20004a78 	.word	0x20004a78
 80012c0:	40000400 	.word	0x40000400

080012c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ca:	f107 0310 	add.w	r3, r7, #16
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012d4:	463b      	mov	r3, r7
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012e0:	4b20      	ldr	r3, [pc, #128]	; (8001364 <MX_TIM4_Init+0xa0>)
 80012e2:	4a21      	ldr	r2, [pc, #132]	; (8001368 <MX_TIM4_Init+0xa4>)
 80012e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 80012e6:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <MX_TIM4_Init+0xa0>)
 80012e8:	220f      	movs	r2, #15
 80012ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ec:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <MX_TIM4_Init+0xa0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <MX_TIM4_Init+0xa0>)
 80012f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80012f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <MX_TIM4_Init+0xa0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <MX_TIM4_Init+0xa0>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001306:	4817      	ldr	r0, [pc, #92]	; (8001364 <MX_TIM4_Init+0xa0>)
 8001308:	f001 fc56 	bl	8002bb8 <HAL_TIM_IC_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001312:	f000 f99f 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800131e:	f107 0310 	add.w	r3, r7, #16
 8001322:	4619      	mov	r1, r3
 8001324:	480f      	ldr	r0, [pc, #60]	; (8001364 <MX_TIM4_Init+0xa0>)
 8001326:	f002 fe39 	bl	8003f9c <HAL_TIMEx_MasterConfigSynchronization>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001330:	f000 f990 	bl	8001654 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001334:	2300      	movs	r3, #0
 8001336:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001338:	2301      	movs	r3, #1
 800133a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001344:	463b      	mov	r3, r7
 8001346:	2200      	movs	r2, #0
 8001348:	4619      	mov	r1, r3
 800134a:	4806      	ldr	r0, [pc, #24]	; (8001364 <MX_TIM4_Init+0xa0>)
 800134c:	f001 ff5a 	bl	8003204 <HAL_TIM_IC_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001356:	f000 f97d 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20004a0c 	.word	0x20004a0c
 8001368:	40000800 	.word	0x40000800

0800136c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b092      	sub	sp, #72	; 0x48
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001372:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800137c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
 800138c:	615a      	str	r2, [r3, #20]
 800138e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2220      	movs	r2, #32
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f005 fed2 	bl	8007140 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800139c:	4b37      	ldr	r3, [pc, #220]	; (800147c <MX_TIM8_Init+0x110>)
 800139e:	4a38      	ldr	r2, [pc, #224]	; (8001480 <MX_TIM8_Init+0x114>)
 80013a0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80013a2:	4b36      	ldr	r3, [pc, #216]	; (800147c <MX_TIM8_Init+0x110>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a8:	4b34      	ldr	r3, [pc, #208]	; (800147c <MX_TIM8_Init+0x110>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80013ae:	4b33      	ldr	r3, [pc, #204]	; (800147c <MX_TIM8_Init+0x110>)
 80013b0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80013b4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b6:	4b31      	ldr	r3, [pc, #196]	; (800147c <MX_TIM8_Init+0x110>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80013bc:	4b2f      	ldr	r3, [pc, #188]	; (800147c <MX_TIM8_Init+0x110>)
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c2:	4b2e      	ldr	r3, [pc, #184]	; (800147c <MX_TIM8_Init+0x110>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80013c8:	482c      	ldr	r0, [pc, #176]	; (800147c <MX_TIM8_Init+0x110>)
 80013ca:	f001 fba6 	bl	8002b1a <HAL_TIM_PWM_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80013d4:	f000 f93e 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80013e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013e4:	4619      	mov	r1, r3
 80013e6:	4825      	ldr	r0, [pc, #148]	; (800147c <MX_TIM8_Init+0x110>)
 80013e8:	f002 fdd8 	bl	8003f9c <HAL_TIMEx_MasterConfigSynchronization>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80013f2:	f000 f92f 	bl	8001654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f6:	2360      	movs	r3, #96	; 0x60
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013fe:	2300      	movs	r3, #0
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001402:	2300      	movs	r3, #0
 8001404:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	2200      	movs	r2, #0
 8001418:	4619      	mov	r1, r3
 800141a:	4818      	ldr	r0, [pc, #96]	; (800147c <MX_TIM8_Init+0x110>)
 800141c:	f001 ff8e 	bl	800333c <HAL_TIM_PWM_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8001426:	f000 f915 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800142a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142e:	2204      	movs	r2, #4
 8001430:	4619      	mov	r1, r3
 8001432:	4812      	ldr	r0, [pc, #72]	; (800147c <MX_TIM8_Init+0x110>)
 8001434:	f001 ff82 	bl	800333c <HAL_TIM_PWM_ConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800143e:	f000 f909 	bl	8001654 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001456:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800145a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	4619      	mov	r1, r3
 8001464:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_TIM8_Init+0x110>)
 8001466:	f002 fe15 	bl	8004094 <HAL_TIMEx_ConfigBreakDeadTime>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001470:	f000 f8f0 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	3748      	adds	r7, #72	; 0x48
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200049c4 	.word	0x200049c4
 8001480:	40010400 	.word	0x40010400

08001484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	4b42      	ldr	r3, [pc, #264]	; (80015a8 <MX_GPIO_Init+0x124>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a41      	ldr	r2, [pc, #260]	; (80015a8 <MX_GPIO_Init+0x124>)
 80014a4:	f043 0310 	orr.w	r3, r3, #16
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b3f      	ldr	r3, [pc, #252]	; (80015a8 <MX_GPIO_Init+0x124>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0310 	and.w	r3, r3, #16
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b3b      	ldr	r3, [pc, #236]	; (80015a8 <MX_GPIO_Init+0x124>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a3a      	ldr	r2, [pc, #232]	; (80015a8 <MX_GPIO_Init+0x124>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b38      	ldr	r3, [pc, #224]	; (80015a8 <MX_GPIO_Init+0x124>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <MX_GPIO_Init+0x124>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a33      	ldr	r2, [pc, #204]	; (80015a8 <MX_GPIO_Init+0x124>)
 80014dc:	f043 0308 	orr.w	r3, r3, #8
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <MX_GPIO_Init+0x124>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <MX_GPIO_Init+0x124>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a2c      	ldr	r2, [pc, #176]	; (80015a8 <MX_GPIO_Init+0x124>)
 80014f8:	f043 0304 	orr.w	r3, r3, #4
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <MX_GPIO_Init+0x124>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <MX_GPIO_Init+0x124>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a25      	ldr	r2, [pc, #148]	; (80015a8 <MX_GPIO_Init+0x124>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <MX_GPIO_Init+0x124>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 800152c:	481f      	ldr	r0, [pc, #124]	; (80015ac <MX_GPIO_Init+0x128>)
 800152e:	f000 fe35 	bl	800219c <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	213c      	movs	r1, #60	; 0x3c
 8001536:	481e      	ldr	r0, [pc, #120]	; (80015b0 <MX_GPIO_Init+0x12c>)
 8001538:	f000 fe30 	bl	800219c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001542:	481c      	ldr	r0, [pc, #112]	; (80015b4 <MX_GPIO_Init+0x130>)
 8001544:	f000 fe2a 	bl	800219c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001548:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 800154c:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	4812      	ldr	r0, [pc, #72]	; (80015ac <MX_GPIO_Init+0x128>)
 8001562:	f000 fc7f 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001566:	233c      	movs	r3, #60	; 0x3c
 8001568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001572:	2302      	movs	r3, #2
 8001574:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <MX_GPIO_Init+0x12c>)
 800157e:	f000 fc71 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001582:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001588:	2301      	movs	r3, #1
 800158a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4619      	mov	r1, r3
 800159a:	4806      	ldr	r0, [pc, #24]	; (80015b4 <MX_GPIO_Init+0x130>)
 800159c:	f000 fc62 	bl	8001e64 <HAL_GPIO_Init>

}
 80015a0:	bf00      	nop
 80015a2:	3728      	adds	r7, #40	; 0x28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40020c00 	.word	0x40020c00

080015b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08c      	sub	sp, #48	; 0x30
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t test[20] = "testing";
 80015c0:	4a19      	ldr	r2, [pc, #100]	; (8001628 <StartDefaultTask+0x70>)
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80015ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
	uint8_t ultra[20];
  /* Infinite loop */
  for(;;)
  {
	  OLED_ShowString(10,10,test);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	461a      	mov	r2, r3
 80015e0:	210a      	movs	r1, #10
 80015e2:	200a      	movs	r0, #10
 80015e4:	f005 fcb6 	bl	8006f54 <OLED_ShowString>

	  uDist = HCSR04_Read();
 80015e8:	f7ff fc66 	bl	8000eb8 <HCSR04_Read>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <StartDefaultTask+0x74>)
 80015f2:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(200);
 80015f4:	20c8      	movs	r0, #200	; 0xc8
 80015f6:	f000 faff 	bl	8001bf8 <HAL_Delay>
	  sprintf(ultra, "uDist: %u\0", uDist);
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <StartDefaultTask+0x74>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	f107 0308 	add.w	r3, r7, #8
 8001604:	490a      	ldr	r1, [pc, #40]	; (8001630 <StartDefaultTask+0x78>)
 8001606:	4618      	mov	r0, r3
 8001608:	f005 fda2 	bl	8007150 <siprintf>
	  OLED_ShowString(10, 20, ultra);
 800160c:	f107 0308 	add.w	r3, r7, #8
 8001610:	461a      	mov	r2, r3
 8001612:	2114      	movs	r1, #20
 8001614:	200a      	movs	r0, #10
 8001616:	f005 fc9d 	bl	8006f54 <OLED_ShowString>

	  OLED_Refresh_Gram();
 800161a:	f005 fb27 	bl	8006c6c <OLED_Refresh_Gram>
//	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
	  osDelay(1000);
 800161e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001622:	f002 fead 	bl	8004380 <osDelay>
  {
 8001626:	e7d8      	b.n	80015da <StartDefaultTask+0x22>
 8001628:	080079dc 	.word	0x080079dc
 800162c:	200000a2 	.word	0x200000a2
 8001630:	080079d0 	.word	0x080079d0

08001634 <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
//	motorControl(4000, 4000, 'F', 'F', 0, 10000, 90);
	//left(90);
  /* USER CODE END motor */
	for(;;)
	{
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800163c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <motor+0x1c>)
 8001642:	f000 fdc4 	bl	80021ce <HAL_GPIO_TogglePin>
		osDelay(2000);
 8001646:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800164a:	f002 fe99 	bl	8004380 <osDelay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800164e:	e7f5      	b.n	800163c <motor+0x8>
 8001650:	40021000 	.word	0x40021000

08001654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
}
 800165a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800165c:	e7fe      	b.n	800165c <Error_Handler+0x8>
	...

08001660 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_MspInit+0x54>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	4a11      	ldr	r2, [pc, #68]	; (80016b4 <HAL_MspInit+0x54>)
 8001670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001674:	6453      	str	r3, [r2, #68]	; 0x44
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HAL_MspInit+0x54>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	603b      	str	r3, [r7, #0]
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_MspInit+0x54>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <HAL_MspInit+0x54>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001690:	6413      	str	r3, [r2, #64]	; 0x40
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <HAL_MspInit+0x54>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	210f      	movs	r1, #15
 80016a2:	f06f 0001 	mvn.w	r0, #1
 80016a6:	f000 fba6 	bl	8001df6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800

080016b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0b      	ldr	r2, [pc, #44]	; (80016f4 <HAL_TIM_Base_MspInit+0x3c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d10d      	bne.n	80016e6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <HAL_TIM_Base_MspInit+0x40>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	4a09      	ldr	r2, [pc, #36]	; (80016f8 <HAL_TIM_Base_MspInit+0x40>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6453      	str	r3, [r2, #68]	; 0x44
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <HAL_TIM_Base_MspInit+0x40>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40010000 	.word	0x40010000
 80016f8:	40023800 	.word	0x40023800

080016fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	; 0x30
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 031c 	add.w	r3, r7, #28
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800171c:	d14b      	bne.n	80017b6 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
 8001722:	4b3f      	ldr	r3, [pc, #252]	; (8001820 <HAL_TIM_Encoder_MspInit+0x124>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	4a3e      	ldr	r2, [pc, #248]	; (8001820 <HAL_TIM_Encoder_MspInit+0x124>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6413      	str	r3, [r2, #64]	; 0x40
 800172e:	4b3c      	ldr	r3, [pc, #240]	; (8001820 <HAL_TIM_Encoder_MspInit+0x124>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	61bb      	str	r3, [r7, #24]
 8001738:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	4b38      	ldr	r3, [pc, #224]	; (8001820 <HAL_TIM_Encoder_MspInit+0x124>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a37      	ldr	r2, [pc, #220]	; (8001820 <HAL_TIM_Encoder_MspInit+0x124>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b35      	ldr	r3, [pc, #212]	; (8001820 <HAL_TIM_Encoder_MspInit+0x124>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	4b31      	ldr	r3, [pc, #196]	; (8001820 <HAL_TIM_Encoder_MspInit+0x124>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a30      	ldr	r2, [pc, #192]	; (8001820 <HAL_TIM_Encoder_MspInit+0x124>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b2e      	ldr	r3, [pc, #184]	; (8001820 <HAL_TIM_Encoder_MspInit+0x124>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001784:	2301      	movs	r3, #1
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	4619      	mov	r1, r3
 800178e:	4825      	ldr	r0, [pc, #148]	; (8001824 <HAL_TIM_Encoder_MspInit+0x128>)
 8001790:	f000 fb68 	bl	8001e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001794:	2308      	movs	r3, #8
 8001796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017a4:	2301      	movs	r3, #1
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	4619      	mov	r1, r3
 80017ae:	481e      	ldr	r0, [pc, #120]	; (8001828 <HAL_TIM_Encoder_MspInit+0x12c>)
 80017b0:	f000 fb58 	bl	8001e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017b4:	e030      	b.n	8001818 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a1c      	ldr	r2, [pc, #112]	; (800182c <HAL_TIM_Encoder_MspInit+0x130>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d12b      	bne.n	8001818 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	4b16      	ldr	r3, [pc, #88]	; (8001820 <HAL_TIM_Encoder_MspInit+0x124>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	4a15      	ldr	r2, [pc, #84]	; (8001820 <HAL_TIM_Encoder_MspInit+0x124>)
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	6413      	str	r3, [r2, #64]	; 0x40
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <HAL_TIM_Encoder_MspInit+0x124>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	2300      	movs	r3, #0
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_TIM_Encoder_MspInit+0x124>)
 80017e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e4:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <HAL_TIM_Encoder_MspInit+0x124>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	6313      	str	r3, [r2, #48]	; 0x30
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_TIM_Encoder_MspInit+0x124>)
 80017ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017f8:	23c0      	movs	r3, #192	; 0xc0
 80017fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001808:	2302      	movs	r3, #2
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	4619      	mov	r1, r3
 8001812:	4804      	ldr	r0, [pc, #16]	; (8001824 <HAL_TIM_Encoder_MspInit+0x128>)
 8001814:	f000 fb26 	bl	8001e64 <HAL_GPIO_Init>
}
 8001818:	bf00      	nop
 800181a:	3730      	adds	r7, #48	; 0x30
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40023800 	.word	0x40023800
 8001824:	40020000 	.word	0x40020000
 8001828:	40020400 	.word	0x40020400
 800182c:	40000400 	.word	0x40000400

08001830 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a1d      	ldr	r2, [pc, #116]	; (80018c4 <HAL_TIM_IC_MspInit+0x94>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d134      	bne.n	80018bc <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <HAL_TIM_IC_MspInit+0x98>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	4a1b      	ldr	r2, [pc, #108]	; (80018c8 <HAL_TIM_IC_MspInit+0x98>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <HAL_TIM_IC_MspInit+0x98>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_TIM_IC_MspInit+0x98>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <HAL_TIM_IC_MspInit+0x98>)
 8001878:	f043 0308 	orr.w	r3, r3, #8
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_TIM_IC_MspInit+0x98>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800188a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800189c:	2302      	movs	r3, #2
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	4809      	ldr	r0, [pc, #36]	; (80018cc <HAL_TIM_IC_MspInit+0x9c>)
 80018a8:	f000 fadc 	bl	8001e64 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2105      	movs	r1, #5
 80018b0:	201e      	movs	r0, #30
 80018b2:	f000 faa0 	bl	8001df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80018b6:	201e      	movs	r0, #30
 80018b8:	f000 fab9 	bl	8001e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018bc:	bf00      	nop
 80018be:	3728      	adds	r7, #40	; 0x28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40000800 	.word	0x40000800
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020c00 	.word	0x40020c00

080018d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	; 0x28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM8)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a19      	ldr	r2, [pc, #100]	; (8001954 <HAL_TIM_PWM_MspInit+0x84>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d12b      	bne.n	800194a <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	4b18      	ldr	r3, [pc, #96]	; (8001958 <HAL_TIM_PWM_MspInit+0x88>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	4a17      	ldr	r2, [pc, #92]	; (8001958 <HAL_TIM_PWM_MspInit+0x88>)
 80018fc:	f043 0302 	orr.w	r3, r3, #2
 8001900:	6453      	str	r3, [r2, #68]	; 0x44
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <HAL_TIM_PWM_MspInit+0x88>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <HAL_TIM_PWM_MspInit+0x88>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a10      	ldr	r2, [pc, #64]	; (8001958 <HAL_TIM_PWM_MspInit+0x88>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <HAL_TIM_PWM_MspInit+0x88>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 800192a:	23c0      	movs	r3, #192	; 0xc0
 800192c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800193a:	2303      	movs	r3, #3
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	4805      	ldr	r0, [pc, #20]	; (800195c <HAL_TIM_PWM_MspInit+0x8c>)
 8001946:	f000 fa8d 	bl	8001e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800194a:	bf00      	nop
 800194c:	3728      	adds	r7, #40	; 0x28
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40010400 	.word	0x40010400
 8001958:	40023800 	.word	0x40023800
 800195c:	40020800 	.word	0x40020800

08001960 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <HAL_TIM_MspPostInit+0x68>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d11e      	bne.n	80019c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <HAL_TIM_MspPostInit+0x6c>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a10      	ldr	r2, [pc, #64]	; (80019cc <HAL_TIM_MspPostInit+0x6c>)
 800198c:	f043 0310 	orr.w	r3, r3, #16
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <HAL_TIM_MspPostInit+0x6c>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0310 	and.w	r3, r3, #16
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800199e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019b0:	2301      	movs	r3, #1
 80019b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	4619      	mov	r1, r3
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <HAL_TIM_MspPostInit+0x70>)
 80019bc:	f000 fa52 	bl	8001e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019c0:	bf00      	nop
 80019c2:	3720      	adds	r7, #32
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40010000 	.word	0x40010000
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40021000 	.word	0x40021000

080019d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <NMI_Handler+0x4>

080019da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019de:	e7fe      	b.n	80019de <HardFault_Handler+0x4>

080019e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <MemManage_Handler+0x4>

080019e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ea:	e7fe      	b.n	80019ea <BusFault_Handler+0x4>

080019ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <UsageFault_Handler+0x4>

080019f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a04:	f000 f8d8 	bl	8001bb8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001a08:	f004 f8c8 	bl	8005b9c <xTaskGetSchedulerState>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d001      	beq.n	8001a16 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001a12:	f004 feb1 	bl	8006778 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <TIM4_IRQHandler+0x10>)
 8001a22:	f001 fae7 	bl	8002ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20004a0c 	.word	0x20004a0c

08001a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a38:	4a14      	ldr	r2, [pc, #80]	; (8001a8c <_sbrk+0x5c>)
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <_sbrk+0x60>)
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <_sbrk+0x64>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d102      	bne.n	8001a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <_sbrk+0x64>)
 8001a4e:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <_sbrk+0x68>)
 8001a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <_sbrk+0x64>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d207      	bcs.n	8001a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a60:	f005 fb36 	bl	80070d0 <__errno>
 8001a64:	4603      	mov	r3, r0
 8001a66:	220c      	movs	r2, #12
 8001a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6e:	e009      	b.n	8001a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <_sbrk+0x64>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <_sbrk+0x64>)
 8001a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20020000 	.word	0x20020000
 8001a90:	00000400 	.word	0x00000400
 8001a94:	200000a4 	.word	0x200000a4
 8001a98:	20004fa8 	.word	0x20004fa8

08001a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <SystemInit+0x20>)
 8001aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aa6:	4a05      	ldr	r2, [pc, #20]	; (8001abc <SystemInit+0x20>)
 8001aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001af8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ac4:	480d      	ldr	r0, [pc, #52]	; (8001afc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ac6:	490e      	ldr	r1, [pc, #56]	; (8001b00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ac8:	4a0e      	ldr	r2, [pc, #56]	; (8001b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001acc:	e002      	b.n	8001ad4 <LoopCopyDataInit>

08001ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad2:	3304      	adds	r3, #4

08001ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad8:	d3f9      	bcc.n	8001ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ada:	4a0b      	ldr	r2, [pc, #44]	; (8001b08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001adc:	4c0b      	ldr	r4, [pc, #44]	; (8001b0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae0:	e001      	b.n	8001ae6 <LoopFillZerobss>

08001ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae4:	3204      	adds	r2, #4

08001ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae8:	d3fb      	bcc.n	8001ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aea:	f7ff ffd7 	bl	8001a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aee:	f005 faf5 	bl	80070dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001af2:	f7ff fa05 	bl	8000f00 <main>
  bx  lr    
 8001af6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001af8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b00:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001b04:	08008508 	.word	0x08008508
  ldr r2, =_sbss
 8001b08:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001b0c:	20004fa8 	.word	0x20004fa8

08001b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b10:	e7fe      	b.n	8001b10 <ADC_IRQHandler>
	...

08001b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b18:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <HAL_Init+0x40>)
 8001b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <HAL_Init+0x40>)
 8001b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_Init+0x40>)
 8001b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f000 f94f 	bl	8001de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b42:	200f      	movs	r0, #15
 8001b44:	f000 f808 	bl	8001b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b48:	f7ff fd8a 	bl	8001660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023c00 	.word	0x40023c00

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_InitTick+0x54>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_InitTick+0x58>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f967 	bl	8001e4a <HAL_SYSTICK_Config>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00e      	b.n	8001ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b0f      	cmp	r3, #15
 8001b8a:	d80a      	bhi.n	8001ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f000 f92f 	bl	8001df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_InitTick+0x5c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	20000008 	.word	0x20000008
 8001bb4:	20000004 	.word	0x20000004

08001bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x24>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_IncTick+0x24>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	20004b54 	.word	0x20004b54

08001be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_GetTick+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20004b54 	.word	0x20004b54

08001bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff ffee 	bl	8001be0 <HAL_GetTick>
 8001c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d005      	beq.n	8001c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_Delay+0x44>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c1e:	bf00      	nop
 8001c20:	f7ff ffde 	bl	8001be0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d8f7      	bhi.n	8001c20 <HAL_Delay+0x28>
  {
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000008 	.word	0x20000008

08001c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c72:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	60d3      	str	r3, [r2, #12]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	f003 0307 	and.w	r3, r3, #7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	db0b      	blt.n	8001cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	4907      	ldr	r1, [pc, #28]	; (8001cdc <__NVIC_EnableIRQ+0x38>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100

08001ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db0a      	blt.n	8001d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	490c      	ldr	r1, [pc, #48]	; (8001d2c <__NVIC_SetPriority+0x4c>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d08:	e00a      	b.n	8001d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4908      	ldr	r1, [pc, #32]	; (8001d30 <__NVIC_SetPriority+0x50>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	3b04      	subs	r3, #4
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	761a      	strb	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000e100 	.word	0xe000e100
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	; 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	bf28      	it	cs
 8001d52:	2304      	movcs	r3, #4
 8001d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d902      	bls.n	8001d64 <NVIC_EncodePriority+0x30>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b03      	subs	r3, #3
 8001d62:	e000      	b.n	8001d66 <NVIC_EncodePriority+0x32>
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43d9      	mvns	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	4313      	orrs	r3, r2
         );
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	; 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dac:	d301      	bcc.n	8001db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00f      	b.n	8001dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db2:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <SysTick_Config+0x40>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dba:	210f      	movs	r1, #15
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	f7ff ff8e 	bl	8001ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <SysTick_Config+0x40>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dca:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <SysTick_Config+0x40>)
 8001dcc:	2207      	movs	r2, #7
 8001dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	e000e010 	.word	0xe000e010

08001de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff29 	bl	8001c40 <__NVIC_SetPriorityGrouping>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e08:	f7ff ff3e 	bl	8001c88 <__NVIC_GetPriorityGrouping>
 8001e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	6978      	ldr	r0, [r7, #20]
 8001e14:	f7ff ff8e 	bl	8001d34 <NVIC_EncodePriority>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff5d 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff31 	bl	8001ca4 <__NVIC_EnableIRQ>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ffa2 	bl	8001d9c <SysTick_Config>
 8001e58:	4603      	mov	r3, r0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b089      	sub	sp, #36	; 0x24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	e16b      	b.n	8002158 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e80:	2201      	movs	r2, #1
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	f040 815a 	bne.w	8002152 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d005      	beq.n	8001eb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d130      	bne.n	8001f18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eec:	2201      	movs	r2, #1
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f003 0201 	and.w	r2, r3, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d017      	beq.n	8001f54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2203      	movs	r2, #3
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d123      	bne.n	8001fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	08da      	lsrs	r2, r3, #3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3208      	adds	r2, #8
 8001f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	220f      	movs	r2, #15
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	08da      	lsrs	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3208      	adds	r2, #8
 8001fa2:	69b9      	ldr	r1, [r7, #24]
 8001fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0203 	and.w	r2, r3, #3
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 80b4 	beq.w	8002152 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	4b60      	ldr	r3, [pc, #384]	; (8002170 <HAL_GPIO_Init+0x30c>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	4a5f      	ldr	r2, [pc, #380]	; (8002170 <HAL_GPIO_Init+0x30c>)
 8001ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffa:	4b5d      	ldr	r3, [pc, #372]	; (8002170 <HAL_GPIO_Init+0x30c>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002006:	4a5b      	ldr	r2, [pc, #364]	; (8002174 <HAL_GPIO_Init+0x310>)
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	3302      	adds	r3, #2
 800200e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	220f      	movs	r2, #15
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a52      	ldr	r2, [pc, #328]	; (8002178 <HAL_GPIO_Init+0x314>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d02b      	beq.n	800208a <HAL_GPIO_Init+0x226>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a51      	ldr	r2, [pc, #324]	; (800217c <HAL_GPIO_Init+0x318>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d025      	beq.n	8002086 <HAL_GPIO_Init+0x222>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a50      	ldr	r2, [pc, #320]	; (8002180 <HAL_GPIO_Init+0x31c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01f      	beq.n	8002082 <HAL_GPIO_Init+0x21e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4f      	ldr	r2, [pc, #316]	; (8002184 <HAL_GPIO_Init+0x320>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d019      	beq.n	800207e <HAL_GPIO_Init+0x21a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4e      	ldr	r2, [pc, #312]	; (8002188 <HAL_GPIO_Init+0x324>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <HAL_GPIO_Init+0x216>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4d      	ldr	r2, [pc, #308]	; (800218c <HAL_GPIO_Init+0x328>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00d      	beq.n	8002076 <HAL_GPIO_Init+0x212>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4c      	ldr	r2, [pc, #304]	; (8002190 <HAL_GPIO_Init+0x32c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d007      	beq.n	8002072 <HAL_GPIO_Init+0x20e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4b      	ldr	r2, [pc, #300]	; (8002194 <HAL_GPIO_Init+0x330>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d101      	bne.n	800206e <HAL_GPIO_Init+0x20a>
 800206a:	2307      	movs	r3, #7
 800206c:	e00e      	b.n	800208c <HAL_GPIO_Init+0x228>
 800206e:	2308      	movs	r3, #8
 8002070:	e00c      	b.n	800208c <HAL_GPIO_Init+0x228>
 8002072:	2306      	movs	r3, #6
 8002074:	e00a      	b.n	800208c <HAL_GPIO_Init+0x228>
 8002076:	2305      	movs	r3, #5
 8002078:	e008      	b.n	800208c <HAL_GPIO_Init+0x228>
 800207a:	2304      	movs	r3, #4
 800207c:	e006      	b.n	800208c <HAL_GPIO_Init+0x228>
 800207e:	2303      	movs	r3, #3
 8002080:	e004      	b.n	800208c <HAL_GPIO_Init+0x228>
 8002082:	2302      	movs	r3, #2
 8002084:	e002      	b.n	800208c <HAL_GPIO_Init+0x228>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_GPIO_Init+0x228>
 800208a:	2300      	movs	r3, #0
 800208c:	69fa      	ldr	r2, [r7, #28]
 800208e:	f002 0203 	and.w	r2, r2, #3
 8002092:	0092      	lsls	r2, r2, #2
 8002094:	4093      	lsls	r3, r2
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800209c:	4935      	ldr	r1, [pc, #212]	; (8002174 <HAL_GPIO_Init+0x310>)
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	089b      	lsrs	r3, r3, #2
 80020a2:	3302      	adds	r3, #2
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020aa:	4b3b      	ldr	r3, [pc, #236]	; (8002198 <HAL_GPIO_Init+0x334>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020ce:	4a32      	ldr	r2, [pc, #200]	; (8002198 <HAL_GPIO_Init+0x334>)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020d4:	4b30      	ldr	r3, [pc, #192]	; (8002198 <HAL_GPIO_Init+0x334>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f8:	4a27      	ldr	r2, [pc, #156]	; (8002198 <HAL_GPIO_Init+0x334>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020fe:	4b26      	ldr	r3, [pc, #152]	; (8002198 <HAL_GPIO_Init+0x334>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002122:	4a1d      	ldr	r2, [pc, #116]	; (8002198 <HAL_GPIO_Init+0x334>)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <HAL_GPIO_Init+0x334>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800214c:	4a12      	ldr	r2, [pc, #72]	; (8002198 <HAL_GPIO_Init+0x334>)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3301      	adds	r3, #1
 8002156:	61fb      	str	r3, [r7, #28]
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	2b0f      	cmp	r3, #15
 800215c:	f67f ae90 	bls.w	8001e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	3724      	adds	r7, #36	; 0x24
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800
 8002174:	40013800 	.word	0x40013800
 8002178:	40020000 	.word	0x40020000
 800217c:	40020400 	.word	0x40020400
 8002180:	40020800 	.word	0x40020800
 8002184:	40020c00 	.word	0x40020c00
 8002188:	40021000 	.word	0x40021000
 800218c:	40021400 	.word	0x40021400
 8002190:	40021800 	.word	0x40021800
 8002194:	40021c00 	.word	0x40021c00
 8002198:	40013c00 	.word	0x40013c00

0800219c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
 80021a8:	4613      	mov	r3, r2
 80021aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021ac:	787b      	ldrb	r3, [r7, #1]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021b2:	887a      	ldrh	r2, [r7, #2]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021b8:	e003      	b.n	80021c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ba:	887b      	ldrh	r3, [r7, #2]
 80021bc:	041a      	lsls	r2, r3, #16
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	619a      	str	r2, [r3, #24]
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b085      	sub	sp, #20
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	460b      	mov	r3, r1
 80021d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021e0:	887a      	ldrh	r2, [r7, #2]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4013      	ands	r3, r2
 80021e6:	041a      	lsls	r2, r3, #16
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	43d9      	mvns	r1, r3
 80021ec:	887b      	ldrh	r3, [r7, #2]
 80021ee:	400b      	ands	r3, r1
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	619a      	str	r2, [r3, #24]
}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
	...

08002204 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_PWR_EnableBkUpAccess+0x20>)
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_PWR_EnableBkUpAccess+0x24>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8002216:	687b      	ldr	r3, [r7, #4]
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	420e0020 	.word	0x420e0020
 8002228:	40007000 	.word	0x40007000

0800222c <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_PWR_DisableBkUpAccess+0x20>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <HAL_PWR_DisableBkUpAccess+0x24>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800223e:	687b      	ldr	r3, [r7, #4]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	420e0020 	.word	0x420e0020
 8002250:	40007000 	.word	0x40007000

08002254 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e264      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d075      	beq.n	800235e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002272:	4ba3      	ldr	r3, [pc, #652]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b04      	cmp	r3, #4
 800227c:	d00c      	beq.n	8002298 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800227e:	4ba0      	ldr	r3, [pc, #640]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002286:	2b08      	cmp	r3, #8
 8002288:	d112      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800228a:	4b9d      	ldr	r3, [pc, #628]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002292:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002296:	d10b      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002298:	4b99      	ldr	r3, [pc, #612]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d05b      	beq.n	800235c <HAL_RCC_OscConfig+0x108>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d157      	bne.n	800235c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e23f      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b8:	d106      	bne.n	80022c8 <HAL_RCC_OscConfig+0x74>
 80022ba:	4b91      	ldr	r3, [pc, #580]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a90      	ldr	r2, [pc, #576]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e01d      	b.n	8002304 <HAL_RCC_OscConfig+0xb0>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d0:	d10c      	bne.n	80022ec <HAL_RCC_OscConfig+0x98>
 80022d2:	4b8b      	ldr	r3, [pc, #556]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a8a      	ldr	r2, [pc, #552]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	4b88      	ldr	r3, [pc, #544]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a87      	ldr	r2, [pc, #540]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e00b      	b.n	8002304 <HAL_RCC_OscConfig+0xb0>
 80022ec:	4b84      	ldr	r3, [pc, #528]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a83      	ldr	r2, [pc, #524]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	4b81      	ldr	r3, [pc, #516]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a80      	ldr	r2, [pc, #512]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d013      	beq.n	8002334 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7ff fc68 	bl	8001be0 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002314:	f7ff fc64 	bl	8001be0 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	; 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e204      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002326:	4b76      	ldr	r3, [pc, #472]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0xc0>
 8002332:	e014      	b.n	800235e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7ff fc54 	bl	8001be0 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800233c:	f7ff fc50 	bl	8001be0 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b64      	cmp	r3, #100	; 0x64
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e1f0      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234e:	4b6c      	ldr	r3, [pc, #432]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0xe8>
 800235a:	e000      	b.n	800235e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d063      	beq.n	8002432 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800236a:	4b65      	ldr	r3, [pc, #404]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00b      	beq.n	800238e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002376:	4b62      	ldr	r3, [pc, #392]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800237e:	2b08      	cmp	r3, #8
 8002380:	d11c      	bne.n	80023bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002382:	4b5f      	ldr	r3, [pc, #380]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d116      	bne.n	80023bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238e:	4b5c      	ldr	r3, [pc, #368]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d005      	beq.n	80023a6 <HAL_RCC_OscConfig+0x152>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d001      	beq.n	80023a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e1c4      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a6:	4b56      	ldr	r3, [pc, #344]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4952      	ldr	r1, [pc, #328]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ba:	e03a      	b.n	8002432 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d020      	beq.n	8002406 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c4:	4b4f      	ldr	r3, [pc, #316]	; (8002504 <HAL_RCC_OscConfig+0x2b0>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ca:	f7ff fc09 	bl	8001be0 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d2:	f7ff fc05 	bl	8001be0 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e1a5      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e4:	4b46      	ldr	r3, [pc, #280]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f0:	4b43      	ldr	r3, [pc, #268]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4940      	ldr	r1, [pc, #256]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]
 8002404:	e015      	b.n	8002432 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002406:	4b3f      	ldr	r3, [pc, #252]	; (8002504 <HAL_RCC_OscConfig+0x2b0>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7ff fbe8 	bl	8001be0 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002414:	f7ff fbe4 	bl	8001be0 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e184      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002426:	4b36      	ldr	r3, [pc, #216]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d030      	beq.n	80024a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d016      	beq.n	8002474 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002446:	4b30      	ldr	r3, [pc, #192]	; (8002508 <HAL_RCC_OscConfig+0x2b4>)
 8002448:	2201      	movs	r2, #1
 800244a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244c:	f7ff fbc8 	bl	8001be0 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002454:	f7ff fbc4 	bl	8001be0 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e164      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002466:	4b26      	ldr	r3, [pc, #152]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0x200>
 8002472:	e015      	b.n	80024a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002474:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_RCC_OscConfig+0x2b4>)
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247a:	f7ff fbb1 	bl	8001be0 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002482:	f7ff fbad 	bl	8001be0 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e14d      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002494:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f0      	bne.n	8002482 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 80a0 	beq.w	80025ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ae:	2300      	movs	r3, #0
 80024b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024b2:	4b13      	ldr	r3, [pc, #76]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10f      	bne.n	80024de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a0e      	ldr	r2, [pc, #56]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
 80024ce:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024da:	2301      	movs	r3, #1
 80024dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_RCC_OscConfig+0x2b8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d121      	bne.n	800252e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <HAL_RCC_OscConfig+0x2b8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a07      	ldr	r2, [pc, #28]	; (800250c <HAL_RCC_OscConfig+0x2b8>)
 80024f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f6:	f7ff fb73 	bl	8001be0 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fc:	e011      	b.n	8002522 <HAL_RCC_OscConfig+0x2ce>
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	42470000 	.word	0x42470000
 8002508:	42470e80 	.word	0x42470e80
 800250c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002510:	f7ff fb66 	bl	8001be0 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e106      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002522:	4b85      	ldr	r3, [pc, #532]	; (8002738 <HAL_RCC_OscConfig+0x4e4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d106      	bne.n	8002544 <HAL_RCC_OscConfig+0x2f0>
 8002536:	4b81      	ldr	r3, [pc, #516]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	4a80      	ldr	r2, [pc, #512]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6713      	str	r3, [r2, #112]	; 0x70
 8002542:	e01c      	b.n	800257e <HAL_RCC_OscConfig+0x32a>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b05      	cmp	r3, #5
 800254a:	d10c      	bne.n	8002566 <HAL_RCC_OscConfig+0x312>
 800254c:	4b7b      	ldr	r3, [pc, #492]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800254e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002550:	4a7a      	ldr	r2, [pc, #488]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002552:	f043 0304 	orr.w	r3, r3, #4
 8002556:	6713      	str	r3, [r2, #112]	; 0x70
 8002558:	4b78      	ldr	r3, [pc, #480]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800255a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255c:	4a77      	ldr	r2, [pc, #476]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6713      	str	r3, [r2, #112]	; 0x70
 8002564:	e00b      	b.n	800257e <HAL_RCC_OscConfig+0x32a>
 8002566:	4b75      	ldr	r3, [pc, #468]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	4a74      	ldr	r2, [pc, #464]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6713      	str	r3, [r2, #112]	; 0x70
 8002572:	4b72      	ldr	r3, [pc, #456]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002576:	4a71      	ldr	r2, [pc, #452]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d015      	beq.n	80025b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002586:	f7ff fb2b 	bl	8001be0 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7ff fb27 	bl	8001be0 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	; 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0c5      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a4:	4b65      	ldr	r3, [pc, #404]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0ee      	beq.n	800258e <HAL_RCC_OscConfig+0x33a>
 80025b0:	e014      	b.n	80025dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b2:	f7ff fb15 	bl	8001be0 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ba:	f7ff fb11 	bl	8001be0 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e0af      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d0:	4b5a      	ldr	r3, [pc, #360]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1ee      	bne.n	80025ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d105      	bne.n	80025ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e2:	4b56      	ldr	r3, [pc, #344]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	4a55      	ldr	r2, [pc, #340]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 809b 	beq.w	800272e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025f8:	4b50      	ldr	r3, [pc, #320]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b08      	cmp	r3, #8
 8002602:	d05c      	beq.n	80026be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d141      	bne.n	8002690 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260c:	4b4c      	ldr	r3, [pc, #304]	; (8002740 <HAL_RCC_OscConfig+0x4ec>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002612:	f7ff fae5 	bl	8001be0 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261a:	f7ff fae1 	bl	8001be0 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e081      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262c:	4b43      	ldr	r3, [pc, #268]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f0      	bne.n	800261a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69da      	ldr	r2, [r3, #28]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	019b      	lsls	r3, r3, #6
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	085b      	lsrs	r3, r3, #1
 8002650:	3b01      	subs	r3, #1
 8002652:	041b      	lsls	r3, r3, #16
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	061b      	lsls	r3, r3, #24
 800265c:	4937      	ldr	r1, [pc, #220]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800265e:	4313      	orrs	r3, r2
 8002660:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002662:	4b37      	ldr	r3, [pc, #220]	; (8002740 <HAL_RCC_OscConfig+0x4ec>)
 8002664:	2201      	movs	r2, #1
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7ff faba 	bl	8001be0 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002670:	f7ff fab6 	bl	8001be0 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e056      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002682:	4b2e      	ldr	r3, [pc, #184]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x41c>
 800268e:	e04e      	b.n	800272e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002690:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <HAL_RCC_OscConfig+0x4ec>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002696:	f7ff faa3 	bl	8001be0 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800269e:	f7ff fa9f 	bl	8001be0 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e03f      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b0:	4b22      	ldr	r3, [pc, #136]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f0      	bne.n	800269e <HAL_RCC_OscConfig+0x44a>
 80026bc:	e037      	b.n	800272e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e032      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026ca:	4b1c      	ldr	r3, [pc, #112]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d028      	beq.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d121      	bne.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d11a      	bne.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026fa:	4013      	ands	r3, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002700:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002702:	4293      	cmp	r3, r2
 8002704:	d111      	bne.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	085b      	lsrs	r3, r3, #1
 8002712:	3b01      	subs	r3, #1
 8002714:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002716:	429a      	cmp	r2, r3
 8002718:	d107      	bne.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002726:	429a      	cmp	r2, r3
 8002728:	d001      	beq.n	800272e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40007000 	.word	0x40007000
 800273c:	40023800 	.word	0x40023800
 8002740:	42470060 	.word	0x42470060

08002744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0cc      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002758:	4b68      	ldr	r3, [pc, #416]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d90c      	bls.n	8002780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002766:	4b65      	ldr	r3, [pc, #404]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b63      	ldr	r3, [pc, #396]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0b8      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d020      	beq.n	80027ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002798:	4b59      	ldr	r3, [pc, #356]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a58      	ldr	r2, [pc, #352]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b0:	4b53      	ldr	r3, [pc, #332]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4a52      	ldr	r2, [pc, #328]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027bc:	4b50      	ldr	r3, [pc, #320]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	494d      	ldr	r1, [pc, #308]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d044      	beq.n	8002864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d107      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e2:	4b47      	ldr	r3, [pc, #284]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d119      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e07f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d003      	beq.n	8002802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d107      	bne.n	8002812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002802:	4b3f      	ldr	r3, [pc, #252]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e06f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002812:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e067      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002822:	4b37      	ldr	r3, [pc, #220]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f023 0203 	bic.w	r2, r3, #3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4934      	ldr	r1, [pc, #208]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002830:	4313      	orrs	r3, r2
 8002832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002834:	f7ff f9d4 	bl	8001be0 <HAL_GetTick>
 8002838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	e00a      	b.n	8002852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283c:	f7ff f9d0 	bl	8001be0 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	; 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e04f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002852:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 020c 	and.w	r2, r3, #12
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	429a      	cmp	r2, r3
 8002862:	d1eb      	bne.n	800283c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002864:	4b25      	ldr	r3, [pc, #148]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d20c      	bcs.n	800288c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002872:	4b22      	ldr	r3, [pc, #136]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287a:	4b20      	ldr	r3, [pc, #128]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d001      	beq.n	800288c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e032      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002898:	4b19      	ldr	r3, [pc, #100]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4916      	ldr	r1, [pc, #88]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028b6:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	490e      	ldr	r1, [pc, #56]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ca:	f000 f821 	bl	8002910 <HAL_RCC_GetSysClockFreq>
 80028ce:	4602      	mov	r2, r0
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	490a      	ldr	r1, [pc, #40]	; (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 80028dc:	5ccb      	ldrb	r3, [r1, r3]
 80028de:	fa22 f303 	lsr.w	r3, r2, r3
 80028e2:	4a09      	ldr	r2, [pc, #36]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff f934 	bl	8001b58 <HAL_InitTick>

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40023c00 	.word	0x40023c00
 8002900:	40023800 	.word	0x40023800
 8002904:	08007a50 	.word	0x08007a50
 8002908:	20000000 	.word	0x20000000
 800290c:	20000004 	.word	0x20000004

08002910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002910:	b5b0      	push	{r4, r5, r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002916:	2100      	movs	r1, #0
 8002918:	6079      	str	r1, [r7, #4]
 800291a:	2100      	movs	r1, #0
 800291c:	60f9      	str	r1, [r7, #12]
 800291e:	2100      	movs	r1, #0
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002922:	2100      	movs	r1, #0
 8002924:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002926:	4952      	ldr	r1, [pc, #328]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x160>)
 8002928:	6889      	ldr	r1, [r1, #8]
 800292a:	f001 010c 	and.w	r1, r1, #12
 800292e:	2908      	cmp	r1, #8
 8002930:	d00d      	beq.n	800294e <HAL_RCC_GetSysClockFreq+0x3e>
 8002932:	2908      	cmp	r1, #8
 8002934:	f200 8094 	bhi.w	8002a60 <HAL_RCC_GetSysClockFreq+0x150>
 8002938:	2900      	cmp	r1, #0
 800293a:	d002      	beq.n	8002942 <HAL_RCC_GetSysClockFreq+0x32>
 800293c:	2904      	cmp	r1, #4
 800293e:	d003      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0x38>
 8002940:	e08e      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002942:	4b4c      	ldr	r3, [pc, #304]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x164>)
 8002944:	60bb      	str	r3, [r7, #8]
       break;
 8002946:	e08e      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002948:	4b4b      	ldr	r3, [pc, #300]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x168>)
 800294a:	60bb      	str	r3, [r7, #8]
      break;
 800294c:	e08b      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800294e:	4948      	ldr	r1, [pc, #288]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x160>)
 8002950:	6849      	ldr	r1, [r1, #4]
 8002952:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002956:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002958:	4945      	ldr	r1, [pc, #276]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x160>)
 800295a:	6849      	ldr	r1, [r1, #4]
 800295c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002960:	2900      	cmp	r1, #0
 8002962:	d024      	beq.n	80029ae <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002964:	4942      	ldr	r1, [pc, #264]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x160>)
 8002966:	6849      	ldr	r1, [r1, #4]
 8002968:	0989      	lsrs	r1, r1, #6
 800296a:	4608      	mov	r0, r1
 800296c:	f04f 0100 	mov.w	r1, #0
 8002970:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002974:	f04f 0500 	mov.w	r5, #0
 8002978:	ea00 0204 	and.w	r2, r0, r4
 800297c:	ea01 0305 	and.w	r3, r1, r5
 8002980:	493d      	ldr	r1, [pc, #244]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x168>)
 8002982:	fb01 f003 	mul.w	r0, r1, r3
 8002986:	2100      	movs	r1, #0
 8002988:	fb01 f102 	mul.w	r1, r1, r2
 800298c:	1844      	adds	r4, r0, r1
 800298e:	493a      	ldr	r1, [pc, #232]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x168>)
 8002990:	fba2 0101 	umull	r0, r1, r2, r1
 8002994:	1863      	adds	r3, r4, r1
 8002996:	4619      	mov	r1, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	461a      	mov	r2, r3
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	f7fe f854 	bl	8000a4c <__aeabi_uldivmod>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4613      	mov	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	e04a      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ae:	4b30      	ldr	r3, [pc, #192]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x160>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	099b      	lsrs	r3, r3, #6
 80029b4:	461a      	mov	r2, r3
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029be:	f04f 0100 	mov.w	r1, #0
 80029c2:	ea02 0400 	and.w	r4, r2, r0
 80029c6:	ea03 0501 	and.w	r5, r3, r1
 80029ca:	4620      	mov	r0, r4
 80029cc:	4629      	mov	r1, r5
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	014b      	lsls	r3, r1, #5
 80029d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029dc:	0142      	lsls	r2, r0, #5
 80029de:	4610      	mov	r0, r2
 80029e0:	4619      	mov	r1, r3
 80029e2:	1b00      	subs	r0, r0, r4
 80029e4:	eb61 0105 	sbc.w	r1, r1, r5
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	f04f 0300 	mov.w	r3, #0
 80029f0:	018b      	lsls	r3, r1, #6
 80029f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029f6:	0182      	lsls	r2, r0, #6
 80029f8:	1a12      	subs	r2, r2, r0
 80029fa:	eb63 0301 	sbc.w	r3, r3, r1
 80029fe:	f04f 0000 	mov.w	r0, #0
 8002a02:	f04f 0100 	mov.w	r1, #0
 8002a06:	00d9      	lsls	r1, r3, #3
 8002a08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a0c:	00d0      	lsls	r0, r2, #3
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	1912      	adds	r2, r2, r4
 8002a14:	eb45 0303 	adc.w	r3, r5, r3
 8002a18:	f04f 0000 	mov.w	r0, #0
 8002a1c:	f04f 0100 	mov.w	r1, #0
 8002a20:	0299      	lsls	r1, r3, #10
 8002a22:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a26:	0290      	lsls	r0, r2, #10
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4619      	mov	r1, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	461a      	mov	r2, r3
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	f7fe f808 	bl	8000a4c <__aeabi_uldivmod>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4613      	mov	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a44:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	0c1b      	lsrs	r3, r3, #16
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	3301      	adds	r3, #1
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5c:	60bb      	str	r3, [r7, #8]
      break;
 8002a5e:	e002      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a60:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x164>)
 8002a62:	60bb      	str	r3, [r7, #8]
      break;
 8002a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a66:	68bb      	ldr	r3, [r7, #8]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a70:	40023800 	.word	0x40023800
 8002a74:	00f42400 	.word	0x00f42400
 8002a78:	017d7840 	.word	0x017d7840

08002a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e041      	b.n	8002b12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d106      	bne.n	8002aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7fe fe08 	bl	80016b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4610      	mov	r0, r2
 8002abc:	f000 fe34 	bl	8003728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e041      	b.n	8002bb0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d106      	bne.n	8002b46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7fe fec5 	bl	80018d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2202      	movs	r2, #2
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3304      	adds	r3, #4
 8002b56:	4619      	mov	r1, r3
 8002b58:	4610      	mov	r0, r2
 8002b5a:	f000 fde5 	bl	8003728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e041      	b.n	8002c4e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fe fe26 	bl	8001830 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	f000 fd96 	bl	8003728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d104      	bne.n	8002c76 <HAL_TIM_IC_Start_IT+0x1e>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	e013      	b.n	8002c9e <HAL_TIM_IC_Start_IT+0x46>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d104      	bne.n	8002c86 <HAL_TIM_IC_Start_IT+0x2e>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	e00b      	b.n	8002c9e <HAL_TIM_IC_Start_IT+0x46>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d104      	bne.n	8002c96 <HAL_TIM_IC_Start_IT+0x3e>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	e003      	b.n	8002c9e <HAL_TIM_IC_Start_IT+0x46>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d104      	bne.n	8002cb0 <HAL_TIM_IC_Start_IT+0x58>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	e013      	b.n	8002cd8 <HAL_TIM_IC_Start_IT+0x80>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d104      	bne.n	8002cc0 <HAL_TIM_IC_Start_IT+0x68>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	e00b      	b.n	8002cd8 <HAL_TIM_IC_Start_IT+0x80>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d104      	bne.n	8002cd0 <HAL_TIM_IC_Start_IT+0x78>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	e003      	b.n	8002cd8 <HAL_TIM_IC_Start_IT+0x80>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cda:	7bbb      	ldrb	r3, [r7, #14]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d102      	bne.n	8002ce6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ce0:	7b7b      	ldrb	r3, [r7, #13]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d001      	beq.n	8002cea <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e0cc      	b.n	8002e84 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d104      	bne.n	8002cfa <HAL_TIM_IC_Start_IT+0xa2>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cf8:	e013      	b.n	8002d22 <HAL_TIM_IC_Start_IT+0xca>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d104      	bne.n	8002d0a <HAL_TIM_IC_Start_IT+0xb2>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d08:	e00b      	b.n	8002d22 <HAL_TIM_IC_Start_IT+0xca>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d104      	bne.n	8002d1a <HAL_TIM_IC_Start_IT+0xc2>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d18:	e003      	b.n	8002d22 <HAL_TIM_IC_Start_IT+0xca>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d104      	bne.n	8002d32 <HAL_TIM_IC_Start_IT+0xda>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d30:	e013      	b.n	8002d5a <HAL_TIM_IC_Start_IT+0x102>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d104      	bne.n	8002d42 <HAL_TIM_IC_Start_IT+0xea>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d40:	e00b      	b.n	8002d5a <HAL_TIM_IC_Start_IT+0x102>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d104      	bne.n	8002d52 <HAL_TIM_IC_Start_IT+0xfa>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d50:	e003      	b.n	8002d5a <HAL_TIM_IC_Start_IT+0x102>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2202      	movs	r2, #2
 8002d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b0c      	cmp	r3, #12
 8002d5e:	d841      	bhi.n	8002de4 <HAL_TIM_IC_Start_IT+0x18c>
 8002d60:	a201      	add	r2, pc, #4	; (adr r2, 8002d68 <HAL_TIM_IC_Start_IT+0x110>)
 8002d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d66:	bf00      	nop
 8002d68:	08002d9d 	.word	0x08002d9d
 8002d6c:	08002de5 	.word	0x08002de5
 8002d70:	08002de5 	.word	0x08002de5
 8002d74:	08002de5 	.word	0x08002de5
 8002d78:	08002daf 	.word	0x08002daf
 8002d7c:	08002de5 	.word	0x08002de5
 8002d80:	08002de5 	.word	0x08002de5
 8002d84:	08002de5 	.word	0x08002de5
 8002d88:	08002dc1 	.word	0x08002dc1
 8002d8c:	08002de5 	.word	0x08002de5
 8002d90:	08002de5 	.word	0x08002de5
 8002d94:	08002de5 	.word	0x08002de5
 8002d98:	08002dd3 	.word	0x08002dd3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0202 	orr.w	r2, r2, #2
 8002daa:	60da      	str	r2, [r3, #12]
      break;
 8002dac:	e01d      	b.n	8002dea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0204 	orr.w	r2, r2, #4
 8002dbc:	60da      	str	r2, [r3, #12]
      break;
 8002dbe:	e014      	b.n	8002dea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0208 	orr.w	r2, r2, #8
 8002dce:	60da      	str	r2, [r3, #12]
      break;
 8002dd0:	e00b      	b.n	8002dea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f042 0210 	orr.w	r2, r2, #16
 8002de0:	60da      	str	r2, [r3, #12]
      break;
 8002de2:	e002      	b.n	8002dea <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	73fb      	strb	r3, [r7, #15]
      break;
 8002de8:	bf00      	nop
  }

  if (status == HAL_OK)
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d148      	bne.n	8002e82 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2201      	movs	r2, #1
 8002df6:	6839      	ldr	r1, [r7, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f001 f8a9 	bl	8003f50 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a22      	ldr	r2, [pc, #136]	; (8002e8c <HAL_TIM_IC_Start_IT+0x234>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d022      	beq.n	8002e4e <HAL_TIM_IC_Start_IT+0x1f6>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e10:	d01d      	beq.n	8002e4e <HAL_TIM_IC_Start_IT+0x1f6>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a1e      	ldr	r2, [pc, #120]	; (8002e90 <HAL_TIM_IC_Start_IT+0x238>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d018      	beq.n	8002e4e <HAL_TIM_IC_Start_IT+0x1f6>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1c      	ldr	r2, [pc, #112]	; (8002e94 <HAL_TIM_IC_Start_IT+0x23c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d013      	beq.n	8002e4e <HAL_TIM_IC_Start_IT+0x1f6>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1b      	ldr	r2, [pc, #108]	; (8002e98 <HAL_TIM_IC_Start_IT+0x240>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00e      	beq.n	8002e4e <HAL_TIM_IC_Start_IT+0x1f6>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a19      	ldr	r2, [pc, #100]	; (8002e9c <HAL_TIM_IC_Start_IT+0x244>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d009      	beq.n	8002e4e <HAL_TIM_IC_Start_IT+0x1f6>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a18      	ldr	r2, [pc, #96]	; (8002ea0 <HAL_TIM_IC_Start_IT+0x248>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d004      	beq.n	8002e4e <HAL_TIM_IC_Start_IT+0x1f6>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a16      	ldr	r2, [pc, #88]	; (8002ea4 <HAL_TIM_IC_Start_IT+0x24c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d111      	bne.n	8002e72 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b06      	cmp	r3, #6
 8002e5e:	d010      	beq.n	8002e82 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e70:	e007      	b.n	8002e82 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0201 	orr.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40010000 	.word	0x40010000
 8002e90:	40000400 	.word	0x40000400
 8002e94:	40000800 	.word	0x40000800
 8002e98:	40000c00 	.word	0x40000c00
 8002e9c:	40010400 	.word	0x40010400
 8002ea0:	40014000 	.word	0x40014000
 8002ea4:	40001800 	.word	0x40001800

08002ea8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e097      	b.n	8002fec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d106      	bne.n	8002ed6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7fe fc13 	bl	80016fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eec:	f023 0307 	bic.w	r3, r3, #7
 8002ef0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	4619      	mov	r1, r3
 8002efc:	4610      	mov	r0, r2
 8002efe:	f000 fc13 	bl	8003728 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f2a:	f023 0303 	bic.w	r3, r3, #3
 8002f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	021b      	lsls	r3, r3, #8
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002f48:	f023 030c 	bic.w	r3, r3, #12
 8002f4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	021b      	lsls	r3, r3, #8
 8002f64:	4313      	orrs	r3, r2
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	011a      	lsls	r2, r3, #4
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	031b      	lsls	r3, r3, #12
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002f86:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002f8e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b02      	cmp	r3, #2
 8003008:	d122      	bne.n	8003050 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b02      	cmp	r3, #2
 8003016:	d11b      	bne.n	8003050 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0202 	mvn.w	r2, #2
 8003020:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fd fe9e 	bl	8000d78 <HAL_TIM_IC_CaptureCallback>
 800303c:	e005      	b.n	800304a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fb54 	bl	80036ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 fb5b 	bl	8003700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b04      	cmp	r3, #4
 800305c:	d122      	bne.n	80030a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b04      	cmp	r3, #4
 800306a:	d11b      	bne.n	80030a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0204 	mvn.w	r2, #4
 8003074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2202      	movs	r2, #2
 800307a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7fd fe74 	bl	8000d78 <HAL_TIM_IC_CaptureCallback>
 8003090:	e005      	b.n	800309e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 fb2a 	bl	80036ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fb31 	bl	8003700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d122      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d11b      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0208 	mvn.w	r2, #8
 80030c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2204      	movs	r2, #4
 80030ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fd fe4a 	bl	8000d78 <HAL_TIM_IC_CaptureCallback>
 80030e4:	e005      	b.n	80030f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 fb00 	bl	80036ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fb07 	bl	8003700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	2b10      	cmp	r3, #16
 8003104:	d122      	bne.n	800314c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0310 	and.w	r3, r3, #16
 8003110:	2b10      	cmp	r3, #16
 8003112:	d11b      	bne.n	800314c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0210 	mvn.w	r2, #16
 800311c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2208      	movs	r2, #8
 8003122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7fd fe20 	bl	8000d78 <HAL_TIM_IC_CaptureCallback>
 8003138:	e005      	b.n	8003146 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 fad6 	bl	80036ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fadd 	bl	8003700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b01      	cmp	r3, #1
 8003158:	d10e      	bne.n	8003178 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b01      	cmp	r3, #1
 8003166:	d107      	bne.n	8003178 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0201 	mvn.w	r2, #1
 8003170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fab0 	bl	80036d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003182:	2b80      	cmp	r3, #128	; 0x80
 8003184:	d10e      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003190:	2b80      	cmp	r3, #128	; 0x80
 8003192:	d107      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800319c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 ffd4 	bl	800414c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ae:	2b40      	cmp	r3, #64	; 0x40
 80031b0:	d10e      	bne.n	80031d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031bc:	2b40      	cmp	r3, #64	; 0x40
 80031be:	d107      	bne.n	80031d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 faa2 	bl	8003714 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b20      	cmp	r3, #32
 80031dc:	d10e      	bne.n	80031fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f003 0320 	and.w	r3, r3, #32
 80031e8:	2b20      	cmp	r3, #32
 80031ea:	d107      	bne.n	80031fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f06f 0220 	mvn.w	r2, #32
 80031f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 ff9e 	bl	8004138 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031fc:	bf00      	nop
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_TIM_IC_ConfigChannel+0x1e>
 800321e:	2302      	movs	r3, #2
 8003220:	e088      	b.n	8003334 <HAL_TIM_IC_ConfigChannel+0x130>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d11b      	bne.n	8003268 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	6819      	ldr	r1, [r3, #0]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f000 fcc2 	bl	8003bc8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 020c 	bic.w	r2, r2, #12
 8003252:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6999      	ldr	r1, [r3, #24]
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	619a      	str	r2, [r3, #24]
 8003266:	e060      	b.n	800332a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b04      	cmp	r3, #4
 800326c:	d11c      	bne.n	80032a8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	6819      	ldr	r1, [r3, #0]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f000 fd46 	bl	8003d0e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	699a      	ldr	r2, [r3, #24]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003290:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6999      	ldr	r1, [r3, #24]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	021a      	lsls	r2, r3, #8
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	619a      	str	r2, [r3, #24]
 80032a6:	e040      	b.n	800332a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d11b      	bne.n	80032e6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	6819      	ldr	r1, [r3, #0]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f000 fd93 	bl	8003de8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	69da      	ldr	r2, [r3, #28]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 020c 	bic.w	r2, r2, #12
 80032d0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	69d9      	ldr	r1, [r3, #28]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	61da      	str	r2, [r3, #28]
 80032e4:	e021      	b.n	800332a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b0c      	cmp	r3, #12
 80032ea:	d11c      	bne.n	8003326 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6818      	ldr	r0, [r3, #0]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	6819      	ldr	r1, [r3, #0]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f000 fdb0 	bl	8003e60 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	69da      	ldr	r2, [r3, #28]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800330e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69d9      	ldr	r1, [r3, #28]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	021a      	lsls	r2, r3, #8
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	61da      	str	r2, [r3, #28]
 8003324:	e001      	b.n	800332a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003332:	7dfb      	ldrb	r3, [r7, #23]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003356:	2302      	movs	r3, #2
 8003358:	e0ae      	b.n	80034b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b0c      	cmp	r3, #12
 8003366:	f200 809f 	bhi.w	80034a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800336a:	a201      	add	r2, pc, #4	; (adr r2, 8003370 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800336c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003370:	080033a5 	.word	0x080033a5
 8003374:	080034a9 	.word	0x080034a9
 8003378:	080034a9 	.word	0x080034a9
 800337c:	080034a9 	.word	0x080034a9
 8003380:	080033e5 	.word	0x080033e5
 8003384:	080034a9 	.word	0x080034a9
 8003388:	080034a9 	.word	0x080034a9
 800338c:	080034a9 	.word	0x080034a9
 8003390:	08003427 	.word	0x08003427
 8003394:	080034a9 	.word	0x080034a9
 8003398:	080034a9 	.word	0x080034a9
 800339c:	080034a9 	.word	0x080034a9
 80033a0:	08003467 	.word	0x08003467
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68b9      	ldr	r1, [r7, #8]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fa5c 	bl	8003868 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699a      	ldr	r2, [r3, #24]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0208 	orr.w	r2, r2, #8
 80033be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699a      	ldr	r2, [r3, #24]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0204 	bic.w	r2, r2, #4
 80033ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6999      	ldr	r1, [r3, #24]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	619a      	str	r2, [r3, #24]
      break;
 80033e2:	e064      	b.n	80034ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 faac 	bl	8003948 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699a      	ldr	r2, [r3, #24]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699a      	ldr	r2, [r3, #24]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6999      	ldr	r1, [r3, #24]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	021a      	lsls	r2, r3, #8
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	619a      	str	r2, [r3, #24]
      break;
 8003424:	e043      	b.n	80034ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	4618      	mov	r0, r3
 800342e:	f000 fb01 	bl	8003a34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	69da      	ldr	r2, [r3, #28]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 0208 	orr.w	r2, r2, #8
 8003440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	69da      	ldr	r2, [r3, #28]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0204 	bic.w	r2, r2, #4
 8003450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	69d9      	ldr	r1, [r3, #28]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	61da      	str	r2, [r3, #28]
      break;
 8003464:	e023      	b.n	80034ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68b9      	ldr	r1, [r7, #8]
 800346c:	4618      	mov	r0, r3
 800346e:	f000 fb55 	bl	8003b1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69da      	ldr	r2, [r3, #28]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	69da      	ldr	r2, [r3, #28]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	69d9      	ldr	r1, [r3, #28]
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	021a      	lsls	r2, r3, #8
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	61da      	str	r2, [r3, #28]
      break;
 80034a6:	e002      	b.n	80034ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	75fb      	strb	r3, [r7, #23]
      break;
 80034ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_TIM_ConfigClockSource+0x1c>
 80034d8:	2302      	movs	r3, #2
 80034da:	e0b4      	b.n	8003646 <HAL_TIM_ConfigClockSource+0x186>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003502:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003514:	d03e      	beq.n	8003594 <HAL_TIM_ConfigClockSource+0xd4>
 8003516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800351a:	f200 8087 	bhi.w	800362c <HAL_TIM_ConfigClockSource+0x16c>
 800351e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003522:	f000 8086 	beq.w	8003632 <HAL_TIM_ConfigClockSource+0x172>
 8003526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800352a:	d87f      	bhi.n	800362c <HAL_TIM_ConfigClockSource+0x16c>
 800352c:	2b70      	cmp	r3, #112	; 0x70
 800352e:	d01a      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0xa6>
 8003530:	2b70      	cmp	r3, #112	; 0x70
 8003532:	d87b      	bhi.n	800362c <HAL_TIM_ConfigClockSource+0x16c>
 8003534:	2b60      	cmp	r3, #96	; 0x60
 8003536:	d050      	beq.n	80035da <HAL_TIM_ConfigClockSource+0x11a>
 8003538:	2b60      	cmp	r3, #96	; 0x60
 800353a:	d877      	bhi.n	800362c <HAL_TIM_ConfigClockSource+0x16c>
 800353c:	2b50      	cmp	r3, #80	; 0x50
 800353e:	d03c      	beq.n	80035ba <HAL_TIM_ConfigClockSource+0xfa>
 8003540:	2b50      	cmp	r3, #80	; 0x50
 8003542:	d873      	bhi.n	800362c <HAL_TIM_ConfigClockSource+0x16c>
 8003544:	2b40      	cmp	r3, #64	; 0x40
 8003546:	d058      	beq.n	80035fa <HAL_TIM_ConfigClockSource+0x13a>
 8003548:	2b40      	cmp	r3, #64	; 0x40
 800354a:	d86f      	bhi.n	800362c <HAL_TIM_ConfigClockSource+0x16c>
 800354c:	2b30      	cmp	r3, #48	; 0x30
 800354e:	d064      	beq.n	800361a <HAL_TIM_ConfigClockSource+0x15a>
 8003550:	2b30      	cmp	r3, #48	; 0x30
 8003552:	d86b      	bhi.n	800362c <HAL_TIM_ConfigClockSource+0x16c>
 8003554:	2b20      	cmp	r3, #32
 8003556:	d060      	beq.n	800361a <HAL_TIM_ConfigClockSource+0x15a>
 8003558:	2b20      	cmp	r3, #32
 800355a:	d867      	bhi.n	800362c <HAL_TIM_ConfigClockSource+0x16c>
 800355c:	2b00      	cmp	r3, #0
 800355e:	d05c      	beq.n	800361a <HAL_TIM_ConfigClockSource+0x15a>
 8003560:	2b10      	cmp	r3, #16
 8003562:	d05a      	beq.n	800361a <HAL_TIM_ConfigClockSource+0x15a>
 8003564:	e062      	b.n	800362c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	6899      	ldr	r1, [r3, #8]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f000 fccb 	bl	8003f10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003588:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	609a      	str	r2, [r3, #8]
      break;
 8003592:	e04f      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6818      	ldr	r0, [r3, #0]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	6899      	ldr	r1, [r3, #8]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f000 fcb4 	bl	8003f10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035b6:	609a      	str	r2, [r3, #8]
      break;
 80035b8:	e03c      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	6859      	ldr	r1, [r3, #4]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	461a      	mov	r2, r3
 80035c8:	f000 fb72 	bl	8003cb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2150      	movs	r1, #80	; 0x50
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 fc81 	bl	8003eda <TIM_ITRx_SetConfig>
      break;
 80035d8:	e02c      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	6859      	ldr	r1, [r3, #4]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	461a      	mov	r2, r3
 80035e8:	f000 fbce 	bl	8003d88 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2160      	movs	r1, #96	; 0x60
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fc71 	bl	8003eda <TIM_ITRx_SetConfig>
      break;
 80035f8:	e01c      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	6859      	ldr	r1, [r3, #4]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	461a      	mov	r2, r3
 8003608:	f000 fb52 	bl	8003cb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2140      	movs	r1, #64	; 0x40
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fc61 	bl	8003eda <TIM_ITRx_SetConfig>
      break;
 8003618:	e00c      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4619      	mov	r1, r3
 8003624:	4610      	mov	r0, r2
 8003626:	f000 fc58 	bl	8003eda <TIM_ITRx_SetConfig>
      break;
 800362a:	e003      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
      break;
 8003630:	e000      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003632:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003644:	7bfb      	ldrb	r3, [r7, #15]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b0c      	cmp	r3, #12
 8003662:	d831      	bhi.n	80036c8 <HAL_TIM_ReadCapturedValue+0x78>
 8003664:	a201      	add	r2, pc, #4	; (adr r2, 800366c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366a:	bf00      	nop
 800366c:	080036a1 	.word	0x080036a1
 8003670:	080036c9 	.word	0x080036c9
 8003674:	080036c9 	.word	0x080036c9
 8003678:	080036c9 	.word	0x080036c9
 800367c:	080036ab 	.word	0x080036ab
 8003680:	080036c9 	.word	0x080036c9
 8003684:	080036c9 	.word	0x080036c9
 8003688:	080036c9 	.word	0x080036c9
 800368c:	080036b5 	.word	0x080036b5
 8003690:	080036c9 	.word	0x080036c9
 8003694:	080036c9 	.word	0x080036c9
 8003698:	080036c9 	.word	0x080036c9
 800369c:	080036bf 	.word	0x080036bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a6:	60fb      	str	r3, [r7, #12]

      break;
 80036a8:	e00f      	b.n	80036ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b0:	60fb      	str	r3, [r7, #12]

      break;
 80036b2:	e00a      	b.n	80036ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ba:	60fb      	str	r3, [r7, #12]

      break;
 80036bc:	e005      	b.n	80036ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	60fb      	str	r3, [r7, #12]

      break;
 80036c6:	e000      	b.n	80036ca <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80036c8:	bf00      	nop
  }

  return tmpreg;
 80036ca:	68fb      	ldr	r3, [r7, #12]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a40      	ldr	r2, [pc, #256]	; (800383c <TIM_Base_SetConfig+0x114>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d013      	beq.n	8003768 <TIM_Base_SetConfig+0x40>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003746:	d00f      	beq.n	8003768 <TIM_Base_SetConfig+0x40>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a3d      	ldr	r2, [pc, #244]	; (8003840 <TIM_Base_SetConfig+0x118>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00b      	beq.n	8003768 <TIM_Base_SetConfig+0x40>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a3c      	ldr	r2, [pc, #240]	; (8003844 <TIM_Base_SetConfig+0x11c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d007      	beq.n	8003768 <TIM_Base_SetConfig+0x40>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a3b      	ldr	r2, [pc, #236]	; (8003848 <TIM_Base_SetConfig+0x120>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d003      	beq.n	8003768 <TIM_Base_SetConfig+0x40>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a3a      	ldr	r2, [pc, #232]	; (800384c <TIM_Base_SetConfig+0x124>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d108      	bne.n	800377a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a2f      	ldr	r2, [pc, #188]	; (800383c <TIM_Base_SetConfig+0x114>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d02b      	beq.n	80037da <TIM_Base_SetConfig+0xb2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003788:	d027      	beq.n	80037da <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a2c      	ldr	r2, [pc, #176]	; (8003840 <TIM_Base_SetConfig+0x118>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d023      	beq.n	80037da <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a2b      	ldr	r2, [pc, #172]	; (8003844 <TIM_Base_SetConfig+0x11c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d01f      	beq.n	80037da <TIM_Base_SetConfig+0xb2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a2a      	ldr	r2, [pc, #168]	; (8003848 <TIM_Base_SetConfig+0x120>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d01b      	beq.n	80037da <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a29      	ldr	r2, [pc, #164]	; (800384c <TIM_Base_SetConfig+0x124>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d017      	beq.n	80037da <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a28      	ldr	r2, [pc, #160]	; (8003850 <TIM_Base_SetConfig+0x128>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d013      	beq.n	80037da <TIM_Base_SetConfig+0xb2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a27      	ldr	r2, [pc, #156]	; (8003854 <TIM_Base_SetConfig+0x12c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00f      	beq.n	80037da <TIM_Base_SetConfig+0xb2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a26      	ldr	r2, [pc, #152]	; (8003858 <TIM_Base_SetConfig+0x130>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00b      	beq.n	80037da <TIM_Base_SetConfig+0xb2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a25      	ldr	r2, [pc, #148]	; (800385c <TIM_Base_SetConfig+0x134>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d007      	beq.n	80037da <TIM_Base_SetConfig+0xb2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a24      	ldr	r2, [pc, #144]	; (8003860 <TIM_Base_SetConfig+0x138>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d003      	beq.n	80037da <TIM_Base_SetConfig+0xb2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a23      	ldr	r2, [pc, #140]	; (8003864 <TIM_Base_SetConfig+0x13c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d108      	bne.n	80037ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a0a      	ldr	r2, [pc, #40]	; (800383c <TIM_Base_SetConfig+0x114>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d003      	beq.n	8003820 <TIM_Base_SetConfig+0xf8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a0c      	ldr	r2, [pc, #48]	; (800384c <TIM_Base_SetConfig+0x124>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d103      	bne.n	8003828 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	615a      	str	r2, [r3, #20]
}
 800382e:	bf00      	nop
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40010000 	.word	0x40010000
 8003840:	40000400 	.word	0x40000400
 8003844:	40000800 	.word	0x40000800
 8003848:	40000c00 	.word	0x40000c00
 800384c:	40010400 	.word	0x40010400
 8003850:	40014000 	.word	0x40014000
 8003854:	40014400 	.word	0x40014400
 8003858:	40014800 	.word	0x40014800
 800385c:	40001800 	.word	0x40001800
 8003860:	40001c00 	.word	0x40001c00
 8003864:	40002000 	.word	0x40002000

08003868 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003868:	b480      	push	{r7}
 800386a:	b087      	sub	sp, #28
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	f023 0201 	bic.w	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0303 	bic.w	r3, r3, #3
 800389e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f023 0302 	bic.w	r3, r3, #2
 80038b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a20      	ldr	r2, [pc, #128]	; (8003940 <TIM_OC1_SetConfig+0xd8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d003      	beq.n	80038cc <TIM_OC1_SetConfig+0x64>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a1f      	ldr	r2, [pc, #124]	; (8003944 <TIM_OC1_SetConfig+0xdc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d10c      	bne.n	80038e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f023 0308 	bic.w	r3, r3, #8
 80038d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	4313      	orrs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f023 0304 	bic.w	r3, r3, #4
 80038e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a15      	ldr	r2, [pc, #84]	; (8003940 <TIM_OC1_SetConfig+0xd8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d003      	beq.n	80038f6 <TIM_OC1_SetConfig+0x8e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a14      	ldr	r2, [pc, #80]	; (8003944 <TIM_OC1_SetConfig+0xdc>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d111      	bne.n	800391a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	621a      	str	r2, [r3, #32]
}
 8003934:	bf00      	nop
 8003936:	371c      	adds	r7, #28
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	40010000 	.word	0x40010000
 8003944:	40010400 	.word	0x40010400

08003948 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003948:	b480      	push	{r7}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	f023 0210 	bic.w	r2, r3, #16
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800397e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	021b      	lsls	r3, r3, #8
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4313      	orrs	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f023 0320 	bic.w	r3, r3, #32
 8003992:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a22      	ldr	r2, [pc, #136]	; (8003a2c <TIM_OC2_SetConfig+0xe4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d003      	beq.n	80039b0 <TIM_OC2_SetConfig+0x68>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a21      	ldr	r2, [pc, #132]	; (8003a30 <TIM_OC2_SetConfig+0xe8>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d10d      	bne.n	80039cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a17      	ldr	r2, [pc, #92]	; (8003a2c <TIM_OC2_SetConfig+0xe4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d003      	beq.n	80039dc <TIM_OC2_SetConfig+0x94>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a16      	ldr	r2, [pc, #88]	; (8003a30 <TIM_OC2_SetConfig+0xe8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d113      	bne.n	8003a04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	621a      	str	r2, [r3, #32]
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40010000 	.word	0x40010000
 8003a30:	40010400 	.word	0x40010400

08003a34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0303 	bic.w	r3, r3, #3
 8003a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	021b      	lsls	r3, r3, #8
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a21      	ldr	r2, [pc, #132]	; (8003b14 <TIM_OC3_SetConfig+0xe0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d003      	beq.n	8003a9a <TIM_OC3_SetConfig+0x66>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a20      	ldr	r2, [pc, #128]	; (8003b18 <TIM_OC3_SetConfig+0xe4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d10d      	bne.n	8003ab6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	021b      	lsls	r3, r3, #8
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a16      	ldr	r2, [pc, #88]	; (8003b14 <TIM_OC3_SetConfig+0xe0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d003      	beq.n	8003ac6 <TIM_OC3_SetConfig+0x92>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a15      	ldr	r2, [pc, #84]	; (8003b18 <TIM_OC3_SetConfig+0xe4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d113      	bne.n	8003aee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	621a      	str	r2, [r3, #32]
}
 8003b08:	bf00      	nop
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	40010000 	.word	0x40010000
 8003b18:	40010400 	.word	0x40010400

08003b1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	021b      	lsls	r3, r3, #8
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	031b      	lsls	r3, r3, #12
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a12      	ldr	r2, [pc, #72]	; (8003bc0 <TIM_OC4_SetConfig+0xa4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d003      	beq.n	8003b84 <TIM_OC4_SetConfig+0x68>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a11      	ldr	r2, [pc, #68]	; (8003bc4 <TIM_OC4_SetConfig+0xa8>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d109      	bne.n	8003b98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	019b      	lsls	r3, r3, #6
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	621a      	str	r2, [r3, #32]
}
 8003bb2:	bf00      	nop
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40010000 	.word	0x40010000
 8003bc4:	40010400 	.word	0x40010400

08003bc8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	f023 0201 	bic.w	r2, r3, #1
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4a28      	ldr	r2, [pc, #160]	; (8003c94 <TIM_TI1_SetConfig+0xcc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d01b      	beq.n	8003c2e <TIM_TI1_SetConfig+0x66>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bfc:	d017      	beq.n	8003c2e <TIM_TI1_SetConfig+0x66>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4a25      	ldr	r2, [pc, #148]	; (8003c98 <TIM_TI1_SetConfig+0xd0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <TIM_TI1_SetConfig+0x66>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4a24      	ldr	r2, [pc, #144]	; (8003c9c <TIM_TI1_SetConfig+0xd4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00f      	beq.n	8003c2e <TIM_TI1_SetConfig+0x66>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4a23      	ldr	r2, [pc, #140]	; (8003ca0 <TIM_TI1_SetConfig+0xd8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00b      	beq.n	8003c2e <TIM_TI1_SetConfig+0x66>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4a22      	ldr	r2, [pc, #136]	; (8003ca4 <TIM_TI1_SetConfig+0xdc>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d007      	beq.n	8003c2e <TIM_TI1_SetConfig+0x66>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4a21      	ldr	r2, [pc, #132]	; (8003ca8 <TIM_TI1_SetConfig+0xe0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d003      	beq.n	8003c2e <TIM_TI1_SetConfig+0x66>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4a20      	ldr	r2, [pc, #128]	; (8003cac <TIM_TI1_SetConfig+0xe4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d101      	bne.n	8003c32 <TIM_TI1_SetConfig+0x6a>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <TIM_TI1_SetConfig+0x6c>
 8003c32:	2300      	movs	r3, #0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d008      	beq.n	8003c4a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f023 0303 	bic.w	r3, r3, #3
 8003c3e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	e003      	b.n	8003c52 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f023 030a 	bic.w	r3, r3, #10
 8003c6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f003 030a 	and.w	r3, r3, #10
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	621a      	str	r2, [r3, #32]
}
 8003c86:	bf00      	nop
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40010000 	.word	0x40010000
 8003c98:	40000400 	.word	0x40000400
 8003c9c:	40000800 	.word	0x40000800
 8003ca0:	40000c00 	.word	0x40000c00
 8003ca4:	40010400 	.word	0x40010400
 8003ca8:	40014000 	.word	0x40014000
 8003cac:	40001800 	.word	0x40001800

08003cb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	f023 0201 	bic.w	r2, r3, #1
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f023 030a 	bic.w	r3, r3, #10
 8003cec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	621a      	str	r2, [r3, #32]
}
 8003d02:	bf00      	nop
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b087      	sub	sp, #28
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
 8003d1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	f023 0210 	bic.w	r2, r3, #16
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	021b      	lsls	r3, r3, #8
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	031b      	lsls	r3, r3, #12
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d60:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	621a      	str	r2, [r3, #32]
}
 8003d7c:	bf00      	nop
 8003d7e:	371c      	adds	r7, #28
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	f023 0210 	bic.w	r2, r3, #16
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003db2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	031b      	lsls	r3, r3, #12
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	621a      	str	r2, [r3, #32]
}
 8003ddc:	bf00      	nop
 8003dde:	371c      	adds	r7, #28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f023 0303 	bic.w	r3, r3, #3
 8003e14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003e38:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	021b      	lsls	r3, r3, #8
 8003e3e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	621a      	str	r2, [r3, #32]
}
 8003e54:	bf00      	nop
 8003e56:	371c      	adds	r7, #28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	021b      	lsls	r3, r3, #8
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e9e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	031b      	lsls	r3, r3, #12
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003eb2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	031b      	lsls	r3, r3, #12
 8003eb8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	621a      	str	r2, [r3, #32]
}
 8003ece:	bf00      	nop
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b085      	sub	sp, #20
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f043 0307 	orr.w	r3, r3, #7
 8003efc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	609a      	str	r2, [r3, #8]
}
 8003f04:	bf00      	nop
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	021a      	lsls	r2, r3, #8
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	609a      	str	r2, [r3, #8]
}
 8003f44:	bf00      	nop
 8003f46:	371c      	adds	r7, #28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f003 031f 	and.w	r3, r3, #31
 8003f62:	2201      	movs	r2, #1
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a1a      	ldr	r2, [r3, #32]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	43db      	mvns	r3, r3
 8003f72:	401a      	ands	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a1a      	ldr	r2, [r3, #32]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f003 031f 	and.w	r3, r3, #31
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	fa01 f303 	lsl.w	r3, r1, r3
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	621a      	str	r2, [r3, #32]
}
 8003f8e:	bf00      	nop
 8003f90:	371c      	adds	r7, #28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
	...

08003f9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e05a      	b.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a21      	ldr	r2, [pc, #132]	; (8004078 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d022      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004000:	d01d      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a1d      	ldr	r2, [pc, #116]	; (800407c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d018      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a1b      	ldr	r2, [pc, #108]	; (8004080 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d013      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a1a      	ldr	r2, [pc, #104]	; (8004084 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00e      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a18      	ldr	r2, [pc, #96]	; (8004088 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d009      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a17      	ldr	r2, [pc, #92]	; (800408c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d004      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a15      	ldr	r2, [pc, #84]	; (8004090 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d10c      	bne.n	8004058 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004044:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	4313      	orrs	r3, r2
 800404e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40010000 	.word	0x40010000
 800407c:	40000400 	.word	0x40000400
 8004080:	40000800 	.word	0x40000800
 8004084:	40000c00 	.word	0x40000c00
 8004088:	40010400 	.word	0x40010400
 800408c:	40014000 	.word	0x40014000
 8004090:	40001800 	.word	0x40001800

08004094 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d101      	bne.n	80040b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e03d      	b.n	800412c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	4313      	orrs	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	4313      	orrs	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <__NVIC_SetPriority>:
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	4603      	mov	r3, r0
 8004168:	6039      	str	r1, [r7, #0]
 800416a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800416c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004170:	2b00      	cmp	r3, #0
 8004172:	db0a      	blt.n	800418a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	b2da      	uxtb	r2, r3
 8004178:	490c      	ldr	r1, [pc, #48]	; (80041ac <__NVIC_SetPriority+0x4c>)
 800417a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800417e:	0112      	lsls	r2, r2, #4
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	440b      	add	r3, r1
 8004184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004188:	e00a      	b.n	80041a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	b2da      	uxtb	r2, r3
 800418e:	4908      	ldr	r1, [pc, #32]	; (80041b0 <__NVIC_SetPriority+0x50>)
 8004190:	79fb      	ldrb	r3, [r7, #7]
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	3b04      	subs	r3, #4
 8004198:	0112      	lsls	r2, r2, #4
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	440b      	add	r3, r1
 800419e:	761a      	strb	r2, [r3, #24]
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	e000e100 	.word	0xe000e100
 80041b0:	e000ed00 	.word	0xe000ed00

080041b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80041b8:	2100      	movs	r1, #0
 80041ba:	f06f 0004 	mvn.w	r0, #4
 80041be:	f7ff ffcf 	bl	8004160 <__NVIC_SetPriority>
#endif
}
 80041c2:	bf00      	nop
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041ce:	f3ef 8305 	mrs	r3, IPSR
 80041d2:	603b      	str	r3, [r7, #0]
  return(result);
 80041d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80041da:	f06f 0305 	mvn.w	r3, #5
 80041de:	607b      	str	r3, [r7, #4]
 80041e0:	e00c      	b.n	80041fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80041e2:	4b0a      	ldr	r3, [pc, #40]	; (800420c <osKernelInitialize+0x44>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d105      	bne.n	80041f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80041ea:	4b08      	ldr	r3, [pc, #32]	; (800420c <osKernelInitialize+0x44>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	607b      	str	r3, [r7, #4]
 80041f4:	e002      	b.n	80041fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80041f6:	f04f 33ff 	mov.w	r3, #4294967295
 80041fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80041fc:	687b      	ldr	r3, [r7, #4]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	200000a8 	.word	0x200000a8

08004210 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004216:	f3ef 8305 	mrs	r3, IPSR
 800421a:	603b      	str	r3, [r7, #0]
  return(result);
 800421c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004222:	f06f 0305 	mvn.w	r3, #5
 8004226:	607b      	str	r3, [r7, #4]
 8004228:	e010      	b.n	800424c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800422a:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <osKernelStart+0x48>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d109      	bne.n	8004246 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004232:	f7ff ffbf 	bl	80041b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004236:	4b08      	ldr	r3, [pc, #32]	; (8004258 <osKernelStart+0x48>)
 8004238:	2202      	movs	r2, #2
 800423a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800423c:	f001 f866 	bl	800530c <vTaskStartScheduler>
      stat = osOK;
 8004240:	2300      	movs	r3, #0
 8004242:	607b      	str	r3, [r7, #4]
 8004244:	e002      	b.n	800424c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004246:	f04f 33ff 	mov.w	r3, #4294967295
 800424a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800424c:	687b      	ldr	r3, [r7, #4]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	200000a8 	.word	0x200000a8

0800425c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800425c:	b580      	push	{r7, lr}
 800425e:	b08e      	sub	sp, #56	; 0x38
 8004260:	af04      	add	r7, sp, #16
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004268:	2300      	movs	r3, #0
 800426a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800426c:	f3ef 8305 	mrs	r3, IPSR
 8004270:	617b      	str	r3, [r7, #20]
  return(result);
 8004272:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004274:	2b00      	cmp	r3, #0
 8004276:	d17e      	bne.n	8004376 <osThreadNew+0x11a>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d07b      	beq.n	8004376 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800427e:	2380      	movs	r3, #128	; 0x80
 8004280:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004282:	2318      	movs	r3, #24
 8004284:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004286:	2300      	movs	r3, #0
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800428a:	f04f 33ff 	mov.w	r3, #4294967295
 800428e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d045      	beq.n	8004322 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <osThreadNew+0x48>
        name = attr->name;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <osThreadNew+0x6e>
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	2b38      	cmp	r3, #56	; 0x38
 80042bc:	d805      	bhi.n	80042ca <osThreadNew+0x6e>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <osThreadNew+0x72>
        return (NULL);
 80042ca:	2300      	movs	r3, #0
 80042cc:	e054      	b.n	8004378 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	089b      	lsrs	r3, r3, #2
 80042dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00e      	beq.n	8004304 <osThreadNew+0xa8>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	2b5b      	cmp	r3, #91	; 0x5b
 80042ec:	d90a      	bls.n	8004304 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d006      	beq.n	8004304 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <osThreadNew+0xa8>
        mem = 1;
 80042fe:	2301      	movs	r3, #1
 8004300:	61bb      	str	r3, [r7, #24]
 8004302:	e010      	b.n	8004326 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10c      	bne.n	8004326 <osThreadNew+0xca>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d108      	bne.n	8004326 <osThreadNew+0xca>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d104      	bne.n	8004326 <osThreadNew+0xca>
          mem = 0;
 800431c:	2300      	movs	r3, #0
 800431e:	61bb      	str	r3, [r7, #24]
 8004320:	e001      	b.n	8004326 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004322:	2300      	movs	r3, #0
 8004324:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d110      	bne.n	800434e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004334:	9202      	str	r2, [sp, #8]
 8004336:	9301      	str	r3, [sp, #4]
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	6a3a      	ldr	r2, [r7, #32]
 8004340:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 fe0c 	bl	8004f60 <xTaskCreateStatic>
 8004348:	4603      	mov	r3, r0
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	e013      	b.n	8004376 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d110      	bne.n	8004376 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	b29a      	uxth	r2, r3
 8004358:	f107 0310 	add.w	r3, r7, #16
 800435c:	9301      	str	r3, [sp, #4]
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 fe57 	bl	800501a <xTaskCreate>
 800436c:	4603      	mov	r3, r0
 800436e:	2b01      	cmp	r3, #1
 8004370:	d001      	beq.n	8004376 <osThreadNew+0x11a>
            hTask = NULL;
 8004372:	2300      	movs	r3, #0
 8004374:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004376:	693b      	ldr	r3, [r7, #16]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3728      	adds	r7, #40	; 0x28
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004388:	f3ef 8305 	mrs	r3, IPSR
 800438c:	60bb      	str	r3, [r7, #8]
  return(result);
 800438e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <osDelay+0x1c>
    stat = osErrorISR;
 8004394:	f06f 0305 	mvn.w	r3, #5
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	e007      	b.n	80043ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800439c:	2300      	movs	r3, #0
 800439e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 ff7c 	bl	80052a4 <vTaskDelay>
    }
  }

  return (stat);
 80043ac:	68fb      	ldr	r3, [r7, #12]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4a07      	ldr	r2, [pc, #28]	; (80043e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80043c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	4a06      	ldr	r2, [pc, #24]	; (80043e8 <vApplicationGetIdleTaskMemory+0x30>)
 80043ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2280      	movs	r2, #128	; 0x80
 80043d4:	601a      	str	r2, [r3, #0]
}
 80043d6:	bf00      	nop
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	200000ac 	.word	0x200000ac
 80043e8:	20000108 	.word	0x20000108

080043ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4a07      	ldr	r2, [pc, #28]	; (8004418 <vApplicationGetTimerTaskMemory+0x2c>)
 80043fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	4a06      	ldr	r2, [pc, #24]	; (800441c <vApplicationGetTimerTaskMemory+0x30>)
 8004402:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f44f 7280 	mov.w	r2, #256	; 0x100
 800440a:	601a      	str	r2, [r3, #0]
}
 800440c:	bf00      	nop
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	20000308 	.word	0x20000308
 800441c:	20000364 	.word	0x20000364

08004420 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f103 0208 	add.w	r2, r3, #8
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f04f 32ff 	mov.w	r2, #4294967295
 8004438:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f103 0208 	add.w	r2, r3, #8
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f103 0208 	add.w	r2, r3, #8
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800447a:	b480      	push	{r7}
 800447c:	b085      	sub	sp, #20
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	601a      	str	r2, [r3, #0]
}
 80044b6:	bf00      	nop
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044c2:	b480      	push	{r7}
 80044c4:	b085      	sub	sp, #20
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d8:	d103      	bne.n	80044e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	e00c      	b.n	80044fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	3308      	adds	r3, #8
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	e002      	b.n	80044f0 <vListInsert+0x2e>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d2f6      	bcs.n	80044ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	601a      	str	r2, [r3, #0]
}
 8004528:	bf00      	nop
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6892      	ldr	r2, [r2, #8]
 800454a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6852      	ldr	r2, [r2, #4]
 8004554:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	429a      	cmp	r2, r3
 800455e:	d103      	bne.n	8004568 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	1e5a      	subs	r2, r3, #1
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800459c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80045ae:	bf00      	nop
 80045b0:	e7fe      	b.n	80045b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80045b2:	f002 f84f 	bl	8006654 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045be:	68f9      	ldr	r1, [r7, #12]
 80045c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80045c2:	fb01 f303 	mul.w	r3, r1, r3
 80045c6:	441a      	add	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e2:	3b01      	subs	r3, #1
 80045e4:	68f9      	ldr	r1, [r7, #12]
 80045e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80045e8:	fb01 f303 	mul.w	r3, r1, r3
 80045ec:	441a      	add	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	22ff      	movs	r2, #255	; 0xff
 80045f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	22ff      	movs	r2, #255	; 0xff
 80045fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d114      	bne.n	8004632 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01a      	beq.n	8004646 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	3310      	adds	r3, #16
 8004614:	4618      	mov	r0, r3
 8004616:	f001 f903 	bl	8005820 <xTaskRemoveFromEventList>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d012      	beq.n	8004646 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004620:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <xQueueGenericReset+0xcc>)
 8004622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	e009      	b.n	8004646 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	3310      	adds	r3, #16
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff fef2 	bl	8004420 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	3324      	adds	r3, #36	; 0x24
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff feed 	bl	8004420 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004646:	f002 f835 	bl	80066b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800464a:	2301      	movs	r3, #1
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	e000ed04 	.word	0xe000ed04

08004658 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08e      	sub	sp, #56	; 0x38
 800465c:	af02      	add	r7, sp, #8
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10a      	bne.n	8004682 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800467e:	bf00      	nop
 8004680:	e7fe      	b.n	8004680 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10a      	bne.n	800469e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
}
 800469a:	bf00      	nop
 800469c:	e7fe      	b.n	800469c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <xQueueGenericCreateStatic+0x52>
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <xQueueGenericCreateStatic+0x56>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <xQueueGenericCreateStatic+0x58>
 80046ae:	2300      	movs	r3, #0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10a      	bne.n	80046ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	623b      	str	r3, [r7, #32]
}
 80046c6:	bf00      	nop
 80046c8:	e7fe      	b.n	80046c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d102      	bne.n	80046d6 <xQueueGenericCreateStatic+0x7e>
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <xQueueGenericCreateStatic+0x82>
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <xQueueGenericCreateStatic+0x84>
 80046da:	2300      	movs	r3, #0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10a      	bne.n	80046f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	61fb      	str	r3, [r7, #28]
}
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80046f6:	2350      	movs	r3, #80	; 0x50
 80046f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b50      	cmp	r3, #80	; 0x50
 80046fe:	d00a      	beq.n	8004716 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	61bb      	str	r3, [r7, #24]
}
 8004712:	bf00      	nop
 8004714:	e7fe      	b.n	8004714 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004716:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800471c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00d      	beq.n	800473e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800472a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800472e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	4613      	mov	r3, r2
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	68b9      	ldr	r1, [r7, #8]
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 f805 	bl	8004748 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800473e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004740:	4618      	mov	r0, r3
 8004742:	3730      	adds	r7, #48	; 0x30
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
 8004754:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d103      	bne.n	8004764 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	e002      	b.n	800476a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004776:	2101      	movs	r1, #1
 8004778:	69b8      	ldr	r0, [r7, #24]
 800477a:	f7ff ff05 	bl	8004588 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	78fa      	ldrb	r2, [r7, #3]
 8004782:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004786:	bf00      	nop
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
	...

08004790 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08e      	sub	sp, #56	; 0x38
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800479e:	2300      	movs	r3, #0
 80047a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10a      	bne.n	80047c2 <xQueueGenericSend+0x32>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80047be:	bf00      	nop
 80047c0:	e7fe      	b.n	80047c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d103      	bne.n	80047d0 <xQueueGenericSend+0x40>
 80047c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <xQueueGenericSend+0x44>
 80047d0:	2301      	movs	r3, #1
 80047d2:	e000      	b.n	80047d6 <xQueueGenericSend+0x46>
 80047d4:	2300      	movs	r3, #0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10a      	bne.n	80047f0 <xQueueGenericSend+0x60>
	__asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047ec:	bf00      	nop
 80047ee:	e7fe      	b.n	80047ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d103      	bne.n	80047fe <xQueueGenericSend+0x6e>
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <xQueueGenericSend+0x72>
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <xQueueGenericSend+0x74>
 8004802:	2300      	movs	r3, #0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10a      	bne.n	800481e <xQueueGenericSend+0x8e>
	__asm volatile
 8004808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480c:	f383 8811 	msr	BASEPRI, r3
 8004810:	f3bf 8f6f 	isb	sy
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	623b      	str	r3, [r7, #32]
}
 800481a:	bf00      	nop
 800481c:	e7fe      	b.n	800481c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800481e:	f001 f9bd 	bl	8005b9c <xTaskGetSchedulerState>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d102      	bne.n	800482e <xQueueGenericSend+0x9e>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <xQueueGenericSend+0xa2>
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <xQueueGenericSend+0xa4>
 8004832:	2300      	movs	r3, #0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <xQueueGenericSend+0xbe>
	__asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	61fb      	str	r3, [r7, #28]
}
 800484a:	bf00      	nop
 800484c:	e7fe      	b.n	800484c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800484e:	f001 ff01 	bl	8006654 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485a:	429a      	cmp	r2, r3
 800485c:	d302      	bcc.n	8004864 <xQueueGenericSend+0xd4>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b02      	cmp	r3, #2
 8004862:	d129      	bne.n	80048b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	68b9      	ldr	r1, [r7, #8]
 8004868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800486a:	f000 fa0b 	bl	8004c84 <prvCopyDataToQueue>
 800486e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	2b00      	cmp	r3, #0
 8004876:	d010      	beq.n	800489a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487a:	3324      	adds	r3, #36	; 0x24
 800487c:	4618      	mov	r0, r3
 800487e:	f000 ffcf 	bl	8005820 <xTaskRemoveFromEventList>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d013      	beq.n	80048b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004888:	4b3f      	ldr	r3, [pc, #252]	; (8004988 <xQueueGenericSend+0x1f8>)
 800488a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	e00a      	b.n	80048b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489c:	2b00      	cmp	r3, #0
 800489e:	d007      	beq.n	80048b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80048a0:	4b39      	ldr	r3, [pc, #228]	; (8004988 <xQueueGenericSend+0x1f8>)
 80048a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80048b0:	f001 ff00 	bl	80066b4 <vPortExitCritical>
				return pdPASS;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e063      	b.n	8004980 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d103      	bne.n	80048c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048be:	f001 fef9 	bl	80066b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80048c2:	2300      	movs	r3, #0
 80048c4:	e05c      	b.n	8004980 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d106      	bne.n	80048da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048cc:	f107 0314 	add.w	r3, r7, #20
 80048d0:	4618      	mov	r0, r3
 80048d2:	f001 f809 	bl	80058e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048d6:	2301      	movs	r3, #1
 80048d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048da:	f001 feeb 	bl	80066b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048de:	f000 fd7b 	bl	80053d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048e2:	f001 feb7 	bl	8006654 <vPortEnterCritical>
 80048e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048ec:	b25b      	sxtb	r3, r3
 80048ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f2:	d103      	bne.n	80048fc <xQueueGenericSend+0x16c>
 80048f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004902:	b25b      	sxtb	r3, r3
 8004904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004908:	d103      	bne.n	8004912 <xQueueGenericSend+0x182>
 800490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004912:	f001 fecf 	bl	80066b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004916:	1d3a      	adds	r2, r7, #4
 8004918:	f107 0314 	add.w	r3, r7, #20
 800491c:	4611      	mov	r1, r2
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fff8 	bl	8005914 <xTaskCheckForTimeOut>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d124      	bne.n	8004974 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800492a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800492c:	f000 faa2 	bl	8004e74 <prvIsQueueFull>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d018      	beq.n	8004968 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004938:	3310      	adds	r3, #16
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	4611      	mov	r1, r2
 800493e:	4618      	mov	r0, r3
 8004940:	f000 ff1e 	bl	8005780 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004946:	f000 fa2d 	bl	8004da4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800494a:	f000 fd53 	bl	80053f4 <xTaskResumeAll>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	f47f af7c 	bne.w	800484e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004956:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <xQueueGenericSend+0x1f8>)
 8004958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	e772      	b.n	800484e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800496a:	f000 fa1b 	bl	8004da4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800496e:	f000 fd41 	bl	80053f4 <xTaskResumeAll>
 8004972:	e76c      	b.n	800484e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004976:	f000 fa15 	bl	8004da4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800497a:	f000 fd3b 	bl	80053f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800497e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004980:	4618      	mov	r0, r3
 8004982:	3738      	adds	r7, #56	; 0x38
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	e000ed04 	.word	0xe000ed04

0800498c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b090      	sub	sp, #64	; 0x40
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
 8004998:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10a      	bne.n	80049ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049b6:	bf00      	nop
 80049b8:	e7fe      	b.n	80049b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d103      	bne.n	80049c8 <xQueueGenericSendFromISR+0x3c>
 80049c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <xQueueGenericSendFromISR+0x40>
 80049c8:	2301      	movs	r3, #1
 80049ca:	e000      	b.n	80049ce <xQueueGenericSendFromISR+0x42>
 80049cc:	2300      	movs	r3, #0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10a      	bne.n	80049e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049e4:	bf00      	nop
 80049e6:	e7fe      	b.n	80049e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d103      	bne.n	80049f6 <xQueueGenericSendFromISR+0x6a>
 80049ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d101      	bne.n	80049fa <xQueueGenericSendFromISR+0x6e>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <xQueueGenericSendFromISR+0x70>
 80049fa:	2300      	movs	r3, #0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10a      	bne.n	8004a16 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	623b      	str	r3, [r7, #32]
}
 8004a12:	bf00      	nop
 8004a14:	e7fe      	b.n	8004a14 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a16:	f001 feff 	bl	8006818 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a1a:	f3ef 8211 	mrs	r2, BASEPRI
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	61fa      	str	r2, [r7, #28]
 8004a30:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a32:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a34:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d302      	bcc.n	8004a48 <xQueueGenericSendFromISR+0xbc>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d12f      	bne.n	8004aa8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a56:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	68b9      	ldr	r1, [r7, #8]
 8004a5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a5e:	f000 f911 	bl	8004c84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a62:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6a:	d112      	bne.n	8004a92 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d016      	beq.n	8004aa2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a76:	3324      	adds	r3, #36	; 0x24
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 fed1 	bl	8005820 <xTaskRemoveFromEventList>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00e      	beq.n	8004aa2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00b      	beq.n	8004aa2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	e007      	b.n	8004aa2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a96:	3301      	adds	r3, #1
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	b25a      	sxtb	r2, r3
 8004a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004aa6:	e001      	b.n	8004aac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ab6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3740      	adds	r7, #64	; 0x40
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b08c      	sub	sp, #48	; 0x30
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10a      	bne.n	8004af4 <xQueueReceive+0x30>
	__asm volatile
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	623b      	str	r3, [r7, #32]
}
 8004af0:	bf00      	nop
 8004af2:	e7fe      	b.n	8004af2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d103      	bne.n	8004b02 <xQueueReceive+0x3e>
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <xQueueReceive+0x42>
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <xQueueReceive+0x44>
 8004b06:	2300      	movs	r3, #0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10a      	bne.n	8004b22 <xQueueReceive+0x5e>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	61fb      	str	r3, [r7, #28]
}
 8004b1e:	bf00      	nop
 8004b20:	e7fe      	b.n	8004b20 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b22:	f001 f83b 	bl	8005b9c <xTaskGetSchedulerState>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d102      	bne.n	8004b32 <xQueueReceive+0x6e>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <xQueueReceive+0x72>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <xQueueReceive+0x74>
 8004b36:	2300      	movs	r3, #0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10a      	bne.n	8004b52 <xQueueReceive+0x8e>
	__asm volatile
 8004b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	61bb      	str	r3, [r7, #24]
}
 8004b4e:	bf00      	nop
 8004b50:	e7fe      	b.n	8004b50 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b52:	f001 fd7f 	bl	8006654 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d01f      	beq.n	8004ba2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b66:	f000 f8f7 	bl	8004d58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	1e5a      	subs	r2, r3, #1
 8004b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b70:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00f      	beq.n	8004b9a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7c:	3310      	adds	r3, #16
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fe4e 	bl	8005820 <xTaskRemoveFromEventList>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d007      	beq.n	8004b9a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b8a:	4b3d      	ldr	r3, [pc, #244]	; (8004c80 <xQueueReceive+0x1bc>)
 8004b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b9a:	f001 fd8b 	bl	80066b4 <vPortExitCritical>
				return pdPASS;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e069      	b.n	8004c76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d103      	bne.n	8004bb0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ba8:	f001 fd84 	bl	80066b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004bac:	2300      	movs	r3, #0
 8004bae:	e062      	b.n	8004c76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bb6:	f107 0310 	add.w	r3, r7, #16
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fe94 	bl	80058e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bc4:	f001 fd76 	bl	80066b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bc8:	f000 fc06 	bl	80053d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bcc:	f001 fd42 	bl	8006654 <vPortEnterCritical>
 8004bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bd6:	b25b      	sxtb	r3, r3
 8004bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bdc:	d103      	bne.n	8004be6 <xQueueReceive+0x122>
 8004bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bec:	b25b      	sxtb	r3, r3
 8004bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf2:	d103      	bne.n	8004bfc <xQueueReceive+0x138>
 8004bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bfc:	f001 fd5a 	bl	80066b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c00:	1d3a      	adds	r2, r7, #4
 8004c02:	f107 0310 	add.w	r3, r7, #16
 8004c06:	4611      	mov	r1, r2
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 fe83 	bl	8005914 <xTaskCheckForTimeOut>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d123      	bne.n	8004c5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c16:	f000 f917 	bl	8004e48 <prvIsQueueEmpty>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d017      	beq.n	8004c50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c22:	3324      	adds	r3, #36	; 0x24
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	4611      	mov	r1, r2
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fda9 	bl	8005780 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c30:	f000 f8b8 	bl	8004da4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c34:	f000 fbde 	bl	80053f4 <xTaskResumeAll>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d189      	bne.n	8004b52 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004c3e:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <xQueueReceive+0x1bc>)
 8004c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	e780      	b.n	8004b52 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c52:	f000 f8a7 	bl	8004da4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c56:	f000 fbcd 	bl	80053f4 <xTaskResumeAll>
 8004c5a:	e77a      	b.n	8004b52 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c5e:	f000 f8a1 	bl	8004da4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c62:	f000 fbc7 	bl	80053f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c68:	f000 f8ee 	bl	8004e48 <prvIsQueueEmpty>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f43f af6f 	beq.w	8004b52 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3730      	adds	r7, #48	; 0x30
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	e000ed04 	.word	0xe000ed04

08004c84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c90:	2300      	movs	r3, #0
 8004c92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10d      	bne.n	8004cbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d14d      	bne.n	8004d46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 ff92 	bl	8005bd8 <xTaskPriorityDisinherit>
 8004cb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	609a      	str	r2, [r3, #8]
 8004cbc:	e043      	b.n	8004d46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d119      	bne.n	8004cf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6858      	ldr	r0, [r3, #4]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ccc:	461a      	mov	r2, r3
 8004cce:	68b9      	ldr	r1, [r7, #8]
 8004cd0:	f002 fa28 	bl	8007124 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	441a      	add	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d32b      	bcc.n	8004d46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	605a      	str	r2, [r3, #4]
 8004cf6:	e026      	b.n	8004d46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	68d8      	ldr	r0, [r3, #12]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d00:	461a      	mov	r2, r3
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	f002 fa0e 	bl	8007124 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d10:	425b      	negs	r3, r3
 8004d12:	441a      	add	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d207      	bcs.n	8004d34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	425b      	negs	r3, r3
 8004d2e:	441a      	add	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d105      	bne.n	8004d46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d002      	beq.n	8004d46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004d4e:	697b      	ldr	r3, [r7, #20]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d018      	beq.n	8004d9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	441a      	add	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d303      	bcc.n	8004d8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68d9      	ldr	r1, [r3, #12]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	461a      	mov	r2, r3
 8004d96:	6838      	ldr	r0, [r7, #0]
 8004d98:	f002 f9c4 	bl	8007124 <memcpy>
	}
}
 8004d9c:	bf00      	nop
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004dac:	f001 fc52 	bl	8006654 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004db6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004db8:	e011      	b.n	8004dde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d012      	beq.n	8004de8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	3324      	adds	r3, #36	; 0x24
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fd2a 	bl	8005820 <xTaskRemoveFromEventList>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004dd2:	f000 fe01 	bl	80059d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	dce9      	bgt.n	8004dba <prvUnlockQueue+0x16>
 8004de6:	e000      	b.n	8004dea <prvUnlockQueue+0x46>
					break;
 8004de8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	22ff      	movs	r2, #255	; 0xff
 8004dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004df2:	f001 fc5f 	bl	80066b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004df6:	f001 fc2d 	bl	8006654 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e02:	e011      	b.n	8004e28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d012      	beq.n	8004e32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3310      	adds	r3, #16
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 fd05 	bl	8005820 <xTaskRemoveFromEventList>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e1c:	f000 fddc 	bl	80059d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e20:	7bbb      	ldrb	r3, [r7, #14]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	dce9      	bgt.n	8004e04 <prvUnlockQueue+0x60>
 8004e30:	e000      	b.n	8004e34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	22ff      	movs	r2, #255	; 0xff
 8004e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004e3c:	f001 fc3a 	bl	80066b4 <vPortExitCritical>
}
 8004e40:	bf00      	nop
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e50:	f001 fc00 	bl	8006654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d102      	bne.n	8004e62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	e001      	b.n	8004e66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e62:	2300      	movs	r3, #0
 8004e64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e66:	f001 fc25 	bl	80066b4 <vPortExitCritical>

	return xReturn;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e7c:	f001 fbea 	bl	8006654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d102      	bne.n	8004e92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	e001      	b.n	8004e96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e92:	2300      	movs	r3, #0
 8004e94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e96:	f001 fc0d 	bl	80066b4 <vPortExitCritical>

	return xReturn;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	e014      	b.n	8004ede <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004eb4:	4a0f      	ldr	r2, [pc, #60]	; (8004ef4 <vQueueAddToRegistry+0x50>)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10b      	bne.n	8004ed8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ec0:	490c      	ldr	r1, [pc, #48]	; (8004ef4 <vQueueAddToRegistry+0x50>)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004eca:	4a0a      	ldr	r2, [pc, #40]	; (8004ef4 <vQueueAddToRegistry+0x50>)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	4413      	add	r3, r2
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004ed6:	e006      	b.n	8004ee6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3301      	adds	r3, #1
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2b07      	cmp	r3, #7
 8004ee2:	d9e7      	bls.n	8004eb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ee4:	bf00      	nop
 8004ee6:	bf00      	nop
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	20004b58 	.word	0x20004b58

08004ef8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f08:	f001 fba4 	bl	8006654 <vPortEnterCritical>
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f12:	b25b      	sxtb	r3, r3
 8004f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f18:	d103      	bne.n	8004f22 <vQueueWaitForMessageRestricted+0x2a>
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f28:	b25b      	sxtb	r3, r3
 8004f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2e:	d103      	bne.n	8004f38 <vQueueWaitForMessageRestricted+0x40>
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f38:	f001 fbbc 	bl	80066b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d106      	bne.n	8004f52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	3324      	adds	r3, #36	; 0x24
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	68b9      	ldr	r1, [r7, #8]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 fc3b 	bl	80057c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f52:	6978      	ldr	r0, [r7, #20]
 8004f54:	f7ff ff26 	bl	8004da4 <prvUnlockQueue>
	}
 8004f58:	bf00      	nop
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08e      	sub	sp, #56	; 0x38
 8004f64:	af04      	add	r7, sp, #16
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
 8004f6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10a      	bne.n	8004f8a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	623b      	str	r3, [r7, #32]
}
 8004f86:	bf00      	nop
 8004f88:	e7fe      	b.n	8004f88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10a      	bne.n	8004fa6 <xTaskCreateStatic+0x46>
	__asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	61fb      	str	r3, [r7, #28]
}
 8004fa2:	bf00      	nop
 8004fa4:	e7fe      	b.n	8004fa4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004fa6:	235c      	movs	r3, #92	; 0x5c
 8004fa8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b5c      	cmp	r3, #92	; 0x5c
 8004fae:	d00a      	beq.n	8004fc6 <xTaskCreateStatic+0x66>
	__asm volatile
 8004fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	61bb      	str	r3, [r7, #24]
}
 8004fc2:	bf00      	nop
 8004fc4:	e7fe      	b.n	8004fc4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004fc6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d01e      	beq.n	800500c <xTaskCreateStatic+0xac>
 8004fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d01b      	beq.n	800500c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fdc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	9303      	str	r3, [sp, #12]
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	9302      	str	r3, [sp, #8]
 8004fee:	f107 0314 	add.w	r3, r7, #20
 8004ff2:	9301      	str	r3, [sp, #4]
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	68b9      	ldr	r1, [r7, #8]
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 f850 	bl	80050a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005004:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005006:	f000 f8dd 	bl	80051c4 <prvAddNewTaskToReadyList>
 800500a:	e001      	b.n	8005010 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800500c:	2300      	movs	r3, #0
 800500e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005010:	697b      	ldr	r3, [r7, #20]
	}
 8005012:	4618      	mov	r0, r3
 8005014:	3728      	adds	r7, #40	; 0x28
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800501a:	b580      	push	{r7, lr}
 800501c:	b08c      	sub	sp, #48	; 0x30
 800501e:	af04      	add	r7, sp, #16
 8005020:	60f8      	str	r0, [r7, #12]
 8005022:	60b9      	str	r1, [r7, #8]
 8005024:	603b      	str	r3, [r7, #0]
 8005026:	4613      	mov	r3, r2
 8005028:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800502a:	88fb      	ldrh	r3, [r7, #6]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4618      	mov	r0, r3
 8005030:	f001 fc32 	bl	8006898 <pvPortMalloc>
 8005034:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00e      	beq.n	800505a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800503c:	205c      	movs	r0, #92	; 0x5c
 800503e:	f001 fc2b 	bl	8006898 <pvPortMalloc>
 8005042:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	631a      	str	r2, [r3, #48]	; 0x30
 8005050:	e005      	b.n	800505e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005052:	6978      	ldr	r0, [r7, #20]
 8005054:	f001 fcec 	bl	8006a30 <vPortFree>
 8005058:	e001      	b.n	800505e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800505a:	2300      	movs	r3, #0
 800505c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d017      	beq.n	8005094 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800506c:	88fa      	ldrh	r2, [r7, #6]
 800506e:	2300      	movs	r3, #0
 8005070:	9303      	str	r3, [sp, #12]
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	9302      	str	r3, [sp, #8]
 8005076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005078:	9301      	str	r3, [sp, #4]
 800507a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68b9      	ldr	r1, [r7, #8]
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 f80e 	bl	80050a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005088:	69f8      	ldr	r0, [r7, #28]
 800508a:	f000 f89b 	bl	80051c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800508e:	2301      	movs	r3, #1
 8005090:	61bb      	str	r3, [r7, #24]
 8005092:	e002      	b.n	800509a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005094:	f04f 33ff 	mov.w	r3, #4294967295
 8005098:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800509a:	69bb      	ldr	r3, [r7, #24]
	}
 800509c:	4618      	mov	r0, r3
 800509e:	3720      	adds	r7, #32
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	461a      	mov	r2, r3
 80050bc:	21a5      	movs	r1, #165	; 0xa5
 80050be:	f002 f83f 	bl	8007140 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80050cc:	3b01      	subs	r3, #1
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	f023 0307 	bic.w	r3, r3, #7
 80050da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	f003 0307 	and.w	r3, r3, #7
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <prvInitialiseNewTask+0x58>
	__asm volatile
 80050e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ea:	f383 8811 	msr	BASEPRI, r3
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	617b      	str	r3, [r7, #20]
}
 80050f8:	bf00      	nop
 80050fa:	e7fe      	b.n	80050fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d01f      	beq.n	8005142 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005102:	2300      	movs	r3, #0
 8005104:	61fb      	str	r3, [r7, #28]
 8005106:	e012      	b.n	800512e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	4413      	add	r3, r2
 800510e:	7819      	ldrb	r1, [r3, #0]
 8005110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	4413      	add	r3, r2
 8005116:	3334      	adds	r3, #52	; 0x34
 8005118:	460a      	mov	r2, r1
 800511a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	4413      	add	r3, r2
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d006      	beq.n	8005136 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	3301      	adds	r3, #1
 800512c:	61fb      	str	r3, [r7, #28]
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	2b0f      	cmp	r3, #15
 8005132:	d9e9      	bls.n	8005108 <prvInitialiseNewTask+0x64>
 8005134:	e000      	b.n	8005138 <prvInitialiseNewTask+0x94>
			{
				break;
 8005136:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005140:	e003      	b.n	800514a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800514a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514c:	2b37      	cmp	r3, #55	; 0x37
 800514e:	d901      	bls.n	8005154 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005150:	2337      	movs	r3, #55	; 0x37
 8005152:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005158:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800515a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800515e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	2200      	movs	r2, #0
 8005164:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005168:	3304      	adds	r3, #4
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff f978 	bl	8004460 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005172:	3318      	adds	r3, #24
 8005174:	4618      	mov	r0, r3
 8005176:	f7ff f973 	bl	8004460 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800517e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005182:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800518a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800518e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005192:	2200      	movs	r2, #0
 8005194:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	68f9      	ldr	r1, [r7, #12]
 80051a2:	69b8      	ldr	r0, [r7, #24]
 80051a4:	f001 f928 	bl	80063f8 <pxPortInitialiseStack>
 80051a8:	4602      	mov	r2, r0
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051ba:	bf00      	nop
 80051bc:	3720      	adds	r7, #32
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80051cc:	f001 fa42 	bl	8006654 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051d0:	4b2d      	ldr	r3, [pc, #180]	; (8005288 <prvAddNewTaskToReadyList+0xc4>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3301      	adds	r3, #1
 80051d6:	4a2c      	ldr	r2, [pc, #176]	; (8005288 <prvAddNewTaskToReadyList+0xc4>)
 80051d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051da:	4b2c      	ldr	r3, [pc, #176]	; (800528c <prvAddNewTaskToReadyList+0xc8>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d109      	bne.n	80051f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051e2:	4a2a      	ldr	r2, [pc, #168]	; (800528c <prvAddNewTaskToReadyList+0xc8>)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051e8:	4b27      	ldr	r3, [pc, #156]	; (8005288 <prvAddNewTaskToReadyList+0xc4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d110      	bne.n	8005212 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80051f0:	f000 fc16 	bl	8005a20 <prvInitialiseTaskLists>
 80051f4:	e00d      	b.n	8005212 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80051f6:	4b26      	ldr	r3, [pc, #152]	; (8005290 <prvAddNewTaskToReadyList+0xcc>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d109      	bne.n	8005212 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051fe:	4b23      	ldr	r3, [pc, #140]	; (800528c <prvAddNewTaskToReadyList+0xc8>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005208:	429a      	cmp	r2, r3
 800520a:	d802      	bhi.n	8005212 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800520c:	4a1f      	ldr	r2, [pc, #124]	; (800528c <prvAddNewTaskToReadyList+0xc8>)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005212:	4b20      	ldr	r3, [pc, #128]	; (8005294 <prvAddNewTaskToReadyList+0xd0>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3301      	adds	r3, #1
 8005218:	4a1e      	ldr	r2, [pc, #120]	; (8005294 <prvAddNewTaskToReadyList+0xd0>)
 800521a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800521c:	4b1d      	ldr	r3, [pc, #116]	; (8005294 <prvAddNewTaskToReadyList+0xd0>)
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005228:	4b1b      	ldr	r3, [pc, #108]	; (8005298 <prvAddNewTaskToReadyList+0xd4>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d903      	bls.n	8005238 <prvAddNewTaskToReadyList+0x74>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	4a18      	ldr	r2, [pc, #96]	; (8005298 <prvAddNewTaskToReadyList+0xd4>)
 8005236:	6013      	str	r3, [r2, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4a15      	ldr	r2, [pc, #84]	; (800529c <prvAddNewTaskToReadyList+0xd8>)
 8005246:	441a      	add	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3304      	adds	r3, #4
 800524c:	4619      	mov	r1, r3
 800524e:	4610      	mov	r0, r2
 8005250:	f7ff f913 	bl	800447a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005254:	f001 fa2e 	bl	80066b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005258:	4b0d      	ldr	r3, [pc, #52]	; (8005290 <prvAddNewTaskToReadyList+0xcc>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00e      	beq.n	800527e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005260:	4b0a      	ldr	r3, [pc, #40]	; (800528c <prvAddNewTaskToReadyList+0xc8>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526a:	429a      	cmp	r2, r3
 800526c:	d207      	bcs.n	800527e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800526e:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <prvAddNewTaskToReadyList+0xdc>)
 8005270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800527e:	bf00      	nop
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	20000c38 	.word	0x20000c38
 800528c:	20000764 	.word	0x20000764
 8005290:	20000c44 	.word	0x20000c44
 8005294:	20000c54 	.word	0x20000c54
 8005298:	20000c40 	.word	0x20000c40
 800529c:	20000768 	.word	0x20000768
 80052a0:	e000ed04 	.word	0xe000ed04

080052a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052ac:	2300      	movs	r3, #0
 80052ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d017      	beq.n	80052e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80052b6:	4b13      	ldr	r3, [pc, #76]	; (8005304 <vTaskDelay+0x60>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <vTaskDelay+0x30>
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	60bb      	str	r3, [r7, #8]
}
 80052d0:	bf00      	nop
 80052d2:	e7fe      	b.n	80052d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80052d4:	f000 f880 	bl	80053d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80052d8:	2100      	movs	r1, #0
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fcea 	bl	8005cb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052e0:	f000 f888 	bl	80053f4 <xTaskResumeAll>
 80052e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d107      	bne.n	80052fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80052ec:	4b06      	ldr	r3, [pc, #24]	; (8005308 <vTaskDelay+0x64>)
 80052ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052fc:	bf00      	nop
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	20000c60 	.word	0x20000c60
 8005308:	e000ed04 	.word	0xe000ed04

0800530c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08a      	sub	sp, #40	; 0x28
 8005310:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005312:	2300      	movs	r3, #0
 8005314:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005316:	2300      	movs	r3, #0
 8005318:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800531a:	463a      	mov	r2, r7
 800531c:	1d39      	adds	r1, r7, #4
 800531e:	f107 0308 	add.w	r3, r7, #8
 8005322:	4618      	mov	r0, r3
 8005324:	f7ff f848 	bl	80043b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005328:	6839      	ldr	r1, [r7, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	9202      	str	r2, [sp, #8]
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	2300      	movs	r3, #0
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	2300      	movs	r3, #0
 8005338:	460a      	mov	r2, r1
 800533a:	4921      	ldr	r1, [pc, #132]	; (80053c0 <vTaskStartScheduler+0xb4>)
 800533c:	4821      	ldr	r0, [pc, #132]	; (80053c4 <vTaskStartScheduler+0xb8>)
 800533e:	f7ff fe0f 	bl	8004f60 <xTaskCreateStatic>
 8005342:	4603      	mov	r3, r0
 8005344:	4a20      	ldr	r2, [pc, #128]	; (80053c8 <vTaskStartScheduler+0xbc>)
 8005346:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005348:	4b1f      	ldr	r3, [pc, #124]	; (80053c8 <vTaskStartScheduler+0xbc>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005350:	2301      	movs	r3, #1
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	e001      	b.n	800535a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005356:	2300      	movs	r3, #0
 8005358:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d102      	bne.n	8005366 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005360:	f000 fcfc 	bl	8005d5c <xTimerCreateTimerTask>
 8005364:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d116      	bne.n	800539a <vTaskStartScheduler+0x8e>
	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	613b      	str	r3, [r7, #16]
}
 800537e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005380:	4b12      	ldr	r3, [pc, #72]	; (80053cc <vTaskStartScheduler+0xc0>)
 8005382:	f04f 32ff 	mov.w	r2, #4294967295
 8005386:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005388:	4b11      	ldr	r3, [pc, #68]	; (80053d0 <vTaskStartScheduler+0xc4>)
 800538a:	2201      	movs	r2, #1
 800538c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800538e:	4b11      	ldr	r3, [pc, #68]	; (80053d4 <vTaskStartScheduler+0xc8>)
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005394:	f001 f8bc 	bl	8006510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005398:	e00e      	b.n	80053b8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a0:	d10a      	bne.n	80053b8 <vTaskStartScheduler+0xac>
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	60fb      	str	r3, [r7, #12]
}
 80053b4:	bf00      	nop
 80053b6:	e7fe      	b.n	80053b6 <vTaskStartScheduler+0xaa>
}
 80053b8:	bf00      	nop
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	080079f0 	.word	0x080079f0
 80053c4:	080059f1 	.word	0x080059f1
 80053c8:	20000c5c 	.word	0x20000c5c
 80053cc:	20000c58 	.word	0x20000c58
 80053d0:	20000c44 	.word	0x20000c44
 80053d4:	20000c3c 	.word	0x20000c3c

080053d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80053dc:	4b04      	ldr	r3, [pc, #16]	; (80053f0 <vTaskSuspendAll+0x18>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3301      	adds	r3, #1
 80053e2:	4a03      	ldr	r2, [pc, #12]	; (80053f0 <vTaskSuspendAll+0x18>)
 80053e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80053e6:	bf00      	nop
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	20000c60 	.word	0x20000c60

080053f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053fe:	2300      	movs	r3, #0
 8005400:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005402:	4b42      	ldr	r3, [pc, #264]	; (800550c <xTaskResumeAll+0x118>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10a      	bne.n	8005420 <xTaskResumeAll+0x2c>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	603b      	str	r3, [r7, #0]
}
 800541c:	bf00      	nop
 800541e:	e7fe      	b.n	800541e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005420:	f001 f918 	bl	8006654 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005424:	4b39      	ldr	r3, [pc, #228]	; (800550c <xTaskResumeAll+0x118>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3b01      	subs	r3, #1
 800542a:	4a38      	ldr	r2, [pc, #224]	; (800550c <xTaskResumeAll+0x118>)
 800542c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800542e:	4b37      	ldr	r3, [pc, #220]	; (800550c <xTaskResumeAll+0x118>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d162      	bne.n	80054fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005436:	4b36      	ldr	r3, [pc, #216]	; (8005510 <xTaskResumeAll+0x11c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d05e      	beq.n	80054fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800543e:	e02f      	b.n	80054a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005440:	4b34      	ldr	r3, [pc, #208]	; (8005514 <xTaskResumeAll+0x120>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	3318      	adds	r3, #24
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff f871 	bl	8004534 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3304      	adds	r3, #4
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff f86c 	bl	8004534 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005460:	4b2d      	ldr	r3, [pc, #180]	; (8005518 <xTaskResumeAll+0x124>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	429a      	cmp	r2, r3
 8005466:	d903      	bls.n	8005470 <xTaskResumeAll+0x7c>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546c:	4a2a      	ldr	r2, [pc, #168]	; (8005518 <xTaskResumeAll+0x124>)
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4a27      	ldr	r2, [pc, #156]	; (800551c <xTaskResumeAll+0x128>)
 800547e:	441a      	add	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3304      	adds	r3, #4
 8005484:	4619      	mov	r1, r3
 8005486:	4610      	mov	r0, r2
 8005488:	f7fe fff7 	bl	800447a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005490:	4b23      	ldr	r3, [pc, #140]	; (8005520 <xTaskResumeAll+0x12c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005496:	429a      	cmp	r2, r3
 8005498:	d302      	bcc.n	80054a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800549a:	4b22      	ldr	r3, [pc, #136]	; (8005524 <xTaskResumeAll+0x130>)
 800549c:	2201      	movs	r2, #1
 800549e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054a0:	4b1c      	ldr	r3, [pc, #112]	; (8005514 <xTaskResumeAll+0x120>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1cb      	bne.n	8005440 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80054ae:	f000 fb55 	bl	8005b5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80054b2:	4b1d      	ldr	r3, [pc, #116]	; (8005528 <xTaskResumeAll+0x134>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d010      	beq.n	80054e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80054be:	f000 f847 	bl	8005550 <xTaskIncrementTick>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80054c8:	4b16      	ldr	r3, [pc, #88]	; (8005524 <xTaskResumeAll+0x130>)
 80054ca:	2201      	movs	r2, #1
 80054cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1f1      	bne.n	80054be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80054da:	4b13      	ldr	r3, [pc, #76]	; (8005528 <xTaskResumeAll+0x134>)
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80054e0:	4b10      	ldr	r3, [pc, #64]	; (8005524 <xTaskResumeAll+0x130>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d009      	beq.n	80054fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80054e8:	2301      	movs	r3, #1
 80054ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80054ec:	4b0f      	ldr	r3, [pc, #60]	; (800552c <xTaskResumeAll+0x138>)
 80054ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054fc:	f001 f8da 	bl	80066b4 <vPortExitCritical>

	return xAlreadyYielded;
 8005500:	68bb      	ldr	r3, [r7, #8]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000c60 	.word	0x20000c60
 8005510:	20000c38 	.word	0x20000c38
 8005514:	20000bf8 	.word	0x20000bf8
 8005518:	20000c40 	.word	0x20000c40
 800551c:	20000768 	.word	0x20000768
 8005520:	20000764 	.word	0x20000764
 8005524:	20000c4c 	.word	0x20000c4c
 8005528:	20000c48 	.word	0x20000c48
 800552c:	e000ed04 	.word	0xe000ed04

08005530 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005536:	4b05      	ldr	r3, [pc, #20]	; (800554c <xTaskGetTickCount+0x1c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800553c:	687b      	ldr	r3, [r7, #4]
}
 800553e:	4618      	mov	r0, r3
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	20000c3c 	.word	0x20000c3c

08005550 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005556:	2300      	movs	r3, #0
 8005558:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800555a:	4b4f      	ldr	r3, [pc, #316]	; (8005698 <xTaskIncrementTick+0x148>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	f040 808f 	bne.w	8005682 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005564:	4b4d      	ldr	r3, [pc, #308]	; (800569c <xTaskIncrementTick+0x14c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	3301      	adds	r3, #1
 800556a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800556c:	4a4b      	ldr	r2, [pc, #300]	; (800569c <xTaskIncrementTick+0x14c>)
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d120      	bne.n	80055ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005578:	4b49      	ldr	r3, [pc, #292]	; (80056a0 <xTaskIncrementTick+0x150>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00a      	beq.n	8005598 <xTaskIncrementTick+0x48>
	__asm volatile
 8005582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	603b      	str	r3, [r7, #0]
}
 8005594:	bf00      	nop
 8005596:	e7fe      	b.n	8005596 <xTaskIncrementTick+0x46>
 8005598:	4b41      	ldr	r3, [pc, #260]	; (80056a0 <xTaskIncrementTick+0x150>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	4b41      	ldr	r3, [pc, #260]	; (80056a4 <xTaskIncrementTick+0x154>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a3f      	ldr	r2, [pc, #252]	; (80056a0 <xTaskIncrementTick+0x150>)
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	4a3f      	ldr	r2, [pc, #252]	; (80056a4 <xTaskIncrementTick+0x154>)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	4b3e      	ldr	r3, [pc, #248]	; (80056a8 <xTaskIncrementTick+0x158>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3301      	adds	r3, #1
 80055b2:	4a3d      	ldr	r2, [pc, #244]	; (80056a8 <xTaskIncrementTick+0x158>)
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	f000 fad1 	bl	8005b5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80055ba:	4b3c      	ldr	r3, [pc, #240]	; (80056ac <xTaskIncrementTick+0x15c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d349      	bcc.n	8005658 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055c4:	4b36      	ldr	r3, [pc, #216]	; (80056a0 <xTaskIncrementTick+0x150>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d104      	bne.n	80055d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ce:	4b37      	ldr	r3, [pc, #220]	; (80056ac <xTaskIncrementTick+0x15c>)
 80055d0:	f04f 32ff 	mov.w	r2, #4294967295
 80055d4:	601a      	str	r2, [r3, #0]
					break;
 80055d6:	e03f      	b.n	8005658 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055d8:	4b31      	ldr	r3, [pc, #196]	; (80056a0 <xTaskIncrementTick+0x150>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d203      	bcs.n	80055f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80055f0:	4a2e      	ldr	r2, [pc, #184]	; (80056ac <xTaskIncrementTick+0x15c>)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80055f6:	e02f      	b.n	8005658 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	3304      	adds	r3, #4
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fe ff99 	bl	8004534 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005606:	2b00      	cmp	r3, #0
 8005608:	d004      	beq.n	8005614 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	3318      	adds	r3, #24
 800560e:	4618      	mov	r0, r3
 8005610:	f7fe ff90 	bl	8004534 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005618:	4b25      	ldr	r3, [pc, #148]	; (80056b0 <xTaskIncrementTick+0x160>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d903      	bls.n	8005628 <xTaskIncrementTick+0xd8>
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	4a22      	ldr	r2, [pc, #136]	; (80056b0 <xTaskIncrementTick+0x160>)
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562c:	4613      	mov	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4a1f      	ldr	r2, [pc, #124]	; (80056b4 <xTaskIncrementTick+0x164>)
 8005636:	441a      	add	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	3304      	adds	r3, #4
 800563c:	4619      	mov	r1, r3
 800563e:	4610      	mov	r0, r2
 8005640:	f7fe ff1b 	bl	800447a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005648:	4b1b      	ldr	r3, [pc, #108]	; (80056b8 <xTaskIncrementTick+0x168>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564e:	429a      	cmp	r2, r3
 8005650:	d3b8      	bcc.n	80055c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005652:	2301      	movs	r3, #1
 8005654:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005656:	e7b5      	b.n	80055c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005658:	4b17      	ldr	r3, [pc, #92]	; (80056b8 <xTaskIncrementTick+0x168>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565e:	4915      	ldr	r1, [pc, #84]	; (80056b4 <xTaskIncrementTick+0x164>)
 8005660:	4613      	mov	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	440b      	add	r3, r1
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d901      	bls.n	8005674 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005670:	2301      	movs	r3, #1
 8005672:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005674:	4b11      	ldr	r3, [pc, #68]	; (80056bc <xTaskIncrementTick+0x16c>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d007      	beq.n	800568c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800567c:	2301      	movs	r3, #1
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	e004      	b.n	800568c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005682:	4b0f      	ldr	r3, [pc, #60]	; (80056c0 <xTaskIncrementTick+0x170>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3301      	adds	r3, #1
 8005688:	4a0d      	ldr	r2, [pc, #52]	; (80056c0 <xTaskIncrementTick+0x170>)
 800568a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800568c:	697b      	ldr	r3, [r7, #20]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3718      	adds	r7, #24
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20000c60 	.word	0x20000c60
 800569c:	20000c3c 	.word	0x20000c3c
 80056a0:	20000bf0 	.word	0x20000bf0
 80056a4:	20000bf4 	.word	0x20000bf4
 80056a8:	20000c50 	.word	0x20000c50
 80056ac:	20000c58 	.word	0x20000c58
 80056b0:	20000c40 	.word	0x20000c40
 80056b4:	20000768 	.word	0x20000768
 80056b8:	20000764 	.word	0x20000764
 80056bc:	20000c4c 	.word	0x20000c4c
 80056c0:	20000c48 	.word	0x20000c48

080056c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056ca:	4b28      	ldr	r3, [pc, #160]	; (800576c <vTaskSwitchContext+0xa8>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80056d2:	4b27      	ldr	r3, [pc, #156]	; (8005770 <vTaskSwitchContext+0xac>)
 80056d4:	2201      	movs	r2, #1
 80056d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80056d8:	e041      	b.n	800575e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80056da:	4b25      	ldr	r3, [pc, #148]	; (8005770 <vTaskSwitchContext+0xac>)
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056e0:	4b24      	ldr	r3, [pc, #144]	; (8005774 <vTaskSwitchContext+0xb0>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	e010      	b.n	800570a <vTaskSwitchContext+0x46>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10a      	bne.n	8005704 <vTaskSwitchContext+0x40>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	607b      	str	r3, [r7, #4]
}
 8005700:	bf00      	nop
 8005702:	e7fe      	b.n	8005702 <vTaskSwitchContext+0x3e>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3b01      	subs	r3, #1
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	491b      	ldr	r1, [pc, #108]	; (8005778 <vTaskSwitchContext+0xb4>)
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4613      	mov	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	440b      	add	r3, r1
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0e4      	beq.n	80056e8 <vTaskSwitchContext+0x24>
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	4613      	mov	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4a13      	ldr	r2, [pc, #76]	; (8005778 <vTaskSwitchContext+0xb4>)
 800572a:	4413      	add	r3, r2
 800572c:	60bb      	str	r3, [r7, #8]
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	605a      	str	r2, [r3, #4]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	3308      	adds	r3, #8
 8005740:	429a      	cmp	r2, r3
 8005742:	d104      	bne.n	800574e <vTaskSwitchContext+0x8a>
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	605a      	str	r2, [r3, #4]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	4a09      	ldr	r2, [pc, #36]	; (800577c <vTaskSwitchContext+0xb8>)
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	4a06      	ldr	r2, [pc, #24]	; (8005774 <vTaskSwitchContext+0xb0>)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6013      	str	r3, [r2, #0]
}
 800575e:	bf00      	nop
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	20000c60 	.word	0x20000c60
 8005770:	20000c4c 	.word	0x20000c4c
 8005774:	20000c40 	.word	0x20000c40
 8005778:	20000768 	.word	0x20000768
 800577c:	20000764 	.word	0x20000764

08005780 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10a      	bne.n	80057a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	60fb      	str	r3, [r7, #12]
}
 80057a2:	bf00      	nop
 80057a4:	e7fe      	b.n	80057a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057a6:	4b07      	ldr	r3, [pc, #28]	; (80057c4 <vTaskPlaceOnEventList+0x44>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3318      	adds	r3, #24
 80057ac:	4619      	mov	r1, r3
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7fe fe87 	bl	80044c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057b4:	2101      	movs	r1, #1
 80057b6:	6838      	ldr	r0, [r7, #0]
 80057b8:	f000 fa7c 	bl	8005cb4 <prvAddCurrentTaskToDelayedList>
}
 80057bc:	bf00      	nop
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	20000764 	.word	0x20000764

080057c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10a      	bne.n	80057f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	617b      	str	r3, [r7, #20]
}
 80057ec:	bf00      	nop
 80057ee:	e7fe      	b.n	80057ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057f0:	4b0a      	ldr	r3, [pc, #40]	; (800581c <vTaskPlaceOnEventListRestricted+0x54>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3318      	adds	r3, #24
 80057f6:	4619      	mov	r1, r3
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f7fe fe3e 	bl	800447a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005804:	f04f 33ff 	mov.w	r3, #4294967295
 8005808:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	68b8      	ldr	r0, [r7, #8]
 800580e:	f000 fa51 	bl	8005cb4 <prvAddCurrentTaskToDelayedList>
	}
 8005812:	bf00      	nop
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20000764 	.word	0x20000764

08005820 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10a      	bne.n	800584c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	60fb      	str	r3, [r7, #12]
}
 8005848:	bf00      	nop
 800584a:	e7fe      	b.n	800584a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	3318      	adds	r3, #24
 8005850:	4618      	mov	r0, r3
 8005852:	f7fe fe6f 	bl	8004534 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005856:	4b1e      	ldr	r3, [pc, #120]	; (80058d0 <xTaskRemoveFromEventList+0xb0>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d11d      	bne.n	800589a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	3304      	adds	r3, #4
 8005862:	4618      	mov	r0, r3
 8005864:	f7fe fe66 	bl	8004534 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586c:	4b19      	ldr	r3, [pc, #100]	; (80058d4 <xTaskRemoveFromEventList+0xb4>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	429a      	cmp	r2, r3
 8005872:	d903      	bls.n	800587c <xTaskRemoveFromEventList+0x5c>
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	4a16      	ldr	r2, [pc, #88]	; (80058d4 <xTaskRemoveFromEventList+0xb4>)
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005880:	4613      	mov	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4a13      	ldr	r2, [pc, #76]	; (80058d8 <xTaskRemoveFromEventList+0xb8>)
 800588a:	441a      	add	r2, r3
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	3304      	adds	r3, #4
 8005890:	4619      	mov	r1, r3
 8005892:	4610      	mov	r0, r2
 8005894:	f7fe fdf1 	bl	800447a <vListInsertEnd>
 8005898:	e005      	b.n	80058a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	3318      	adds	r3, #24
 800589e:	4619      	mov	r1, r3
 80058a0:	480e      	ldr	r0, [pc, #56]	; (80058dc <xTaskRemoveFromEventList+0xbc>)
 80058a2:	f7fe fdea 	bl	800447a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058aa:	4b0d      	ldr	r3, [pc, #52]	; (80058e0 <xTaskRemoveFromEventList+0xc0>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d905      	bls.n	80058c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80058b4:	2301      	movs	r3, #1
 80058b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80058b8:	4b0a      	ldr	r3, [pc, #40]	; (80058e4 <xTaskRemoveFromEventList+0xc4>)
 80058ba:	2201      	movs	r2, #1
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	e001      	b.n	80058c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80058c4:	697b      	ldr	r3, [r7, #20]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000c60 	.word	0x20000c60
 80058d4:	20000c40 	.word	0x20000c40
 80058d8:	20000768 	.word	0x20000768
 80058dc:	20000bf8 	.word	0x20000bf8
 80058e0:	20000764 	.word	0x20000764
 80058e4:	20000c4c 	.word	0x20000c4c

080058e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058f0:	4b06      	ldr	r3, [pc, #24]	; (800590c <vTaskInternalSetTimeOutState+0x24>)
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80058f8:	4b05      	ldr	r3, [pc, #20]	; (8005910 <vTaskInternalSetTimeOutState+0x28>)
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	605a      	str	r2, [r3, #4]
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	20000c50 	.word	0x20000c50
 8005910:	20000c3c 	.word	0x20000c3c

08005914 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b088      	sub	sp, #32
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10a      	bne.n	800593a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	613b      	str	r3, [r7, #16]
}
 8005936:	bf00      	nop
 8005938:	e7fe      	b.n	8005938 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10a      	bne.n	8005956 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	60fb      	str	r3, [r7, #12]
}
 8005952:	bf00      	nop
 8005954:	e7fe      	b.n	8005954 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005956:	f000 fe7d 	bl	8006654 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800595a:	4b1d      	ldr	r3, [pc, #116]	; (80059d0 <xTaskCheckForTimeOut+0xbc>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005972:	d102      	bne.n	800597a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005974:	2300      	movs	r3, #0
 8005976:	61fb      	str	r3, [r7, #28]
 8005978:	e023      	b.n	80059c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	4b15      	ldr	r3, [pc, #84]	; (80059d4 <xTaskCheckForTimeOut+0xc0>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d007      	beq.n	8005996 <xTaskCheckForTimeOut+0x82>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	429a      	cmp	r2, r3
 800598e:	d302      	bcc.n	8005996 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005990:	2301      	movs	r3, #1
 8005992:	61fb      	str	r3, [r7, #28]
 8005994:	e015      	b.n	80059c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	429a      	cmp	r2, r3
 800599e:	d20b      	bcs.n	80059b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	1ad2      	subs	r2, r2, r3
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f7ff ff9b 	bl	80058e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80059b2:	2300      	movs	r3, #0
 80059b4:	61fb      	str	r3, [r7, #28]
 80059b6:	e004      	b.n	80059c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2200      	movs	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80059be:	2301      	movs	r3, #1
 80059c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80059c2:	f000 fe77 	bl	80066b4 <vPortExitCritical>

	return xReturn;
 80059c6:	69fb      	ldr	r3, [r7, #28]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3720      	adds	r7, #32
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	20000c3c 	.word	0x20000c3c
 80059d4:	20000c50 	.word	0x20000c50

080059d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80059dc:	4b03      	ldr	r3, [pc, #12]	; (80059ec <vTaskMissedYield+0x14>)
 80059de:	2201      	movs	r2, #1
 80059e0:	601a      	str	r2, [r3, #0]
}
 80059e2:	bf00      	nop
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	20000c4c 	.word	0x20000c4c

080059f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059f8:	f000 f852 	bl	8005aa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059fc:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <prvIdleTask+0x28>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d9f9      	bls.n	80059f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a04:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <prvIdleTask+0x2c>)
 8005a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a14:	e7f0      	b.n	80059f8 <prvIdleTask+0x8>
 8005a16:	bf00      	nop
 8005a18:	20000768 	.word	0x20000768
 8005a1c:	e000ed04 	.word	0xe000ed04

08005a20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a26:	2300      	movs	r3, #0
 8005a28:	607b      	str	r3, [r7, #4]
 8005a2a:	e00c      	b.n	8005a46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4a12      	ldr	r2, [pc, #72]	; (8005a80 <prvInitialiseTaskLists+0x60>)
 8005a38:	4413      	add	r3, r2
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fe fcf0 	bl	8004420 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3301      	adds	r3, #1
 8005a44:	607b      	str	r3, [r7, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b37      	cmp	r3, #55	; 0x37
 8005a4a:	d9ef      	bls.n	8005a2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a4c:	480d      	ldr	r0, [pc, #52]	; (8005a84 <prvInitialiseTaskLists+0x64>)
 8005a4e:	f7fe fce7 	bl	8004420 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a52:	480d      	ldr	r0, [pc, #52]	; (8005a88 <prvInitialiseTaskLists+0x68>)
 8005a54:	f7fe fce4 	bl	8004420 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a58:	480c      	ldr	r0, [pc, #48]	; (8005a8c <prvInitialiseTaskLists+0x6c>)
 8005a5a:	f7fe fce1 	bl	8004420 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a5e:	480c      	ldr	r0, [pc, #48]	; (8005a90 <prvInitialiseTaskLists+0x70>)
 8005a60:	f7fe fcde 	bl	8004420 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a64:	480b      	ldr	r0, [pc, #44]	; (8005a94 <prvInitialiseTaskLists+0x74>)
 8005a66:	f7fe fcdb 	bl	8004420 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a6a:	4b0b      	ldr	r3, [pc, #44]	; (8005a98 <prvInitialiseTaskLists+0x78>)
 8005a6c:	4a05      	ldr	r2, [pc, #20]	; (8005a84 <prvInitialiseTaskLists+0x64>)
 8005a6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a70:	4b0a      	ldr	r3, [pc, #40]	; (8005a9c <prvInitialiseTaskLists+0x7c>)
 8005a72:	4a05      	ldr	r2, [pc, #20]	; (8005a88 <prvInitialiseTaskLists+0x68>)
 8005a74:	601a      	str	r2, [r3, #0]
}
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20000768 	.word	0x20000768
 8005a84:	20000bc8 	.word	0x20000bc8
 8005a88:	20000bdc 	.word	0x20000bdc
 8005a8c:	20000bf8 	.word	0x20000bf8
 8005a90:	20000c0c 	.word	0x20000c0c
 8005a94:	20000c24 	.word	0x20000c24
 8005a98:	20000bf0 	.word	0x20000bf0
 8005a9c:	20000bf4 	.word	0x20000bf4

08005aa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005aa6:	e019      	b.n	8005adc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005aa8:	f000 fdd4 	bl	8006654 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aac:	4b10      	ldr	r3, [pc, #64]	; (8005af0 <prvCheckTasksWaitingTermination+0x50>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fe fd3b 	bl	8004534 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005abe:	4b0d      	ldr	r3, [pc, #52]	; (8005af4 <prvCheckTasksWaitingTermination+0x54>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	4a0b      	ldr	r2, [pc, #44]	; (8005af4 <prvCheckTasksWaitingTermination+0x54>)
 8005ac6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ac8:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <prvCheckTasksWaitingTermination+0x58>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3b01      	subs	r3, #1
 8005ace:	4a0a      	ldr	r2, [pc, #40]	; (8005af8 <prvCheckTasksWaitingTermination+0x58>)
 8005ad0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ad2:	f000 fdef 	bl	80066b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f810 	bl	8005afc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005adc:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <prvCheckTasksWaitingTermination+0x58>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e1      	bne.n	8005aa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ae4:	bf00      	nop
 8005ae6:	bf00      	nop
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20000c0c 	.word	0x20000c0c
 8005af4:	20000c38 	.word	0x20000c38
 8005af8:	20000c20 	.word	0x20000c20

08005afc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d108      	bne.n	8005b20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 ff8c 	bl	8006a30 <vPortFree>
				vPortFree( pxTCB );
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 ff89 	bl	8006a30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b1e:	e018      	b.n	8005b52 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d103      	bne.n	8005b32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 ff80 	bl	8006a30 <vPortFree>
	}
 8005b30:	e00f      	b.n	8005b52 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d00a      	beq.n	8005b52 <prvDeleteTCB+0x56>
	__asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	60fb      	str	r3, [r7, #12]
}
 8005b4e:	bf00      	nop
 8005b50:	e7fe      	b.n	8005b50 <prvDeleteTCB+0x54>
	}
 8005b52:	bf00      	nop
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b62:	4b0c      	ldr	r3, [pc, #48]	; (8005b94 <prvResetNextTaskUnblockTime+0x38>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d104      	bne.n	8005b76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b6c:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <prvResetNextTaskUnblockTime+0x3c>)
 8005b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b74:	e008      	b.n	8005b88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b76:	4b07      	ldr	r3, [pc, #28]	; (8005b94 <prvResetNextTaskUnblockTime+0x38>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	4a04      	ldr	r2, [pc, #16]	; (8005b98 <prvResetNextTaskUnblockTime+0x3c>)
 8005b86:	6013      	str	r3, [r2, #0]
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	20000bf0 	.word	0x20000bf0
 8005b98:	20000c58 	.word	0x20000c58

08005b9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ba2:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <xTaskGetSchedulerState+0x34>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d102      	bne.n	8005bb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005baa:	2301      	movs	r3, #1
 8005bac:	607b      	str	r3, [r7, #4]
 8005bae:	e008      	b.n	8005bc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bb0:	4b08      	ldr	r3, [pc, #32]	; (8005bd4 <xTaskGetSchedulerState+0x38>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d102      	bne.n	8005bbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005bb8:	2302      	movs	r3, #2
 8005bba:	607b      	str	r3, [r7, #4]
 8005bbc:	e001      	b.n	8005bc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005bc2:	687b      	ldr	r3, [r7, #4]
	}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	20000c44 	.word	0x20000c44
 8005bd4:	20000c60 	.word	0x20000c60

08005bd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005be4:	2300      	movs	r3, #0
 8005be6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d056      	beq.n	8005c9c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005bee:	4b2e      	ldr	r3, [pc, #184]	; (8005ca8 <xTaskPriorityDisinherit+0xd0>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d00a      	beq.n	8005c0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	60fb      	str	r3, [r7, #12]
}
 8005c0a:	bf00      	nop
 8005c0c:	e7fe      	b.n	8005c0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10a      	bne.n	8005c2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	60bb      	str	r3, [r7, #8]
}
 8005c28:	bf00      	nop
 8005c2a:	e7fe      	b.n	8005c2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c30:	1e5a      	subs	r2, r3, #1
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d02c      	beq.n	8005c9c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d128      	bne.n	8005c9c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fe fc70 	bl	8004534 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6c:	4b0f      	ldr	r3, [pc, #60]	; (8005cac <xTaskPriorityDisinherit+0xd4>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d903      	bls.n	8005c7c <xTaskPriorityDisinherit+0xa4>
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c78:	4a0c      	ldr	r2, [pc, #48]	; (8005cac <xTaskPriorityDisinherit+0xd4>)
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c80:	4613      	mov	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4a09      	ldr	r2, [pc, #36]	; (8005cb0 <xTaskPriorityDisinherit+0xd8>)
 8005c8a:	441a      	add	r2, r3
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	4619      	mov	r1, r3
 8005c92:	4610      	mov	r0, r2
 8005c94:	f7fe fbf1 	bl	800447a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c9c:	697b      	ldr	r3, [r7, #20]
	}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20000764 	.word	0x20000764
 8005cac:	20000c40 	.word	0x20000c40
 8005cb0:	20000768 	.word	0x20000768

08005cb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005cbe:	4b21      	ldr	r3, [pc, #132]	; (8005d44 <prvAddCurrentTaskToDelayedList+0x90>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cc4:	4b20      	ldr	r3, [pc, #128]	; (8005d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fe fc32 	bl	8004534 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd6:	d10a      	bne.n	8005cee <prvAddCurrentTaskToDelayedList+0x3a>
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d007      	beq.n	8005cee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cde:	4b1a      	ldr	r3, [pc, #104]	; (8005d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4819      	ldr	r0, [pc, #100]	; (8005d4c <prvAddCurrentTaskToDelayedList+0x98>)
 8005ce8:	f7fe fbc7 	bl	800447a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cec:	e026      	b.n	8005d3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cf6:	4b14      	ldr	r3, [pc, #80]	; (8005d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d209      	bcs.n	8005d1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d06:	4b12      	ldr	r3, [pc, #72]	; (8005d50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	4b0f      	ldr	r3, [pc, #60]	; (8005d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	4619      	mov	r1, r3
 8005d12:	4610      	mov	r0, r2
 8005d14:	f7fe fbd5 	bl	80044c2 <vListInsert>
}
 8005d18:	e010      	b.n	8005d3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d1a:	4b0e      	ldr	r3, [pc, #56]	; (8005d54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	4b0a      	ldr	r3, [pc, #40]	; (8005d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3304      	adds	r3, #4
 8005d24:	4619      	mov	r1, r3
 8005d26:	4610      	mov	r0, r2
 8005d28:	f7fe fbcb 	bl	80044c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d2c:	4b0a      	ldr	r3, [pc, #40]	; (8005d58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d202      	bcs.n	8005d3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005d36:	4a08      	ldr	r2, [pc, #32]	; (8005d58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	6013      	str	r3, [r2, #0]
}
 8005d3c:	bf00      	nop
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	20000c3c 	.word	0x20000c3c
 8005d48:	20000764 	.word	0x20000764
 8005d4c:	20000c24 	.word	0x20000c24
 8005d50:	20000bf4 	.word	0x20000bf4
 8005d54:	20000bf0 	.word	0x20000bf0
 8005d58:	20000c58 	.word	0x20000c58

08005d5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08a      	sub	sp, #40	; 0x28
 8005d60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005d62:	2300      	movs	r3, #0
 8005d64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005d66:	f000 fb07 	bl	8006378 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005d6a:	4b1c      	ldr	r3, [pc, #112]	; (8005ddc <xTimerCreateTimerTask+0x80>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d021      	beq.n	8005db6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005d7a:	1d3a      	adds	r2, r7, #4
 8005d7c:	f107 0108 	add.w	r1, r7, #8
 8005d80:	f107 030c 	add.w	r3, r7, #12
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7fe fb31 	bl	80043ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	9202      	str	r2, [sp, #8]
 8005d92:	9301      	str	r3, [sp, #4]
 8005d94:	2302      	movs	r3, #2
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	2300      	movs	r3, #0
 8005d9a:	460a      	mov	r2, r1
 8005d9c:	4910      	ldr	r1, [pc, #64]	; (8005de0 <xTimerCreateTimerTask+0x84>)
 8005d9e:	4811      	ldr	r0, [pc, #68]	; (8005de4 <xTimerCreateTimerTask+0x88>)
 8005da0:	f7ff f8de 	bl	8004f60 <xTaskCreateStatic>
 8005da4:	4603      	mov	r3, r0
 8005da6:	4a10      	ldr	r2, [pc, #64]	; (8005de8 <xTimerCreateTimerTask+0x8c>)
 8005da8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005daa:	4b0f      	ldr	r3, [pc, #60]	; (8005de8 <xTimerCreateTimerTask+0x8c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005db2:	2301      	movs	r3, #1
 8005db4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10a      	bne.n	8005dd2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	613b      	str	r3, [r7, #16]
}
 8005dce:	bf00      	nop
 8005dd0:	e7fe      	b.n	8005dd0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005dd2:	697b      	ldr	r3, [r7, #20]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	20000c94 	.word	0x20000c94
 8005de0:	080079f8 	.word	0x080079f8
 8005de4:	08005f21 	.word	0x08005f21
 8005de8:	20000c98 	.word	0x20000c98

08005dec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b08a      	sub	sp, #40	; 0x28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
 8005df8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10a      	bne.n	8005e1a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	623b      	str	r3, [r7, #32]
}
 8005e16:	bf00      	nop
 8005e18:	e7fe      	b.n	8005e18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005e1a:	4b1a      	ldr	r3, [pc, #104]	; (8005e84 <xTimerGenericCommand+0x98>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d02a      	beq.n	8005e78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2b05      	cmp	r3, #5
 8005e32:	dc18      	bgt.n	8005e66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e34:	f7ff feb2 	bl	8005b9c <xTaskGetSchedulerState>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d109      	bne.n	8005e52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e3e:	4b11      	ldr	r3, [pc, #68]	; (8005e84 <xTimerGenericCommand+0x98>)
 8005e40:	6818      	ldr	r0, [r3, #0]
 8005e42:	f107 0110 	add.w	r1, r7, #16
 8005e46:	2300      	movs	r3, #0
 8005e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e4a:	f7fe fca1 	bl	8004790 <xQueueGenericSend>
 8005e4e:	6278      	str	r0, [r7, #36]	; 0x24
 8005e50:	e012      	b.n	8005e78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005e52:	4b0c      	ldr	r3, [pc, #48]	; (8005e84 <xTimerGenericCommand+0x98>)
 8005e54:	6818      	ldr	r0, [r3, #0]
 8005e56:	f107 0110 	add.w	r1, r7, #16
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f7fe fc97 	bl	8004790 <xQueueGenericSend>
 8005e62:	6278      	str	r0, [r7, #36]	; 0x24
 8005e64:	e008      	b.n	8005e78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005e66:	4b07      	ldr	r3, [pc, #28]	; (8005e84 <xTimerGenericCommand+0x98>)
 8005e68:	6818      	ldr	r0, [r3, #0]
 8005e6a:	f107 0110 	add.w	r1, r7, #16
 8005e6e:	2300      	movs	r3, #0
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	f7fe fd8b 	bl	800498c <xQueueGenericSendFromISR>
 8005e76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3728      	adds	r7, #40	; 0x28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	20000c94 	.word	0x20000c94

08005e88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b088      	sub	sp, #32
 8005e8c:	af02      	add	r7, sp, #8
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e92:	4b22      	ldr	r3, [pc, #136]	; (8005f1c <prvProcessExpiredTimer+0x94>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fe fb47 	bl	8004534 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005eac:	f003 0304 	and.w	r3, r3, #4
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d022      	beq.n	8005efa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	699a      	ldr	r2, [r3, #24]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	18d1      	adds	r1, r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	6978      	ldr	r0, [r7, #20]
 8005ec2:	f000 f8d1 	bl	8006068 <prvInsertTimerInActiveList>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d01f      	beq.n	8005f0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ecc:	2300      	movs	r3, #0
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	6978      	ldr	r0, [r7, #20]
 8005ed8:	f7ff ff88 	bl	8005dec <xTimerGenericCommand>
 8005edc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d113      	bne.n	8005f0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	60fb      	str	r3, [r7, #12]
}
 8005ef6:	bf00      	nop
 8005ef8:	e7fe      	b.n	8005ef8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f00:	f023 0301 	bic.w	r3, r3, #1
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	6978      	ldr	r0, [r7, #20]
 8005f12:	4798      	blx	r3
}
 8005f14:	bf00      	nop
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	20000c8c 	.word	0x20000c8c

08005f20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f28:	f107 0308 	add.w	r3, r7, #8
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 f857 	bl	8005fe0 <prvGetNextExpireTime>
 8005f32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	4619      	mov	r1, r3
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 f803 	bl	8005f44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005f3e:	f000 f8d5 	bl	80060ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f42:	e7f1      	b.n	8005f28 <prvTimerTask+0x8>

08005f44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005f4e:	f7ff fa43 	bl	80053d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f52:	f107 0308 	add.w	r3, r7, #8
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 f866 	bl	8006028 <prvSampleTimeNow>
 8005f5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d130      	bne.n	8005fc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10a      	bne.n	8005f80 <prvProcessTimerOrBlockTask+0x3c>
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d806      	bhi.n	8005f80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005f72:	f7ff fa3f 	bl	80053f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005f76:	68f9      	ldr	r1, [r7, #12]
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7ff ff85 	bl	8005e88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005f7e:	e024      	b.n	8005fca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d008      	beq.n	8005f98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f86:	4b13      	ldr	r3, [pc, #76]	; (8005fd4 <prvProcessTimerOrBlockTask+0x90>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <prvProcessTimerOrBlockTask+0x50>
 8005f90:	2301      	movs	r3, #1
 8005f92:	e000      	b.n	8005f96 <prvProcessTimerOrBlockTask+0x52>
 8005f94:	2300      	movs	r3, #0
 8005f96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f98:	4b0f      	ldr	r3, [pc, #60]	; (8005fd8 <prvProcessTimerOrBlockTask+0x94>)
 8005f9a:	6818      	ldr	r0, [r3, #0]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	f7fe ffa7 	bl	8004ef8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005faa:	f7ff fa23 	bl	80053f4 <xTaskResumeAll>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10a      	bne.n	8005fca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005fb4:	4b09      	ldr	r3, [pc, #36]	; (8005fdc <prvProcessTimerOrBlockTask+0x98>)
 8005fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fba:	601a      	str	r2, [r3, #0]
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	f3bf 8f6f 	isb	sy
}
 8005fc4:	e001      	b.n	8005fca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005fc6:	f7ff fa15 	bl	80053f4 <xTaskResumeAll>
}
 8005fca:	bf00      	nop
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20000c90 	.word	0x20000c90
 8005fd8:	20000c94 	.word	0x20000c94
 8005fdc:	e000ed04 	.word	0xe000ed04

08005fe0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005fe8:	4b0e      	ldr	r3, [pc, #56]	; (8006024 <prvGetNextExpireTime+0x44>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <prvGetNextExpireTime+0x16>
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	e000      	b.n	8005ff8 <prvGetNextExpireTime+0x18>
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d105      	bne.n	8006010 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006004:	4b07      	ldr	r3, [pc, #28]	; (8006024 <prvGetNextExpireTime+0x44>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	60fb      	str	r3, [r7, #12]
 800600e:	e001      	b.n	8006014 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006014:	68fb      	ldr	r3, [r7, #12]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	20000c8c 	.word	0x20000c8c

08006028 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006030:	f7ff fa7e 	bl	8005530 <xTaskGetTickCount>
 8006034:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006036:	4b0b      	ldr	r3, [pc, #44]	; (8006064 <prvSampleTimeNow+0x3c>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	429a      	cmp	r2, r3
 800603e:	d205      	bcs.n	800604c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006040:	f000 f936 	bl	80062b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	e002      	b.n	8006052 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006052:	4a04      	ldr	r2, [pc, #16]	; (8006064 <prvSampleTimeNow+0x3c>)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006058:	68fb      	ldr	r3, [r7, #12]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	20000c9c 	.word	0x20000c9c

08006068 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006076:	2300      	movs	r3, #0
 8006078:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	429a      	cmp	r2, r3
 800608c:	d812      	bhi.n	80060b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	1ad2      	subs	r2, r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	429a      	cmp	r2, r3
 800609a:	d302      	bcc.n	80060a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800609c:	2301      	movs	r3, #1
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	e01b      	b.n	80060da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80060a2:	4b10      	ldr	r3, [pc, #64]	; (80060e4 <prvInsertTimerInActiveList+0x7c>)
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3304      	adds	r3, #4
 80060aa:	4619      	mov	r1, r3
 80060ac:	4610      	mov	r0, r2
 80060ae:	f7fe fa08 	bl	80044c2 <vListInsert>
 80060b2:	e012      	b.n	80060da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d206      	bcs.n	80060ca <prvInsertTimerInActiveList+0x62>
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d302      	bcc.n	80060ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80060c4:	2301      	movs	r3, #1
 80060c6:	617b      	str	r3, [r7, #20]
 80060c8:	e007      	b.n	80060da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060ca:	4b07      	ldr	r3, [pc, #28]	; (80060e8 <prvInsertTimerInActiveList+0x80>)
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3304      	adds	r3, #4
 80060d2:	4619      	mov	r1, r3
 80060d4:	4610      	mov	r0, r2
 80060d6:	f7fe f9f4 	bl	80044c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80060da:	697b      	ldr	r3, [r7, #20]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	20000c90 	.word	0x20000c90
 80060e8:	20000c8c 	.word	0x20000c8c

080060ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b08e      	sub	sp, #56	; 0x38
 80060f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060f2:	e0ca      	b.n	800628a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	da18      	bge.n	800612c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80060fa:	1d3b      	adds	r3, r7, #4
 80060fc:	3304      	adds	r3, #4
 80060fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10a      	bne.n	800611c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	61fb      	str	r3, [r7, #28]
}
 8006118:	bf00      	nop
 800611a:	e7fe      	b.n	800611a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800611c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006122:	6850      	ldr	r0, [r2, #4]
 8006124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006126:	6892      	ldr	r2, [r2, #8]
 8006128:	4611      	mov	r1, r2
 800612a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	f2c0 80aa 	blt.w	8006288 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d004      	beq.n	800614a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006142:	3304      	adds	r3, #4
 8006144:	4618      	mov	r0, r3
 8006146:	f7fe f9f5 	bl	8004534 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800614a:	463b      	mov	r3, r7
 800614c:	4618      	mov	r0, r3
 800614e:	f7ff ff6b 	bl	8006028 <prvSampleTimeNow>
 8006152:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b09      	cmp	r3, #9
 8006158:	f200 8097 	bhi.w	800628a <prvProcessReceivedCommands+0x19e>
 800615c:	a201      	add	r2, pc, #4	; (adr r2, 8006164 <prvProcessReceivedCommands+0x78>)
 800615e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006162:	bf00      	nop
 8006164:	0800618d 	.word	0x0800618d
 8006168:	0800618d 	.word	0x0800618d
 800616c:	0800618d 	.word	0x0800618d
 8006170:	08006201 	.word	0x08006201
 8006174:	08006215 	.word	0x08006215
 8006178:	0800625f 	.word	0x0800625f
 800617c:	0800618d 	.word	0x0800618d
 8006180:	0800618d 	.word	0x0800618d
 8006184:	08006201 	.word	0x08006201
 8006188:	08006215 	.word	0x08006215
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006192:	f043 0301 	orr.w	r3, r3, #1
 8006196:	b2da      	uxtb	r2, r3
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	18d1      	adds	r1, r2, r3
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ac:	f7ff ff5c 	bl	8006068 <prvInsertTimerInActiveList>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d069      	beq.n	800628a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d05e      	beq.n	800628a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	441a      	add	r2, r3
 80061d4:	2300      	movs	r3, #0
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	2300      	movs	r3, #0
 80061da:	2100      	movs	r1, #0
 80061dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061de:	f7ff fe05 	bl	8005dec <xTimerGenericCommand>
 80061e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80061e4:	6a3b      	ldr	r3, [r7, #32]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d14f      	bne.n	800628a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80061ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	61bb      	str	r3, [r7, #24]
}
 80061fc:	bf00      	nop
 80061fe:	e7fe      	b.n	80061fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006202:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006206:	f023 0301 	bic.w	r3, r3, #1
 800620a:	b2da      	uxtb	r2, r3
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006212:	e03a      	b.n	800628a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800621a:	f043 0301 	orr.w	r3, r3, #1
 800621e:	b2da      	uxtb	r2, r3
 8006220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006222:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10a      	bne.n	800624a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	617b      	str	r3, [r7, #20]
}
 8006246:	bf00      	nop
 8006248:	e7fe      	b.n	8006248 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800624a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624c:	699a      	ldr	r2, [r3, #24]
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006250:	18d1      	adds	r1, r2, r3
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006258:	f7ff ff06 	bl	8006068 <prvInsertTimerInActiveList>
					break;
 800625c:	e015      	b.n	800628a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800625e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006260:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b00      	cmp	r3, #0
 800626a:	d103      	bne.n	8006274 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800626c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800626e:	f000 fbdf 	bl	8006a30 <vPortFree>
 8006272:	e00a      	b.n	800628a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800627a:	f023 0301 	bic.w	r3, r3, #1
 800627e:	b2da      	uxtb	r2, r3
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006286:	e000      	b.n	800628a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006288:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800628a:	4b08      	ldr	r3, [pc, #32]	; (80062ac <prvProcessReceivedCommands+0x1c0>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	1d39      	adds	r1, r7, #4
 8006290:	2200      	movs	r2, #0
 8006292:	4618      	mov	r0, r3
 8006294:	f7fe fc16 	bl	8004ac4 <xQueueReceive>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	f47f af2a 	bne.w	80060f4 <prvProcessReceivedCommands+0x8>
	}
}
 80062a0:	bf00      	nop
 80062a2:	bf00      	nop
 80062a4:	3730      	adds	r7, #48	; 0x30
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20000c94 	.word	0x20000c94

080062b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b088      	sub	sp, #32
 80062b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062b6:	e048      	b.n	800634a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062b8:	4b2d      	ldr	r3, [pc, #180]	; (8006370 <prvSwitchTimerLists+0xc0>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062c2:	4b2b      	ldr	r3, [pc, #172]	; (8006370 <prvSwitchTimerLists+0xc0>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	3304      	adds	r3, #4
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7fe f92f 	bl	8004534 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d02e      	beq.n	800634a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4413      	add	r3, r2
 80062f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d90e      	bls.n	800631c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800630a:	4b19      	ldr	r3, [pc, #100]	; (8006370 <prvSwitchTimerLists+0xc0>)
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3304      	adds	r3, #4
 8006312:	4619      	mov	r1, r3
 8006314:	4610      	mov	r0, r2
 8006316:	f7fe f8d4 	bl	80044c2 <vListInsert>
 800631a:	e016      	b.n	800634a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800631c:	2300      	movs	r3, #0
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	2300      	movs	r3, #0
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	2100      	movs	r1, #0
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f7ff fd60 	bl	8005dec <xTimerGenericCommand>
 800632c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10a      	bne.n	800634a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	603b      	str	r3, [r7, #0]
}
 8006346:	bf00      	nop
 8006348:	e7fe      	b.n	8006348 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800634a:	4b09      	ldr	r3, [pc, #36]	; (8006370 <prvSwitchTimerLists+0xc0>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1b1      	bne.n	80062b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006354:	4b06      	ldr	r3, [pc, #24]	; (8006370 <prvSwitchTimerLists+0xc0>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800635a:	4b06      	ldr	r3, [pc, #24]	; (8006374 <prvSwitchTimerLists+0xc4>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a04      	ldr	r2, [pc, #16]	; (8006370 <prvSwitchTimerLists+0xc0>)
 8006360:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006362:	4a04      	ldr	r2, [pc, #16]	; (8006374 <prvSwitchTimerLists+0xc4>)
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	6013      	str	r3, [r2, #0]
}
 8006368:	bf00      	nop
 800636a:	3718      	adds	r7, #24
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	20000c8c 	.word	0x20000c8c
 8006374:	20000c90 	.word	0x20000c90

08006378 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800637e:	f000 f969 	bl	8006654 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006382:	4b15      	ldr	r3, [pc, #84]	; (80063d8 <prvCheckForValidListAndQueue+0x60>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d120      	bne.n	80063cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800638a:	4814      	ldr	r0, [pc, #80]	; (80063dc <prvCheckForValidListAndQueue+0x64>)
 800638c:	f7fe f848 	bl	8004420 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006390:	4813      	ldr	r0, [pc, #76]	; (80063e0 <prvCheckForValidListAndQueue+0x68>)
 8006392:	f7fe f845 	bl	8004420 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006396:	4b13      	ldr	r3, [pc, #76]	; (80063e4 <prvCheckForValidListAndQueue+0x6c>)
 8006398:	4a10      	ldr	r2, [pc, #64]	; (80063dc <prvCheckForValidListAndQueue+0x64>)
 800639a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800639c:	4b12      	ldr	r3, [pc, #72]	; (80063e8 <prvCheckForValidListAndQueue+0x70>)
 800639e:	4a10      	ldr	r2, [pc, #64]	; (80063e0 <prvCheckForValidListAndQueue+0x68>)
 80063a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80063a2:	2300      	movs	r3, #0
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	4b11      	ldr	r3, [pc, #68]	; (80063ec <prvCheckForValidListAndQueue+0x74>)
 80063a8:	4a11      	ldr	r2, [pc, #68]	; (80063f0 <prvCheckForValidListAndQueue+0x78>)
 80063aa:	2110      	movs	r1, #16
 80063ac:	200a      	movs	r0, #10
 80063ae:	f7fe f953 	bl	8004658 <xQueueGenericCreateStatic>
 80063b2:	4603      	mov	r3, r0
 80063b4:	4a08      	ldr	r2, [pc, #32]	; (80063d8 <prvCheckForValidListAndQueue+0x60>)
 80063b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80063b8:	4b07      	ldr	r3, [pc, #28]	; (80063d8 <prvCheckForValidListAndQueue+0x60>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d005      	beq.n	80063cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80063c0:	4b05      	ldr	r3, [pc, #20]	; (80063d8 <prvCheckForValidListAndQueue+0x60>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	490b      	ldr	r1, [pc, #44]	; (80063f4 <prvCheckForValidListAndQueue+0x7c>)
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fe fd6c 	bl	8004ea4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063cc:	f000 f972 	bl	80066b4 <vPortExitCritical>
}
 80063d0:	bf00      	nop
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20000c94 	.word	0x20000c94
 80063dc:	20000c64 	.word	0x20000c64
 80063e0:	20000c78 	.word	0x20000c78
 80063e4:	20000c8c 	.word	0x20000c8c
 80063e8:	20000c90 	.word	0x20000c90
 80063ec:	20000d40 	.word	0x20000d40
 80063f0:	20000ca0 	.word	0x20000ca0
 80063f4:	08007a00 	.word	0x08007a00

080063f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3b04      	subs	r3, #4
 8006408:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006410:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3b04      	subs	r3, #4
 8006416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	f023 0201 	bic.w	r2, r3, #1
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	3b04      	subs	r3, #4
 8006426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006428:	4a0c      	ldr	r2, [pc, #48]	; (800645c <pxPortInitialiseStack+0x64>)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3b14      	subs	r3, #20
 8006432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	3b04      	subs	r3, #4
 800643e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f06f 0202 	mvn.w	r2, #2
 8006446:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	3b20      	subs	r3, #32
 800644c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800644e:	68fb      	ldr	r3, [r7, #12]
}
 8006450:	4618      	mov	r0, r3
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	08006461 	.word	0x08006461

08006460 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006466:	2300      	movs	r3, #0
 8006468:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800646a:	4b12      	ldr	r3, [pc, #72]	; (80064b4 <prvTaskExitError+0x54>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006472:	d00a      	beq.n	800648a <prvTaskExitError+0x2a>
	__asm volatile
 8006474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	60fb      	str	r3, [r7, #12]
}
 8006486:	bf00      	nop
 8006488:	e7fe      	b.n	8006488 <prvTaskExitError+0x28>
	__asm volatile
 800648a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	60bb      	str	r3, [r7, #8]
}
 800649c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800649e:	bf00      	nop
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d0fc      	beq.n	80064a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80064a6:	bf00      	nop
 80064a8:	bf00      	nop
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	2000000c 	.word	0x2000000c
	...

080064c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80064c0:	4b07      	ldr	r3, [pc, #28]	; (80064e0 <pxCurrentTCBConst2>)
 80064c2:	6819      	ldr	r1, [r3, #0]
 80064c4:	6808      	ldr	r0, [r1, #0]
 80064c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ca:	f380 8809 	msr	PSP, r0
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f04f 0000 	mov.w	r0, #0
 80064d6:	f380 8811 	msr	BASEPRI, r0
 80064da:	4770      	bx	lr
 80064dc:	f3af 8000 	nop.w

080064e0 <pxCurrentTCBConst2>:
 80064e0:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064e4:	bf00      	nop
 80064e6:	bf00      	nop

080064e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80064e8:	4808      	ldr	r0, [pc, #32]	; (800650c <prvPortStartFirstTask+0x24>)
 80064ea:	6800      	ldr	r0, [r0, #0]
 80064ec:	6800      	ldr	r0, [r0, #0]
 80064ee:	f380 8808 	msr	MSP, r0
 80064f2:	f04f 0000 	mov.w	r0, #0
 80064f6:	f380 8814 	msr	CONTROL, r0
 80064fa:	b662      	cpsie	i
 80064fc:	b661      	cpsie	f
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	df00      	svc	0
 8006508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800650a:	bf00      	nop
 800650c:	e000ed08 	.word	0xe000ed08

08006510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006516:	4b46      	ldr	r3, [pc, #280]	; (8006630 <xPortStartScheduler+0x120>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a46      	ldr	r2, [pc, #280]	; (8006634 <xPortStartScheduler+0x124>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d10a      	bne.n	8006536 <xPortStartScheduler+0x26>
	__asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	613b      	str	r3, [r7, #16]
}
 8006532:	bf00      	nop
 8006534:	e7fe      	b.n	8006534 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006536:	4b3e      	ldr	r3, [pc, #248]	; (8006630 <xPortStartScheduler+0x120>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a3f      	ldr	r2, [pc, #252]	; (8006638 <xPortStartScheduler+0x128>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d10a      	bne.n	8006556 <xPortStartScheduler+0x46>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	60fb      	str	r3, [r7, #12]
}
 8006552:	bf00      	nop
 8006554:	e7fe      	b.n	8006554 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006556:	4b39      	ldr	r3, [pc, #228]	; (800663c <xPortStartScheduler+0x12c>)
 8006558:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	b2db      	uxtb	r3, r3
 8006560:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	22ff      	movs	r2, #255	; 0xff
 8006566:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006570:	78fb      	ldrb	r3, [r7, #3]
 8006572:	b2db      	uxtb	r3, r3
 8006574:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006578:	b2da      	uxtb	r2, r3
 800657a:	4b31      	ldr	r3, [pc, #196]	; (8006640 <xPortStartScheduler+0x130>)
 800657c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800657e:	4b31      	ldr	r3, [pc, #196]	; (8006644 <xPortStartScheduler+0x134>)
 8006580:	2207      	movs	r2, #7
 8006582:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006584:	e009      	b.n	800659a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006586:	4b2f      	ldr	r3, [pc, #188]	; (8006644 <xPortStartScheduler+0x134>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	3b01      	subs	r3, #1
 800658c:	4a2d      	ldr	r2, [pc, #180]	; (8006644 <xPortStartScheduler+0x134>)
 800658e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006590:	78fb      	ldrb	r3, [r7, #3]
 8006592:	b2db      	uxtb	r3, r3
 8006594:	005b      	lsls	r3, r3, #1
 8006596:	b2db      	uxtb	r3, r3
 8006598:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800659a:	78fb      	ldrb	r3, [r7, #3]
 800659c:	b2db      	uxtb	r3, r3
 800659e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a2:	2b80      	cmp	r3, #128	; 0x80
 80065a4:	d0ef      	beq.n	8006586 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80065a6:	4b27      	ldr	r3, [pc, #156]	; (8006644 <xPortStartScheduler+0x134>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f1c3 0307 	rsb	r3, r3, #7
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d00a      	beq.n	80065c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	60bb      	str	r3, [r7, #8]
}
 80065c4:	bf00      	nop
 80065c6:	e7fe      	b.n	80065c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80065c8:	4b1e      	ldr	r3, [pc, #120]	; (8006644 <xPortStartScheduler+0x134>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	021b      	lsls	r3, r3, #8
 80065ce:	4a1d      	ldr	r2, [pc, #116]	; (8006644 <xPortStartScheduler+0x134>)
 80065d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065d2:	4b1c      	ldr	r3, [pc, #112]	; (8006644 <xPortStartScheduler+0x134>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065da:	4a1a      	ldr	r2, [pc, #104]	; (8006644 <xPortStartScheduler+0x134>)
 80065dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80065e6:	4b18      	ldr	r3, [pc, #96]	; (8006648 <xPortStartScheduler+0x138>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a17      	ldr	r2, [pc, #92]	; (8006648 <xPortStartScheduler+0x138>)
 80065ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80065f2:	4b15      	ldr	r3, [pc, #84]	; (8006648 <xPortStartScheduler+0x138>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a14      	ldr	r2, [pc, #80]	; (8006648 <xPortStartScheduler+0x138>)
 80065f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80065fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80065fe:	f000 f8dd 	bl	80067bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006602:	4b12      	ldr	r3, [pc, #72]	; (800664c <xPortStartScheduler+0x13c>)
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006608:	f000 f8fc 	bl	8006804 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800660c:	4b10      	ldr	r3, [pc, #64]	; (8006650 <xPortStartScheduler+0x140>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a0f      	ldr	r2, [pc, #60]	; (8006650 <xPortStartScheduler+0x140>)
 8006612:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006616:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006618:	f7ff ff66 	bl	80064e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800661c:	f7ff f852 	bl	80056c4 <vTaskSwitchContext>
	prvTaskExitError();
 8006620:	f7ff ff1e 	bl	8006460 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	e000ed00 	.word	0xe000ed00
 8006634:	410fc271 	.word	0x410fc271
 8006638:	410fc270 	.word	0x410fc270
 800663c:	e000e400 	.word	0xe000e400
 8006640:	20000d90 	.word	0x20000d90
 8006644:	20000d94 	.word	0x20000d94
 8006648:	e000ed20 	.word	0xe000ed20
 800664c:	2000000c 	.word	0x2000000c
 8006650:	e000ef34 	.word	0xe000ef34

08006654 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
	__asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	607b      	str	r3, [r7, #4]
}
 800666c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800666e:	4b0f      	ldr	r3, [pc, #60]	; (80066ac <vPortEnterCritical+0x58>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3301      	adds	r3, #1
 8006674:	4a0d      	ldr	r2, [pc, #52]	; (80066ac <vPortEnterCritical+0x58>)
 8006676:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006678:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <vPortEnterCritical+0x58>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d10f      	bne.n	80066a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006680:	4b0b      	ldr	r3, [pc, #44]	; (80066b0 <vPortEnterCritical+0x5c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00a      	beq.n	80066a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	603b      	str	r3, [r7, #0]
}
 800669c:	bf00      	nop
 800669e:	e7fe      	b.n	800669e <vPortEnterCritical+0x4a>
	}
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	2000000c 	.word	0x2000000c
 80066b0:	e000ed04 	.word	0xe000ed04

080066b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80066ba:	4b12      	ldr	r3, [pc, #72]	; (8006704 <vPortExitCritical+0x50>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10a      	bne.n	80066d8 <vPortExitCritical+0x24>
	__asm volatile
 80066c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	607b      	str	r3, [r7, #4]
}
 80066d4:	bf00      	nop
 80066d6:	e7fe      	b.n	80066d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80066d8:	4b0a      	ldr	r3, [pc, #40]	; (8006704 <vPortExitCritical+0x50>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3b01      	subs	r3, #1
 80066de:	4a09      	ldr	r2, [pc, #36]	; (8006704 <vPortExitCritical+0x50>)
 80066e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80066e2:	4b08      	ldr	r3, [pc, #32]	; (8006704 <vPortExitCritical+0x50>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d105      	bne.n	80066f6 <vPortExitCritical+0x42>
 80066ea:	2300      	movs	r3, #0
 80066ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	f383 8811 	msr	BASEPRI, r3
}
 80066f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80066f6:	bf00      	nop
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	2000000c 	.word	0x2000000c
	...

08006710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006710:	f3ef 8009 	mrs	r0, PSP
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	4b15      	ldr	r3, [pc, #84]	; (8006770 <pxCurrentTCBConst>)
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	f01e 0f10 	tst.w	lr, #16
 8006720:	bf08      	it	eq
 8006722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672a:	6010      	str	r0, [r2, #0]
 800672c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006730:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006734:	f380 8811 	msr	BASEPRI, r0
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f7fe ffc0 	bl	80056c4 <vTaskSwitchContext>
 8006744:	f04f 0000 	mov.w	r0, #0
 8006748:	f380 8811 	msr	BASEPRI, r0
 800674c:	bc09      	pop	{r0, r3}
 800674e:	6819      	ldr	r1, [r3, #0]
 8006750:	6808      	ldr	r0, [r1, #0]
 8006752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006756:	f01e 0f10 	tst.w	lr, #16
 800675a:	bf08      	it	eq
 800675c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006760:	f380 8809 	msr	PSP, r0
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	f3af 8000 	nop.w

08006770 <pxCurrentTCBConst>:
 8006770:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006774:	bf00      	nop
 8006776:	bf00      	nop

08006778 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	607b      	str	r3, [r7, #4]
}
 8006790:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006792:	f7fe fedd 	bl	8005550 <xTaskIncrementTick>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800679c:	4b06      	ldr	r3, [pc, #24]	; (80067b8 <xPortSysTickHandler+0x40>)
 800679e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	2300      	movs	r3, #0
 80067a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	f383 8811 	msr	BASEPRI, r3
}
 80067ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80067b0:	bf00      	nop
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	e000ed04 	.word	0xe000ed04

080067bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80067bc:	b480      	push	{r7}
 80067be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067c0:	4b0b      	ldr	r3, [pc, #44]	; (80067f0 <vPortSetupTimerInterrupt+0x34>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80067c6:	4b0b      	ldr	r3, [pc, #44]	; (80067f4 <vPortSetupTimerInterrupt+0x38>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80067cc:	4b0a      	ldr	r3, [pc, #40]	; (80067f8 <vPortSetupTimerInterrupt+0x3c>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a0a      	ldr	r2, [pc, #40]	; (80067fc <vPortSetupTimerInterrupt+0x40>)
 80067d2:	fba2 2303 	umull	r2, r3, r2, r3
 80067d6:	099b      	lsrs	r3, r3, #6
 80067d8:	4a09      	ldr	r2, [pc, #36]	; (8006800 <vPortSetupTimerInterrupt+0x44>)
 80067da:	3b01      	subs	r3, #1
 80067dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80067de:	4b04      	ldr	r3, [pc, #16]	; (80067f0 <vPortSetupTimerInterrupt+0x34>)
 80067e0:	2207      	movs	r2, #7
 80067e2:	601a      	str	r2, [r3, #0]
}
 80067e4:	bf00      	nop
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	e000e010 	.word	0xe000e010
 80067f4:	e000e018 	.word	0xe000e018
 80067f8:	20000000 	.word	0x20000000
 80067fc:	10624dd3 	.word	0x10624dd3
 8006800:	e000e014 	.word	0xe000e014

08006804 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006804:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006814 <vPortEnableVFP+0x10>
 8006808:	6801      	ldr	r1, [r0, #0]
 800680a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800680e:	6001      	str	r1, [r0, #0]
 8006810:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006812:	bf00      	nop
 8006814:	e000ed88 	.word	0xe000ed88

08006818 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800681e:	f3ef 8305 	mrs	r3, IPSR
 8006822:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2b0f      	cmp	r3, #15
 8006828:	d914      	bls.n	8006854 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800682a:	4a17      	ldr	r2, [pc, #92]	; (8006888 <vPortValidateInterruptPriority+0x70>)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4413      	add	r3, r2
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006834:	4b15      	ldr	r3, [pc, #84]	; (800688c <vPortValidateInterruptPriority+0x74>)
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	7afa      	ldrb	r2, [r7, #11]
 800683a:	429a      	cmp	r2, r3
 800683c:	d20a      	bcs.n	8006854 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	607b      	str	r3, [r7, #4]
}
 8006850:	bf00      	nop
 8006852:	e7fe      	b.n	8006852 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006854:	4b0e      	ldr	r3, [pc, #56]	; (8006890 <vPortValidateInterruptPriority+0x78>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800685c:	4b0d      	ldr	r3, [pc, #52]	; (8006894 <vPortValidateInterruptPriority+0x7c>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	429a      	cmp	r2, r3
 8006862:	d90a      	bls.n	800687a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	603b      	str	r3, [r7, #0]
}
 8006876:	bf00      	nop
 8006878:	e7fe      	b.n	8006878 <vPortValidateInterruptPriority+0x60>
	}
 800687a:	bf00      	nop
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	e000e3f0 	.word	0xe000e3f0
 800688c:	20000d90 	.word	0x20000d90
 8006890:	e000ed0c 	.word	0xe000ed0c
 8006894:	20000d94 	.word	0x20000d94

08006898 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08a      	sub	sp, #40	; 0x28
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80068a0:	2300      	movs	r3, #0
 80068a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80068a4:	f7fe fd98 	bl	80053d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80068a8:	4b5b      	ldr	r3, [pc, #364]	; (8006a18 <pvPortMalloc+0x180>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80068b0:	f000 f920 	bl	8006af4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80068b4:	4b59      	ldr	r3, [pc, #356]	; (8006a1c <pvPortMalloc+0x184>)
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4013      	ands	r3, r2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f040 8093 	bne.w	80069e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d01d      	beq.n	8006904 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80068c8:	2208      	movs	r2, #8
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4413      	add	r3, r2
 80068ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f003 0307 	and.w	r3, r3, #7
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d014      	beq.n	8006904 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f023 0307 	bic.w	r3, r3, #7
 80068e0:	3308      	adds	r3, #8
 80068e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f003 0307 	and.w	r3, r3, #7
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00a      	beq.n	8006904 <pvPortMalloc+0x6c>
	__asm volatile
 80068ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	617b      	str	r3, [r7, #20]
}
 8006900:	bf00      	nop
 8006902:	e7fe      	b.n	8006902 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d06e      	beq.n	80069e8 <pvPortMalloc+0x150>
 800690a:	4b45      	ldr	r3, [pc, #276]	; (8006a20 <pvPortMalloc+0x188>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	429a      	cmp	r2, r3
 8006912:	d869      	bhi.n	80069e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006914:	4b43      	ldr	r3, [pc, #268]	; (8006a24 <pvPortMalloc+0x18c>)
 8006916:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006918:	4b42      	ldr	r3, [pc, #264]	; (8006a24 <pvPortMalloc+0x18c>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800691e:	e004      	b.n	800692a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	429a      	cmp	r2, r3
 8006932:	d903      	bls.n	800693c <pvPortMalloc+0xa4>
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1f1      	bne.n	8006920 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800693c:	4b36      	ldr	r3, [pc, #216]	; (8006a18 <pvPortMalloc+0x180>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006942:	429a      	cmp	r2, r3
 8006944:	d050      	beq.n	80069e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2208      	movs	r2, #8
 800694c:	4413      	add	r3, r2
 800694e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	6a3b      	ldr	r3, [r7, #32]
 8006956:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	1ad2      	subs	r2, r2, r3
 8006960:	2308      	movs	r3, #8
 8006962:	005b      	lsls	r3, r3, #1
 8006964:	429a      	cmp	r2, r3
 8006966:	d91f      	bls.n	80069a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4413      	add	r3, r2
 800696e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	f003 0307 	and.w	r3, r3, #7
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00a      	beq.n	8006990 <pvPortMalloc+0xf8>
	__asm volatile
 800697a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	613b      	str	r3, [r7, #16]
}
 800698c:	bf00      	nop
 800698e:	e7fe      	b.n	800698e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	1ad2      	subs	r2, r2, r3
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80069a2:	69b8      	ldr	r0, [r7, #24]
 80069a4:	f000 f908 	bl	8006bb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80069a8:	4b1d      	ldr	r3, [pc, #116]	; (8006a20 <pvPortMalloc+0x188>)
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	4a1b      	ldr	r2, [pc, #108]	; (8006a20 <pvPortMalloc+0x188>)
 80069b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80069b6:	4b1a      	ldr	r3, [pc, #104]	; (8006a20 <pvPortMalloc+0x188>)
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	4b1b      	ldr	r3, [pc, #108]	; (8006a28 <pvPortMalloc+0x190>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d203      	bcs.n	80069ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80069c2:	4b17      	ldr	r3, [pc, #92]	; (8006a20 <pvPortMalloc+0x188>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a18      	ldr	r2, [pc, #96]	; (8006a28 <pvPortMalloc+0x190>)
 80069c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	4b13      	ldr	r3, [pc, #76]	; (8006a1c <pvPortMalloc+0x184>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	431a      	orrs	r2, r3
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80069de:	4b13      	ldr	r3, [pc, #76]	; (8006a2c <pvPortMalloc+0x194>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3301      	adds	r3, #1
 80069e4:	4a11      	ldr	r2, [pc, #68]	; (8006a2c <pvPortMalloc+0x194>)
 80069e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80069e8:	f7fe fd04 	bl	80053f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	f003 0307 	and.w	r3, r3, #7
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00a      	beq.n	8006a0c <pvPortMalloc+0x174>
	__asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	60fb      	str	r3, [r7, #12]
}
 8006a08:	bf00      	nop
 8006a0a:	e7fe      	b.n	8006a0a <pvPortMalloc+0x172>
	return pvReturn;
 8006a0c:	69fb      	ldr	r3, [r7, #28]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3728      	adds	r7, #40	; 0x28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	200049a0 	.word	0x200049a0
 8006a1c:	200049b4 	.word	0x200049b4
 8006a20:	200049a4 	.word	0x200049a4
 8006a24:	20004998 	.word	0x20004998
 8006a28:	200049a8 	.word	0x200049a8
 8006a2c:	200049ac 	.word	0x200049ac

08006a30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d04d      	beq.n	8006ade <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a42:	2308      	movs	r3, #8
 8006a44:	425b      	negs	r3, r3
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	4413      	add	r3, r2
 8006a4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	4b24      	ldr	r3, [pc, #144]	; (8006ae8 <vPortFree+0xb8>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4013      	ands	r3, r2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10a      	bne.n	8006a74 <vPortFree+0x44>
	__asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	60fb      	str	r3, [r7, #12]
}
 8006a70:	bf00      	nop
 8006a72:	e7fe      	b.n	8006a72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00a      	beq.n	8006a92 <vPortFree+0x62>
	__asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	60bb      	str	r3, [r7, #8]
}
 8006a8e:	bf00      	nop
 8006a90:	e7fe      	b.n	8006a90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	4b14      	ldr	r3, [pc, #80]	; (8006ae8 <vPortFree+0xb8>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d01e      	beq.n	8006ade <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d11a      	bne.n	8006ade <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	4b0e      	ldr	r3, [pc, #56]	; (8006ae8 <vPortFree+0xb8>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	43db      	mvns	r3, r3
 8006ab2:	401a      	ands	r2, r3
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ab8:	f7fe fc8e 	bl	80053d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	685a      	ldr	r2, [r3, #4]
 8006ac0:	4b0a      	ldr	r3, [pc, #40]	; (8006aec <vPortFree+0xbc>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	4a09      	ldr	r2, [pc, #36]	; (8006aec <vPortFree+0xbc>)
 8006ac8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006aca:	6938      	ldr	r0, [r7, #16]
 8006acc:	f000 f874 	bl	8006bb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006ad0:	4b07      	ldr	r3, [pc, #28]	; (8006af0 <vPortFree+0xc0>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	4a06      	ldr	r2, [pc, #24]	; (8006af0 <vPortFree+0xc0>)
 8006ad8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006ada:	f7fe fc8b 	bl	80053f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ade:	bf00      	nop
 8006ae0:	3718      	adds	r7, #24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	200049b4 	.word	0x200049b4
 8006aec:	200049a4 	.word	0x200049a4
 8006af0:	200049b0 	.word	0x200049b0

08006af4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006afa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006afe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b00:	4b27      	ldr	r3, [pc, #156]	; (8006ba0 <prvHeapInit+0xac>)
 8006b02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f003 0307 	and.w	r3, r3, #7
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00c      	beq.n	8006b28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	3307      	adds	r3, #7
 8006b12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0307 	bic.w	r3, r3, #7
 8006b1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	4a1f      	ldr	r2, [pc, #124]	; (8006ba0 <prvHeapInit+0xac>)
 8006b24:	4413      	add	r3, r2
 8006b26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b2c:	4a1d      	ldr	r2, [pc, #116]	; (8006ba4 <prvHeapInit+0xb0>)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b32:	4b1c      	ldr	r3, [pc, #112]	; (8006ba4 <prvHeapInit+0xb0>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b40:	2208      	movs	r2, #8
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	1a9b      	subs	r3, r3, r2
 8006b46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f023 0307 	bic.w	r3, r3, #7
 8006b4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4a15      	ldr	r2, [pc, #84]	; (8006ba8 <prvHeapInit+0xb4>)
 8006b54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b56:	4b14      	ldr	r3, [pc, #80]	; (8006ba8 <prvHeapInit+0xb4>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b5e:	4b12      	ldr	r3, [pc, #72]	; (8006ba8 <prvHeapInit+0xb4>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2200      	movs	r2, #0
 8006b64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	1ad2      	subs	r2, r2, r3
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b74:	4b0c      	ldr	r3, [pc, #48]	; (8006ba8 <prvHeapInit+0xb4>)
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	4a0a      	ldr	r2, [pc, #40]	; (8006bac <prvHeapInit+0xb8>)
 8006b82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	4a09      	ldr	r2, [pc, #36]	; (8006bb0 <prvHeapInit+0xbc>)
 8006b8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b8c:	4b09      	ldr	r3, [pc, #36]	; (8006bb4 <prvHeapInit+0xc0>)
 8006b8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b92:	601a      	str	r2, [r3, #0]
}
 8006b94:	bf00      	nop
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	20000d98 	.word	0x20000d98
 8006ba4:	20004998 	.word	0x20004998
 8006ba8:	200049a0 	.word	0x200049a0
 8006bac:	200049a8 	.word	0x200049a8
 8006bb0:	200049a4 	.word	0x200049a4
 8006bb4:	200049b4 	.word	0x200049b4

08006bb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006bc0:	4b28      	ldr	r3, [pc, #160]	; (8006c64 <prvInsertBlockIntoFreeList+0xac>)
 8006bc2:	60fb      	str	r3, [r7, #12]
 8006bc4:	e002      	b.n	8006bcc <prvInsertBlockIntoFreeList+0x14>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	60fb      	str	r3, [r7, #12]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d8f7      	bhi.n	8006bc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	4413      	add	r3, r2
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d108      	bne.n	8006bfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	441a      	add	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	441a      	add	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d118      	bne.n	8006c40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	4b15      	ldr	r3, [pc, #84]	; (8006c68 <prvInsertBlockIntoFreeList+0xb0>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d00d      	beq.n	8006c36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	441a      	add	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	601a      	str	r2, [r3, #0]
 8006c34:	e008      	b.n	8006c48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c36:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <prvInsertBlockIntoFreeList+0xb0>)
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	e003      	b.n	8006c48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d002      	beq.n	8006c56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c56:	bf00      	nop
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	20004998 	.word	0x20004998
 8006c68:	200049a0 	.word	0x200049a0

08006c6c <OLED_Refresh_Gram>:
#include "stdlib.h"
#include "oledfont.h"  

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8006c72:	2300      	movs	r3, #0
 8006c74:	71fb      	strb	r3, [r7, #7]
 8006c76:	e026      	b.n	8006cc6 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8006c78:	79fb      	ldrb	r3, [r7, #7]
 8006c7a:	3b50      	subs	r3, #80	; 0x50
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2100      	movs	r1, #0
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 f82b 	bl	8006cdc <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8006c86:	2100      	movs	r1, #0
 8006c88:	2000      	movs	r0, #0
 8006c8a:	f000 f827 	bl	8006cdc <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8006c8e:	2100      	movs	r1, #0
 8006c90:	2010      	movs	r0, #16
 8006c92:	f000 f823 	bl	8006cdc <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8006c96:	2300      	movs	r3, #0
 8006c98:	71bb      	strb	r3, [r7, #6]
 8006c9a:	e00d      	b.n	8006cb8 <OLED_Refresh_Gram+0x4c>
 8006c9c:	79ba      	ldrb	r2, [r7, #6]
 8006c9e:	79fb      	ldrb	r3, [r7, #7]
 8006ca0:	490d      	ldr	r1, [pc, #52]	; (8006cd8 <OLED_Refresh_Gram+0x6c>)
 8006ca2:	00d2      	lsls	r2, r2, #3
 8006ca4:	440a      	add	r2, r1
 8006ca6:	4413      	add	r3, r2
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	2101      	movs	r1, #1
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 f815 	bl	8006cdc <OLED_WR_Byte>
 8006cb2:	79bb      	ldrb	r3, [r7, #6]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	71bb      	strb	r3, [r7, #6]
 8006cb8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	daed      	bge.n	8006c9c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8006cc0:	79fb      	ldrb	r3, [r7, #7]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	71fb      	strb	r3, [r7, #7]
 8006cc6:	79fb      	ldrb	r3, [r7, #7]
 8006cc8:	2b07      	cmp	r3, #7
 8006cca:	d9d5      	bls.n	8006c78 <OLED_Refresh_Gram+0xc>
	}   
}
 8006ccc:	bf00      	nop
 8006cce:	bf00      	nop
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20004b98 	.word	0x20004b98

08006cdc <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	460a      	mov	r2, r1
 8006ce6:	71fb      	strb	r3, [r7, #7]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8006cec:	79bb      	ldrb	r3, [r7, #6]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d006      	beq.n	8006d00 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006cf8:	481c      	ldr	r0, [pc, #112]	; (8006d6c <OLED_WR_Byte+0x90>)
 8006cfa:	f7fb fa4f 	bl	800219c <HAL_GPIO_WritePin>
 8006cfe:	e005      	b.n	8006d0c <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8006d00:	2200      	movs	r2, #0
 8006d02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d06:	4819      	ldr	r0, [pc, #100]	; (8006d6c <OLED_WR_Byte+0x90>)
 8006d08:	f7fb fa48 	bl	800219c <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	73fb      	strb	r3, [r7, #15]
 8006d10:	e01e      	b.n	8006d50 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8006d12:	2200      	movs	r2, #0
 8006d14:	2120      	movs	r1, #32
 8006d16:	4815      	ldr	r0, [pc, #84]	; (8006d6c <OLED_WR_Byte+0x90>)
 8006d18:	f7fb fa40 	bl	800219c <HAL_GPIO_WritePin>
		if(dat&0x80)
 8006d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	da05      	bge.n	8006d30 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8006d24:	2201      	movs	r2, #1
 8006d26:	2140      	movs	r1, #64	; 0x40
 8006d28:	4810      	ldr	r0, [pc, #64]	; (8006d6c <OLED_WR_Byte+0x90>)
 8006d2a:	f7fb fa37 	bl	800219c <HAL_GPIO_WritePin>
 8006d2e:	e004      	b.n	8006d3a <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8006d30:	2200      	movs	r2, #0
 8006d32:	2140      	movs	r1, #64	; 0x40
 8006d34:	480d      	ldr	r0, [pc, #52]	; (8006d6c <OLED_WR_Byte+0x90>)
 8006d36:	f7fb fa31 	bl	800219c <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	2120      	movs	r1, #32
 8006d3e:	480b      	ldr	r0, [pc, #44]	; (8006d6c <OLED_WR_Byte+0x90>)
 8006d40:	f7fb fa2c 	bl	800219c <HAL_GPIO_WritePin>
		dat<<=1;   
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	005b      	lsls	r3, r3, #1
 8006d48:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8006d4a:	7bfb      	ldrb	r3, [r7, #15]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	73fb      	strb	r3, [r7, #15]
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
 8006d52:	2b07      	cmp	r3, #7
 8006d54:	d9dd      	bls.n	8006d12 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8006d56:	2201      	movs	r2, #1
 8006d58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d5c:	4803      	ldr	r0, [pc, #12]	; (8006d6c <OLED_WR_Byte+0x90>)
 8006d5e:	f7fb fa1d 	bl	800219c <HAL_GPIO_WritePin>
} 
 8006d62:	bf00      	nop
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	40021000 	.word	0x40021000

08006d70 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8006d76:	2300      	movs	r3, #0
 8006d78:	71fb      	strb	r3, [r7, #7]
 8006d7a:	e014      	b.n	8006da6 <OLED_Clear+0x36>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	71bb      	strb	r3, [r7, #6]
 8006d80:	e00a      	b.n	8006d98 <OLED_Clear+0x28>
 8006d82:	79ba      	ldrb	r2, [r7, #6]
 8006d84:	79fb      	ldrb	r3, [r7, #7]
 8006d86:	490c      	ldr	r1, [pc, #48]	; (8006db8 <OLED_Clear+0x48>)
 8006d88:	00d2      	lsls	r2, r2, #3
 8006d8a:	440a      	add	r2, r1
 8006d8c:	4413      	add	r3, r2
 8006d8e:	2200      	movs	r2, #0
 8006d90:	701a      	strb	r2, [r3, #0]
 8006d92:	79bb      	ldrb	r3, [r7, #6]
 8006d94:	3301      	adds	r3, #1
 8006d96:	71bb      	strb	r3, [r7, #6]
 8006d98:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	daf0      	bge.n	8006d82 <OLED_Clear+0x12>
 8006da0:	79fb      	ldrb	r3, [r7, #7]
 8006da2:	3301      	adds	r3, #1
 8006da4:	71fb      	strb	r3, [r7, #7]
 8006da6:	79fb      	ldrb	r3, [r7, #7]
 8006da8:	2b07      	cmp	r3, #7
 8006daa:	d9e7      	bls.n	8006d7c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8006dac:	f7ff ff5e 	bl	8006c6c <OLED_Refresh_Gram>
}
 8006db0:	bf00      	nop
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	20004b98 	.word	0x20004b98

08006dbc <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	71fb      	strb	r3, [r7, #7]
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	71bb      	strb	r3, [r7, #6]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8006dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	db41      	blt.n	8006e5e <OLED_DrawPoint+0xa2>
 8006dda:	79bb      	ldrb	r3, [r7, #6]
 8006ddc:	2b3f      	cmp	r3, #63	; 0x3f
 8006dde:	d83e      	bhi.n	8006e5e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8006de0:	79bb      	ldrb	r3, [r7, #6]
 8006de2:	08db      	lsrs	r3, r3, #3
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	f1c3 0307 	rsb	r3, r3, #7
 8006dea:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8006dec:	79bb      	ldrb	r3, [r7, #6]
 8006dee:	f003 0307 	and.w	r3, r3, #7
 8006df2:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8006df4:	7b7b      	ldrb	r3, [r7, #13]
 8006df6:	f1c3 0307 	rsb	r3, r3, #7
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006e00:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8006e02:	797b      	ldrb	r3, [r7, #5]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d012      	beq.n	8006e2e <OLED_DrawPoint+0x72>
 8006e08:	79fa      	ldrb	r2, [r7, #7]
 8006e0a:	7bbb      	ldrb	r3, [r7, #14]
 8006e0c:	4917      	ldr	r1, [pc, #92]	; (8006e6c <OLED_DrawPoint+0xb0>)
 8006e0e:	00d2      	lsls	r2, r2, #3
 8006e10:	440a      	add	r2, r1
 8006e12:	4413      	add	r3, r2
 8006e14:	7818      	ldrb	r0, [r3, #0]
 8006e16:	79fa      	ldrb	r2, [r7, #7]
 8006e18:	7bbb      	ldrb	r3, [r7, #14]
 8006e1a:	7bf9      	ldrb	r1, [r7, #15]
 8006e1c:	4301      	orrs	r1, r0
 8006e1e:	b2c8      	uxtb	r0, r1
 8006e20:	4912      	ldr	r1, [pc, #72]	; (8006e6c <OLED_DrawPoint+0xb0>)
 8006e22:	00d2      	lsls	r2, r2, #3
 8006e24:	440a      	add	r2, r1
 8006e26:	4413      	add	r3, r2
 8006e28:	4602      	mov	r2, r0
 8006e2a:	701a      	strb	r2, [r3, #0]
 8006e2c:	e018      	b.n	8006e60 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8006e2e:	79fa      	ldrb	r2, [r7, #7]
 8006e30:	7bbb      	ldrb	r3, [r7, #14]
 8006e32:	490e      	ldr	r1, [pc, #56]	; (8006e6c <OLED_DrawPoint+0xb0>)
 8006e34:	00d2      	lsls	r2, r2, #3
 8006e36:	440a      	add	r2, r1
 8006e38:	4413      	add	r3, r2
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	b25a      	sxtb	r2, r3
 8006e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e42:	43db      	mvns	r3, r3
 8006e44:	b25b      	sxtb	r3, r3
 8006e46:	4013      	ands	r3, r2
 8006e48:	b259      	sxtb	r1, r3
 8006e4a:	79fa      	ldrb	r2, [r7, #7]
 8006e4c:	7bbb      	ldrb	r3, [r7, #14]
 8006e4e:	b2c8      	uxtb	r0, r1
 8006e50:	4906      	ldr	r1, [pc, #24]	; (8006e6c <OLED_DrawPoint+0xb0>)
 8006e52:	00d2      	lsls	r2, r2, #3
 8006e54:	440a      	add	r2, r1
 8006e56:	4413      	add	r3, r2
 8006e58:	4602      	mov	r2, r0
 8006e5a:	701a      	strb	r2, [r3, #0]
 8006e5c:	e000      	b.n	8006e60 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8006e5e:	bf00      	nop
}
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	20004b98 	.word	0x20004b98

08006e70 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8006e70:	b590      	push	{r4, r7, lr}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	4604      	mov	r4, r0
 8006e78:	4608      	mov	r0, r1
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	4623      	mov	r3, r4
 8006e80:	71fb      	strb	r3, [r7, #7]
 8006e82:	4603      	mov	r3, r0
 8006e84:	71bb      	strb	r3, [r7, #6]
 8006e86:	460b      	mov	r3, r1
 8006e88:	717b      	strb	r3, [r7, #5]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8006e8e:	79bb      	ldrb	r3, [r7, #6]
 8006e90:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8006e92:	797b      	ldrb	r3, [r7, #5]
 8006e94:	3b20      	subs	r3, #32
 8006e96:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8006e98:	2300      	movs	r3, #0
 8006e9a:	73bb      	strb	r3, [r7, #14]
 8006e9c:	e04d      	b.n	8006f3a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8006e9e:	793b      	ldrb	r3, [r7, #4]
 8006ea0:	2b0c      	cmp	r3, #12
 8006ea2:	d10b      	bne.n	8006ebc <OLED_ShowChar+0x4c>
 8006ea4:	797a      	ldrb	r2, [r7, #5]
 8006ea6:	7bb9      	ldrb	r1, [r7, #14]
 8006ea8:	4828      	ldr	r0, [pc, #160]	; (8006f4c <OLED_ShowChar+0xdc>)
 8006eaa:	4613      	mov	r3, r2
 8006eac:	005b      	lsls	r3, r3, #1
 8006eae:	4413      	add	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4403      	add	r3, r0
 8006eb4:	440b      	add	r3, r1
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	73fb      	strb	r3, [r7, #15]
 8006eba:	e007      	b.n	8006ecc <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8006ebc:	797a      	ldrb	r2, [r7, #5]
 8006ebe:	7bbb      	ldrb	r3, [r7, #14]
 8006ec0:	4923      	ldr	r1, [pc, #140]	; (8006f50 <OLED_ShowChar+0xe0>)
 8006ec2:	0112      	lsls	r2, r2, #4
 8006ec4:	440a      	add	r2, r1
 8006ec6:	4413      	add	r3, r2
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8006ecc:	2300      	movs	r3, #0
 8006ece:	737b      	strb	r3, [r7, #13]
 8006ed0:	e02d      	b.n	8006f2e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8006ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	da07      	bge.n	8006eea <OLED_ShowChar+0x7a>
 8006eda:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006ede:	79b9      	ldrb	r1, [r7, #6]
 8006ee0:	79fb      	ldrb	r3, [r7, #7]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7ff ff6a 	bl	8006dbc <OLED_DrawPoint>
 8006ee8:	e00c      	b.n	8006f04 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8006eea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	bf0c      	ite	eq
 8006ef2:	2301      	moveq	r3, #1
 8006ef4:	2300      	movne	r3, #0
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	461a      	mov	r2, r3
 8006efa:	79b9      	ldrb	r1, [r7, #6]
 8006efc:	79fb      	ldrb	r3, [r7, #7]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7ff ff5c 	bl	8006dbc <OLED_DrawPoint>
			temp<<=1;
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	73fb      	strb	r3, [r7, #15]
			y++;
 8006f0a:	79bb      	ldrb	r3, [r7, #6]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8006f10:	79ba      	ldrb	r2, [r7, #6]
 8006f12:	7b3b      	ldrb	r3, [r7, #12]
 8006f14:	1ad2      	subs	r2, r2, r3
 8006f16:	793b      	ldrb	r3, [r7, #4]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d105      	bne.n	8006f28 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8006f1c:	7b3b      	ldrb	r3, [r7, #12]
 8006f1e:	71bb      	strb	r3, [r7, #6]
				x++;
 8006f20:	79fb      	ldrb	r3, [r7, #7]
 8006f22:	3301      	adds	r3, #1
 8006f24:	71fb      	strb	r3, [r7, #7]
				break;
 8006f26:	e005      	b.n	8006f34 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8006f28:	7b7b      	ldrb	r3, [r7, #13]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	737b      	strb	r3, [r7, #13]
 8006f2e:	7b7b      	ldrb	r3, [r7, #13]
 8006f30:	2b07      	cmp	r3, #7
 8006f32:	d9ce      	bls.n	8006ed2 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8006f34:	7bbb      	ldrb	r3, [r7, #14]
 8006f36:	3301      	adds	r3, #1
 8006f38:	73bb      	strb	r3, [r7, #14]
 8006f3a:	7bba      	ldrb	r2, [r7, #14]
 8006f3c:	793b      	ldrb	r3, [r7, #4]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d3ad      	bcc.n	8006e9e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8006f42:	bf00      	nop
 8006f44:	bf00      	nop
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd90      	pop	{r4, r7, pc}
 8006f4c:	08007a60 	.word	0x08007a60
 8006f50:	08007ed4 	.word	0x08007ed4

08006f54 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af02      	add	r7, sp, #8
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	603a      	str	r2, [r7, #0]
 8006f5e:	71fb      	strb	r3, [r7, #7]
 8006f60:	460b      	mov	r3, r1
 8006f62:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8006f64:	e01f      	b.n	8006fa6 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8006f66:	79fb      	ldrb	r3, [r7, #7]
 8006f68:	2b7a      	cmp	r3, #122	; 0x7a
 8006f6a:	d904      	bls.n	8006f76 <OLED_ShowString+0x22>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	71fb      	strb	r3, [r7, #7]
 8006f70:	79bb      	ldrb	r3, [r7, #6]
 8006f72:	3310      	adds	r3, #16
 8006f74:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8006f76:	79bb      	ldrb	r3, [r7, #6]
 8006f78:	2b3a      	cmp	r3, #58	; 0x3a
 8006f7a:	d905      	bls.n	8006f88 <OLED_ShowString+0x34>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	71fb      	strb	r3, [r7, #7]
 8006f80:	79fb      	ldrb	r3, [r7, #7]
 8006f82:	71bb      	strb	r3, [r7, #6]
 8006f84:	f7ff fef4 	bl	8006d70 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781a      	ldrb	r2, [r3, #0]
 8006f8c:	79b9      	ldrb	r1, [r7, #6]
 8006f8e:	79f8      	ldrb	r0, [r7, #7]
 8006f90:	2301      	movs	r3, #1
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	230c      	movs	r3, #12
 8006f96:	f7ff ff6b 	bl	8006e70 <OLED_ShowChar>
        x+=8;
 8006f9a:	79fb      	ldrb	r3, [r7, #7]
 8006f9c:	3308      	adds	r3, #8
 8006f9e:	71fb      	strb	r3, [r7, #7]
        p++;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1db      	bne.n	8006f66 <OLED_ShowString+0x12>
    }  
}	 
 8006fae:	bf00      	nop
 8006fb0:	bf00      	nop
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <OLED_Init>:

void OLED_Init(void)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8006fbc:	f7fb f922 	bl	8002204 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8006fc0:	4b41      	ldr	r3, [pc, #260]	; (80070c8 <OLED_Init+0x110>)
 8006fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc4:	4a40      	ldr	r2, [pc, #256]	; (80070c8 <OLED_Init+0x110>)
 8006fc6:	f023 0301 	bic.w	r3, r3, #1
 8006fca:	6713      	str	r3, [r2, #112]	; 0x70
 8006fcc:	4b3e      	ldr	r3, [pc, #248]	; (80070c8 <OLED_Init+0x110>)
 8006fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd0:	4a3d      	ldr	r2, [pc, #244]	; (80070c8 <OLED_Init+0x110>)
 8006fd2:	f023 0304 	bic.w	r3, r3, #4
 8006fd6:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8006fd8:	f7fb f928 	bl	800222c <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2180      	movs	r1, #128	; 0x80
 8006fe0:	483a      	ldr	r0, [pc, #232]	; (80070cc <OLED_Init+0x114>)
 8006fe2:	f7fb f8db 	bl	800219c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8006fe6:	2064      	movs	r0, #100	; 0x64
 8006fe8:	f7fa fe06 	bl	8001bf8 <HAL_Delay>
	OLED_RST_Set();
 8006fec:	2201      	movs	r2, #1
 8006fee:	2180      	movs	r1, #128	; 0x80
 8006ff0:	4836      	ldr	r0, [pc, #216]	; (80070cc <OLED_Init+0x114>)
 8006ff2:	f7fb f8d3 	bl	800219c <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	20ae      	movs	r0, #174	; 0xae
 8006ffa:	f7ff fe6f 	bl	8006cdc <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8006ffe:	2100      	movs	r1, #0
 8007000:	20d5      	movs	r0, #213	; 0xd5
 8007002:	f7ff fe6b 	bl	8006cdc <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8007006:	2100      	movs	r1, #0
 8007008:	2050      	movs	r0, #80	; 0x50
 800700a:	f7ff fe67 	bl	8006cdc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800700e:	2100      	movs	r1, #0
 8007010:	20a8      	movs	r0, #168	; 0xa8
 8007012:	f7ff fe63 	bl	8006cdc <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8007016:	2100      	movs	r1, #0
 8007018:	203f      	movs	r0, #63	; 0x3f
 800701a:	f7ff fe5f 	bl	8006cdc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800701e:	2100      	movs	r1, #0
 8007020:	20d3      	movs	r0, #211	; 0xd3
 8007022:	f7ff fe5b 	bl	8006cdc <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8007026:	2100      	movs	r1, #0
 8007028:	2000      	movs	r0, #0
 800702a:	f7ff fe57 	bl	8006cdc <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800702e:	2100      	movs	r1, #0
 8007030:	2040      	movs	r0, #64	; 0x40
 8007032:	f7ff fe53 	bl	8006cdc <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8007036:	2100      	movs	r1, #0
 8007038:	208d      	movs	r0, #141	; 0x8d
 800703a:	f7ff fe4f 	bl	8006cdc <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800703e:	2100      	movs	r1, #0
 8007040:	2014      	movs	r0, #20
 8007042:	f7ff fe4b 	bl	8006cdc <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8007046:	2100      	movs	r1, #0
 8007048:	2020      	movs	r0, #32
 800704a:	f7ff fe47 	bl	8006cdc <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800704e:	2100      	movs	r1, #0
 8007050:	2002      	movs	r0, #2
 8007052:	f7ff fe43 	bl	8006cdc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8007056:	2100      	movs	r1, #0
 8007058:	20a1      	movs	r0, #161	; 0xa1
 800705a:	f7ff fe3f 	bl	8006cdc <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800705e:	2100      	movs	r1, #0
 8007060:	20c0      	movs	r0, #192	; 0xc0
 8007062:	f7ff fe3b 	bl	8006cdc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8007066:	2100      	movs	r1, #0
 8007068:	20da      	movs	r0, #218	; 0xda
 800706a:	f7ff fe37 	bl	8006cdc <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800706e:	2100      	movs	r1, #0
 8007070:	2012      	movs	r0, #18
 8007072:	f7ff fe33 	bl	8006cdc <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8007076:	2100      	movs	r1, #0
 8007078:	2081      	movs	r0, #129	; 0x81
 800707a:	f7ff fe2f 	bl	8006cdc <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800707e:	2100      	movs	r1, #0
 8007080:	20ef      	movs	r0, #239	; 0xef
 8007082:	f7ff fe2b 	bl	8006cdc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8007086:	2100      	movs	r1, #0
 8007088:	20d9      	movs	r0, #217	; 0xd9
 800708a:	f7ff fe27 	bl	8006cdc <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800708e:	2100      	movs	r1, #0
 8007090:	20f1      	movs	r0, #241	; 0xf1
 8007092:	f7ff fe23 	bl	8006cdc <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8007096:	2100      	movs	r1, #0
 8007098:	20db      	movs	r0, #219	; 0xdb
 800709a:	f7ff fe1f 	bl	8006cdc <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800709e:	2100      	movs	r1, #0
 80070a0:	2030      	movs	r0, #48	; 0x30
 80070a2:	f7ff fe1b 	bl	8006cdc <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80070a6:	2100      	movs	r1, #0
 80070a8:	20a4      	movs	r0, #164	; 0xa4
 80070aa:	f7ff fe17 	bl	8006cdc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 80070ae:	2100      	movs	r1, #0
 80070b0:	20a6      	movs	r0, #166	; 0xa6
 80070b2:	f7ff fe13 	bl	8006cdc <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 80070b6:	2100      	movs	r1, #0
 80070b8:	20af      	movs	r0, #175	; 0xaf
 80070ba:	f7ff fe0f 	bl	8006cdc <OLED_WR_Byte>
	OLED_Clear(); 
 80070be:	f7ff fe57 	bl	8006d70 <OLED_Clear>
 80070c2:	bf00      	nop
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	40023800 	.word	0x40023800
 80070cc:	40021000 	.word	0x40021000

080070d0 <__errno>:
 80070d0:	4b01      	ldr	r3, [pc, #4]	; (80070d8 <__errno+0x8>)
 80070d2:	6818      	ldr	r0, [r3, #0]
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	20000010 	.word	0x20000010

080070dc <__libc_init_array>:
 80070dc:	b570      	push	{r4, r5, r6, lr}
 80070de:	4d0d      	ldr	r5, [pc, #52]	; (8007114 <__libc_init_array+0x38>)
 80070e0:	4c0d      	ldr	r4, [pc, #52]	; (8007118 <__libc_init_array+0x3c>)
 80070e2:	1b64      	subs	r4, r4, r5
 80070e4:	10a4      	asrs	r4, r4, #2
 80070e6:	2600      	movs	r6, #0
 80070e8:	42a6      	cmp	r6, r4
 80070ea:	d109      	bne.n	8007100 <__libc_init_array+0x24>
 80070ec:	4d0b      	ldr	r5, [pc, #44]	; (800711c <__libc_init_array+0x40>)
 80070ee:	4c0c      	ldr	r4, [pc, #48]	; (8007120 <__libc_init_array+0x44>)
 80070f0:	f000 fc4e 	bl	8007990 <_init>
 80070f4:	1b64      	subs	r4, r4, r5
 80070f6:	10a4      	asrs	r4, r4, #2
 80070f8:	2600      	movs	r6, #0
 80070fa:	42a6      	cmp	r6, r4
 80070fc:	d105      	bne.n	800710a <__libc_init_array+0x2e>
 80070fe:	bd70      	pop	{r4, r5, r6, pc}
 8007100:	f855 3b04 	ldr.w	r3, [r5], #4
 8007104:	4798      	blx	r3
 8007106:	3601      	adds	r6, #1
 8007108:	e7ee      	b.n	80070e8 <__libc_init_array+0xc>
 800710a:	f855 3b04 	ldr.w	r3, [r5], #4
 800710e:	4798      	blx	r3
 8007110:	3601      	adds	r6, #1
 8007112:	e7f2      	b.n	80070fa <__libc_init_array+0x1e>
 8007114:	08008500 	.word	0x08008500
 8007118:	08008500 	.word	0x08008500
 800711c:	08008500 	.word	0x08008500
 8007120:	08008504 	.word	0x08008504

08007124 <memcpy>:
 8007124:	440a      	add	r2, r1
 8007126:	4291      	cmp	r1, r2
 8007128:	f100 33ff 	add.w	r3, r0, #4294967295
 800712c:	d100      	bne.n	8007130 <memcpy+0xc>
 800712e:	4770      	bx	lr
 8007130:	b510      	push	{r4, lr}
 8007132:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007136:	f803 4f01 	strb.w	r4, [r3, #1]!
 800713a:	4291      	cmp	r1, r2
 800713c:	d1f9      	bne.n	8007132 <memcpy+0xe>
 800713e:	bd10      	pop	{r4, pc}

08007140 <memset>:
 8007140:	4402      	add	r2, r0
 8007142:	4603      	mov	r3, r0
 8007144:	4293      	cmp	r3, r2
 8007146:	d100      	bne.n	800714a <memset+0xa>
 8007148:	4770      	bx	lr
 800714a:	f803 1b01 	strb.w	r1, [r3], #1
 800714e:	e7f9      	b.n	8007144 <memset+0x4>

08007150 <siprintf>:
 8007150:	b40e      	push	{r1, r2, r3}
 8007152:	b500      	push	{lr}
 8007154:	b09c      	sub	sp, #112	; 0x70
 8007156:	ab1d      	add	r3, sp, #116	; 0x74
 8007158:	9002      	str	r0, [sp, #8]
 800715a:	9006      	str	r0, [sp, #24]
 800715c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007160:	4809      	ldr	r0, [pc, #36]	; (8007188 <siprintf+0x38>)
 8007162:	9107      	str	r1, [sp, #28]
 8007164:	9104      	str	r1, [sp, #16]
 8007166:	4909      	ldr	r1, [pc, #36]	; (800718c <siprintf+0x3c>)
 8007168:	f853 2b04 	ldr.w	r2, [r3], #4
 800716c:	9105      	str	r1, [sp, #20]
 800716e:	6800      	ldr	r0, [r0, #0]
 8007170:	9301      	str	r3, [sp, #4]
 8007172:	a902      	add	r1, sp, #8
 8007174:	f000 f868 	bl	8007248 <_svfiprintf_r>
 8007178:	9b02      	ldr	r3, [sp, #8]
 800717a:	2200      	movs	r2, #0
 800717c:	701a      	strb	r2, [r3, #0]
 800717e:	b01c      	add	sp, #112	; 0x70
 8007180:	f85d eb04 	ldr.w	lr, [sp], #4
 8007184:	b003      	add	sp, #12
 8007186:	4770      	bx	lr
 8007188:	20000010 	.word	0x20000010
 800718c:	ffff0208 	.word	0xffff0208

08007190 <__ssputs_r>:
 8007190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007194:	688e      	ldr	r6, [r1, #8]
 8007196:	429e      	cmp	r6, r3
 8007198:	4682      	mov	sl, r0
 800719a:	460c      	mov	r4, r1
 800719c:	4690      	mov	r8, r2
 800719e:	461f      	mov	r7, r3
 80071a0:	d838      	bhi.n	8007214 <__ssputs_r+0x84>
 80071a2:	898a      	ldrh	r2, [r1, #12]
 80071a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071a8:	d032      	beq.n	8007210 <__ssputs_r+0x80>
 80071aa:	6825      	ldr	r5, [r4, #0]
 80071ac:	6909      	ldr	r1, [r1, #16]
 80071ae:	eba5 0901 	sub.w	r9, r5, r1
 80071b2:	6965      	ldr	r5, [r4, #20]
 80071b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071bc:	3301      	adds	r3, #1
 80071be:	444b      	add	r3, r9
 80071c0:	106d      	asrs	r5, r5, #1
 80071c2:	429d      	cmp	r5, r3
 80071c4:	bf38      	it	cc
 80071c6:	461d      	movcc	r5, r3
 80071c8:	0553      	lsls	r3, r2, #21
 80071ca:	d531      	bpl.n	8007230 <__ssputs_r+0xa0>
 80071cc:	4629      	mov	r1, r5
 80071ce:	f000 fb39 	bl	8007844 <_malloc_r>
 80071d2:	4606      	mov	r6, r0
 80071d4:	b950      	cbnz	r0, 80071ec <__ssputs_r+0x5c>
 80071d6:	230c      	movs	r3, #12
 80071d8:	f8ca 3000 	str.w	r3, [sl]
 80071dc:	89a3      	ldrh	r3, [r4, #12]
 80071de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071e2:	81a3      	strh	r3, [r4, #12]
 80071e4:	f04f 30ff 	mov.w	r0, #4294967295
 80071e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ec:	6921      	ldr	r1, [r4, #16]
 80071ee:	464a      	mov	r2, r9
 80071f0:	f7ff ff98 	bl	8007124 <memcpy>
 80071f4:	89a3      	ldrh	r3, [r4, #12]
 80071f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071fe:	81a3      	strh	r3, [r4, #12]
 8007200:	6126      	str	r6, [r4, #16]
 8007202:	6165      	str	r5, [r4, #20]
 8007204:	444e      	add	r6, r9
 8007206:	eba5 0509 	sub.w	r5, r5, r9
 800720a:	6026      	str	r6, [r4, #0]
 800720c:	60a5      	str	r5, [r4, #8]
 800720e:	463e      	mov	r6, r7
 8007210:	42be      	cmp	r6, r7
 8007212:	d900      	bls.n	8007216 <__ssputs_r+0x86>
 8007214:	463e      	mov	r6, r7
 8007216:	4632      	mov	r2, r6
 8007218:	6820      	ldr	r0, [r4, #0]
 800721a:	4641      	mov	r1, r8
 800721c:	f000 faa8 	bl	8007770 <memmove>
 8007220:	68a3      	ldr	r3, [r4, #8]
 8007222:	6822      	ldr	r2, [r4, #0]
 8007224:	1b9b      	subs	r3, r3, r6
 8007226:	4432      	add	r2, r6
 8007228:	60a3      	str	r3, [r4, #8]
 800722a:	6022      	str	r2, [r4, #0]
 800722c:	2000      	movs	r0, #0
 800722e:	e7db      	b.n	80071e8 <__ssputs_r+0x58>
 8007230:	462a      	mov	r2, r5
 8007232:	f000 fb61 	bl	80078f8 <_realloc_r>
 8007236:	4606      	mov	r6, r0
 8007238:	2800      	cmp	r0, #0
 800723a:	d1e1      	bne.n	8007200 <__ssputs_r+0x70>
 800723c:	6921      	ldr	r1, [r4, #16]
 800723e:	4650      	mov	r0, sl
 8007240:	f000 fab0 	bl	80077a4 <_free_r>
 8007244:	e7c7      	b.n	80071d6 <__ssputs_r+0x46>
	...

08007248 <_svfiprintf_r>:
 8007248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724c:	4698      	mov	r8, r3
 800724e:	898b      	ldrh	r3, [r1, #12]
 8007250:	061b      	lsls	r3, r3, #24
 8007252:	b09d      	sub	sp, #116	; 0x74
 8007254:	4607      	mov	r7, r0
 8007256:	460d      	mov	r5, r1
 8007258:	4614      	mov	r4, r2
 800725a:	d50e      	bpl.n	800727a <_svfiprintf_r+0x32>
 800725c:	690b      	ldr	r3, [r1, #16]
 800725e:	b963      	cbnz	r3, 800727a <_svfiprintf_r+0x32>
 8007260:	2140      	movs	r1, #64	; 0x40
 8007262:	f000 faef 	bl	8007844 <_malloc_r>
 8007266:	6028      	str	r0, [r5, #0]
 8007268:	6128      	str	r0, [r5, #16]
 800726a:	b920      	cbnz	r0, 8007276 <_svfiprintf_r+0x2e>
 800726c:	230c      	movs	r3, #12
 800726e:	603b      	str	r3, [r7, #0]
 8007270:	f04f 30ff 	mov.w	r0, #4294967295
 8007274:	e0d1      	b.n	800741a <_svfiprintf_r+0x1d2>
 8007276:	2340      	movs	r3, #64	; 0x40
 8007278:	616b      	str	r3, [r5, #20]
 800727a:	2300      	movs	r3, #0
 800727c:	9309      	str	r3, [sp, #36]	; 0x24
 800727e:	2320      	movs	r3, #32
 8007280:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007284:	f8cd 800c 	str.w	r8, [sp, #12]
 8007288:	2330      	movs	r3, #48	; 0x30
 800728a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007434 <_svfiprintf_r+0x1ec>
 800728e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007292:	f04f 0901 	mov.w	r9, #1
 8007296:	4623      	mov	r3, r4
 8007298:	469a      	mov	sl, r3
 800729a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800729e:	b10a      	cbz	r2, 80072a4 <_svfiprintf_r+0x5c>
 80072a0:	2a25      	cmp	r2, #37	; 0x25
 80072a2:	d1f9      	bne.n	8007298 <_svfiprintf_r+0x50>
 80072a4:	ebba 0b04 	subs.w	fp, sl, r4
 80072a8:	d00b      	beq.n	80072c2 <_svfiprintf_r+0x7a>
 80072aa:	465b      	mov	r3, fp
 80072ac:	4622      	mov	r2, r4
 80072ae:	4629      	mov	r1, r5
 80072b0:	4638      	mov	r0, r7
 80072b2:	f7ff ff6d 	bl	8007190 <__ssputs_r>
 80072b6:	3001      	adds	r0, #1
 80072b8:	f000 80aa 	beq.w	8007410 <_svfiprintf_r+0x1c8>
 80072bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072be:	445a      	add	r2, fp
 80072c0:	9209      	str	r2, [sp, #36]	; 0x24
 80072c2:	f89a 3000 	ldrb.w	r3, [sl]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f000 80a2 	beq.w	8007410 <_svfiprintf_r+0x1c8>
 80072cc:	2300      	movs	r3, #0
 80072ce:	f04f 32ff 	mov.w	r2, #4294967295
 80072d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072d6:	f10a 0a01 	add.w	sl, sl, #1
 80072da:	9304      	str	r3, [sp, #16]
 80072dc:	9307      	str	r3, [sp, #28]
 80072de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072e2:	931a      	str	r3, [sp, #104]	; 0x68
 80072e4:	4654      	mov	r4, sl
 80072e6:	2205      	movs	r2, #5
 80072e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ec:	4851      	ldr	r0, [pc, #324]	; (8007434 <_svfiprintf_r+0x1ec>)
 80072ee:	f7f8 ff6f 	bl	80001d0 <memchr>
 80072f2:	9a04      	ldr	r2, [sp, #16]
 80072f4:	b9d8      	cbnz	r0, 800732e <_svfiprintf_r+0xe6>
 80072f6:	06d0      	lsls	r0, r2, #27
 80072f8:	bf44      	itt	mi
 80072fa:	2320      	movmi	r3, #32
 80072fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007300:	0711      	lsls	r1, r2, #28
 8007302:	bf44      	itt	mi
 8007304:	232b      	movmi	r3, #43	; 0x2b
 8007306:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800730a:	f89a 3000 	ldrb.w	r3, [sl]
 800730e:	2b2a      	cmp	r3, #42	; 0x2a
 8007310:	d015      	beq.n	800733e <_svfiprintf_r+0xf6>
 8007312:	9a07      	ldr	r2, [sp, #28]
 8007314:	4654      	mov	r4, sl
 8007316:	2000      	movs	r0, #0
 8007318:	f04f 0c0a 	mov.w	ip, #10
 800731c:	4621      	mov	r1, r4
 800731e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007322:	3b30      	subs	r3, #48	; 0x30
 8007324:	2b09      	cmp	r3, #9
 8007326:	d94e      	bls.n	80073c6 <_svfiprintf_r+0x17e>
 8007328:	b1b0      	cbz	r0, 8007358 <_svfiprintf_r+0x110>
 800732a:	9207      	str	r2, [sp, #28]
 800732c:	e014      	b.n	8007358 <_svfiprintf_r+0x110>
 800732e:	eba0 0308 	sub.w	r3, r0, r8
 8007332:	fa09 f303 	lsl.w	r3, r9, r3
 8007336:	4313      	orrs	r3, r2
 8007338:	9304      	str	r3, [sp, #16]
 800733a:	46a2      	mov	sl, r4
 800733c:	e7d2      	b.n	80072e4 <_svfiprintf_r+0x9c>
 800733e:	9b03      	ldr	r3, [sp, #12]
 8007340:	1d19      	adds	r1, r3, #4
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	9103      	str	r1, [sp, #12]
 8007346:	2b00      	cmp	r3, #0
 8007348:	bfbb      	ittet	lt
 800734a:	425b      	neglt	r3, r3
 800734c:	f042 0202 	orrlt.w	r2, r2, #2
 8007350:	9307      	strge	r3, [sp, #28]
 8007352:	9307      	strlt	r3, [sp, #28]
 8007354:	bfb8      	it	lt
 8007356:	9204      	strlt	r2, [sp, #16]
 8007358:	7823      	ldrb	r3, [r4, #0]
 800735a:	2b2e      	cmp	r3, #46	; 0x2e
 800735c:	d10c      	bne.n	8007378 <_svfiprintf_r+0x130>
 800735e:	7863      	ldrb	r3, [r4, #1]
 8007360:	2b2a      	cmp	r3, #42	; 0x2a
 8007362:	d135      	bne.n	80073d0 <_svfiprintf_r+0x188>
 8007364:	9b03      	ldr	r3, [sp, #12]
 8007366:	1d1a      	adds	r2, r3, #4
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	9203      	str	r2, [sp, #12]
 800736c:	2b00      	cmp	r3, #0
 800736e:	bfb8      	it	lt
 8007370:	f04f 33ff 	movlt.w	r3, #4294967295
 8007374:	3402      	adds	r4, #2
 8007376:	9305      	str	r3, [sp, #20]
 8007378:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007444 <_svfiprintf_r+0x1fc>
 800737c:	7821      	ldrb	r1, [r4, #0]
 800737e:	2203      	movs	r2, #3
 8007380:	4650      	mov	r0, sl
 8007382:	f7f8 ff25 	bl	80001d0 <memchr>
 8007386:	b140      	cbz	r0, 800739a <_svfiprintf_r+0x152>
 8007388:	2340      	movs	r3, #64	; 0x40
 800738a:	eba0 000a 	sub.w	r0, r0, sl
 800738e:	fa03 f000 	lsl.w	r0, r3, r0
 8007392:	9b04      	ldr	r3, [sp, #16]
 8007394:	4303      	orrs	r3, r0
 8007396:	3401      	adds	r4, #1
 8007398:	9304      	str	r3, [sp, #16]
 800739a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800739e:	4826      	ldr	r0, [pc, #152]	; (8007438 <_svfiprintf_r+0x1f0>)
 80073a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073a4:	2206      	movs	r2, #6
 80073a6:	f7f8 ff13 	bl	80001d0 <memchr>
 80073aa:	2800      	cmp	r0, #0
 80073ac:	d038      	beq.n	8007420 <_svfiprintf_r+0x1d8>
 80073ae:	4b23      	ldr	r3, [pc, #140]	; (800743c <_svfiprintf_r+0x1f4>)
 80073b0:	bb1b      	cbnz	r3, 80073fa <_svfiprintf_r+0x1b2>
 80073b2:	9b03      	ldr	r3, [sp, #12]
 80073b4:	3307      	adds	r3, #7
 80073b6:	f023 0307 	bic.w	r3, r3, #7
 80073ba:	3308      	adds	r3, #8
 80073bc:	9303      	str	r3, [sp, #12]
 80073be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c0:	4433      	add	r3, r6
 80073c2:	9309      	str	r3, [sp, #36]	; 0x24
 80073c4:	e767      	b.n	8007296 <_svfiprintf_r+0x4e>
 80073c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80073ca:	460c      	mov	r4, r1
 80073cc:	2001      	movs	r0, #1
 80073ce:	e7a5      	b.n	800731c <_svfiprintf_r+0xd4>
 80073d0:	2300      	movs	r3, #0
 80073d2:	3401      	adds	r4, #1
 80073d4:	9305      	str	r3, [sp, #20]
 80073d6:	4619      	mov	r1, r3
 80073d8:	f04f 0c0a 	mov.w	ip, #10
 80073dc:	4620      	mov	r0, r4
 80073de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073e2:	3a30      	subs	r2, #48	; 0x30
 80073e4:	2a09      	cmp	r2, #9
 80073e6:	d903      	bls.n	80073f0 <_svfiprintf_r+0x1a8>
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d0c5      	beq.n	8007378 <_svfiprintf_r+0x130>
 80073ec:	9105      	str	r1, [sp, #20]
 80073ee:	e7c3      	b.n	8007378 <_svfiprintf_r+0x130>
 80073f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80073f4:	4604      	mov	r4, r0
 80073f6:	2301      	movs	r3, #1
 80073f8:	e7f0      	b.n	80073dc <_svfiprintf_r+0x194>
 80073fa:	ab03      	add	r3, sp, #12
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	462a      	mov	r2, r5
 8007400:	4b0f      	ldr	r3, [pc, #60]	; (8007440 <_svfiprintf_r+0x1f8>)
 8007402:	a904      	add	r1, sp, #16
 8007404:	4638      	mov	r0, r7
 8007406:	f3af 8000 	nop.w
 800740a:	1c42      	adds	r2, r0, #1
 800740c:	4606      	mov	r6, r0
 800740e:	d1d6      	bne.n	80073be <_svfiprintf_r+0x176>
 8007410:	89ab      	ldrh	r3, [r5, #12]
 8007412:	065b      	lsls	r3, r3, #25
 8007414:	f53f af2c 	bmi.w	8007270 <_svfiprintf_r+0x28>
 8007418:	9809      	ldr	r0, [sp, #36]	; 0x24
 800741a:	b01d      	add	sp, #116	; 0x74
 800741c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007420:	ab03      	add	r3, sp, #12
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	462a      	mov	r2, r5
 8007426:	4b06      	ldr	r3, [pc, #24]	; (8007440 <_svfiprintf_r+0x1f8>)
 8007428:	a904      	add	r1, sp, #16
 800742a:	4638      	mov	r0, r7
 800742c:	f000 f87a 	bl	8007524 <_printf_i>
 8007430:	e7eb      	b.n	800740a <_svfiprintf_r+0x1c2>
 8007432:	bf00      	nop
 8007434:	080084c4 	.word	0x080084c4
 8007438:	080084ce 	.word	0x080084ce
 800743c:	00000000 	.word	0x00000000
 8007440:	08007191 	.word	0x08007191
 8007444:	080084ca 	.word	0x080084ca

08007448 <_printf_common>:
 8007448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800744c:	4616      	mov	r6, r2
 800744e:	4699      	mov	r9, r3
 8007450:	688a      	ldr	r2, [r1, #8]
 8007452:	690b      	ldr	r3, [r1, #16]
 8007454:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007458:	4293      	cmp	r3, r2
 800745a:	bfb8      	it	lt
 800745c:	4613      	movlt	r3, r2
 800745e:	6033      	str	r3, [r6, #0]
 8007460:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007464:	4607      	mov	r7, r0
 8007466:	460c      	mov	r4, r1
 8007468:	b10a      	cbz	r2, 800746e <_printf_common+0x26>
 800746a:	3301      	adds	r3, #1
 800746c:	6033      	str	r3, [r6, #0]
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	0699      	lsls	r1, r3, #26
 8007472:	bf42      	ittt	mi
 8007474:	6833      	ldrmi	r3, [r6, #0]
 8007476:	3302      	addmi	r3, #2
 8007478:	6033      	strmi	r3, [r6, #0]
 800747a:	6825      	ldr	r5, [r4, #0]
 800747c:	f015 0506 	ands.w	r5, r5, #6
 8007480:	d106      	bne.n	8007490 <_printf_common+0x48>
 8007482:	f104 0a19 	add.w	sl, r4, #25
 8007486:	68e3      	ldr	r3, [r4, #12]
 8007488:	6832      	ldr	r2, [r6, #0]
 800748a:	1a9b      	subs	r3, r3, r2
 800748c:	42ab      	cmp	r3, r5
 800748e:	dc26      	bgt.n	80074de <_printf_common+0x96>
 8007490:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007494:	1e13      	subs	r3, r2, #0
 8007496:	6822      	ldr	r2, [r4, #0]
 8007498:	bf18      	it	ne
 800749a:	2301      	movne	r3, #1
 800749c:	0692      	lsls	r2, r2, #26
 800749e:	d42b      	bmi.n	80074f8 <_printf_common+0xb0>
 80074a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074a4:	4649      	mov	r1, r9
 80074a6:	4638      	mov	r0, r7
 80074a8:	47c0      	blx	r8
 80074aa:	3001      	adds	r0, #1
 80074ac:	d01e      	beq.n	80074ec <_printf_common+0xa4>
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	68e5      	ldr	r5, [r4, #12]
 80074b2:	6832      	ldr	r2, [r6, #0]
 80074b4:	f003 0306 	and.w	r3, r3, #6
 80074b8:	2b04      	cmp	r3, #4
 80074ba:	bf08      	it	eq
 80074bc:	1aad      	subeq	r5, r5, r2
 80074be:	68a3      	ldr	r3, [r4, #8]
 80074c0:	6922      	ldr	r2, [r4, #16]
 80074c2:	bf0c      	ite	eq
 80074c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074c8:	2500      	movne	r5, #0
 80074ca:	4293      	cmp	r3, r2
 80074cc:	bfc4      	itt	gt
 80074ce:	1a9b      	subgt	r3, r3, r2
 80074d0:	18ed      	addgt	r5, r5, r3
 80074d2:	2600      	movs	r6, #0
 80074d4:	341a      	adds	r4, #26
 80074d6:	42b5      	cmp	r5, r6
 80074d8:	d11a      	bne.n	8007510 <_printf_common+0xc8>
 80074da:	2000      	movs	r0, #0
 80074dc:	e008      	b.n	80074f0 <_printf_common+0xa8>
 80074de:	2301      	movs	r3, #1
 80074e0:	4652      	mov	r2, sl
 80074e2:	4649      	mov	r1, r9
 80074e4:	4638      	mov	r0, r7
 80074e6:	47c0      	blx	r8
 80074e8:	3001      	adds	r0, #1
 80074ea:	d103      	bne.n	80074f4 <_printf_common+0xac>
 80074ec:	f04f 30ff 	mov.w	r0, #4294967295
 80074f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f4:	3501      	adds	r5, #1
 80074f6:	e7c6      	b.n	8007486 <_printf_common+0x3e>
 80074f8:	18e1      	adds	r1, r4, r3
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	2030      	movs	r0, #48	; 0x30
 80074fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007502:	4422      	add	r2, r4
 8007504:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007508:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800750c:	3302      	adds	r3, #2
 800750e:	e7c7      	b.n	80074a0 <_printf_common+0x58>
 8007510:	2301      	movs	r3, #1
 8007512:	4622      	mov	r2, r4
 8007514:	4649      	mov	r1, r9
 8007516:	4638      	mov	r0, r7
 8007518:	47c0      	blx	r8
 800751a:	3001      	adds	r0, #1
 800751c:	d0e6      	beq.n	80074ec <_printf_common+0xa4>
 800751e:	3601      	adds	r6, #1
 8007520:	e7d9      	b.n	80074d6 <_printf_common+0x8e>
	...

08007524 <_printf_i>:
 8007524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007528:	460c      	mov	r4, r1
 800752a:	4691      	mov	r9, r2
 800752c:	7e27      	ldrb	r7, [r4, #24]
 800752e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007530:	2f78      	cmp	r7, #120	; 0x78
 8007532:	4680      	mov	r8, r0
 8007534:	469a      	mov	sl, r3
 8007536:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800753a:	d807      	bhi.n	800754c <_printf_i+0x28>
 800753c:	2f62      	cmp	r7, #98	; 0x62
 800753e:	d80a      	bhi.n	8007556 <_printf_i+0x32>
 8007540:	2f00      	cmp	r7, #0
 8007542:	f000 80d8 	beq.w	80076f6 <_printf_i+0x1d2>
 8007546:	2f58      	cmp	r7, #88	; 0x58
 8007548:	f000 80a3 	beq.w	8007692 <_printf_i+0x16e>
 800754c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007550:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007554:	e03a      	b.n	80075cc <_printf_i+0xa8>
 8007556:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800755a:	2b15      	cmp	r3, #21
 800755c:	d8f6      	bhi.n	800754c <_printf_i+0x28>
 800755e:	a001      	add	r0, pc, #4	; (adr r0, 8007564 <_printf_i+0x40>)
 8007560:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007564:	080075bd 	.word	0x080075bd
 8007568:	080075d1 	.word	0x080075d1
 800756c:	0800754d 	.word	0x0800754d
 8007570:	0800754d 	.word	0x0800754d
 8007574:	0800754d 	.word	0x0800754d
 8007578:	0800754d 	.word	0x0800754d
 800757c:	080075d1 	.word	0x080075d1
 8007580:	0800754d 	.word	0x0800754d
 8007584:	0800754d 	.word	0x0800754d
 8007588:	0800754d 	.word	0x0800754d
 800758c:	0800754d 	.word	0x0800754d
 8007590:	080076dd 	.word	0x080076dd
 8007594:	08007601 	.word	0x08007601
 8007598:	080076bf 	.word	0x080076bf
 800759c:	0800754d 	.word	0x0800754d
 80075a0:	0800754d 	.word	0x0800754d
 80075a4:	080076ff 	.word	0x080076ff
 80075a8:	0800754d 	.word	0x0800754d
 80075ac:	08007601 	.word	0x08007601
 80075b0:	0800754d 	.word	0x0800754d
 80075b4:	0800754d 	.word	0x0800754d
 80075b8:	080076c7 	.word	0x080076c7
 80075bc:	680b      	ldr	r3, [r1, #0]
 80075be:	1d1a      	adds	r2, r3, #4
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	600a      	str	r2, [r1, #0]
 80075c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80075c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075cc:	2301      	movs	r3, #1
 80075ce:	e0a3      	b.n	8007718 <_printf_i+0x1f4>
 80075d0:	6825      	ldr	r5, [r4, #0]
 80075d2:	6808      	ldr	r0, [r1, #0]
 80075d4:	062e      	lsls	r6, r5, #24
 80075d6:	f100 0304 	add.w	r3, r0, #4
 80075da:	d50a      	bpl.n	80075f2 <_printf_i+0xce>
 80075dc:	6805      	ldr	r5, [r0, #0]
 80075de:	600b      	str	r3, [r1, #0]
 80075e0:	2d00      	cmp	r5, #0
 80075e2:	da03      	bge.n	80075ec <_printf_i+0xc8>
 80075e4:	232d      	movs	r3, #45	; 0x2d
 80075e6:	426d      	negs	r5, r5
 80075e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075ec:	485e      	ldr	r0, [pc, #376]	; (8007768 <_printf_i+0x244>)
 80075ee:	230a      	movs	r3, #10
 80075f0:	e019      	b.n	8007626 <_printf_i+0x102>
 80075f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80075f6:	6805      	ldr	r5, [r0, #0]
 80075f8:	600b      	str	r3, [r1, #0]
 80075fa:	bf18      	it	ne
 80075fc:	b22d      	sxthne	r5, r5
 80075fe:	e7ef      	b.n	80075e0 <_printf_i+0xbc>
 8007600:	680b      	ldr	r3, [r1, #0]
 8007602:	6825      	ldr	r5, [r4, #0]
 8007604:	1d18      	adds	r0, r3, #4
 8007606:	6008      	str	r0, [r1, #0]
 8007608:	0628      	lsls	r0, r5, #24
 800760a:	d501      	bpl.n	8007610 <_printf_i+0xec>
 800760c:	681d      	ldr	r5, [r3, #0]
 800760e:	e002      	b.n	8007616 <_printf_i+0xf2>
 8007610:	0669      	lsls	r1, r5, #25
 8007612:	d5fb      	bpl.n	800760c <_printf_i+0xe8>
 8007614:	881d      	ldrh	r5, [r3, #0]
 8007616:	4854      	ldr	r0, [pc, #336]	; (8007768 <_printf_i+0x244>)
 8007618:	2f6f      	cmp	r7, #111	; 0x6f
 800761a:	bf0c      	ite	eq
 800761c:	2308      	moveq	r3, #8
 800761e:	230a      	movne	r3, #10
 8007620:	2100      	movs	r1, #0
 8007622:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007626:	6866      	ldr	r6, [r4, #4]
 8007628:	60a6      	str	r6, [r4, #8]
 800762a:	2e00      	cmp	r6, #0
 800762c:	bfa2      	ittt	ge
 800762e:	6821      	ldrge	r1, [r4, #0]
 8007630:	f021 0104 	bicge.w	r1, r1, #4
 8007634:	6021      	strge	r1, [r4, #0]
 8007636:	b90d      	cbnz	r5, 800763c <_printf_i+0x118>
 8007638:	2e00      	cmp	r6, #0
 800763a:	d04d      	beq.n	80076d8 <_printf_i+0x1b4>
 800763c:	4616      	mov	r6, r2
 800763e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007642:	fb03 5711 	mls	r7, r3, r1, r5
 8007646:	5dc7      	ldrb	r7, [r0, r7]
 8007648:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800764c:	462f      	mov	r7, r5
 800764e:	42bb      	cmp	r3, r7
 8007650:	460d      	mov	r5, r1
 8007652:	d9f4      	bls.n	800763e <_printf_i+0x11a>
 8007654:	2b08      	cmp	r3, #8
 8007656:	d10b      	bne.n	8007670 <_printf_i+0x14c>
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	07df      	lsls	r7, r3, #31
 800765c:	d508      	bpl.n	8007670 <_printf_i+0x14c>
 800765e:	6923      	ldr	r3, [r4, #16]
 8007660:	6861      	ldr	r1, [r4, #4]
 8007662:	4299      	cmp	r1, r3
 8007664:	bfde      	ittt	le
 8007666:	2330      	movle	r3, #48	; 0x30
 8007668:	f806 3c01 	strble.w	r3, [r6, #-1]
 800766c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007670:	1b92      	subs	r2, r2, r6
 8007672:	6122      	str	r2, [r4, #16]
 8007674:	f8cd a000 	str.w	sl, [sp]
 8007678:	464b      	mov	r3, r9
 800767a:	aa03      	add	r2, sp, #12
 800767c:	4621      	mov	r1, r4
 800767e:	4640      	mov	r0, r8
 8007680:	f7ff fee2 	bl	8007448 <_printf_common>
 8007684:	3001      	adds	r0, #1
 8007686:	d14c      	bne.n	8007722 <_printf_i+0x1fe>
 8007688:	f04f 30ff 	mov.w	r0, #4294967295
 800768c:	b004      	add	sp, #16
 800768e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007692:	4835      	ldr	r0, [pc, #212]	; (8007768 <_printf_i+0x244>)
 8007694:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007698:	6823      	ldr	r3, [r4, #0]
 800769a:	680e      	ldr	r6, [r1, #0]
 800769c:	061f      	lsls	r7, r3, #24
 800769e:	f856 5b04 	ldr.w	r5, [r6], #4
 80076a2:	600e      	str	r6, [r1, #0]
 80076a4:	d514      	bpl.n	80076d0 <_printf_i+0x1ac>
 80076a6:	07d9      	lsls	r1, r3, #31
 80076a8:	bf44      	itt	mi
 80076aa:	f043 0320 	orrmi.w	r3, r3, #32
 80076ae:	6023      	strmi	r3, [r4, #0]
 80076b0:	b91d      	cbnz	r5, 80076ba <_printf_i+0x196>
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	f023 0320 	bic.w	r3, r3, #32
 80076b8:	6023      	str	r3, [r4, #0]
 80076ba:	2310      	movs	r3, #16
 80076bc:	e7b0      	b.n	8007620 <_printf_i+0xfc>
 80076be:	6823      	ldr	r3, [r4, #0]
 80076c0:	f043 0320 	orr.w	r3, r3, #32
 80076c4:	6023      	str	r3, [r4, #0]
 80076c6:	2378      	movs	r3, #120	; 0x78
 80076c8:	4828      	ldr	r0, [pc, #160]	; (800776c <_printf_i+0x248>)
 80076ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076ce:	e7e3      	b.n	8007698 <_printf_i+0x174>
 80076d0:	065e      	lsls	r6, r3, #25
 80076d2:	bf48      	it	mi
 80076d4:	b2ad      	uxthmi	r5, r5
 80076d6:	e7e6      	b.n	80076a6 <_printf_i+0x182>
 80076d8:	4616      	mov	r6, r2
 80076da:	e7bb      	b.n	8007654 <_printf_i+0x130>
 80076dc:	680b      	ldr	r3, [r1, #0]
 80076de:	6826      	ldr	r6, [r4, #0]
 80076e0:	6960      	ldr	r0, [r4, #20]
 80076e2:	1d1d      	adds	r5, r3, #4
 80076e4:	600d      	str	r5, [r1, #0]
 80076e6:	0635      	lsls	r5, r6, #24
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	d501      	bpl.n	80076f0 <_printf_i+0x1cc>
 80076ec:	6018      	str	r0, [r3, #0]
 80076ee:	e002      	b.n	80076f6 <_printf_i+0x1d2>
 80076f0:	0671      	lsls	r1, r6, #25
 80076f2:	d5fb      	bpl.n	80076ec <_printf_i+0x1c8>
 80076f4:	8018      	strh	r0, [r3, #0]
 80076f6:	2300      	movs	r3, #0
 80076f8:	6123      	str	r3, [r4, #16]
 80076fa:	4616      	mov	r6, r2
 80076fc:	e7ba      	b.n	8007674 <_printf_i+0x150>
 80076fe:	680b      	ldr	r3, [r1, #0]
 8007700:	1d1a      	adds	r2, r3, #4
 8007702:	600a      	str	r2, [r1, #0]
 8007704:	681e      	ldr	r6, [r3, #0]
 8007706:	6862      	ldr	r2, [r4, #4]
 8007708:	2100      	movs	r1, #0
 800770a:	4630      	mov	r0, r6
 800770c:	f7f8 fd60 	bl	80001d0 <memchr>
 8007710:	b108      	cbz	r0, 8007716 <_printf_i+0x1f2>
 8007712:	1b80      	subs	r0, r0, r6
 8007714:	6060      	str	r0, [r4, #4]
 8007716:	6863      	ldr	r3, [r4, #4]
 8007718:	6123      	str	r3, [r4, #16]
 800771a:	2300      	movs	r3, #0
 800771c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007720:	e7a8      	b.n	8007674 <_printf_i+0x150>
 8007722:	6923      	ldr	r3, [r4, #16]
 8007724:	4632      	mov	r2, r6
 8007726:	4649      	mov	r1, r9
 8007728:	4640      	mov	r0, r8
 800772a:	47d0      	blx	sl
 800772c:	3001      	adds	r0, #1
 800772e:	d0ab      	beq.n	8007688 <_printf_i+0x164>
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	079b      	lsls	r3, r3, #30
 8007734:	d413      	bmi.n	800775e <_printf_i+0x23a>
 8007736:	68e0      	ldr	r0, [r4, #12]
 8007738:	9b03      	ldr	r3, [sp, #12]
 800773a:	4298      	cmp	r0, r3
 800773c:	bfb8      	it	lt
 800773e:	4618      	movlt	r0, r3
 8007740:	e7a4      	b.n	800768c <_printf_i+0x168>
 8007742:	2301      	movs	r3, #1
 8007744:	4632      	mov	r2, r6
 8007746:	4649      	mov	r1, r9
 8007748:	4640      	mov	r0, r8
 800774a:	47d0      	blx	sl
 800774c:	3001      	adds	r0, #1
 800774e:	d09b      	beq.n	8007688 <_printf_i+0x164>
 8007750:	3501      	adds	r5, #1
 8007752:	68e3      	ldr	r3, [r4, #12]
 8007754:	9903      	ldr	r1, [sp, #12]
 8007756:	1a5b      	subs	r3, r3, r1
 8007758:	42ab      	cmp	r3, r5
 800775a:	dcf2      	bgt.n	8007742 <_printf_i+0x21e>
 800775c:	e7eb      	b.n	8007736 <_printf_i+0x212>
 800775e:	2500      	movs	r5, #0
 8007760:	f104 0619 	add.w	r6, r4, #25
 8007764:	e7f5      	b.n	8007752 <_printf_i+0x22e>
 8007766:	bf00      	nop
 8007768:	080084d5 	.word	0x080084d5
 800776c:	080084e6 	.word	0x080084e6

08007770 <memmove>:
 8007770:	4288      	cmp	r0, r1
 8007772:	b510      	push	{r4, lr}
 8007774:	eb01 0402 	add.w	r4, r1, r2
 8007778:	d902      	bls.n	8007780 <memmove+0x10>
 800777a:	4284      	cmp	r4, r0
 800777c:	4623      	mov	r3, r4
 800777e:	d807      	bhi.n	8007790 <memmove+0x20>
 8007780:	1e43      	subs	r3, r0, #1
 8007782:	42a1      	cmp	r1, r4
 8007784:	d008      	beq.n	8007798 <memmove+0x28>
 8007786:	f811 2b01 	ldrb.w	r2, [r1], #1
 800778a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800778e:	e7f8      	b.n	8007782 <memmove+0x12>
 8007790:	4402      	add	r2, r0
 8007792:	4601      	mov	r1, r0
 8007794:	428a      	cmp	r2, r1
 8007796:	d100      	bne.n	800779a <memmove+0x2a>
 8007798:	bd10      	pop	{r4, pc}
 800779a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800779e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077a2:	e7f7      	b.n	8007794 <memmove+0x24>

080077a4 <_free_r>:
 80077a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077a6:	2900      	cmp	r1, #0
 80077a8:	d048      	beq.n	800783c <_free_r+0x98>
 80077aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077ae:	9001      	str	r0, [sp, #4]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f1a1 0404 	sub.w	r4, r1, #4
 80077b6:	bfb8      	it	lt
 80077b8:	18e4      	addlt	r4, r4, r3
 80077ba:	f000 f8d3 	bl	8007964 <__malloc_lock>
 80077be:	4a20      	ldr	r2, [pc, #128]	; (8007840 <_free_r+0x9c>)
 80077c0:	9801      	ldr	r0, [sp, #4]
 80077c2:	6813      	ldr	r3, [r2, #0]
 80077c4:	4615      	mov	r5, r2
 80077c6:	b933      	cbnz	r3, 80077d6 <_free_r+0x32>
 80077c8:	6063      	str	r3, [r4, #4]
 80077ca:	6014      	str	r4, [r2, #0]
 80077cc:	b003      	add	sp, #12
 80077ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077d2:	f000 b8cd 	b.w	8007970 <__malloc_unlock>
 80077d6:	42a3      	cmp	r3, r4
 80077d8:	d90b      	bls.n	80077f2 <_free_r+0x4e>
 80077da:	6821      	ldr	r1, [r4, #0]
 80077dc:	1862      	adds	r2, r4, r1
 80077de:	4293      	cmp	r3, r2
 80077e0:	bf04      	itt	eq
 80077e2:	681a      	ldreq	r2, [r3, #0]
 80077e4:	685b      	ldreq	r3, [r3, #4]
 80077e6:	6063      	str	r3, [r4, #4]
 80077e8:	bf04      	itt	eq
 80077ea:	1852      	addeq	r2, r2, r1
 80077ec:	6022      	streq	r2, [r4, #0]
 80077ee:	602c      	str	r4, [r5, #0]
 80077f0:	e7ec      	b.n	80077cc <_free_r+0x28>
 80077f2:	461a      	mov	r2, r3
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	b10b      	cbz	r3, 80077fc <_free_r+0x58>
 80077f8:	42a3      	cmp	r3, r4
 80077fa:	d9fa      	bls.n	80077f2 <_free_r+0x4e>
 80077fc:	6811      	ldr	r1, [r2, #0]
 80077fe:	1855      	adds	r5, r2, r1
 8007800:	42a5      	cmp	r5, r4
 8007802:	d10b      	bne.n	800781c <_free_r+0x78>
 8007804:	6824      	ldr	r4, [r4, #0]
 8007806:	4421      	add	r1, r4
 8007808:	1854      	adds	r4, r2, r1
 800780a:	42a3      	cmp	r3, r4
 800780c:	6011      	str	r1, [r2, #0]
 800780e:	d1dd      	bne.n	80077cc <_free_r+0x28>
 8007810:	681c      	ldr	r4, [r3, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	6053      	str	r3, [r2, #4]
 8007816:	4421      	add	r1, r4
 8007818:	6011      	str	r1, [r2, #0]
 800781a:	e7d7      	b.n	80077cc <_free_r+0x28>
 800781c:	d902      	bls.n	8007824 <_free_r+0x80>
 800781e:	230c      	movs	r3, #12
 8007820:	6003      	str	r3, [r0, #0]
 8007822:	e7d3      	b.n	80077cc <_free_r+0x28>
 8007824:	6825      	ldr	r5, [r4, #0]
 8007826:	1961      	adds	r1, r4, r5
 8007828:	428b      	cmp	r3, r1
 800782a:	bf04      	itt	eq
 800782c:	6819      	ldreq	r1, [r3, #0]
 800782e:	685b      	ldreq	r3, [r3, #4]
 8007830:	6063      	str	r3, [r4, #4]
 8007832:	bf04      	itt	eq
 8007834:	1949      	addeq	r1, r1, r5
 8007836:	6021      	streq	r1, [r4, #0]
 8007838:	6054      	str	r4, [r2, #4]
 800783a:	e7c7      	b.n	80077cc <_free_r+0x28>
 800783c:	b003      	add	sp, #12
 800783e:	bd30      	pop	{r4, r5, pc}
 8007840:	200049b8 	.word	0x200049b8

08007844 <_malloc_r>:
 8007844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007846:	1ccd      	adds	r5, r1, #3
 8007848:	f025 0503 	bic.w	r5, r5, #3
 800784c:	3508      	adds	r5, #8
 800784e:	2d0c      	cmp	r5, #12
 8007850:	bf38      	it	cc
 8007852:	250c      	movcc	r5, #12
 8007854:	2d00      	cmp	r5, #0
 8007856:	4606      	mov	r6, r0
 8007858:	db01      	blt.n	800785e <_malloc_r+0x1a>
 800785a:	42a9      	cmp	r1, r5
 800785c:	d903      	bls.n	8007866 <_malloc_r+0x22>
 800785e:	230c      	movs	r3, #12
 8007860:	6033      	str	r3, [r6, #0]
 8007862:	2000      	movs	r0, #0
 8007864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007866:	f000 f87d 	bl	8007964 <__malloc_lock>
 800786a:	4921      	ldr	r1, [pc, #132]	; (80078f0 <_malloc_r+0xac>)
 800786c:	680a      	ldr	r2, [r1, #0]
 800786e:	4614      	mov	r4, r2
 8007870:	b99c      	cbnz	r4, 800789a <_malloc_r+0x56>
 8007872:	4f20      	ldr	r7, [pc, #128]	; (80078f4 <_malloc_r+0xb0>)
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	b923      	cbnz	r3, 8007882 <_malloc_r+0x3e>
 8007878:	4621      	mov	r1, r4
 800787a:	4630      	mov	r0, r6
 800787c:	f000 f862 	bl	8007944 <_sbrk_r>
 8007880:	6038      	str	r0, [r7, #0]
 8007882:	4629      	mov	r1, r5
 8007884:	4630      	mov	r0, r6
 8007886:	f000 f85d 	bl	8007944 <_sbrk_r>
 800788a:	1c43      	adds	r3, r0, #1
 800788c:	d123      	bne.n	80078d6 <_malloc_r+0x92>
 800788e:	230c      	movs	r3, #12
 8007890:	6033      	str	r3, [r6, #0]
 8007892:	4630      	mov	r0, r6
 8007894:	f000 f86c 	bl	8007970 <__malloc_unlock>
 8007898:	e7e3      	b.n	8007862 <_malloc_r+0x1e>
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	1b5b      	subs	r3, r3, r5
 800789e:	d417      	bmi.n	80078d0 <_malloc_r+0x8c>
 80078a0:	2b0b      	cmp	r3, #11
 80078a2:	d903      	bls.n	80078ac <_malloc_r+0x68>
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	441c      	add	r4, r3
 80078a8:	6025      	str	r5, [r4, #0]
 80078aa:	e004      	b.n	80078b6 <_malloc_r+0x72>
 80078ac:	6863      	ldr	r3, [r4, #4]
 80078ae:	42a2      	cmp	r2, r4
 80078b0:	bf0c      	ite	eq
 80078b2:	600b      	streq	r3, [r1, #0]
 80078b4:	6053      	strne	r3, [r2, #4]
 80078b6:	4630      	mov	r0, r6
 80078b8:	f000 f85a 	bl	8007970 <__malloc_unlock>
 80078bc:	f104 000b 	add.w	r0, r4, #11
 80078c0:	1d23      	adds	r3, r4, #4
 80078c2:	f020 0007 	bic.w	r0, r0, #7
 80078c6:	1ac2      	subs	r2, r0, r3
 80078c8:	d0cc      	beq.n	8007864 <_malloc_r+0x20>
 80078ca:	1a1b      	subs	r3, r3, r0
 80078cc:	50a3      	str	r3, [r4, r2]
 80078ce:	e7c9      	b.n	8007864 <_malloc_r+0x20>
 80078d0:	4622      	mov	r2, r4
 80078d2:	6864      	ldr	r4, [r4, #4]
 80078d4:	e7cc      	b.n	8007870 <_malloc_r+0x2c>
 80078d6:	1cc4      	adds	r4, r0, #3
 80078d8:	f024 0403 	bic.w	r4, r4, #3
 80078dc:	42a0      	cmp	r0, r4
 80078de:	d0e3      	beq.n	80078a8 <_malloc_r+0x64>
 80078e0:	1a21      	subs	r1, r4, r0
 80078e2:	4630      	mov	r0, r6
 80078e4:	f000 f82e 	bl	8007944 <_sbrk_r>
 80078e8:	3001      	adds	r0, #1
 80078ea:	d1dd      	bne.n	80078a8 <_malloc_r+0x64>
 80078ec:	e7cf      	b.n	800788e <_malloc_r+0x4a>
 80078ee:	bf00      	nop
 80078f0:	200049b8 	.word	0x200049b8
 80078f4:	200049bc 	.word	0x200049bc

080078f8 <_realloc_r>:
 80078f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fa:	4607      	mov	r7, r0
 80078fc:	4614      	mov	r4, r2
 80078fe:	460e      	mov	r6, r1
 8007900:	b921      	cbnz	r1, 800790c <_realloc_r+0x14>
 8007902:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007906:	4611      	mov	r1, r2
 8007908:	f7ff bf9c 	b.w	8007844 <_malloc_r>
 800790c:	b922      	cbnz	r2, 8007918 <_realloc_r+0x20>
 800790e:	f7ff ff49 	bl	80077a4 <_free_r>
 8007912:	4625      	mov	r5, r4
 8007914:	4628      	mov	r0, r5
 8007916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007918:	f000 f830 	bl	800797c <_malloc_usable_size_r>
 800791c:	42a0      	cmp	r0, r4
 800791e:	d20f      	bcs.n	8007940 <_realloc_r+0x48>
 8007920:	4621      	mov	r1, r4
 8007922:	4638      	mov	r0, r7
 8007924:	f7ff ff8e 	bl	8007844 <_malloc_r>
 8007928:	4605      	mov	r5, r0
 800792a:	2800      	cmp	r0, #0
 800792c:	d0f2      	beq.n	8007914 <_realloc_r+0x1c>
 800792e:	4631      	mov	r1, r6
 8007930:	4622      	mov	r2, r4
 8007932:	f7ff fbf7 	bl	8007124 <memcpy>
 8007936:	4631      	mov	r1, r6
 8007938:	4638      	mov	r0, r7
 800793a:	f7ff ff33 	bl	80077a4 <_free_r>
 800793e:	e7e9      	b.n	8007914 <_realloc_r+0x1c>
 8007940:	4635      	mov	r5, r6
 8007942:	e7e7      	b.n	8007914 <_realloc_r+0x1c>

08007944 <_sbrk_r>:
 8007944:	b538      	push	{r3, r4, r5, lr}
 8007946:	4d06      	ldr	r5, [pc, #24]	; (8007960 <_sbrk_r+0x1c>)
 8007948:	2300      	movs	r3, #0
 800794a:	4604      	mov	r4, r0
 800794c:	4608      	mov	r0, r1
 800794e:	602b      	str	r3, [r5, #0]
 8007950:	f7fa f86e 	bl	8001a30 <_sbrk>
 8007954:	1c43      	adds	r3, r0, #1
 8007956:	d102      	bne.n	800795e <_sbrk_r+0x1a>
 8007958:	682b      	ldr	r3, [r5, #0]
 800795a:	b103      	cbz	r3, 800795e <_sbrk_r+0x1a>
 800795c:	6023      	str	r3, [r4, #0]
 800795e:	bd38      	pop	{r3, r4, r5, pc}
 8007960:	20004f98 	.word	0x20004f98

08007964 <__malloc_lock>:
 8007964:	4801      	ldr	r0, [pc, #4]	; (800796c <__malloc_lock+0x8>)
 8007966:	f000 b811 	b.w	800798c <__retarget_lock_acquire_recursive>
 800796a:	bf00      	nop
 800796c:	20004fa0 	.word	0x20004fa0

08007970 <__malloc_unlock>:
 8007970:	4801      	ldr	r0, [pc, #4]	; (8007978 <__malloc_unlock+0x8>)
 8007972:	f000 b80c 	b.w	800798e <__retarget_lock_release_recursive>
 8007976:	bf00      	nop
 8007978:	20004fa0 	.word	0x20004fa0

0800797c <_malloc_usable_size_r>:
 800797c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007980:	1f18      	subs	r0, r3, #4
 8007982:	2b00      	cmp	r3, #0
 8007984:	bfbc      	itt	lt
 8007986:	580b      	ldrlt	r3, [r1, r0]
 8007988:	18c0      	addlt	r0, r0, r3
 800798a:	4770      	bx	lr

0800798c <__retarget_lock_acquire_recursive>:
 800798c:	4770      	bx	lr

0800798e <__retarget_lock_release_recursive>:
 800798e:	4770      	bx	lr

08007990 <_init>:
 8007990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007992:	bf00      	nop
 8007994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007996:	bc08      	pop	{r3}
 8007998:	469e      	mov	lr, r3
 800799a:	4770      	bx	lr

0800799c <_fini>:
 800799c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799e:	bf00      	nop
 80079a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079a2:	bc08      	pop	{r3}
 80079a4:	469e      	mov	lr, r3
 80079a6:	4770      	bx	lr
