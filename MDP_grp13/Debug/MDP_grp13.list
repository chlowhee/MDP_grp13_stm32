
MDP_grp13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000529c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b2c  0800542c  0800542c  0001542c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f58  08005f58  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005f58  08005f58  00015f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f60  08005f60  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f60  08005f60  00015f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f64  08005f64  00015f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004dc4  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004dd4  20004dd4  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017123  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002edd  00000000  00000000  00037163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001268  00000000  00000000  0003a040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001130  00000000  00000000  0003b2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000032b5  00000000  00000000  0003c3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000130b4  00000000  00000000  0003f68d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2693  00000000  00000000  00052741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00124dd4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d0c  00000000  00000000  00124e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005414 	.word	0x08005414

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005414 	.word	0x08005414

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fb0c 	bl	8000ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f834 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f91c 	bl	8000710 <MX_GPIO_Init>
  MX_TIM8_Init();
 80004d8:	f000 f88e 	bl	80005f8 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004dc:	f001 ffde 	bl	800249c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LED_Toggle */
  LED_ToggleHandle = osThreadNew(StartDefaultTask, NULL, &LED_Toggle_attributes);
 80004e0:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <main+0x50>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	480d      	ldr	r0, [pc, #52]	; (800051c <main+0x54>)
 80004e6:	f002 f823 	bl	8002530 <osThreadNew>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a0c      	ldr	r2, [pc, #48]	; (8000520 <main+0x58>)
 80004ee:	6013      	str	r3, [r2, #0]

  /* creation of OLED */
  OLEDHandle = osThreadNew(show, NULL, &OLED_attributes);
 80004f0:	4a0c      	ldr	r2, [pc, #48]	; (8000524 <main+0x5c>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	480c      	ldr	r0, [pc, #48]	; (8000528 <main+0x60>)
 80004f6:	f002 f81b 	bl	8002530 <osThreadNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a0b      	ldr	r2, [pc, #44]	; (800052c <main+0x64>)
 80004fe:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 8000500:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <main+0x68>)
 8000502:	2100      	movs	r1, #0
 8000504:	480b      	ldr	r0, [pc, #44]	; (8000534 <main+0x6c>)
 8000506:	f002 f813 	bl	8002530 <osThreadNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <main+0x70>)
 800050e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000510:	f001 ffe8 	bl	80024e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000514:	e7fe      	b.n	8000514 <main+0x4c>
 8000516:	bf00      	nop
 8000518:	08005478 	.word	0x08005478
 800051c:	080007e1 	.word	0x080007e1
 8000520:	20004988 	.word	0x20004988
 8000524:	0800549c 	.word	0x0800549c
 8000528:	08000801 	.word	0x08000801
 800052c:	20004984 	.word	0x20004984
 8000530:	080054c0 	.word	0x080054c0
 8000534:	08000845 	.word	0x08000845
 8000538:	2000498c 	.word	0x2000498c

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f004 ff5a 	bl	8005404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <SystemClock_Config+0xb4>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <SystemClock_Config+0xb4>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <SystemClock_Config+0xb4>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <SystemClock_Config+0xb8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a1b      	ldr	r2, [pc, #108]	; (80005f4 <SystemClock_Config+0xb8>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <SystemClock_Config+0xb8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000598:	2302      	movs	r3, #2
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059c:	2301      	movs	r3, #1
 800059e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a0:	2310      	movs	r3, #16
 80005a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a4:	2300      	movs	r3, #0
 80005a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0320 	add.w	r3, r7, #32
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fe0f 	bl	80011d0 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005b8:	f000 f9bc 	bl	8000934 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 f872 	bl	80016c0 <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005e2:	f000 f9a7 	bl	8000934 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	; 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b092      	sub	sp, #72	; 0x48
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
 8000618:	615a      	str	r2, [r3, #20]
 800061a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2220      	movs	r2, #32
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f004 feee 	bl	8005404 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000628:	4b37      	ldr	r3, [pc, #220]	; (8000708 <MX_TIM8_Init+0x110>)
 800062a:	4a38      	ldr	r2, [pc, #224]	; (800070c <MX_TIM8_Init+0x114>)
 800062c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800062e:	4b36      	ldr	r3, [pc, #216]	; (8000708 <MX_TIM8_Init+0x110>)
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000634:	4b34      	ldr	r3, [pc, #208]	; (8000708 <MX_TIM8_Init+0x110>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 800063a:	4b33      	ldr	r3, [pc, #204]	; (8000708 <MX_TIM8_Init+0x110>)
 800063c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000640:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000642:	4b31      	ldr	r3, [pc, #196]	; (8000708 <MX_TIM8_Init+0x110>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000648:	4b2f      	ldr	r3, [pc, #188]	; (8000708 <MX_TIM8_Init+0x110>)
 800064a:	2200      	movs	r2, #0
 800064c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800064e:	4b2e      	ldr	r3, [pc, #184]	; (8000708 <MX_TIM8_Init+0x110>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000654:	482c      	ldr	r0, [pc, #176]	; (8000708 <MX_TIM8_Init+0x110>)
 8000656:	f001 f9cf 	bl	80019f8 <HAL_TIM_PWM_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000660:	f000 f968 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000664:	2300      	movs	r3, #0
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000668:	2300      	movs	r3, #0
 800066a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800066c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000670:	4619      	mov	r1, r3
 8000672:	4825      	ldr	r0, [pc, #148]	; (8000708 <MX_TIM8_Init+0x110>)
 8000674:	f001 fe10 	bl	8002298 <HAL_TIMEx_MasterConfigSynchronization>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800067e:	f000 f959 	bl	8000934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000682:	2360      	movs	r3, #96	; 0x60
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800068a:	2300      	movs	r3, #0
 800068c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800068e:	2300      	movs	r3, #0
 8000690:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000692:	2300      	movs	r3, #0
 8000694:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000696:	2300      	movs	r3, #0
 8000698:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800069a:	2300      	movs	r3, #0
 800069c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800069e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a2:	2200      	movs	r2, #0
 80006a4:	4619      	mov	r1, r3
 80006a6:	4818      	ldr	r0, [pc, #96]	; (8000708 <MX_TIM8_Init+0x110>)
 80006a8:	f001 fabe 	bl	8001c28 <HAL_TIM_PWM_ConfigChannel>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80006b2:	f000 f93f 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ba:	2204      	movs	r2, #4
 80006bc:	4619      	mov	r1, r3
 80006be:	4812      	ldr	r0, [pc, #72]	; (8000708 <MX_TIM8_Init+0x110>)
 80006c0:	f001 fab2 	bl	8001c28 <HAL_TIM_PWM_ConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80006ca:	f000 f933 	bl	8000934 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	4619      	mov	r1, r3
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_TIM8_Init+0x110>)
 80006f2:	f001 fe4d 	bl	8002390 <HAL_TIMEx_ConfigBreakDeadTime>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80006fc:	f000 f91a 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	3748      	adds	r7, #72	; 0x48
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	2000493c 	.word	0x2000493c
 800070c:	40010400 	.word	0x40010400

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <MX_GPIO_Init+0xc4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a29      	ldr	r2, [pc, #164]	; (80007d4 <MX_GPIO_Init+0xc4>)
 8000730:	f043 0310 	orr.w	r3, r3, #16
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <MX_GPIO_Init+0xc4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0310 	and.w	r3, r3, #16
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <MX_GPIO_Init+0xc4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a22      	ldr	r2, [pc, #136]	; (80007d4 <MX_GPIO_Init+0xc4>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <MX_GPIO_Init+0xc4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <MX_GPIO_Init+0xc4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <MX_GPIO_Init+0xc4>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <MX_GPIO_Init+0xc4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8000780:	4815      	ldr	r0, [pc, #84]	; (80007d8 <MX_GPIO_Init+0xc8>)
 8000782:	f000 fcc9 	bl	8001118 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	213c      	movs	r1, #60	; 0x3c
 800078a:	4814      	ldr	r0, [pc, #80]	; (80007dc <MX_GPIO_Init+0xcc>)
 800078c:	f000 fcc4 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8000790:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8000794:	60fb      	str	r3, [r7, #12]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	4619      	mov	r1, r3
 80007a8:	480b      	ldr	r0, [pc, #44]	; (80007d8 <MX_GPIO_Init+0xc8>)
 80007aa:	f000 fb19 	bl	8000de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 80007ae:	233c      	movs	r3, #60	; 0x3c
 80007b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ba:	2302      	movs	r3, #2
 80007bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	4619      	mov	r1, r3
 80007c4:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_GPIO_Init+0xcc>)
 80007c6:	f000 fb0b 	bl	8000de0 <HAL_GPIO_Init>

}
 80007ca:	bf00      	nop
 80007cc:	3720      	adds	r7, #32
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40020000 	.word	0x40020000

080007e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80007e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ec:	4803      	ldr	r0, [pc, #12]	; (80007fc <StartDefaultTask+0x1c>)
 80007ee:	f000 fcac 	bl	800114a <HAL_GPIO_TogglePin>
	  osDelay(5000);
 80007f2:	f241 3088 	movw	r0, #5000	; 0x1388
 80007f6:	f001 ff2d 	bl	8002654 <osDelay>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80007fa:	e7f5      	b.n	80007e8 <StartDefaultTask+0x8>
 80007fc:	40021000 	.word	0x40021000

08000800 <show>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_show */
void show(void *argument)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN show */
	OLED_Init();
 8000808:	f004 fd3e 	bl	8005288 <OLED_Init>
	uint8_t hello[20] = "Testing :D\0";
 800080c:	4a0c      	ldr	r2, [pc, #48]	; (8000840 <show+0x40>)
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	ca07      	ldmia	r2, {r0, r1, r2}
 8000814:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000818:	f107 0318 	add.w	r3, r7, #24
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
  /* Infinite loop */
  for(;;)
  {
    OLED_ShowString(10,10,hello);
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	461a      	mov	r2, r3
 8000828:	210a      	movs	r1, #10
 800082a:	200a      	movs	r0, #10
 800082c:	f004 fcfa 	bl	8005224 <OLED_ShowString>
    OLED_Refresh_Gram();
 8000830:	f004 fb84 	bl	8004f3c <OLED_Refresh_Gram>
    osDelay(1000);
 8000834:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000838:	f001 ff0c 	bl	8002654 <osDelay>
    OLED_ShowString(10,10,hello);
 800083c:	e7f1      	b.n	8000822 <show+0x22>
 800083e:	bf00      	nop
 8000840:	0800544c 	.word	0x0800544c

08000844 <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 8000844:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000848:	b084      	sub	sp, #16
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */
	uint64_t pwmVal = 0;
 800084e:	f04f 0200 	mov.w	r2, #0
 8000852:	f04f 0300 	mov.w	r3, #0
 8000856:	e9c7 2302 	strd	r2, r3, [r7, #8]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800085a:	2100      	movs	r1, #0
 800085c:	4833      	ldr	r0, [pc, #204]	; (800092c <motor+0xe8>)
 800085e:	f001 f91b 	bl	8001a98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000862:	2104      	movs	r1, #4
 8000864:	4831      	ldr	r0, [pc, #196]	; (800092c <motor+0xe8>)
 8000866:	f001 f917 	bl	8001a98 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
	  while(pwmVal<4000)
 800086a:	e025      	b.n	80008b8 <motor+0x74>
	  {
		  HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
 800086c:	2201      	movs	r2, #1
 800086e:	2104      	movs	r1, #4
 8000870:	482f      	ldr	r0, [pc, #188]	; (8000930 <motor+0xec>)
 8000872:	f000 fc51 	bl	8001118 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2108      	movs	r1, #8
 800087a:	482d      	ldr	r0, [pc, #180]	; (8000930 <motor+0xec>)
 800087c:	f000 fc4c 	bl	8001118 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
 8000880:	2201      	movs	r2, #1
 8000882:	2120      	movs	r1, #32
 8000884:	482a      	ldr	r0, [pc, #168]	; (8000930 <motor+0xec>)
 8000886:	f000 fc47 	bl	8001118 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2110      	movs	r1, #16
 800088e:	4828      	ldr	r0, [pc, #160]	; (8000930 <motor+0xec>)
 8000890:	f000 fc42 	bl	8001118 <HAL_GPIO_WritePin>
		  pwmVal++;
 8000894:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000898:	1c54      	adds	r4, r2, #1
 800089a:	f143 0500 	adc.w	r5, r3, #0
 800089e:	e9c7 4502 	strd	r4, r5, [r7, #8]
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); //Modify comparison value for duty cycle
 80008a2:	4b22      	ldr	r3, [pc, #136]	; (800092c <motor+0xe8>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	68ba      	ldr	r2, [r7, #8]
 80008a8:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); //Modify comparison value for duty cycle
 80008aa:	4b20      	ldr	r3, [pc, #128]	; (800092c <motor+0xe8>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	639a      	str	r2, [r3, #56]	; 0x38
		  osDelay(10);
 80008b2:	200a      	movs	r0, #10
 80008b4:	f001 fece 	bl	8002654 <osDelay>
	  while(pwmVal<4000)
 80008b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80008bc:	f640 709f 	movw	r0, #3999	; 0xf9f
 80008c0:	f04f 0100 	mov.w	r1, #0
 80008c4:	4299      	cmp	r1, r3
 80008c6:	bf08      	it	eq
 80008c8:	4290      	cmpeq	r0, r2
 80008ca:	d2cf      	bcs.n	800086c <motor+0x28>
	  }
	  while(pwmVal>0)
 80008cc:	e026      	b.n	800091c <motor+0xd8>
	  {
		  HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2104      	movs	r1, #4
 80008d2:	4817      	ldr	r0, [pc, #92]	; (8000930 <motor+0xec>)
 80008d4:	f000 fc20 	bl	8001118 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	2108      	movs	r1, #8
 80008dc:	4814      	ldr	r0, [pc, #80]	; (8000930 <motor+0xec>)
 80008de:	f000 fc1b 	bl	8001118 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2120      	movs	r1, #32
 80008e6:	4812      	ldr	r0, [pc, #72]	; (8000930 <motor+0xec>)
 80008e8:	f000 fc16 	bl	8001118 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2110      	movs	r1, #16
 80008f0:	480f      	ldr	r0, [pc, #60]	; (8000930 <motor+0xec>)
 80008f2:	f000 fc11 	bl	8001118 <HAL_GPIO_WritePin>
		  pwmVal--;
 80008f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80008fa:	f112 38ff 	adds.w	r8, r2, #4294967295
 80008fe:	f143 39ff 	adc.w	r9, r3, #4294967295
 8000902:	e9c7 8902 	strd	r8, r9, [r7, #8]
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); //Modify comparison value for duty cycle
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <motor+0xe8>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); //Modify comparison value for duty cycle
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <motor+0xe8>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	639a      	str	r2, [r3, #56]	; 0x38
		  osDelay(10);
 8000916:	200a      	movs	r0, #10
 8000918:	f001 fe9c 	bl	8002654 <osDelay>
	  while(pwmVal>0)
 800091c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000920:	4313      	orrs	r3, r2
 8000922:	d1d4      	bne.n	80008ce <motor+0x8a>
	  }

	  osDelay(10);
 8000924:	200a      	movs	r0, #10
 8000926:	f001 fe95 	bl	8002654 <osDelay>
	  while(pwmVal<4000)
 800092a:	e7c5      	b.n	80008b8 <motor+0x74>
 800092c:	2000493c 	.word	0x2000493c
 8000930:	40020000 	.word	0x40020000

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	e7fe      	b.n	800093c <Error_Handler+0x8>
	...

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_MspInit+0x54>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	4a11      	ldr	r2, [pc, #68]	; (8000994 <HAL_MspInit+0x54>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000954:	6453      	str	r3, [r2, #68]	; 0x44
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <HAL_MspInit+0x54>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <HAL_MspInit+0x54>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <HAL_MspInit+0x54>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000970:	6413      	str	r3, [r2, #64]	; 0x40
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <HAL_MspInit+0x54>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	210f      	movs	r1, #15
 8000982:	f06f 0001 	mvn.w	r0, #1
 8000986:	f000 fa02 	bl	8000d8e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM8)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <HAL_TIM_PWM_MspInit+0x84>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d12b      	bne.n	8000a12 <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <HAL_TIM_PWM_MspInit+0x88>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <HAL_TIM_PWM_MspInit+0x88>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_TIM_PWM_MspInit+0x88>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <HAL_TIM_PWM_MspInit+0x88>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a10      	ldr	r2, [pc, #64]	; (8000a20 <HAL_TIM_PWM_MspInit+0x88>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_TIM_PWM_MspInit+0x88>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0304 	and.w	r3, r3, #4
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80009f2:	23c0      	movs	r3, #192	; 0xc0
 80009f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000a02:	2303      	movs	r3, #3
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <HAL_TIM_PWM_MspInit+0x8c>)
 8000a0e:	f000 f9e7 	bl	8000de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000a12:	bf00      	nop
 8000a14:	3728      	adds	r7, #40	; 0x28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40010400 	.word	0x40010400
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020800 	.word	0x40020800

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <NMI_Handler+0x4>

08000a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <BusFault_Handler+0x4>

08000a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <UsageFault_Handler+0x4>

08000a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 f898 	bl	8000b8c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a5c:	f003 fa08 	bl	8003e70 <xTaskGetSchedulerState>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d001      	beq.n	8000a6a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a66:	f003 ffef 	bl	8004a48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <SystemInit+0x20>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <SystemInit+0x20>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000acc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a9a:	490e      	ldr	r1, [pc, #56]	; (8000ad4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa0:	e002      	b.n	8000aa8 <LoopCopyDataInit>

08000aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa6:	3304      	adds	r3, #4

08000aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aac:	d3f9      	bcc.n	8000aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ab0:	4c0b      	ldr	r4, [pc, #44]	; (8000ae0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab4:	e001      	b.n	8000aba <LoopFillZerobss>

08000ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab8:	3204      	adds	r2, #4

08000aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000abc:	d3fb      	bcc.n	8000ab6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000abe:	f7ff ffd7 	bl	8000a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f004 fc6d 	bl	80053a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac6:	f7ff fcff 	bl	80004c8 <main>
  bx  lr    
 8000aca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000acc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ad8:	08005f68 	.word	0x08005f68
  ldr r2, =_sbss
 8000adc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ae0:	20004dd4 	.word	0x20004dd4

08000ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <HAL_Init+0x40>)
 8000af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <HAL_Init+0x40>)
 8000afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_Init+0x40>)
 8000b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f931 	bl	8000d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	200f      	movs	r0, #15
 8000b18:	f000 f808 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f7ff ff10 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023c00 	.word	0x40023c00

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_InitTick+0x54>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_InitTick+0x58>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f93b 	bl	8000dc6 <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00e      	b.n	8000b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d80a      	bhi.n	8000b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f000 f911 	bl	8000d8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <HAL_InitTick+0x5c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20004990 	.word	0x20004990

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20004990 	.word	0x20004990

08000bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd4:	f7ff ffee 	bl	8000bb4 <HAL_GetTick>
 8000bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be4:	d005      	beq.n	8000bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_Delay+0x44>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4413      	add	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bf2:	bf00      	nop
 8000bf4:	f7ff ffde 	bl	8000bb4 <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d8f7      	bhi.n	8000bf4 <HAL_Delay+0x28>
  {
  }
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008

08000c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c46:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	60d3      	str	r3, [r2, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <__NVIC_GetPriorityGrouping+0x18>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	f003 0307 	and.w	r3, r3, #7
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	6039      	str	r1, [r7, #0]
 8000c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	db0a      	blt.n	8000ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	490c      	ldr	r1, [pc, #48]	; (8000cc4 <__NVIC_SetPriority+0x4c>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	0112      	lsls	r2, r2, #4
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	440b      	add	r3, r1
 8000c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca0:	e00a      	b.n	8000cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4908      	ldr	r1, [pc, #32]	; (8000cc8 <__NVIC_SetPriority+0x50>)
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	3b04      	subs	r3, #4
 8000cb0:	0112      	lsls	r2, r2, #4
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	761a      	strb	r2, [r3, #24]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000e100 	.word	0xe000e100
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b089      	sub	sp, #36	; 0x24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f1c3 0307 	rsb	r3, r3, #7
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	bf28      	it	cs
 8000cea:	2304      	movcs	r3, #4
 8000cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	2b06      	cmp	r3, #6
 8000cf4:	d902      	bls.n	8000cfc <NVIC_EncodePriority+0x30>
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3b03      	subs	r3, #3
 8000cfa:	e000      	b.n	8000cfe <NVIC_EncodePriority+0x32>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	f04f 32ff 	mov.w	r2, #4294967295
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	401a      	ands	r2, r3
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d14:	f04f 31ff 	mov.w	r1, #4294967295
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1e:	43d9      	mvns	r1, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	4313      	orrs	r3, r2
         );
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3724      	adds	r7, #36	; 0x24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d44:	d301      	bcc.n	8000d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d46:	2301      	movs	r3, #1
 8000d48:	e00f      	b.n	8000d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <SysTick_Config+0x40>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d52:	210f      	movs	r1, #15
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295
 8000d58:	f7ff ff8e 	bl	8000c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <SysTick_Config+0x40>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d62:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <SysTick_Config+0x40>)
 8000d64:	2207      	movs	r2, #7
 8000d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	e000e010 	.word	0xe000e010

08000d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff ff47 	bl	8000c14 <__NVIC_SetPriorityGrouping>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b086      	sub	sp, #24
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da0:	f7ff ff5c 	bl	8000c5c <__NVIC_GetPriorityGrouping>
 8000da4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	68b9      	ldr	r1, [r7, #8]
 8000daa:	6978      	ldr	r0, [r7, #20]
 8000dac:	f7ff ff8e 	bl	8000ccc <NVIC_EncodePriority>
 8000db0:	4602      	mov	r2, r0
 8000db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff5d 	bl	8000c78 <__NVIC_SetPriority>
}
 8000dbe:	bf00      	nop
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ffb0 	bl	8000d34 <SysTick_Config>
 8000dd4:	4603      	mov	r3, r0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
 8000dfa:	e16b      	b.n	80010d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	f040 815a 	bne.w	80010ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d005      	beq.n	8000e32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d130      	bne.n	8000e94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e68:	2201      	movs	r2, #1
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	091b      	lsrs	r3, r3, #4
 8000e7e:	f003 0201 	and.w	r2, r3, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	d017      	beq.n	8000ed0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d123      	bne.n	8000f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	08da      	lsrs	r2, r3, #3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3208      	adds	r2, #8
 8000ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	f003 0307 	and.w	r3, r3, #7
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	220f      	movs	r2, #15
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	691a      	ldr	r2, [r3, #16]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	08da      	lsrs	r2, r3, #3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3208      	adds	r2, #8
 8000f1e:	69b9      	ldr	r1, [r7, #24]
 8000f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0203 	and.w	r2, r3, #3
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 80b4 	beq.w	80010ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b60      	ldr	r3, [pc, #384]	; (80010ec <HAL_GPIO_Init+0x30c>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	4a5f      	ldr	r2, [pc, #380]	; (80010ec <HAL_GPIO_Init+0x30c>)
 8000f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f74:	6453      	str	r3, [r2, #68]	; 0x44
 8000f76:	4b5d      	ldr	r3, [pc, #372]	; (80010ec <HAL_GPIO_Init+0x30c>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f82:	4a5b      	ldr	r2, [pc, #364]	; (80010f0 <HAL_GPIO_Init+0x310>)
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	089b      	lsrs	r3, r3, #2
 8000f88:	3302      	adds	r3, #2
 8000f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	220f      	movs	r2, #15
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a52      	ldr	r2, [pc, #328]	; (80010f4 <HAL_GPIO_Init+0x314>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d02b      	beq.n	8001006 <HAL_GPIO_Init+0x226>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a51      	ldr	r2, [pc, #324]	; (80010f8 <HAL_GPIO_Init+0x318>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d025      	beq.n	8001002 <HAL_GPIO_Init+0x222>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a50      	ldr	r2, [pc, #320]	; (80010fc <HAL_GPIO_Init+0x31c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d01f      	beq.n	8000ffe <HAL_GPIO_Init+0x21e>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4f      	ldr	r2, [pc, #316]	; (8001100 <HAL_GPIO_Init+0x320>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d019      	beq.n	8000ffa <HAL_GPIO_Init+0x21a>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4e      	ldr	r2, [pc, #312]	; (8001104 <HAL_GPIO_Init+0x324>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d013      	beq.n	8000ff6 <HAL_GPIO_Init+0x216>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4d      	ldr	r2, [pc, #308]	; (8001108 <HAL_GPIO_Init+0x328>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d00d      	beq.n	8000ff2 <HAL_GPIO_Init+0x212>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4c      	ldr	r2, [pc, #304]	; (800110c <HAL_GPIO_Init+0x32c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d007      	beq.n	8000fee <HAL_GPIO_Init+0x20e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4b      	ldr	r2, [pc, #300]	; (8001110 <HAL_GPIO_Init+0x330>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d101      	bne.n	8000fea <HAL_GPIO_Init+0x20a>
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	e00e      	b.n	8001008 <HAL_GPIO_Init+0x228>
 8000fea:	2308      	movs	r3, #8
 8000fec:	e00c      	b.n	8001008 <HAL_GPIO_Init+0x228>
 8000fee:	2306      	movs	r3, #6
 8000ff0:	e00a      	b.n	8001008 <HAL_GPIO_Init+0x228>
 8000ff2:	2305      	movs	r3, #5
 8000ff4:	e008      	b.n	8001008 <HAL_GPIO_Init+0x228>
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	e006      	b.n	8001008 <HAL_GPIO_Init+0x228>
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e004      	b.n	8001008 <HAL_GPIO_Init+0x228>
 8000ffe:	2302      	movs	r3, #2
 8001000:	e002      	b.n	8001008 <HAL_GPIO_Init+0x228>
 8001002:	2301      	movs	r3, #1
 8001004:	e000      	b.n	8001008 <HAL_GPIO_Init+0x228>
 8001006:	2300      	movs	r3, #0
 8001008:	69fa      	ldr	r2, [r7, #28]
 800100a:	f002 0203 	and.w	r2, r2, #3
 800100e:	0092      	lsls	r2, r2, #2
 8001010:	4093      	lsls	r3, r2
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001018:	4935      	ldr	r1, [pc, #212]	; (80010f0 <HAL_GPIO_Init+0x310>)
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	089b      	lsrs	r3, r3, #2
 800101e:	3302      	adds	r3, #2
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001026:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <HAL_GPIO_Init+0x334>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800104a:	4a32      	ldr	r2, [pc, #200]	; (8001114 <HAL_GPIO_Init+0x334>)
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001050:	4b30      	ldr	r3, [pc, #192]	; (8001114 <HAL_GPIO_Init+0x334>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001074:	4a27      	ldr	r2, [pc, #156]	; (8001114 <HAL_GPIO_Init+0x334>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800107a:	4b26      	ldr	r3, [pc, #152]	; (8001114 <HAL_GPIO_Init+0x334>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800109e:	4a1d      	ldr	r2, [pc, #116]	; (8001114 <HAL_GPIO_Init+0x334>)
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <HAL_GPIO_Init+0x334>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010c8:	4a12      	ldr	r2, [pc, #72]	; (8001114 <HAL_GPIO_Init+0x334>)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3301      	adds	r3, #1
 80010d2:	61fb      	str	r3, [r7, #28]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	2b0f      	cmp	r3, #15
 80010d8:	f67f ae90 	bls.w	8000dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3724      	adds	r7, #36	; 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40013800 	.word	0x40013800
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40020400 	.word	0x40020400
 80010fc:	40020800 	.word	0x40020800
 8001100:	40020c00 	.word	0x40020c00
 8001104:	40021000 	.word	0x40021000
 8001108:	40021400 	.word	0x40021400
 800110c:	40021800 	.word	0x40021800
 8001110:	40021c00 	.word	0x40021c00
 8001114:	40013c00 	.word	0x40013c00

08001118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
 8001124:	4613      	mov	r3, r2
 8001126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001128:	787b      	ldrb	r3, [r7, #1]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001134:	e003      	b.n	800113e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001136:	887b      	ldrh	r3, [r7, #2]
 8001138:	041a      	lsls	r2, r3, #16
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	619a      	str	r2, [r3, #24]
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800114a:	b480      	push	{r7}
 800114c:	b085      	sub	sp, #20
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	460b      	mov	r3, r1
 8001154:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800115c:	887a      	ldrh	r2, [r7, #2]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4013      	ands	r3, r2
 8001162:	041a      	lsls	r2, r3, #16
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	43d9      	mvns	r1, r3
 8001168:	887b      	ldrh	r3, [r7, #2]
 800116a:	400b      	ands	r3, r1
 800116c:	431a      	orrs	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	619a      	str	r2, [r3, #24]
}
 8001172:	bf00      	nop
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_PWR_EnableBkUpAccess+0x20>)
 8001188:	2201      	movs	r2, #1
 800118a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <HAL_PWR_EnableBkUpAccess+0x24>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8001192:	687b      	ldr	r3, [r7, #4]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	420e0020 	.word	0x420e0020
 80011a4:	40007000 	.word	0x40007000

080011a8 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_PWR_DisableBkUpAccess+0x20>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <HAL_PWR_DisableBkUpAccess+0x24>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80011ba:	687b      	ldr	r3, [r7, #4]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	420e0020 	.word	0x420e0020
 80011cc:	40007000 	.word	0x40007000

080011d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e264      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d075      	beq.n	80012da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ee:	4ba3      	ldr	r3, [pc, #652]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d00c      	beq.n	8001214 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011fa:	4ba0      	ldr	r3, [pc, #640]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001202:	2b08      	cmp	r3, #8
 8001204:	d112      	bne.n	800122c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001206:	4b9d      	ldr	r3, [pc, #628]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800120e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001212:	d10b      	bne.n	800122c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001214:	4b99      	ldr	r3, [pc, #612]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d05b      	beq.n	80012d8 <HAL_RCC_OscConfig+0x108>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d157      	bne.n	80012d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e23f      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001234:	d106      	bne.n	8001244 <HAL_RCC_OscConfig+0x74>
 8001236:	4b91      	ldr	r3, [pc, #580]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a90      	ldr	r2, [pc, #576]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800123c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e01d      	b.n	8001280 <HAL_RCC_OscConfig+0xb0>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800124c:	d10c      	bne.n	8001268 <HAL_RCC_OscConfig+0x98>
 800124e:	4b8b      	ldr	r3, [pc, #556]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a8a      	ldr	r2, [pc, #552]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b88      	ldr	r3, [pc, #544]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a87      	ldr	r2, [pc, #540]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e00b      	b.n	8001280 <HAL_RCC_OscConfig+0xb0>
 8001268:	4b84      	ldr	r3, [pc, #528]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a83      	ldr	r2, [pc, #524]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800126e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b81      	ldr	r3, [pc, #516]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a80      	ldr	r2, [pc, #512]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800127a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800127e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d013      	beq.n	80012b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001288:	f7ff fc94 	bl	8000bb4 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001290:	f7ff fc90 	bl	8000bb4 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b64      	cmp	r3, #100	; 0x64
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e204      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a2:	4b76      	ldr	r3, [pc, #472]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f0      	beq.n	8001290 <HAL_RCC_OscConfig+0xc0>
 80012ae:	e014      	b.n	80012da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b0:	f7ff fc80 	bl	8000bb4 <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b8:	f7ff fc7c 	bl	8000bb4 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b64      	cmp	r3, #100	; 0x64
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e1f0      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ca:	4b6c      	ldr	r3, [pc, #432]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f0      	bne.n	80012b8 <HAL_RCC_OscConfig+0xe8>
 80012d6:	e000      	b.n	80012da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d063      	beq.n	80013ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012e6:	4b65      	ldr	r3, [pc, #404]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00b      	beq.n	800130a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012f2:	4b62      	ldr	r3, [pc, #392]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d11c      	bne.n	8001338 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fe:	4b5f      	ldr	r3, [pc, #380]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d116      	bne.n	8001338 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130a:	4b5c      	ldr	r3, [pc, #368]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d005      	beq.n	8001322 <HAL_RCC_OscConfig+0x152>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d001      	beq.n	8001322 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e1c4      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001322:	4b56      	ldr	r3, [pc, #344]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	4952      	ldr	r1, [pc, #328]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001336:	e03a      	b.n	80013ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d020      	beq.n	8001382 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001340:	4b4f      	ldr	r3, [pc, #316]	; (8001480 <HAL_RCC_OscConfig+0x2b0>)
 8001342:	2201      	movs	r2, #1
 8001344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001346:	f7ff fc35 	bl	8000bb4 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800134e:	f7ff fc31 	bl	8000bb4 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e1a5      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001360:	4b46      	ldr	r3, [pc, #280]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136c:	4b43      	ldr	r3, [pc, #268]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	4940      	ldr	r1, [pc, #256]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800137c:	4313      	orrs	r3, r2
 800137e:	600b      	str	r3, [r1, #0]
 8001380:	e015      	b.n	80013ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001382:	4b3f      	ldr	r3, [pc, #252]	; (8001480 <HAL_RCC_OscConfig+0x2b0>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001388:	f7ff fc14 	bl	8000bb4 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001390:	f7ff fc10 	bl	8000bb4 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e184      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a2:	4b36      	ldr	r3, [pc, #216]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d030      	beq.n	800141c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d016      	beq.n	80013f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c2:	4b30      	ldr	r3, [pc, #192]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c8:	f7ff fbf4 	bl	8000bb4 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d0:	f7ff fbf0 	bl	8000bb4 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e164      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e2:	4b26      	ldr	r3, [pc, #152]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0x200>
 80013ee:	e015      	b.n	800141c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f0:	4b24      	ldr	r3, [pc, #144]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f6:	f7ff fbdd 	bl	8000bb4 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013fe:	f7ff fbd9 	bl	8000bb4 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e14d      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001410:	4b1a      	ldr	r3, [pc, #104]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f0      	bne.n	80013fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 80a0 	beq.w	800156a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10f      	bne.n	800145a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	4a0e      	ldr	r2, [pc, #56]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001448:	6413      	str	r3, [r2, #64]	; 0x40
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001456:	2301      	movs	r3, #1
 8001458:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <HAL_RCC_OscConfig+0x2b8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001462:	2b00      	cmp	r3, #0
 8001464:	d121      	bne.n	80014aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HAL_RCC_OscConfig+0x2b8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_RCC_OscConfig+0x2b8>)
 800146c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001472:	f7ff fb9f 	bl	8000bb4 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001478:	e011      	b.n	800149e <HAL_RCC_OscConfig+0x2ce>
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	42470000 	.word	0x42470000
 8001484:	42470e80 	.word	0x42470e80
 8001488:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800148c:	f7ff fb92 	bl	8000bb4 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e106      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149e:	4b85      	ldr	r3, [pc, #532]	; (80016b4 <HAL_RCC_OscConfig+0x4e4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d106      	bne.n	80014c0 <HAL_RCC_OscConfig+0x2f0>
 80014b2:	4b81      	ldr	r3, [pc, #516]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 80014b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b6:	4a80      	ldr	r2, [pc, #512]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6713      	str	r3, [r2, #112]	; 0x70
 80014be:	e01c      	b.n	80014fa <HAL_RCC_OscConfig+0x32a>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	2b05      	cmp	r3, #5
 80014c6:	d10c      	bne.n	80014e2 <HAL_RCC_OscConfig+0x312>
 80014c8:	4b7b      	ldr	r3, [pc, #492]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 80014ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014cc:	4a7a      	ldr	r2, [pc, #488]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	6713      	str	r3, [r2, #112]	; 0x70
 80014d4:	4b78      	ldr	r3, [pc, #480]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 80014d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d8:	4a77      	ldr	r2, [pc, #476]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6713      	str	r3, [r2, #112]	; 0x70
 80014e0:	e00b      	b.n	80014fa <HAL_RCC_OscConfig+0x32a>
 80014e2:	4b75      	ldr	r3, [pc, #468]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 80014e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e6:	4a74      	ldr	r2, [pc, #464]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 80014e8:	f023 0301 	bic.w	r3, r3, #1
 80014ec:	6713      	str	r3, [r2, #112]	; 0x70
 80014ee:	4b72      	ldr	r3, [pc, #456]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 80014f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f2:	4a71      	ldr	r2, [pc, #452]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 80014f4:	f023 0304 	bic.w	r3, r3, #4
 80014f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d015      	beq.n	800152e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001502:	f7ff fb57 	bl	8000bb4 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001508:	e00a      	b.n	8001520 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800150a:	f7ff fb53 	bl	8000bb4 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	f241 3288 	movw	r2, #5000	; 0x1388
 8001518:	4293      	cmp	r3, r2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e0c5      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001520:	4b65      	ldr	r3, [pc, #404]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 8001522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0ee      	beq.n	800150a <HAL_RCC_OscConfig+0x33a>
 800152c:	e014      	b.n	8001558 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152e:	f7ff fb41 	bl	8000bb4 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001534:	e00a      	b.n	800154c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001536:	f7ff fb3d 	bl	8000bb4 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	f241 3288 	movw	r2, #5000	; 0x1388
 8001544:	4293      	cmp	r3, r2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e0af      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154c:	4b5a      	ldr	r3, [pc, #360]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1ee      	bne.n	8001536 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d105      	bne.n	800156a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800155e:	4b56      	ldr	r3, [pc, #344]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	4a55      	ldr	r2, [pc, #340]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 8001564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001568:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 809b 	beq.w	80016aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001574:	4b50      	ldr	r3, [pc, #320]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 030c 	and.w	r3, r3, #12
 800157c:	2b08      	cmp	r3, #8
 800157e:	d05c      	beq.n	800163a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d141      	bne.n	800160c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001588:	4b4c      	ldr	r3, [pc, #304]	; (80016bc <HAL_RCC_OscConfig+0x4ec>)
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158e:	f7ff fb11 	bl	8000bb4 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001596:	f7ff fb0d 	bl	8000bb4 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e081      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a8:	4b43      	ldr	r3, [pc, #268]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f0      	bne.n	8001596 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69da      	ldr	r2, [r3, #28]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	431a      	orrs	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	019b      	lsls	r3, r3, #6
 80015c4:	431a      	orrs	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ca:	085b      	lsrs	r3, r3, #1
 80015cc:	3b01      	subs	r3, #1
 80015ce:	041b      	lsls	r3, r3, #16
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d6:	061b      	lsls	r3, r3, #24
 80015d8:	4937      	ldr	r1, [pc, #220]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015de:	4b37      	ldr	r3, [pc, #220]	; (80016bc <HAL_RCC_OscConfig+0x4ec>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fae6 	bl	8000bb4 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ec:	f7ff fae2 	bl	8000bb4 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e056      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fe:	4b2e      	ldr	r3, [pc, #184]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x41c>
 800160a:	e04e      	b.n	80016aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160c:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <HAL_RCC_OscConfig+0x4ec>)
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001612:	f7ff facf 	bl	8000bb4 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161a:	f7ff facb 	bl	8000bb4 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e03f      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162c:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f0      	bne.n	800161a <HAL_RCC_OscConfig+0x44a>
 8001638:	e037      	b.n	80016aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d101      	bne.n	8001646 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e032      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <HAL_RCC_OscConfig+0x4e8>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d028      	beq.n	80016a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800165e:	429a      	cmp	r2, r3
 8001660:	d121      	bne.n	80016a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166c:	429a      	cmp	r2, r3
 800166e:	d11a      	bne.n	80016a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001676:	4013      	ands	r3, r2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800167c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800167e:	4293      	cmp	r3, r2
 8001680:	d111      	bne.n	80016a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168c:	085b      	lsrs	r3, r3, #1
 800168e:	3b01      	subs	r3, #1
 8001690:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001692:	429a      	cmp	r2, r3
 8001694:	d107      	bne.n	80016a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d001      	beq.n	80016aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40007000 	.word	0x40007000
 80016b8:	40023800 	.word	0x40023800
 80016bc:	42470060 	.word	0x42470060

080016c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0cc      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d4:	4b68      	ldr	r3, [pc, #416]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d90c      	bls.n	80016fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	4b65      	ldr	r3, [pc, #404]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b63      	ldr	r3, [pc, #396]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0b8      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d020      	beq.n	800174a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001714:	4b59      	ldr	r3, [pc, #356]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4a58      	ldr	r2, [pc, #352]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800171e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800172c:	4b53      	ldr	r3, [pc, #332]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	4a52      	ldr	r2, [pc, #328]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001736:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001738:	4b50      	ldr	r3, [pc, #320]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	494d      	ldr	r1, [pc, #308]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	4313      	orrs	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d044      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d107      	bne.n	800176e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	4b47      	ldr	r3, [pc, #284]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d119      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e07f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d003      	beq.n	800177e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177a:	2b03      	cmp	r3, #3
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177e:	4b3f      	ldr	r3, [pc, #252]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d109      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e06f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178e:	4b3b      	ldr	r3, [pc, #236]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e067      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179e:	4b37      	ldr	r3, [pc, #220]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f023 0203 	bic.w	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4934      	ldr	r1, [pc, #208]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b0:	f7ff fa00 	bl	8000bb4 <HAL_GetTick>
 80017b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b6:	e00a      	b.n	80017ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b8:	f7ff f9fc 	bl	8000bb4 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e04f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ce:	4b2b      	ldr	r3, [pc, #172]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 020c 	and.w	r2, r3, #12
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	429a      	cmp	r2, r3
 80017de:	d1eb      	bne.n	80017b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e0:	4b25      	ldr	r3, [pc, #148]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d20c      	bcs.n	8001808 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b22      	ldr	r3, [pc, #136]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e032      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d008      	beq.n	8001826 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4916      	ldr	r1, [pc, #88]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d009      	beq.n	8001846 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	490e      	ldr	r1, [pc, #56]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001846:	f000 f821 	bl	800188c <HAL_RCC_GetSysClockFreq>
 800184a:	4602      	mov	r2, r0
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	490a      	ldr	r1, [pc, #40]	; (8001880 <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	5ccb      	ldrb	r3, [r1, r3]
 800185a:	fa22 f303 	lsr.w	r3, r2, r3
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff f960 	bl	8000b2c <HAL_InitTick>

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023c00 	.word	0x40023c00
 800187c:	40023800 	.word	0x40023800
 8001880:	080054e4 	.word	0x080054e4
 8001884:	20000000 	.word	0x20000000
 8001888:	20000004 	.word	0x20000004

0800188c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800188c:	b5b0      	push	{r4, r5, r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001892:	2100      	movs	r1, #0
 8001894:	6079      	str	r1, [r7, #4]
 8001896:	2100      	movs	r1, #0
 8001898:	60f9      	str	r1, [r7, #12]
 800189a:	2100      	movs	r1, #0
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800189e:	2100      	movs	r1, #0
 80018a0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018a2:	4952      	ldr	r1, [pc, #328]	; (80019ec <HAL_RCC_GetSysClockFreq+0x160>)
 80018a4:	6889      	ldr	r1, [r1, #8]
 80018a6:	f001 010c 	and.w	r1, r1, #12
 80018aa:	2908      	cmp	r1, #8
 80018ac:	d00d      	beq.n	80018ca <HAL_RCC_GetSysClockFreq+0x3e>
 80018ae:	2908      	cmp	r1, #8
 80018b0:	f200 8094 	bhi.w	80019dc <HAL_RCC_GetSysClockFreq+0x150>
 80018b4:	2900      	cmp	r1, #0
 80018b6:	d002      	beq.n	80018be <HAL_RCC_GetSysClockFreq+0x32>
 80018b8:	2904      	cmp	r1, #4
 80018ba:	d003      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0x38>
 80018bc:	e08e      	b.n	80019dc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018be:	4b4c      	ldr	r3, [pc, #304]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80018c0:	60bb      	str	r3, [r7, #8]
       break;
 80018c2:	e08e      	b.n	80019e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018c4:	4b4b      	ldr	r3, [pc, #300]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80018c6:	60bb      	str	r3, [r7, #8]
      break;
 80018c8:	e08b      	b.n	80019e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018ca:	4948      	ldr	r1, [pc, #288]	; (80019ec <HAL_RCC_GetSysClockFreq+0x160>)
 80018cc:	6849      	ldr	r1, [r1, #4]
 80018ce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80018d2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018d4:	4945      	ldr	r1, [pc, #276]	; (80019ec <HAL_RCC_GetSysClockFreq+0x160>)
 80018d6:	6849      	ldr	r1, [r1, #4]
 80018d8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80018dc:	2900      	cmp	r1, #0
 80018de:	d024      	beq.n	800192a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e0:	4942      	ldr	r1, [pc, #264]	; (80019ec <HAL_RCC_GetSysClockFreq+0x160>)
 80018e2:	6849      	ldr	r1, [r1, #4]
 80018e4:	0989      	lsrs	r1, r1, #6
 80018e6:	4608      	mov	r0, r1
 80018e8:	f04f 0100 	mov.w	r1, #0
 80018ec:	f240 14ff 	movw	r4, #511	; 0x1ff
 80018f0:	f04f 0500 	mov.w	r5, #0
 80018f4:	ea00 0204 	and.w	r2, r0, r4
 80018f8:	ea01 0305 	and.w	r3, r1, r5
 80018fc:	493d      	ldr	r1, [pc, #244]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80018fe:	fb01 f003 	mul.w	r0, r1, r3
 8001902:	2100      	movs	r1, #0
 8001904:	fb01 f102 	mul.w	r1, r1, r2
 8001908:	1844      	adds	r4, r0, r1
 800190a:	493a      	ldr	r1, [pc, #232]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x168>)
 800190c:	fba2 0101 	umull	r0, r1, r2, r1
 8001910:	1863      	adds	r3, r4, r1
 8001912:	4619      	mov	r1, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	461a      	mov	r2, r3
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	f7fe fc58 	bl	80001d0 <__aeabi_uldivmod>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4613      	mov	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	e04a      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800192a:	4b30      	ldr	r3, [pc, #192]	; (80019ec <HAL_RCC_GetSysClockFreq+0x160>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	099b      	lsrs	r3, r3, #6
 8001930:	461a      	mov	r2, r3
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	f240 10ff 	movw	r0, #511	; 0x1ff
 800193a:	f04f 0100 	mov.w	r1, #0
 800193e:	ea02 0400 	and.w	r4, r2, r0
 8001942:	ea03 0501 	and.w	r5, r3, r1
 8001946:	4620      	mov	r0, r4
 8001948:	4629      	mov	r1, r5
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	014b      	lsls	r3, r1, #5
 8001954:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001958:	0142      	lsls	r2, r0, #5
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	1b00      	subs	r0, r0, r4
 8001960:	eb61 0105 	sbc.w	r1, r1, r5
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	018b      	lsls	r3, r1, #6
 800196e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001972:	0182      	lsls	r2, r0, #6
 8001974:	1a12      	subs	r2, r2, r0
 8001976:	eb63 0301 	sbc.w	r3, r3, r1
 800197a:	f04f 0000 	mov.w	r0, #0
 800197e:	f04f 0100 	mov.w	r1, #0
 8001982:	00d9      	lsls	r1, r3, #3
 8001984:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001988:	00d0      	lsls	r0, r2, #3
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	1912      	adds	r2, r2, r4
 8001990:	eb45 0303 	adc.w	r3, r5, r3
 8001994:	f04f 0000 	mov.w	r0, #0
 8001998:	f04f 0100 	mov.w	r1, #0
 800199c:	0299      	lsls	r1, r3, #10
 800199e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80019a2:	0290      	lsls	r0, r2, #10
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	461a      	mov	r2, r3
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	f7fe fc0c 	bl	80001d0 <__aeabi_uldivmod>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4613      	mov	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019c0:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_RCC_GetSysClockFreq+0x160>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	0c1b      	lsrs	r3, r3, #16
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	3301      	adds	r3, #1
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d8:	60bb      	str	r3, [r7, #8]
      break;
 80019da:	e002      	b.n	80019e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80019de:	60bb      	str	r3, [r7, #8]
      break;
 80019e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019e2:	68bb      	ldr	r3, [r7, #8]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bdb0      	pop	{r4, r5, r7, pc}
 80019ec:	40023800 	.word	0x40023800
 80019f0:	00f42400 	.word	0x00f42400
 80019f4:	017d7840 	.word	0x017d7840

080019f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e041      	b.n	8001a8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d106      	bne.n	8001a24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7fe ffba 	bl	8000998 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2202      	movs	r2, #2
 8001a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3304      	adds	r3, #4
 8001a34:	4619      	mov	r1, r3
 8001a36:	4610      	mov	r0, r2
 8001a38:	f000 f9b8 	bl	8001dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d109      	bne.n	8001abc <HAL_TIM_PWM_Start+0x24>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	bf14      	ite	ne
 8001ab4:	2301      	movne	r3, #1
 8001ab6:	2300      	moveq	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	e022      	b.n	8001b02 <HAL_TIM_PWM_Start+0x6a>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d109      	bne.n	8001ad6 <HAL_TIM_PWM_Start+0x3e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	bf14      	ite	ne
 8001ace:	2301      	movne	r3, #1
 8001ad0:	2300      	moveq	r3, #0
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	e015      	b.n	8001b02 <HAL_TIM_PWM_Start+0x6a>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d109      	bne.n	8001af0 <HAL_TIM_PWM_Start+0x58>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	bf14      	ite	ne
 8001ae8:	2301      	movne	r3, #1
 8001aea:	2300      	moveq	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	e008      	b.n	8001b02 <HAL_TIM_PWM_Start+0x6a>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	bf14      	ite	ne
 8001afc:	2301      	movne	r3, #1
 8001afe:	2300      	moveq	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e07c      	b.n	8001c04 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d104      	bne.n	8001b1a <HAL_TIM_PWM_Start+0x82>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2202      	movs	r2, #2
 8001b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b18:	e013      	b.n	8001b42 <HAL_TIM_PWM_Start+0xaa>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d104      	bne.n	8001b2a <HAL_TIM_PWM_Start+0x92>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2202      	movs	r2, #2
 8001b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b28:	e00b      	b.n	8001b42 <HAL_TIM_PWM_Start+0xaa>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d104      	bne.n	8001b3a <HAL_TIM_PWM_Start+0xa2>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2202      	movs	r2, #2
 8001b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b38:	e003      	b.n	8001b42 <HAL_TIM_PWM_Start+0xaa>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2201      	movs	r2, #1
 8001b48:	6839      	ldr	r1, [r7, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 fb7e 	bl	800224c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a2d      	ldr	r2, [pc, #180]	; (8001c0c <HAL_TIM_PWM_Start+0x174>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d004      	beq.n	8001b64 <HAL_TIM_PWM_Start+0xcc>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a2c      	ldr	r2, [pc, #176]	; (8001c10 <HAL_TIM_PWM_Start+0x178>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d101      	bne.n	8001b68 <HAL_TIM_PWM_Start+0xd0>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <HAL_TIM_PWM_Start+0xd2>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d007      	beq.n	8001b7e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a22      	ldr	r2, [pc, #136]	; (8001c0c <HAL_TIM_PWM_Start+0x174>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d022      	beq.n	8001bce <HAL_TIM_PWM_Start+0x136>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b90:	d01d      	beq.n	8001bce <HAL_TIM_PWM_Start+0x136>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a1f      	ldr	r2, [pc, #124]	; (8001c14 <HAL_TIM_PWM_Start+0x17c>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d018      	beq.n	8001bce <HAL_TIM_PWM_Start+0x136>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a1d      	ldr	r2, [pc, #116]	; (8001c18 <HAL_TIM_PWM_Start+0x180>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d013      	beq.n	8001bce <HAL_TIM_PWM_Start+0x136>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a1c      	ldr	r2, [pc, #112]	; (8001c1c <HAL_TIM_PWM_Start+0x184>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d00e      	beq.n	8001bce <HAL_TIM_PWM_Start+0x136>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a16      	ldr	r2, [pc, #88]	; (8001c10 <HAL_TIM_PWM_Start+0x178>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d009      	beq.n	8001bce <HAL_TIM_PWM_Start+0x136>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a18      	ldr	r2, [pc, #96]	; (8001c20 <HAL_TIM_PWM_Start+0x188>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d004      	beq.n	8001bce <HAL_TIM_PWM_Start+0x136>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a16      	ldr	r2, [pc, #88]	; (8001c24 <HAL_TIM_PWM_Start+0x18c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d111      	bne.n	8001bf2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2b06      	cmp	r3, #6
 8001bde:	d010      	beq.n	8001c02 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0201 	orr.w	r2, r2, #1
 8001bee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bf0:	e007      	b.n	8001c02 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f042 0201 	orr.w	r2, r2, #1
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40010000 	.word	0x40010000
 8001c10:	40010400 	.word	0x40010400
 8001c14:	40000400 	.word	0x40000400
 8001c18:	40000800 	.word	0x40000800
 8001c1c:	40000c00 	.word	0x40000c00
 8001c20:	40014000 	.word	0x40014000
 8001c24:	40001800 	.word	0x40001800

08001c28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e0ae      	b.n	8001da4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b0c      	cmp	r3, #12
 8001c52:	f200 809f 	bhi.w	8001d94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001c56:	a201      	add	r2, pc, #4	; (adr r2, 8001c5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c5c:	08001c91 	.word	0x08001c91
 8001c60:	08001d95 	.word	0x08001d95
 8001c64:	08001d95 	.word	0x08001d95
 8001c68:	08001d95 	.word	0x08001d95
 8001c6c:	08001cd1 	.word	0x08001cd1
 8001c70:	08001d95 	.word	0x08001d95
 8001c74:	08001d95 	.word	0x08001d95
 8001c78:	08001d95 	.word	0x08001d95
 8001c7c:	08001d13 	.word	0x08001d13
 8001c80:	08001d95 	.word	0x08001d95
 8001c84:	08001d95 	.word	0x08001d95
 8001c88:	08001d95 	.word	0x08001d95
 8001c8c:	08001d53 	.word	0x08001d53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f928 	bl	8001eec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699a      	ldr	r2, [r3, #24]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0208 	orr.w	r2, r2, #8
 8001caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699a      	ldr	r2, [r3, #24]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0204 	bic.w	r2, r2, #4
 8001cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6999      	ldr	r1, [r3, #24]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	691a      	ldr	r2, [r3, #16]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	619a      	str	r2, [r3, #24]
      break;
 8001cce:	e064      	b.n	8001d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 f978 	bl	8001fcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699a      	ldr	r2, [r3, #24]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699a      	ldr	r2, [r3, #24]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6999      	ldr	r1, [r3, #24]
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	021a      	lsls	r2, r3, #8
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	619a      	str	r2, [r3, #24]
      break;
 8001d10:	e043      	b.n	8001d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68b9      	ldr	r1, [r7, #8]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 f9cd 	bl	80020b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	69da      	ldr	r2, [r3, #28]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 0208 	orr.w	r2, r2, #8
 8001d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69da      	ldr	r2, [r3, #28]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0204 	bic.w	r2, r2, #4
 8001d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	69d9      	ldr	r1, [r3, #28]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	61da      	str	r2, [r3, #28]
      break;
 8001d50:	e023      	b.n	8001d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68b9      	ldr	r1, [r7, #8]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 fa21 	bl	80021a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	69da      	ldr	r2, [r3, #28]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	69da      	ldr	r2, [r3, #28]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	69d9      	ldr	r1, [r3, #28]
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	021a      	lsls	r2, r3, #8
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	61da      	str	r2, [r3, #28]
      break;
 8001d92:	e002      	b.n	8001d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	75fb      	strb	r3, [r7, #23]
      break;
 8001d98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a40      	ldr	r2, [pc, #256]	; (8001ec0 <TIM_Base_SetConfig+0x114>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d013      	beq.n	8001dec <TIM_Base_SetConfig+0x40>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dca:	d00f      	beq.n	8001dec <TIM_Base_SetConfig+0x40>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a3d      	ldr	r2, [pc, #244]	; (8001ec4 <TIM_Base_SetConfig+0x118>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d00b      	beq.n	8001dec <TIM_Base_SetConfig+0x40>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a3c      	ldr	r2, [pc, #240]	; (8001ec8 <TIM_Base_SetConfig+0x11c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d007      	beq.n	8001dec <TIM_Base_SetConfig+0x40>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a3b      	ldr	r2, [pc, #236]	; (8001ecc <TIM_Base_SetConfig+0x120>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d003      	beq.n	8001dec <TIM_Base_SetConfig+0x40>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a3a      	ldr	r2, [pc, #232]	; (8001ed0 <TIM_Base_SetConfig+0x124>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d108      	bne.n	8001dfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a2f      	ldr	r2, [pc, #188]	; (8001ec0 <TIM_Base_SetConfig+0x114>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d02b      	beq.n	8001e5e <TIM_Base_SetConfig+0xb2>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e0c:	d027      	beq.n	8001e5e <TIM_Base_SetConfig+0xb2>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a2c      	ldr	r2, [pc, #176]	; (8001ec4 <TIM_Base_SetConfig+0x118>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d023      	beq.n	8001e5e <TIM_Base_SetConfig+0xb2>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a2b      	ldr	r2, [pc, #172]	; (8001ec8 <TIM_Base_SetConfig+0x11c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d01f      	beq.n	8001e5e <TIM_Base_SetConfig+0xb2>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a2a      	ldr	r2, [pc, #168]	; (8001ecc <TIM_Base_SetConfig+0x120>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d01b      	beq.n	8001e5e <TIM_Base_SetConfig+0xb2>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a29      	ldr	r2, [pc, #164]	; (8001ed0 <TIM_Base_SetConfig+0x124>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d017      	beq.n	8001e5e <TIM_Base_SetConfig+0xb2>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a28      	ldr	r2, [pc, #160]	; (8001ed4 <TIM_Base_SetConfig+0x128>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d013      	beq.n	8001e5e <TIM_Base_SetConfig+0xb2>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a27      	ldr	r2, [pc, #156]	; (8001ed8 <TIM_Base_SetConfig+0x12c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d00f      	beq.n	8001e5e <TIM_Base_SetConfig+0xb2>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a26      	ldr	r2, [pc, #152]	; (8001edc <TIM_Base_SetConfig+0x130>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00b      	beq.n	8001e5e <TIM_Base_SetConfig+0xb2>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a25      	ldr	r2, [pc, #148]	; (8001ee0 <TIM_Base_SetConfig+0x134>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d007      	beq.n	8001e5e <TIM_Base_SetConfig+0xb2>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a24      	ldr	r2, [pc, #144]	; (8001ee4 <TIM_Base_SetConfig+0x138>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d003      	beq.n	8001e5e <TIM_Base_SetConfig+0xb2>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a23      	ldr	r2, [pc, #140]	; (8001ee8 <TIM_Base_SetConfig+0x13c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d108      	bne.n	8001e70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <TIM_Base_SetConfig+0x114>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d003      	beq.n	8001ea4 <TIM_Base_SetConfig+0xf8>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a0c      	ldr	r2, [pc, #48]	; (8001ed0 <TIM_Base_SetConfig+0x124>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d103      	bne.n	8001eac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	691a      	ldr	r2, [r3, #16]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	615a      	str	r2, [r3, #20]
}
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40010000 	.word	0x40010000
 8001ec4:	40000400 	.word	0x40000400
 8001ec8:	40000800 	.word	0x40000800
 8001ecc:	40000c00 	.word	0x40000c00
 8001ed0:	40010400 	.word	0x40010400
 8001ed4:	40014000 	.word	0x40014000
 8001ed8:	40014400 	.word	0x40014400
 8001edc:	40014800 	.word	0x40014800
 8001ee0:	40001800 	.word	0x40001800
 8001ee4:	40001c00 	.word	0x40001c00
 8001ee8:	40002000 	.word	0x40002000

08001eec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	f023 0201 	bic.w	r2, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f023 0303 	bic.w	r3, r3, #3
 8001f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f023 0302 	bic.w	r3, r3, #2
 8001f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a20      	ldr	r2, [pc, #128]	; (8001fc4 <TIM_OC1_SetConfig+0xd8>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d003      	beq.n	8001f50 <TIM_OC1_SetConfig+0x64>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a1f      	ldr	r2, [pc, #124]	; (8001fc8 <TIM_OC1_SetConfig+0xdc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d10c      	bne.n	8001f6a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f023 0308 	bic.w	r3, r3, #8
 8001f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f023 0304 	bic.w	r3, r3, #4
 8001f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a15      	ldr	r2, [pc, #84]	; (8001fc4 <TIM_OC1_SetConfig+0xd8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d003      	beq.n	8001f7a <TIM_OC1_SetConfig+0x8e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a14      	ldr	r2, [pc, #80]	; (8001fc8 <TIM_OC1_SetConfig+0xdc>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d111      	bne.n	8001f9e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	621a      	str	r2, [r3, #32]
}
 8001fb8:	bf00      	nop
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	40010000 	.word	0x40010000
 8001fc8:	40010400 	.word	0x40010400

08001fcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	f023 0210 	bic.w	r2, r3, #16
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	4313      	orrs	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f023 0320 	bic.w	r3, r3, #32
 8002016:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4313      	orrs	r3, r2
 8002022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a22      	ldr	r2, [pc, #136]	; (80020b0 <TIM_OC2_SetConfig+0xe4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d003      	beq.n	8002034 <TIM_OC2_SetConfig+0x68>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a21      	ldr	r2, [pc, #132]	; (80020b4 <TIM_OC2_SetConfig+0xe8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d10d      	bne.n	8002050 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800203a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	4313      	orrs	r3, r2
 8002046:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800204e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a17      	ldr	r2, [pc, #92]	; (80020b0 <TIM_OC2_SetConfig+0xe4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d003      	beq.n	8002060 <TIM_OC2_SetConfig+0x94>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a16      	ldr	r2, [pc, #88]	; (80020b4 <TIM_OC2_SetConfig+0xe8>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d113      	bne.n	8002088 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002066:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800206e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	621a      	str	r2, [r3, #32]
}
 80020a2:	bf00      	nop
 80020a4:	371c      	adds	r7, #28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40010000 	.word	0x40010000
 80020b4:	40010400 	.word	0x40010400

080020b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f023 0303 	bic.w	r3, r3, #3
 80020ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	021b      	lsls	r3, r3, #8
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	4313      	orrs	r3, r2
 800210c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a21      	ldr	r2, [pc, #132]	; (8002198 <TIM_OC3_SetConfig+0xe0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d003      	beq.n	800211e <TIM_OC3_SetConfig+0x66>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a20      	ldr	r2, [pc, #128]	; (800219c <TIM_OC3_SetConfig+0xe4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d10d      	bne.n	800213a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002124:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	4313      	orrs	r3, r2
 8002130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a16      	ldr	r2, [pc, #88]	; (8002198 <TIM_OC3_SetConfig+0xe0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d003      	beq.n	800214a <TIM_OC3_SetConfig+0x92>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a15      	ldr	r2, [pc, #84]	; (800219c <TIM_OC3_SetConfig+0xe4>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d113      	bne.n	8002172 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002150:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002158:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	621a      	str	r2, [r3, #32]
}
 800218c:	bf00      	nop
 800218e:	371c      	adds	r7, #28
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	40010000 	.word	0x40010000
 800219c:	40010400 	.word	0x40010400

080021a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	031b      	lsls	r3, r3, #12
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a12      	ldr	r2, [pc, #72]	; (8002244 <TIM_OC4_SetConfig+0xa4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d003      	beq.n	8002208 <TIM_OC4_SetConfig+0x68>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a11      	ldr	r2, [pc, #68]	; (8002248 <TIM_OC4_SetConfig+0xa8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d109      	bne.n	800221c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800220e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	019b      	lsls	r3, r3, #6
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4313      	orrs	r3, r2
 800221a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	621a      	str	r2, [r3, #32]
}
 8002236:	bf00      	nop
 8002238:	371c      	adds	r7, #28
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40010000 	.word	0x40010000
 8002248:	40010400 	.word	0x40010400

0800224c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f003 031f 	and.w	r3, r3, #31
 800225e:	2201      	movs	r2, #1
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6a1a      	ldr	r2, [r3, #32]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	43db      	mvns	r3, r3
 800226e:	401a      	ands	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a1a      	ldr	r2, [r3, #32]
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	fa01 f303 	lsl.w	r3, r1, r3
 8002284:	431a      	orrs	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	621a      	str	r2, [r3, #32]
}
 800228a:	bf00      	nop
 800228c:	371c      	adds	r7, #28
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e05a      	b.n	8002366 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a21      	ldr	r2, [pc, #132]	; (8002374 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d022      	beq.n	800233a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022fc:	d01d      	beq.n	800233a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a1d      	ldr	r2, [pc, #116]	; (8002378 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d018      	beq.n	800233a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a1b      	ldr	r2, [pc, #108]	; (800237c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d013      	beq.n	800233a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a1a      	ldr	r2, [pc, #104]	; (8002380 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d00e      	beq.n	800233a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a18      	ldr	r2, [pc, #96]	; (8002384 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d009      	beq.n	800233a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a17      	ldr	r2, [pc, #92]	; (8002388 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d004      	beq.n	800233a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a15      	ldr	r2, [pc, #84]	; (800238c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d10c      	bne.n	8002354 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002340:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	4313      	orrs	r3, r2
 800234a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40010000 	.word	0x40010000
 8002378:	40000400 	.word	0x40000400
 800237c:	40000800 	.word	0x40000800
 8002380:	40000c00 	.word	0x40000c00
 8002384:	40010400 	.word	0x40010400
 8002388:	40014000 	.word	0x40014000
 800238c:	40001800 	.word	0x40001800

08002390 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e03d      	b.n	8002428 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	4313      	orrs	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	4313      	orrs	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <__NVIC_SetPriority>:
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	6039      	str	r1, [r7, #0]
 800243e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002444:	2b00      	cmp	r3, #0
 8002446:	db0a      	blt.n	800245e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	b2da      	uxtb	r2, r3
 800244c:	490c      	ldr	r1, [pc, #48]	; (8002480 <__NVIC_SetPriority+0x4c>)
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	0112      	lsls	r2, r2, #4
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	440b      	add	r3, r1
 8002458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800245c:	e00a      	b.n	8002474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4908      	ldr	r1, [pc, #32]	; (8002484 <__NVIC_SetPriority+0x50>)
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	3b04      	subs	r3, #4
 800246c:	0112      	lsls	r2, r2, #4
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	440b      	add	r3, r1
 8002472:	761a      	strb	r2, [r3, #24]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	e000e100 	.word	0xe000e100
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800248c:	2100      	movs	r1, #0
 800248e:	f06f 0004 	mvn.w	r0, #4
 8002492:	f7ff ffcf 	bl	8002434 <__NVIC_SetPriority>
#endif
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024a2:	f3ef 8305 	mrs	r3, IPSR
 80024a6:	603b      	str	r3, [r7, #0]
  return(result);
 80024a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80024ae:	f06f 0305 	mvn.w	r3, #5
 80024b2:	607b      	str	r3, [r7, #4]
 80024b4:	e00c      	b.n	80024d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <osKernelInitialize+0x44>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d105      	bne.n	80024ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80024be:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <osKernelInitialize+0x44>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	e002      	b.n	80024d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80024ca:	f04f 33ff 	mov.w	r3, #4294967295
 80024ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80024d0:	687b      	ldr	r3, [r7, #4]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	2000002c 	.word	0x2000002c

080024e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024ea:	f3ef 8305 	mrs	r3, IPSR
 80024ee:	603b      	str	r3, [r7, #0]
  return(result);
 80024f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80024f6:	f06f 0305 	mvn.w	r3, #5
 80024fa:	607b      	str	r3, [r7, #4]
 80024fc:	e010      	b.n	8002520 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <osKernelStart+0x48>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d109      	bne.n	800251a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002506:	f7ff ffbf 	bl	8002488 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800250a:	4b08      	ldr	r3, [pc, #32]	; (800252c <osKernelStart+0x48>)
 800250c:	2202      	movs	r2, #2
 800250e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002510:	f001 f866 	bl	80035e0 <vTaskStartScheduler>
      stat = osOK;
 8002514:	2300      	movs	r3, #0
 8002516:	607b      	str	r3, [r7, #4]
 8002518:	e002      	b.n	8002520 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800251a:	f04f 33ff 	mov.w	r3, #4294967295
 800251e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002520:	687b      	ldr	r3, [r7, #4]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	2000002c 	.word	0x2000002c

08002530 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002530:	b580      	push	{r7, lr}
 8002532:	b08e      	sub	sp, #56	; 0x38
 8002534:	af04      	add	r7, sp, #16
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800253c:	2300      	movs	r3, #0
 800253e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002540:	f3ef 8305 	mrs	r3, IPSR
 8002544:	617b      	str	r3, [r7, #20]
  return(result);
 8002546:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002548:	2b00      	cmp	r3, #0
 800254a:	d17e      	bne.n	800264a <osThreadNew+0x11a>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d07b      	beq.n	800264a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002556:	2318      	movs	r3, #24
 8002558:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800255a:	2300      	movs	r3, #0
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800255e:	f04f 33ff 	mov.w	r3, #4294967295
 8002562:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d045      	beq.n	80025f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <osThreadNew+0x48>
        name = attr->name;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <osThreadNew+0x6e>
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	2b38      	cmp	r3, #56	; 0x38
 8002590:	d805      	bhi.n	800259e <osThreadNew+0x6e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <osThreadNew+0x72>
        return (NULL);
 800259e:	2300      	movs	r3, #0
 80025a0:	e054      	b.n	800264c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	089b      	lsrs	r3, r3, #2
 80025b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00e      	beq.n	80025d8 <osThreadNew+0xa8>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	2b5b      	cmp	r3, #91	; 0x5b
 80025c0:	d90a      	bls.n	80025d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d006      	beq.n	80025d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <osThreadNew+0xa8>
        mem = 1;
 80025d2:	2301      	movs	r3, #1
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	e010      	b.n	80025fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10c      	bne.n	80025fa <osThreadNew+0xca>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d108      	bne.n	80025fa <osThreadNew+0xca>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d104      	bne.n	80025fa <osThreadNew+0xca>
          mem = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61bb      	str	r3, [r7, #24]
 80025f4:	e001      	b.n	80025fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d110      	bne.n	8002622 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002608:	9202      	str	r2, [sp, #8]
 800260a:	9301      	str	r3, [sp, #4]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	6a3a      	ldr	r2, [r7, #32]
 8002614:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 fe0c 	bl	8003234 <xTaskCreateStatic>
 800261c:	4603      	mov	r3, r0
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	e013      	b.n	800264a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d110      	bne.n	800264a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	b29a      	uxth	r2, r3
 800262c:	f107 0310 	add.w	r3, r7, #16
 8002630:	9301      	str	r3, [sp, #4]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 fe57 	bl	80032ee <xTaskCreate>
 8002640:	4603      	mov	r3, r0
 8002642:	2b01      	cmp	r3, #1
 8002644:	d001      	beq.n	800264a <osThreadNew+0x11a>
            hTask = NULL;
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800264a:	693b      	ldr	r3, [r7, #16]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3728      	adds	r7, #40	; 0x28
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800265c:	f3ef 8305 	mrs	r3, IPSR
 8002660:	60bb      	str	r3, [r7, #8]
  return(result);
 8002662:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <osDelay+0x1c>
    stat = osErrorISR;
 8002668:	f06f 0305 	mvn.w	r3, #5
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	e007      	b.n	8002680 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <osDelay+0x2c>
      vTaskDelay(ticks);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 ff7c 	bl	8003578 <vTaskDelay>
    }
  }

  return (stat);
 8002680:	68fb      	ldr	r3, [r7, #12]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4a07      	ldr	r2, [pc, #28]	; (80026b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800269c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	4a06      	ldr	r2, [pc, #24]	; (80026bc <vApplicationGetIdleTaskMemory+0x30>)
 80026a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2280      	movs	r2, #128	; 0x80
 80026a8:	601a      	str	r2, [r3, #0]
}
 80026aa:	bf00      	nop
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20000030 	.word	0x20000030
 80026bc:	2000008c 	.word	0x2000008c

080026c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4a07      	ldr	r2, [pc, #28]	; (80026ec <vApplicationGetTimerTaskMemory+0x2c>)
 80026d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	4a06      	ldr	r2, [pc, #24]	; (80026f0 <vApplicationGetTimerTaskMemory+0x30>)
 80026d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026de:	601a      	str	r2, [r3, #0]
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	2000028c 	.word	0x2000028c
 80026f0:	200002e8 	.word	0x200002e8

080026f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f103 0208 	add.w	r2, r3, #8
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f04f 32ff 	mov.w	r2, #4294967295
 800270c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f103 0208 	add.w	r2, r3, #8
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f103 0208 	add.w	r2, r3, #8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800274e:	b480      	push	{r7}
 8002750:	b085      	sub	sp, #20
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	601a      	str	r2, [r3, #0]
}
 800278a:	bf00      	nop
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002796:	b480      	push	{r7}
 8002798:	b085      	sub	sp, #20
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ac:	d103      	bne.n	80027b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	e00c      	b.n	80027d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3308      	adds	r3, #8
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	e002      	b.n	80027c4 <vListInsert+0x2e>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d2f6      	bcs.n	80027be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	601a      	str	r2, [r3, #0]
}
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6892      	ldr	r2, [r2, #8]
 800281e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6852      	ldr	r2, [r2, #4]
 8002828:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	429a      	cmp	r2, r3
 8002832:	d103      	bne.n	800283c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	1e5a      	subs	r2, r3, #1
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10a      	bne.n	8002886 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002874:	f383 8811 	msr	BASEPRI, r3
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002882:	bf00      	nop
 8002884:	e7fe      	b.n	8002884 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002886:	f002 f84d 	bl	8004924 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002892:	68f9      	ldr	r1, [r7, #12]
 8002894:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002896:	fb01 f303 	mul.w	r3, r1, r3
 800289a:	441a      	add	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b6:	3b01      	subs	r3, #1
 80028b8:	68f9      	ldr	r1, [r7, #12]
 80028ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	441a      	add	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	22ff      	movs	r2, #255	; 0xff
 80028ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	22ff      	movs	r2, #255	; 0xff
 80028d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d114      	bne.n	8002906 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d01a      	beq.n	800291a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	3310      	adds	r3, #16
 80028e8:	4618      	mov	r0, r3
 80028ea:	f001 f903 	bl	8003af4 <xTaskRemoveFromEventList>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d012      	beq.n	800291a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <xQueueGenericReset+0xcc>)
 80028f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	f3bf 8f6f 	isb	sy
 8002904:	e009      	b.n	800291a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	3310      	adds	r3, #16
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fef2 	bl	80026f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	3324      	adds	r3, #36	; 0x24
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff feed 	bl	80026f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800291a:	f002 f833 	bl	8004984 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800291e:	2301      	movs	r3, #1
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	e000ed04 	.word	0xe000ed04

0800292c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08e      	sub	sp, #56	; 0x38
 8002930:	af02      	add	r7, sp, #8
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
 8002938:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10a      	bne.n	8002956 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002944:	f383 8811 	msr	BASEPRI, r3
 8002948:	f3bf 8f6f 	isb	sy
 800294c:	f3bf 8f4f 	dsb	sy
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002952:	bf00      	nop
 8002954:	e7fe      	b.n	8002954 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10a      	bne.n	8002972 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800295c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002960:	f383 8811 	msr	BASEPRI, r3
 8002964:	f3bf 8f6f 	isb	sy
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800296e:	bf00      	nop
 8002970:	e7fe      	b.n	8002970 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <xQueueGenericCreateStatic+0x52>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <xQueueGenericCreateStatic+0x56>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <xQueueGenericCreateStatic+0x58>
 8002982:	2300      	movs	r3, #0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10a      	bne.n	800299e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298c:	f383 8811 	msr	BASEPRI, r3
 8002990:	f3bf 8f6f 	isb	sy
 8002994:	f3bf 8f4f 	dsb	sy
 8002998:	623b      	str	r3, [r7, #32]
}
 800299a:	bf00      	nop
 800299c:	e7fe      	b.n	800299c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d102      	bne.n	80029aa <xQueueGenericCreateStatic+0x7e>
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <xQueueGenericCreateStatic+0x82>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <xQueueGenericCreateStatic+0x84>
 80029ae:	2300      	movs	r3, #0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10a      	bne.n	80029ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80029b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	61fb      	str	r3, [r7, #28]
}
 80029c6:	bf00      	nop
 80029c8:	e7fe      	b.n	80029c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80029ca:	2350      	movs	r3, #80	; 0x50
 80029cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2b50      	cmp	r3, #80	; 0x50
 80029d2:	d00a      	beq.n	80029ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	61bb      	str	r3, [r7, #24]
}
 80029e6:	bf00      	nop
 80029e8:	e7fe      	b.n	80029e8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80029ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80029f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00d      	beq.n	8002a12 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80029f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	4613      	mov	r3, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	68b9      	ldr	r1, [r7, #8]
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f805 	bl	8002a1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3730      	adds	r7, #48	; 0x30
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
 8002a28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d103      	bne.n	8002a38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	e002      	b.n	8002a3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	69b8      	ldr	r0, [r7, #24]
 8002a4e:	f7ff ff05 	bl	800285c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a5a:	bf00      	nop
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08e      	sub	sp, #56	; 0x38
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a72:	2300      	movs	r3, #0
 8002a74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10a      	bne.n	8002a96 <xQueueGenericSend+0x32>
	__asm volatile
 8002a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a84:	f383 8811 	msr	BASEPRI, r3
 8002a88:	f3bf 8f6f 	isb	sy
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a92:	bf00      	nop
 8002a94:	e7fe      	b.n	8002a94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d103      	bne.n	8002aa4 <xQueueGenericSend+0x40>
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <xQueueGenericSend+0x44>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <xQueueGenericSend+0x46>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10a      	bne.n	8002ac4 <xQueueGenericSend+0x60>
	__asm volatile
 8002aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab2:	f383 8811 	msr	BASEPRI, r3
 8002ab6:	f3bf 8f6f 	isb	sy
 8002aba:	f3bf 8f4f 	dsb	sy
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ac0:	bf00      	nop
 8002ac2:	e7fe      	b.n	8002ac2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d103      	bne.n	8002ad2 <xQueueGenericSend+0x6e>
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <xQueueGenericSend+0x72>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <xQueueGenericSend+0x74>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10a      	bne.n	8002af2 <xQueueGenericSend+0x8e>
	__asm volatile
 8002adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae0:	f383 8811 	msr	BASEPRI, r3
 8002ae4:	f3bf 8f6f 	isb	sy
 8002ae8:	f3bf 8f4f 	dsb	sy
 8002aec:	623b      	str	r3, [r7, #32]
}
 8002aee:	bf00      	nop
 8002af0:	e7fe      	b.n	8002af0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002af2:	f001 f9bd 	bl	8003e70 <xTaskGetSchedulerState>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d102      	bne.n	8002b02 <xQueueGenericSend+0x9e>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <xQueueGenericSend+0xa2>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <xQueueGenericSend+0xa4>
 8002b06:	2300      	movs	r3, #0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10a      	bne.n	8002b22 <xQueueGenericSend+0xbe>
	__asm volatile
 8002b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b10:	f383 8811 	msr	BASEPRI, r3
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	61fb      	str	r3, [r7, #28]
}
 8002b1e:	bf00      	nop
 8002b20:	e7fe      	b.n	8002b20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b22:	f001 feff 	bl	8004924 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d302      	bcc.n	8002b38 <xQueueGenericSend+0xd4>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d129      	bne.n	8002b8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	68b9      	ldr	r1, [r7, #8]
 8002b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b3e:	f000 fa0b 	bl	8002f58 <prvCopyDataToQueue>
 8002b42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d010      	beq.n	8002b6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4e:	3324      	adds	r3, #36	; 0x24
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 ffcf 	bl	8003af4 <xTaskRemoveFromEventList>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d013      	beq.n	8002b84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b5c:	4b3f      	ldr	r3, [pc, #252]	; (8002c5c <xQueueGenericSend+0x1f8>)
 8002b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	f3bf 8f6f 	isb	sy
 8002b6c:	e00a      	b.n	8002b84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d007      	beq.n	8002b84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b74:	4b39      	ldr	r3, [pc, #228]	; (8002c5c <xQueueGenericSend+0x1f8>)
 8002b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b84:	f001 fefe 	bl	8004984 <vPortExitCritical>
				return pdPASS;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e063      	b.n	8002c54 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d103      	bne.n	8002b9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b92:	f001 fef7 	bl	8004984 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	e05c      	b.n	8002c54 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d106      	bne.n	8002bae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ba0:	f107 0314 	add.w	r3, r7, #20
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 f809 	bl	8003bbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002baa:	2301      	movs	r3, #1
 8002bac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002bae:	f001 fee9 	bl	8004984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bb2:	f000 fd7b 	bl	80036ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bb6:	f001 feb5 	bl	8004924 <vPortEnterCritical>
 8002bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bc0:	b25b      	sxtb	r3, r3
 8002bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc6:	d103      	bne.n	8002bd0 <xQueueGenericSend+0x16c>
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bd6:	b25b      	sxtb	r3, r3
 8002bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bdc:	d103      	bne.n	8002be6 <xQueueGenericSend+0x182>
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002be6:	f001 fecd 	bl	8004984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bea:	1d3a      	adds	r2, r7, #4
 8002bec:	f107 0314 	add.w	r3, r7, #20
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 fff8 	bl	8003be8 <xTaskCheckForTimeOut>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d124      	bne.n	8002c48 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002bfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c00:	f000 faa2 	bl	8003148 <prvIsQueueFull>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d018      	beq.n	8002c3c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0c:	3310      	adds	r3, #16
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 ff1e 	bl	8003a54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c1a:	f000 fa2d 	bl	8003078 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c1e:	f000 fd53 	bl	80036c8 <xTaskResumeAll>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f47f af7c 	bne.w	8002b22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002c2a:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <xQueueGenericSend+0x1f8>)
 8002c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	f3bf 8f4f 	dsb	sy
 8002c36:	f3bf 8f6f 	isb	sy
 8002c3a:	e772      	b.n	8002b22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c3e:	f000 fa1b 	bl	8003078 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c42:	f000 fd41 	bl	80036c8 <xTaskResumeAll>
 8002c46:	e76c      	b.n	8002b22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c4a:	f000 fa15 	bl	8003078 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c4e:	f000 fd3b 	bl	80036c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3738      	adds	r7, #56	; 0x38
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	e000ed04 	.word	0xe000ed04

08002c60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b090      	sub	sp, #64	; 0x40
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10a      	bne.n	8002c8e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7c:	f383 8811 	msr	BASEPRI, r3
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c8a:	bf00      	nop
 8002c8c:	e7fe      	b.n	8002c8c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d103      	bne.n	8002c9c <xQueueGenericSendFromISR+0x3c>
 8002c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <xQueueGenericSendFromISR+0x40>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <xQueueGenericSendFromISR+0x42>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10a      	bne.n	8002cbc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002caa:	f383 8811 	msr	BASEPRI, r3
 8002cae:	f3bf 8f6f 	isb	sy
 8002cb2:	f3bf 8f4f 	dsb	sy
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002cb8:	bf00      	nop
 8002cba:	e7fe      	b.n	8002cba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d103      	bne.n	8002cca <xQueueGenericSendFromISR+0x6a>
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <xQueueGenericSendFromISR+0x6e>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <xQueueGenericSendFromISR+0x70>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10a      	bne.n	8002cea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	623b      	str	r3, [r7, #32]
}
 8002ce6:	bf00      	nop
 8002ce8:	e7fe      	b.n	8002ce8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cea:	f001 fefd 	bl	8004ae8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002cee:	f3ef 8211 	mrs	r2, BASEPRI
 8002cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf6:	f383 8811 	msr	BASEPRI, r3
 8002cfa:	f3bf 8f6f 	isb	sy
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	61fa      	str	r2, [r7, #28]
 8002d04:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d06:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d08:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d302      	bcc.n	8002d1c <xQueueGenericSendFromISR+0xbc>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d12f      	bne.n	8002d7c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	68b9      	ldr	r1, [r7, #8]
 8002d30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d32:	f000 f911 	bl	8002f58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d36:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3e:	d112      	bne.n	8002d66 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d016      	beq.n	8002d76 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4a:	3324      	adds	r3, #36	; 0x24
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 fed1 	bl	8003af4 <xTaskRemoveFromEventList>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00e      	beq.n	8002d76 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00b      	beq.n	8002d76 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	e007      	b.n	8002d76 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	b25a      	sxtb	r2, r3
 8002d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002d76:	2301      	movs	r3, #1
 8002d78:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002d7a:	e001      	b.n	8002d80 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d82:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d8a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3740      	adds	r7, #64	; 0x40
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08c      	sub	sp, #48	; 0x30
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002da4:	2300      	movs	r3, #0
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10a      	bne.n	8002dc8 <xQueueReceive+0x30>
	__asm volatile
 8002db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db6:	f383 8811 	msr	BASEPRI, r3
 8002dba:	f3bf 8f6f 	isb	sy
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	623b      	str	r3, [r7, #32]
}
 8002dc4:	bf00      	nop
 8002dc6:	e7fe      	b.n	8002dc6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d103      	bne.n	8002dd6 <xQueueReceive+0x3e>
 8002dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <xQueueReceive+0x42>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <xQueueReceive+0x44>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10a      	bne.n	8002df6 <xQueueReceive+0x5e>
	__asm volatile
 8002de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de4:	f383 8811 	msr	BASEPRI, r3
 8002de8:	f3bf 8f6f 	isb	sy
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	61fb      	str	r3, [r7, #28]
}
 8002df2:	bf00      	nop
 8002df4:	e7fe      	b.n	8002df4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002df6:	f001 f83b 	bl	8003e70 <xTaskGetSchedulerState>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d102      	bne.n	8002e06 <xQueueReceive+0x6e>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <xQueueReceive+0x72>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <xQueueReceive+0x74>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10a      	bne.n	8002e26 <xQueueReceive+0x8e>
	__asm volatile
 8002e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	61bb      	str	r3, [r7, #24]
}
 8002e22:	bf00      	nop
 8002e24:	e7fe      	b.n	8002e24 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e26:	f001 fd7d 	bl	8004924 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d01f      	beq.n	8002e76 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e36:	68b9      	ldr	r1, [r7, #8]
 8002e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e3a:	f000 f8f7 	bl	800302c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	1e5a      	subs	r2, r3, #1
 8002e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e44:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00f      	beq.n	8002e6e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e50:	3310      	adds	r3, #16
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 fe4e 	bl	8003af4 <xTaskRemoveFromEventList>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d007      	beq.n	8002e6e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e5e:	4b3d      	ldr	r3, [pc, #244]	; (8002f54 <xQueueReceive+0x1bc>)
 8002e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e6e:	f001 fd89 	bl	8004984 <vPortExitCritical>
				return pdPASS;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e069      	b.n	8002f4a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d103      	bne.n	8002e84 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e7c:	f001 fd82 	bl	8004984 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e80:	2300      	movs	r3, #0
 8002e82:	e062      	b.n	8002f4a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e8a:	f107 0310 	add.w	r3, r7, #16
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fe94 	bl	8003bbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e94:	2301      	movs	r3, #1
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e98:	f001 fd74 	bl	8004984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e9c:	f000 fc06 	bl	80036ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ea0:	f001 fd40 	bl	8004924 <vPortEnterCritical>
 8002ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eaa:	b25b      	sxtb	r3, r3
 8002eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb0:	d103      	bne.n	8002eba <xQueueReceive+0x122>
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ec0:	b25b      	sxtb	r3, r3
 8002ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec6:	d103      	bne.n	8002ed0 <xQueueReceive+0x138>
 8002ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ed0:	f001 fd58 	bl	8004984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ed4:	1d3a      	adds	r2, r7, #4
 8002ed6:	f107 0310 	add.w	r3, r7, #16
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 fe83 	bl	8003be8 <xTaskCheckForTimeOut>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d123      	bne.n	8002f30 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eea:	f000 f917 	bl	800311c <prvIsQueueEmpty>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d017      	beq.n	8002f24 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef6:	3324      	adds	r3, #36	; 0x24
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 fda9 	bl	8003a54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f04:	f000 f8b8 	bl	8003078 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f08:	f000 fbde 	bl	80036c8 <xTaskResumeAll>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d189      	bne.n	8002e26 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002f12:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <xQueueReceive+0x1bc>)
 8002f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	e780      	b.n	8002e26 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f26:	f000 f8a7 	bl	8003078 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f2a:	f000 fbcd 	bl	80036c8 <xTaskResumeAll>
 8002f2e:	e77a      	b.n	8002e26 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f32:	f000 f8a1 	bl	8003078 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f36:	f000 fbc7 	bl	80036c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f3c:	f000 f8ee 	bl	800311c <prvIsQueueEmpty>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f43f af6f 	beq.w	8002e26 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3730      	adds	r7, #48	; 0x30
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	e000ed04 	.word	0xe000ed04

08002f58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10d      	bne.n	8002f92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d14d      	bne.n	800301a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 ff92 	bl	8003eac <xTaskPriorityDisinherit>
 8002f88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	e043      	b.n	800301a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d119      	bne.n	8002fcc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6858      	ldr	r0, [r3, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68b9      	ldr	r1, [r7, #8]
 8002fa4:	f002 fa20 	bl	80053e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	441a      	add	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d32b      	bcc.n	800301a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	e026      	b.n	800301a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	68d8      	ldr	r0, [r3, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	f002 fa06 	bl	80053e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	425b      	negs	r3, r3
 8002fe6:	441a      	add	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d207      	bcs.n	8003008 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	425b      	negs	r3, r3
 8003002:	441a      	add	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d105      	bne.n	800301a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	3b01      	subs	r3, #1
 8003018:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003022:	697b      	ldr	r3, [r7, #20]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d018      	beq.n	8003070 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	441a      	add	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	429a      	cmp	r2, r3
 8003056:	d303      	bcc.n	8003060 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68d9      	ldr	r1, [r3, #12]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	461a      	mov	r2, r3
 800306a:	6838      	ldr	r0, [r7, #0]
 800306c:	f002 f9bc 	bl	80053e8 <memcpy>
	}
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003080:	f001 fc50 	bl	8004924 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800308a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800308c:	e011      	b.n	80030b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	2b00      	cmp	r3, #0
 8003094:	d012      	beq.n	80030bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3324      	adds	r3, #36	; 0x24
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fd2a 	bl	8003af4 <xTaskRemoveFromEventList>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80030a6:	f000 fe01 	bl	8003cac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	dce9      	bgt.n	800308e <prvUnlockQueue+0x16>
 80030ba:	e000      	b.n	80030be <prvUnlockQueue+0x46>
					break;
 80030bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	22ff      	movs	r2, #255	; 0xff
 80030c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80030c6:	f001 fc5d 	bl	8004984 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80030ca:	f001 fc2b 	bl	8004924 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030d6:	e011      	b.n	80030fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d012      	beq.n	8003106 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3310      	adds	r3, #16
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 fd05 	bl	8003af4 <xTaskRemoveFromEventList>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030f0:	f000 fddc 	bl	8003cac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030f4:	7bbb      	ldrb	r3, [r7, #14]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003100:	2b00      	cmp	r3, #0
 8003102:	dce9      	bgt.n	80030d8 <prvUnlockQueue+0x60>
 8003104:	e000      	b.n	8003108 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003106:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	22ff      	movs	r2, #255	; 0xff
 800310c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003110:	f001 fc38 	bl	8004984 <vPortExitCritical>
}
 8003114:	bf00      	nop
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003124:	f001 fbfe 	bl	8004924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	2b00      	cmp	r3, #0
 800312e:	d102      	bne.n	8003136 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003130:	2301      	movs	r3, #1
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	e001      	b.n	800313a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800313a:	f001 fc23 	bl	8004984 <vPortExitCritical>

	return xReturn;
 800313e:	68fb      	ldr	r3, [r7, #12]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003150:	f001 fbe8 	bl	8004924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315c:	429a      	cmp	r2, r3
 800315e:	d102      	bne.n	8003166 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003160:	2301      	movs	r3, #1
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	e001      	b.n	800316a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800316a:	f001 fc0b 	bl	8004984 <vPortExitCritical>

	return xReturn;
 800316e:	68fb      	ldr	r3, [r7, #12]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	e014      	b.n	80031b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003188:	4a0f      	ldr	r2, [pc, #60]	; (80031c8 <vQueueAddToRegistry+0x50>)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10b      	bne.n	80031ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003194:	490c      	ldr	r1, [pc, #48]	; (80031c8 <vQueueAddToRegistry+0x50>)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800319e:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <vQueueAddToRegistry+0x50>)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4413      	add	r3, r2
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80031aa:	e006      	b.n	80031ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	3301      	adds	r3, #1
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b07      	cmp	r3, #7
 80031b6:	d9e7      	bls.n	8003188 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80031b8:	bf00      	nop
 80031ba:	bf00      	nop
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20004994 	.word	0x20004994

080031cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80031dc:	f001 fba2 	bl	8004924 <vPortEnterCritical>
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031e6:	b25b      	sxtb	r3, r3
 80031e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ec:	d103      	bne.n	80031f6 <vQueueWaitForMessageRestricted+0x2a>
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031fc:	b25b      	sxtb	r3, r3
 80031fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003202:	d103      	bne.n	800320c <vQueueWaitForMessageRestricted+0x40>
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800320c:	f001 fbba 	bl	8004984 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003214:	2b00      	cmp	r3, #0
 8003216:	d106      	bne.n	8003226 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	3324      	adds	r3, #36	; 0x24
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fc3b 	bl	8003a9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003226:	6978      	ldr	r0, [r7, #20]
 8003228:	f7ff ff26 	bl	8003078 <prvUnlockQueue>
	}
 800322c:	bf00      	nop
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08e      	sub	sp, #56	; 0x38
 8003238:	af04      	add	r7, sp, #16
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10a      	bne.n	800325e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324c:	f383 8811 	msr	BASEPRI, r3
 8003250:	f3bf 8f6f 	isb	sy
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	623b      	str	r3, [r7, #32]
}
 800325a:	bf00      	nop
 800325c:	e7fe      	b.n	800325c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800325e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10a      	bne.n	800327a <xTaskCreateStatic+0x46>
	__asm volatile
 8003264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	61fb      	str	r3, [r7, #28]
}
 8003276:	bf00      	nop
 8003278:	e7fe      	b.n	8003278 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800327a:	235c      	movs	r3, #92	; 0x5c
 800327c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b5c      	cmp	r3, #92	; 0x5c
 8003282:	d00a      	beq.n	800329a <xTaskCreateStatic+0x66>
	__asm volatile
 8003284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003288:	f383 8811 	msr	BASEPRI, r3
 800328c:	f3bf 8f6f 	isb	sy
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	61bb      	str	r3, [r7, #24]
}
 8003296:	bf00      	nop
 8003298:	e7fe      	b.n	8003298 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800329a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800329c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d01e      	beq.n	80032e0 <xTaskCreateStatic+0xac>
 80032a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01b      	beq.n	80032e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	2202      	movs	r2, #2
 80032b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80032ba:	2300      	movs	r3, #0
 80032bc:	9303      	str	r3, [sp, #12]
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	9302      	str	r3, [sp, #8]
 80032c2:	f107 0314 	add.w	r3, r7, #20
 80032c6:	9301      	str	r3, [sp, #4]
 80032c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f850 	bl	8003378 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032da:	f000 f8dd 	bl	8003498 <prvAddNewTaskToReadyList>
 80032de:	e001      	b.n	80032e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032e4:	697b      	ldr	r3, [r7, #20]
	}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3728      	adds	r7, #40	; 0x28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b08c      	sub	sp, #48	; 0x30
 80032f2:	af04      	add	r7, sp, #16
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	603b      	str	r3, [r7, #0]
 80032fa:	4613      	mov	r3, r2
 80032fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4618      	mov	r0, r3
 8003304:	f001 fc30 	bl	8004b68 <pvPortMalloc>
 8003308:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00e      	beq.n	800332e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003310:	205c      	movs	r0, #92	; 0x5c
 8003312:	f001 fc29 	bl	8004b68 <pvPortMalloc>
 8003316:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	631a      	str	r2, [r3, #48]	; 0x30
 8003324:	e005      	b.n	8003332 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003326:	6978      	ldr	r0, [r7, #20]
 8003328:	f001 fcea 	bl	8004d00 <vPortFree>
 800332c:	e001      	b.n	8003332 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d017      	beq.n	8003368 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003340:	88fa      	ldrh	r2, [r7, #6]
 8003342:	2300      	movs	r3, #0
 8003344:	9303      	str	r3, [sp, #12]
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	9302      	str	r3, [sp, #8]
 800334a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334c:	9301      	str	r3, [sp, #4]
 800334e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f80e 	bl	8003378 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800335c:	69f8      	ldr	r0, [r7, #28]
 800335e:	f000 f89b 	bl	8003498 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003362:	2301      	movs	r3, #1
 8003364:	61bb      	str	r3, [r7, #24]
 8003366:	e002      	b.n	800336e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003368:	f04f 33ff 	mov.w	r3, #4294967295
 800336c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800336e:	69bb      	ldr	r3, [r7, #24]
	}
 8003370:	4618      	mov	r0, r3
 8003372:	3720      	adds	r7, #32
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003388:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	461a      	mov	r2, r3
 8003390:	21a5      	movs	r1, #165	; 0xa5
 8003392:	f002 f837 	bl	8005404 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80033a0:	3b01      	subs	r3, #1
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	f023 0307 	bic.w	r3, r3, #7
 80033ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80033ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033be:	f383 8811 	msr	BASEPRI, r3
 80033c2:	f3bf 8f6f 	isb	sy
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	617b      	str	r3, [r7, #20]
}
 80033cc:	bf00      	nop
 80033ce:	e7fe      	b.n	80033ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d01f      	beq.n	8003416 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	e012      	b.n	8003402 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	4413      	add	r3, r2
 80033e2:	7819      	ldrb	r1, [r3, #0]
 80033e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	4413      	add	r3, r2
 80033ea:	3334      	adds	r3, #52	; 0x34
 80033ec:	460a      	mov	r2, r1
 80033ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	4413      	add	r3, r2
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d006      	beq.n	800340a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	3301      	adds	r3, #1
 8003400:	61fb      	str	r3, [r7, #28]
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	2b0f      	cmp	r3, #15
 8003406:	d9e9      	bls.n	80033dc <prvInitialiseNewTask+0x64>
 8003408:	e000      	b.n	800340c <prvInitialiseNewTask+0x94>
			{
				break;
 800340a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800340c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003414:	e003      	b.n	800341e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003420:	2b37      	cmp	r3, #55	; 0x37
 8003422:	d901      	bls.n	8003428 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003424:	2337      	movs	r3, #55	; 0x37
 8003426:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800342c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800342e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003430:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003432:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003436:	2200      	movs	r2, #0
 8003438:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343c:	3304      	adds	r3, #4
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff f978 	bl	8002734 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	3318      	adds	r3, #24
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff f973 	bl	8002734 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003452:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003456:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800345e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003462:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	2200      	movs	r2, #0
 8003468:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	68f9      	ldr	r1, [r7, #12]
 8003476:	69b8      	ldr	r0, [r7, #24]
 8003478:	f001 f928 	bl	80046cc <pxPortInitialiseStack>
 800347c:	4602      	mov	r2, r0
 800347e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003480:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800348c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800348e:	bf00      	nop
 8003490:	3720      	adds	r7, #32
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80034a0:	f001 fa40 	bl	8004924 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80034a4:	4b2d      	ldr	r3, [pc, #180]	; (800355c <prvAddNewTaskToReadyList+0xc4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	3301      	adds	r3, #1
 80034aa:	4a2c      	ldr	r2, [pc, #176]	; (800355c <prvAddNewTaskToReadyList+0xc4>)
 80034ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80034ae:	4b2c      	ldr	r3, [pc, #176]	; (8003560 <prvAddNewTaskToReadyList+0xc8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034b6:	4a2a      	ldr	r2, [pc, #168]	; (8003560 <prvAddNewTaskToReadyList+0xc8>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034bc:	4b27      	ldr	r3, [pc, #156]	; (800355c <prvAddNewTaskToReadyList+0xc4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d110      	bne.n	80034e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034c4:	f000 fc16 	bl	8003cf4 <prvInitialiseTaskLists>
 80034c8:	e00d      	b.n	80034e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034ca:	4b26      	ldr	r3, [pc, #152]	; (8003564 <prvAddNewTaskToReadyList+0xcc>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034d2:	4b23      	ldr	r3, [pc, #140]	; (8003560 <prvAddNewTaskToReadyList+0xc8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	429a      	cmp	r2, r3
 80034de:	d802      	bhi.n	80034e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034e0:	4a1f      	ldr	r2, [pc, #124]	; (8003560 <prvAddNewTaskToReadyList+0xc8>)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034e6:	4b20      	ldr	r3, [pc, #128]	; (8003568 <prvAddNewTaskToReadyList+0xd0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	3301      	adds	r3, #1
 80034ec:	4a1e      	ldr	r2, [pc, #120]	; (8003568 <prvAddNewTaskToReadyList+0xd0>)
 80034ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80034f0:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <prvAddNewTaskToReadyList+0xd0>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fc:	4b1b      	ldr	r3, [pc, #108]	; (800356c <prvAddNewTaskToReadyList+0xd4>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d903      	bls.n	800350c <prvAddNewTaskToReadyList+0x74>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	4a18      	ldr	r2, [pc, #96]	; (800356c <prvAddNewTaskToReadyList+0xd4>)
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4a15      	ldr	r2, [pc, #84]	; (8003570 <prvAddNewTaskToReadyList+0xd8>)
 800351a:	441a      	add	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3304      	adds	r3, #4
 8003520:	4619      	mov	r1, r3
 8003522:	4610      	mov	r0, r2
 8003524:	f7ff f913 	bl	800274e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003528:	f001 fa2c 	bl	8004984 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800352c:	4b0d      	ldr	r3, [pc, #52]	; (8003564 <prvAddNewTaskToReadyList+0xcc>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00e      	beq.n	8003552 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003534:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <prvAddNewTaskToReadyList+0xc8>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	429a      	cmp	r2, r3
 8003540:	d207      	bcs.n	8003552 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003542:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <prvAddNewTaskToReadyList+0xdc>)
 8003544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000bbc 	.word	0x20000bbc
 8003560:	200006e8 	.word	0x200006e8
 8003564:	20000bc8 	.word	0x20000bc8
 8003568:	20000bd8 	.word	0x20000bd8
 800356c:	20000bc4 	.word	0x20000bc4
 8003570:	200006ec 	.word	0x200006ec
 8003574:	e000ed04 	.word	0xe000ed04

08003578 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003580:	2300      	movs	r3, #0
 8003582:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d017      	beq.n	80035ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800358a:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <vTaskDelay+0x60>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <vTaskDelay+0x30>
	__asm volatile
 8003592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003596:	f383 8811 	msr	BASEPRI, r3
 800359a:	f3bf 8f6f 	isb	sy
 800359e:	f3bf 8f4f 	dsb	sy
 80035a2:	60bb      	str	r3, [r7, #8]
}
 80035a4:	bf00      	nop
 80035a6:	e7fe      	b.n	80035a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80035a8:	f000 f880 	bl	80036ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80035ac:	2100      	movs	r1, #0
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fcea 	bl	8003f88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80035b4:	f000 f888 	bl	80036c8 <xTaskResumeAll>
 80035b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d107      	bne.n	80035d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80035c0:	4b06      	ldr	r3, [pc, #24]	; (80035dc <vTaskDelay+0x64>)
 80035c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035d0:	bf00      	nop
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20000be4 	.word	0x20000be4
 80035dc:	e000ed04 	.word	0xe000ed04

080035e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08a      	sub	sp, #40	; 0x28
 80035e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80035ee:	463a      	mov	r2, r7
 80035f0:	1d39      	adds	r1, r7, #4
 80035f2:	f107 0308 	add.w	r3, r7, #8
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff f848 	bl	800268c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80035fc:	6839      	ldr	r1, [r7, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	9202      	str	r2, [sp, #8]
 8003604:	9301      	str	r3, [sp, #4]
 8003606:	2300      	movs	r3, #0
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	2300      	movs	r3, #0
 800360c:	460a      	mov	r2, r1
 800360e:	4921      	ldr	r1, [pc, #132]	; (8003694 <vTaskStartScheduler+0xb4>)
 8003610:	4821      	ldr	r0, [pc, #132]	; (8003698 <vTaskStartScheduler+0xb8>)
 8003612:	f7ff fe0f 	bl	8003234 <xTaskCreateStatic>
 8003616:	4603      	mov	r3, r0
 8003618:	4a20      	ldr	r2, [pc, #128]	; (800369c <vTaskStartScheduler+0xbc>)
 800361a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800361c:	4b1f      	ldr	r3, [pc, #124]	; (800369c <vTaskStartScheduler+0xbc>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003624:	2301      	movs	r3, #1
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	e001      	b.n	800362e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d102      	bne.n	800363a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003634:	f000 fcfc 	bl	8004030 <xTimerCreateTimerTask>
 8003638:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d116      	bne.n	800366e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	613b      	str	r3, [r7, #16]
}
 8003652:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003654:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <vTaskStartScheduler+0xc0>)
 8003656:	f04f 32ff 	mov.w	r2, #4294967295
 800365a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800365c:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <vTaskStartScheduler+0xc4>)
 800365e:	2201      	movs	r2, #1
 8003660:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003662:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <vTaskStartScheduler+0xc8>)
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003668:	f001 f8ba 	bl	80047e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800366c:	e00e      	b.n	800368c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003674:	d10a      	bne.n	800368c <vTaskStartScheduler+0xac>
	__asm volatile
 8003676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367a:	f383 8811 	msr	BASEPRI, r3
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	60fb      	str	r3, [r7, #12]
}
 8003688:	bf00      	nop
 800368a:	e7fe      	b.n	800368a <vTaskStartScheduler+0xaa>
}
 800368c:	bf00      	nop
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	08005460 	.word	0x08005460
 8003698:	08003cc5 	.word	0x08003cc5
 800369c:	20000be0 	.word	0x20000be0
 80036a0:	20000bdc 	.word	0x20000bdc
 80036a4:	20000bc8 	.word	0x20000bc8
 80036a8:	20000bc0 	.word	0x20000bc0

080036ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80036b0:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <vTaskSuspendAll+0x18>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3301      	adds	r3, #1
 80036b6:	4a03      	ldr	r2, [pc, #12]	; (80036c4 <vTaskSuspendAll+0x18>)
 80036b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80036ba:	bf00      	nop
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	20000be4 	.word	0x20000be4

080036c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80036d6:	4b42      	ldr	r3, [pc, #264]	; (80037e0 <xTaskResumeAll+0x118>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10a      	bne.n	80036f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80036de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e2:	f383 8811 	msr	BASEPRI, r3
 80036e6:	f3bf 8f6f 	isb	sy
 80036ea:	f3bf 8f4f 	dsb	sy
 80036ee:	603b      	str	r3, [r7, #0]
}
 80036f0:	bf00      	nop
 80036f2:	e7fe      	b.n	80036f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80036f4:	f001 f916 	bl	8004924 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80036f8:	4b39      	ldr	r3, [pc, #228]	; (80037e0 <xTaskResumeAll+0x118>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3b01      	subs	r3, #1
 80036fe:	4a38      	ldr	r2, [pc, #224]	; (80037e0 <xTaskResumeAll+0x118>)
 8003700:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003702:	4b37      	ldr	r3, [pc, #220]	; (80037e0 <xTaskResumeAll+0x118>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d162      	bne.n	80037d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800370a:	4b36      	ldr	r3, [pc, #216]	; (80037e4 <xTaskResumeAll+0x11c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d05e      	beq.n	80037d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003712:	e02f      	b.n	8003774 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003714:	4b34      	ldr	r3, [pc, #208]	; (80037e8 <xTaskResumeAll+0x120>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	3318      	adds	r3, #24
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff f871 	bl	8002808 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	3304      	adds	r3, #4
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff f86c 	bl	8002808 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003734:	4b2d      	ldr	r3, [pc, #180]	; (80037ec <xTaskResumeAll+0x124>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d903      	bls.n	8003744 <xTaskResumeAll+0x7c>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	4a2a      	ldr	r2, [pc, #168]	; (80037ec <xTaskResumeAll+0x124>)
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4a27      	ldr	r2, [pc, #156]	; (80037f0 <xTaskResumeAll+0x128>)
 8003752:	441a      	add	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	3304      	adds	r3, #4
 8003758:	4619      	mov	r1, r3
 800375a:	4610      	mov	r0, r2
 800375c:	f7fe fff7 	bl	800274e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003764:	4b23      	ldr	r3, [pc, #140]	; (80037f4 <xTaskResumeAll+0x12c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	429a      	cmp	r2, r3
 800376c:	d302      	bcc.n	8003774 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800376e:	4b22      	ldr	r3, [pc, #136]	; (80037f8 <xTaskResumeAll+0x130>)
 8003770:	2201      	movs	r2, #1
 8003772:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003774:	4b1c      	ldr	r3, [pc, #112]	; (80037e8 <xTaskResumeAll+0x120>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1cb      	bne.n	8003714 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003782:	f000 fb55 	bl	8003e30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003786:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <xTaskResumeAll+0x134>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d010      	beq.n	80037b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003792:	f000 f847 	bl	8003824 <xTaskIncrementTick>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800379c:	4b16      	ldr	r3, [pc, #88]	; (80037f8 <xTaskResumeAll+0x130>)
 800379e:	2201      	movs	r2, #1
 80037a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f1      	bne.n	8003792 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80037ae:	4b13      	ldr	r3, [pc, #76]	; (80037fc <xTaskResumeAll+0x134>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80037b4:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <xTaskResumeAll+0x130>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d009      	beq.n	80037d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80037bc:	2301      	movs	r3, #1
 80037be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80037c0:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <xTaskResumeAll+0x138>)
 80037c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80037d0:	f001 f8d8 	bl	8004984 <vPortExitCritical>

	return xAlreadyYielded;
 80037d4:	68bb      	ldr	r3, [r7, #8]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20000be4 	.word	0x20000be4
 80037e4:	20000bbc 	.word	0x20000bbc
 80037e8:	20000b7c 	.word	0x20000b7c
 80037ec:	20000bc4 	.word	0x20000bc4
 80037f0:	200006ec 	.word	0x200006ec
 80037f4:	200006e8 	.word	0x200006e8
 80037f8:	20000bd0 	.word	0x20000bd0
 80037fc:	20000bcc 	.word	0x20000bcc
 8003800:	e000ed04 	.word	0xe000ed04

08003804 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800380a:	4b05      	ldr	r3, [pc, #20]	; (8003820 <xTaskGetTickCount+0x1c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003810:	687b      	ldr	r3, [r7, #4]
}
 8003812:	4618      	mov	r0, r3
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	20000bc0 	.word	0x20000bc0

08003824 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800382e:	4b4f      	ldr	r3, [pc, #316]	; (800396c <xTaskIncrementTick+0x148>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	f040 808f 	bne.w	8003956 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003838:	4b4d      	ldr	r3, [pc, #308]	; (8003970 <xTaskIncrementTick+0x14c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3301      	adds	r3, #1
 800383e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003840:	4a4b      	ldr	r2, [pc, #300]	; (8003970 <xTaskIncrementTick+0x14c>)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d120      	bne.n	800388e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800384c:	4b49      	ldr	r3, [pc, #292]	; (8003974 <xTaskIncrementTick+0x150>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <xTaskIncrementTick+0x48>
	__asm volatile
 8003856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385a:	f383 8811 	msr	BASEPRI, r3
 800385e:	f3bf 8f6f 	isb	sy
 8003862:	f3bf 8f4f 	dsb	sy
 8003866:	603b      	str	r3, [r7, #0]
}
 8003868:	bf00      	nop
 800386a:	e7fe      	b.n	800386a <xTaskIncrementTick+0x46>
 800386c:	4b41      	ldr	r3, [pc, #260]	; (8003974 <xTaskIncrementTick+0x150>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	4b41      	ldr	r3, [pc, #260]	; (8003978 <xTaskIncrementTick+0x154>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a3f      	ldr	r2, [pc, #252]	; (8003974 <xTaskIncrementTick+0x150>)
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	4a3f      	ldr	r2, [pc, #252]	; (8003978 <xTaskIncrementTick+0x154>)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6013      	str	r3, [r2, #0]
 8003880:	4b3e      	ldr	r3, [pc, #248]	; (800397c <xTaskIncrementTick+0x158>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3301      	adds	r3, #1
 8003886:	4a3d      	ldr	r2, [pc, #244]	; (800397c <xTaskIncrementTick+0x158>)
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	f000 fad1 	bl	8003e30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800388e:	4b3c      	ldr	r3, [pc, #240]	; (8003980 <xTaskIncrementTick+0x15c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	429a      	cmp	r2, r3
 8003896:	d349      	bcc.n	800392c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003898:	4b36      	ldr	r3, [pc, #216]	; (8003974 <xTaskIncrementTick+0x150>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d104      	bne.n	80038ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038a2:	4b37      	ldr	r3, [pc, #220]	; (8003980 <xTaskIncrementTick+0x15c>)
 80038a4:	f04f 32ff 	mov.w	r2, #4294967295
 80038a8:	601a      	str	r2, [r3, #0]
					break;
 80038aa:	e03f      	b.n	800392c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ac:	4b31      	ldr	r3, [pc, #196]	; (8003974 <xTaskIncrementTick+0x150>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d203      	bcs.n	80038cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80038c4:	4a2e      	ldr	r2, [pc, #184]	; (8003980 <xTaskIncrementTick+0x15c>)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80038ca:	e02f      	b.n	800392c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	3304      	adds	r3, #4
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fe ff99 	bl	8002808 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d004      	beq.n	80038e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	3318      	adds	r3, #24
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fe ff90 	bl	8002808 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ec:	4b25      	ldr	r3, [pc, #148]	; (8003984 <xTaskIncrementTick+0x160>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d903      	bls.n	80038fc <xTaskIncrementTick+0xd8>
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f8:	4a22      	ldr	r2, [pc, #136]	; (8003984 <xTaskIncrementTick+0x160>)
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4a1f      	ldr	r2, [pc, #124]	; (8003988 <xTaskIncrementTick+0x164>)
 800390a:	441a      	add	r2, r3
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	3304      	adds	r3, #4
 8003910:	4619      	mov	r1, r3
 8003912:	4610      	mov	r0, r2
 8003914:	f7fe ff1b 	bl	800274e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391c:	4b1b      	ldr	r3, [pc, #108]	; (800398c <xTaskIncrementTick+0x168>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	429a      	cmp	r2, r3
 8003924:	d3b8      	bcc.n	8003898 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003926:	2301      	movs	r3, #1
 8003928:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800392a:	e7b5      	b.n	8003898 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800392c:	4b17      	ldr	r3, [pc, #92]	; (800398c <xTaskIncrementTick+0x168>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003932:	4915      	ldr	r1, [pc, #84]	; (8003988 <xTaskIncrementTick+0x164>)
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d901      	bls.n	8003948 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003944:	2301      	movs	r3, #1
 8003946:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003948:	4b11      	ldr	r3, [pc, #68]	; (8003990 <xTaskIncrementTick+0x16c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d007      	beq.n	8003960 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003950:	2301      	movs	r3, #1
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	e004      	b.n	8003960 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003956:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <xTaskIncrementTick+0x170>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3301      	adds	r3, #1
 800395c:	4a0d      	ldr	r2, [pc, #52]	; (8003994 <xTaskIncrementTick+0x170>)
 800395e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003960:	697b      	ldr	r3, [r7, #20]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000be4 	.word	0x20000be4
 8003970:	20000bc0 	.word	0x20000bc0
 8003974:	20000b74 	.word	0x20000b74
 8003978:	20000b78 	.word	0x20000b78
 800397c:	20000bd4 	.word	0x20000bd4
 8003980:	20000bdc 	.word	0x20000bdc
 8003984:	20000bc4 	.word	0x20000bc4
 8003988:	200006ec 	.word	0x200006ec
 800398c:	200006e8 	.word	0x200006e8
 8003990:	20000bd0 	.word	0x20000bd0
 8003994:	20000bcc 	.word	0x20000bcc

08003998 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800399e:	4b28      	ldr	r3, [pc, #160]	; (8003a40 <vTaskSwitchContext+0xa8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80039a6:	4b27      	ldr	r3, [pc, #156]	; (8003a44 <vTaskSwitchContext+0xac>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80039ac:	e041      	b.n	8003a32 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80039ae:	4b25      	ldr	r3, [pc, #148]	; (8003a44 <vTaskSwitchContext+0xac>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039b4:	4b24      	ldr	r3, [pc, #144]	; (8003a48 <vTaskSwitchContext+0xb0>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	e010      	b.n	80039de <vTaskSwitchContext+0x46>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10a      	bne.n	80039d8 <vTaskSwitchContext+0x40>
	__asm volatile
 80039c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c6:	f383 8811 	msr	BASEPRI, r3
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	607b      	str	r3, [r7, #4]
}
 80039d4:	bf00      	nop
 80039d6:	e7fe      	b.n	80039d6 <vTaskSwitchContext+0x3e>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3b01      	subs	r3, #1
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	491b      	ldr	r1, [pc, #108]	; (8003a4c <vTaskSwitchContext+0xb4>)
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0e4      	beq.n	80039bc <vTaskSwitchContext+0x24>
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4613      	mov	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <vTaskSwitchContext+0xb4>)
 80039fe:	4413      	add	r3, r2
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	605a      	str	r2, [r3, #4]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	3308      	adds	r3, #8
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d104      	bne.n	8003a22 <vTaskSwitchContext+0x8a>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	605a      	str	r2, [r3, #4]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	4a09      	ldr	r2, [pc, #36]	; (8003a50 <vTaskSwitchContext+0xb8>)
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	4a06      	ldr	r2, [pc, #24]	; (8003a48 <vTaskSwitchContext+0xb0>)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6013      	str	r3, [r2, #0]
}
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	20000be4 	.word	0x20000be4
 8003a44:	20000bd0 	.word	0x20000bd0
 8003a48:	20000bc4 	.word	0x20000bc4
 8003a4c:	200006ec 	.word	0x200006ec
 8003a50:	200006e8 	.word	0x200006e8

08003a54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10a      	bne.n	8003a7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	60fb      	str	r3, [r7, #12]
}
 8003a76:	bf00      	nop
 8003a78:	e7fe      	b.n	8003a78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a7a:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <vTaskPlaceOnEventList+0x44>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3318      	adds	r3, #24
 8003a80:	4619      	mov	r1, r3
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fe fe87 	bl	8002796 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a88:	2101      	movs	r1, #1
 8003a8a:	6838      	ldr	r0, [r7, #0]
 8003a8c:	f000 fa7c 	bl	8003f88 <prvAddCurrentTaskToDelayedList>
}
 8003a90:	bf00      	nop
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	200006e8 	.word	0x200006e8

08003a9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10a      	bne.n	8003ac4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab2:	f383 8811 	msr	BASEPRI, r3
 8003ab6:	f3bf 8f6f 	isb	sy
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	617b      	str	r3, [r7, #20]
}
 8003ac0:	bf00      	nop
 8003ac2:	e7fe      	b.n	8003ac2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3318      	adds	r3, #24
 8003aca:	4619      	mov	r1, r3
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f7fe fe3e 	bl	800274e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8003adc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	68b8      	ldr	r0, [r7, #8]
 8003ae2:	f000 fa51 	bl	8003f88 <prvAddCurrentTaskToDelayedList>
	}
 8003ae6:	bf00      	nop
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	200006e8 	.word	0x200006e8

08003af4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10a      	bne.n	8003b20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0e:	f383 8811 	msr	BASEPRI, r3
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	f3bf 8f4f 	dsb	sy
 8003b1a:	60fb      	str	r3, [r7, #12]
}
 8003b1c:	bf00      	nop
 8003b1e:	e7fe      	b.n	8003b1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	3318      	adds	r3, #24
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fe fe6f 	bl	8002808 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b2a:	4b1e      	ldr	r3, [pc, #120]	; (8003ba4 <xTaskRemoveFromEventList+0xb0>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d11d      	bne.n	8003b6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	3304      	adds	r3, #4
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fe fe66 	bl	8002808 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b40:	4b19      	ldr	r3, [pc, #100]	; (8003ba8 <xTaskRemoveFromEventList+0xb4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d903      	bls.n	8003b50 <xTaskRemoveFromEventList+0x5c>
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	4a16      	ldr	r2, [pc, #88]	; (8003ba8 <xTaskRemoveFromEventList+0xb4>)
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4a13      	ldr	r2, [pc, #76]	; (8003bac <xTaskRemoveFromEventList+0xb8>)
 8003b5e:	441a      	add	r2, r3
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	3304      	adds	r3, #4
 8003b64:	4619      	mov	r1, r3
 8003b66:	4610      	mov	r0, r2
 8003b68:	f7fe fdf1 	bl	800274e <vListInsertEnd>
 8003b6c:	e005      	b.n	8003b7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	3318      	adds	r3, #24
 8003b72:	4619      	mov	r1, r3
 8003b74:	480e      	ldr	r0, [pc, #56]	; (8003bb0 <xTaskRemoveFromEventList+0xbc>)
 8003b76:	f7fe fdea 	bl	800274e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7e:	4b0d      	ldr	r3, [pc, #52]	; (8003bb4 <xTaskRemoveFromEventList+0xc0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d905      	bls.n	8003b94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <xTaskRemoveFromEventList+0xc4>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	e001      	b.n	8003b98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003b98:	697b      	ldr	r3, [r7, #20]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000be4 	.word	0x20000be4
 8003ba8:	20000bc4 	.word	0x20000bc4
 8003bac:	200006ec 	.word	0x200006ec
 8003bb0:	20000b7c 	.word	0x20000b7c
 8003bb4:	200006e8 	.word	0x200006e8
 8003bb8:	20000bd0 	.word	0x20000bd0

08003bbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003bc4:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <vTaskInternalSetTimeOutState+0x24>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <vTaskInternalSetTimeOutState+0x28>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	605a      	str	r2, [r3, #4]
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	20000bd4 	.word	0x20000bd4
 8003be4:	20000bc0 	.word	0x20000bc0

08003be8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10a      	bne.n	8003c0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	613b      	str	r3, [r7, #16]
}
 8003c0a:	bf00      	nop
 8003c0c:	e7fe      	b.n	8003c0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10a      	bne.n	8003c2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	60fb      	str	r3, [r7, #12]
}
 8003c26:	bf00      	nop
 8003c28:	e7fe      	b.n	8003c28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003c2a:	f000 fe7b 	bl	8004924 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ca4 <xTaskCheckForTimeOut+0xbc>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c46:	d102      	bne.n	8003c4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]
 8003c4c:	e023      	b.n	8003c96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	4b15      	ldr	r3, [pc, #84]	; (8003ca8 <xTaskCheckForTimeOut+0xc0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d007      	beq.n	8003c6a <xTaskCheckForTimeOut+0x82>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d302      	bcc.n	8003c6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c64:	2301      	movs	r3, #1
 8003c66:	61fb      	str	r3, [r7, #28]
 8003c68:	e015      	b.n	8003c96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d20b      	bcs.n	8003c8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	1ad2      	subs	r2, r2, r3
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff ff9b 	bl	8003bbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
 8003c8a:	e004      	b.n	8003c96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003c92:	2301      	movs	r3, #1
 8003c94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003c96:	f000 fe75 	bl	8004984 <vPortExitCritical>

	return xReturn;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3720      	adds	r7, #32
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20000bc0 	.word	0x20000bc0
 8003ca8:	20000bd4 	.word	0x20000bd4

08003cac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <vTaskMissedYield+0x14>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]
}
 8003cb6:	bf00      	nop
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	20000bd0 	.word	0x20000bd0

08003cc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ccc:	f000 f852 	bl	8003d74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003cd0:	4b06      	ldr	r3, [pc, #24]	; (8003cec <prvIdleTask+0x28>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d9f9      	bls.n	8003ccc <prvIdleTask+0x8>
			{
				taskYIELD();
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <prvIdleTask+0x2c>)
 8003cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ce8:	e7f0      	b.n	8003ccc <prvIdleTask+0x8>
 8003cea:	bf00      	nop
 8003cec:	200006ec 	.word	0x200006ec
 8003cf0:	e000ed04 	.word	0xe000ed04

08003cf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	607b      	str	r3, [r7, #4]
 8003cfe:	e00c      	b.n	8003d1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4a12      	ldr	r2, [pc, #72]	; (8003d54 <prvInitialiseTaskLists+0x60>)
 8003d0c:	4413      	add	r3, r2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fe fcf0 	bl	80026f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3301      	adds	r3, #1
 8003d18:	607b      	str	r3, [r7, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b37      	cmp	r3, #55	; 0x37
 8003d1e:	d9ef      	bls.n	8003d00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d20:	480d      	ldr	r0, [pc, #52]	; (8003d58 <prvInitialiseTaskLists+0x64>)
 8003d22:	f7fe fce7 	bl	80026f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d26:	480d      	ldr	r0, [pc, #52]	; (8003d5c <prvInitialiseTaskLists+0x68>)
 8003d28:	f7fe fce4 	bl	80026f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d2c:	480c      	ldr	r0, [pc, #48]	; (8003d60 <prvInitialiseTaskLists+0x6c>)
 8003d2e:	f7fe fce1 	bl	80026f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d32:	480c      	ldr	r0, [pc, #48]	; (8003d64 <prvInitialiseTaskLists+0x70>)
 8003d34:	f7fe fcde 	bl	80026f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d38:	480b      	ldr	r0, [pc, #44]	; (8003d68 <prvInitialiseTaskLists+0x74>)
 8003d3a:	f7fe fcdb 	bl	80026f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <prvInitialiseTaskLists+0x78>)
 8003d40:	4a05      	ldr	r2, [pc, #20]	; (8003d58 <prvInitialiseTaskLists+0x64>)
 8003d42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d44:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <prvInitialiseTaskLists+0x7c>)
 8003d46:	4a05      	ldr	r2, [pc, #20]	; (8003d5c <prvInitialiseTaskLists+0x68>)
 8003d48:	601a      	str	r2, [r3, #0]
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	200006ec 	.word	0x200006ec
 8003d58:	20000b4c 	.word	0x20000b4c
 8003d5c:	20000b60 	.word	0x20000b60
 8003d60:	20000b7c 	.word	0x20000b7c
 8003d64:	20000b90 	.word	0x20000b90
 8003d68:	20000ba8 	.word	0x20000ba8
 8003d6c:	20000b74 	.word	0x20000b74
 8003d70:	20000b78 	.word	0x20000b78

08003d74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d7a:	e019      	b.n	8003db0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d7c:	f000 fdd2 	bl	8004924 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d80:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <prvCheckTasksWaitingTermination+0x50>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fe fd3b 	bl	8002808 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d92:	4b0d      	ldr	r3, [pc, #52]	; (8003dc8 <prvCheckTasksWaitingTermination+0x54>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	4a0b      	ldr	r2, [pc, #44]	; (8003dc8 <prvCheckTasksWaitingTermination+0x54>)
 8003d9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <prvCheckTasksWaitingTermination+0x58>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	4a0a      	ldr	r2, [pc, #40]	; (8003dcc <prvCheckTasksWaitingTermination+0x58>)
 8003da4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003da6:	f000 fded 	bl	8004984 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f810 	bl	8003dd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <prvCheckTasksWaitingTermination+0x58>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e1      	bne.n	8003d7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003db8:	bf00      	nop
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000b90 	.word	0x20000b90
 8003dc8:	20000bbc 	.word	0x20000bbc
 8003dcc:	20000ba4 	.word	0x20000ba4

08003dd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d108      	bne.n	8003df4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 ff8a 	bl	8004d00 <vPortFree>
				vPortFree( pxTCB );
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 ff87 	bl	8004d00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003df2:	e018      	b.n	8003e26 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d103      	bne.n	8003e06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 ff7e 	bl	8004d00 <vPortFree>
	}
 8003e04:	e00f      	b.n	8003e26 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d00a      	beq.n	8003e26 <prvDeleteTCB+0x56>
	__asm volatile
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	60fb      	str	r3, [r7, #12]
}
 8003e22:	bf00      	nop
 8003e24:	e7fe      	b.n	8003e24 <prvDeleteTCB+0x54>
	}
 8003e26:	bf00      	nop
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e36:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <prvResetNextTaskUnblockTime+0x38>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d104      	bne.n	8003e4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e40:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <prvResetNextTaskUnblockTime+0x3c>)
 8003e42:	f04f 32ff 	mov.w	r2, #4294967295
 8003e46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e48:	e008      	b.n	8003e5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e4a:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <prvResetNextTaskUnblockTime+0x38>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	4a04      	ldr	r2, [pc, #16]	; (8003e6c <prvResetNextTaskUnblockTime+0x3c>)
 8003e5a:	6013      	str	r3, [r2, #0]
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	20000b74 	.word	0x20000b74
 8003e6c:	20000bdc 	.word	0x20000bdc

08003e70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e76:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <xTaskGetSchedulerState+0x34>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d102      	bne.n	8003e84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	607b      	str	r3, [r7, #4]
 8003e82:	e008      	b.n	8003e96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e84:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <xTaskGetSchedulerState+0x38>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d102      	bne.n	8003e92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	607b      	str	r3, [r7, #4]
 8003e90:	e001      	b.n	8003e96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e92:	2300      	movs	r3, #0
 8003e94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e96:	687b      	ldr	r3, [r7, #4]
	}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	20000bc8 	.word	0x20000bc8
 8003ea8:	20000be4 	.word	0x20000be4

08003eac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d056      	beq.n	8003f70 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003ec2:	4b2e      	ldr	r3, [pc, #184]	; (8003f7c <xTaskPriorityDisinherit+0xd0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d00a      	beq.n	8003ee2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed0:	f383 8811 	msr	BASEPRI, r3
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	60fb      	str	r3, [r7, #12]
}
 8003ede:	bf00      	nop
 8003ee0:	e7fe      	b.n	8003ee0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10a      	bne.n	8003f00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eee:	f383 8811 	msr	BASEPRI, r3
 8003ef2:	f3bf 8f6f 	isb	sy
 8003ef6:	f3bf 8f4f 	dsb	sy
 8003efa:	60bb      	str	r3, [r7, #8]
}
 8003efc:	bf00      	nop
 8003efe:	e7fe      	b.n	8003efe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f04:	1e5a      	subs	r2, r3, #1
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d02c      	beq.n	8003f70 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d128      	bne.n	8003f70 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	3304      	adds	r3, #4
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fe fc70 	bl	8002808 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f40:	4b0f      	ldr	r3, [pc, #60]	; (8003f80 <xTaskPriorityDisinherit+0xd4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d903      	bls.n	8003f50 <xTaskPriorityDisinherit+0xa4>
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	4a0c      	ldr	r2, [pc, #48]	; (8003f80 <xTaskPriorityDisinherit+0xd4>)
 8003f4e:	6013      	str	r3, [r2, #0]
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f54:	4613      	mov	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4a09      	ldr	r2, [pc, #36]	; (8003f84 <xTaskPriorityDisinherit+0xd8>)
 8003f5e:	441a      	add	r2, r3
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	3304      	adds	r3, #4
 8003f64:	4619      	mov	r1, r3
 8003f66:	4610      	mov	r0, r2
 8003f68:	f7fe fbf1 	bl	800274e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f70:	697b      	ldr	r3, [r7, #20]
	}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	200006e8 	.word	0x200006e8
 8003f80:	20000bc4 	.word	0x20000bc4
 8003f84:	200006ec 	.word	0x200006ec

08003f88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f92:	4b21      	ldr	r3, [pc, #132]	; (8004018 <prvAddCurrentTaskToDelayedList+0x90>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f98:	4b20      	ldr	r3, [pc, #128]	; (800401c <prvAddCurrentTaskToDelayedList+0x94>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fe fc32 	bl	8002808 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003faa:	d10a      	bne.n	8003fc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d007      	beq.n	8003fc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fb2:	4b1a      	ldr	r3, [pc, #104]	; (800401c <prvAddCurrentTaskToDelayedList+0x94>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4819      	ldr	r0, [pc, #100]	; (8004020 <prvAddCurrentTaskToDelayedList+0x98>)
 8003fbc:	f7fe fbc7 	bl	800274e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003fc0:	e026      	b.n	8004010 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003fca:	4b14      	ldr	r3, [pc, #80]	; (800401c <prvAddCurrentTaskToDelayedList+0x94>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d209      	bcs.n	8003fee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fda:	4b12      	ldr	r3, [pc, #72]	; (8004024 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4b0f      	ldr	r3, [pc, #60]	; (800401c <prvAddCurrentTaskToDelayedList+0x94>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	f7fe fbd5 	bl	8002796 <vListInsert>
}
 8003fec:	e010      	b.n	8004010 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fee:	4b0e      	ldr	r3, [pc, #56]	; (8004028 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	; (800401c <prvAddCurrentTaskToDelayedList+0x94>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	f7fe fbcb 	bl	8002796 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004000:	4b0a      	ldr	r3, [pc, #40]	; (800402c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	429a      	cmp	r2, r3
 8004008:	d202      	bcs.n	8004010 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800400a:	4a08      	ldr	r2, [pc, #32]	; (800402c <prvAddCurrentTaskToDelayedList+0xa4>)
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	6013      	str	r3, [r2, #0]
}
 8004010:	bf00      	nop
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	20000bc0 	.word	0x20000bc0
 800401c:	200006e8 	.word	0x200006e8
 8004020:	20000ba8 	.word	0x20000ba8
 8004024:	20000b78 	.word	0x20000b78
 8004028:	20000b74 	.word	0x20000b74
 800402c:	20000bdc 	.word	0x20000bdc

08004030 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08a      	sub	sp, #40	; 0x28
 8004034:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800403a:	f000 fb07 	bl	800464c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800403e:	4b1c      	ldr	r3, [pc, #112]	; (80040b0 <xTimerCreateTimerTask+0x80>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d021      	beq.n	800408a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800404a:	2300      	movs	r3, #0
 800404c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800404e:	1d3a      	adds	r2, r7, #4
 8004050:	f107 0108 	add.w	r1, r7, #8
 8004054:	f107 030c 	add.w	r3, r7, #12
 8004058:	4618      	mov	r0, r3
 800405a:	f7fe fb31 	bl	80026c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	9202      	str	r2, [sp, #8]
 8004066:	9301      	str	r3, [sp, #4]
 8004068:	2302      	movs	r3, #2
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	2300      	movs	r3, #0
 800406e:	460a      	mov	r2, r1
 8004070:	4910      	ldr	r1, [pc, #64]	; (80040b4 <xTimerCreateTimerTask+0x84>)
 8004072:	4811      	ldr	r0, [pc, #68]	; (80040b8 <xTimerCreateTimerTask+0x88>)
 8004074:	f7ff f8de 	bl	8003234 <xTaskCreateStatic>
 8004078:	4603      	mov	r3, r0
 800407a:	4a10      	ldr	r2, [pc, #64]	; (80040bc <xTimerCreateTimerTask+0x8c>)
 800407c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800407e:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <xTimerCreateTimerTask+0x8c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004086:	2301      	movs	r3, #1
 8004088:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10a      	bne.n	80040a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	613b      	str	r3, [r7, #16]
}
 80040a2:	bf00      	nop
 80040a4:	e7fe      	b.n	80040a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80040a6:	697b      	ldr	r3, [r7, #20]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	20000c18 	.word	0x20000c18
 80040b4:	08005468 	.word	0x08005468
 80040b8:	080041f5 	.word	0x080041f5
 80040bc:	20000c1c 	.word	0x20000c1c

080040c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b08a      	sub	sp, #40	; 0x28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
 80040cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	623b      	str	r3, [r7, #32]
}
 80040ea:	bf00      	nop
 80040ec:	e7fe      	b.n	80040ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80040ee:	4b1a      	ldr	r3, [pc, #104]	; (8004158 <xTimerGenericCommand+0x98>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d02a      	beq.n	800414c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2b05      	cmp	r3, #5
 8004106:	dc18      	bgt.n	800413a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004108:	f7ff feb2 	bl	8003e70 <xTaskGetSchedulerState>
 800410c:	4603      	mov	r3, r0
 800410e:	2b02      	cmp	r3, #2
 8004110:	d109      	bne.n	8004126 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004112:	4b11      	ldr	r3, [pc, #68]	; (8004158 <xTimerGenericCommand+0x98>)
 8004114:	6818      	ldr	r0, [r3, #0]
 8004116:	f107 0110 	add.w	r1, r7, #16
 800411a:	2300      	movs	r3, #0
 800411c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411e:	f7fe fca1 	bl	8002a64 <xQueueGenericSend>
 8004122:	6278      	str	r0, [r7, #36]	; 0x24
 8004124:	e012      	b.n	800414c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004126:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <xTimerGenericCommand+0x98>)
 8004128:	6818      	ldr	r0, [r3, #0]
 800412a:	f107 0110 	add.w	r1, r7, #16
 800412e:	2300      	movs	r3, #0
 8004130:	2200      	movs	r2, #0
 8004132:	f7fe fc97 	bl	8002a64 <xQueueGenericSend>
 8004136:	6278      	str	r0, [r7, #36]	; 0x24
 8004138:	e008      	b.n	800414c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800413a:	4b07      	ldr	r3, [pc, #28]	; (8004158 <xTimerGenericCommand+0x98>)
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	f107 0110 	add.w	r1, r7, #16
 8004142:	2300      	movs	r3, #0
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	f7fe fd8b 	bl	8002c60 <xQueueGenericSendFromISR>
 800414a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800414e:	4618      	mov	r0, r3
 8004150:	3728      	adds	r7, #40	; 0x28
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000c18 	.word	0x20000c18

0800415c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af02      	add	r7, sp, #8
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004166:	4b22      	ldr	r3, [pc, #136]	; (80041f0 <prvProcessExpiredTimer+0x94>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	3304      	adds	r3, #4
 8004174:	4618      	mov	r0, r3
 8004176:	f7fe fb47 	bl	8002808 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d022      	beq.n	80041ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	699a      	ldr	r2, [r3, #24]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	18d1      	adds	r1, r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	6978      	ldr	r0, [r7, #20]
 8004196:	f000 f8d1 	bl	800433c <prvInsertTimerInActiveList>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d01f      	beq.n	80041e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041a0:	2300      	movs	r3, #0
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	2300      	movs	r3, #0
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	2100      	movs	r1, #0
 80041aa:	6978      	ldr	r0, [r7, #20]
 80041ac:	f7ff ff88 	bl	80040c0 <xTimerGenericCommand>
 80041b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d113      	bne.n	80041e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80041b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	60fb      	str	r3, [r7, #12]
}
 80041ca:	bf00      	nop
 80041cc:	e7fe      	b.n	80041cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041d4:	f023 0301 	bic.w	r3, r3, #1
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	6978      	ldr	r0, [r7, #20]
 80041e6:	4798      	blx	r3
}
 80041e8:	bf00      	nop
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	20000c10 	.word	0x20000c10

080041f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041fc:	f107 0308 	add.w	r3, r7, #8
 8004200:	4618      	mov	r0, r3
 8004202:	f000 f857 	bl	80042b4 <prvGetNextExpireTime>
 8004206:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4619      	mov	r1, r3
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f803 	bl	8004218 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004212:	f000 f8d5 	bl	80043c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004216:	e7f1      	b.n	80041fc <prvTimerTask+0x8>

08004218 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004222:	f7ff fa43 	bl	80036ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004226:	f107 0308 	add.w	r3, r7, #8
 800422a:	4618      	mov	r0, r3
 800422c:	f000 f866 	bl	80042fc <prvSampleTimeNow>
 8004230:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d130      	bne.n	800429a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10a      	bne.n	8004254 <prvProcessTimerOrBlockTask+0x3c>
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	429a      	cmp	r2, r3
 8004244:	d806      	bhi.n	8004254 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004246:	f7ff fa3f 	bl	80036c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800424a:	68f9      	ldr	r1, [r7, #12]
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff ff85 	bl	800415c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004252:	e024      	b.n	800429e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d008      	beq.n	800426c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800425a:	4b13      	ldr	r3, [pc, #76]	; (80042a8 <prvProcessTimerOrBlockTask+0x90>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <prvProcessTimerOrBlockTask+0x50>
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <prvProcessTimerOrBlockTask+0x52>
 8004268:	2300      	movs	r3, #0
 800426a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800426c:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <prvProcessTimerOrBlockTask+0x94>)
 800426e:	6818      	ldr	r0, [r3, #0]
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	4619      	mov	r1, r3
 800427a:	f7fe ffa7 	bl	80031cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800427e:	f7ff fa23 	bl	80036c8 <xTaskResumeAll>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10a      	bne.n	800429e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004288:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <prvProcessTimerOrBlockTask+0x98>)
 800428a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	f3bf 8f6f 	isb	sy
}
 8004298:	e001      	b.n	800429e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800429a:	f7ff fa15 	bl	80036c8 <xTaskResumeAll>
}
 800429e:	bf00      	nop
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	20000c14 	.word	0x20000c14
 80042ac:	20000c18 	.word	0x20000c18
 80042b0:	e000ed04 	.word	0xe000ed04

080042b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80042bc:	4b0e      	ldr	r3, [pc, #56]	; (80042f8 <prvGetNextExpireTime+0x44>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <prvGetNextExpireTime+0x16>
 80042c6:	2201      	movs	r2, #1
 80042c8:	e000      	b.n	80042cc <prvGetNextExpireTime+0x18>
 80042ca:	2200      	movs	r2, #0
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d105      	bne.n	80042e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042d8:	4b07      	ldr	r3, [pc, #28]	; (80042f8 <prvGetNextExpireTime+0x44>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	e001      	b.n	80042e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80042e8:	68fb      	ldr	r3, [r7, #12]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	20000c10 	.word	0x20000c10

080042fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004304:	f7ff fa7e 	bl	8003804 <xTaskGetTickCount>
 8004308:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800430a:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <prvSampleTimeNow+0x3c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	429a      	cmp	r2, r3
 8004312:	d205      	bcs.n	8004320 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004314:	f000 f936 	bl	8004584 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	e002      	b.n	8004326 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004326:	4a04      	ldr	r2, [pc, #16]	; (8004338 <prvSampleTimeNow+0x3c>)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800432c:	68fb      	ldr	r3, [r7, #12]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000c20 	.word	0x20000c20

0800433c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800434a:	2300      	movs	r3, #0
 800434c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	429a      	cmp	r2, r3
 8004360:	d812      	bhi.n	8004388 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	1ad2      	subs	r2, r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	429a      	cmp	r2, r3
 800436e:	d302      	bcc.n	8004376 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004370:	2301      	movs	r3, #1
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	e01b      	b.n	80043ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004376:	4b10      	ldr	r3, [pc, #64]	; (80043b8 <prvInsertTimerInActiveList+0x7c>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	3304      	adds	r3, #4
 800437e:	4619      	mov	r1, r3
 8004380:	4610      	mov	r0, r2
 8004382:	f7fe fa08 	bl	8002796 <vListInsert>
 8004386:	e012      	b.n	80043ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	429a      	cmp	r2, r3
 800438e:	d206      	bcs.n	800439e <prvInsertTimerInActiveList+0x62>
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d302      	bcc.n	800439e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004398:	2301      	movs	r3, #1
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	e007      	b.n	80043ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800439e:	4b07      	ldr	r3, [pc, #28]	; (80043bc <prvInsertTimerInActiveList+0x80>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3304      	adds	r3, #4
 80043a6:	4619      	mov	r1, r3
 80043a8:	4610      	mov	r0, r2
 80043aa:	f7fe f9f4 	bl	8002796 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80043ae:	697b      	ldr	r3, [r7, #20]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	20000c14 	.word	0x20000c14
 80043bc:	20000c10 	.word	0x20000c10

080043c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08e      	sub	sp, #56	; 0x38
 80043c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043c6:	e0ca      	b.n	800455e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	da18      	bge.n	8004400 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80043ce:	1d3b      	adds	r3, r7, #4
 80043d0:	3304      	adds	r3, #4
 80043d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80043d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10a      	bne.n	80043f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80043da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043de:	f383 8811 	msr	BASEPRI, r3
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	61fb      	str	r3, [r7, #28]
}
 80043ec:	bf00      	nop
 80043ee:	e7fe      	b.n	80043ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80043f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043f6:	6850      	ldr	r0, [r2, #4]
 80043f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043fa:	6892      	ldr	r2, [r2, #8]
 80043fc:	4611      	mov	r1, r2
 80043fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	f2c0 80aa 	blt.w	800455c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800440c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d004      	beq.n	800441e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004416:	3304      	adds	r3, #4
 8004418:	4618      	mov	r0, r3
 800441a:	f7fe f9f5 	bl	8002808 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800441e:	463b      	mov	r3, r7
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff ff6b 	bl	80042fc <prvSampleTimeNow>
 8004426:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b09      	cmp	r3, #9
 800442c:	f200 8097 	bhi.w	800455e <prvProcessReceivedCommands+0x19e>
 8004430:	a201      	add	r2, pc, #4	; (adr r2, 8004438 <prvProcessReceivedCommands+0x78>)
 8004432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004436:	bf00      	nop
 8004438:	08004461 	.word	0x08004461
 800443c:	08004461 	.word	0x08004461
 8004440:	08004461 	.word	0x08004461
 8004444:	080044d5 	.word	0x080044d5
 8004448:	080044e9 	.word	0x080044e9
 800444c:	08004533 	.word	0x08004533
 8004450:	08004461 	.word	0x08004461
 8004454:	08004461 	.word	0x08004461
 8004458:	080044d5 	.word	0x080044d5
 800445c:	080044e9 	.word	0x080044e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004462:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004466:	f043 0301 	orr.w	r3, r3, #1
 800446a:	b2da      	uxtb	r2, r3
 800446c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	18d1      	adds	r1, r2, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004480:	f7ff ff5c 	bl	800433c <prvInsertTimerInActiveList>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d069      	beq.n	800455e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004490:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	d05e      	beq.n	800455e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	441a      	add	r2, r3
 80044a8:	2300      	movs	r3, #0
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	2300      	movs	r3, #0
 80044ae:	2100      	movs	r1, #0
 80044b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044b2:	f7ff fe05 	bl	80040c0 <xTimerGenericCommand>
 80044b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d14f      	bne.n	800455e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80044be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	61bb      	str	r3, [r7, #24]
}
 80044d0:	bf00      	nop
 80044d2:	e7fe      	b.n	80044d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044da:	f023 0301 	bic.w	r3, r3, #1
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80044e6:	e03a      	b.n	800455e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80044e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10a      	bne.n	800451e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	617b      	str	r3, [r7, #20]
}
 800451a:	bf00      	nop
 800451c:	e7fe      	b.n	800451c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800451e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004520:	699a      	ldr	r2, [r3, #24]
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	18d1      	adds	r1, r2, r3
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800452a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800452c:	f7ff ff06 	bl	800433c <prvInsertTimerInActiveList>
					break;
 8004530:	e015      	b.n	800455e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d103      	bne.n	8004548 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004542:	f000 fbdd 	bl	8004d00 <vPortFree>
 8004546:	e00a      	b.n	800455e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800454e:	f023 0301 	bic.w	r3, r3, #1
 8004552:	b2da      	uxtb	r2, r3
 8004554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004556:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800455a:	e000      	b.n	800455e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800455c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800455e:	4b08      	ldr	r3, [pc, #32]	; (8004580 <prvProcessReceivedCommands+0x1c0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	1d39      	adds	r1, r7, #4
 8004564:	2200      	movs	r2, #0
 8004566:	4618      	mov	r0, r3
 8004568:	f7fe fc16 	bl	8002d98 <xQueueReceive>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	f47f af2a 	bne.w	80043c8 <prvProcessReceivedCommands+0x8>
	}
}
 8004574:	bf00      	nop
 8004576:	bf00      	nop
 8004578:	3730      	adds	r7, #48	; 0x30
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	20000c18 	.word	0x20000c18

08004584 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800458a:	e048      	b.n	800461e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800458c:	4b2d      	ldr	r3, [pc, #180]	; (8004644 <prvSwitchTimerLists+0xc0>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004596:	4b2b      	ldr	r3, [pc, #172]	; (8004644 <prvSwitchTimerLists+0xc0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	3304      	adds	r3, #4
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7fe f92f 	bl	8002808 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d02e      	beq.n	800461e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4413      	add	r3, r2
 80045c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d90e      	bls.n	80045f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045de:	4b19      	ldr	r3, [pc, #100]	; (8004644 <prvSwitchTimerLists+0xc0>)
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	3304      	adds	r3, #4
 80045e6:	4619      	mov	r1, r3
 80045e8:	4610      	mov	r0, r2
 80045ea:	f7fe f8d4 	bl	8002796 <vListInsert>
 80045ee:	e016      	b.n	800461e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045f0:	2300      	movs	r3, #0
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	2300      	movs	r3, #0
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	2100      	movs	r1, #0
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f7ff fd60 	bl	80040c0 <xTimerGenericCommand>
 8004600:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10a      	bne.n	800461e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	603b      	str	r3, [r7, #0]
}
 800461a:	bf00      	nop
 800461c:	e7fe      	b.n	800461c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800461e:	4b09      	ldr	r3, [pc, #36]	; (8004644 <prvSwitchTimerLists+0xc0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1b1      	bne.n	800458c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004628:	4b06      	ldr	r3, [pc, #24]	; (8004644 <prvSwitchTimerLists+0xc0>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800462e:	4b06      	ldr	r3, [pc, #24]	; (8004648 <prvSwitchTimerLists+0xc4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a04      	ldr	r2, [pc, #16]	; (8004644 <prvSwitchTimerLists+0xc0>)
 8004634:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004636:	4a04      	ldr	r2, [pc, #16]	; (8004648 <prvSwitchTimerLists+0xc4>)
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	6013      	str	r3, [r2, #0]
}
 800463c:	bf00      	nop
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	20000c10 	.word	0x20000c10
 8004648:	20000c14 	.word	0x20000c14

0800464c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004652:	f000 f967 	bl	8004924 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004656:	4b15      	ldr	r3, [pc, #84]	; (80046ac <prvCheckForValidListAndQueue+0x60>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d120      	bne.n	80046a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800465e:	4814      	ldr	r0, [pc, #80]	; (80046b0 <prvCheckForValidListAndQueue+0x64>)
 8004660:	f7fe f848 	bl	80026f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004664:	4813      	ldr	r0, [pc, #76]	; (80046b4 <prvCheckForValidListAndQueue+0x68>)
 8004666:	f7fe f845 	bl	80026f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800466a:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <prvCheckForValidListAndQueue+0x6c>)
 800466c:	4a10      	ldr	r2, [pc, #64]	; (80046b0 <prvCheckForValidListAndQueue+0x64>)
 800466e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004670:	4b12      	ldr	r3, [pc, #72]	; (80046bc <prvCheckForValidListAndQueue+0x70>)
 8004672:	4a10      	ldr	r2, [pc, #64]	; (80046b4 <prvCheckForValidListAndQueue+0x68>)
 8004674:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004676:	2300      	movs	r3, #0
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <prvCheckForValidListAndQueue+0x74>)
 800467c:	4a11      	ldr	r2, [pc, #68]	; (80046c4 <prvCheckForValidListAndQueue+0x78>)
 800467e:	2110      	movs	r1, #16
 8004680:	200a      	movs	r0, #10
 8004682:	f7fe f953 	bl	800292c <xQueueGenericCreateStatic>
 8004686:	4603      	mov	r3, r0
 8004688:	4a08      	ldr	r2, [pc, #32]	; (80046ac <prvCheckForValidListAndQueue+0x60>)
 800468a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800468c:	4b07      	ldr	r3, [pc, #28]	; (80046ac <prvCheckForValidListAndQueue+0x60>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d005      	beq.n	80046a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004694:	4b05      	ldr	r3, [pc, #20]	; (80046ac <prvCheckForValidListAndQueue+0x60>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	490b      	ldr	r1, [pc, #44]	; (80046c8 <prvCheckForValidListAndQueue+0x7c>)
 800469a:	4618      	mov	r0, r3
 800469c:	f7fe fd6c 	bl	8003178 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046a0:	f000 f970 	bl	8004984 <vPortExitCritical>
}
 80046a4:	bf00      	nop
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20000c18 	.word	0x20000c18
 80046b0:	20000be8 	.word	0x20000be8
 80046b4:	20000bfc 	.word	0x20000bfc
 80046b8:	20000c10 	.word	0x20000c10
 80046bc:	20000c14 	.word	0x20000c14
 80046c0:	20000cc4 	.word	0x20000cc4
 80046c4:	20000c24 	.word	0x20000c24
 80046c8:	08005470 	.word	0x08005470

080046cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	3b04      	subs	r3, #4
 80046dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3b04      	subs	r3, #4
 80046ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f023 0201 	bic.w	r2, r3, #1
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3b04      	subs	r3, #4
 80046fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046fc:	4a0c      	ldr	r2, [pc, #48]	; (8004730 <pxPortInitialiseStack+0x64>)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	3b14      	subs	r3, #20
 8004706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3b04      	subs	r3, #4
 8004712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f06f 0202 	mvn.w	r2, #2
 800471a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	3b20      	subs	r3, #32
 8004720:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004722:	68fb      	ldr	r3, [r7, #12]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	08004735 	.word	0x08004735

08004734 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800473a:	2300      	movs	r3, #0
 800473c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800473e:	4b12      	ldr	r3, [pc, #72]	; (8004788 <prvTaskExitError+0x54>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004746:	d00a      	beq.n	800475e <prvTaskExitError+0x2a>
	__asm volatile
 8004748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	60fb      	str	r3, [r7, #12]
}
 800475a:	bf00      	nop
 800475c:	e7fe      	b.n	800475c <prvTaskExitError+0x28>
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	60bb      	str	r3, [r7, #8]
}
 8004770:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004772:	bf00      	nop
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0fc      	beq.n	8004774 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800477a:	bf00      	nop
 800477c:	bf00      	nop
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	2000000c 	.word	0x2000000c
 800478c:	00000000 	.word	0x00000000

08004790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004790:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <pxCurrentTCBConst2>)
 8004792:	6819      	ldr	r1, [r3, #0]
 8004794:	6808      	ldr	r0, [r1, #0]
 8004796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479a:	f380 8809 	msr	PSP, r0
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f04f 0000 	mov.w	r0, #0
 80047a6:	f380 8811 	msr	BASEPRI, r0
 80047aa:	4770      	bx	lr
 80047ac:	f3af 8000 	nop.w

080047b0 <pxCurrentTCBConst2>:
 80047b0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80047b4:	bf00      	nop
 80047b6:	bf00      	nop

080047b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80047b8:	4808      	ldr	r0, [pc, #32]	; (80047dc <prvPortStartFirstTask+0x24>)
 80047ba:	6800      	ldr	r0, [r0, #0]
 80047bc:	6800      	ldr	r0, [r0, #0]
 80047be:	f380 8808 	msr	MSP, r0
 80047c2:	f04f 0000 	mov.w	r0, #0
 80047c6:	f380 8814 	msr	CONTROL, r0
 80047ca:	b662      	cpsie	i
 80047cc:	b661      	cpsie	f
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	df00      	svc	0
 80047d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80047da:	bf00      	nop
 80047dc:	e000ed08 	.word	0xe000ed08

080047e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80047e6:	4b46      	ldr	r3, [pc, #280]	; (8004900 <xPortStartScheduler+0x120>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a46      	ldr	r2, [pc, #280]	; (8004904 <xPortStartScheduler+0x124>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d10a      	bne.n	8004806 <xPortStartScheduler+0x26>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	613b      	str	r3, [r7, #16]
}
 8004802:	bf00      	nop
 8004804:	e7fe      	b.n	8004804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004806:	4b3e      	ldr	r3, [pc, #248]	; (8004900 <xPortStartScheduler+0x120>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a3f      	ldr	r2, [pc, #252]	; (8004908 <xPortStartScheduler+0x128>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d10a      	bne.n	8004826 <xPortStartScheduler+0x46>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	60fb      	str	r3, [r7, #12]
}
 8004822:	bf00      	nop
 8004824:	e7fe      	b.n	8004824 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004826:	4b39      	ldr	r3, [pc, #228]	; (800490c <xPortStartScheduler+0x12c>)
 8004828:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	b2db      	uxtb	r3, r3
 8004830:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	22ff      	movs	r2, #255	; 0xff
 8004836:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	b2db      	uxtb	r3, r3
 800483e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004840:	78fb      	ldrb	r3, [r7, #3]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004848:	b2da      	uxtb	r2, r3
 800484a:	4b31      	ldr	r3, [pc, #196]	; (8004910 <xPortStartScheduler+0x130>)
 800484c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800484e:	4b31      	ldr	r3, [pc, #196]	; (8004914 <xPortStartScheduler+0x134>)
 8004850:	2207      	movs	r2, #7
 8004852:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004854:	e009      	b.n	800486a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004856:	4b2f      	ldr	r3, [pc, #188]	; (8004914 <xPortStartScheduler+0x134>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3b01      	subs	r3, #1
 800485c:	4a2d      	ldr	r2, [pc, #180]	; (8004914 <xPortStartScheduler+0x134>)
 800485e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004860:	78fb      	ldrb	r3, [r7, #3]
 8004862:	b2db      	uxtb	r3, r3
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	b2db      	uxtb	r3, r3
 8004868:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800486a:	78fb      	ldrb	r3, [r7, #3]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004872:	2b80      	cmp	r3, #128	; 0x80
 8004874:	d0ef      	beq.n	8004856 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004876:	4b27      	ldr	r3, [pc, #156]	; (8004914 <xPortStartScheduler+0x134>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f1c3 0307 	rsb	r3, r3, #7
 800487e:	2b04      	cmp	r3, #4
 8004880:	d00a      	beq.n	8004898 <xPortStartScheduler+0xb8>
	__asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	60bb      	str	r3, [r7, #8]
}
 8004894:	bf00      	nop
 8004896:	e7fe      	b.n	8004896 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004898:	4b1e      	ldr	r3, [pc, #120]	; (8004914 <xPortStartScheduler+0x134>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	021b      	lsls	r3, r3, #8
 800489e:	4a1d      	ldr	r2, [pc, #116]	; (8004914 <xPortStartScheduler+0x134>)
 80048a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048a2:	4b1c      	ldr	r3, [pc, #112]	; (8004914 <xPortStartScheduler+0x134>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048aa:	4a1a      	ldr	r2, [pc, #104]	; (8004914 <xPortStartScheduler+0x134>)
 80048ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048b6:	4b18      	ldr	r3, [pc, #96]	; (8004918 <xPortStartScheduler+0x138>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a17      	ldr	r2, [pc, #92]	; (8004918 <xPortStartScheduler+0x138>)
 80048bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048c2:	4b15      	ldr	r3, [pc, #84]	; (8004918 <xPortStartScheduler+0x138>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a14      	ldr	r2, [pc, #80]	; (8004918 <xPortStartScheduler+0x138>)
 80048c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80048cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80048ce:	f000 f8dd 	bl	8004a8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80048d2:	4b12      	ldr	r3, [pc, #72]	; (800491c <xPortStartScheduler+0x13c>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80048d8:	f000 f8fc 	bl	8004ad4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80048dc:	4b10      	ldr	r3, [pc, #64]	; (8004920 <xPortStartScheduler+0x140>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a0f      	ldr	r2, [pc, #60]	; (8004920 <xPortStartScheduler+0x140>)
 80048e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80048e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80048e8:	f7ff ff66 	bl	80047b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80048ec:	f7ff f854 	bl	8003998 <vTaskSwitchContext>
	prvTaskExitError();
 80048f0:	f7ff ff20 	bl	8004734 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	e000ed00 	.word	0xe000ed00
 8004904:	410fc271 	.word	0x410fc271
 8004908:	410fc270 	.word	0x410fc270
 800490c:	e000e400 	.word	0xe000e400
 8004910:	20000d14 	.word	0x20000d14
 8004914:	20000d18 	.word	0x20000d18
 8004918:	e000ed20 	.word	0xe000ed20
 800491c:	2000000c 	.word	0x2000000c
 8004920:	e000ef34 	.word	0xe000ef34

08004924 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
	__asm volatile
 800492a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	607b      	str	r3, [r7, #4]
}
 800493c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800493e:	4b0f      	ldr	r3, [pc, #60]	; (800497c <vPortEnterCritical+0x58>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3301      	adds	r3, #1
 8004944:	4a0d      	ldr	r2, [pc, #52]	; (800497c <vPortEnterCritical+0x58>)
 8004946:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004948:	4b0c      	ldr	r3, [pc, #48]	; (800497c <vPortEnterCritical+0x58>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d10f      	bne.n	8004970 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004950:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <vPortEnterCritical+0x5c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <vPortEnterCritical+0x4c>
	__asm volatile
 800495a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	603b      	str	r3, [r7, #0]
}
 800496c:	bf00      	nop
 800496e:	e7fe      	b.n	800496e <vPortEnterCritical+0x4a>
	}
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	2000000c 	.word	0x2000000c
 8004980:	e000ed04 	.word	0xe000ed04

08004984 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800498a:	4b12      	ldr	r3, [pc, #72]	; (80049d4 <vPortExitCritical+0x50>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10a      	bne.n	80049a8 <vPortExitCritical+0x24>
	__asm volatile
 8004992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004996:	f383 8811 	msr	BASEPRI, r3
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	607b      	str	r3, [r7, #4]
}
 80049a4:	bf00      	nop
 80049a6:	e7fe      	b.n	80049a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80049a8:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <vPortExitCritical+0x50>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	4a09      	ldr	r2, [pc, #36]	; (80049d4 <vPortExitCritical+0x50>)
 80049b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80049b2:	4b08      	ldr	r3, [pc, #32]	; (80049d4 <vPortExitCritical+0x50>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d105      	bne.n	80049c6 <vPortExitCritical+0x42>
 80049ba:	2300      	movs	r3, #0
 80049bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	f383 8811 	msr	BASEPRI, r3
}
 80049c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	2000000c 	.word	0x2000000c
	...

080049e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80049e0:	f3ef 8009 	mrs	r0, PSP
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	4b15      	ldr	r3, [pc, #84]	; (8004a40 <pxCurrentTCBConst>)
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	f01e 0f10 	tst.w	lr, #16
 80049f0:	bf08      	it	eq
 80049f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80049f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049fa:	6010      	str	r0, [r2, #0]
 80049fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a04:	f380 8811 	msr	BASEPRI, r0
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f7fe ffc2 	bl	8003998 <vTaskSwitchContext>
 8004a14:	f04f 0000 	mov.w	r0, #0
 8004a18:	f380 8811 	msr	BASEPRI, r0
 8004a1c:	bc09      	pop	{r0, r3}
 8004a1e:	6819      	ldr	r1, [r3, #0]
 8004a20:	6808      	ldr	r0, [r1, #0]
 8004a22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a26:	f01e 0f10 	tst.w	lr, #16
 8004a2a:	bf08      	it	eq
 8004a2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a30:	f380 8809 	msr	PSP, r0
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	f3af 8000 	nop.w

08004a40 <pxCurrentTCBConst>:
 8004a40:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop

08004a48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	607b      	str	r3, [r7, #4]
}
 8004a60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a62:	f7fe fedf 	bl	8003824 <xTaskIncrementTick>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a6c:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <xPortSysTickHandler+0x40>)
 8004a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	2300      	movs	r3, #0
 8004a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	f383 8811 	msr	BASEPRI, r3
}
 8004a7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a80:	bf00      	nop
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	e000ed04 	.word	0xe000ed04

08004a8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a90:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <vPortSetupTimerInterrupt+0x34>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a96:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <vPortSetupTimerInterrupt+0x38>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <vPortSetupTimerInterrupt+0x3c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a0a      	ldr	r2, [pc, #40]	; (8004acc <vPortSetupTimerInterrupt+0x40>)
 8004aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa6:	099b      	lsrs	r3, r3, #6
 8004aa8:	4a09      	ldr	r2, [pc, #36]	; (8004ad0 <vPortSetupTimerInterrupt+0x44>)
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004aae:	4b04      	ldr	r3, [pc, #16]	; (8004ac0 <vPortSetupTimerInterrupt+0x34>)
 8004ab0:	2207      	movs	r2, #7
 8004ab2:	601a      	str	r2, [r3, #0]
}
 8004ab4:	bf00      	nop
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	e000e010 	.word	0xe000e010
 8004ac4:	e000e018 	.word	0xe000e018
 8004ac8:	20000000 	.word	0x20000000
 8004acc:	10624dd3 	.word	0x10624dd3
 8004ad0:	e000e014 	.word	0xe000e014

08004ad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ad4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ae4 <vPortEnableVFP+0x10>
 8004ad8:	6801      	ldr	r1, [r0, #0]
 8004ada:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004ade:	6001      	str	r1, [r0, #0]
 8004ae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ae2:	bf00      	nop
 8004ae4:	e000ed88 	.word	0xe000ed88

08004ae8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004aee:	f3ef 8305 	mrs	r3, IPSR
 8004af2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b0f      	cmp	r3, #15
 8004af8:	d914      	bls.n	8004b24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004afa:	4a17      	ldr	r2, [pc, #92]	; (8004b58 <vPortValidateInterruptPriority+0x70>)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004b04:	4b15      	ldr	r3, [pc, #84]	; (8004b5c <vPortValidateInterruptPriority+0x74>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	7afa      	ldrb	r2, [r7, #11]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d20a      	bcs.n	8004b24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	607b      	str	r3, [r7, #4]
}
 8004b20:	bf00      	nop
 8004b22:	e7fe      	b.n	8004b22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004b24:	4b0e      	ldr	r3, [pc, #56]	; (8004b60 <vPortValidateInterruptPriority+0x78>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b2c:	4b0d      	ldr	r3, [pc, #52]	; (8004b64 <vPortValidateInterruptPriority+0x7c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d90a      	bls.n	8004b4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	603b      	str	r3, [r7, #0]
}
 8004b46:	bf00      	nop
 8004b48:	e7fe      	b.n	8004b48 <vPortValidateInterruptPriority+0x60>
	}
 8004b4a:	bf00      	nop
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	e000e3f0 	.word	0xe000e3f0
 8004b5c:	20000d14 	.word	0x20000d14
 8004b60:	e000ed0c 	.word	0xe000ed0c
 8004b64:	20000d18 	.word	0x20000d18

08004b68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08a      	sub	sp, #40	; 0x28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b70:	2300      	movs	r3, #0
 8004b72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b74:	f7fe fd9a 	bl	80036ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b78:	4b5b      	ldr	r3, [pc, #364]	; (8004ce8 <pvPortMalloc+0x180>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b80:	f000 f920 	bl	8004dc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b84:	4b59      	ldr	r3, [pc, #356]	; (8004cec <pvPortMalloc+0x184>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f040 8093 	bne.w	8004cb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01d      	beq.n	8004bd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004b98:	2208      	movs	r2, #8
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d014      	beq.n	8004bd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f023 0307 	bic.w	r3, r3, #7
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <pvPortMalloc+0x6c>
	__asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	617b      	str	r3, [r7, #20]
}
 8004bd0:	bf00      	nop
 8004bd2:	e7fe      	b.n	8004bd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d06e      	beq.n	8004cb8 <pvPortMalloc+0x150>
 8004bda:	4b45      	ldr	r3, [pc, #276]	; (8004cf0 <pvPortMalloc+0x188>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d869      	bhi.n	8004cb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004be4:	4b43      	ldr	r3, [pc, #268]	; (8004cf4 <pvPortMalloc+0x18c>)
 8004be6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004be8:	4b42      	ldr	r3, [pc, #264]	; (8004cf4 <pvPortMalloc+0x18c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bee:	e004      	b.n	8004bfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d903      	bls.n	8004c0c <pvPortMalloc+0xa4>
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1f1      	bne.n	8004bf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c0c:	4b36      	ldr	r3, [pc, #216]	; (8004ce8 <pvPortMalloc+0x180>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d050      	beq.n	8004cb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2208      	movs	r2, #8
 8004c1c:	4413      	add	r3, r2
 8004c1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	1ad2      	subs	r2, r2, r3
 8004c30:	2308      	movs	r3, #8
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d91f      	bls.n	8004c78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <pvPortMalloc+0xf8>
	__asm volatile
 8004c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	613b      	str	r3, [r7, #16]
}
 8004c5c:	bf00      	nop
 8004c5e:	e7fe      	b.n	8004c5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	1ad2      	subs	r2, r2, r3
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c72:	69b8      	ldr	r0, [r7, #24]
 8004c74:	f000 f908 	bl	8004e88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c78:	4b1d      	ldr	r3, [pc, #116]	; (8004cf0 <pvPortMalloc+0x188>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <pvPortMalloc+0x188>)
 8004c84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c86:	4b1a      	ldr	r3, [pc, #104]	; (8004cf0 <pvPortMalloc+0x188>)
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	4b1b      	ldr	r3, [pc, #108]	; (8004cf8 <pvPortMalloc+0x190>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d203      	bcs.n	8004c9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c92:	4b17      	ldr	r3, [pc, #92]	; (8004cf0 <pvPortMalloc+0x188>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a18      	ldr	r2, [pc, #96]	; (8004cf8 <pvPortMalloc+0x190>)
 8004c98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	4b13      	ldr	r3, [pc, #76]	; (8004cec <pvPortMalloc+0x184>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004cae:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <pvPortMalloc+0x194>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	4a11      	ldr	r2, [pc, #68]	; (8004cfc <pvPortMalloc+0x194>)
 8004cb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004cb8:	f7fe fd06 	bl	80036c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f003 0307 	and.w	r3, r3, #7
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <pvPortMalloc+0x174>
	__asm volatile
 8004cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	60fb      	str	r3, [r7, #12]
}
 8004cd8:	bf00      	nop
 8004cda:	e7fe      	b.n	8004cda <pvPortMalloc+0x172>
	return pvReturn;
 8004cdc:	69fb      	ldr	r3, [r7, #28]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3728      	adds	r7, #40	; 0x28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20004924 	.word	0x20004924
 8004cec:	20004938 	.word	0x20004938
 8004cf0:	20004928 	.word	0x20004928
 8004cf4:	2000491c 	.word	0x2000491c
 8004cf8:	2000492c 	.word	0x2000492c
 8004cfc:	20004930 	.word	0x20004930

08004d00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d04d      	beq.n	8004dae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d12:	2308      	movs	r3, #8
 8004d14:	425b      	negs	r3, r3
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	4413      	add	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	4b24      	ldr	r3, [pc, #144]	; (8004db8 <vPortFree+0xb8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10a      	bne.n	8004d44 <vPortFree+0x44>
	__asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	60fb      	str	r3, [r7, #12]
}
 8004d40:	bf00      	nop
 8004d42:	e7fe      	b.n	8004d42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <vPortFree+0x62>
	__asm volatile
 8004d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d50:	f383 8811 	msr	BASEPRI, r3
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	60bb      	str	r3, [r7, #8]
}
 8004d5e:	bf00      	nop
 8004d60:	e7fe      	b.n	8004d60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	4b14      	ldr	r3, [pc, #80]	; (8004db8 <vPortFree+0xb8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01e      	beq.n	8004dae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d11a      	bne.n	8004dae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	4b0e      	ldr	r3, [pc, #56]	; (8004db8 <vPortFree+0xb8>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	43db      	mvns	r3, r3
 8004d82:	401a      	ands	r2, r3
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d88:	f7fe fc90 	bl	80036ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <vPortFree+0xbc>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4413      	add	r3, r2
 8004d96:	4a09      	ldr	r2, [pc, #36]	; (8004dbc <vPortFree+0xbc>)
 8004d98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d9a:	6938      	ldr	r0, [r7, #16]
 8004d9c:	f000 f874 	bl	8004e88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004da0:	4b07      	ldr	r3, [pc, #28]	; (8004dc0 <vPortFree+0xc0>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3301      	adds	r3, #1
 8004da6:	4a06      	ldr	r2, [pc, #24]	; (8004dc0 <vPortFree+0xc0>)
 8004da8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004daa:	f7fe fc8d 	bl	80036c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004dae:	bf00      	nop
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20004938 	.word	0x20004938
 8004dbc:	20004928 	.word	0x20004928
 8004dc0:	20004934 	.word	0x20004934

08004dc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004dca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004dce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004dd0:	4b27      	ldr	r3, [pc, #156]	; (8004e70 <prvHeapInit+0xac>)
 8004dd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00c      	beq.n	8004df8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	3307      	adds	r3, #7
 8004de2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 0307 	bic.w	r3, r3, #7
 8004dea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	4a1f      	ldr	r2, [pc, #124]	; (8004e70 <prvHeapInit+0xac>)
 8004df4:	4413      	add	r3, r2
 8004df6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004dfc:	4a1d      	ldr	r2, [pc, #116]	; (8004e74 <prvHeapInit+0xb0>)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e02:	4b1c      	ldr	r3, [pc, #112]	; (8004e74 <prvHeapInit+0xb0>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e10:	2208      	movs	r2, #8
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	1a9b      	subs	r3, r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 0307 	bic.w	r3, r3, #7
 8004e1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4a15      	ldr	r2, [pc, #84]	; (8004e78 <prvHeapInit+0xb4>)
 8004e24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e26:	4b14      	ldr	r3, [pc, #80]	; (8004e78 <prvHeapInit+0xb4>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e2e:	4b12      	ldr	r3, [pc, #72]	; (8004e78 <prvHeapInit+0xb4>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	1ad2      	subs	r2, r2, r3
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e44:	4b0c      	ldr	r3, [pc, #48]	; (8004e78 <prvHeapInit+0xb4>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	4a0a      	ldr	r2, [pc, #40]	; (8004e7c <prvHeapInit+0xb8>)
 8004e52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	4a09      	ldr	r2, [pc, #36]	; (8004e80 <prvHeapInit+0xbc>)
 8004e5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e5c:	4b09      	ldr	r3, [pc, #36]	; (8004e84 <prvHeapInit+0xc0>)
 8004e5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004e62:	601a      	str	r2, [r3, #0]
}
 8004e64:	bf00      	nop
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	20000d1c 	.word	0x20000d1c
 8004e74:	2000491c 	.word	0x2000491c
 8004e78:	20004924 	.word	0x20004924
 8004e7c:	2000492c 	.word	0x2000492c
 8004e80:	20004928 	.word	0x20004928
 8004e84:	20004938 	.word	0x20004938

08004e88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e90:	4b28      	ldr	r3, [pc, #160]	; (8004f34 <prvInsertBlockIntoFreeList+0xac>)
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	e002      	b.n	8004e9c <prvInsertBlockIntoFreeList+0x14>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d8f7      	bhi.n	8004e96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d108      	bne.n	8004eca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	441a      	add	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	441a      	add	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d118      	bne.n	8004f10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	4b15      	ldr	r3, [pc, #84]	; (8004f38 <prvInsertBlockIntoFreeList+0xb0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d00d      	beq.n	8004f06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	441a      	add	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	e008      	b.n	8004f18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f06:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <prvInsertBlockIntoFreeList+0xb0>)
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	e003      	b.n	8004f18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d002      	beq.n	8004f26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f26:	bf00      	nop
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	2000491c 	.word	0x2000491c
 8004f38:	20004924 	.word	0x20004924

08004f3c <OLED_Refresh_Gram>:
#include "stdlib.h"
#include "oledfont.h"  

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8004f42:	2300      	movs	r3, #0
 8004f44:	71fb      	strb	r3, [r7, #7]
 8004f46:	e026      	b.n	8004f96 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8004f48:	79fb      	ldrb	r3, [r7, #7]
 8004f4a:	3b50      	subs	r3, #80	; 0x50
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2100      	movs	r1, #0
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 f82b 	bl	8004fac <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8004f56:	2100      	movs	r1, #0
 8004f58:	2000      	movs	r0, #0
 8004f5a:	f000 f827 	bl	8004fac <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8004f5e:	2100      	movs	r1, #0
 8004f60:	2010      	movs	r0, #16
 8004f62:	f000 f823 	bl	8004fac <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8004f66:	2300      	movs	r3, #0
 8004f68:	71bb      	strb	r3, [r7, #6]
 8004f6a:	e00d      	b.n	8004f88 <OLED_Refresh_Gram+0x4c>
 8004f6c:	79ba      	ldrb	r2, [r7, #6]
 8004f6e:	79fb      	ldrb	r3, [r7, #7]
 8004f70:	490d      	ldr	r1, [pc, #52]	; (8004fa8 <OLED_Refresh_Gram+0x6c>)
 8004f72:	00d2      	lsls	r2, r2, #3
 8004f74:	440a      	add	r2, r1
 8004f76:	4413      	add	r3, r2
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 f815 	bl	8004fac <OLED_WR_Byte>
 8004f82:	79bb      	ldrb	r3, [r7, #6]
 8004f84:	3301      	adds	r3, #1
 8004f86:	71bb      	strb	r3, [r7, #6]
 8004f88:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	daed      	bge.n	8004f6c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8004f90:	79fb      	ldrb	r3, [r7, #7]
 8004f92:	3301      	adds	r3, #1
 8004f94:	71fb      	strb	r3, [r7, #7]
 8004f96:	79fb      	ldrb	r3, [r7, #7]
 8004f98:	2b07      	cmp	r3, #7
 8004f9a:	d9d5      	bls.n	8004f48 <OLED_Refresh_Gram+0xc>
	}   
}
 8004f9c:	bf00      	nop
 8004f9e:	bf00      	nop
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	200049d4 	.word	0x200049d4

08004fac <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	460a      	mov	r2, r1
 8004fb6:	71fb      	strb	r3, [r7, #7]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8004fbc:	79bb      	ldrb	r3, [r7, #6]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d006      	beq.n	8004fd0 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004fc8:	481c      	ldr	r0, [pc, #112]	; (800503c <OLED_WR_Byte+0x90>)
 8004fca:	f7fc f8a5 	bl	8001118 <HAL_GPIO_WritePin>
 8004fce:	e005      	b.n	8004fdc <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004fd6:	4819      	ldr	r0, [pc, #100]	; (800503c <OLED_WR_Byte+0x90>)
 8004fd8:	f7fc f89e 	bl	8001118 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8004fdc:	2300      	movs	r3, #0
 8004fde:	73fb      	strb	r3, [r7, #15]
 8004fe0:	e01e      	b.n	8005020 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	2120      	movs	r1, #32
 8004fe6:	4815      	ldr	r0, [pc, #84]	; (800503c <OLED_WR_Byte+0x90>)
 8004fe8:	f7fc f896 	bl	8001118 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8004fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	da05      	bge.n	8005000 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	2140      	movs	r1, #64	; 0x40
 8004ff8:	4810      	ldr	r0, [pc, #64]	; (800503c <OLED_WR_Byte+0x90>)
 8004ffa:	f7fc f88d 	bl	8001118 <HAL_GPIO_WritePin>
 8004ffe:	e004      	b.n	800500a <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8005000:	2200      	movs	r2, #0
 8005002:	2140      	movs	r1, #64	; 0x40
 8005004:	480d      	ldr	r0, [pc, #52]	; (800503c <OLED_WR_Byte+0x90>)
 8005006:	f7fc f887 	bl	8001118 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800500a:	2201      	movs	r2, #1
 800500c:	2120      	movs	r1, #32
 800500e:	480b      	ldr	r0, [pc, #44]	; (800503c <OLED_WR_Byte+0x90>)
 8005010:	f7fc f882 	bl	8001118 <HAL_GPIO_WritePin>
		dat<<=1;   
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800501a:	7bfb      	ldrb	r3, [r7, #15]
 800501c:	3301      	adds	r3, #1
 800501e:	73fb      	strb	r3, [r7, #15]
 8005020:	7bfb      	ldrb	r3, [r7, #15]
 8005022:	2b07      	cmp	r3, #7
 8005024:	d9dd      	bls.n	8004fe2 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8005026:	2201      	movs	r2, #1
 8005028:	f44f 7180 	mov.w	r1, #256	; 0x100
 800502c:	4803      	ldr	r0, [pc, #12]	; (800503c <OLED_WR_Byte+0x90>)
 800502e:	f7fc f873 	bl	8001118 <HAL_GPIO_WritePin>
} 
 8005032:	bf00      	nop
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40021000 	.word	0x40021000

08005040 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8005046:	2300      	movs	r3, #0
 8005048:	71fb      	strb	r3, [r7, #7]
 800504a:	e014      	b.n	8005076 <OLED_Clear+0x36>
 800504c:	2300      	movs	r3, #0
 800504e:	71bb      	strb	r3, [r7, #6]
 8005050:	e00a      	b.n	8005068 <OLED_Clear+0x28>
 8005052:	79ba      	ldrb	r2, [r7, #6]
 8005054:	79fb      	ldrb	r3, [r7, #7]
 8005056:	490c      	ldr	r1, [pc, #48]	; (8005088 <OLED_Clear+0x48>)
 8005058:	00d2      	lsls	r2, r2, #3
 800505a:	440a      	add	r2, r1
 800505c:	4413      	add	r3, r2
 800505e:	2200      	movs	r2, #0
 8005060:	701a      	strb	r2, [r3, #0]
 8005062:	79bb      	ldrb	r3, [r7, #6]
 8005064:	3301      	adds	r3, #1
 8005066:	71bb      	strb	r3, [r7, #6]
 8005068:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800506c:	2b00      	cmp	r3, #0
 800506e:	daf0      	bge.n	8005052 <OLED_Clear+0x12>
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	3301      	adds	r3, #1
 8005074:	71fb      	strb	r3, [r7, #7]
 8005076:	79fb      	ldrb	r3, [r7, #7]
 8005078:	2b07      	cmp	r3, #7
 800507a:	d9e7      	bls.n	800504c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800507c:	f7ff ff5e 	bl	8004f3c <OLED_Refresh_Gram>
}
 8005080:	bf00      	nop
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	200049d4 	.word	0x200049d4

0800508c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	71fb      	strb	r3, [r7, #7]
 8005096:	460b      	mov	r3, r1
 8005098:	71bb      	strb	r3, [r7, #6]
 800509a:	4613      	mov	r3, r2
 800509c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800509e:	2300      	movs	r3, #0
 80050a0:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80050a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	db41      	blt.n	800512e <OLED_DrawPoint+0xa2>
 80050aa:	79bb      	ldrb	r3, [r7, #6]
 80050ac:	2b3f      	cmp	r3, #63	; 0x3f
 80050ae:	d83e      	bhi.n	800512e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80050b0:	79bb      	ldrb	r3, [r7, #6]
 80050b2:	08db      	lsrs	r3, r3, #3
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	f1c3 0307 	rsb	r3, r3, #7
 80050ba:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 80050bc:	79bb      	ldrb	r3, [r7, #6]
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 80050c4:	7b7b      	ldrb	r3, [r7, #13]
 80050c6:	f1c3 0307 	rsb	r3, r3, #7
 80050ca:	2201      	movs	r2, #1
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80050d2:	797b      	ldrb	r3, [r7, #5]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d012      	beq.n	80050fe <OLED_DrawPoint+0x72>
 80050d8:	79fa      	ldrb	r2, [r7, #7]
 80050da:	7bbb      	ldrb	r3, [r7, #14]
 80050dc:	4917      	ldr	r1, [pc, #92]	; (800513c <OLED_DrawPoint+0xb0>)
 80050de:	00d2      	lsls	r2, r2, #3
 80050e0:	440a      	add	r2, r1
 80050e2:	4413      	add	r3, r2
 80050e4:	7818      	ldrb	r0, [r3, #0]
 80050e6:	79fa      	ldrb	r2, [r7, #7]
 80050e8:	7bbb      	ldrb	r3, [r7, #14]
 80050ea:	7bf9      	ldrb	r1, [r7, #15]
 80050ec:	4301      	orrs	r1, r0
 80050ee:	b2c8      	uxtb	r0, r1
 80050f0:	4912      	ldr	r1, [pc, #72]	; (800513c <OLED_DrawPoint+0xb0>)
 80050f2:	00d2      	lsls	r2, r2, #3
 80050f4:	440a      	add	r2, r1
 80050f6:	4413      	add	r3, r2
 80050f8:	4602      	mov	r2, r0
 80050fa:	701a      	strb	r2, [r3, #0]
 80050fc:	e018      	b.n	8005130 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 80050fe:	79fa      	ldrb	r2, [r7, #7]
 8005100:	7bbb      	ldrb	r3, [r7, #14]
 8005102:	490e      	ldr	r1, [pc, #56]	; (800513c <OLED_DrawPoint+0xb0>)
 8005104:	00d2      	lsls	r2, r2, #3
 8005106:	440a      	add	r2, r1
 8005108:	4413      	add	r3, r2
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	b25a      	sxtb	r2, r3
 800510e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005112:	43db      	mvns	r3, r3
 8005114:	b25b      	sxtb	r3, r3
 8005116:	4013      	ands	r3, r2
 8005118:	b259      	sxtb	r1, r3
 800511a:	79fa      	ldrb	r2, [r7, #7]
 800511c:	7bbb      	ldrb	r3, [r7, #14]
 800511e:	b2c8      	uxtb	r0, r1
 8005120:	4906      	ldr	r1, [pc, #24]	; (800513c <OLED_DrawPoint+0xb0>)
 8005122:	00d2      	lsls	r2, r2, #3
 8005124:	440a      	add	r2, r1
 8005126:	4413      	add	r3, r2
 8005128:	4602      	mov	r2, r0
 800512a:	701a      	strb	r2, [r3, #0]
 800512c:	e000      	b.n	8005130 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800512e:	bf00      	nop
}
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	200049d4 	.word	0x200049d4

08005140 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8005140:	b590      	push	{r4, r7, lr}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	4604      	mov	r4, r0
 8005148:	4608      	mov	r0, r1
 800514a:	4611      	mov	r1, r2
 800514c:	461a      	mov	r2, r3
 800514e:	4623      	mov	r3, r4
 8005150:	71fb      	strb	r3, [r7, #7]
 8005152:	4603      	mov	r3, r0
 8005154:	71bb      	strb	r3, [r7, #6]
 8005156:	460b      	mov	r3, r1
 8005158:	717b      	strb	r3, [r7, #5]
 800515a:	4613      	mov	r3, r2
 800515c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800515e:	79bb      	ldrb	r3, [r7, #6]
 8005160:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8005162:	797b      	ldrb	r3, [r7, #5]
 8005164:	3b20      	subs	r3, #32
 8005166:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8005168:	2300      	movs	r3, #0
 800516a:	73bb      	strb	r3, [r7, #14]
 800516c:	e04d      	b.n	800520a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800516e:	793b      	ldrb	r3, [r7, #4]
 8005170:	2b0c      	cmp	r3, #12
 8005172:	d10b      	bne.n	800518c <OLED_ShowChar+0x4c>
 8005174:	797a      	ldrb	r2, [r7, #5]
 8005176:	7bb9      	ldrb	r1, [r7, #14]
 8005178:	4828      	ldr	r0, [pc, #160]	; (800521c <OLED_ShowChar+0xdc>)
 800517a:	4613      	mov	r3, r2
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	4413      	add	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4403      	add	r3, r0
 8005184:	440b      	add	r3, r1
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	73fb      	strb	r3, [r7, #15]
 800518a:	e007      	b.n	800519c <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800518c:	797a      	ldrb	r2, [r7, #5]
 800518e:	7bbb      	ldrb	r3, [r7, #14]
 8005190:	4923      	ldr	r1, [pc, #140]	; (8005220 <OLED_ShowChar+0xe0>)
 8005192:	0112      	lsls	r2, r2, #4
 8005194:	440a      	add	r2, r1
 8005196:	4413      	add	r3, r2
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800519c:	2300      	movs	r3, #0
 800519e:	737b      	strb	r3, [r7, #13]
 80051a0:	e02d      	b.n	80051fe <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80051a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	da07      	bge.n	80051ba <OLED_ShowChar+0x7a>
 80051aa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80051ae:	79b9      	ldrb	r1, [r7, #6]
 80051b0:	79fb      	ldrb	r3, [r7, #7]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7ff ff6a 	bl	800508c <OLED_DrawPoint>
 80051b8:	e00c      	b.n	80051d4 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 80051ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	bf0c      	ite	eq
 80051c2:	2301      	moveq	r3, #1
 80051c4:	2300      	movne	r3, #0
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	461a      	mov	r2, r3
 80051ca:	79b9      	ldrb	r1, [r7, #6]
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff ff5c 	bl	800508c <OLED_DrawPoint>
			temp<<=1;
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	73fb      	strb	r3, [r7, #15]
			y++;
 80051da:	79bb      	ldrb	r3, [r7, #6]
 80051dc:	3301      	adds	r3, #1
 80051de:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80051e0:	79ba      	ldrb	r2, [r7, #6]
 80051e2:	7b3b      	ldrb	r3, [r7, #12]
 80051e4:	1ad2      	subs	r2, r2, r3
 80051e6:	793b      	ldrb	r3, [r7, #4]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d105      	bne.n	80051f8 <OLED_ShowChar+0xb8>
			{
				y=y0;
 80051ec:	7b3b      	ldrb	r3, [r7, #12]
 80051ee:	71bb      	strb	r3, [r7, #6]
				x++;
 80051f0:	79fb      	ldrb	r3, [r7, #7]
 80051f2:	3301      	adds	r3, #1
 80051f4:	71fb      	strb	r3, [r7, #7]
				break;
 80051f6:	e005      	b.n	8005204 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80051f8:	7b7b      	ldrb	r3, [r7, #13]
 80051fa:	3301      	adds	r3, #1
 80051fc:	737b      	strb	r3, [r7, #13]
 80051fe:	7b7b      	ldrb	r3, [r7, #13]
 8005200:	2b07      	cmp	r3, #7
 8005202:	d9ce      	bls.n	80051a2 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8005204:	7bbb      	ldrb	r3, [r7, #14]
 8005206:	3301      	adds	r3, #1
 8005208:	73bb      	strb	r3, [r7, #14]
 800520a:	7bba      	ldrb	r2, [r7, #14]
 800520c:	793b      	ldrb	r3, [r7, #4]
 800520e:	429a      	cmp	r2, r3
 8005210:	d3ad      	bcc.n	800516e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8005212:	bf00      	nop
 8005214:	bf00      	nop
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	bd90      	pop	{r4, r7, pc}
 800521c:	080054f4 	.word	0x080054f4
 8005220:	08005968 	.word	0x08005968

08005224 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af02      	add	r7, sp, #8
 800522a:	4603      	mov	r3, r0
 800522c:	603a      	str	r2, [r7, #0]
 800522e:	71fb      	strb	r3, [r7, #7]
 8005230:	460b      	mov	r3, r1
 8005232:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8005234:	e01f      	b.n	8005276 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8005236:	79fb      	ldrb	r3, [r7, #7]
 8005238:	2b7a      	cmp	r3, #122	; 0x7a
 800523a:	d904      	bls.n	8005246 <OLED_ShowString+0x22>
 800523c:	2300      	movs	r3, #0
 800523e:	71fb      	strb	r3, [r7, #7]
 8005240:	79bb      	ldrb	r3, [r7, #6]
 8005242:	3310      	adds	r3, #16
 8005244:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8005246:	79bb      	ldrb	r3, [r7, #6]
 8005248:	2b3a      	cmp	r3, #58	; 0x3a
 800524a:	d905      	bls.n	8005258 <OLED_ShowString+0x34>
 800524c:	2300      	movs	r3, #0
 800524e:	71fb      	strb	r3, [r7, #7]
 8005250:	79fb      	ldrb	r3, [r7, #7]
 8005252:	71bb      	strb	r3, [r7, #6]
 8005254:	f7ff fef4 	bl	8005040 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	781a      	ldrb	r2, [r3, #0]
 800525c:	79b9      	ldrb	r1, [r7, #6]
 800525e:	79f8      	ldrb	r0, [r7, #7]
 8005260:	2301      	movs	r3, #1
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	230c      	movs	r3, #12
 8005266:	f7ff ff6b 	bl	8005140 <OLED_ShowChar>
        x+=8;
 800526a:	79fb      	ldrb	r3, [r7, #7]
 800526c:	3308      	adds	r3, #8
 800526e:	71fb      	strb	r3, [r7, #7]
        p++;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	3301      	adds	r3, #1
 8005274:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1db      	bne.n	8005236 <OLED_ShowString+0x12>
    }  
}	 
 800527e:	bf00      	nop
 8005280:	bf00      	nop
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <OLED_Init>:

void OLED_Init(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800528c:	f7fb ff78 	bl	8001180 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8005290:	4b41      	ldr	r3, [pc, #260]	; (8005398 <OLED_Init+0x110>)
 8005292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005294:	4a40      	ldr	r2, [pc, #256]	; (8005398 <OLED_Init+0x110>)
 8005296:	f023 0301 	bic.w	r3, r3, #1
 800529a:	6713      	str	r3, [r2, #112]	; 0x70
 800529c:	4b3e      	ldr	r3, [pc, #248]	; (8005398 <OLED_Init+0x110>)
 800529e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a0:	4a3d      	ldr	r2, [pc, #244]	; (8005398 <OLED_Init+0x110>)
 80052a2:	f023 0304 	bic.w	r3, r3, #4
 80052a6:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80052a8:	f7fb ff7e 	bl	80011a8 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80052ac:	2200      	movs	r2, #0
 80052ae:	2180      	movs	r1, #128	; 0x80
 80052b0:	483a      	ldr	r0, [pc, #232]	; (800539c <OLED_Init+0x114>)
 80052b2:	f7fb ff31 	bl	8001118 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80052b6:	2064      	movs	r0, #100	; 0x64
 80052b8:	f7fb fc88 	bl	8000bcc <HAL_Delay>
	OLED_RST_Set();
 80052bc:	2201      	movs	r2, #1
 80052be:	2180      	movs	r1, #128	; 0x80
 80052c0:	4836      	ldr	r0, [pc, #216]	; (800539c <OLED_Init+0x114>)
 80052c2:	f7fb ff29 	bl	8001118 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 80052c6:	2100      	movs	r1, #0
 80052c8:	20ae      	movs	r0, #174	; 0xae
 80052ca:	f7ff fe6f 	bl	8004fac <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 80052ce:	2100      	movs	r1, #0
 80052d0:	20d5      	movs	r0, #213	; 0xd5
 80052d2:	f7ff fe6b 	bl	8004fac <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80052d6:	2100      	movs	r1, #0
 80052d8:	2050      	movs	r0, #80	; 0x50
 80052da:	f7ff fe67 	bl	8004fac <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80052de:	2100      	movs	r1, #0
 80052e0:	20a8      	movs	r0, #168	; 0xa8
 80052e2:	f7ff fe63 	bl	8004fac <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 80052e6:	2100      	movs	r1, #0
 80052e8:	203f      	movs	r0, #63	; 0x3f
 80052ea:	f7ff fe5f 	bl	8004fac <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80052ee:	2100      	movs	r1, #0
 80052f0:	20d3      	movs	r0, #211	; 0xd3
 80052f2:	f7ff fe5b 	bl	8004fac <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 80052f6:	2100      	movs	r1, #0
 80052f8:	2000      	movs	r0, #0
 80052fa:	f7ff fe57 	bl	8004fac <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 80052fe:	2100      	movs	r1, #0
 8005300:	2040      	movs	r0, #64	; 0x40
 8005302:	f7ff fe53 	bl	8004fac <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8005306:	2100      	movs	r1, #0
 8005308:	208d      	movs	r0, #141	; 0x8d
 800530a:	f7ff fe4f 	bl	8004fac <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800530e:	2100      	movs	r1, #0
 8005310:	2014      	movs	r0, #20
 8005312:	f7ff fe4b 	bl	8004fac <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8005316:	2100      	movs	r1, #0
 8005318:	2020      	movs	r0, #32
 800531a:	f7ff fe47 	bl	8004fac <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800531e:	2100      	movs	r1, #0
 8005320:	2002      	movs	r0, #2
 8005322:	f7ff fe43 	bl	8004fac <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8005326:	2100      	movs	r1, #0
 8005328:	20a1      	movs	r0, #161	; 0xa1
 800532a:	f7ff fe3f 	bl	8004fac <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800532e:	2100      	movs	r1, #0
 8005330:	20c0      	movs	r0, #192	; 0xc0
 8005332:	f7ff fe3b 	bl	8004fac <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8005336:	2100      	movs	r1, #0
 8005338:	20da      	movs	r0, #218	; 0xda
 800533a:	f7ff fe37 	bl	8004fac <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800533e:	2100      	movs	r1, #0
 8005340:	2012      	movs	r0, #18
 8005342:	f7ff fe33 	bl	8004fac <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8005346:	2100      	movs	r1, #0
 8005348:	2081      	movs	r0, #129	; 0x81
 800534a:	f7ff fe2f 	bl	8004fac <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800534e:	2100      	movs	r1, #0
 8005350:	20ef      	movs	r0, #239	; 0xef
 8005352:	f7ff fe2b 	bl	8004fac <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8005356:	2100      	movs	r1, #0
 8005358:	20d9      	movs	r0, #217	; 0xd9
 800535a:	f7ff fe27 	bl	8004fac <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800535e:	2100      	movs	r1, #0
 8005360:	20f1      	movs	r0, #241	; 0xf1
 8005362:	f7ff fe23 	bl	8004fac <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8005366:	2100      	movs	r1, #0
 8005368:	20db      	movs	r0, #219	; 0xdb
 800536a:	f7ff fe1f 	bl	8004fac <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800536e:	2100      	movs	r1, #0
 8005370:	2030      	movs	r0, #48	; 0x30
 8005372:	f7ff fe1b 	bl	8004fac <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8005376:	2100      	movs	r1, #0
 8005378:	20a4      	movs	r0, #164	; 0xa4
 800537a:	f7ff fe17 	bl	8004fac <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800537e:	2100      	movs	r1, #0
 8005380:	20a6      	movs	r0, #166	; 0xa6
 8005382:	f7ff fe13 	bl	8004fac <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8005386:	2100      	movs	r1, #0
 8005388:	20af      	movs	r0, #175	; 0xaf
 800538a:	f7ff fe0f 	bl	8004fac <OLED_WR_Byte>
	OLED_Clear(); 
 800538e:	f7ff fe57 	bl	8005040 <OLED_Clear>
 8005392:	bf00      	nop
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	40023800 	.word	0x40023800
 800539c:	40021000 	.word	0x40021000

080053a0 <__libc_init_array>:
 80053a0:	b570      	push	{r4, r5, r6, lr}
 80053a2:	4d0d      	ldr	r5, [pc, #52]	; (80053d8 <__libc_init_array+0x38>)
 80053a4:	4c0d      	ldr	r4, [pc, #52]	; (80053dc <__libc_init_array+0x3c>)
 80053a6:	1b64      	subs	r4, r4, r5
 80053a8:	10a4      	asrs	r4, r4, #2
 80053aa:	2600      	movs	r6, #0
 80053ac:	42a6      	cmp	r6, r4
 80053ae:	d109      	bne.n	80053c4 <__libc_init_array+0x24>
 80053b0:	4d0b      	ldr	r5, [pc, #44]	; (80053e0 <__libc_init_array+0x40>)
 80053b2:	4c0c      	ldr	r4, [pc, #48]	; (80053e4 <__libc_init_array+0x44>)
 80053b4:	f000 f82e 	bl	8005414 <_init>
 80053b8:	1b64      	subs	r4, r4, r5
 80053ba:	10a4      	asrs	r4, r4, #2
 80053bc:	2600      	movs	r6, #0
 80053be:	42a6      	cmp	r6, r4
 80053c0:	d105      	bne.n	80053ce <__libc_init_array+0x2e>
 80053c2:	bd70      	pop	{r4, r5, r6, pc}
 80053c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c8:	4798      	blx	r3
 80053ca:	3601      	adds	r6, #1
 80053cc:	e7ee      	b.n	80053ac <__libc_init_array+0xc>
 80053ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80053d2:	4798      	blx	r3
 80053d4:	3601      	adds	r6, #1
 80053d6:	e7f2      	b.n	80053be <__libc_init_array+0x1e>
 80053d8:	08005f60 	.word	0x08005f60
 80053dc:	08005f60 	.word	0x08005f60
 80053e0:	08005f60 	.word	0x08005f60
 80053e4:	08005f64 	.word	0x08005f64

080053e8 <memcpy>:
 80053e8:	440a      	add	r2, r1
 80053ea:	4291      	cmp	r1, r2
 80053ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80053f0:	d100      	bne.n	80053f4 <memcpy+0xc>
 80053f2:	4770      	bx	lr
 80053f4:	b510      	push	{r4, lr}
 80053f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053fe:	4291      	cmp	r1, r2
 8005400:	d1f9      	bne.n	80053f6 <memcpy+0xe>
 8005402:	bd10      	pop	{r4, pc}

08005404 <memset>:
 8005404:	4402      	add	r2, r0
 8005406:	4603      	mov	r3, r0
 8005408:	4293      	cmp	r3, r2
 800540a:	d100      	bne.n	800540e <memset+0xa>
 800540c:	4770      	bx	lr
 800540e:	f803 1b01 	strb.w	r1, [r3], #1
 8005412:	e7f9      	b.n	8005408 <memset+0x4>

08005414 <_init>:
 8005414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005416:	bf00      	nop
 8005418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541a:	bc08      	pop	{r3}
 800541c:	469e      	mov	lr, r3
 800541e:	4770      	bx	lr

08005420 <_fini>:
 8005420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005422:	bf00      	nop
 8005424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005426:	bc08      	pop	{r3}
 8005428:	469e      	mov	lr, r3
 800542a:	4770      	bx	lr
