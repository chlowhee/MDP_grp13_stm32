
MDP_grp13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be0  08006838  08006838  00016838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007418  08007418  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007418  08007418  00017418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007420  08007420  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007420  08007420  00017420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007424  08007424  00017424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004e78  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004eec  20004eec  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017f71  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000310e  00000000  00000000  00038015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  0003b128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001188  00000000  00000000  0003c3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000035ef  00000000  00000000  0003d580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013835  00000000  00000000  00040b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2ac8  00000000  00000000  000543a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00126e6c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005254  00000000  00000000  00126ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006820 	.word	0x08006820

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006820 	.word	0x08006820

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fdba 	bl	80010e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f854 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 fa30 	bl	80009d8 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000578:	f000 f9a2 	bl	80008c0 <MX_TIM8_Init>
  MX_TIM2_Init();
 800057c:	f000 f94c 	bl	8000818 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000580:	f000 f8aa 	bl	80006d8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000584:	f002 fd6c 	bl	8003060 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LED_Toggle */
  LED_ToggleHandle = osThreadNew(StartDefaultTask, NULL, &LED_Toggle_attributes);
 8000588:	4a15      	ldr	r2, [pc, #84]	; (80005e0 <main+0x78>)
 800058a:	2100      	movs	r1, #0
 800058c:	4815      	ldr	r0, [pc, #84]	; (80005e4 <main+0x7c>)
 800058e:	f002 fdb1 	bl	80030f4 <osThreadNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a14      	ldr	r2, [pc, #80]	; (80005e8 <main+0x80>)
 8000596:	6013      	str	r3, [r2, #0]

  /* creation of OLED */
  OLEDHandle = osThreadNew(show, NULL, &OLED_attributes);
 8000598:	4a14      	ldr	r2, [pc, #80]	; (80005ec <main+0x84>)
 800059a:	2100      	movs	r1, #0
 800059c:	4814      	ldr	r0, [pc, #80]	; (80005f0 <main+0x88>)
 800059e:	f002 fda9 	bl	80030f4 <osThreadNew>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <main+0x8c>)
 80005a6:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 80005a8:	4a13      	ldr	r2, [pc, #76]	; (80005f8 <main+0x90>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	4813      	ldr	r0, [pc, #76]	; (80005fc <main+0x94>)
 80005ae:	f002 fda1 	bl	80030f4 <osThreadNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a12      	ldr	r2, [pc, #72]	; (8000600 <main+0x98>)
 80005b6:	6013      	str	r3, [r2, #0]

  /* creation of MotorEncoder_Ta */
  MotorEncoder_TaHandle = osThreadNew(encoderMotor, NULL, &MotorEncoder_Ta_attributes);
 80005b8:	4a12      	ldr	r2, [pc, #72]	; (8000604 <main+0x9c>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	4812      	ldr	r0, [pc, #72]	; (8000608 <main+0xa0>)
 80005be:	f002 fd99 	bl	80030f4 <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a11      	ldr	r2, [pc, #68]	; (800060c <main+0xa4>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* creation of servo_Task */
  servo_TaskHandle = osThreadNew(servo, NULL, &servo_Task_attributes);
 80005c8:	4a11      	ldr	r2, [pc, #68]	; (8000610 <main+0xa8>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	4811      	ldr	r0, [pc, #68]	; (8000614 <main+0xac>)
 80005ce:	f002 fd91 	bl	80030f4 <osThreadNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a10      	ldr	r2, [pc, #64]	; (8000618 <main+0xb0>)
 80005d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d8:	f002 fd66 	bl	80030a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <main+0x74>
 80005de:	bf00      	nop
 80005e0:	080068bc 	.word	0x080068bc
 80005e4:	08000ac5 	.word	0x08000ac5
 80005e8:	200049fc 	.word	0x200049fc
 80005ec:	080068e0 	.word	0x080068e0
 80005f0:	08000ae5 	.word	0x08000ae5
 80005f4:	200049f8 	.word	0x200049f8
 80005f8:	08006904 	.word	0x08006904
 80005fc:	08000b29 	.word	0x08000b29
 8000600:	20004a00 	.word	0x20004a00
 8000604:	08006928 	.word	0x08006928
 8000608:	08000c19 	.word	0x08000c19
 800060c:	200049f4 	.word	0x200049f4
 8000610:	0800694c 	.word	0x0800694c
 8000614:	08000d09 	.word	0x08000d09
 8000618:	20004a94 	.word	0x20004a94

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f005 fcd0 	bl	8005fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <SystemClock_Config+0xb4>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <SystemClock_Config+0xb4>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <SystemClock_Config+0xb4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <SystemClock_Config+0xb8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a1b      	ldr	r2, [pc, #108]	; (80006d4 <SystemClock_Config+0xb8>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <SystemClock_Config+0xb8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000684:	2300      	movs	r3, #0
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f001 f89d 	bl	80017cc <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000698:	f000 fb52 	bl	8000d40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fb00 	bl	8001cbc <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006c2:	f000 fb3d 	bl	8000d40 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	; 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b096      	sub	sp, #88	; 0x58
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
 8000706:	615a      	str	r2, [r3, #20]
 8000708:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2220      	movs	r2, #32
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f005 fc5d 	bl	8005fd0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000716:	4b3e      	ldr	r3, [pc, #248]	; (8000810 <MX_TIM1_Init+0x138>)
 8000718:	4a3e      	ldr	r2, [pc, #248]	; (8000814 <MX_TIM1_Init+0x13c>)
 800071a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320;
 800071c:	4b3c      	ldr	r3, [pc, #240]	; (8000810 <MX_TIM1_Init+0x138>)
 800071e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000722:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000724:	4b3a      	ldr	r3, [pc, #232]	; (8000810 <MX_TIM1_Init+0x138>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800072a:	4b39      	ldr	r3, [pc, #228]	; (8000810 <MX_TIM1_Init+0x138>)
 800072c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000730:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000732:	4b37      	ldr	r3, [pc, #220]	; (8000810 <MX_TIM1_Init+0x138>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000738:	4b35      	ldr	r3, [pc, #212]	; (8000810 <MX_TIM1_Init+0x138>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800073e:	4b34      	ldr	r3, [pc, #208]	; (8000810 <MX_TIM1_Init+0x138>)
 8000740:	2280      	movs	r2, #128	; 0x80
 8000742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000744:	4832      	ldr	r0, [pc, #200]	; (8000810 <MX_TIM1_Init+0x138>)
 8000746:	f001 fc55 	bl	8001ff4 <HAL_TIM_Base_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000750:	f000 faf6 	bl	8000d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000758:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800075a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800075e:	4619      	mov	r1, r3
 8000760:	482b      	ldr	r0, [pc, #172]	; (8000810 <MX_TIM1_Init+0x138>)
 8000762:	f001 ffa3 	bl	80026ac <HAL_TIM_ConfigClockSource>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800076c:	f000 fae8 	bl	8000d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000770:	4827      	ldr	r0, [pc, #156]	; (8000810 <MX_TIM1_Init+0x138>)
 8000772:	f001 fc8e 	bl	8002092 <HAL_TIM_PWM_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800077c:	f000 fae0 	bl	8000d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000780:	2300      	movs	r3, #0
 8000782:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000788:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800078c:	4619      	mov	r1, r3
 800078e:	4820      	ldr	r0, [pc, #128]	; (8000810 <MX_TIM1_Init+0x138>)
 8000790:	f002 fb64 	bl	8002e5c <HAL_TIMEx_MasterConfigSynchronization>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800079a:	f000 fad1 	bl	8000d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800079e:	2360      	movs	r3, #96	; 0x60
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ae:	2300      	movs	r3, #0
 80007b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007b2:	2300      	movs	r3, #0
 80007b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ba:	220c      	movs	r2, #12
 80007bc:	4619      	mov	r1, r3
 80007be:	4814      	ldr	r0, [pc, #80]	; (8000810 <MX_TIM1_Init+0x138>)
 80007c0:	f001 feb2 	bl	8002528 <HAL_TIM_PWM_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80007ca:	f000 fab9 	bl	8000d40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	4619      	mov	r1, r3
 80007f0:	4807      	ldr	r0, [pc, #28]	; (8000810 <MX_TIM1_Init+0x138>)
 80007f2:	f002 fbaf 	bl	8002f54 <HAL_TIMEx_ConfigBreakDeadTime>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80007fc:	f000 faa0 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000800:	4803      	ldr	r0, [pc, #12]	; (8000810 <MX_TIM1_Init+0x138>)
 8000802:	f000 fb9f 	bl	8000f44 <HAL_TIM_MspPostInit>

}
 8000806:	bf00      	nop
 8000808:	3758      	adds	r7, #88	; 0x58
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20004a04 	.word	0x20004a04
 8000814:	40010000 	.word	0x40010000

08000818 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	; 0x30
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	2224      	movs	r2, #36	; 0x24
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f005 fbd2 	bl	8005fd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000834:	4b21      	ldr	r3, [pc, #132]	; (80008bc <MX_TIM2_Init+0xa4>)
 8000836:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800083a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <MX_TIM2_Init+0xa4>)
 800083e:	2200      	movs	r2, #0
 8000840:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000842:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <MX_TIM2_Init+0xa4>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <MX_TIM2_Init+0xa4>)
 800084a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800084e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000850:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <MX_TIM2_Init+0xa4>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <MX_TIM2_Init+0xa4>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800085c:	2303      	movs	r3, #3
 800085e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000864:	2301      	movs	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800086c:	230a      	movs	r3, #10
 800086e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000874:	2301      	movs	r3, #1
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800087c:	230a      	movs	r3, #10
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4619      	mov	r1, r3
 8000886:	480d      	ldr	r0, [pc, #52]	; (80008bc <MX_TIM2_Init+0xa4>)
 8000888:	f001 fd1a 	bl	80022c0 <HAL_TIM_Encoder_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000892:	f000 fa55 	bl	8000d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	4619      	mov	r1, r3
 80008a2:	4806      	ldr	r0, [pc, #24]	; (80008bc <MX_TIM2_Init+0xa4>)
 80008a4:	f002 fada 	bl	8002e5c <HAL_TIMEx_MasterConfigSynchronization>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80008ae:	f000 fa47 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	3730      	adds	r7, #48	; 0x30
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20004a4c 	.word	0x20004a4c

080008c0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b092      	sub	sp, #72	; 0x48
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
 80008e0:	615a      	str	r2, [r3, #20]
 80008e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2220      	movs	r2, #32
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f005 fb70 	bl	8005fd0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80008f0:	4b37      	ldr	r3, [pc, #220]	; (80009d0 <MX_TIM8_Init+0x110>)
 80008f2:	4a38      	ldr	r2, [pc, #224]	; (80009d4 <MX_TIM8_Init+0x114>)
 80008f4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80008f6:	4b36      	ldr	r3, [pc, #216]	; (80009d0 <MX_TIM8_Init+0x110>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fc:	4b34      	ldr	r3, [pc, #208]	; (80009d0 <MX_TIM8_Init+0x110>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8000902:	4b33      	ldr	r3, [pc, #204]	; (80009d0 <MX_TIM8_Init+0x110>)
 8000904:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000908:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090a:	4b31      	ldr	r3, [pc, #196]	; (80009d0 <MX_TIM8_Init+0x110>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000910:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <MX_TIM8_Init+0x110>)
 8000912:	2200      	movs	r2, #0
 8000914:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000916:	4b2e      	ldr	r3, [pc, #184]	; (80009d0 <MX_TIM8_Init+0x110>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800091c:	482c      	ldr	r0, [pc, #176]	; (80009d0 <MX_TIM8_Init+0x110>)
 800091e:	f001 fbb8 	bl	8002092 <HAL_TIM_PWM_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000928:	f000 fa0a 	bl	8000d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092c:	2300      	movs	r3, #0
 800092e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000934:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000938:	4619      	mov	r1, r3
 800093a:	4825      	ldr	r0, [pc, #148]	; (80009d0 <MX_TIM8_Init+0x110>)
 800093c:	f002 fa8e 	bl	8002e5c <HAL_TIMEx_MasterConfigSynchronization>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000946:	f000 f9fb 	bl	8000d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800094a:	2360      	movs	r3, #96	; 0x60
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000952:	2300      	movs	r3, #0
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000956:	2300      	movs	r3, #0
 8000958:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800095a:	2300      	movs	r3, #0
 800095c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800095e:	2300      	movs	r3, #0
 8000960:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000962:	2300      	movs	r3, #0
 8000964:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	2200      	movs	r2, #0
 800096c:	4619      	mov	r1, r3
 800096e:	4818      	ldr	r0, [pc, #96]	; (80009d0 <MX_TIM8_Init+0x110>)
 8000970:	f001 fdda 	bl	8002528 <HAL_TIM_PWM_ConfigChannel>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800097a:	f000 f9e1 	bl	8000d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800097e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000982:	2204      	movs	r2, #4
 8000984:	4619      	mov	r1, r3
 8000986:	4812      	ldr	r0, [pc, #72]	; (80009d0 <MX_TIM8_Init+0x110>)
 8000988:	f001 fdce 	bl	8002528 <HAL_TIM_PWM_ConfigChannel>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8000992:	f000 f9d5 	bl	8000d40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_TIM8_Init+0x110>)
 80009ba:	f002 facb 	bl	8002f54 <HAL_TIMEx_ConfigBreakDeadTime>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80009c4:	f000 f9bc 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	3748      	adds	r7, #72	; 0x48
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200049ac 	.word	0x200049ac
 80009d4:	40010400 	.word	0x40010400

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <MX_GPIO_Init+0xe0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a30      	ldr	r2, [pc, #192]	; (8000ab8 <MX_GPIO_Init+0xe0>)
 80009f8:	f043 0310 	orr.w	r3, r3, #16
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b2e      	ldr	r3, [pc, #184]	; (8000ab8 <MX_GPIO_Init+0xe0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0310 	and.w	r3, r3, #16
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <MX_GPIO_Init+0xe0>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a29      	ldr	r2, [pc, #164]	; (8000ab8 <MX_GPIO_Init+0xe0>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <MX_GPIO_Init+0xe0>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <MX_GPIO_Init+0xe0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a22      	ldr	r2, [pc, #136]	; (8000ab8 <MX_GPIO_Init+0xe0>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <MX_GPIO_Init+0xe0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <MX_GPIO_Init+0xe0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a1b      	ldr	r2, [pc, #108]	; (8000ab8 <MX_GPIO_Init+0xe0>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_GPIO_Init+0xe0>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8000a64:	4815      	ldr	r0, [pc, #84]	; (8000abc <MX_GPIO_Init+0xe4>)
 8000a66:	f000 fe55 	bl	8001714 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	213c      	movs	r1, #60	; 0x3c
 8000a6e:	4814      	ldr	r0, [pc, #80]	; (8000ac0 <MX_GPIO_Init+0xe8>)
 8000a70:	f000 fe50 	bl	8001714 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8000a74:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8000a78:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480b      	ldr	r0, [pc, #44]	; (8000abc <MX_GPIO_Init+0xe4>)
 8000a8e:	f000 fca5 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8000a92:	233c      	movs	r3, #60	; 0x3c
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_GPIO_Init+0xe8>)
 8000aaa:	f000 fc97 	bl	80013dc <HAL_GPIO_Init>

}
 8000aae:	bf00      	nop
 8000ab0:	3728      	adds	r7, #40	; 0x28
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40020000 	.word	0x40020000

08000ac4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000acc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad0:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <StartDefaultTask+0x1c>)
 8000ad2:	f000 fe38 	bl	8001746 <HAL_GPIO_TogglePin>
	  osDelay(5000);
 8000ad6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ada:	f002 fb9d 	bl	8003218 <osDelay>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000ade:	e7f5      	b.n	8000acc <StartDefaultTask+0x8>
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <show>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_show */
void show(void *argument)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN show */
	OLED_Init();
 8000aec:	f005 f9ac 	bl	8005e48 <OLED_Init>
	uint8_t hello[20] = "Testing :D\0";
 8000af0:	4a0c      	ldr	r2, [pc, #48]	; (8000b24 <show+0x40>)
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000af8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000afc:	f107 0318 	add.w	r3, r7, #24
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
  /* Infinite loop */
  for(;;)
  {
    OLED_ShowString(10,10,hello);
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	210a      	movs	r1, #10
 8000b0e:	200a      	movs	r0, #10
 8000b10:	f005 f968 	bl	8005de4 <OLED_ShowString>
    OLED_Refresh_Gram();
 8000b14:	f004 fff2 	bl	8005afc <OLED_Refresh_Gram>
    osDelay(1000);
 8000b18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b1c:	f002 fb7c 	bl	8003218 <osDelay>
    OLED_ShowString(10,10,hello);
 8000b20:	e7f1      	b.n	8000b06 <show+0x22>
 8000b22:	bf00      	nop
 8000b24:	08006874 	.word	0x08006874

08000b28 <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 8000b28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000b2c:	b084      	sub	sp, #16
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
   //USER CODE BEGIN motor
	uint64_t pwmVal = 0;
 8000b32:	f04f 0200 	mov.w	r2, #0
 8000b36:	f04f 0300 	mov.w	r3, #0
 8000b3a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4833      	ldr	r0, [pc, #204]	; (8000c10 <motor+0xe8>)
 8000b42:	f001 faf5 	bl	8002130 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000b46:	2104      	movs	r1, #4
 8000b48:	4831      	ldr	r0, [pc, #196]	; (8000c10 <motor+0xe8>)
 8000b4a:	f001 faf1 	bl	8002130 <HAL_TIM_PWM_Start>

   /*Infinite loop*/
  for(;;)
  {
	  while(pwmVal<4000)
 8000b4e:	e025      	b.n	8000b9c <motor+0x74>
	  {
		  HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	2104      	movs	r1, #4
 8000b54:	482f      	ldr	r0, [pc, #188]	; (8000c14 <motor+0xec>)
 8000b56:	f000 fddd 	bl	8001714 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2108      	movs	r1, #8
 8000b5e:	482d      	ldr	r0, [pc, #180]	; (8000c14 <motor+0xec>)
 8000b60:	f000 fdd8 	bl	8001714 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	2120      	movs	r1, #32
 8000b68:	482a      	ldr	r0, [pc, #168]	; (8000c14 <motor+0xec>)
 8000b6a:	f000 fdd3 	bl	8001714 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2110      	movs	r1, #16
 8000b72:	4828      	ldr	r0, [pc, #160]	; (8000c14 <motor+0xec>)
 8000b74:	f000 fdce 	bl	8001714 <HAL_GPIO_WritePin>
		  pwmVal++;
 8000b78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b7c:	1c54      	adds	r4, r2, #1
 8000b7e:	f143 0500 	adc.w	r5, r3, #0
 8000b82:	e9c7 4502 	strd	r4, r5, [r7, #8]
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); //Modify comparison value for duty cycle
 8000b86:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <motor+0xe8>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); //Modify comparison value for duty cycle
 8000b8e:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <motor+0xe8>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	639a      	str	r2, [r3, #56]	; 0x38
		  osDelay(10);
 8000b96:	200a      	movs	r0, #10
 8000b98:	f002 fb3e 	bl	8003218 <osDelay>
	  while(pwmVal<4000)
 8000b9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ba0:	f640 709f 	movw	r0, #3999	; 0xf9f
 8000ba4:	f04f 0100 	mov.w	r1, #0
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	bf08      	it	eq
 8000bac:	4290      	cmpeq	r0, r2
 8000bae:	d2cf      	bcs.n	8000b50 <motor+0x28>
	  }
	  while(pwmVal>0)
 8000bb0:	e026      	b.n	8000c00 <motor+0xd8>
	  {
		  HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2104      	movs	r1, #4
 8000bb6:	4817      	ldr	r0, [pc, #92]	; (8000c14 <motor+0xec>)
 8000bb8:	f000 fdac 	bl	8001714 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2108      	movs	r1, #8
 8000bc0:	4814      	ldr	r0, [pc, #80]	; (8000c14 <motor+0xec>)
 8000bc2:	f000 fda7 	bl	8001714 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2120      	movs	r1, #32
 8000bca:	4812      	ldr	r0, [pc, #72]	; (8000c14 <motor+0xec>)
 8000bcc:	f000 fda2 	bl	8001714 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2110      	movs	r1, #16
 8000bd4:	480f      	ldr	r0, [pc, #60]	; (8000c14 <motor+0xec>)
 8000bd6:	f000 fd9d 	bl	8001714 <HAL_GPIO_WritePin>
		  pwmVal--;
 8000bda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000bde:	f112 38ff 	adds.w	r8, r2, #4294967295
 8000be2:	f143 39ff 	adc.w	r9, r3, #4294967295
 8000be6:	e9c7 8902 	strd	r8, r9, [r7, #8]
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal); //Modify comparison value for duty cycle
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <motor+0xe8>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal); //Modify comparison value for duty cycle
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <motor+0xe8>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	639a      	str	r2, [r3, #56]	; 0x38
		  osDelay(10);
 8000bfa:	200a      	movs	r0, #10
 8000bfc:	f002 fb0c 	bl	8003218 <osDelay>
	  while(pwmVal>0)
 8000c00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	d1d4      	bne.n	8000bb2 <motor+0x8a>
	  }

	  osDelay(10);
 8000c08:	200a      	movs	r0, #10
 8000c0a:	f002 fb05 	bl	8003218 <osDelay>
	  while(pwmVal<4000)
 8000c0e:	e7c5      	b.n	8000b9c <motor+0x74>
 8000c10:	200049ac 	.word	0x200049ac
 8000c14:	40020000 	.word	0x40020000

08000c18 <encoderMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoderMotor */
void encoderMotor(void *argument)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08c      	sub	sp, #48	; 0x30
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoderMotor */
	  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000c20:	213c      	movs	r1, #60	; 0x3c
 8000c22:	4836      	ldr	r0, [pc, #216]	; (8000cfc <encoderMotor+0xe4>)
 8000c24:	f001 fbf2 	bl	800240c <HAL_TIM_Encoder_Start>
	  int cnt1, cnt2, diff;
	  uint32_t tick;
	  cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000c28:	4b34      	ldr	r3, [pc, #208]	; (8000cfc <encoderMotor+0xe4>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  tick = HAL_GetTick();
 8000c30:	f000 fabe 	bl	80011b0 <HAL_GetTick>
 8000c34:	6278      	str	r0, [r7, #36]	; 0x24
	  uint16_t dir;

  /* Infinite loop */
  for(;;)
  {
	if(HAL_GetTick()-tick > 1000L)
 8000c36:	f000 fabb 	bl	80011b0 <HAL_GetTick>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c44:	d9f7      	bls.n	8000c36 <encoderMotor+0x1e>
	{
		cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000c46:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <encoderMotor+0xe4>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4c:	623b      	str	r3, [r7, #32]
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 8000c4e:	4b2b      	ldr	r3, [pc, #172]	; (8000cfc <encoderMotor+0xe4>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 0310 	and.w	r3, r3, #16
 8000c58:	2b10      	cmp	r3, #16
 8000c5a:	d110      	bne.n	8000c7e <encoderMotor+0x66>
		{
			if(cnt2<cnt1)
 8000c5c:	6a3a      	ldr	r2, [r7, #32]
 8000c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c60:	429a      	cmp	r2, r3
 8000c62:	da04      	bge.n	8000c6e <encoderMotor+0x56>
				diff = cnt1 - cnt2;
 8000c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c66:	6a3b      	ldr	r3, [r7, #32]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c6c:	e017      	b.n	8000c9e <encoderMotor+0x86>
			else
				diff = (65535 - cnt2)+cnt1;
 8000c6e:	6a3b      	ldr	r3, [r7, #32]
 8000c70:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000c74:	33ff      	adds	r3, #255	; 0xff
 8000c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c78:	4413      	add	r3, r2
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c7c:	e00f      	b.n	8000c9e <encoderMotor+0x86>
		}
		else
		{


			if(cnt2>cnt1)
 8000c7e:	6a3a      	ldr	r2, [r7, #32]
 8000c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c82:	429a      	cmp	r2, r3
 8000c84:	dd04      	ble.n	8000c90 <encoderMotor+0x78>
				diff = cnt2 - cnt1;
 8000c86:	6a3a      	ldr	r2, [r7, #32]
 8000c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c8e:	e006      	b.n	8000c9e <encoderMotor+0x86>
			else
				diff =  (65535 - cnt1)+cnt2;
 8000c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c92:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000c96:	33ff      	adds	r3, #255	; 0xff
 8000c98:	6a3a      	ldr	r2, [r7, #32]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		sprintf(hello,"Speed:%5d\0", diff);
 8000c9e:	f107 0308 	add.w	r3, r7, #8
 8000ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ca4:	4916      	ldr	r1, [pc, #88]	; (8000d00 <encoderMotor+0xe8>)
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f005 f99a 	bl	8005fe0 <siprintf>
		OLED_ShowString(10,20,hello);
 8000cac:	f107 0308 	add.w	r3, r7, #8
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	2114      	movs	r1, #20
 8000cb4:	200a      	movs	r0, #10
 8000cb6:	f005 f895 	bl	8005de4 <OLED_ShowString>
		dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <encoderMotor+0xe4>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 0310 	and.w	r3, r3, #16
 8000cc4:	2b10      	cmp	r3, #16
 8000cc6:	bf0c      	ite	eq
 8000cc8:	2301      	moveq	r3, #1
 8000cca:	2300      	movne	r3, #0
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	83fb      	strh	r3, [r7, #30]
		sprintf(hello,"Direction:%5d\0", dir);
 8000cd0:	8bfa      	ldrh	r2, [r7, #30]
 8000cd2:	f107 0308 	add.w	r3, r7, #8
 8000cd6:	490b      	ldr	r1, [pc, #44]	; (8000d04 <encoderMotor+0xec>)
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f005 f981 	bl	8005fe0 <siprintf>
		OLED_ShowString(10,30,hello);
 8000cde:	f107 0308 	add.w	r3, r7, #8
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	211e      	movs	r1, #30
 8000ce6:	200a      	movs	r0, #10
 8000ce8:	f005 f87c 	bl	8005de4 <OLED_ShowString>
		cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <encoderMotor+0xe4>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
		tick = HAL_GetTick();
 8000cf4:	f000 fa5c 	bl	80011b0 <HAL_GetTick>
 8000cf8:	6278      	str	r0, [r7, #36]	; 0x24
	if(HAL_GetTick()-tick > 1000L)
 8000cfa:	e79c      	b.n	8000c36 <encoderMotor+0x1e>
 8000cfc:	20004a4c 	.word	0x20004a4c
 8000d00:	08006888 	.word	0x08006888
 8000d04:	08006894 	.word	0x08006894

08000d08 <servo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_servo */
void servo(void *argument)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN servo */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000d10:	210c      	movs	r1, #12
 8000d12:	480a      	ldr	r0, [pc, #40]	; (8000d3c <servo+0x34>)
 8000d14:	f001 fa0c 	bl	8002130 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {

	htim1.Instance->CCR4 = 75;
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <servo+0x34>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	224b      	movs	r2, #75	; 0x4b
 8000d1e:	641a      	str	r2, [r3, #64]	; 0x40
    osDelay(5000);
 8000d20:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d24:	f002 fa78 	bl	8003218 <osDelay>
    htim1.Instance->CCR4 = 60;
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <servo+0x34>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	223c      	movs	r2, #60	; 0x3c
 8000d2e:	641a      	str	r2, [r3, #64]	; 0x40
        osDelay(5000);
 8000d30:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d34:	f002 fa70 	bl	8003218 <osDelay>
	htim1.Instance->CCR4 = 75;
 8000d38:	e7ee      	b.n	8000d18 <servo+0x10>
 8000d3a:	bf00      	nop
 8000d3c:	20004a04 	.word	0x20004a04

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <Error_Handler+0x8>
	...

08000d4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_MspInit+0x54>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	4a11      	ldr	r2, [pc, #68]	; (8000da0 <HAL_MspInit+0x54>)
 8000d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d60:	6453      	str	r3, [r2, #68]	; 0x44
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <HAL_MspInit+0x54>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <HAL_MspInit+0x54>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <HAL_MspInit+0x54>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <HAL_MspInit+0x54>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	210f      	movs	r1, #15
 8000d8e:	f06f 0001 	mvn.w	r0, #1
 8000d92:	f000 fafa 	bl	800138a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800

08000da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <HAL_TIM_Base_MspInit+0x3c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d10d      	bne.n	8000dd2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <HAL_TIM_Base_MspInit+0x40>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <HAL_TIM_Base_MspInit+0x40>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <HAL_TIM_Base_MspInit+0x40>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40010000 	.word	0x40010000
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e08:	d14a      	bne.n	8000ea0 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a25      	ldr	r2, [pc, #148]	; (8000ea8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1a:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ea8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a17      	ldr	r2, [pc, #92]	; (8000ea8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e70:	2301      	movs	r3, #1
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4619      	mov	r1, r3
 8000e7a:	480c      	ldr	r0, [pc, #48]	; (8000eac <HAL_TIM_Encoder_MspInit+0xc4>)
 8000e7c:	f000 faae 	bl	80013dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e80:	2308      	movs	r3, #8
 8000e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e90:	2301      	movs	r3, #1
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000e9c:	f000 fa9e 	bl	80013dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ea0:	bf00      	nop
 8000ea2:	3728      	adds	r7, #40	; 0x28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	40020400 	.word	0x40020400

08000eb4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM8)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a19      	ldr	r2, [pc, #100]	; (8000f38 <HAL_TIM_PWM_MspInit+0x84>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d12b      	bne.n	8000f2e <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <HAL_TIM_PWM_MspInit+0x88>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	4a17      	ldr	r2, [pc, #92]	; (8000f3c <HAL_TIM_PWM_MspInit+0x88>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_TIM_PWM_MspInit+0x88>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_TIM_PWM_MspInit+0x88>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a10      	ldr	r2, [pc, #64]	; (8000f3c <HAL_TIM_PWM_MspInit+0x88>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_TIM_PWM_MspInit+0x88>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8000f0e:	23c0      	movs	r3, #192	; 0xc0
 8000f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	4805      	ldr	r0, [pc, #20]	; (8000f40 <HAL_TIM_PWM_MspInit+0x8c>)
 8000f2a:	f000 fa57 	bl	80013dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000f2e:	bf00      	nop
 8000f30:	3728      	adds	r7, #40	; 0x28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40010400 	.word	0x40010400
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020800 	.word	0x40020800

08000f44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a12      	ldr	r2, [pc, #72]	; (8000fac <HAL_TIM_MspPostInit+0x68>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d11e      	bne.n	8000fa4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_TIM_MspPostInit+0x6c>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <HAL_TIM_MspPostInit+0x6c>)
 8000f70:	f043 0310 	orr.w	r3, r3, #16
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_TIM_MspPostInit+0x6c>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0310 	and.w	r3, r3, #16
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f94:	2301      	movs	r3, #1
 8000f96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <HAL_TIM_MspPostInit+0x70>)
 8000fa0:	f000 fa1c 	bl	80013dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fa4:	bf00      	nop
 8000fa6:	3720      	adds	r7, #32
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40010000 	.word	0x40010000
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <NMI_Handler+0x4>

08000fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe8:	f000 f8ce 	bl	8001188 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000fec:	f003 fd22 	bl	8004a34 <xTaskGetSchedulerState>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d001      	beq.n	8000ffa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ff6:	f004 fb07 	bl	8005608 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001008:	4a14      	ldr	r2, [pc, #80]	; (800105c <_sbrk+0x5c>)
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <_sbrk+0x60>)
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d102      	bne.n	8001022 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <_sbrk+0x64>)
 800101e:	4a12      	ldr	r2, [pc, #72]	; (8001068 <_sbrk+0x68>)
 8001020:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <_sbrk+0x64>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	429a      	cmp	r2, r3
 800102e:	d207      	bcs.n	8001040 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001030:	f004 ff96 	bl	8005f60 <__errno>
 8001034:	4603      	mov	r3, r0
 8001036:	220c      	movs	r2, #12
 8001038:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	e009      	b.n	8001054 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <_sbrk+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <_sbrk+0x64>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	4a05      	ldr	r2, [pc, #20]	; (8001064 <_sbrk+0x64>)
 8001050:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001052:	68fb      	ldr	r3, [r7, #12]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20020000 	.word	0x20020000
 8001060:	00000400 	.word	0x00000400
 8001064:	20000090 	.word	0x20000090
 8001068:	20004ef0 	.word	0x20004ef0

0800106c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <SystemInit+0x20>)
 8001072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001076:	4a05      	ldr	r2, [pc, #20]	; (800108c <SystemInit+0x20>)
 8001078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800107c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001094:	480d      	ldr	r0, [pc, #52]	; (80010cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001096:	490e      	ldr	r1, [pc, #56]	; (80010d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001098:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800109c:	e002      	b.n	80010a4 <LoopCopyDataInit>

0800109e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a2:	3304      	adds	r3, #4

080010a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a8:	d3f9      	bcc.n	800109e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010ac:	4c0b      	ldr	r4, [pc, #44]	; (80010dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b0:	e001      	b.n	80010b6 <LoopFillZerobss>

080010b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b4:	3204      	adds	r2, #4

080010b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b8:	d3fb      	bcc.n	80010b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010ba:	f7ff ffd7 	bl	800106c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010be:	f004 ff55 	bl	8005f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c2:	f7ff fa51 	bl	8000568 <main>
  bx  lr    
 80010c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80010d4:	08007428 	.word	0x08007428
  ldr r2, =_sbss
 80010d8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80010dc:	20004eec 	.word	0x20004eec

080010e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e0:	e7fe      	b.n	80010e0 <ADC_IRQHandler>
	...

080010e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_Init+0x40>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <HAL_Init+0x40>)
 80010ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010f4:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <HAL_Init+0x40>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <HAL_Init+0x40>)
 80010fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <HAL_Init+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a07      	ldr	r2, [pc, #28]	; (8001124 <HAL_Init+0x40>)
 8001106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800110c:	2003      	movs	r0, #3
 800110e:	f000 f931 	bl	8001374 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001112:	200f      	movs	r0, #15
 8001114:	f000 f808 	bl	8001128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001118:	f7ff fe18 	bl	8000d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023c00 	.word	0x40023c00

08001128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_InitTick+0x54>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_InitTick+0x58>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4619      	mov	r1, r3
 800113a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001142:	fbb2 f3f3 	udiv	r3, r2, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f000 f93b 	bl	80013c2 <HAL_SYSTICK_Config>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e00e      	b.n	8001174 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b0f      	cmp	r3, #15
 800115a:	d80a      	bhi.n	8001172 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800115c:	2200      	movs	r2, #0
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f000 f911 	bl	800138a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001168:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_InitTick+0x5c>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	e000      	b.n	8001174 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000000 	.word	0x20000000
 8001180:	20000008 	.word	0x20000008
 8001184:	20000004 	.word	0x20000004

08001188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_IncTick+0x20>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x24>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4413      	add	r3, r2
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <HAL_IncTick+0x24>)
 800119a:	6013      	str	r3, [r2, #0]
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000008 	.word	0x20000008
 80011ac:	20004a98 	.word	0x20004a98

080011b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return uwTick;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <HAL_GetTick+0x14>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20004a98 	.word	0x20004a98

080011c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d0:	f7ff ffee 	bl	80011b0 <HAL_GetTick>
 80011d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e0:	d005      	beq.n	80011ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_Delay+0x44>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ee:	bf00      	nop
 80011f0:	f7ff ffde 	bl	80011b0 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d8f7      	bhi.n	80011f0 <HAL_Delay+0x28>
  {
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000008 	.word	0x20000008

08001210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800122c:	4013      	ands	r3, r2
 800122e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800123c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001242:	4a04      	ldr	r2, [pc, #16]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	60d3      	str	r3, [r2, #12]
}
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <__NVIC_GetPriorityGrouping+0x18>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	f003 0307 	and.w	r3, r3, #7
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0a      	blt.n	800129e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	490c      	ldr	r1, [pc, #48]	; (80012c0 <__NVIC_SetPriority+0x4c>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800129c:	e00a      	b.n	80012b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4908      	ldr	r1, [pc, #32]	; (80012c4 <__NVIC_SetPriority+0x50>)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	3b04      	subs	r3, #4
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	761a      	strb	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f1c3 0307 	rsb	r3, r3, #7
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	bf28      	it	cs
 80012e6:	2304      	movcs	r3, #4
 80012e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3304      	adds	r3, #4
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d902      	bls.n	80012f8 <NVIC_EncodePriority+0x30>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3b03      	subs	r3, #3
 80012f6:	e000      	b.n	80012fa <NVIC_EncodePriority+0x32>
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43da      	mvns	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001310:	f04f 31ff 	mov.w	r1, #4294967295
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43d9      	mvns	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	4313      	orrs	r3, r2
         );
}
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	; 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001340:	d301      	bcc.n	8001346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001342:	2301      	movs	r3, #1
 8001344:	e00f      	b.n	8001366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <SysTick_Config+0x40>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134e:	210f      	movs	r1, #15
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f7ff ff8e 	bl	8001274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <SysTick_Config+0x40>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <SysTick_Config+0x40>)
 8001360:	2207      	movs	r2, #7
 8001362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	e000e010 	.word	0xe000e010

08001374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff47 	bl	8001210 <__NVIC_SetPriorityGrouping>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800139c:	f7ff ff5c 	bl	8001258 <__NVIC_GetPriorityGrouping>
 80013a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	68b9      	ldr	r1, [r7, #8]
 80013a6:	6978      	ldr	r0, [r7, #20]
 80013a8:	f7ff ff8e 	bl	80012c8 <NVIC_EncodePriority>
 80013ac:	4602      	mov	r2, r0
 80013ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b2:	4611      	mov	r1, r2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff5d 	bl	8001274 <__NVIC_SetPriority>
}
 80013ba:	bf00      	nop
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ffb0 	bl	8001330 <SysTick_Config>
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
 80013f6:	e16b      	b.n	80016d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013f8:	2201      	movs	r2, #1
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	429a      	cmp	r2, r3
 8001412:	f040 815a 	bne.w	80016ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0303 	and.w	r3, r3, #3
 800141e:	2b01      	cmp	r3, #1
 8001420:	d005      	beq.n	800142e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800142a:	2b02      	cmp	r3, #2
 800142c:	d130      	bne.n	8001490 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	2203      	movs	r2, #3
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	68da      	ldr	r2, [r3, #12]
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001464:	2201      	movs	r2, #1
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	091b      	lsrs	r3, r3, #4
 800147a:	f003 0201 	and.w	r2, r3, #1
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b03      	cmp	r3, #3
 800149a:	d017      	beq.n	80014cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	2203      	movs	r2, #3
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d123      	bne.n	8001520 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	08da      	lsrs	r2, r3, #3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3208      	adds	r2, #8
 80014e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	220f      	movs	r2, #15
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	691a      	ldr	r2, [r3, #16]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	08da      	lsrs	r2, r3, #3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3208      	adds	r2, #8
 800151a:	69b9      	ldr	r1, [r7, #24]
 800151c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	2203      	movs	r2, #3
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0203 	and.w	r2, r3, #3
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 80b4 	beq.w	80016ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b60      	ldr	r3, [pc, #384]	; (80016e8 <HAL_GPIO_Init+0x30c>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	4a5f      	ldr	r2, [pc, #380]	; (80016e8 <HAL_GPIO_Init+0x30c>)
 800156c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001570:	6453      	str	r3, [r2, #68]	; 0x44
 8001572:	4b5d      	ldr	r3, [pc, #372]	; (80016e8 <HAL_GPIO_Init+0x30c>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800157e:	4a5b      	ldr	r2, [pc, #364]	; (80016ec <HAL_GPIO_Init+0x310>)
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	089b      	lsrs	r3, r3, #2
 8001584:	3302      	adds	r3, #2
 8001586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	220f      	movs	r2, #15
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a52      	ldr	r2, [pc, #328]	; (80016f0 <HAL_GPIO_Init+0x314>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d02b      	beq.n	8001602 <HAL_GPIO_Init+0x226>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a51      	ldr	r2, [pc, #324]	; (80016f4 <HAL_GPIO_Init+0x318>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d025      	beq.n	80015fe <HAL_GPIO_Init+0x222>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a50      	ldr	r2, [pc, #320]	; (80016f8 <HAL_GPIO_Init+0x31c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d01f      	beq.n	80015fa <HAL_GPIO_Init+0x21e>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4f      	ldr	r2, [pc, #316]	; (80016fc <HAL_GPIO_Init+0x320>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d019      	beq.n	80015f6 <HAL_GPIO_Init+0x21a>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4e      	ldr	r2, [pc, #312]	; (8001700 <HAL_GPIO_Init+0x324>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d013      	beq.n	80015f2 <HAL_GPIO_Init+0x216>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4d      	ldr	r2, [pc, #308]	; (8001704 <HAL_GPIO_Init+0x328>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d00d      	beq.n	80015ee <HAL_GPIO_Init+0x212>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4c      	ldr	r2, [pc, #304]	; (8001708 <HAL_GPIO_Init+0x32c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d007      	beq.n	80015ea <HAL_GPIO_Init+0x20e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4b      	ldr	r2, [pc, #300]	; (800170c <HAL_GPIO_Init+0x330>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d101      	bne.n	80015e6 <HAL_GPIO_Init+0x20a>
 80015e2:	2307      	movs	r3, #7
 80015e4:	e00e      	b.n	8001604 <HAL_GPIO_Init+0x228>
 80015e6:	2308      	movs	r3, #8
 80015e8:	e00c      	b.n	8001604 <HAL_GPIO_Init+0x228>
 80015ea:	2306      	movs	r3, #6
 80015ec:	e00a      	b.n	8001604 <HAL_GPIO_Init+0x228>
 80015ee:	2305      	movs	r3, #5
 80015f0:	e008      	b.n	8001604 <HAL_GPIO_Init+0x228>
 80015f2:	2304      	movs	r3, #4
 80015f4:	e006      	b.n	8001604 <HAL_GPIO_Init+0x228>
 80015f6:	2303      	movs	r3, #3
 80015f8:	e004      	b.n	8001604 <HAL_GPIO_Init+0x228>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e002      	b.n	8001604 <HAL_GPIO_Init+0x228>
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_GPIO_Init+0x228>
 8001602:	2300      	movs	r3, #0
 8001604:	69fa      	ldr	r2, [r7, #28]
 8001606:	f002 0203 	and.w	r2, r2, #3
 800160a:	0092      	lsls	r2, r2, #2
 800160c:	4093      	lsls	r3, r2
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001614:	4935      	ldr	r1, [pc, #212]	; (80016ec <HAL_GPIO_Init+0x310>)
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	3302      	adds	r3, #2
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001622:	4b3b      	ldr	r3, [pc, #236]	; (8001710 <HAL_GPIO_Init+0x334>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001646:	4a32      	ldr	r2, [pc, #200]	; (8001710 <HAL_GPIO_Init+0x334>)
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800164c:	4b30      	ldr	r3, [pc, #192]	; (8001710 <HAL_GPIO_Init+0x334>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001670:	4a27      	ldr	r2, [pc, #156]	; (8001710 <HAL_GPIO_Init+0x334>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001676:	4b26      	ldr	r3, [pc, #152]	; (8001710 <HAL_GPIO_Init+0x334>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800169a:	4a1d      	ldr	r2, [pc, #116]	; (8001710 <HAL_GPIO_Init+0x334>)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016a0:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <HAL_GPIO_Init+0x334>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016c4:	4a12      	ldr	r2, [pc, #72]	; (8001710 <HAL_GPIO_Init+0x334>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3301      	adds	r3, #1
 80016ce:	61fb      	str	r3, [r7, #28]
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	2b0f      	cmp	r3, #15
 80016d4:	f67f ae90 	bls.w	80013f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	3724      	adds	r7, #36	; 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40013800 	.word	0x40013800
 80016f0:	40020000 	.word	0x40020000
 80016f4:	40020400 	.word	0x40020400
 80016f8:	40020800 	.word	0x40020800
 80016fc:	40020c00 	.word	0x40020c00
 8001700:	40021000 	.word	0x40021000
 8001704:	40021400 	.word	0x40021400
 8001708:	40021800 	.word	0x40021800
 800170c:	40021c00 	.word	0x40021c00
 8001710:	40013c00 	.word	0x40013c00

08001714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	807b      	strh	r3, [r7, #2]
 8001720:	4613      	mov	r3, r2
 8001722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001724:	787b      	ldrb	r3, [r7, #1]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800172a:	887a      	ldrh	r2, [r7, #2]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001730:	e003      	b.n	800173a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001732:	887b      	ldrh	r3, [r7, #2]
 8001734:	041a      	lsls	r2, r3, #16
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	619a      	str	r2, [r3, #24]
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001746:	b480      	push	{r7}
 8001748:	b085      	sub	sp, #20
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	460b      	mov	r3, r1
 8001750:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001758:	887a      	ldrh	r2, [r7, #2]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4013      	ands	r3, r2
 800175e:	041a      	lsls	r2, r3, #16
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	43d9      	mvns	r1, r3
 8001764:	887b      	ldrh	r3, [r7, #2]
 8001766:	400b      	ands	r3, r1
 8001768:	431a      	orrs	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	619a      	str	r2, [r3, #24]
}
 800176e:	bf00      	nop
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_PWR_EnableBkUpAccess+0x20>)
 8001784:	2201      	movs	r2, #1
 8001786:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_PWR_EnableBkUpAccess+0x24>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800178e:	687b      	ldr	r3, [r7, #4]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	420e0020 	.word	0x420e0020
 80017a0:	40007000 	.word	0x40007000

080017a4 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_PWR_DisableBkUpAccess+0x20>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_PWR_DisableBkUpAccess+0x24>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80017b6:	687b      	ldr	r3, [r7, #4]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	420e0020 	.word	0x420e0020
 80017c8:	40007000 	.word	0x40007000

080017cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e264      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d075      	beq.n	80018d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017ea:	4ba3      	ldr	r3, [pc, #652]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d00c      	beq.n	8001810 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017f6:	4ba0      	ldr	r3, [pc, #640]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d112      	bne.n	8001828 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001802:	4b9d      	ldr	r3, [pc, #628]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800180e:	d10b      	bne.n	8001828 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001810:	4b99      	ldr	r3, [pc, #612]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d05b      	beq.n	80018d4 <HAL_RCC_OscConfig+0x108>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d157      	bne.n	80018d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e23f      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001830:	d106      	bne.n	8001840 <HAL_RCC_OscConfig+0x74>
 8001832:	4b91      	ldr	r3, [pc, #580]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a90      	ldr	r2, [pc, #576]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	e01d      	b.n	800187c <HAL_RCC_OscConfig+0xb0>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001848:	d10c      	bne.n	8001864 <HAL_RCC_OscConfig+0x98>
 800184a:	4b8b      	ldr	r3, [pc, #556]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a8a      	ldr	r2, [pc, #552]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	4b88      	ldr	r3, [pc, #544]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a87      	ldr	r2, [pc, #540]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 800185c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e00b      	b.n	800187c <HAL_RCC_OscConfig+0xb0>
 8001864:	4b84      	ldr	r3, [pc, #528]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a83      	ldr	r2, [pc, #524]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 800186a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b81      	ldr	r3, [pc, #516]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a80      	ldr	r2, [pc, #512]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800187a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d013      	beq.n	80018ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff fc94 	bl	80011b0 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff fc90 	bl	80011b0 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	; 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e204      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	4b76      	ldr	r3, [pc, #472]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0xc0>
 80018aa:	e014      	b.n	80018d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7ff fc80 	bl	80011b0 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b4:	f7ff fc7c 	bl	80011b0 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b64      	cmp	r3, #100	; 0x64
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e1f0      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c6:	4b6c      	ldr	r3, [pc, #432]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0xe8>
 80018d2:	e000      	b.n	80018d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d063      	beq.n	80019aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018e2:	4b65      	ldr	r3, [pc, #404]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00b      	beq.n	8001906 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ee:	4b62      	ldr	r3, [pc, #392]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d11c      	bne.n	8001934 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018fa:	4b5f      	ldr	r3, [pc, #380]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d116      	bne.n	8001934 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001906:	4b5c      	ldr	r3, [pc, #368]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d005      	beq.n	800191e <HAL_RCC_OscConfig+0x152>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d001      	beq.n	800191e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e1c4      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191e:	4b56      	ldr	r3, [pc, #344]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	4952      	ldr	r1, [pc, #328]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 800192e:	4313      	orrs	r3, r2
 8001930:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001932:	e03a      	b.n	80019aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d020      	beq.n	800197e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800193c:	4b4f      	ldr	r3, [pc, #316]	; (8001a7c <HAL_RCC_OscConfig+0x2b0>)
 800193e:	2201      	movs	r2, #1
 8001940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7ff fc35 	bl	80011b0 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800194a:	f7ff fc31 	bl	80011b0 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e1a5      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195c:	4b46      	ldr	r3, [pc, #280]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0f0      	beq.n	800194a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001968:	4b43      	ldr	r3, [pc, #268]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	4940      	ldr	r1, [pc, #256]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001978:	4313      	orrs	r3, r2
 800197a:	600b      	str	r3, [r1, #0]
 800197c:	e015      	b.n	80019aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800197e:	4b3f      	ldr	r3, [pc, #252]	; (8001a7c <HAL_RCC_OscConfig+0x2b0>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff fc14 	bl	80011b0 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800198c:	f7ff fc10 	bl	80011b0 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e184      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199e:	4b36      	ldr	r3, [pc, #216]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d030      	beq.n	8001a18 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d016      	beq.n	80019ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019be:	4b30      	ldr	r3, [pc, #192]	; (8001a80 <HAL_RCC_OscConfig+0x2b4>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c4:	f7ff fbf4 	bl	80011b0 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019cc:	f7ff fbf0 	bl	80011b0 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e164      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019de:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 80019e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x200>
 80019ea:	e015      	b.n	8001a18 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ec:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <HAL_RCC_OscConfig+0x2b4>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f2:	f7ff fbdd 	bl	80011b0 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019fa:	f7ff fbd9 	bl	80011b0 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e14d      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1f0      	bne.n	80019fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 80a0 	beq.w	8001b66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a2a:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10f      	bne.n	8001a56 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	4a0e      	ldr	r2, [pc, #56]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a44:	6413      	str	r3, [r2, #64]	; 0x40
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a52:	2301      	movs	r3, #1
 8001a54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_RCC_OscConfig+0x2b8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d121      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_RCC_OscConfig+0x2b8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <HAL_RCC_OscConfig+0x2b8>)
 8001a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a6e:	f7ff fb9f 	bl	80011b0 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a74:	e011      	b.n	8001a9a <HAL_RCC_OscConfig+0x2ce>
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	42470000 	.word	0x42470000
 8001a80:	42470e80 	.word	0x42470e80
 8001a84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a88:	f7ff fb92 	bl	80011b0 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e106      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9a:	4b85      	ldr	r3, [pc, #532]	; (8001cb0 <HAL_RCC_OscConfig+0x4e4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d106      	bne.n	8001abc <HAL_RCC_OscConfig+0x2f0>
 8001aae:	4b81      	ldr	r3, [pc, #516]	; (8001cb4 <HAL_RCC_OscConfig+0x4e8>)
 8001ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab2:	4a80      	ldr	r2, [pc, #512]	; (8001cb4 <HAL_RCC_OscConfig+0x4e8>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aba:	e01c      	b.n	8001af6 <HAL_RCC_OscConfig+0x32a>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b05      	cmp	r3, #5
 8001ac2:	d10c      	bne.n	8001ade <HAL_RCC_OscConfig+0x312>
 8001ac4:	4b7b      	ldr	r3, [pc, #492]	; (8001cb4 <HAL_RCC_OscConfig+0x4e8>)
 8001ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac8:	4a7a      	ldr	r2, [pc, #488]	; (8001cb4 <HAL_RCC_OscConfig+0x4e8>)
 8001aca:	f043 0304 	orr.w	r3, r3, #4
 8001ace:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad0:	4b78      	ldr	r3, [pc, #480]	; (8001cb4 <HAL_RCC_OscConfig+0x4e8>)
 8001ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad4:	4a77      	ldr	r2, [pc, #476]	; (8001cb4 <HAL_RCC_OscConfig+0x4e8>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6713      	str	r3, [r2, #112]	; 0x70
 8001adc:	e00b      	b.n	8001af6 <HAL_RCC_OscConfig+0x32a>
 8001ade:	4b75      	ldr	r3, [pc, #468]	; (8001cb4 <HAL_RCC_OscConfig+0x4e8>)
 8001ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae2:	4a74      	ldr	r2, [pc, #464]	; (8001cb4 <HAL_RCC_OscConfig+0x4e8>)
 8001ae4:	f023 0301 	bic.w	r3, r3, #1
 8001ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aea:	4b72      	ldr	r3, [pc, #456]	; (8001cb4 <HAL_RCC_OscConfig+0x4e8>)
 8001aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aee:	4a71      	ldr	r2, [pc, #452]	; (8001cb4 <HAL_RCC_OscConfig+0x4e8>)
 8001af0:	f023 0304 	bic.w	r3, r3, #4
 8001af4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d015      	beq.n	8001b2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afe:	f7ff fb57 	bl	80011b0 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b04:	e00a      	b.n	8001b1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b06:	f7ff fb53 	bl	80011b0 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e0c5      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1c:	4b65      	ldr	r3, [pc, #404]	; (8001cb4 <HAL_RCC_OscConfig+0x4e8>)
 8001b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0ee      	beq.n	8001b06 <HAL_RCC_OscConfig+0x33a>
 8001b28:	e014      	b.n	8001b54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff fb41 	bl	80011b0 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b30:	e00a      	b.n	8001b48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b32:	f7ff fb3d 	bl	80011b0 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e0af      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b48:	4b5a      	ldr	r3, [pc, #360]	; (8001cb4 <HAL_RCC_OscConfig+0x4e8>)
 8001b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1ee      	bne.n	8001b32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d105      	bne.n	8001b66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5a:	4b56      	ldr	r3, [pc, #344]	; (8001cb4 <HAL_RCC_OscConfig+0x4e8>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a55      	ldr	r2, [pc, #340]	; (8001cb4 <HAL_RCC_OscConfig+0x4e8>)
 8001b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 809b 	beq.w	8001ca6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b70:	4b50      	ldr	r3, [pc, #320]	; (8001cb4 <HAL_RCC_OscConfig+0x4e8>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 030c 	and.w	r3, r3, #12
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d05c      	beq.n	8001c36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d141      	bne.n	8001c08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b84:	4b4c      	ldr	r3, [pc, #304]	; (8001cb8 <HAL_RCC_OscConfig+0x4ec>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8a:	f7ff fb11 	bl	80011b0 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b92:	f7ff fb0d 	bl	80011b0 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e081      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba4:	4b43      	ldr	r3, [pc, #268]	; (8001cb4 <HAL_RCC_OscConfig+0x4e8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f0      	bne.n	8001b92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69da      	ldr	r2, [r3, #28]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	019b      	lsls	r3, r3, #6
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc6:	085b      	lsrs	r3, r3, #1
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	041b      	lsls	r3, r3, #16
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd2:	061b      	lsls	r3, r3, #24
 8001bd4:	4937      	ldr	r1, [pc, #220]	; (8001cb4 <HAL_RCC_OscConfig+0x4e8>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bda:	4b37      	ldr	r3, [pc, #220]	; (8001cb8 <HAL_RCC_OscConfig+0x4ec>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff fae6 	bl	80011b0 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be8:	f7ff fae2 	bl	80011b0 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e056      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfa:	4b2e      	ldr	r3, [pc, #184]	; (8001cb4 <HAL_RCC_OscConfig+0x4e8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x41c>
 8001c06:	e04e      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c08:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <HAL_RCC_OscConfig+0x4ec>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0e:	f7ff facf 	bl	80011b0 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c16:	f7ff facb 	bl	80011b0 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e03f      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c28:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <HAL_RCC_OscConfig+0x4e8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1f0      	bne.n	8001c16 <HAL_RCC_OscConfig+0x44a>
 8001c34:	e037      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e032      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c42:	4b1c      	ldr	r3, [pc, #112]	; (8001cb4 <HAL_RCC_OscConfig+0x4e8>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d028      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d121      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d11a      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c72:	4013      	ands	r3, r2
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c78:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d111      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c88:	085b      	lsrs	r3, r3, #1
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d001      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40007000 	.word	0x40007000
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	42470060 	.word	0x42470060

08001cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0cc      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd0:	4b68      	ldr	r3, [pc, #416]	; (8001e74 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d90c      	bls.n	8001cf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cde:	4b65      	ldr	r3, [pc, #404]	; (8001e74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce6:	4b63      	ldr	r3, [pc, #396]	; (8001e74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d001      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e0b8      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d020      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d10:	4b59      	ldr	r3, [pc, #356]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	4a58      	ldr	r2, [pc, #352]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d005      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d28:	4b53      	ldr	r3, [pc, #332]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	4a52      	ldr	r2, [pc, #328]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d34:	4b50      	ldr	r3, [pc, #320]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	494d      	ldr	r1, [pc, #308]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d044      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d107      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5a:	4b47      	ldr	r3, [pc, #284]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d119      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e07f      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d003      	beq.n	8001d7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d107      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7a:	4b3f      	ldr	r3, [pc, #252]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d109      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e06f      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8a:	4b3b      	ldr	r3, [pc, #236]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e067      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d9a:	4b37      	ldr	r3, [pc, #220]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f023 0203 	bic.w	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4934      	ldr	r1, [pc, #208]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dac:	f7ff fa00 	bl	80011b0 <HAL_GetTick>
 8001db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db2:	e00a      	b.n	8001dca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db4:	f7ff f9fc 	bl	80011b0 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e04f      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dca:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 020c 	and.w	r2, r3, #12
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d1eb      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ddc:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <HAL_RCC_ClockConfig+0x1b8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d20c      	bcs.n	8001e04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dea:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <HAL_RCC_ClockConfig+0x1b8>)
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df2:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <HAL_RCC_ClockConfig+0x1b8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e032      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d008      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e10:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	4916      	ldr	r1, [pc, #88]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d009      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e2e:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	490e      	ldr	r1, [pc, #56]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e42:	f000 f821 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
 8001e46:	4602      	mov	r2, r0
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	490a      	ldr	r1, [pc, #40]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001e54:	5ccb      	ldrb	r3, [r1, r3]
 8001e56:	fa22 f303 	lsr.w	r3, r2, r3
 8001e5a:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_RCC_ClockConfig+0x1c8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff f960 	bl	8001128 <HAL_InitTick>

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40023c00 	.word	0x40023c00
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	08006970 	.word	0x08006970
 8001e80:	20000000 	.word	0x20000000
 8001e84:	20000004 	.word	0x20000004

08001e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e88:	b5b0      	push	{r4, r5, r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e8e:	2100      	movs	r1, #0
 8001e90:	6079      	str	r1, [r7, #4]
 8001e92:	2100      	movs	r1, #0
 8001e94:	60f9      	str	r1, [r7, #12]
 8001e96:	2100      	movs	r1, #0
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e9e:	4952      	ldr	r1, [pc, #328]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ea0:	6889      	ldr	r1, [r1, #8]
 8001ea2:	f001 010c 	and.w	r1, r1, #12
 8001ea6:	2908      	cmp	r1, #8
 8001ea8:	d00d      	beq.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x3e>
 8001eaa:	2908      	cmp	r1, #8
 8001eac:	f200 8094 	bhi.w	8001fd8 <HAL_RCC_GetSysClockFreq+0x150>
 8001eb0:	2900      	cmp	r1, #0
 8001eb2:	d002      	beq.n	8001eba <HAL_RCC_GetSysClockFreq+0x32>
 8001eb4:	2904      	cmp	r1, #4
 8001eb6:	d003      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x38>
 8001eb8:	e08e      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eba:	4b4c      	ldr	r3, [pc, #304]	; (8001fec <HAL_RCC_GetSysClockFreq+0x164>)
 8001ebc:	60bb      	str	r3, [r7, #8]
       break;
 8001ebe:	e08e      	b.n	8001fde <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ec0:	4b4b      	ldr	r3, [pc, #300]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001ec2:	60bb      	str	r3, [r7, #8]
      break;
 8001ec4:	e08b      	b.n	8001fde <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ec6:	4948      	ldr	r1, [pc, #288]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ec8:	6849      	ldr	r1, [r1, #4]
 8001eca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001ece:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ed0:	4945      	ldr	r1, [pc, #276]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ed2:	6849      	ldr	r1, [r1, #4]
 8001ed4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001ed8:	2900      	cmp	r1, #0
 8001eda:	d024      	beq.n	8001f26 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001edc:	4942      	ldr	r1, [pc, #264]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ede:	6849      	ldr	r1, [r1, #4]
 8001ee0:	0989      	lsrs	r1, r1, #6
 8001ee2:	4608      	mov	r0, r1
 8001ee4:	f04f 0100 	mov.w	r1, #0
 8001ee8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001eec:	f04f 0500 	mov.w	r5, #0
 8001ef0:	ea00 0204 	and.w	r2, r0, r4
 8001ef4:	ea01 0305 	and.w	r3, r1, r5
 8001ef8:	493d      	ldr	r1, [pc, #244]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001efa:	fb01 f003 	mul.w	r0, r1, r3
 8001efe:	2100      	movs	r1, #0
 8001f00:	fb01 f102 	mul.w	r1, r1, r2
 8001f04:	1844      	adds	r4, r0, r1
 8001f06:	493a      	ldr	r1, [pc, #232]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001f08:	fba2 0101 	umull	r0, r1, r2, r1
 8001f0c:	1863      	adds	r3, r4, r1
 8001f0e:	4619      	mov	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	461a      	mov	r2, r3
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	f7fe f9aa 	bl	8000270 <__aeabi_uldivmod>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4613      	mov	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	e04a      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f26:	4b30      	ldr	r3, [pc, #192]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	099b      	lsrs	r3, r3, #6
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f04f 0300 	mov.w	r3, #0
 8001f32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f36:	f04f 0100 	mov.w	r1, #0
 8001f3a:	ea02 0400 	and.w	r4, r2, r0
 8001f3e:	ea03 0501 	and.w	r5, r3, r1
 8001f42:	4620      	mov	r0, r4
 8001f44:	4629      	mov	r1, r5
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	f04f 0300 	mov.w	r3, #0
 8001f4e:	014b      	lsls	r3, r1, #5
 8001f50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f54:	0142      	lsls	r2, r0, #5
 8001f56:	4610      	mov	r0, r2
 8001f58:	4619      	mov	r1, r3
 8001f5a:	1b00      	subs	r0, r0, r4
 8001f5c:	eb61 0105 	sbc.w	r1, r1, r5
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	018b      	lsls	r3, r1, #6
 8001f6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f6e:	0182      	lsls	r2, r0, #6
 8001f70:	1a12      	subs	r2, r2, r0
 8001f72:	eb63 0301 	sbc.w	r3, r3, r1
 8001f76:	f04f 0000 	mov.w	r0, #0
 8001f7a:	f04f 0100 	mov.w	r1, #0
 8001f7e:	00d9      	lsls	r1, r3, #3
 8001f80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f84:	00d0      	lsls	r0, r2, #3
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	1912      	adds	r2, r2, r4
 8001f8c:	eb45 0303 	adc.w	r3, r5, r3
 8001f90:	f04f 0000 	mov.w	r0, #0
 8001f94:	f04f 0100 	mov.w	r1, #0
 8001f98:	0299      	lsls	r1, r3, #10
 8001f9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f9e:	0290      	lsls	r0, r2, #10
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	461a      	mov	r2, r3
 8001fac:	f04f 0300 	mov.w	r3, #0
 8001fb0:	f7fe f95e 	bl	8000270 <__aeabi_uldivmod>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4613      	mov	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	0c1b      	lsrs	r3, r3, #16
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd4:	60bb      	str	r3, [r7, #8]
      break;
 8001fd6:	e002      	b.n	8001fde <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <HAL_RCC_GetSysClockFreq+0x164>)
 8001fda:	60bb      	str	r3, [r7, #8]
      break;
 8001fdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fde:	68bb      	ldr	r3, [r7, #8]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bdb0      	pop	{r4, r5, r7, pc}
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	00f42400 	.word	0x00f42400
 8001ff0:	017d7840 	.word	0x017d7840

08001ff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e041      	b.n	800208a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d106      	bne.n	8002020 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe fec2 	bl	8000da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3304      	adds	r3, #4
 8002030:	4619      	mov	r1, r3
 8002032:	4610      	mov	r0, r2
 8002034:	f000 fc02 	bl	800283c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e041      	b.n	8002128 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d106      	bne.n	80020be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7fe fefb 	bl	8000eb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2202      	movs	r2, #2
 80020c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3304      	adds	r3, #4
 80020ce:	4619      	mov	r1, r3
 80020d0:	4610      	mov	r0, r2
 80020d2:	f000 fbb3 	bl	800283c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d109      	bne.n	8002154 <HAL_TIM_PWM_Start+0x24>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b01      	cmp	r3, #1
 800214a:	bf14      	ite	ne
 800214c:	2301      	movne	r3, #1
 800214e:	2300      	moveq	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	e022      	b.n	800219a <HAL_TIM_PWM_Start+0x6a>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2b04      	cmp	r3, #4
 8002158:	d109      	bne.n	800216e <HAL_TIM_PWM_Start+0x3e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b01      	cmp	r3, #1
 8002164:	bf14      	ite	ne
 8002166:	2301      	movne	r3, #1
 8002168:	2300      	moveq	r3, #0
 800216a:	b2db      	uxtb	r3, r3
 800216c:	e015      	b.n	800219a <HAL_TIM_PWM_Start+0x6a>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	2b08      	cmp	r3, #8
 8002172:	d109      	bne.n	8002188 <HAL_TIM_PWM_Start+0x58>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b01      	cmp	r3, #1
 800217e:	bf14      	ite	ne
 8002180:	2301      	movne	r3, #1
 8002182:	2300      	moveq	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	e008      	b.n	800219a <HAL_TIM_PWM_Start+0x6a>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b01      	cmp	r3, #1
 8002192:	bf14      	ite	ne
 8002194:	2301      	movne	r3, #1
 8002196:	2300      	moveq	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e07c      	b.n	800229c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d104      	bne.n	80021b2 <HAL_TIM_PWM_Start+0x82>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021b0:	e013      	b.n	80021da <HAL_TIM_PWM_Start+0xaa>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d104      	bne.n	80021c2 <HAL_TIM_PWM_Start+0x92>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2202      	movs	r2, #2
 80021bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021c0:	e00b      	b.n	80021da <HAL_TIM_PWM_Start+0xaa>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d104      	bne.n	80021d2 <HAL_TIM_PWM_Start+0xa2>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021d0:	e003      	b.n	80021da <HAL_TIM_PWM_Start+0xaa>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2202      	movs	r2, #2
 80021d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2201      	movs	r2, #1
 80021e0:	6839      	ldr	r1, [r7, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 fe14 	bl	8002e10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a2d      	ldr	r2, [pc, #180]	; (80022a4 <HAL_TIM_PWM_Start+0x174>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d004      	beq.n	80021fc <HAL_TIM_PWM_Start+0xcc>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a2c      	ldr	r2, [pc, #176]	; (80022a8 <HAL_TIM_PWM_Start+0x178>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d101      	bne.n	8002200 <HAL_TIM_PWM_Start+0xd0>
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <HAL_TIM_PWM_Start+0xd2>
 8002200:	2300      	movs	r3, #0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d007      	beq.n	8002216 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002214:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a22      	ldr	r2, [pc, #136]	; (80022a4 <HAL_TIM_PWM_Start+0x174>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d022      	beq.n	8002266 <HAL_TIM_PWM_Start+0x136>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002228:	d01d      	beq.n	8002266 <HAL_TIM_PWM_Start+0x136>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a1f      	ldr	r2, [pc, #124]	; (80022ac <HAL_TIM_PWM_Start+0x17c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d018      	beq.n	8002266 <HAL_TIM_PWM_Start+0x136>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1d      	ldr	r2, [pc, #116]	; (80022b0 <HAL_TIM_PWM_Start+0x180>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <HAL_TIM_PWM_Start+0x136>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1c      	ldr	r2, [pc, #112]	; (80022b4 <HAL_TIM_PWM_Start+0x184>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d00e      	beq.n	8002266 <HAL_TIM_PWM_Start+0x136>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a16      	ldr	r2, [pc, #88]	; (80022a8 <HAL_TIM_PWM_Start+0x178>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d009      	beq.n	8002266 <HAL_TIM_PWM_Start+0x136>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a18      	ldr	r2, [pc, #96]	; (80022b8 <HAL_TIM_PWM_Start+0x188>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d004      	beq.n	8002266 <HAL_TIM_PWM_Start+0x136>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a16      	ldr	r2, [pc, #88]	; (80022bc <HAL_TIM_PWM_Start+0x18c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d111      	bne.n	800228a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b06      	cmp	r3, #6
 8002276:	d010      	beq.n	800229a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002288:	e007      	b.n	800229a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0201 	orr.w	r2, r2, #1
 8002298:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40010000 	.word	0x40010000
 80022a8:	40010400 	.word	0x40010400
 80022ac:	40000400 	.word	0x40000400
 80022b0:	40000800 	.word	0x40000800
 80022b4:	40000c00 	.word	0x40000c00
 80022b8:	40014000 	.word	0x40014000
 80022bc:	40001800 	.word	0x40001800

080022c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e097      	b.n	8002404 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d106      	bne.n	80022ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7fe fd7d 	bl	8000de8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2202      	movs	r2, #2
 80022f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002304:	f023 0307 	bic.w	r3, r3, #7
 8002308:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3304      	adds	r3, #4
 8002312:	4619      	mov	r1, r3
 8002314:	4610      	mov	r0, r2
 8002316:	f000 fa91 	bl	800283c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	4313      	orrs	r3, r2
 800233a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002342:	f023 0303 	bic.w	r3, r3, #3
 8002346:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	021b      	lsls	r3, r3, #8
 8002352:	4313      	orrs	r3, r2
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002360:	f023 030c 	bic.w	r3, r3, #12
 8002364:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800236c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002370:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	021b      	lsls	r3, r3, #8
 800237c:	4313      	orrs	r3, r2
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	011a      	lsls	r2, r3, #4
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	031b      	lsls	r3, r3, #12
 8002390:	4313      	orrs	r3, r2
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800239e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80023a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	4313      	orrs	r3, r2
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800241c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002424:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800242c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002434:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d110      	bne.n	800245e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d102      	bne.n	8002448 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002442:	7b7b      	ldrb	r3, [r7, #13]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d001      	beq.n	800244c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e069      	b.n	8002520 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800245c:	e031      	b.n	80024c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b04      	cmp	r3, #4
 8002462:	d110      	bne.n	8002486 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002464:	7bbb      	ldrb	r3, [r7, #14]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d102      	bne.n	8002470 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800246a:	7b3b      	ldrb	r3, [r7, #12]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d001      	beq.n	8002474 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e055      	b.n	8002520 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002484:	e01d      	b.n	80024c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d108      	bne.n	800249e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800248c:	7bbb      	ldrb	r3, [r7, #14]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d105      	bne.n	800249e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002492:	7b7b      	ldrb	r3, [r7, #13]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d102      	bne.n	800249e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002498:	7b3b      	ldrb	r3, [r7, #12]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d001      	beq.n	80024a2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e03e      	b.n	8002520 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2202      	movs	r2, #2
 80024a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2202      	movs	r2, #2
 80024ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2202      	movs	r2, #2
 80024b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2202      	movs	r2, #2
 80024be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_TIM_Encoder_Start+0xc4>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d008      	beq.n	80024e0 <HAL_TIM_Encoder_Start+0xd4>
 80024ce:	e00f      	b.n	80024f0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2201      	movs	r2, #1
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 fc99 	bl	8002e10 <TIM_CCxChannelCmd>
      break;
 80024de:	e016      	b.n	800250e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2201      	movs	r2, #1
 80024e6:	2104      	movs	r1, #4
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 fc91 	bl	8002e10 <TIM_CCxChannelCmd>
      break;
 80024ee:	e00e      	b.n	800250e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2201      	movs	r2, #1
 80024f6:	2100      	movs	r1, #0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 fc89 	bl	8002e10 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2201      	movs	r2, #1
 8002504:	2104      	movs	r1, #4
 8002506:	4618      	mov	r0, r3
 8002508:	f000 fc82 	bl	8002e10 <TIM_CCxChannelCmd>
      break;
 800250c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 0201 	orr.w	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002542:	2302      	movs	r3, #2
 8002544:	e0ae      	b.n	80026a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b0c      	cmp	r3, #12
 8002552:	f200 809f 	bhi.w	8002694 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002556:	a201      	add	r2, pc, #4	; (adr r2, 800255c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255c:	08002591 	.word	0x08002591
 8002560:	08002695 	.word	0x08002695
 8002564:	08002695 	.word	0x08002695
 8002568:	08002695 	.word	0x08002695
 800256c:	080025d1 	.word	0x080025d1
 8002570:	08002695 	.word	0x08002695
 8002574:	08002695 	.word	0x08002695
 8002578:	08002695 	.word	0x08002695
 800257c:	08002613 	.word	0x08002613
 8002580:	08002695 	.word	0x08002695
 8002584:	08002695 	.word	0x08002695
 8002588:	08002695 	.word	0x08002695
 800258c:	08002653 	.word	0x08002653
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f9f0 	bl	800297c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699a      	ldr	r2, [r3, #24]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0208 	orr.w	r2, r2, #8
 80025aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699a      	ldr	r2, [r3, #24]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0204 	bic.w	r2, r2, #4
 80025ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6999      	ldr	r1, [r3, #24]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	691a      	ldr	r2, [r3, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	619a      	str	r2, [r3, #24]
      break;
 80025ce:	e064      	b.n	800269a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68b9      	ldr	r1, [r7, #8]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fa40 	bl	8002a5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699a      	ldr	r2, [r3, #24]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6999      	ldr	r1, [r3, #24]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	021a      	lsls	r2, r3, #8
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	619a      	str	r2, [r3, #24]
      break;
 8002610:	e043      	b.n	800269a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68b9      	ldr	r1, [r7, #8]
 8002618:	4618      	mov	r0, r3
 800261a:	f000 fa95 	bl	8002b48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	69da      	ldr	r2, [r3, #28]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f042 0208 	orr.w	r2, r2, #8
 800262c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	69da      	ldr	r2, [r3, #28]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0204 	bic.w	r2, r2, #4
 800263c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	69d9      	ldr	r1, [r3, #28]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	61da      	str	r2, [r3, #28]
      break;
 8002650:	e023      	b.n	800269a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68b9      	ldr	r1, [r7, #8]
 8002658:	4618      	mov	r0, r3
 800265a:	f000 fae9 	bl	8002c30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	69da      	ldr	r2, [r3, #28]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800266c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	69da      	ldr	r2, [r3, #28]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800267c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	69d9      	ldr	r1, [r3, #28]
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	021a      	lsls	r2, r3, #8
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	61da      	str	r2, [r3, #28]
      break;
 8002692:	e002      	b.n	800269a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	75fb      	strb	r3, [r7, #23]
      break;
 8002698:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_TIM_ConfigClockSource+0x1c>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e0b4      	b.n	8002832 <HAL_TIM_ConfigClockSource+0x186>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2202      	movs	r2, #2
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002700:	d03e      	beq.n	8002780 <HAL_TIM_ConfigClockSource+0xd4>
 8002702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002706:	f200 8087 	bhi.w	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 800270a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800270e:	f000 8086 	beq.w	800281e <HAL_TIM_ConfigClockSource+0x172>
 8002712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002716:	d87f      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002718:	2b70      	cmp	r3, #112	; 0x70
 800271a:	d01a      	beq.n	8002752 <HAL_TIM_ConfigClockSource+0xa6>
 800271c:	2b70      	cmp	r3, #112	; 0x70
 800271e:	d87b      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002720:	2b60      	cmp	r3, #96	; 0x60
 8002722:	d050      	beq.n	80027c6 <HAL_TIM_ConfigClockSource+0x11a>
 8002724:	2b60      	cmp	r3, #96	; 0x60
 8002726:	d877      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002728:	2b50      	cmp	r3, #80	; 0x50
 800272a:	d03c      	beq.n	80027a6 <HAL_TIM_ConfigClockSource+0xfa>
 800272c:	2b50      	cmp	r3, #80	; 0x50
 800272e:	d873      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002730:	2b40      	cmp	r3, #64	; 0x40
 8002732:	d058      	beq.n	80027e6 <HAL_TIM_ConfigClockSource+0x13a>
 8002734:	2b40      	cmp	r3, #64	; 0x40
 8002736:	d86f      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002738:	2b30      	cmp	r3, #48	; 0x30
 800273a:	d064      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x15a>
 800273c:	2b30      	cmp	r3, #48	; 0x30
 800273e:	d86b      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002740:	2b20      	cmp	r3, #32
 8002742:	d060      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x15a>
 8002744:	2b20      	cmp	r3, #32
 8002746:	d867      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002748:	2b00      	cmp	r3, #0
 800274a:	d05c      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x15a>
 800274c:	2b10      	cmp	r3, #16
 800274e:	d05a      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x15a>
 8002750:	e062      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6899      	ldr	r1, [r3, #8]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f000 fb35 	bl	8002dd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002774:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	609a      	str	r2, [r3, #8]
      break;
 800277e:	e04f      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	6899      	ldr	r1, [r3, #8]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f000 fb1e 	bl	8002dd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027a2:	609a      	str	r2, [r3, #8]
      break;
 80027a4:	e03c      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	6859      	ldr	r1, [r3, #4]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	461a      	mov	r2, r3
 80027b4:	f000 fa92 	bl	8002cdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2150      	movs	r1, #80	; 0x50
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 faeb 	bl	8002d9a <TIM_ITRx_SetConfig>
      break;
 80027c4:	e02c      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6859      	ldr	r1, [r3, #4]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	461a      	mov	r2, r3
 80027d4:	f000 fab1 	bl	8002d3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2160      	movs	r1, #96	; 0x60
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 fadb 	bl	8002d9a <TIM_ITRx_SetConfig>
      break;
 80027e4:	e01c      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6859      	ldr	r1, [r3, #4]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	461a      	mov	r2, r3
 80027f4:	f000 fa72 	bl	8002cdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2140      	movs	r1, #64	; 0x40
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 facb 	bl	8002d9a <TIM_ITRx_SetConfig>
      break;
 8002804:	e00c      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4619      	mov	r1, r3
 8002810:	4610      	mov	r0, r2
 8002812:	f000 fac2 	bl	8002d9a <TIM_ITRx_SetConfig>
      break;
 8002816:	e003      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
      break;
 800281c:	e000      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800281e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002830:	7bfb      	ldrb	r3, [r7, #15]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a40      	ldr	r2, [pc, #256]	; (8002950 <TIM_Base_SetConfig+0x114>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d013      	beq.n	800287c <TIM_Base_SetConfig+0x40>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800285a:	d00f      	beq.n	800287c <TIM_Base_SetConfig+0x40>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a3d      	ldr	r2, [pc, #244]	; (8002954 <TIM_Base_SetConfig+0x118>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d00b      	beq.n	800287c <TIM_Base_SetConfig+0x40>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a3c      	ldr	r2, [pc, #240]	; (8002958 <TIM_Base_SetConfig+0x11c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d007      	beq.n	800287c <TIM_Base_SetConfig+0x40>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a3b      	ldr	r2, [pc, #236]	; (800295c <TIM_Base_SetConfig+0x120>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d003      	beq.n	800287c <TIM_Base_SetConfig+0x40>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a3a      	ldr	r2, [pc, #232]	; (8002960 <TIM_Base_SetConfig+0x124>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d108      	bne.n	800288e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a2f      	ldr	r2, [pc, #188]	; (8002950 <TIM_Base_SetConfig+0x114>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d02b      	beq.n	80028ee <TIM_Base_SetConfig+0xb2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289c:	d027      	beq.n	80028ee <TIM_Base_SetConfig+0xb2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a2c      	ldr	r2, [pc, #176]	; (8002954 <TIM_Base_SetConfig+0x118>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d023      	beq.n	80028ee <TIM_Base_SetConfig+0xb2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a2b      	ldr	r2, [pc, #172]	; (8002958 <TIM_Base_SetConfig+0x11c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d01f      	beq.n	80028ee <TIM_Base_SetConfig+0xb2>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a2a      	ldr	r2, [pc, #168]	; (800295c <TIM_Base_SetConfig+0x120>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d01b      	beq.n	80028ee <TIM_Base_SetConfig+0xb2>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a29      	ldr	r2, [pc, #164]	; (8002960 <TIM_Base_SetConfig+0x124>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d017      	beq.n	80028ee <TIM_Base_SetConfig+0xb2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a28      	ldr	r2, [pc, #160]	; (8002964 <TIM_Base_SetConfig+0x128>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d013      	beq.n	80028ee <TIM_Base_SetConfig+0xb2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a27      	ldr	r2, [pc, #156]	; (8002968 <TIM_Base_SetConfig+0x12c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d00f      	beq.n	80028ee <TIM_Base_SetConfig+0xb2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a26      	ldr	r2, [pc, #152]	; (800296c <TIM_Base_SetConfig+0x130>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00b      	beq.n	80028ee <TIM_Base_SetConfig+0xb2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a25      	ldr	r2, [pc, #148]	; (8002970 <TIM_Base_SetConfig+0x134>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d007      	beq.n	80028ee <TIM_Base_SetConfig+0xb2>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a24      	ldr	r2, [pc, #144]	; (8002974 <TIM_Base_SetConfig+0x138>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d003      	beq.n	80028ee <TIM_Base_SetConfig+0xb2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a23      	ldr	r2, [pc, #140]	; (8002978 <TIM_Base_SetConfig+0x13c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d108      	bne.n	8002900 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <TIM_Base_SetConfig+0x114>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d003      	beq.n	8002934 <TIM_Base_SetConfig+0xf8>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a0c      	ldr	r2, [pc, #48]	; (8002960 <TIM_Base_SetConfig+0x124>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d103      	bne.n	800293c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	615a      	str	r2, [r3, #20]
}
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40010000 	.word	0x40010000
 8002954:	40000400 	.word	0x40000400
 8002958:	40000800 	.word	0x40000800
 800295c:	40000c00 	.word	0x40000c00
 8002960:	40010400 	.word	0x40010400
 8002964:	40014000 	.word	0x40014000
 8002968:	40014400 	.word	0x40014400
 800296c:	40014800 	.word	0x40014800
 8002970:	40001800 	.word	0x40001800
 8002974:	40001c00 	.word	0x40001c00
 8002978:	40002000 	.word	0x40002000

0800297c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800297c:	b480      	push	{r7}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	f023 0201 	bic.w	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f023 0303 	bic.w	r3, r3, #3
 80029b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f023 0302 	bic.w	r3, r3, #2
 80029c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a20      	ldr	r2, [pc, #128]	; (8002a54 <TIM_OC1_SetConfig+0xd8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d003      	beq.n	80029e0 <TIM_OC1_SetConfig+0x64>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a1f      	ldr	r2, [pc, #124]	; (8002a58 <TIM_OC1_SetConfig+0xdc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d10c      	bne.n	80029fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f023 0308 	bic.w	r3, r3, #8
 80029e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f023 0304 	bic.w	r3, r3, #4
 80029f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a15      	ldr	r2, [pc, #84]	; (8002a54 <TIM_OC1_SetConfig+0xd8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d003      	beq.n	8002a0a <TIM_OC1_SetConfig+0x8e>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a14      	ldr	r2, [pc, #80]	; (8002a58 <TIM_OC1_SetConfig+0xdc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d111      	bne.n	8002a2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	621a      	str	r2, [r3, #32]
}
 8002a48:	bf00      	nop
 8002a4a:	371c      	adds	r7, #28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	40010000 	.word	0x40010000
 8002a58:	40010400 	.word	0x40010400

08002a5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	f023 0210 	bic.w	r2, r3, #16
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	021b      	lsls	r3, r3, #8
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f023 0320 	bic.w	r3, r3, #32
 8002aa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a22      	ldr	r2, [pc, #136]	; (8002b40 <TIM_OC2_SetConfig+0xe4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d003      	beq.n	8002ac4 <TIM_OC2_SetConfig+0x68>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a21      	ldr	r2, [pc, #132]	; (8002b44 <TIM_OC2_SetConfig+0xe8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d10d      	bne.n	8002ae0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ade:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a17      	ldr	r2, [pc, #92]	; (8002b40 <TIM_OC2_SetConfig+0xe4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d003      	beq.n	8002af0 <TIM_OC2_SetConfig+0x94>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a16      	ldr	r2, [pc, #88]	; (8002b44 <TIM_OC2_SetConfig+0xe8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d113      	bne.n	8002b18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002af6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002afe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	621a      	str	r2, [r3, #32]
}
 8002b32:	bf00      	nop
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40010000 	.word	0x40010000
 8002b44:	40010400 	.word	0x40010400

08002b48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f023 0303 	bic.w	r3, r3, #3
 8002b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a21      	ldr	r2, [pc, #132]	; (8002c28 <TIM_OC3_SetConfig+0xe0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d003      	beq.n	8002bae <TIM_OC3_SetConfig+0x66>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a20      	ldr	r2, [pc, #128]	; (8002c2c <TIM_OC3_SetConfig+0xe4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d10d      	bne.n	8002bca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	021b      	lsls	r3, r3, #8
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a16      	ldr	r2, [pc, #88]	; (8002c28 <TIM_OC3_SetConfig+0xe0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d003      	beq.n	8002bda <TIM_OC3_SetConfig+0x92>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a15      	ldr	r2, [pc, #84]	; (8002c2c <TIM_OC3_SetConfig+0xe4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d113      	bne.n	8002c02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	621a      	str	r2, [r3, #32]
}
 8002c1c:	bf00      	nop
 8002c1e:	371c      	adds	r7, #28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	40010000 	.word	0x40010000
 8002c2c:	40010400 	.word	0x40010400

08002c30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	031b      	lsls	r3, r3, #12
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a12      	ldr	r2, [pc, #72]	; (8002cd4 <TIM_OC4_SetConfig+0xa4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d003      	beq.n	8002c98 <TIM_OC4_SetConfig+0x68>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a11      	ldr	r2, [pc, #68]	; (8002cd8 <TIM_OC4_SetConfig+0xa8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d109      	bne.n	8002cac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	019b      	lsls	r3, r3, #6
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	621a      	str	r2, [r3, #32]
}
 8002cc6:	bf00      	nop
 8002cc8:	371c      	adds	r7, #28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40010000 	.word	0x40010000
 8002cd8:	40010400 	.word	0x40010400

08002cdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	f023 0201 	bic.w	r2, r3, #1
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f023 030a 	bic.w	r3, r3, #10
 8002d18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	621a      	str	r2, [r3, #32]
}
 8002d2e:	bf00      	nop
 8002d30:	371c      	adds	r7, #28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b087      	sub	sp, #28
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	f023 0210 	bic.w	r2, r3, #16
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	031b      	lsls	r3, r3, #12
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	621a      	str	r2, [r3, #32]
}
 8002d8e:	bf00      	nop
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b085      	sub	sp, #20
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f043 0307 	orr.w	r3, r3, #7
 8002dbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	609a      	str	r2, [r3, #8]
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	021a      	lsls	r2, r3, #8
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	609a      	str	r2, [r3, #8]
}
 8002e04:	bf00      	nop
 8002e06:	371c      	adds	r7, #28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b087      	sub	sp, #28
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	2201      	movs	r2, #1
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6a1a      	ldr	r2, [r3, #32]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	401a      	ands	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a1a      	ldr	r2, [r3, #32]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f003 031f 	and.w	r3, r3, #31
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	fa01 f303 	lsl.w	r3, r1, r3
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	621a      	str	r2, [r3, #32]
}
 8002e4e:	bf00      	nop
 8002e50:	371c      	adds	r7, #28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
	...

08002e5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e05a      	b.n	8002f2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a21      	ldr	r2, [pc, #132]	; (8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d022      	beq.n	8002efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec0:	d01d      	beq.n	8002efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a1d      	ldr	r2, [pc, #116]	; (8002f3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d018      	beq.n	8002efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a1b      	ldr	r2, [pc, #108]	; (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d013      	beq.n	8002efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a1a      	ldr	r2, [pc, #104]	; (8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00e      	beq.n	8002efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a18      	ldr	r2, [pc, #96]	; (8002f48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d009      	beq.n	8002efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a17      	ldr	r2, [pc, #92]	; (8002f4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d004      	beq.n	8002efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a15      	ldr	r2, [pc, #84]	; (8002f50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d10c      	bne.n	8002f18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40010000 	.word	0x40010000
 8002f3c:	40000400 	.word	0x40000400
 8002f40:	40000800 	.word	0x40000800
 8002f44:	40000c00 	.word	0x40000c00
 8002f48:	40010400 	.word	0x40010400
 8002f4c:	40014000 	.word	0x40014000
 8002f50:	40001800 	.word	0x40001800

08002f54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e03d      	b.n	8002fec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <__NVIC_SetPriority>:
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	6039      	str	r1, [r7, #0]
 8003002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003008:	2b00      	cmp	r3, #0
 800300a:	db0a      	blt.n	8003022 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	b2da      	uxtb	r2, r3
 8003010:	490c      	ldr	r1, [pc, #48]	; (8003044 <__NVIC_SetPriority+0x4c>)
 8003012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003016:	0112      	lsls	r2, r2, #4
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	440b      	add	r3, r1
 800301c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003020:	e00a      	b.n	8003038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	b2da      	uxtb	r2, r3
 8003026:	4908      	ldr	r1, [pc, #32]	; (8003048 <__NVIC_SetPriority+0x50>)
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	3b04      	subs	r3, #4
 8003030:	0112      	lsls	r2, r2, #4
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	440b      	add	r3, r1
 8003036:	761a      	strb	r2, [r3, #24]
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000e100 	.word	0xe000e100
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003050:	2100      	movs	r1, #0
 8003052:	f06f 0004 	mvn.w	r0, #4
 8003056:	f7ff ffcf 	bl	8002ff8 <__NVIC_SetPriority>
#endif
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003066:	f3ef 8305 	mrs	r3, IPSR
 800306a:	603b      	str	r3, [r7, #0]
  return(result);
 800306c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003072:	f06f 0305 	mvn.w	r3, #5
 8003076:	607b      	str	r3, [r7, #4]
 8003078:	e00c      	b.n	8003094 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800307a:	4b0a      	ldr	r3, [pc, #40]	; (80030a4 <osKernelInitialize+0x44>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d105      	bne.n	800308e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003082:	4b08      	ldr	r3, [pc, #32]	; (80030a4 <osKernelInitialize+0x44>)
 8003084:	2201      	movs	r2, #1
 8003086:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003088:	2300      	movs	r3, #0
 800308a:	607b      	str	r3, [r7, #4]
 800308c:	e002      	b.n	8003094 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800308e:	f04f 33ff 	mov.w	r3, #4294967295
 8003092:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003094:	687b      	ldr	r3, [r7, #4]
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	20000094 	.word	0x20000094

080030a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030ae:	f3ef 8305 	mrs	r3, IPSR
 80030b2:	603b      	str	r3, [r7, #0]
  return(result);
 80030b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80030ba:	f06f 0305 	mvn.w	r3, #5
 80030be:	607b      	str	r3, [r7, #4]
 80030c0:	e010      	b.n	80030e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80030c2:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <osKernelStart+0x48>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d109      	bne.n	80030de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80030ca:	f7ff ffbf 	bl	800304c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80030ce:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <osKernelStart+0x48>)
 80030d0:	2202      	movs	r2, #2
 80030d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80030d4:	f001 f866 	bl	80041a4 <vTaskStartScheduler>
      stat = osOK;
 80030d8:	2300      	movs	r3, #0
 80030da:	607b      	str	r3, [r7, #4]
 80030dc:	e002      	b.n	80030e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80030de:	f04f 33ff 	mov.w	r3, #4294967295
 80030e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80030e4:	687b      	ldr	r3, [r7, #4]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000094 	.word	0x20000094

080030f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08e      	sub	sp, #56	; 0x38
 80030f8:	af04      	add	r7, sp, #16
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003100:	2300      	movs	r3, #0
 8003102:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003104:	f3ef 8305 	mrs	r3, IPSR
 8003108:	617b      	str	r3, [r7, #20]
  return(result);
 800310a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800310c:	2b00      	cmp	r3, #0
 800310e:	d17e      	bne.n	800320e <osThreadNew+0x11a>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d07b      	beq.n	800320e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003116:	2380      	movs	r3, #128	; 0x80
 8003118:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800311a:	2318      	movs	r3, #24
 800311c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800311e:	2300      	movs	r3, #0
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003122:	f04f 33ff 	mov.w	r3, #4294967295
 8003126:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d045      	beq.n	80031ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <osThreadNew+0x48>
        name = attr->name;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <osThreadNew+0x6e>
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	2b38      	cmp	r3, #56	; 0x38
 8003154:	d805      	bhi.n	8003162 <osThreadNew+0x6e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <osThreadNew+0x72>
        return (NULL);
 8003162:	2300      	movs	r3, #0
 8003164:	e054      	b.n	8003210 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	089b      	lsrs	r3, r3, #2
 8003174:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00e      	beq.n	800319c <osThreadNew+0xa8>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	2b5b      	cmp	r3, #91	; 0x5b
 8003184:	d90a      	bls.n	800319c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800318a:	2b00      	cmp	r3, #0
 800318c:	d006      	beq.n	800319c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <osThreadNew+0xa8>
        mem = 1;
 8003196:	2301      	movs	r3, #1
 8003198:	61bb      	str	r3, [r7, #24]
 800319a:	e010      	b.n	80031be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10c      	bne.n	80031be <osThreadNew+0xca>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d108      	bne.n	80031be <osThreadNew+0xca>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d104      	bne.n	80031be <osThreadNew+0xca>
          mem = 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61bb      	str	r3, [r7, #24]
 80031b8:	e001      	b.n	80031be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d110      	bne.n	80031e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031cc:	9202      	str	r2, [sp, #8]
 80031ce:	9301      	str	r3, [sp, #4]
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	6a3a      	ldr	r2, [r7, #32]
 80031d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 fe0c 	bl	8003df8 <xTaskCreateStatic>
 80031e0:	4603      	mov	r3, r0
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	e013      	b.n	800320e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d110      	bne.n	800320e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	f107 0310 	add.w	r3, r7, #16
 80031f4:	9301      	str	r3, [sp, #4]
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 fe57 	bl	8003eb2 <xTaskCreate>
 8003204:	4603      	mov	r3, r0
 8003206:	2b01      	cmp	r3, #1
 8003208:	d001      	beq.n	800320e <osThreadNew+0x11a>
            hTask = NULL;
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800320e:	693b      	ldr	r3, [r7, #16]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3728      	adds	r7, #40	; 0x28
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003220:	f3ef 8305 	mrs	r3, IPSR
 8003224:	60bb      	str	r3, [r7, #8]
  return(result);
 8003226:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <osDelay+0x1c>
    stat = osErrorISR;
 800322c:	f06f 0305 	mvn.w	r3, #5
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	e007      	b.n	8003244 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <osDelay+0x2c>
      vTaskDelay(ticks);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 ff7c 	bl	800413c <vTaskDelay>
    }
  }

  return (stat);
 8003244:	68fb      	ldr	r3, [r7, #12]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4a07      	ldr	r2, [pc, #28]	; (800327c <vApplicationGetIdleTaskMemory+0x2c>)
 8003260:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	4a06      	ldr	r2, [pc, #24]	; (8003280 <vApplicationGetIdleTaskMemory+0x30>)
 8003266:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2280      	movs	r2, #128	; 0x80
 800326c:	601a      	str	r2, [r3, #0]
}
 800326e:	bf00      	nop
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	20000098 	.word	0x20000098
 8003280:	200000f4 	.word	0x200000f4

08003284 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4a07      	ldr	r2, [pc, #28]	; (80032b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003294:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	4a06      	ldr	r2, [pc, #24]	; (80032b4 <vApplicationGetTimerTaskMemory+0x30>)
 800329a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032a2:	601a      	str	r2, [r3, #0]
}
 80032a4:	bf00      	nop
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	200002f4 	.word	0x200002f4
 80032b4:	20000350 	.word	0x20000350

080032b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f103 0208 	add.w	r2, r3, #8
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f04f 32ff 	mov.w	r2, #4294967295
 80032d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f103 0208 	add.w	r2, r3, #8
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f103 0208 	add.w	r2, r3, #8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003312:	b480      	push	{r7}
 8003314:	b085      	sub	sp, #20
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	601a      	str	r2, [r3, #0]
}
 800334e:	bf00      	nop
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800335a:	b480      	push	{r7}
 800335c:	b085      	sub	sp, #20
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d103      	bne.n	800337a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	e00c      	b.n	8003394 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3308      	adds	r3, #8
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	e002      	b.n	8003388 <vListInsert+0x2e>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	429a      	cmp	r2, r3
 8003392:	d2f6      	bcs.n	8003382 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	601a      	str	r2, [r3, #0]
}
 80033c0:	bf00      	nop
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6892      	ldr	r2, [r2, #8]
 80033e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6852      	ldr	r2, [r2, #4]
 80033ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d103      	bne.n	8003400 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	1e5a      	subs	r2, r3, #1
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10a      	bne.n	800344a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003438:	f383 8811 	msr	BASEPRI, r3
 800343c:	f3bf 8f6f 	isb	sy
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003446:	bf00      	nop
 8003448:	e7fe      	b.n	8003448 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800344a:	f002 f84b 	bl	80054e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003456:	68f9      	ldr	r1, [r7, #12]
 8003458:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	441a      	add	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347a:	3b01      	subs	r3, #1
 800347c:	68f9      	ldr	r1, [r7, #12]
 800347e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	441a      	add	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	22ff      	movs	r2, #255	; 0xff
 800348e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	22ff      	movs	r2, #255	; 0xff
 8003496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d114      	bne.n	80034ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01a      	beq.n	80034de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	3310      	adds	r3, #16
 80034ac:	4618      	mov	r0, r3
 80034ae:	f001 f903 	bl	80046b8 <xTaskRemoveFromEventList>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d012      	beq.n	80034de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <xQueueGenericReset+0xcc>)
 80034ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	e009      	b.n	80034de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	3310      	adds	r3, #16
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fef2 	bl	80032b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	3324      	adds	r3, #36	; 0x24
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff feed 	bl	80032b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80034de:	f002 f831 	bl	8005544 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80034e2:	2301      	movs	r3, #1
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	e000ed04 	.word	0xe000ed04

080034f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08e      	sub	sp, #56	; 0x38
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10a      	bne.n	800351a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003508:	f383 8811 	msr	BASEPRI, r3
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003516:	bf00      	nop
 8003518:	e7fe      	b.n	8003518 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10a      	bne.n	8003536 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003532:	bf00      	nop
 8003534:	e7fe      	b.n	8003534 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <xQueueGenericCreateStatic+0x52>
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <xQueueGenericCreateStatic+0x56>
 8003542:	2301      	movs	r3, #1
 8003544:	e000      	b.n	8003548 <xQueueGenericCreateStatic+0x58>
 8003546:	2300      	movs	r3, #0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10a      	bne.n	8003562 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800354c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	623b      	str	r3, [r7, #32]
}
 800355e:	bf00      	nop
 8003560:	e7fe      	b.n	8003560 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d102      	bne.n	800356e <xQueueGenericCreateStatic+0x7e>
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <xQueueGenericCreateStatic+0x82>
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <xQueueGenericCreateStatic+0x84>
 8003572:	2300      	movs	r3, #0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10a      	bne.n	800358e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357c:	f383 8811 	msr	BASEPRI, r3
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	61fb      	str	r3, [r7, #28]
}
 800358a:	bf00      	nop
 800358c:	e7fe      	b.n	800358c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800358e:	2350      	movs	r3, #80	; 0x50
 8003590:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b50      	cmp	r3, #80	; 0x50
 8003596:	d00a      	beq.n	80035ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	61bb      	str	r3, [r7, #24]
}
 80035aa:	bf00      	nop
 80035ac:	e7fe      	b.n	80035ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80035ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80035b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00d      	beq.n	80035d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80035ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80035c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	4613      	mov	r3, r2
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f805 	bl	80035e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80035d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80035d8:	4618      	mov	r0, r3
 80035da:	3730      	adds	r7, #48	; 0x30
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d103      	bne.n	80035fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	e002      	b.n	8003602 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800360e:	2101      	movs	r1, #1
 8003610:	69b8      	ldr	r0, [r7, #24]
 8003612:	f7ff ff05 	bl	8003420 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800361e:	bf00      	nop
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08e      	sub	sp, #56	; 0x38
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003636:	2300      	movs	r3, #0
 8003638:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800363e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <xQueueGenericSend+0x32>
	__asm volatile
 8003644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003656:	bf00      	nop
 8003658:	e7fe      	b.n	8003658 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d103      	bne.n	8003668 <xQueueGenericSend+0x40>
 8003660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <xQueueGenericSend+0x44>
 8003668:	2301      	movs	r3, #1
 800366a:	e000      	b.n	800366e <xQueueGenericSend+0x46>
 800366c:	2300      	movs	r3, #0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10a      	bne.n	8003688 <xQueueGenericSend+0x60>
	__asm volatile
 8003672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003684:	bf00      	nop
 8003686:	e7fe      	b.n	8003686 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d103      	bne.n	8003696 <xQueueGenericSend+0x6e>
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <xQueueGenericSend+0x72>
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <xQueueGenericSend+0x74>
 800369a:	2300      	movs	r3, #0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10a      	bne.n	80036b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	623b      	str	r3, [r7, #32]
}
 80036b2:	bf00      	nop
 80036b4:	e7fe      	b.n	80036b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036b6:	f001 f9bd 	bl	8004a34 <xTaskGetSchedulerState>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d102      	bne.n	80036c6 <xQueueGenericSend+0x9e>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <xQueueGenericSend+0xa2>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <xQueueGenericSend+0xa4>
 80036ca:	2300      	movs	r3, #0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10a      	bne.n	80036e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80036d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	61fb      	str	r3, [r7, #28]
}
 80036e2:	bf00      	nop
 80036e4:	e7fe      	b.n	80036e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036e6:	f001 fefd 	bl	80054e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d302      	bcc.n	80036fc <xQueueGenericSend+0xd4>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d129      	bne.n	8003750 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	68b9      	ldr	r1, [r7, #8]
 8003700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003702:	f000 fa0b 	bl	8003b1c <prvCopyDataToQueue>
 8003706:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	2b00      	cmp	r3, #0
 800370e:	d010      	beq.n	8003732 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003712:	3324      	adds	r3, #36	; 0x24
 8003714:	4618      	mov	r0, r3
 8003716:	f000 ffcf 	bl	80046b8 <xTaskRemoveFromEventList>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d013      	beq.n	8003748 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003720:	4b3f      	ldr	r3, [pc, #252]	; (8003820 <xQueueGenericSend+0x1f8>)
 8003722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	f3bf 8f4f 	dsb	sy
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	e00a      	b.n	8003748 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003734:	2b00      	cmp	r3, #0
 8003736:	d007      	beq.n	8003748 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003738:	4b39      	ldr	r3, [pc, #228]	; (8003820 <xQueueGenericSend+0x1f8>)
 800373a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003748:	f001 fefc 	bl	8005544 <vPortExitCritical>
				return pdPASS;
 800374c:	2301      	movs	r3, #1
 800374e:	e063      	b.n	8003818 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d103      	bne.n	800375e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003756:	f001 fef5 	bl	8005544 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800375a:	2300      	movs	r3, #0
 800375c:	e05c      	b.n	8003818 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800375e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003760:	2b00      	cmp	r3, #0
 8003762:	d106      	bne.n	8003772 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003764:	f107 0314 	add.w	r3, r7, #20
 8003768:	4618      	mov	r0, r3
 800376a:	f001 f809 	bl	8004780 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800376e:	2301      	movs	r3, #1
 8003770:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003772:	f001 fee7 	bl	8005544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003776:	f000 fd7b 	bl	8004270 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800377a:	f001 feb3 	bl	80054e4 <vPortEnterCritical>
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003784:	b25b      	sxtb	r3, r3
 8003786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378a:	d103      	bne.n	8003794 <xQueueGenericSend+0x16c>
 800378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003796:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800379a:	b25b      	sxtb	r3, r3
 800379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a0:	d103      	bne.n	80037aa <xQueueGenericSend+0x182>
 80037a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037aa:	f001 fecb 	bl	8005544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037ae:	1d3a      	adds	r2, r7, #4
 80037b0:	f107 0314 	add.w	r3, r7, #20
 80037b4:	4611      	mov	r1, r2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fff8 	bl	80047ac <xTaskCheckForTimeOut>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d124      	bne.n	800380c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80037c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037c4:	f000 faa2 	bl	8003d0c <prvIsQueueFull>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d018      	beq.n	8003800 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80037ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d0:	3310      	adds	r3, #16
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	4611      	mov	r1, r2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 ff1e 	bl	8004618 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80037dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037de:	f000 fa2d 	bl	8003c3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80037e2:	f000 fd53 	bl	800428c <xTaskResumeAll>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f47f af7c 	bne.w	80036e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80037ee:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <xQueueGenericSend+0x1f8>)
 80037f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	f3bf 8f6f 	isb	sy
 80037fe:	e772      	b.n	80036e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003802:	f000 fa1b 	bl	8003c3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003806:	f000 fd41 	bl	800428c <xTaskResumeAll>
 800380a:	e76c      	b.n	80036e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800380c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800380e:	f000 fa15 	bl	8003c3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003812:	f000 fd3b 	bl	800428c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003816:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003818:	4618      	mov	r0, r3
 800381a:	3738      	adds	r7, #56	; 0x38
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	e000ed04 	.word	0xe000ed04

08003824 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b090      	sub	sp, #64	; 0x40
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10a      	bne.n	8003852 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800384e:	bf00      	nop
 8003850:	e7fe      	b.n	8003850 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d103      	bne.n	8003860 <xQueueGenericSendFromISR+0x3c>
 8003858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <xQueueGenericSendFromISR+0x40>
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <xQueueGenericSendFromISR+0x42>
 8003864:	2300      	movs	r3, #0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10a      	bne.n	8003880 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800386a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386e:	f383 8811 	msr	BASEPRI, r3
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800387c:	bf00      	nop
 800387e:	e7fe      	b.n	800387e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d103      	bne.n	800388e <xQueueGenericSendFromISR+0x6a>
 8003886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <xQueueGenericSendFromISR+0x6e>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <xQueueGenericSendFromISR+0x70>
 8003892:	2300      	movs	r3, #0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10a      	bne.n	80038ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389c:	f383 8811 	msr	BASEPRI, r3
 80038a0:	f3bf 8f6f 	isb	sy
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	623b      	str	r3, [r7, #32]
}
 80038aa:	bf00      	nop
 80038ac:	e7fe      	b.n	80038ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038ae:	f001 fefb 	bl	80056a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80038b2:	f3ef 8211 	mrs	r2, BASEPRI
 80038b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ba:	f383 8811 	msr	BASEPRI, r3
 80038be:	f3bf 8f6f 	isb	sy
 80038c2:	f3bf 8f4f 	dsb	sy
 80038c6:	61fa      	str	r2, [r7, #28]
 80038c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80038ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80038cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d302      	bcc.n	80038e0 <xQueueGenericSendFromISR+0xbc>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d12f      	bne.n	8003940 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80038e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038f6:	f000 f911 	bl	8003b1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80038fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80038fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003902:	d112      	bne.n	800392a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	2b00      	cmp	r3, #0
 800390a:	d016      	beq.n	800393a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800390c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390e:	3324      	adds	r3, #36	; 0x24
 8003910:	4618      	mov	r0, r3
 8003912:	f000 fed1 	bl	80046b8 <xTaskRemoveFromEventList>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00e      	beq.n	800393a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00b      	beq.n	800393a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	e007      	b.n	800393a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800392a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800392e:	3301      	adds	r3, #1
 8003930:	b2db      	uxtb	r3, r3
 8003932:	b25a      	sxtb	r2, r3
 8003934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800393a:	2301      	movs	r3, #1
 800393c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800393e:	e001      	b.n	8003944 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003940:	2300      	movs	r3, #0
 8003942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003946:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800394e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003952:	4618      	mov	r0, r3
 8003954:	3740      	adds	r7, #64	; 0x40
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08c      	sub	sp, #48	; 0x30
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003968:	2300      	movs	r3, #0
 800396a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10a      	bne.n	800398c <xQueueReceive+0x30>
	__asm volatile
 8003976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	623b      	str	r3, [r7, #32]
}
 8003988:	bf00      	nop
 800398a:	e7fe      	b.n	800398a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d103      	bne.n	800399a <xQueueReceive+0x3e>
 8003992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <xQueueReceive+0x42>
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <xQueueReceive+0x44>
 800399e:	2300      	movs	r3, #0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10a      	bne.n	80039ba <xQueueReceive+0x5e>
	__asm volatile
 80039a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a8:	f383 8811 	msr	BASEPRI, r3
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	61fb      	str	r3, [r7, #28]
}
 80039b6:	bf00      	nop
 80039b8:	e7fe      	b.n	80039b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039ba:	f001 f83b 	bl	8004a34 <xTaskGetSchedulerState>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d102      	bne.n	80039ca <xQueueReceive+0x6e>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <xQueueReceive+0x72>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <xQueueReceive+0x74>
 80039ce:	2300      	movs	r3, #0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10a      	bne.n	80039ea <xQueueReceive+0x8e>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	61bb      	str	r3, [r7, #24]
}
 80039e6:	bf00      	nop
 80039e8:	e7fe      	b.n	80039e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039ea:	f001 fd7b 	bl	80054e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d01f      	beq.n	8003a3a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039fe:	f000 f8f7 	bl	8003bf0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	1e5a      	subs	r2, r3, #1
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00f      	beq.n	8003a32 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a14:	3310      	adds	r3, #16
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fe4e 	bl	80046b8 <xTaskRemoveFromEventList>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d007      	beq.n	8003a32 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a22:	4b3d      	ldr	r3, [pc, #244]	; (8003b18 <xQueueReceive+0x1bc>)
 8003a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a32:	f001 fd87 	bl	8005544 <vPortExitCritical>
				return pdPASS;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e069      	b.n	8003b0e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d103      	bne.n	8003a48 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a40:	f001 fd80 	bl	8005544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a44:	2300      	movs	r3, #0
 8003a46:	e062      	b.n	8003b0e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a4e:	f107 0310 	add.w	r3, r7, #16
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fe94 	bl	8004780 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a5c:	f001 fd72 	bl	8005544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a60:	f000 fc06 	bl	8004270 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a64:	f001 fd3e 	bl	80054e4 <vPortEnterCritical>
 8003a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a6e:	b25b      	sxtb	r3, r3
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d103      	bne.n	8003a7e <xQueueReceive+0x122>
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a84:	b25b      	sxtb	r3, r3
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8a:	d103      	bne.n	8003a94 <xQueueReceive+0x138>
 8003a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a94:	f001 fd56 	bl	8005544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a98:	1d3a      	adds	r2, r7, #4
 8003a9a:	f107 0310 	add.w	r3, r7, #16
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 fe83 	bl	80047ac <xTaskCheckForTimeOut>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d123      	bne.n	8003af4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aae:	f000 f917 	bl	8003ce0 <prvIsQueueEmpty>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d017      	beq.n	8003ae8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aba:	3324      	adds	r3, #36	; 0x24
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	4611      	mov	r1, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 fda9 	bl	8004618 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ac8:	f000 f8b8 	bl	8003c3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003acc:	f000 fbde 	bl	800428c <xTaskResumeAll>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d189      	bne.n	80039ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003ad6:	4b10      	ldr	r3, [pc, #64]	; (8003b18 <xQueueReceive+0x1bc>)
 8003ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	e780      	b.n	80039ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aea:	f000 f8a7 	bl	8003c3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003aee:	f000 fbcd 	bl	800428c <xTaskResumeAll>
 8003af2:	e77a      	b.n	80039ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003af6:	f000 f8a1 	bl	8003c3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003afa:	f000 fbc7 	bl	800428c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b00:	f000 f8ee 	bl	8003ce0 <prvIsQueueEmpty>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f43f af6f 	beq.w	80039ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3730      	adds	r7, #48	; 0x30
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	e000ed04 	.word	0xe000ed04

08003b1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10d      	bne.n	8003b56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d14d      	bne.n	8003bde <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 ff92 	bl	8004a70 <xTaskPriorityDisinherit>
 8003b4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	e043      	b.n	8003bde <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d119      	bne.n	8003b90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6858      	ldr	r0, [r3, #4]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	461a      	mov	r2, r3
 8003b66:	68b9      	ldr	r1, [r7, #8]
 8003b68:	f002 fa24 	bl	8005fb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	441a      	add	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d32b      	bcc.n	8003bde <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	e026      	b.n	8003bde <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	68d8      	ldr	r0, [r3, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	461a      	mov	r2, r3
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	f002 fa0a 	bl	8005fb4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	425b      	negs	r3, r3
 8003baa:	441a      	add	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d207      	bcs.n	8003bcc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	425b      	negs	r3, r3
 8003bc6:	441a      	add	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d105      	bne.n	8003bde <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003be6:	697b      	ldr	r3, [r7, #20]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d018      	beq.n	8003c34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	441a      	add	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d303      	bcc.n	8003c24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68d9      	ldr	r1, [r3, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	6838      	ldr	r0, [r7, #0]
 8003c30:	f002 f9c0 	bl	8005fb4 <memcpy>
	}
}
 8003c34:	bf00      	nop
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c44:	f001 fc4e 	bl	80054e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c50:	e011      	b.n	8003c76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d012      	beq.n	8003c80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3324      	adds	r3, #36	; 0x24
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fd2a 	bl	80046b8 <xTaskRemoveFromEventList>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c6a:	f000 fe01 	bl	8004870 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	dce9      	bgt.n	8003c52 <prvUnlockQueue+0x16>
 8003c7e:	e000      	b.n	8003c82 <prvUnlockQueue+0x46>
					break;
 8003c80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	22ff      	movs	r2, #255	; 0xff
 8003c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003c8a:	f001 fc5b 	bl	8005544 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c8e:	f001 fc29 	bl	80054e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c9a:	e011      	b.n	8003cc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d012      	beq.n	8003cca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3310      	adds	r3, #16
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fd05 	bl	80046b8 <xTaskRemoveFromEventList>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003cb4:	f000 fddc 	bl	8004870 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003cb8:	7bbb      	ldrb	r3, [r7, #14]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	dce9      	bgt.n	8003c9c <prvUnlockQueue+0x60>
 8003cc8:	e000      	b.n	8003ccc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003cca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	22ff      	movs	r2, #255	; 0xff
 8003cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003cd4:	f001 fc36 	bl	8005544 <vPortExitCritical>
}
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ce8:	f001 fbfc 	bl	80054e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d102      	bne.n	8003cfa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	e001      	b.n	8003cfe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cfe:	f001 fc21 	bl	8005544 <vPortExitCritical>

	return xReturn;
 8003d02:	68fb      	ldr	r3, [r7, #12]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d14:	f001 fbe6 	bl	80054e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d102      	bne.n	8003d2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d24:	2301      	movs	r3, #1
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	e001      	b.n	8003d2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d2e:	f001 fc09 	bl	8005544 <vPortExitCritical>

	return xReturn;
 8003d32:	68fb      	ldr	r3, [r7, #12]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	e014      	b.n	8003d76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d4c:	4a0f      	ldr	r2, [pc, #60]	; (8003d8c <vQueueAddToRegistry+0x50>)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10b      	bne.n	8003d70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d58:	490c      	ldr	r1, [pc, #48]	; (8003d8c <vQueueAddToRegistry+0x50>)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d62:	4a0a      	ldr	r2, [pc, #40]	; (8003d8c <vQueueAddToRegistry+0x50>)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	4413      	add	r3, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d6e:	e006      	b.n	8003d7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	3301      	adds	r3, #1
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2b07      	cmp	r3, #7
 8003d7a:	d9e7      	bls.n	8003d4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	20004a9c 	.word	0x20004a9c

08003d90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003da0:	f001 fba0 	bl	80054e4 <vPortEnterCritical>
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003daa:	b25b      	sxtb	r3, r3
 8003dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db0:	d103      	bne.n	8003dba <vQueueWaitForMessageRestricted+0x2a>
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dc0:	b25b      	sxtb	r3, r3
 8003dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc6:	d103      	bne.n	8003dd0 <vQueueWaitForMessageRestricted+0x40>
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dd0:	f001 fbb8 	bl	8005544 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d106      	bne.n	8003dea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	3324      	adds	r3, #36	; 0x24
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	68b9      	ldr	r1, [r7, #8]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fc3b 	bl	8004660 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003dea:	6978      	ldr	r0, [r7, #20]
 8003dec:	f7ff ff26 	bl	8003c3c <prvUnlockQueue>
	}
 8003df0:	bf00      	nop
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08e      	sub	sp, #56	; 0x38
 8003dfc:	af04      	add	r7, sp, #16
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10a      	bne.n	8003e22 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e10:	f383 8811 	msr	BASEPRI, r3
 8003e14:	f3bf 8f6f 	isb	sy
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	623b      	str	r3, [r7, #32]
}
 8003e1e:	bf00      	nop
 8003e20:	e7fe      	b.n	8003e20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10a      	bne.n	8003e3e <xTaskCreateStatic+0x46>
	__asm volatile
 8003e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	61fb      	str	r3, [r7, #28]
}
 8003e3a:	bf00      	nop
 8003e3c:	e7fe      	b.n	8003e3c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e3e:	235c      	movs	r3, #92	; 0x5c
 8003e40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	2b5c      	cmp	r3, #92	; 0x5c
 8003e46:	d00a      	beq.n	8003e5e <xTaskCreateStatic+0x66>
	__asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	61bb      	str	r3, [r7, #24]
}
 8003e5a:	bf00      	nop
 8003e5c:	e7fe      	b.n	8003e5c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d01e      	beq.n	8003ea4 <xTaskCreateStatic+0xac>
 8003e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d01b      	beq.n	8003ea4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	2202      	movs	r2, #2
 8003e7a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e7e:	2300      	movs	r3, #0
 8003e80:	9303      	str	r3, [sp, #12]
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	9302      	str	r3, [sp, #8]
 8003e86:	f107 0314 	add.w	r3, r7, #20
 8003e8a:	9301      	str	r3, [sp, #4]
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 f850 	bl	8003f3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e9e:	f000 f8dd 	bl	800405c <prvAddNewTaskToReadyList>
 8003ea2:	e001      	b.n	8003ea8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ea8:	697b      	ldr	r3, [r7, #20]
	}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3728      	adds	r7, #40	; 0x28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b08c      	sub	sp, #48	; 0x30
 8003eb6:	af04      	add	r7, sp, #16
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	603b      	str	r3, [r7, #0]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f001 fc2e 	bl	8005728 <pvPortMalloc>
 8003ecc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00e      	beq.n	8003ef2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ed4:	205c      	movs	r0, #92	; 0x5c
 8003ed6:	f001 fc27 	bl	8005728 <pvPortMalloc>
 8003eda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ee8:	e005      	b.n	8003ef6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003eea:	6978      	ldr	r0, [r7, #20]
 8003eec:	f001 fce8 	bl	80058c0 <vPortFree>
 8003ef0:	e001      	b.n	8003ef6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d017      	beq.n	8003f2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f04:	88fa      	ldrh	r2, [r7, #6]
 8003f06:	2300      	movs	r3, #0
 8003f08:	9303      	str	r3, [sp, #12]
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	9302      	str	r3, [sp, #8]
 8003f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f10:	9301      	str	r3, [sp, #4]
 8003f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f80e 	bl	8003f3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f20:	69f8      	ldr	r0, [r7, #28]
 8003f22:	f000 f89b 	bl	800405c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f26:	2301      	movs	r3, #1
 8003f28:	61bb      	str	r3, [r7, #24]
 8003f2a:	e002      	b.n	8003f32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f32:	69bb      	ldr	r3, [r7, #24]
	}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3720      	adds	r7, #32
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
 8003f48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	461a      	mov	r2, r3
 8003f54:	21a5      	movs	r1, #165	; 0xa5
 8003f56:	f002 f83b 	bl	8005fd0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f64:	3b01      	subs	r3, #1
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	f023 0307 	bic.w	r3, r3, #7
 8003f72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	617b      	str	r3, [r7, #20]
}
 8003f90:	bf00      	nop
 8003f92:	e7fe      	b.n	8003f92 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d01f      	beq.n	8003fda <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61fb      	str	r3, [r7, #28]
 8003f9e:	e012      	b.n	8003fc6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	7819      	ldrb	r1, [r3, #0]
 8003fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	4413      	add	r3, r2
 8003fae:	3334      	adds	r3, #52	; 0x34
 8003fb0:	460a      	mov	r2, r1
 8003fb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	4413      	add	r3, r2
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d006      	beq.n	8003fce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	2b0f      	cmp	r3, #15
 8003fca:	d9e9      	bls.n	8003fa0 <prvInitialiseNewTask+0x64>
 8003fcc:	e000      	b.n	8003fd0 <prvInitialiseNewTask+0x94>
			{
				break;
 8003fce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fd8:	e003      	b.n	8003fe2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe4:	2b37      	cmp	r3, #55	; 0x37
 8003fe6:	d901      	bls.n	8003fec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003fe8:	2337      	movs	r3, #55	; 0x37
 8003fea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ff0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ff6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004000:	3304      	adds	r3, #4
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff f978 	bl	80032f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	3318      	adds	r3, #24
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff f973 	bl	80032f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004016:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004020:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004026:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402a:	2200      	movs	r2, #0
 800402c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	68f9      	ldr	r1, [r7, #12]
 800403a:	69b8      	ldr	r0, [r7, #24]
 800403c:	f001 f928 	bl	8005290 <pxPortInitialiseStack>
 8004040:	4602      	mov	r2, r0
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800404c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004050:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004052:	bf00      	nop
 8004054:	3720      	adds	r7, #32
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004064:	f001 fa3e 	bl	80054e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004068:	4b2d      	ldr	r3, [pc, #180]	; (8004120 <prvAddNewTaskToReadyList+0xc4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3301      	adds	r3, #1
 800406e:	4a2c      	ldr	r2, [pc, #176]	; (8004120 <prvAddNewTaskToReadyList+0xc4>)
 8004070:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004072:	4b2c      	ldr	r3, [pc, #176]	; (8004124 <prvAddNewTaskToReadyList+0xc8>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d109      	bne.n	800408e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800407a:	4a2a      	ldr	r2, [pc, #168]	; (8004124 <prvAddNewTaskToReadyList+0xc8>)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004080:	4b27      	ldr	r3, [pc, #156]	; (8004120 <prvAddNewTaskToReadyList+0xc4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d110      	bne.n	80040aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004088:	f000 fc16 	bl	80048b8 <prvInitialiseTaskLists>
 800408c:	e00d      	b.n	80040aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800408e:	4b26      	ldr	r3, [pc, #152]	; (8004128 <prvAddNewTaskToReadyList+0xcc>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004096:	4b23      	ldr	r3, [pc, #140]	; (8004124 <prvAddNewTaskToReadyList+0xc8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d802      	bhi.n	80040aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80040a4:	4a1f      	ldr	r2, [pc, #124]	; (8004124 <prvAddNewTaskToReadyList+0xc8>)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80040aa:	4b20      	ldr	r3, [pc, #128]	; (800412c <prvAddNewTaskToReadyList+0xd0>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3301      	adds	r3, #1
 80040b0:	4a1e      	ldr	r2, [pc, #120]	; (800412c <prvAddNewTaskToReadyList+0xd0>)
 80040b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80040b4:	4b1d      	ldr	r3, [pc, #116]	; (800412c <prvAddNewTaskToReadyList+0xd0>)
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c0:	4b1b      	ldr	r3, [pc, #108]	; (8004130 <prvAddNewTaskToReadyList+0xd4>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d903      	bls.n	80040d0 <prvAddNewTaskToReadyList+0x74>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	4a18      	ldr	r2, [pc, #96]	; (8004130 <prvAddNewTaskToReadyList+0xd4>)
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d4:	4613      	mov	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4a15      	ldr	r2, [pc, #84]	; (8004134 <prvAddNewTaskToReadyList+0xd8>)
 80040de:	441a      	add	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f7ff f913 	bl	8003312 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040ec:	f001 fa2a 	bl	8005544 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040f0:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <prvAddNewTaskToReadyList+0xcc>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00e      	beq.n	8004116 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <prvAddNewTaskToReadyList+0xc8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004102:	429a      	cmp	r2, r3
 8004104:	d207      	bcs.n	8004116 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004106:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <prvAddNewTaskToReadyList+0xdc>)
 8004108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000c24 	.word	0x20000c24
 8004124:	20000750 	.word	0x20000750
 8004128:	20000c30 	.word	0x20000c30
 800412c:	20000c40 	.word	0x20000c40
 8004130:	20000c2c 	.word	0x20000c2c
 8004134:	20000754 	.word	0x20000754
 8004138:	e000ed04 	.word	0xe000ed04

0800413c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d017      	beq.n	800417e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800414e:	4b13      	ldr	r3, [pc, #76]	; (800419c <vTaskDelay+0x60>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <vTaskDelay+0x30>
	__asm volatile
 8004156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	60bb      	str	r3, [r7, #8]
}
 8004168:	bf00      	nop
 800416a:	e7fe      	b.n	800416a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800416c:	f000 f880 	bl	8004270 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004170:	2100      	movs	r1, #0
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fcea 	bl	8004b4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004178:	f000 f888 	bl	800428c <xTaskResumeAll>
 800417c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d107      	bne.n	8004194 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004184:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <vTaskDelay+0x64>)
 8004186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004194:	bf00      	nop
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	20000c4c 	.word	0x20000c4c
 80041a0:	e000ed04 	.word	0xe000ed04

080041a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08a      	sub	sp, #40	; 0x28
 80041a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80041b2:	463a      	mov	r2, r7
 80041b4:	1d39      	adds	r1, r7, #4
 80041b6:	f107 0308 	add.w	r3, r7, #8
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff f848 	bl	8003250 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80041c0:	6839      	ldr	r1, [r7, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	9202      	str	r2, [sp, #8]
 80041c8:	9301      	str	r3, [sp, #4]
 80041ca:	2300      	movs	r3, #0
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	2300      	movs	r3, #0
 80041d0:	460a      	mov	r2, r1
 80041d2:	4921      	ldr	r1, [pc, #132]	; (8004258 <vTaskStartScheduler+0xb4>)
 80041d4:	4821      	ldr	r0, [pc, #132]	; (800425c <vTaskStartScheduler+0xb8>)
 80041d6:	f7ff fe0f 	bl	8003df8 <xTaskCreateStatic>
 80041da:	4603      	mov	r3, r0
 80041dc:	4a20      	ldr	r2, [pc, #128]	; (8004260 <vTaskStartScheduler+0xbc>)
 80041de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80041e0:	4b1f      	ldr	r3, [pc, #124]	; (8004260 <vTaskStartScheduler+0xbc>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80041e8:	2301      	movs	r3, #1
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	e001      	b.n	80041f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d102      	bne.n	80041fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80041f8:	f000 fcfc 	bl	8004bf4 <xTimerCreateTimerTask>
 80041fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d116      	bne.n	8004232 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	613b      	str	r3, [r7, #16]
}
 8004216:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004218:	4b12      	ldr	r3, [pc, #72]	; (8004264 <vTaskStartScheduler+0xc0>)
 800421a:	f04f 32ff 	mov.w	r2, #4294967295
 800421e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004220:	4b11      	ldr	r3, [pc, #68]	; (8004268 <vTaskStartScheduler+0xc4>)
 8004222:	2201      	movs	r2, #1
 8004224:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004226:	4b11      	ldr	r3, [pc, #68]	; (800426c <vTaskStartScheduler+0xc8>)
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800422c:	f001 f8b8 	bl	80053a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004230:	e00e      	b.n	8004250 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004238:	d10a      	bne.n	8004250 <vTaskStartScheduler+0xac>
	__asm volatile
 800423a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423e:	f383 8811 	msr	BASEPRI, r3
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	60fb      	str	r3, [r7, #12]
}
 800424c:	bf00      	nop
 800424e:	e7fe      	b.n	800424e <vTaskStartScheduler+0xaa>
}
 8004250:	bf00      	nop
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	080068a4 	.word	0x080068a4
 800425c:	08004889 	.word	0x08004889
 8004260:	20000c48 	.word	0x20000c48
 8004264:	20000c44 	.word	0x20000c44
 8004268:	20000c30 	.word	0x20000c30
 800426c:	20000c28 	.word	0x20000c28

08004270 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004274:	4b04      	ldr	r3, [pc, #16]	; (8004288 <vTaskSuspendAll+0x18>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3301      	adds	r3, #1
 800427a:	4a03      	ldr	r2, [pc, #12]	; (8004288 <vTaskSuspendAll+0x18>)
 800427c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800427e:	bf00      	nop
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	20000c4c 	.word	0x20000c4c

0800428c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004292:	2300      	movs	r3, #0
 8004294:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004296:	2300      	movs	r3, #0
 8004298:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800429a:	4b42      	ldr	r3, [pc, #264]	; (80043a4 <xTaskResumeAll+0x118>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10a      	bne.n	80042b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80042a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	603b      	str	r3, [r7, #0]
}
 80042b4:	bf00      	nop
 80042b6:	e7fe      	b.n	80042b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80042b8:	f001 f914 	bl	80054e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80042bc:	4b39      	ldr	r3, [pc, #228]	; (80043a4 <xTaskResumeAll+0x118>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	4a38      	ldr	r2, [pc, #224]	; (80043a4 <xTaskResumeAll+0x118>)
 80042c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042c6:	4b37      	ldr	r3, [pc, #220]	; (80043a4 <xTaskResumeAll+0x118>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d162      	bne.n	8004394 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80042ce:	4b36      	ldr	r3, [pc, #216]	; (80043a8 <xTaskResumeAll+0x11c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d05e      	beq.n	8004394 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042d6:	e02f      	b.n	8004338 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042d8:	4b34      	ldr	r3, [pc, #208]	; (80043ac <xTaskResumeAll+0x120>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	3318      	adds	r3, #24
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff f871 	bl	80033cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3304      	adds	r3, #4
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff f86c 	bl	80033cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f8:	4b2d      	ldr	r3, [pc, #180]	; (80043b0 <xTaskResumeAll+0x124>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d903      	bls.n	8004308 <xTaskResumeAll+0x7c>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	4a2a      	ldr	r2, [pc, #168]	; (80043b0 <xTaskResumeAll+0x124>)
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4a27      	ldr	r2, [pc, #156]	; (80043b4 <xTaskResumeAll+0x128>)
 8004316:	441a      	add	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	3304      	adds	r3, #4
 800431c:	4619      	mov	r1, r3
 800431e:	4610      	mov	r0, r2
 8004320:	f7fe fff7 	bl	8003312 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004328:	4b23      	ldr	r3, [pc, #140]	; (80043b8 <xTaskResumeAll+0x12c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432e:	429a      	cmp	r2, r3
 8004330:	d302      	bcc.n	8004338 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004332:	4b22      	ldr	r3, [pc, #136]	; (80043bc <xTaskResumeAll+0x130>)
 8004334:	2201      	movs	r2, #1
 8004336:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004338:	4b1c      	ldr	r3, [pc, #112]	; (80043ac <xTaskResumeAll+0x120>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1cb      	bne.n	80042d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004346:	f000 fb55 	bl	80049f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800434a:	4b1d      	ldr	r3, [pc, #116]	; (80043c0 <xTaskResumeAll+0x134>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d010      	beq.n	8004378 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004356:	f000 f847 	bl	80043e8 <xTaskIncrementTick>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004360:	4b16      	ldr	r3, [pc, #88]	; (80043bc <xTaskResumeAll+0x130>)
 8004362:	2201      	movs	r2, #1
 8004364:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3b01      	subs	r3, #1
 800436a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1f1      	bne.n	8004356 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004372:	4b13      	ldr	r3, [pc, #76]	; (80043c0 <xTaskResumeAll+0x134>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004378:	4b10      	ldr	r3, [pc, #64]	; (80043bc <xTaskResumeAll+0x130>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d009      	beq.n	8004394 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004380:	2301      	movs	r3, #1
 8004382:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004384:	4b0f      	ldr	r3, [pc, #60]	; (80043c4 <xTaskResumeAll+0x138>)
 8004386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004394:	f001 f8d6 	bl	8005544 <vPortExitCritical>

	return xAlreadyYielded;
 8004398:	68bb      	ldr	r3, [r7, #8]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000c4c 	.word	0x20000c4c
 80043a8:	20000c24 	.word	0x20000c24
 80043ac:	20000be4 	.word	0x20000be4
 80043b0:	20000c2c 	.word	0x20000c2c
 80043b4:	20000754 	.word	0x20000754
 80043b8:	20000750 	.word	0x20000750
 80043bc:	20000c38 	.word	0x20000c38
 80043c0:	20000c34 	.word	0x20000c34
 80043c4:	e000ed04 	.word	0xe000ed04

080043c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80043ce:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <xTaskGetTickCount+0x1c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80043d4:	687b      	ldr	r3, [r7, #4]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	20000c28 	.word	0x20000c28

080043e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80043ee:	2300      	movs	r3, #0
 80043f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043f2:	4b4f      	ldr	r3, [pc, #316]	; (8004530 <xTaskIncrementTick+0x148>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f040 808f 	bne.w	800451a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80043fc:	4b4d      	ldr	r3, [pc, #308]	; (8004534 <xTaskIncrementTick+0x14c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3301      	adds	r3, #1
 8004402:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004404:	4a4b      	ldr	r2, [pc, #300]	; (8004534 <xTaskIncrementTick+0x14c>)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d120      	bne.n	8004452 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004410:	4b49      	ldr	r3, [pc, #292]	; (8004538 <xTaskIncrementTick+0x150>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <xTaskIncrementTick+0x48>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	603b      	str	r3, [r7, #0]
}
 800442c:	bf00      	nop
 800442e:	e7fe      	b.n	800442e <xTaskIncrementTick+0x46>
 8004430:	4b41      	ldr	r3, [pc, #260]	; (8004538 <xTaskIncrementTick+0x150>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	4b41      	ldr	r3, [pc, #260]	; (800453c <xTaskIncrementTick+0x154>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a3f      	ldr	r2, [pc, #252]	; (8004538 <xTaskIncrementTick+0x150>)
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	4a3f      	ldr	r2, [pc, #252]	; (800453c <xTaskIncrementTick+0x154>)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	4b3e      	ldr	r3, [pc, #248]	; (8004540 <xTaskIncrementTick+0x158>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3301      	adds	r3, #1
 800444a:	4a3d      	ldr	r2, [pc, #244]	; (8004540 <xTaskIncrementTick+0x158>)
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	f000 fad1 	bl	80049f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004452:	4b3c      	ldr	r3, [pc, #240]	; (8004544 <xTaskIncrementTick+0x15c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	429a      	cmp	r2, r3
 800445a:	d349      	bcc.n	80044f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800445c:	4b36      	ldr	r3, [pc, #216]	; (8004538 <xTaskIncrementTick+0x150>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d104      	bne.n	8004470 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004466:	4b37      	ldr	r3, [pc, #220]	; (8004544 <xTaskIncrementTick+0x15c>)
 8004468:	f04f 32ff 	mov.w	r2, #4294967295
 800446c:	601a      	str	r2, [r3, #0]
					break;
 800446e:	e03f      	b.n	80044f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004470:	4b31      	ldr	r3, [pc, #196]	; (8004538 <xTaskIncrementTick+0x150>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	429a      	cmp	r2, r3
 8004486:	d203      	bcs.n	8004490 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004488:	4a2e      	ldr	r2, [pc, #184]	; (8004544 <xTaskIncrementTick+0x15c>)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800448e:	e02f      	b.n	80044f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	3304      	adds	r3, #4
 8004494:	4618      	mov	r0, r3
 8004496:	f7fe ff99 	bl	80033cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d004      	beq.n	80044ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	3318      	adds	r3, #24
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fe ff90 	bl	80033cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b0:	4b25      	ldr	r3, [pc, #148]	; (8004548 <xTaskIncrementTick+0x160>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d903      	bls.n	80044c0 <xTaskIncrementTick+0xd8>
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	4a22      	ldr	r2, [pc, #136]	; (8004548 <xTaskIncrementTick+0x160>)
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4a1f      	ldr	r2, [pc, #124]	; (800454c <xTaskIncrementTick+0x164>)
 80044ce:	441a      	add	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	3304      	adds	r3, #4
 80044d4:	4619      	mov	r1, r3
 80044d6:	4610      	mov	r0, r2
 80044d8:	f7fe ff1b 	bl	8003312 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e0:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <xTaskIncrementTick+0x168>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d3b8      	bcc.n	800445c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80044ea:	2301      	movs	r3, #1
 80044ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044ee:	e7b5      	b.n	800445c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80044f0:	4b17      	ldr	r3, [pc, #92]	; (8004550 <xTaskIncrementTick+0x168>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f6:	4915      	ldr	r1, [pc, #84]	; (800454c <xTaskIncrementTick+0x164>)
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d901      	bls.n	800450c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004508:	2301      	movs	r3, #1
 800450a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800450c:	4b11      	ldr	r3, [pc, #68]	; (8004554 <xTaskIncrementTick+0x16c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d007      	beq.n	8004524 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004514:	2301      	movs	r3, #1
 8004516:	617b      	str	r3, [r7, #20]
 8004518:	e004      	b.n	8004524 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800451a:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <xTaskIncrementTick+0x170>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3301      	adds	r3, #1
 8004520:	4a0d      	ldr	r2, [pc, #52]	; (8004558 <xTaskIncrementTick+0x170>)
 8004522:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004524:	697b      	ldr	r3, [r7, #20]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	20000c4c 	.word	0x20000c4c
 8004534:	20000c28 	.word	0x20000c28
 8004538:	20000bdc 	.word	0x20000bdc
 800453c:	20000be0 	.word	0x20000be0
 8004540:	20000c3c 	.word	0x20000c3c
 8004544:	20000c44 	.word	0x20000c44
 8004548:	20000c2c 	.word	0x20000c2c
 800454c:	20000754 	.word	0x20000754
 8004550:	20000750 	.word	0x20000750
 8004554:	20000c38 	.word	0x20000c38
 8004558:	20000c34 	.word	0x20000c34

0800455c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004562:	4b28      	ldr	r3, [pc, #160]	; (8004604 <vTaskSwitchContext+0xa8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800456a:	4b27      	ldr	r3, [pc, #156]	; (8004608 <vTaskSwitchContext+0xac>)
 800456c:	2201      	movs	r2, #1
 800456e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004570:	e041      	b.n	80045f6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004572:	4b25      	ldr	r3, [pc, #148]	; (8004608 <vTaskSwitchContext+0xac>)
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004578:	4b24      	ldr	r3, [pc, #144]	; (800460c <vTaskSwitchContext+0xb0>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	e010      	b.n	80045a2 <vTaskSwitchContext+0x46>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10a      	bne.n	800459c <vTaskSwitchContext+0x40>
	__asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	607b      	str	r3, [r7, #4]
}
 8004598:	bf00      	nop
 800459a:	e7fe      	b.n	800459a <vTaskSwitchContext+0x3e>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	3b01      	subs	r3, #1
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	491b      	ldr	r1, [pc, #108]	; (8004610 <vTaskSwitchContext+0xb4>)
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4613      	mov	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0e4      	beq.n	8004580 <vTaskSwitchContext+0x24>
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4a13      	ldr	r2, [pc, #76]	; (8004610 <vTaskSwitchContext+0xb4>)
 80045c2:	4413      	add	r3, r2
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	605a      	str	r2, [r3, #4]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	3308      	adds	r3, #8
 80045d8:	429a      	cmp	r2, r3
 80045da:	d104      	bne.n	80045e6 <vTaskSwitchContext+0x8a>
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	605a      	str	r2, [r3, #4]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	4a09      	ldr	r2, [pc, #36]	; (8004614 <vTaskSwitchContext+0xb8>)
 80045ee:	6013      	str	r3, [r2, #0]
 80045f0:	4a06      	ldr	r2, [pc, #24]	; (800460c <vTaskSwitchContext+0xb0>)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6013      	str	r3, [r2, #0]
}
 80045f6:	bf00      	nop
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	20000c4c 	.word	0x20000c4c
 8004608:	20000c38 	.word	0x20000c38
 800460c:	20000c2c 	.word	0x20000c2c
 8004610:	20000754 	.word	0x20000754
 8004614:	20000750 	.word	0x20000750

08004618 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10a      	bne.n	800463e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	60fb      	str	r3, [r7, #12]
}
 800463a:	bf00      	nop
 800463c:	e7fe      	b.n	800463c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800463e:	4b07      	ldr	r3, [pc, #28]	; (800465c <vTaskPlaceOnEventList+0x44>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3318      	adds	r3, #24
 8004644:	4619      	mov	r1, r3
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fe fe87 	bl	800335a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800464c:	2101      	movs	r1, #1
 800464e:	6838      	ldr	r0, [r7, #0]
 8004650:	f000 fa7c 	bl	8004b4c <prvAddCurrentTaskToDelayedList>
}
 8004654:	bf00      	nop
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	20000750 	.word	0x20000750

08004660 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10a      	bne.n	8004688 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	617b      	str	r3, [r7, #20]
}
 8004684:	bf00      	nop
 8004686:	e7fe      	b.n	8004686 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004688:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3318      	adds	r3, #24
 800468e:	4619      	mov	r1, r3
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f7fe fe3e 	bl	8003312 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800469c:	f04f 33ff 	mov.w	r3, #4294967295
 80046a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	68b8      	ldr	r0, [r7, #8]
 80046a6:	f000 fa51 	bl	8004b4c <prvAddCurrentTaskToDelayedList>
	}
 80046aa:	bf00      	nop
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20000750 	.word	0x20000750

080046b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10a      	bne.n	80046e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	60fb      	str	r3, [r7, #12]
}
 80046e0:	bf00      	nop
 80046e2:	e7fe      	b.n	80046e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	3318      	adds	r3, #24
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fe fe6f 	bl	80033cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046ee:	4b1e      	ldr	r3, [pc, #120]	; (8004768 <xTaskRemoveFromEventList+0xb0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d11d      	bne.n	8004732 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	3304      	adds	r3, #4
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fe fe66 	bl	80033cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004704:	4b19      	ldr	r3, [pc, #100]	; (800476c <xTaskRemoveFromEventList+0xb4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d903      	bls.n	8004714 <xTaskRemoveFromEventList+0x5c>
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	4a16      	ldr	r2, [pc, #88]	; (800476c <xTaskRemoveFromEventList+0xb4>)
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4a13      	ldr	r2, [pc, #76]	; (8004770 <xTaskRemoveFromEventList+0xb8>)
 8004722:	441a      	add	r2, r3
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	3304      	adds	r3, #4
 8004728:	4619      	mov	r1, r3
 800472a:	4610      	mov	r0, r2
 800472c:	f7fe fdf1 	bl	8003312 <vListInsertEnd>
 8004730:	e005      	b.n	800473e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	3318      	adds	r3, #24
 8004736:	4619      	mov	r1, r3
 8004738:	480e      	ldr	r0, [pc, #56]	; (8004774 <xTaskRemoveFromEventList+0xbc>)
 800473a:	f7fe fdea 	bl	8003312 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004742:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <xTaskRemoveFromEventList+0xc0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	429a      	cmp	r2, r3
 800474a:	d905      	bls.n	8004758 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800474c:	2301      	movs	r3, #1
 800474e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004750:	4b0a      	ldr	r3, [pc, #40]	; (800477c <xTaskRemoveFromEventList+0xc4>)
 8004752:	2201      	movs	r2, #1
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	e001      	b.n	800475c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004758:	2300      	movs	r3, #0
 800475a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800475c:	697b      	ldr	r3, [r7, #20]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20000c4c 	.word	0x20000c4c
 800476c:	20000c2c 	.word	0x20000c2c
 8004770:	20000754 	.word	0x20000754
 8004774:	20000be4 	.word	0x20000be4
 8004778:	20000750 	.word	0x20000750
 800477c:	20000c38 	.word	0x20000c38

08004780 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004788:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <vTaskInternalSetTimeOutState+0x24>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004790:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <vTaskInternalSetTimeOutState+0x28>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	605a      	str	r2, [r3, #4]
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	20000c3c 	.word	0x20000c3c
 80047a8:	20000c28 	.word	0x20000c28

080047ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10a      	bne.n	80047d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80047bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c0:	f383 8811 	msr	BASEPRI, r3
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	613b      	str	r3, [r7, #16]
}
 80047ce:	bf00      	nop
 80047d0:	e7fe      	b.n	80047d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10a      	bne.n	80047ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	60fb      	str	r3, [r7, #12]
}
 80047ea:	bf00      	nop
 80047ec:	e7fe      	b.n	80047ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80047ee:	f000 fe79 	bl	80054e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80047f2:	4b1d      	ldr	r3, [pc, #116]	; (8004868 <xTaskCheckForTimeOut+0xbc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480a:	d102      	bne.n	8004812 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800480c:	2300      	movs	r3, #0
 800480e:	61fb      	str	r3, [r7, #28]
 8004810:	e023      	b.n	800485a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	4b15      	ldr	r3, [pc, #84]	; (800486c <xTaskCheckForTimeOut+0xc0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d007      	beq.n	800482e <xTaskCheckForTimeOut+0x82>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	429a      	cmp	r2, r3
 8004826:	d302      	bcc.n	800482e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004828:	2301      	movs	r3, #1
 800482a:	61fb      	str	r3, [r7, #28]
 800482c:	e015      	b.n	800485a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	429a      	cmp	r2, r3
 8004836:	d20b      	bcs.n	8004850 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	1ad2      	subs	r2, r2, r3
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff ff9b 	bl	8004780 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800484a:	2300      	movs	r3, #0
 800484c:	61fb      	str	r3, [r7, #28]
 800484e:	e004      	b.n	800485a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004856:	2301      	movs	r3, #1
 8004858:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800485a:	f000 fe73 	bl	8005544 <vPortExitCritical>

	return xReturn;
 800485e:	69fb      	ldr	r3, [r7, #28]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3720      	adds	r7, #32
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20000c28 	.word	0x20000c28
 800486c:	20000c3c 	.word	0x20000c3c

08004870 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004874:	4b03      	ldr	r3, [pc, #12]	; (8004884 <vTaskMissedYield+0x14>)
 8004876:	2201      	movs	r2, #1
 8004878:	601a      	str	r2, [r3, #0]
}
 800487a:	bf00      	nop
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	20000c38 	.word	0x20000c38

08004888 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004890:	f000 f852 	bl	8004938 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004894:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <prvIdleTask+0x28>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d9f9      	bls.n	8004890 <prvIdleTask+0x8>
			{
				taskYIELD();
 800489c:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <prvIdleTask+0x2c>)
 800489e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048ac:	e7f0      	b.n	8004890 <prvIdleTask+0x8>
 80048ae:	bf00      	nop
 80048b0:	20000754 	.word	0x20000754
 80048b4:	e000ed04 	.word	0xe000ed04

080048b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048be:	2300      	movs	r3, #0
 80048c0:	607b      	str	r3, [r7, #4]
 80048c2:	e00c      	b.n	80048de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	4613      	mov	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4a12      	ldr	r2, [pc, #72]	; (8004918 <prvInitialiseTaskLists+0x60>)
 80048d0:	4413      	add	r3, r2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fe fcf0 	bl	80032b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3301      	adds	r3, #1
 80048dc:	607b      	str	r3, [r7, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b37      	cmp	r3, #55	; 0x37
 80048e2:	d9ef      	bls.n	80048c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048e4:	480d      	ldr	r0, [pc, #52]	; (800491c <prvInitialiseTaskLists+0x64>)
 80048e6:	f7fe fce7 	bl	80032b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048ea:	480d      	ldr	r0, [pc, #52]	; (8004920 <prvInitialiseTaskLists+0x68>)
 80048ec:	f7fe fce4 	bl	80032b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048f0:	480c      	ldr	r0, [pc, #48]	; (8004924 <prvInitialiseTaskLists+0x6c>)
 80048f2:	f7fe fce1 	bl	80032b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048f6:	480c      	ldr	r0, [pc, #48]	; (8004928 <prvInitialiseTaskLists+0x70>)
 80048f8:	f7fe fcde 	bl	80032b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048fc:	480b      	ldr	r0, [pc, #44]	; (800492c <prvInitialiseTaskLists+0x74>)
 80048fe:	f7fe fcdb 	bl	80032b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004902:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <prvInitialiseTaskLists+0x78>)
 8004904:	4a05      	ldr	r2, [pc, #20]	; (800491c <prvInitialiseTaskLists+0x64>)
 8004906:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004908:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <prvInitialiseTaskLists+0x7c>)
 800490a:	4a05      	ldr	r2, [pc, #20]	; (8004920 <prvInitialiseTaskLists+0x68>)
 800490c:	601a      	str	r2, [r3, #0]
}
 800490e:	bf00      	nop
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20000754 	.word	0x20000754
 800491c:	20000bb4 	.word	0x20000bb4
 8004920:	20000bc8 	.word	0x20000bc8
 8004924:	20000be4 	.word	0x20000be4
 8004928:	20000bf8 	.word	0x20000bf8
 800492c:	20000c10 	.word	0x20000c10
 8004930:	20000bdc 	.word	0x20000bdc
 8004934:	20000be0 	.word	0x20000be0

08004938 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800493e:	e019      	b.n	8004974 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004940:	f000 fdd0 	bl	80054e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004944:	4b10      	ldr	r3, [pc, #64]	; (8004988 <prvCheckTasksWaitingTermination+0x50>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3304      	adds	r3, #4
 8004950:	4618      	mov	r0, r3
 8004952:	f7fe fd3b 	bl	80033cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004956:	4b0d      	ldr	r3, [pc, #52]	; (800498c <prvCheckTasksWaitingTermination+0x54>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3b01      	subs	r3, #1
 800495c:	4a0b      	ldr	r2, [pc, #44]	; (800498c <prvCheckTasksWaitingTermination+0x54>)
 800495e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <prvCheckTasksWaitingTermination+0x58>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3b01      	subs	r3, #1
 8004966:	4a0a      	ldr	r2, [pc, #40]	; (8004990 <prvCheckTasksWaitingTermination+0x58>)
 8004968:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800496a:	f000 fdeb 	bl	8005544 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f810 	bl	8004994 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004974:	4b06      	ldr	r3, [pc, #24]	; (8004990 <prvCheckTasksWaitingTermination+0x58>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1e1      	bne.n	8004940 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800497c:	bf00      	nop
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000bf8 	.word	0x20000bf8
 800498c:	20000c24 	.word	0x20000c24
 8004990:	20000c0c 	.word	0x20000c0c

08004994 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d108      	bne.n	80049b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 ff88 	bl	80058c0 <vPortFree>
				vPortFree( pxTCB );
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 ff85 	bl	80058c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049b6:	e018      	b.n	80049ea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d103      	bne.n	80049ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 ff7c 	bl	80058c0 <vPortFree>
	}
 80049c8:	e00f      	b.n	80049ea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d00a      	beq.n	80049ea <prvDeleteTCB+0x56>
	__asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	60fb      	str	r3, [r7, #12]
}
 80049e6:	bf00      	nop
 80049e8:	e7fe      	b.n	80049e8 <prvDeleteTCB+0x54>
	}
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
	...

080049f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049fa:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <prvResetNextTaskUnblockTime+0x38>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d104      	bne.n	8004a0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a04:	4b0a      	ldr	r3, [pc, #40]	; (8004a30 <prvResetNextTaskUnblockTime+0x3c>)
 8004a06:	f04f 32ff 	mov.w	r2, #4294967295
 8004a0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a0c:	e008      	b.n	8004a20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a0e:	4b07      	ldr	r3, [pc, #28]	; (8004a2c <prvResetNextTaskUnblockTime+0x38>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	4a04      	ldr	r2, [pc, #16]	; (8004a30 <prvResetNextTaskUnblockTime+0x3c>)
 8004a1e:	6013      	str	r3, [r2, #0]
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	20000bdc 	.word	0x20000bdc
 8004a30:	20000c44 	.word	0x20000c44

08004a34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <xTaskGetSchedulerState+0x34>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d102      	bne.n	8004a48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a42:	2301      	movs	r3, #1
 8004a44:	607b      	str	r3, [r7, #4]
 8004a46:	e008      	b.n	8004a5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a48:	4b08      	ldr	r3, [pc, #32]	; (8004a6c <xTaskGetSchedulerState+0x38>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d102      	bne.n	8004a56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a50:	2302      	movs	r3, #2
 8004a52:	607b      	str	r3, [r7, #4]
 8004a54:	e001      	b.n	8004a5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a56:	2300      	movs	r3, #0
 8004a58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a5a:	687b      	ldr	r3, [r7, #4]
	}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	20000c30 	.word	0x20000c30
 8004a6c:	20000c4c 	.word	0x20000c4c

08004a70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d056      	beq.n	8004b34 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004a86:	4b2e      	ldr	r3, [pc, #184]	; (8004b40 <xTaskPriorityDisinherit+0xd0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d00a      	beq.n	8004aa6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	60fb      	str	r3, [r7, #12]
}
 8004aa2:	bf00      	nop
 8004aa4:	e7fe      	b.n	8004aa4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10a      	bne.n	8004ac4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab2:	f383 8811 	msr	BASEPRI, r3
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	60bb      	str	r3, [r7, #8]
}
 8004ac0:	bf00      	nop
 8004ac2:	e7fe      	b.n	8004ac2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac8:	1e5a      	subs	r2, r3, #1
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d02c      	beq.n	8004b34 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d128      	bne.n	8004b34 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fe fc70 	bl	80033cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b04:	4b0f      	ldr	r3, [pc, #60]	; (8004b44 <xTaskPriorityDisinherit+0xd4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d903      	bls.n	8004b14 <xTaskPriorityDisinherit+0xa4>
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	4a0c      	ldr	r2, [pc, #48]	; (8004b44 <xTaskPriorityDisinherit+0xd4>)
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b18:	4613      	mov	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4a09      	ldr	r2, [pc, #36]	; (8004b48 <xTaskPriorityDisinherit+0xd8>)
 8004b22:	441a      	add	r2, r3
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	3304      	adds	r3, #4
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	f7fe fbf1 	bl	8003312 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b30:	2301      	movs	r3, #1
 8004b32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b34:	697b      	ldr	r3, [r7, #20]
	}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000750 	.word	0x20000750
 8004b44:	20000c2c 	.word	0x20000c2c
 8004b48:	20000754 	.word	0x20000754

08004b4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b56:	4b21      	ldr	r3, [pc, #132]	; (8004bdc <prvAddCurrentTaskToDelayedList+0x90>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b5c:	4b20      	ldr	r3, [pc, #128]	; (8004be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3304      	adds	r3, #4
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fe fc32 	bl	80033cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6e:	d10a      	bne.n	8004b86 <prvAddCurrentTaskToDelayedList+0x3a>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d007      	beq.n	8004b86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b76:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4819      	ldr	r0, [pc, #100]	; (8004be4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004b80:	f7fe fbc7 	bl	8003312 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b84:	e026      	b.n	8004bd4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b8e:	4b14      	ldr	r3, [pc, #80]	; (8004be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d209      	bcs.n	8004bb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b9e:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	4b0f      	ldr	r3, [pc, #60]	; (8004be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4610      	mov	r0, r2
 8004bac:	f7fe fbd5 	bl	800335a <vListInsert>
}
 8004bb0:	e010      	b.n	8004bd4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bb2:	4b0e      	ldr	r3, [pc, #56]	; (8004bec <prvAddCurrentTaskToDelayedList+0xa0>)
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	4b0a      	ldr	r3, [pc, #40]	; (8004be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3304      	adds	r3, #4
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	f7fe fbcb 	bl	800335a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004bc4:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d202      	bcs.n	8004bd4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004bce:	4a08      	ldr	r2, [pc, #32]	; (8004bf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	6013      	str	r3, [r2, #0]
}
 8004bd4:	bf00      	nop
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20000c28 	.word	0x20000c28
 8004be0:	20000750 	.word	0x20000750
 8004be4:	20000c10 	.word	0x20000c10
 8004be8:	20000be0 	.word	0x20000be0
 8004bec:	20000bdc 	.word	0x20000bdc
 8004bf0:	20000c44 	.word	0x20000c44

08004bf4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08a      	sub	sp, #40	; 0x28
 8004bf8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004bfe:	f000 fb07 	bl	8005210 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c02:	4b1c      	ldr	r3, [pc, #112]	; (8004c74 <xTimerCreateTimerTask+0x80>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d021      	beq.n	8004c4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004c12:	1d3a      	adds	r2, r7, #4
 8004c14:	f107 0108 	add.w	r1, r7, #8
 8004c18:	f107 030c 	add.w	r3, r7, #12
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fe fb31 	bl	8003284 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	9202      	str	r2, [sp, #8]
 8004c2a:	9301      	str	r3, [sp, #4]
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	2300      	movs	r3, #0
 8004c32:	460a      	mov	r2, r1
 8004c34:	4910      	ldr	r1, [pc, #64]	; (8004c78 <xTimerCreateTimerTask+0x84>)
 8004c36:	4811      	ldr	r0, [pc, #68]	; (8004c7c <xTimerCreateTimerTask+0x88>)
 8004c38:	f7ff f8de 	bl	8003df8 <xTaskCreateStatic>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	4a10      	ldr	r2, [pc, #64]	; (8004c80 <xTimerCreateTimerTask+0x8c>)
 8004c40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004c42:	4b0f      	ldr	r3, [pc, #60]	; (8004c80 <xTimerCreateTimerTask+0x8c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10a      	bne.n	8004c6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	613b      	str	r3, [r7, #16]
}
 8004c66:	bf00      	nop
 8004c68:	e7fe      	b.n	8004c68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004c6a:	697b      	ldr	r3, [r7, #20]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	20000c80 	.word	0x20000c80
 8004c78:	080068ac 	.word	0x080068ac
 8004c7c:	08004db9 	.word	0x08004db9
 8004c80:	20000c84 	.word	0x20000c84

08004c84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08a      	sub	sp, #40	; 0x28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10a      	bne.n	8004cb2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	623b      	str	r3, [r7, #32]
}
 8004cae:	bf00      	nop
 8004cb0:	e7fe      	b.n	8004cb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004cb2:	4b1a      	ldr	r3, [pc, #104]	; (8004d1c <xTimerGenericCommand+0x98>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d02a      	beq.n	8004d10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b05      	cmp	r3, #5
 8004cca:	dc18      	bgt.n	8004cfe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ccc:	f7ff feb2 	bl	8004a34 <xTaskGetSchedulerState>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d109      	bne.n	8004cea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004cd6:	4b11      	ldr	r3, [pc, #68]	; (8004d1c <xTimerGenericCommand+0x98>)
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	f107 0110 	add.w	r1, r7, #16
 8004cde:	2300      	movs	r3, #0
 8004ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ce2:	f7fe fca1 	bl	8003628 <xQueueGenericSend>
 8004ce6:	6278      	str	r0, [r7, #36]	; 0x24
 8004ce8:	e012      	b.n	8004d10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004cea:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <xTimerGenericCommand+0x98>)
 8004cec:	6818      	ldr	r0, [r3, #0]
 8004cee:	f107 0110 	add.w	r1, r7, #16
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f7fe fc97 	bl	8003628 <xQueueGenericSend>
 8004cfa:	6278      	str	r0, [r7, #36]	; 0x24
 8004cfc:	e008      	b.n	8004d10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004cfe:	4b07      	ldr	r3, [pc, #28]	; (8004d1c <xTimerGenericCommand+0x98>)
 8004d00:	6818      	ldr	r0, [r3, #0]
 8004d02:	f107 0110 	add.w	r1, r7, #16
 8004d06:	2300      	movs	r3, #0
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	f7fe fd8b 	bl	8003824 <xQueueGenericSendFromISR>
 8004d0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3728      	adds	r7, #40	; 0x28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	20000c80 	.word	0x20000c80

08004d20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d2a:	4b22      	ldr	r3, [pc, #136]	; (8004db4 <prvProcessExpiredTimer+0x94>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	3304      	adds	r3, #4
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fe fb47 	bl	80033cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d022      	beq.n	8004d92 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	699a      	ldr	r2, [r3, #24]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	18d1      	adds	r1, r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	6978      	ldr	r0, [r7, #20]
 8004d5a:	f000 f8d1 	bl	8004f00 <prvInsertTimerInActiveList>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d01f      	beq.n	8004da4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d64:	2300      	movs	r3, #0
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	6978      	ldr	r0, [r7, #20]
 8004d70:	f7ff ff88 	bl	8004c84 <xTimerGenericCommand>
 8004d74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d113      	bne.n	8004da4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	60fb      	str	r3, [r7, #12]
}
 8004d8e:	bf00      	nop
 8004d90:	e7fe      	b.n	8004d90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d98:	f023 0301 	bic.w	r3, r3, #1
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	6978      	ldr	r0, [r7, #20]
 8004daa:	4798      	blx	r3
}
 8004dac:	bf00      	nop
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	20000c78 	.word	0x20000c78

08004db8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dc0:	f107 0308 	add.w	r3, r7, #8
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 f857 	bl	8004e78 <prvGetNextExpireTime>
 8004dca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4619      	mov	r1, r3
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 f803 	bl	8004ddc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004dd6:	f000 f8d5 	bl	8004f84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dda:	e7f1      	b.n	8004dc0 <prvTimerTask+0x8>

08004ddc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004de6:	f7ff fa43 	bl	8004270 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dea:	f107 0308 	add.w	r3, r7, #8
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 f866 	bl	8004ec0 <prvSampleTimeNow>
 8004df4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d130      	bne.n	8004e5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10a      	bne.n	8004e18 <prvProcessTimerOrBlockTask+0x3c>
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d806      	bhi.n	8004e18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004e0a:	f7ff fa3f 	bl	800428c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e0e:	68f9      	ldr	r1, [r7, #12]
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff ff85 	bl	8004d20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004e16:	e024      	b.n	8004e62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d008      	beq.n	8004e30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e1e:	4b13      	ldr	r3, [pc, #76]	; (8004e6c <prvProcessTimerOrBlockTask+0x90>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <prvProcessTimerOrBlockTask+0x50>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e000      	b.n	8004e2e <prvProcessTimerOrBlockTask+0x52>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e30:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <prvProcessTimerOrBlockTask+0x94>)
 8004e32:	6818      	ldr	r0, [r3, #0]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	f7fe ffa7 	bl	8003d90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e42:	f7ff fa23 	bl	800428c <xTaskResumeAll>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10a      	bne.n	8004e62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e4c:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <prvProcessTimerOrBlockTask+0x98>)
 8004e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	f3bf 8f6f 	isb	sy
}
 8004e5c:	e001      	b.n	8004e62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004e5e:	f7ff fa15 	bl	800428c <xTaskResumeAll>
}
 8004e62:	bf00      	nop
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20000c7c 	.word	0x20000c7c
 8004e70:	20000c80 	.word	0x20000c80
 8004e74:	e000ed04 	.word	0xe000ed04

08004e78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e80:	4b0e      	ldr	r3, [pc, #56]	; (8004ebc <prvGetNextExpireTime+0x44>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <prvGetNextExpireTime+0x16>
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	e000      	b.n	8004e90 <prvGetNextExpireTime+0x18>
 8004e8e:	2200      	movs	r2, #0
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d105      	bne.n	8004ea8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e9c:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <prvGetNextExpireTime+0x44>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	e001      	b.n	8004eac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004eac:	68fb      	ldr	r3, [r7, #12]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	20000c78 	.word	0x20000c78

08004ec0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ec8:	f7ff fa7e 	bl	80043c8 <xTaskGetTickCount>
 8004ecc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ece:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <prvSampleTimeNow+0x3c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d205      	bcs.n	8004ee4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ed8:	f000 f936 	bl	8005148 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	e002      	b.n	8004eea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004eea:	4a04      	ldr	r2, [pc, #16]	; (8004efc <prvSampleTimeNow+0x3c>)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	20000c88 	.word	0x20000c88

08004f00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d812      	bhi.n	8004f4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	1ad2      	subs	r2, r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d302      	bcc.n	8004f3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f34:	2301      	movs	r3, #1
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	e01b      	b.n	8004f72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f3a:	4b10      	ldr	r3, [pc, #64]	; (8004f7c <prvInsertTimerInActiveList+0x7c>)
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3304      	adds	r3, #4
 8004f42:	4619      	mov	r1, r3
 8004f44:	4610      	mov	r0, r2
 8004f46:	f7fe fa08 	bl	800335a <vListInsert>
 8004f4a:	e012      	b.n	8004f72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d206      	bcs.n	8004f62 <prvInsertTimerInActiveList+0x62>
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d302      	bcc.n	8004f62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	e007      	b.n	8004f72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f62:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <prvInsertTimerInActiveList+0x80>)
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	f7fe f9f4 	bl	800335a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004f72:	697b      	ldr	r3, [r7, #20]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	20000c7c 	.word	0x20000c7c
 8004f80:	20000c78 	.word	0x20000c78

08004f84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08e      	sub	sp, #56	; 0x38
 8004f88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f8a:	e0ca      	b.n	8005122 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	da18      	bge.n	8004fc4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004f92:	1d3b      	adds	r3, r7, #4
 8004f94:	3304      	adds	r3, #4
 8004f96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10a      	bne.n	8004fb4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	61fb      	str	r3, [r7, #28]
}
 8004fb0:	bf00      	nop
 8004fb2:	e7fe      	b.n	8004fb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fba:	6850      	ldr	r0, [r2, #4]
 8004fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fbe:	6892      	ldr	r2, [r2, #8]
 8004fc0:	4611      	mov	r1, r2
 8004fc2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f2c0 80aa 	blt.w	8005120 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d004      	beq.n	8004fe2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	3304      	adds	r3, #4
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7fe f9f5 	bl	80033cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fe2:	463b      	mov	r3, r7
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff ff6b 	bl	8004ec0 <prvSampleTimeNow>
 8004fea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b09      	cmp	r3, #9
 8004ff0:	f200 8097 	bhi.w	8005122 <prvProcessReceivedCommands+0x19e>
 8004ff4:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <prvProcessReceivedCommands+0x78>)
 8004ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffa:	bf00      	nop
 8004ffc:	08005025 	.word	0x08005025
 8005000:	08005025 	.word	0x08005025
 8005004:	08005025 	.word	0x08005025
 8005008:	08005099 	.word	0x08005099
 800500c:	080050ad 	.word	0x080050ad
 8005010:	080050f7 	.word	0x080050f7
 8005014:	08005025 	.word	0x08005025
 8005018:	08005025 	.word	0x08005025
 800501c:	08005099 	.word	0x08005099
 8005020:	080050ad 	.word	0x080050ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005026:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800502a:	f043 0301 	orr.w	r3, r3, #1
 800502e:	b2da      	uxtb	r2, r3
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	18d1      	adds	r1, r2, r3
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005044:	f7ff ff5c 	bl	8004f00 <prvInsertTimerInActiveList>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d069      	beq.n	8005122 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800504e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005054:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d05e      	beq.n	8005122 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	441a      	add	r2, r3
 800506c:	2300      	movs	r3, #0
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	2300      	movs	r3, #0
 8005072:	2100      	movs	r1, #0
 8005074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005076:	f7ff fe05 	bl	8004c84 <xTimerGenericCommand>
 800507a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d14f      	bne.n	8005122 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	61bb      	str	r3, [r7, #24]
}
 8005094:	bf00      	nop
 8005096:	e7fe      	b.n	8005096 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800509e:	f023 0301 	bic.w	r3, r3, #1
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80050aa:	e03a      	b.n	8005122 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050b2:	f043 0301 	orr.w	r3, r3, #1
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10a      	bne.n	80050e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	617b      	str	r3, [r7, #20]
}
 80050de:	bf00      	nop
 80050e0:	e7fe      	b.n	80050e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	699a      	ldr	r2, [r3, #24]
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	18d1      	adds	r1, r2, r3
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050f0:	f7ff ff06 	bl	8004f00 <prvInsertTimerInActiveList>
					break;
 80050f4:	e015      	b.n	8005122 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80050f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d103      	bne.n	800510c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005106:	f000 fbdb 	bl	80058c0 <vPortFree>
 800510a:	e00a      	b.n	8005122 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800510c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005112:	f023 0301 	bic.w	r3, r3, #1
 8005116:	b2da      	uxtb	r2, r3
 8005118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800511e:	e000      	b.n	8005122 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005120:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005122:	4b08      	ldr	r3, [pc, #32]	; (8005144 <prvProcessReceivedCommands+0x1c0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	1d39      	adds	r1, r7, #4
 8005128:	2200      	movs	r2, #0
 800512a:	4618      	mov	r0, r3
 800512c:	f7fe fc16 	bl	800395c <xQueueReceive>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	f47f af2a 	bne.w	8004f8c <prvProcessReceivedCommands+0x8>
	}
}
 8005138:	bf00      	nop
 800513a:	bf00      	nop
 800513c:	3730      	adds	r7, #48	; 0x30
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000c80 	.word	0x20000c80

08005148 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b088      	sub	sp, #32
 800514c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800514e:	e048      	b.n	80051e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005150:	4b2d      	ldr	r3, [pc, #180]	; (8005208 <prvSwitchTimerLists+0xc0>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800515a:	4b2b      	ldr	r3, [pc, #172]	; (8005208 <prvSwitchTimerLists+0xc0>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	3304      	adds	r3, #4
 8005168:	4618      	mov	r0, r3
 800516a:	f7fe f92f 	bl	80033cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	2b00      	cmp	r3, #0
 8005182:	d02e      	beq.n	80051e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4413      	add	r3, r2
 800518c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	429a      	cmp	r2, r3
 8005194:	d90e      	bls.n	80051b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051a2:	4b19      	ldr	r3, [pc, #100]	; (8005208 <prvSwitchTimerLists+0xc0>)
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	3304      	adds	r3, #4
 80051aa:	4619      	mov	r1, r3
 80051ac:	4610      	mov	r0, r2
 80051ae:	f7fe f8d4 	bl	800335a <vListInsert>
 80051b2:	e016      	b.n	80051e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051b4:	2300      	movs	r3, #0
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	2300      	movs	r3, #0
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	2100      	movs	r1, #0
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f7ff fd60 	bl	8004c84 <xTimerGenericCommand>
 80051c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	603b      	str	r3, [r7, #0]
}
 80051de:	bf00      	nop
 80051e0:	e7fe      	b.n	80051e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051e2:	4b09      	ldr	r3, [pc, #36]	; (8005208 <prvSwitchTimerLists+0xc0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1b1      	bne.n	8005150 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80051ec:	4b06      	ldr	r3, [pc, #24]	; (8005208 <prvSwitchTimerLists+0xc0>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80051f2:	4b06      	ldr	r3, [pc, #24]	; (800520c <prvSwitchTimerLists+0xc4>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a04      	ldr	r2, [pc, #16]	; (8005208 <prvSwitchTimerLists+0xc0>)
 80051f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80051fa:	4a04      	ldr	r2, [pc, #16]	; (800520c <prvSwitchTimerLists+0xc4>)
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	6013      	str	r3, [r2, #0]
}
 8005200:	bf00      	nop
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	20000c78 	.word	0x20000c78
 800520c:	20000c7c 	.word	0x20000c7c

08005210 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005216:	f000 f965 	bl	80054e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800521a:	4b15      	ldr	r3, [pc, #84]	; (8005270 <prvCheckForValidListAndQueue+0x60>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d120      	bne.n	8005264 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005222:	4814      	ldr	r0, [pc, #80]	; (8005274 <prvCheckForValidListAndQueue+0x64>)
 8005224:	f7fe f848 	bl	80032b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005228:	4813      	ldr	r0, [pc, #76]	; (8005278 <prvCheckForValidListAndQueue+0x68>)
 800522a:	f7fe f845 	bl	80032b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800522e:	4b13      	ldr	r3, [pc, #76]	; (800527c <prvCheckForValidListAndQueue+0x6c>)
 8005230:	4a10      	ldr	r2, [pc, #64]	; (8005274 <prvCheckForValidListAndQueue+0x64>)
 8005232:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005234:	4b12      	ldr	r3, [pc, #72]	; (8005280 <prvCheckForValidListAndQueue+0x70>)
 8005236:	4a10      	ldr	r2, [pc, #64]	; (8005278 <prvCheckForValidListAndQueue+0x68>)
 8005238:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800523a:	2300      	movs	r3, #0
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	4b11      	ldr	r3, [pc, #68]	; (8005284 <prvCheckForValidListAndQueue+0x74>)
 8005240:	4a11      	ldr	r2, [pc, #68]	; (8005288 <prvCheckForValidListAndQueue+0x78>)
 8005242:	2110      	movs	r1, #16
 8005244:	200a      	movs	r0, #10
 8005246:	f7fe f953 	bl	80034f0 <xQueueGenericCreateStatic>
 800524a:	4603      	mov	r3, r0
 800524c:	4a08      	ldr	r2, [pc, #32]	; (8005270 <prvCheckForValidListAndQueue+0x60>)
 800524e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005250:	4b07      	ldr	r3, [pc, #28]	; (8005270 <prvCheckForValidListAndQueue+0x60>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d005      	beq.n	8005264 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005258:	4b05      	ldr	r3, [pc, #20]	; (8005270 <prvCheckForValidListAndQueue+0x60>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	490b      	ldr	r1, [pc, #44]	; (800528c <prvCheckForValidListAndQueue+0x7c>)
 800525e:	4618      	mov	r0, r3
 8005260:	f7fe fd6c 	bl	8003d3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005264:	f000 f96e 	bl	8005544 <vPortExitCritical>
}
 8005268:	bf00      	nop
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	20000c80 	.word	0x20000c80
 8005274:	20000c50 	.word	0x20000c50
 8005278:	20000c64 	.word	0x20000c64
 800527c:	20000c78 	.word	0x20000c78
 8005280:	20000c7c 	.word	0x20000c7c
 8005284:	20000d2c 	.word	0x20000d2c
 8005288:	20000c8c 	.word	0x20000c8c
 800528c:	080068b4 	.word	0x080068b4

08005290 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	3b04      	subs	r3, #4
 80052a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	3b04      	subs	r3, #4
 80052ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f023 0201 	bic.w	r2, r3, #1
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	3b04      	subs	r3, #4
 80052be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052c0:	4a0c      	ldr	r2, [pc, #48]	; (80052f4 <pxPortInitialiseStack+0x64>)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	3b14      	subs	r3, #20
 80052ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	3b04      	subs	r3, #4
 80052d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f06f 0202 	mvn.w	r2, #2
 80052de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3b20      	subs	r3, #32
 80052e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052e6:	68fb      	ldr	r3, [r7, #12]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	080052f9 	.word	0x080052f9

080052f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80052fe:	2300      	movs	r3, #0
 8005300:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005302:	4b12      	ldr	r3, [pc, #72]	; (800534c <prvTaskExitError+0x54>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530a:	d00a      	beq.n	8005322 <prvTaskExitError+0x2a>
	__asm volatile
 800530c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	60fb      	str	r3, [r7, #12]
}
 800531e:	bf00      	nop
 8005320:	e7fe      	b.n	8005320 <prvTaskExitError+0x28>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	60bb      	str	r3, [r7, #8]
}
 8005334:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005336:	bf00      	nop
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0fc      	beq.n	8005338 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800533e:	bf00      	nop
 8005340:	bf00      	nop
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	2000000c 	.word	0x2000000c

08005350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005350:	4b07      	ldr	r3, [pc, #28]	; (8005370 <pxCurrentTCBConst2>)
 8005352:	6819      	ldr	r1, [r3, #0]
 8005354:	6808      	ldr	r0, [r1, #0]
 8005356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800535a:	f380 8809 	msr	PSP, r0
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f04f 0000 	mov.w	r0, #0
 8005366:	f380 8811 	msr	BASEPRI, r0
 800536a:	4770      	bx	lr
 800536c:	f3af 8000 	nop.w

08005370 <pxCurrentTCBConst2>:
 8005370:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop

08005378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005378:	4808      	ldr	r0, [pc, #32]	; (800539c <prvPortStartFirstTask+0x24>)
 800537a:	6800      	ldr	r0, [r0, #0]
 800537c:	6800      	ldr	r0, [r0, #0]
 800537e:	f380 8808 	msr	MSP, r0
 8005382:	f04f 0000 	mov.w	r0, #0
 8005386:	f380 8814 	msr	CONTROL, r0
 800538a:	b662      	cpsie	i
 800538c:	b661      	cpsie	f
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	df00      	svc	0
 8005398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800539a:	bf00      	nop
 800539c:	e000ed08 	.word	0xe000ed08

080053a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80053a6:	4b46      	ldr	r3, [pc, #280]	; (80054c0 <xPortStartScheduler+0x120>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a46      	ldr	r2, [pc, #280]	; (80054c4 <xPortStartScheduler+0x124>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d10a      	bne.n	80053c6 <xPortStartScheduler+0x26>
	__asm volatile
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	613b      	str	r3, [r7, #16]
}
 80053c2:	bf00      	nop
 80053c4:	e7fe      	b.n	80053c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80053c6:	4b3e      	ldr	r3, [pc, #248]	; (80054c0 <xPortStartScheduler+0x120>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a3f      	ldr	r2, [pc, #252]	; (80054c8 <xPortStartScheduler+0x128>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d10a      	bne.n	80053e6 <xPortStartScheduler+0x46>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	60fb      	str	r3, [r7, #12]
}
 80053e2:	bf00      	nop
 80053e4:	e7fe      	b.n	80053e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053e6:	4b39      	ldr	r3, [pc, #228]	; (80054cc <xPortStartScheduler+0x12c>)
 80053e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	22ff      	movs	r2, #255	; 0xff
 80053f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005400:	78fb      	ldrb	r3, [r7, #3]
 8005402:	b2db      	uxtb	r3, r3
 8005404:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005408:	b2da      	uxtb	r2, r3
 800540a:	4b31      	ldr	r3, [pc, #196]	; (80054d0 <xPortStartScheduler+0x130>)
 800540c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800540e:	4b31      	ldr	r3, [pc, #196]	; (80054d4 <xPortStartScheduler+0x134>)
 8005410:	2207      	movs	r2, #7
 8005412:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005414:	e009      	b.n	800542a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005416:	4b2f      	ldr	r3, [pc, #188]	; (80054d4 <xPortStartScheduler+0x134>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	3b01      	subs	r3, #1
 800541c:	4a2d      	ldr	r2, [pc, #180]	; (80054d4 <xPortStartScheduler+0x134>)
 800541e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005420:	78fb      	ldrb	r3, [r7, #3]
 8005422:	b2db      	uxtb	r3, r3
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	b2db      	uxtb	r3, r3
 8005428:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800542a:	78fb      	ldrb	r3, [r7, #3]
 800542c:	b2db      	uxtb	r3, r3
 800542e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005432:	2b80      	cmp	r3, #128	; 0x80
 8005434:	d0ef      	beq.n	8005416 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005436:	4b27      	ldr	r3, [pc, #156]	; (80054d4 <xPortStartScheduler+0x134>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f1c3 0307 	rsb	r3, r3, #7
 800543e:	2b04      	cmp	r3, #4
 8005440:	d00a      	beq.n	8005458 <xPortStartScheduler+0xb8>
	__asm volatile
 8005442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	60bb      	str	r3, [r7, #8]
}
 8005454:	bf00      	nop
 8005456:	e7fe      	b.n	8005456 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005458:	4b1e      	ldr	r3, [pc, #120]	; (80054d4 <xPortStartScheduler+0x134>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	021b      	lsls	r3, r3, #8
 800545e:	4a1d      	ldr	r2, [pc, #116]	; (80054d4 <xPortStartScheduler+0x134>)
 8005460:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005462:	4b1c      	ldr	r3, [pc, #112]	; (80054d4 <xPortStartScheduler+0x134>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800546a:	4a1a      	ldr	r2, [pc, #104]	; (80054d4 <xPortStartScheduler+0x134>)
 800546c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	b2da      	uxtb	r2, r3
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005476:	4b18      	ldr	r3, [pc, #96]	; (80054d8 <xPortStartScheduler+0x138>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a17      	ldr	r2, [pc, #92]	; (80054d8 <xPortStartScheduler+0x138>)
 800547c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005480:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005482:	4b15      	ldr	r3, [pc, #84]	; (80054d8 <xPortStartScheduler+0x138>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a14      	ldr	r2, [pc, #80]	; (80054d8 <xPortStartScheduler+0x138>)
 8005488:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800548c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800548e:	f000 f8dd 	bl	800564c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005492:	4b12      	ldr	r3, [pc, #72]	; (80054dc <xPortStartScheduler+0x13c>)
 8005494:	2200      	movs	r2, #0
 8005496:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005498:	f000 f8fc 	bl	8005694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800549c:	4b10      	ldr	r3, [pc, #64]	; (80054e0 <xPortStartScheduler+0x140>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a0f      	ldr	r2, [pc, #60]	; (80054e0 <xPortStartScheduler+0x140>)
 80054a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80054a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80054a8:	f7ff ff66 	bl	8005378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80054ac:	f7ff f856 	bl	800455c <vTaskSwitchContext>
	prvTaskExitError();
 80054b0:	f7ff ff22 	bl	80052f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	e000ed00 	.word	0xe000ed00
 80054c4:	410fc271 	.word	0x410fc271
 80054c8:	410fc270 	.word	0x410fc270
 80054cc:	e000e400 	.word	0xe000e400
 80054d0:	20000d7c 	.word	0x20000d7c
 80054d4:	20000d80 	.word	0x20000d80
 80054d8:	e000ed20 	.word	0xe000ed20
 80054dc:	2000000c 	.word	0x2000000c
 80054e0:	e000ef34 	.word	0xe000ef34

080054e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
	__asm volatile
 80054ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	607b      	str	r3, [r7, #4]
}
 80054fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80054fe:	4b0f      	ldr	r3, [pc, #60]	; (800553c <vPortEnterCritical+0x58>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	3301      	adds	r3, #1
 8005504:	4a0d      	ldr	r2, [pc, #52]	; (800553c <vPortEnterCritical+0x58>)
 8005506:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005508:	4b0c      	ldr	r3, [pc, #48]	; (800553c <vPortEnterCritical+0x58>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d10f      	bne.n	8005530 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005510:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <vPortEnterCritical+0x5c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00a      	beq.n	8005530 <vPortEnterCritical+0x4c>
	__asm volatile
 800551a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	603b      	str	r3, [r7, #0]
}
 800552c:	bf00      	nop
 800552e:	e7fe      	b.n	800552e <vPortEnterCritical+0x4a>
	}
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	2000000c 	.word	0x2000000c
 8005540:	e000ed04 	.word	0xe000ed04

08005544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800554a:	4b12      	ldr	r3, [pc, #72]	; (8005594 <vPortExitCritical+0x50>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10a      	bne.n	8005568 <vPortExitCritical+0x24>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	607b      	str	r3, [r7, #4]
}
 8005564:	bf00      	nop
 8005566:	e7fe      	b.n	8005566 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005568:	4b0a      	ldr	r3, [pc, #40]	; (8005594 <vPortExitCritical+0x50>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3b01      	subs	r3, #1
 800556e:	4a09      	ldr	r2, [pc, #36]	; (8005594 <vPortExitCritical+0x50>)
 8005570:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005572:	4b08      	ldr	r3, [pc, #32]	; (8005594 <vPortExitCritical+0x50>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d105      	bne.n	8005586 <vPortExitCritical+0x42>
 800557a:	2300      	movs	r3, #0
 800557c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	f383 8811 	msr	BASEPRI, r3
}
 8005584:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	2000000c 	.word	0x2000000c
	...

080055a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80055a0:	f3ef 8009 	mrs	r0, PSP
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	4b15      	ldr	r3, [pc, #84]	; (8005600 <pxCurrentTCBConst>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	f01e 0f10 	tst.w	lr, #16
 80055b0:	bf08      	it	eq
 80055b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ba:	6010      	str	r0, [r2, #0]
 80055bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80055c4:	f380 8811 	msr	BASEPRI, r0
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f7fe ffc4 	bl	800455c <vTaskSwitchContext>
 80055d4:	f04f 0000 	mov.w	r0, #0
 80055d8:	f380 8811 	msr	BASEPRI, r0
 80055dc:	bc09      	pop	{r0, r3}
 80055de:	6819      	ldr	r1, [r3, #0]
 80055e0:	6808      	ldr	r0, [r1, #0]
 80055e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e6:	f01e 0f10 	tst.w	lr, #16
 80055ea:	bf08      	it	eq
 80055ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80055f0:	f380 8809 	msr	PSP, r0
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	f3af 8000 	nop.w

08005600 <pxCurrentTCBConst>:
 8005600:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005604:	bf00      	nop
 8005606:	bf00      	nop

08005608 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	607b      	str	r3, [r7, #4]
}
 8005620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005622:	f7fe fee1 	bl	80043e8 <xTaskIncrementTick>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800562c:	4b06      	ldr	r3, [pc, #24]	; (8005648 <xPortSysTickHandler+0x40>)
 800562e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	2300      	movs	r3, #0
 8005636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	f383 8811 	msr	BASEPRI, r3
}
 800563e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005640:	bf00      	nop
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	e000ed04 	.word	0xe000ed04

0800564c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005650:	4b0b      	ldr	r3, [pc, #44]	; (8005680 <vPortSetupTimerInterrupt+0x34>)
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005656:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <vPortSetupTimerInterrupt+0x38>)
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800565c:	4b0a      	ldr	r3, [pc, #40]	; (8005688 <vPortSetupTimerInterrupt+0x3c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a0a      	ldr	r2, [pc, #40]	; (800568c <vPortSetupTimerInterrupt+0x40>)
 8005662:	fba2 2303 	umull	r2, r3, r2, r3
 8005666:	099b      	lsrs	r3, r3, #6
 8005668:	4a09      	ldr	r2, [pc, #36]	; (8005690 <vPortSetupTimerInterrupt+0x44>)
 800566a:	3b01      	subs	r3, #1
 800566c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800566e:	4b04      	ldr	r3, [pc, #16]	; (8005680 <vPortSetupTimerInterrupt+0x34>)
 8005670:	2207      	movs	r2, #7
 8005672:	601a      	str	r2, [r3, #0]
}
 8005674:	bf00      	nop
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	e000e010 	.word	0xe000e010
 8005684:	e000e018 	.word	0xe000e018
 8005688:	20000000 	.word	0x20000000
 800568c:	10624dd3 	.word	0x10624dd3
 8005690:	e000e014 	.word	0xe000e014

08005694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005694:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80056a4 <vPortEnableVFP+0x10>
 8005698:	6801      	ldr	r1, [r0, #0]
 800569a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800569e:	6001      	str	r1, [r0, #0]
 80056a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80056a2:	bf00      	nop
 80056a4:	e000ed88 	.word	0xe000ed88

080056a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80056ae:	f3ef 8305 	mrs	r3, IPSR
 80056b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2b0f      	cmp	r3, #15
 80056b8:	d914      	bls.n	80056e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056ba:	4a17      	ldr	r2, [pc, #92]	; (8005718 <vPortValidateInterruptPriority+0x70>)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4413      	add	r3, r2
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056c4:	4b15      	ldr	r3, [pc, #84]	; (800571c <vPortValidateInterruptPriority+0x74>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	7afa      	ldrb	r2, [r7, #11]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d20a      	bcs.n	80056e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	607b      	str	r3, [r7, #4]
}
 80056e0:	bf00      	nop
 80056e2:	e7fe      	b.n	80056e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056e4:	4b0e      	ldr	r3, [pc, #56]	; (8005720 <vPortValidateInterruptPriority+0x78>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80056ec:	4b0d      	ldr	r3, [pc, #52]	; (8005724 <vPortValidateInterruptPriority+0x7c>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d90a      	bls.n	800570a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	603b      	str	r3, [r7, #0]
}
 8005706:	bf00      	nop
 8005708:	e7fe      	b.n	8005708 <vPortValidateInterruptPriority+0x60>
	}
 800570a:	bf00      	nop
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	e000e3f0 	.word	0xe000e3f0
 800571c:	20000d7c 	.word	0x20000d7c
 8005720:	e000ed0c 	.word	0xe000ed0c
 8005724:	20000d80 	.word	0x20000d80

08005728 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08a      	sub	sp, #40	; 0x28
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005730:	2300      	movs	r3, #0
 8005732:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005734:	f7fe fd9c 	bl	8004270 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005738:	4b5b      	ldr	r3, [pc, #364]	; (80058a8 <pvPortMalloc+0x180>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005740:	f000 f920 	bl	8005984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005744:	4b59      	ldr	r3, [pc, #356]	; (80058ac <pvPortMalloc+0x184>)
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4013      	ands	r3, r2
 800574c:	2b00      	cmp	r3, #0
 800574e:	f040 8093 	bne.w	8005878 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01d      	beq.n	8005794 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005758:	2208      	movs	r2, #8
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4413      	add	r3, r2
 800575e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	2b00      	cmp	r3, #0
 8005768:	d014      	beq.n	8005794 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f023 0307 	bic.w	r3, r3, #7
 8005770:	3308      	adds	r3, #8
 8005772:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <pvPortMalloc+0x6c>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	617b      	str	r3, [r7, #20]
}
 8005790:	bf00      	nop
 8005792:	e7fe      	b.n	8005792 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d06e      	beq.n	8005878 <pvPortMalloc+0x150>
 800579a:	4b45      	ldr	r3, [pc, #276]	; (80058b0 <pvPortMalloc+0x188>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d869      	bhi.n	8005878 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80057a4:	4b43      	ldr	r3, [pc, #268]	; (80058b4 <pvPortMalloc+0x18c>)
 80057a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80057a8:	4b42      	ldr	r3, [pc, #264]	; (80058b4 <pvPortMalloc+0x18c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057ae:	e004      	b.n	80057ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d903      	bls.n	80057cc <pvPortMalloc+0xa4>
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1f1      	bne.n	80057b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057cc:	4b36      	ldr	r3, [pc, #216]	; (80058a8 <pvPortMalloc+0x180>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d050      	beq.n	8005878 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2208      	movs	r2, #8
 80057dc:	4413      	add	r3, r2
 80057de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	1ad2      	subs	r2, r2, r3
 80057f0:	2308      	movs	r3, #8
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d91f      	bls.n	8005838 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4413      	add	r3, r2
 80057fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	f003 0307 	and.w	r3, r3, #7
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <pvPortMalloc+0xf8>
	__asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	613b      	str	r3, [r7, #16]
}
 800581c:	bf00      	nop
 800581e:	e7fe      	b.n	800581e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	1ad2      	subs	r2, r2, r3
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005832:	69b8      	ldr	r0, [r7, #24]
 8005834:	f000 f908 	bl	8005a48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005838:	4b1d      	ldr	r3, [pc, #116]	; (80058b0 <pvPortMalloc+0x188>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	4a1b      	ldr	r2, [pc, #108]	; (80058b0 <pvPortMalloc+0x188>)
 8005844:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005846:	4b1a      	ldr	r3, [pc, #104]	; (80058b0 <pvPortMalloc+0x188>)
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	4b1b      	ldr	r3, [pc, #108]	; (80058b8 <pvPortMalloc+0x190>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	429a      	cmp	r2, r3
 8005850:	d203      	bcs.n	800585a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005852:	4b17      	ldr	r3, [pc, #92]	; (80058b0 <pvPortMalloc+0x188>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a18      	ldr	r2, [pc, #96]	; (80058b8 <pvPortMalloc+0x190>)
 8005858:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	4b13      	ldr	r3, [pc, #76]	; (80058ac <pvPortMalloc+0x184>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	431a      	orrs	r2, r3
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800586e:	4b13      	ldr	r3, [pc, #76]	; (80058bc <pvPortMalloc+0x194>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3301      	adds	r3, #1
 8005874:	4a11      	ldr	r2, [pc, #68]	; (80058bc <pvPortMalloc+0x194>)
 8005876:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005878:	f7fe fd08 	bl	800428c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <pvPortMalloc+0x174>
	__asm volatile
 8005886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	60fb      	str	r3, [r7, #12]
}
 8005898:	bf00      	nop
 800589a:	e7fe      	b.n	800589a <pvPortMalloc+0x172>
	return pvReturn;
 800589c:	69fb      	ldr	r3, [r7, #28]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3728      	adds	r7, #40	; 0x28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	2000498c 	.word	0x2000498c
 80058ac:	200049a0 	.word	0x200049a0
 80058b0:	20004990 	.word	0x20004990
 80058b4:	20004984 	.word	0x20004984
 80058b8:	20004994 	.word	0x20004994
 80058bc:	20004998 	.word	0x20004998

080058c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d04d      	beq.n	800596e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80058d2:	2308      	movs	r3, #8
 80058d4:	425b      	negs	r3, r3
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	4413      	add	r3, r2
 80058da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	4b24      	ldr	r3, [pc, #144]	; (8005978 <vPortFree+0xb8>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4013      	ands	r3, r2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10a      	bne.n	8005904 <vPortFree+0x44>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	60fb      	str	r3, [r7, #12]
}
 8005900:	bf00      	nop
 8005902:	e7fe      	b.n	8005902 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00a      	beq.n	8005922 <vPortFree+0x62>
	__asm volatile
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	60bb      	str	r3, [r7, #8]
}
 800591e:	bf00      	nop
 8005920:	e7fe      	b.n	8005920 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	4b14      	ldr	r3, [pc, #80]	; (8005978 <vPortFree+0xb8>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4013      	ands	r3, r2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01e      	beq.n	800596e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d11a      	bne.n	800596e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	4b0e      	ldr	r3, [pc, #56]	; (8005978 <vPortFree+0xb8>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	43db      	mvns	r3, r3
 8005942:	401a      	ands	r2, r3
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005948:	f7fe fc92 	bl	8004270 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	4b0a      	ldr	r3, [pc, #40]	; (800597c <vPortFree+0xbc>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4413      	add	r3, r2
 8005956:	4a09      	ldr	r2, [pc, #36]	; (800597c <vPortFree+0xbc>)
 8005958:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800595a:	6938      	ldr	r0, [r7, #16]
 800595c:	f000 f874 	bl	8005a48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005960:	4b07      	ldr	r3, [pc, #28]	; (8005980 <vPortFree+0xc0>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3301      	adds	r3, #1
 8005966:	4a06      	ldr	r2, [pc, #24]	; (8005980 <vPortFree+0xc0>)
 8005968:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800596a:	f7fe fc8f 	bl	800428c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800596e:	bf00      	nop
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	200049a0 	.word	0x200049a0
 800597c:	20004990 	.word	0x20004990
 8005980:	2000499c 	.word	0x2000499c

08005984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800598a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800598e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005990:	4b27      	ldr	r3, [pc, #156]	; (8005a30 <prvHeapInit+0xac>)
 8005992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00c      	beq.n	80059b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3307      	adds	r3, #7
 80059a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0307 	bic.w	r3, r3, #7
 80059aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	4a1f      	ldr	r2, [pc, #124]	; (8005a30 <prvHeapInit+0xac>)
 80059b4:	4413      	add	r3, r2
 80059b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059bc:	4a1d      	ldr	r2, [pc, #116]	; (8005a34 <prvHeapInit+0xb0>)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80059c2:	4b1c      	ldr	r3, [pc, #112]	; (8005a34 <prvHeapInit+0xb0>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	4413      	add	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059d0:	2208      	movs	r2, #8
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	1a9b      	subs	r3, r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0307 	bic.w	r3, r3, #7
 80059de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4a15      	ldr	r2, [pc, #84]	; (8005a38 <prvHeapInit+0xb4>)
 80059e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059e6:	4b14      	ldr	r3, [pc, #80]	; (8005a38 <prvHeapInit+0xb4>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2200      	movs	r2, #0
 80059ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059ee:	4b12      	ldr	r3, [pc, #72]	; (8005a38 <prvHeapInit+0xb4>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2200      	movs	r2, #0
 80059f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	1ad2      	subs	r2, r2, r3
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a04:	4b0c      	ldr	r3, [pc, #48]	; (8005a38 <prvHeapInit+0xb4>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	4a0a      	ldr	r2, [pc, #40]	; (8005a3c <prvHeapInit+0xb8>)
 8005a12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	4a09      	ldr	r2, [pc, #36]	; (8005a40 <prvHeapInit+0xbc>)
 8005a1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a1c:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <prvHeapInit+0xc0>)
 8005a1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a22:	601a      	str	r2, [r3, #0]
}
 8005a24:	bf00      	nop
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	20000d84 	.word	0x20000d84
 8005a34:	20004984 	.word	0x20004984
 8005a38:	2000498c 	.word	0x2000498c
 8005a3c:	20004994 	.word	0x20004994
 8005a40:	20004990 	.word	0x20004990
 8005a44:	200049a0 	.word	0x200049a0

08005a48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a50:	4b28      	ldr	r3, [pc, #160]	; (8005af4 <prvInsertBlockIntoFreeList+0xac>)
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	e002      	b.n	8005a5c <prvInsertBlockIntoFreeList+0x14>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d8f7      	bhi.n	8005a56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	4413      	add	r3, r2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d108      	bne.n	8005a8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	441a      	add	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	441a      	add	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d118      	bne.n	8005ad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	4b15      	ldr	r3, [pc, #84]	; (8005af8 <prvInsertBlockIntoFreeList+0xb0>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d00d      	beq.n	8005ac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	441a      	add	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	e008      	b.n	8005ad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ac6:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	e003      	b.n	8005ad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d002      	beq.n	8005ae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ae6:	bf00      	nop
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	20004984 	.word	0x20004984
 8005af8:	2000498c 	.word	0x2000498c

08005afc <OLED_Refresh_Gram>:
#include "stdlib.h"
#include "oledfont.h"  

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8005b02:	2300      	movs	r3, #0
 8005b04:	71fb      	strb	r3, [r7, #7]
 8005b06:	e026      	b.n	8005b56 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8005b08:	79fb      	ldrb	r3, [r7, #7]
 8005b0a:	3b50      	subs	r3, #80	; 0x50
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2100      	movs	r1, #0
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 f82b 	bl	8005b6c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8005b16:	2100      	movs	r1, #0
 8005b18:	2000      	movs	r0, #0
 8005b1a:	f000 f827 	bl	8005b6c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8005b1e:	2100      	movs	r1, #0
 8005b20:	2010      	movs	r0, #16
 8005b22:	f000 f823 	bl	8005b6c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8005b26:	2300      	movs	r3, #0
 8005b28:	71bb      	strb	r3, [r7, #6]
 8005b2a:	e00d      	b.n	8005b48 <OLED_Refresh_Gram+0x4c>
 8005b2c:	79ba      	ldrb	r2, [r7, #6]
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	490d      	ldr	r1, [pc, #52]	; (8005b68 <OLED_Refresh_Gram+0x6c>)
 8005b32:	00d2      	lsls	r2, r2, #3
 8005b34:	440a      	add	r2, r1
 8005b36:	4413      	add	r3, r2
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 f815 	bl	8005b6c <OLED_WR_Byte>
 8005b42:	79bb      	ldrb	r3, [r7, #6]
 8005b44:	3301      	adds	r3, #1
 8005b46:	71bb      	strb	r3, [r7, #6]
 8005b48:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	daed      	bge.n	8005b2c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8005b50:	79fb      	ldrb	r3, [r7, #7]
 8005b52:	3301      	adds	r3, #1
 8005b54:	71fb      	strb	r3, [r7, #7]
 8005b56:	79fb      	ldrb	r3, [r7, #7]
 8005b58:	2b07      	cmp	r3, #7
 8005b5a:	d9d5      	bls.n	8005b08 <OLED_Refresh_Gram+0xc>
	}   
}
 8005b5c:	bf00      	nop
 8005b5e:	bf00      	nop
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	20004adc 	.word	0x20004adc

08005b6c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	4603      	mov	r3, r0
 8005b74:	460a      	mov	r2, r1
 8005b76:	71fb      	strb	r3, [r7, #7]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8005b7c:	79bb      	ldrb	r3, [r7, #6]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d006      	beq.n	8005b90 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8005b82:	2201      	movs	r2, #1
 8005b84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b88:	481c      	ldr	r0, [pc, #112]	; (8005bfc <OLED_WR_Byte+0x90>)
 8005b8a:	f7fb fdc3 	bl	8001714 <HAL_GPIO_WritePin>
 8005b8e:	e005      	b.n	8005b9c <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8005b90:	2200      	movs	r2, #0
 8005b92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b96:	4819      	ldr	r0, [pc, #100]	; (8005bfc <OLED_WR_Byte+0x90>)
 8005b98:	f7fb fdbc 	bl	8001714 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	73fb      	strb	r3, [r7, #15]
 8005ba0:	e01e      	b.n	8005be0 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2120      	movs	r1, #32
 8005ba6:	4815      	ldr	r0, [pc, #84]	; (8005bfc <OLED_WR_Byte+0x90>)
 8005ba8:	f7fb fdb4 	bl	8001714 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8005bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	da05      	bge.n	8005bc0 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	2140      	movs	r1, #64	; 0x40
 8005bb8:	4810      	ldr	r0, [pc, #64]	; (8005bfc <OLED_WR_Byte+0x90>)
 8005bba:	f7fb fdab 	bl	8001714 <HAL_GPIO_WritePin>
 8005bbe:	e004      	b.n	8005bca <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2140      	movs	r1, #64	; 0x40
 8005bc4:	480d      	ldr	r0, [pc, #52]	; (8005bfc <OLED_WR_Byte+0x90>)
 8005bc6:	f7fb fda5 	bl	8001714 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8005bca:	2201      	movs	r2, #1
 8005bcc:	2120      	movs	r1, #32
 8005bce:	480b      	ldr	r0, [pc, #44]	; (8005bfc <OLED_WR_Byte+0x90>)
 8005bd0:	f7fb fda0 	bl	8001714 <HAL_GPIO_WritePin>
		dat<<=1;   
 8005bd4:	79fb      	ldrb	r3, [r7, #7]
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	73fb      	strb	r3, [r7, #15]
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
 8005be2:	2b07      	cmp	r3, #7
 8005be4:	d9dd      	bls.n	8005ba2 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8005be6:	2201      	movs	r2, #1
 8005be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005bec:	4803      	ldr	r0, [pc, #12]	; (8005bfc <OLED_WR_Byte+0x90>)
 8005bee:	f7fb fd91 	bl	8001714 <HAL_GPIO_WritePin>
} 
 8005bf2:	bf00      	nop
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	40021000 	.word	0x40021000

08005c00 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8005c06:	2300      	movs	r3, #0
 8005c08:	71fb      	strb	r3, [r7, #7]
 8005c0a:	e014      	b.n	8005c36 <OLED_Clear+0x36>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	71bb      	strb	r3, [r7, #6]
 8005c10:	e00a      	b.n	8005c28 <OLED_Clear+0x28>
 8005c12:	79ba      	ldrb	r2, [r7, #6]
 8005c14:	79fb      	ldrb	r3, [r7, #7]
 8005c16:	490c      	ldr	r1, [pc, #48]	; (8005c48 <OLED_Clear+0x48>)
 8005c18:	00d2      	lsls	r2, r2, #3
 8005c1a:	440a      	add	r2, r1
 8005c1c:	4413      	add	r3, r2
 8005c1e:	2200      	movs	r2, #0
 8005c20:	701a      	strb	r2, [r3, #0]
 8005c22:	79bb      	ldrb	r3, [r7, #6]
 8005c24:	3301      	adds	r3, #1
 8005c26:	71bb      	strb	r3, [r7, #6]
 8005c28:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	daf0      	bge.n	8005c12 <OLED_Clear+0x12>
 8005c30:	79fb      	ldrb	r3, [r7, #7]
 8005c32:	3301      	adds	r3, #1
 8005c34:	71fb      	strb	r3, [r7, #7]
 8005c36:	79fb      	ldrb	r3, [r7, #7]
 8005c38:	2b07      	cmp	r3, #7
 8005c3a:	d9e7      	bls.n	8005c0c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8005c3c:	f7ff ff5e 	bl	8005afc <OLED_Refresh_Gram>
}
 8005c40:	bf00      	nop
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	20004adc 	.word	0x20004adc

08005c4c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	4603      	mov	r3, r0
 8005c54:	71fb      	strb	r3, [r7, #7]
 8005c56:	460b      	mov	r3, r1
 8005c58:	71bb      	strb	r3, [r7, #6]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8005c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	db41      	blt.n	8005cee <OLED_DrawPoint+0xa2>
 8005c6a:	79bb      	ldrb	r3, [r7, #6]
 8005c6c:	2b3f      	cmp	r3, #63	; 0x3f
 8005c6e:	d83e      	bhi.n	8005cee <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8005c70:	79bb      	ldrb	r3, [r7, #6]
 8005c72:	08db      	lsrs	r3, r3, #3
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	f1c3 0307 	rsb	r3, r3, #7
 8005c7a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8005c7c:	79bb      	ldrb	r3, [r7, #6]
 8005c7e:	f003 0307 	and.w	r3, r3, #7
 8005c82:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8005c84:	7b7b      	ldrb	r3, [r7, #13]
 8005c86:	f1c3 0307 	rsb	r3, r3, #7
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c90:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8005c92:	797b      	ldrb	r3, [r7, #5]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d012      	beq.n	8005cbe <OLED_DrawPoint+0x72>
 8005c98:	79fa      	ldrb	r2, [r7, #7]
 8005c9a:	7bbb      	ldrb	r3, [r7, #14]
 8005c9c:	4917      	ldr	r1, [pc, #92]	; (8005cfc <OLED_DrawPoint+0xb0>)
 8005c9e:	00d2      	lsls	r2, r2, #3
 8005ca0:	440a      	add	r2, r1
 8005ca2:	4413      	add	r3, r2
 8005ca4:	7818      	ldrb	r0, [r3, #0]
 8005ca6:	79fa      	ldrb	r2, [r7, #7]
 8005ca8:	7bbb      	ldrb	r3, [r7, #14]
 8005caa:	7bf9      	ldrb	r1, [r7, #15]
 8005cac:	4301      	orrs	r1, r0
 8005cae:	b2c8      	uxtb	r0, r1
 8005cb0:	4912      	ldr	r1, [pc, #72]	; (8005cfc <OLED_DrawPoint+0xb0>)
 8005cb2:	00d2      	lsls	r2, r2, #3
 8005cb4:	440a      	add	r2, r1
 8005cb6:	4413      	add	r3, r2
 8005cb8:	4602      	mov	r2, r0
 8005cba:	701a      	strb	r2, [r3, #0]
 8005cbc:	e018      	b.n	8005cf0 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8005cbe:	79fa      	ldrb	r2, [r7, #7]
 8005cc0:	7bbb      	ldrb	r3, [r7, #14]
 8005cc2:	490e      	ldr	r1, [pc, #56]	; (8005cfc <OLED_DrawPoint+0xb0>)
 8005cc4:	00d2      	lsls	r2, r2, #3
 8005cc6:	440a      	add	r2, r1
 8005cc8:	4413      	add	r3, r2
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	b25a      	sxtb	r2, r3
 8005cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cd2:	43db      	mvns	r3, r3
 8005cd4:	b25b      	sxtb	r3, r3
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	b259      	sxtb	r1, r3
 8005cda:	79fa      	ldrb	r2, [r7, #7]
 8005cdc:	7bbb      	ldrb	r3, [r7, #14]
 8005cde:	b2c8      	uxtb	r0, r1
 8005ce0:	4906      	ldr	r1, [pc, #24]	; (8005cfc <OLED_DrawPoint+0xb0>)
 8005ce2:	00d2      	lsls	r2, r2, #3
 8005ce4:	440a      	add	r2, r1
 8005ce6:	4413      	add	r3, r2
 8005ce8:	4602      	mov	r2, r0
 8005cea:	701a      	strb	r2, [r3, #0]
 8005cec:	e000      	b.n	8005cf0 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8005cee:	bf00      	nop
}
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	20004adc 	.word	0x20004adc

08005d00 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8005d00:	b590      	push	{r4, r7, lr}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	4604      	mov	r4, r0
 8005d08:	4608      	mov	r0, r1
 8005d0a:	4611      	mov	r1, r2
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	4623      	mov	r3, r4
 8005d10:	71fb      	strb	r3, [r7, #7]
 8005d12:	4603      	mov	r3, r0
 8005d14:	71bb      	strb	r3, [r7, #6]
 8005d16:	460b      	mov	r3, r1
 8005d18:	717b      	strb	r3, [r7, #5]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8005d1e:	79bb      	ldrb	r3, [r7, #6]
 8005d20:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8005d22:	797b      	ldrb	r3, [r7, #5]
 8005d24:	3b20      	subs	r3, #32
 8005d26:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8005d28:	2300      	movs	r3, #0
 8005d2a:	73bb      	strb	r3, [r7, #14]
 8005d2c:	e04d      	b.n	8005dca <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8005d2e:	793b      	ldrb	r3, [r7, #4]
 8005d30:	2b0c      	cmp	r3, #12
 8005d32:	d10b      	bne.n	8005d4c <OLED_ShowChar+0x4c>
 8005d34:	797a      	ldrb	r2, [r7, #5]
 8005d36:	7bb9      	ldrb	r1, [r7, #14]
 8005d38:	4828      	ldr	r0, [pc, #160]	; (8005ddc <OLED_ShowChar+0xdc>)
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	4413      	add	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4403      	add	r3, r0
 8005d44:	440b      	add	r3, r1
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	73fb      	strb	r3, [r7, #15]
 8005d4a:	e007      	b.n	8005d5c <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8005d4c:	797a      	ldrb	r2, [r7, #5]
 8005d4e:	7bbb      	ldrb	r3, [r7, #14]
 8005d50:	4923      	ldr	r1, [pc, #140]	; (8005de0 <OLED_ShowChar+0xe0>)
 8005d52:	0112      	lsls	r2, r2, #4
 8005d54:	440a      	add	r2, r1
 8005d56:	4413      	add	r3, r2
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	737b      	strb	r3, [r7, #13]
 8005d60:	e02d      	b.n	8005dbe <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8005d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	da07      	bge.n	8005d7a <OLED_ShowChar+0x7a>
 8005d6a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005d6e:	79b9      	ldrb	r1, [r7, #6]
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff ff6a 	bl	8005c4c <OLED_DrawPoint>
 8005d78:	e00c      	b.n	8005d94 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8005d7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	bf0c      	ite	eq
 8005d82:	2301      	moveq	r3, #1
 8005d84:	2300      	movne	r3, #0
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	461a      	mov	r2, r3
 8005d8a:	79b9      	ldrb	r1, [r7, #6]
 8005d8c:	79fb      	ldrb	r3, [r7, #7]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff ff5c 	bl	8005c4c <OLED_DrawPoint>
			temp<<=1;
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	005b      	lsls	r3, r3, #1
 8005d98:	73fb      	strb	r3, [r7, #15]
			y++;
 8005d9a:	79bb      	ldrb	r3, [r7, #6]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8005da0:	79ba      	ldrb	r2, [r7, #6]
 8005da2:	7b3b      	ldrb	r3, [r7, #12]
 8005da4:	1ad2      	subs	r2, r2, r3
 8005da6:	793b      	ldrb	r3, [r7, #4]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d105      	bne.n	8005db8 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8005dac:	7b3b      	ldrb	r3, [r7, #12]
 8005dae:	71bb      	strb	r3, [r7, #6]
				x++;
 8005db0:	79fb      	ldrb	r3, [r7, #7]
 8005db2:	3301      	adds	r3, #1
 8005db4:	71fb      	strb	r3, [r7, #7]
				break;
 8005db6:	e005      	b.n	8005dc4 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8005db8:	7b7b      	ldrb	r3, [r7, #13]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	737b      	strb	r3, [r7, #13]
 8005dbe:	7b7b      	ldrb	r3, [r7, #13]
 8005dc0:	2b07      	cmp	r3, #7
 8005dc2:	d9ce      	bls.n	8005d62 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8005dc4:	7bbb      	ldrb	r3, [r7, #14]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	73bb      	strb	r3, [r7, #14]
 8005dca:	7bba      	ldrb	r2, [r7, #14]
 8005dcc:	793b      	ldrb	r3, [r7, #4]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d3ad      	bcc.n	8005d2e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8005dd2:	bf00      	nop
 8005dd4:	bf00      	nop
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd90      	pop	{r4, r7, pc}
 8005ddc:	08006980 	.word	0x08006980
 8005de0:	08006df4 	.word	0x08006df4

08005de4 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af02      	add	r7, sp, #8
 8005dea:	4603      	mov	r3, r0
 8005dec:	603a      	str	r2, [r7, #0]
 8005dee:	71fb      	strb	r3, [r7, #7]
 8005df0:	460b      	mov	r3, r1
 8005df2:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8005df4:	e01f      	b.n	8005e36 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8005df6:	79fb      	ldrb	r3, [r7, #7]
 8005df8:	2b7a      	cmp	r3, #122	; 0x7a
 8005dfa:	d904      	bls.n	8005e06 <OLED_ShowString+0x22>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	71fb      	strb	r3, [r7, #7]
 8005e00:	79bb      	ldrb	r3, [r7, #6]
 8005e02:	3310      	adds	r3, #16
 8005e04:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8005e06:	79bb      	ldrb	r3, [r7, #6]
 8005e08:	2b3a      	cmp	r3, #58	; 0x3a
 8005e0a:	d905      	bls.n	8005e18 <OLED_ShowString+0x34>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	71fb      	strb	r3, [r7, #7]
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	71bb      	strb	r3, [r7, #6]
 8005e14:	f7ff fef4 	bl	8005c00 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781a      	ldrb	r2, [r3, #0]
 8005e1c:	79b9      	ldrb	r1, [r7, #6]
 8005e1e:	79f8      	ldrb	r0, [r7, #7]
 8005e20:	2301      	movs	r3, #1
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	230c      	movs	r3, #12
 8005e26:	f7ff ff6b 	bl	8005d00 <OLED_ShowChar>
        x+=8;
 8005e2a:	79fb      	ldrb	r3, [r7, #7]
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	71fb      	strb	r3, [r7, #7]
        p++;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	3301      	adds	r3, #1
 8005e34:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1db      	bne.n	8005df6 <OLED_ShowString+0x12>
    }  
}	 
 8005e3e:	bf00      	nop
 8005e40:	bf00      	nop
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <OLED_Init>:

void OLED_Init(void)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8005e4c:	f7fb fc96 	bl	800177c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8005e50:	4b41      	ldr	r3, [pc, #260]	; (8005f58 <OLED_Init+0x110>)
 8005e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e54:	4a40      	ldr	r2, [pc, #256]	; (8005f58 <OLED_Init+0x110>)
 8005e56:	f023 0301 	bic.w	r3, r3, #1
 8005e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e5c:	4b3e      	ldr	r3, [pc, #248]	; (8005f58 <OLED_Init+0x110>)
 8005e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e60:	4a3d      	ldr	r2, [pc, #244]	; (8005f58 <OLED_Init+0x110>)
 8005e62:	f023 0304 	bic.w	r3, r3, #4
 8005e66:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8005e68:	f7fb fc9c 	bl	80017a4 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	2180      	movs	r1, #128	; 0x80
 8005e70:	483a      	ldr	r0, [pc, #232]	; (8005f5c <OLED_Init+0x114>)
 8005e72:	f7fb fc4f 	bl	8001714 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005e76:	2064      	movs	r0, #100	; 0x64
 8005e78:	f7fb f9a6 	bl	80011c8 <HAL_Delay>
	OLED_RST_Set();
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	2180      	movs	r1, #128	; 0x80
 8005e80:	4836      	ldr	r0, [pc, #216]	; (8005f5c <OLED_Init+0x114>)
 8005e82:	f7fb fc47 	bl	8001714 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8005e86:	2100      	movs	r1, #0
 8005e88:	20ae      	movs	r0, #174	; 0xae
 8005e8a:	f7ff fe6f 	bl	8005b6c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8005e8e:	2100      	movs	r1, #0
 8005e90:	20d5      	movs	r0, #213	; 0xd5
 8005e92:	f7ff fe6b 	bl	8005b6c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8005e96:	2100      	movs	r1, #0
 8005e98:	2050      	movs	r0, #80	; 0x50
 8005e9a:	f7ff fe67 	bl	8005b6c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	20a8      	movs	r0, #168	; 0xa8
 8005ea2:	f7ff fe63 	bl	8005b6c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	203f      	movs	r0, #63	; 0x3f
 8005eaa:	f7ff fe5f 	bl	8005b6c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8005eae:	2100      	movs	r1, #0
 8005eb0:	20d3      	movs	r0, #211	; 0xd3
 8005eb2:	f7ff fe5b 	bl	8005b6c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	2000      	movs	r0, #0
 8005eba:	f7ff fe57 	bl	8005b6c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	2040      	movs	r0, #64	; 0x40
 8005ec2:	f7ff fe53 	bl	8005b6c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	208d      	movs	r0, #141	; 0x8d
 8005eca:	f7ff fe4f 	bl	8005b6c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8005ece:	2100      	movs	r1, #0
 8005ed0:	2014      	movs	r0, #20
 8005ed2:	f7ff fe4b 	bl	8005b6c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	2020      	movs	r0, #32
 8005eda:	f7ff fe47 	bl	8005b6c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8005ede:	2100      	movs	r1, #0
 8005ee0:	2002      	movs	r0, #2
 8005ee2:	f7ff fe43 	bl	8005b6c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	20a1      	movs	r0, #161	; 0xa1
 8005eea:	f7ff fe3f 	bl	8005b6c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8005eee:	2100      	movs	r1, #0
 8005ef0:	20c0      	movs	r0, #192	; 0xc0
 8005ef2:	f7ff fe3b 	bl	8005b6c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	20da      	movs	r0, #218	; 0xda
 8005efa:	f7ff fe37 	bl	8005b6c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8005efe:	2100      	movs	r1, #0
 8005f00:	2012      	movs	r0, #18
 8005f02:	f7ff fe33 	bl	8005b6c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8005f06:	2100      	movs	r1, #0
 8005f08:	2081      	movs	r0, #129	; 0x81
 8005f0a:	f7ff fe2f 	bl	8005b6c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8005f0e:	2100      	movs	r1, #0
 8005f10:	20ef      	movs	r0, #239	; 0xef
 8005f12:	f7ff fe2b 	bl	8005b6c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8005f16:	2100      	movs	r1, #0
 8005f18:	20d9      	movs	r0, #217	; 0xd9
 8005f1a:	f7ff fe27 	bl	8005b6c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8005f1e:	2100      	movs	r1, #0
 8005f20:	20f1      	movs	r0, #241	; 0xf1
 8005f22:	f7ff fe23 	bl	8005b6c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8005f26:	2100      	movs	r1, #0
 8005f28:	20db      	movs	r0, #219	; 0xdb
 8005f2a:	f7ff fe1f 	bl	8005b6c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8005f2e:	2100      	movs	r1, #0
 8005f30:	2030      	movs	r0, #48	; 0x30
 8005f32:	f7ff fe1b 	bl	8005b6c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8005f36:	2100      	movs	r1, #0
 8005f38:	20a4      	movs	r0, #164	; 0xa4
 8005f3a:	f7ff fe17 	bl	8005b6c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8005f3e:	2100      	movs	r1, #0
 8005f40:	20a6      	movs	r0, #166	; 0xa6
 8005f42:	f7ff fe13 	bl	8005b6c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8005f46:	2100      	movs	r1, #0
 8005f48:	20af      	movs	r0, #175	; 0xaf
 8005f4a:	f7ff fe0f 	bl	8005b6c <OLED_WR_Byte>
	OLED_Clear(); 
 8005f4e:	f7ff fe57 	bl	8005c00 <OLED_Clear>
 8005f52:	bf00      	nop
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	40021000 	.word	0x40021000

08005f60 <__errno>:
 8005f60:	4b01      	ldr	r3, [pc, #4]	; (8005f68 <__errno+0x8>)
 8005f62:	6818      	ldr	r0, [r3, #0]
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	20000010 	.word	0x20000010

08005f6c <__libc_init_array>:
 8005f6c:	b570      	push	{r4, r5, r6, lr}
 8005f6e:	4d0d      	ldr	r5, [pc, #52]	; (8005fa4 <__libc_init_array+0x38>)
 8005f70:	4c0d      	ldr	r4, [pc, #52]	; (8005fa8 <__libc_init_array+0x3c>)
 8005f72:	1b64      	subs	r4, r4, r5
 8005f74:	10a4      	asrs	r4, r4, #2
 8005f76:	2600      	movs	r6, #0
 8005f78:	42a6      	cmp	r6, r4
 8005f7a:	d109      	bne.n	8005f90 <__libc_init_array+0x24>
 8005f7c:	4d0b      	ldr	r5, [pc, #44]	; (8005fac <__libc_init_array+0x40>)
 8005f7e:	4c0c      	ldr	r4, [pc, #48]	; (8005fb0 <__libc_init_array+0x44>)
 8005f80:	f000 fc4e 	bl	8006820 <_init>
 8005f84:	1b64      	subs	r4, r4, r5
 8005f86:	10a4      	asrs	r4, r4, #2
 8005f88:	2600      	movs	r6, #0
 8005f8a:	42a6      	cmp	r6, r4
 8005f8c:	d105      	bne.n	8005f9a <__libc_init_array+0x2e>
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}
 8005f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f94:	4798      	blx	r3
 8005f96:	3601      	adds	r6, #1
 8005f98:	e7ee      	b.n	8005f78 <__libc_init_array+0xc>
 8005f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f9e:	4798      	blx	r3
 8005fa0:	3601      	adds	r6, #1
 8005fa2:	e7f2      	b.n	8005f8a <__libc_init_array+0x1e>
 8005fa4:	08007420 	.word	0x08007420
 8005fa8:	08007420 	.word	0x08007420
 8005fac:	08007420 	.word	0x08007420
 8005fb0:	08007424 	.word	0x08007424

08005fb4 <memcpy>:
 8005fb4:	440a      	add	r2, r1
 8005fb6:	4291      	cmp	r1, r2
 8005fb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fbc:	d100      	bne.n	8005fc0 <memcpy+0xc>
 8005fbe:	4770      	bx	lr
 8005fc0:	b510      	push	{r4, lr}
 8005fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fca:	4291      	cmp	r1, r2
 8005fcc:	d1f9      	bne.n	8005fc2 <memcpy+0xe>
 8005fce:	bd10      	pop	{r4, pc}

08005fd0 <memset>:
 8005fd0:	4402      	add	r2, r0
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d100      	bne.n	8005fda <memset+0xa>
 8005fd8:	4770      	bx	lr
 8005fda:	f803 1b01 	strb.w	r1, [r3], #1
 8005fde:	e7f9      	b.n	8005fd4 <memset+0x4>

08005fe0 <siprintf>:
 8005fe0:	b40e      	push	{r1, r2, r3}
 8005fe2:	b500      	push	{lr}
 8005fe4:	b09c      	sub	sp, #112	; 0x70
 8005fe6:	ab1d      	add	r3, sp, #116	; 0x74
 8005fe8:	9002      	str	r0, [sp, #8]
 8005fea:	9006      	str	r0, [sp, #24]
 8005fec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ff0:	4809      	ldr	r0, [pc, #36]	; (8006018 <siprintf+0x38>)
 8005ff2:	9107      	str	r1, [sp, #28]
 8005ff4:	9104      	str	r1, [sp, #16]
 8005ff6:	4909      	ldr	r1, [pc, #36]	; (800601c <siprintf+0x3c>)
 8005ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ffc:	9105      	str	r1, [sp, #20]
 8005ffe:	6800      	ldr	r0, [r0, #0]
 8006000:	9301      	str	r3, [sp, #4]
 8006002:	a902      	add	r1, sp, #8
 8006004:	f000 f868 	bl	80060d8 <_svfiprintf_r>
 8006008:	9b02      	ldr	r3, [sp, #8]
 800600a:	2200      	movs	r2, #0
 800600c:	701a      	strb	r2, [r3, #0]
 800600e:	b01c      	add	sp, #112	; 0x70
 8006010:	f85d eb04 	ldr.w	lr, [sp], #4
 8006014:	b003      	add	sp, #12
 8006016:	4770      	bx	lr
 8006018:	20000010 	.word	0x20000010
 800601c:	ffff0208 	.word	0xffff0208

08006020 <__ssputs_r>:
 8006020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006024:	688e      	ldr	r6, [r1, #8]
 8006026:	429e      	cmp	r6, r3
 8006028:	4682      	mov	sl, r0
 800602a:	460c      	mov	r4, r1
 800602c:	4690      	mov	r8, r2
 800602e:	461f      	mov	r7, r3
 8006030:	d838      	bhi.n	80060a4 <__ssputs_r+0x84>
 8006032:	898a      	ldrh	r2, [r1, #12]
 8006034:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006038:	d032      	beq.n	80060a0 <__ssputs_r+0x80>
 800603a:	6825      	ldr	r5, [r4, #0]
 800603c:	6909      	ldr	r1, [r1, #16]
 800603e:	eba5 0901 	sub.w	r9, r5, r1
 8006042:	6965      	ldr	r5, [r4, #20]
 8006044:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006048:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800604c:	3301      	adds	r3, #1
 800604e:	444b      	add	r3, r9
 8006050:	106d      	asrs	r5, r5, #1
 8006052:	429d      	cmp	r5, r3
 8006054:	bf38      	it	cc
 8006056:	461d      	movcc	r5, r3
 8006058:	0553      	lsls	r3, r2, #21
 800605a:	d531      	bpl.n	80060c0 <__ssputs_r+0xa0>
 800605c:	4629      	mov	r1, r5
 800605e:	f000 fb39 	bl	80066d4 <_malloc_r>
 8006062:	4606      	mov	r6, r0
 8006064:	b950      	cbnz	r0, 800607c <__ssputs_r+0x5c>
 8006066:	230c      	movs	r3, #12
 8006068:	f8ca 3000 	str.w	r3, [sl]
 800606c:	89a3      	ldrh	r3, [r4, #12]
 800606e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006072:	81a3      	strh	r3, [r4, #12]
 8006074:	f04f 30ff 	mov.w	r0, #4294967295
 8006078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800607c:	6921      	ldr	r1, [r4, #16]
 800607e:	464a      	mov	r2, r9
 8006080:	f7ff ff98 	bl	8005fb4 <memcpy>
 8006084:	89a3      	ldrh	r3, [r4, #12]
 8006086:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800608a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800608e:	81a3      	strh	r3, [r4, #12]
 8006090:	6126      	str	r6, [r4, #16]
 8006092:	6165      	str	r5, [r4, #20]
 8006094:	444e      	add	r6, r9
 8006096:	eba5 0509 	sub.w	r5, r5, r9
 800609a:	6026      	str	r6, [r4, #0]
 800609c:	60a5      	str	r5, [r4, #8]
 800609e:	463e      	mov	r6, r7
 80060a0:	42be      	cmp	r6, r7
 80060a2:	d900      	bls.n	80060a6 <__ssputs_r+0x86>
 80060a4:	463e      	mov	r6, r7
 80060a6:	4632      	mov	r2, r6
 80060a8:	6820      	ldr	r0, [r4, #0]
 80060aa:	4641      	mov	r1, r8
 80060ac:	f000 faa8 	bl	8006600 <memmove>
 80060b0:	68a3      	ldr	r3, [r4, #8]
 80060b2:	6822      	ldr	r2, [r4, #0]
 80060b4:	1b9b      	subs	r3, r3, r6
 80060b6:	4432      	add	r2, r6
 80060b8:	60a3      	str	r3, [r4, #8]
 80060ba:	6022      	str	r2, [r4, #0]
 80060bc:	2000      	movs	r0, #0
 80060be:	e7db      	b.n	8006078 <__ssputs_r+0x58>
 80060c0:	462a      	mov	r2, r5
 80060c2:	f000 fb61 	bl	8006788 <_realloc_r>
 80060c6:	4606      	mov	r6, r0
 80060c8:	2800      	cmp	r0, #0
 80060ca:	d1e1      	bne.n	8006090 <__ssputs_r+0x70>
 80060cc:	6921      	ldr	r1, [r4, #16]
 80060ce:	4650      	mov	r0, sl
 80060d0:	f000 fab0 	bl	8006634 <_free_r>
 80060d4:	e7c7      	b.n	8006066 <__ssputs_r+0x46>
	...

080060d8 <_svfiprintf_r>:
 80060d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060dc:	4698      	mov	r8, r3
 80060de:	898b      	ldrh	r3, [r1, #12]
 80060e0:	061b      	lsls	r3, r3, #24
 80060e2:	b09d      	sub	sp, #116	; 0x74
 80060e4:	4607      	mov	r7, r0
 80060e6:	460d      	mov	r5, r1
 80060e8:	4614      	mov	r4, r2
 80060ea:	d50e      	bpl.n	800610a <_svfiprintf_r+0x32>
 80060ec:	690b      	ldr	r3, [r1, #16]
 80060ee:	b963      	cbnz	r3, 800610a <_svfiprintf_r+0x32>
 80060f0:	2140      	movs	r1, #64	; 0x40
 80060f2:	f000 faef 	bl	80066d4 <_malloc_r>
 80060f6:	6028      	str	r0, [r5, #0]
 80060f8:	6128      	str	r0, [r5, #16]
 80060fa:	b920      	cbnz	r0, 8006106 <_svfiprintf_r+0x2e>
 80060fc:	230c      	movs	r3, #12
 80060fe:	603b      	str	r3, [r7, #0]
 8006100:	f04f 30ff 	mov.w	r0, #4294967295
 8006104:	e0d1      	b.n	80062aa <_svfiprintf_r+0x1d2>
 8006106:	2340      	movs	r3, #64	; 0x40
 8006108:	616b      	str	r3, [r5, #20]
 800610a:	2300      	movs	r3, #0
 800610c:	9309      	str	r3, [sp, #36]	; 0x24
 800610e:	2320      	movs	r3, #32
 8006110:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006114:	f8cd 800c 	str.w	r8, [sp, #12]
 8006118:	2330      	movs	r3, #48	; 0x30
 800611a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80062c4 <_svfiprintf_r+0x1ec>
 800611e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006122:	f04f 0901 	mov.w	r9, #1
 8006126:	4623      	mov	r3, r4
 8006128:	469a      	mov	sl, r3
 800612a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800612e:	b10a      	cbz	r2, 8006134 <_svfiprintf_r+0x5c>
 8006130:	2a25      	cmp	r2, #37	; 0x25
 8006132:	d1f9      	bne.n	8006128 <_svfiprintf_r+0x50>
 8006134:	ebba 0b04 	subs.w	fp, sl, r4
 8006138:	d00b      	beq.n	8006152 <_svfiprintf_r+0x7a>
 800613a:	465b      	mov	r3, fp
 800613c:	4622      	mov	r2, r4
 800613e:	4629      	mov	r1, r5
 8006140:	4638      	mov	r0, r7
 8006142:	f7ff ff6d 	bl	8006020 <__ssputs_r>
 8006146:	3001      	adds	r0, #1
 8006148:	f000 80aa 	beq.w	80062a0 <_svfiprintf_r+0x1c8>
 800614c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800614e:	445a      	add	r2, fp
 8006150:	9209      	str	r2, [sp, #36]	; 0x24
 8006152:	f89a 3000 	ldrb.w	r3, [sl]
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 80a2 	beq.w	80062a0 <_svfiprintf_r+0x1c8>
 800615c:	2300      	movs	r3, #0
 800615e:	f04f 32ff 	mov.w	r2, #4294967295
 8006162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006166:	f10a 0a01 	add.w	sl, sl, #1
 800616a:	9304      	str	r3, [sp, #16]
 800616c:	9307      	str	r3, [sp, #28]
 800616e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006172:	931a      	str	r3, [sp, #104]	; 0x68
 8006174:	4654      	mov	r4, sl
 8006176:	2205      	movs	r2, #5
 8006178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800617c:	4851      	ldr	r0, [pc, #324]	; (80062c4 <_svfiprintf_r+0x1ec>)
 800617e:	f7fa f827 	bl	80001d0 <memchr>
 8006182:	9a04      	ldr	r2, [sp, #16]
 8006184:	b9d8      	cbnz	r0, 80061be <_svfiprintf_r+0xe6>
 8006186:	06d0      	lsls	r0, r2, #27
 8006188:	bf44      	itt	mi
 800618a:	2320      	movmi	r3, #32
 800618c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006190:	0711      	lsls	r1, r2, #28
 8006192:	bf44      	itt	mi
 8006194:	232b      	movmi	r3, #43	; 0x2b
 8006196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800619a:	f89a 3000 	ldrb.w	r3, [sl]
 800619e:	2b2a      	cmp	r3, #42	; 0x2a
 80061a0:	d015      	beq.n	80061ce <_svfiprintf_r+0xf6>
 80061a2:	9a07      	ldr	r2, [sp, #28]
 80061a4:	4654      	mov	r4, sl
 80061a6:	2000      	movs	r0, #0
 80061a8:	f04f 0c0a 	mov.w	ip, #10
 80061ac:	4621      	mov	r1, r4
 80061ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061b2:	3b30      	subs	r3, #48	; 0x30
 80061b4:	2b09      	cmp	r3, #9
 80061b6:	d94e      	bls.n	8006256 <_svfiprintf_r+0x17e>
 80061b8:	b1b0      	cbz	r0, 80061e8 <_svfiprintf_r+0x110>
 80061ba:	9207      	str	r2, [sp, #28]
 80061bc:	e014      	b.n	80061e8 <_svfiprintf_r+0x110>
 80061be:	eba0 0308 	sub.w	r3, r0, r8
 80061c2:	fa09 f303 	lsl.w	r3, r9, r3
 80061c6:	4313      	orrs	r3, r2
 80061c8:	9304      	str	r3, [sp, #16]
 80061ca:	46a2      	mov	sl, r4
 80061cc:	e7d2      	b.n	8006174 <_svfiprintf_r+0x9c>
 80061ce:	9b03      	ldr	r3, [sp, #12]
 80061d0:	1d19      	adds	r1, r3, #4
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	9103      	str	r1, [sp, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	bfbb      	ittet	lt
 80061da:	425b      	neglt	r3, r3
 80061dc:	f042 0202 	orrlt.w	r2, r2, #2
 80061e0:	9307      	strge	r3, [sp, #28]
 80061e2:	9307      	strlt	r3, [sp, #28]
 80061e4:	bfb8      	it	lt
 80061e6:	9204      	strlt	r2, [sp, #16]
 80061e8:	7823      	ldrb	r3, [r4, #0]
 80061ea:	2b2e      	cmp	r3, #46	; 0x2e
 80061ec:	d10c      	bne.n	8006208 <_svfiprintf_r+0x130>
 80061ee:	7863      	ldrb	r3, [r4, #1]
 80061f0:	2b2a      	cmp	r3, #42	; 0x2a
 80061f2:	d135      	bne.n	8006260 <_svfiprintf_r+0x188>
 80061f4:	9b03      	ldr	r3, [sp, #12]
 80061f6:	1d1a      	adds	r2, r3, #4
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	9203      	str	r2, [sp, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	bfb8      	it	lt
 8006200:	f04f 33ff 	movlt.w	r3, #4294967295
 8006204:	3402      	adds	r4, #2
 8006206:	9305      	str	r3, [sp, #20]
 8006208:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80062d4 <_svfiprintf_r+0x1fc>
 800620c:	7821      	ldrb	r1, [r4, #0]
 800620e:	2203      	movs	r2, #3
 8006210:	4650      	mov	r0, sl
 8006212:	f7f9 ffdd 	bl	80001d0 <memchr>
 8006216:	b140      	cbz	r0, 800622a <_svfiprintf_r+0x152>
 8006218:	2340      	movs	r3, #64	; 0x40
 800621a:	eba0 000a 	sub.w	r0, r0, sl
 800621e:	fa03 f000 	lsl.w	r0, r3, r0
 8006222:	9b04      	ldr	r3, [sp, #16]
 8006224:	4303      	orrs	r3, r0
 8006226:	3401      	adds	r4, #1
 8006228:	9304      	str	r3, [sp, #16]
 800622a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800622e:	4826      	ldr	r0, [pc, #152]	; (80062c8 <_svfiprintf_r+0x1f0>)
 8006230:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006234:	2206      	movs	r2, #6
 8006236:	f7f9 ffcb 	bl	80001d0 <memchr>
 800623a:	2800      	cmp	r0, #0
 800623c:	d038      	beq.n	80062b0 <_svfiprintf_r+0x1d8>
 800623e:	4b23      	ldr	r3, [pc, #140]	; (80062cc <_svfiprintf_r+0x1f4>)
 8006240:	bb1b      	cbnz	r3, 800628a <_svfiprintf_r+0x1b2>
 8006242:	9b03      	ldr	r3, [sp, #12]
 8006244:	3307      	adds	r3, #7
 8006246:	f023 0307 	bic.w	r3, r3, #7
 800624a:	3308      	adds	r3, #8
 800624c:	9303      	str	r3, [sp, #12]
 800624e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006250:	4433      	add	r3, r6
 8006252:	9309      	str	r3, [sp, #36]	; 0x24
 8006254:	e767      	b.n	8006126 <_svfiprintf_r+0x4e>
 8006256:	fb0c 3202 	mla	r2, ip, r2, r3
 800625a:	460c      	mov	r4, r1
 800625c:	2001      	movs	r0, #1
 800625e:	e7a5      	b.n	80061ac <_svfiprintf_r+0xd4>
 8006260:	2300      	movs	r3, #0
 8006262:	3401      	adds	r4, #1
 8006264:	9305      	str	r3, [sp, #20]
 8006266:	4619      	mov	r1, r3
 8006268:	f04f 0c0a 	mov.w	ip, #10
 800626c:	4620      	mov	r0, r4
 800626e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006272:	3a30      	subs	r2, #48	; 0x30
 8006274:	2a09      	cmp	r2, #9
 8006276:	d903      	bls.n	8006280 <_svfiprintf_r+0x1a8>
 8006278:	2b00      	cmp	r3, #0
 800627a:	d0c5      	beq.n	8006208 <_svfiprintf_r+0x130>
 800627c:	9105      	str	r1, [sp, #20]
 800627e:	e7c3      	b.n	8006208 <_svfiprintf_r+0x130>
 8006280:	fb0c 2101 	mla	r1, ip, r1, r2
 8006284:	4604      	mov	r4, r0
 8006286:	2301      	movs	r3, #1
 8006288:	e7f0      	b.n	800626c <_svfiprintf_r+0x194>
 800628a:	ab03      	add	r3, sp, #12
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	462a      	mov	r2, r5
 8006290:	4b0f      	ldr	r3, [pc, #60]	; (80062d0 <_svfiprintf_r+0x1f8>)
 8006292:	a904      	add	r1, sp, #16
 8006294:	4638      	mov	r0, r7
 8006296:	f3af 8000 	nop.w
 800629a:	1c42      	adds	r2, r0, #1
 800629c:	4606      	mov	r6, r0
 800629e:	d1d6      	bne.n	800624e <_svfiprintf_r+0x176>
 80062a0:	89ab      	ldrh	r3, [r5, #12]
 80062a2:	065b      	lsls	r3, r3, #25
 80062a4:	f53f af2c 	bmi.w	8006100 <_svfiprintf_r+0x28>
 80062a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062aa:	b01d      	add	sp, #116	; 0x74
 80062ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b0:	ab03      	add	r3, sp, #12
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	462a      	mov	r2, r5
 80062b6:	4b06      	ldr	r3, [pc, #24]	; (80062d0 <_svfiprintf_r+0x1f8>)
 80062b8:	a904      	add	r1, sp, #16
 80062ba:	4638      	mov	r0, r7
 80062bc:	f000 f87a 	bl	80063b4 <_printf_i>
 80062c0:	e7eb      	b.n	800629a <_svfiprintf_r+0x1c2>
 80062c2:	bf00      	nop
 80062c4:	080073e4 	.word	0x080073e4
 80062c8:	080073ee 	.word	0x080073ee
 80062cc:	00000000 	.word	0x00000000
 80062d0:	08006021 	.word	0x08006021
 80062d4:	080073ea 	.word	0x080073ea

080062d8 <_printf_common>:
 80062d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062dc:	4616      	mov	r6, r2
 80062de:	4699      	mov	r9, r3
 80062e0:	688a      	ldr	r2, [r1, #8]
 80062e2:	690b      	ldr	r3, [r1, #16]
 80062e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062e8:	4293      	cmp	r3, r2
 80062ea:	bfb8      	it	lt
 80062ec:	4613      	movlt	r3, r2
 80062ee:	6033      	str	r3, [r6, #0]
 80062f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062f4:	4607      	mov	r7, r0
 80062f6:	460c      	mov	r4, r1
 80062f8:	b10a      	cbz	r2, 80062fe <_printf_common+0x26>
 80062fa:	3301      	adds	r3, #1
 80062fc:	6033      	str	r3, [r6, #0]
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	0699      	lsls	r1, r3, #26
 8006302:	bf42      	ittt	mi
 8006304:	6833      	ldrmi	r3, [r6, #0]
 8006306:	3302      	addmi	r3, #2
 8006308:	6033      	strmi	r3, [r6, #0]
 800630a:	6825      	ldr	r5, [r4, #0]
 800630c:	f015 0506 	ands.w	r5, r5, #6
 8006310:	d106      	bne.n	8006320 <_printf_common+0x48>
 8006312:	f104 0a19 	add.w	sl, r4, #25
 8006316:	68e3      	ldr	r3, [r4, #12]
 8006318:	6832      	ldr	r2, [r6, #0]
 800631a:	1a9b      	subs	r3, r3, r2
 800631c:	42ab      	cmp	r3, r5
 800631e:	dc26      	bgt.n	800636e <_printf_common+0x96>
 8006320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006324:	1e13      	subs	r3, r2, #0
 8006326:	6822      	ldr	r2, [r4, #0]
 8006328:	bf18      	it	ne
 800632a:	2301      	movne	r3, #1
 800632c:	0692      	lsls	r2, r2, #26
 800632e:	d42b      	bmi.n	8006388 <_printf_common+0xb0>
 8006330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006334:	4649      	mov	r1, r9
 8006336:	4638      	mov	r0, r7
 8006338:	47c0      	blx	r8
 800633a:	3001      	adds	r0, #1
 800633c:	d01e      	beq.n	800637c <_printf_common+0xa4>
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	68e5      	ldr	r5, [r4, #12]
 8006342:	6832      	ldr	r2, [r6, #0]
 8006344:	f003 0306 	and.w	r3, r3, #6
 8006348:	2b04      	cmp	r3, #4
 800634a:	bf08      	it	eq
 800634c:	1aad      	subeq	r5, r5, r2
 800634e:	68a3      	ldr	r3, [r4, #8]
 8006350:	6922      	ldr	r2, [r4, #16]
 8006352:	bf0c      	ite	eq
 8006354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006358:	2500      	movne	r5, #0
 800635a:	4293      	cmp	r3, r2
 800635c:	bfc4      	itt	gt
 800635e:	1a9b      	subgt	r3, r3, r2
 8006360:	18ed      	addgt	r5, r5, r3
 8006362:	2600      	movs	r6, #0
 8006364:	341a      	adds	r4, #26
 8006366:	42b5      	cmp	r5, r6
 8006368:	d11a      	bne.n	80063a0 <_printf_common+0xc8>
 800636a:	2000      	movs	r0, #0
 800636c:	e008      	b.n	8006380 <_printf_common+0xa8>
 800636e:	2301      	movs	r3, #1
 8006370:	4652      	mov	r2, sl
 8006372:	4649      	mov	r1, r9
 8006374:	4638      	mov	r0, r7
 8006376:	47c0      	blx	r8
 8006378:	3001      	adds	r0, #1
 800637a:	d103      	bne.n	8006384 <_printf_common+0xac>
 800637c:	f04f 30ff 	mov.w	r0, #4294967295
 8006380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006384:	3501      	adds	r5, #1
 8006386:	e7c6      	b.n	8006316 <_printf_common+0x3e>
 8006388:	18e1      	adds	r1, r4, r3
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	2030      	movs	r0, #48	; 0x30
 800638e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006392:	4422      	add	r2, r4
 8006394:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006398:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800639c:	3302      	adds	r3, #2
 800639e:	e7c7      	b.n	8006330 <_printf_common+0x58>
 80063a0:	2301      	movs	r3, #1
 80063a2:	4622      	mov	r2, r4
 80063a4:	4649      	mov	r1, r9
 80063a6:	4638      	mov	r0, r7
 80063a8:	47c0      	blx	r8
 80063aa:	3001      	adds	r0, #1
 80063ac:	d0e6      	beq.n	800637c <_printf_common+0xa4>
 80063ae:	3601      	adds	r6, #1
 80063b0:	e7d9      	b.n	8006366 <_printf_common+0x8e>
	...

080063b4 <_printf_i>:
 80063b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063b8:	460c      	mov	r4, r1
 80063ba:	4691      	mov	r9, r2
 80063bc:	7e27      	ldrb	r7, [r4, #24]
 80063be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80063c0:	2f78      	cmp	r7, #120	; 0x78
 80063c2:	4680      	mov	r8, r0
 80063c4:	469a      	mov	sl, r3
 80063c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063ca:	d807      	bhi.n	80063dc <_printf_i+0x28>
 80063cc:	2f62      	cmp	r7, #98	; 0x62
 80063ce:	d80a      	bhi.n	80063e6 <_printf_i+0x32>
 80063d0:	2f00      	cmp	r7, #0
 80063d2:	f000 80d8 	beq.w	8006586 <_printf_i+0x1d2>
 80063d6:	2f58      	cmp	r7, #88	; 0x58
 80063d8:	f000 80a3 	beq.w	8006522 <_printf_i+0x16e>
 80063dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80063e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063e4:	e03a      	b.n	800645c <_printf_i+0xa8>
 80063e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063ea:	2b15      	cmp	r3, #21
 80063ec:	d8f6      	bhi.n	80063dc <_printf_i+0x28>
 80063ee:	a001      	add	r0, pc, #4	; (adr r0, 80063f4 <_printf_i+0x40>)
 80063f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80063f4:	0800644d 	.word	0x0800644d
 80063f8:	08006461 	.word	0x08006461
 80063fc:	080063dd 	.word	0x080063dd
 8006400:	080063dd 	.word	0x080063dd
 8006404:	080063dd 	.word	0x080063dd
 8006408:	080063dd 	.word	0x080063dd
 800640c:	08006461 	.word	0x08006461
 8006410:	080063dd 	.word	0x080063dd
 8006414:	080063dd 	.word	0x080063dd
 8006418:	080063dd 	.word	0x080063dd
 800641c:	080063dd 	.word	0x080063dd
 8006420:	0800656d 	.word	0x0800656d
 8006424:	08006491 	.word	0x08006491
 8006428:	0800654f 	.word	0x0800654f
 800642c:	080063dd 	.word	0x080063dd
 8006430:	080063dd 	.word	0x080063dd
 8006434:	0800658f 	.word	0x0800658f
 8006438:	080063dd 	.word	0x080063dd
 800643c:	08006491 	.word	0x08006491
 8006440:	080063dd 	.word	0x080063dd
 8006444:	080063dd 	.word	0x080063dd
 8006448:	08006557 	.word	0x08006557
 800644c:	680b      	ldr	r3, [r1, #0]
 800644e:	1d1a      	adds	r2, r3, #4
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	600a      	str	r2, [r1, #0]
 8006454:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800645c:	2301      	movs	r3, #1
 800645e:	e0a3      	b.n	80065a8 <_printf_i+0x1f4>
 8006460:	6825      	ldr	r5, [r4, #0]
 8006462:	6808      	ldr	r0, [r1, #0]
 8006464:	062e      	lsls	r6, r5, #24
 8006466:	f100 0304 	add.w	r3, r0, #4
 800646a:	d50a      	bpl.n	8006482 <_printf_i+0xce>
 800646c:	6805      	ldr	r5, [r0, #0]
 800646e:	600b      	str	r3, [r1, #0]
 8006470:	2d00      	cmp	r5, #0
 8006472:	da03      	bge.n	800647c <_printf_i+0xc8>
 8006474:	232d      	movs	r3, #45	; 0x2d
 8006476:	426d      	negs	r5, r5
 8006478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800647c:	485e      	ldr	r0, [pc, #376]	; (80065f8 <_printf_i+0x244>)
 800647e:	230a      	movs	r3, #10
 8006480:	e019      	b.n	80064b6 <_printf_i+0x102>
 8006482:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006486:	6805      	ldr	r5, [r0, #0]
 8006488:	600b      	str	r3, [r1, #0]
 800648a:	bf18      	it	ne
 800648c:	b22d      	sxthne	r5, r5
 800648e:	e7ef      	b.n	8006470 <_printf_i+0xbc>
 8006490:	680b      	ldr	r3, [r1, #0]
 8006492:	6825      	ldr	r5, [r4, #0]
 8006494:	1d18      	adds	r0, r3, #4
 8006496:	6008      	str	r0, [r1, #0]
 8006498:	0628      	lsls	r0, r5, #24
 800649a:	d501      	bpl.n	80064a0 <_printf_i+0xec>
 800649c:	681d      	ldr	r5, [r3, #0]
 800649e:	e002      	b.n	80064a6 <_printf_i+0xf2>
 80064a0:	0669      	lsls	r1, r5, #25
 80064a2:	d5fb      	bpl.n	800649c <_printf_i+0xe8>
 80064a4:	881d      	ldrh	r5, [r3, #0]
 80064a6:	4854      	ldr	r0, [pc, #336]	; (80065f8 <_printf_i+0x244>)
 80064a8:	2f6f      	cmp	r7, #111	; 0x6f
 80064aa:	bf0c      	ite	eq
 80064ac:	2308      	moveq	r3, #8
 80064ae:	230a      	movne	r3, #10
 80064b0:	2100      	movs	r1, #0
 80064b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064b6:	6866      	ldr	r6, [r4, #4]
 80064b8:	60a6      	str	r6, [r4, #8]
 80064ba:	2e00      	cmp	r6, #0
 80064bc:	bfa2      	ittt	ge
 80064be:	6821      	ldrge	r1, [r4, #0]
 80064c0:	f021 0104 	bicge.w	r1, r1, #4
 80064c4:	6021      	strge	r1, [r4, #0]
 80064c6:	b90d      	cbnz	r5, 80064cc <_printf_i+0x118>
 80064c8:	2e00      	cmp	r6, #0
 80064ca:	d04d      	beq.n	8006568 <_printf_i+0x1b4>
 80064cc:	4616      	mov	r6, r2
 80064ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80064d2:	fb03 5711 	mls	r7, r3, r1, r5
 80064d6:	5dc7      	ldrb	r7, [r0, r7]
 80064d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064dc:	462f      	mov	r7, r5
 80064de:	42bb      	cmp	r3, r7
 80064e0:	460d      	mov	r5, r1
 80064e2:	d9f4      	bls.n	80064ce <_printf_i+0x11a>
 80064e4:	2b08      	cmp	r3, #8
 80064e6:	d10b      	bne.n	8006500 <_printf_i+0x14c>
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	07df      	lsls	r7, r3, #31
 80064ec:	d508      	bpl.n	8006500 <_printf_i+0x14c>
 80064ee:	6923      	ldr	r3, [r4, #16]
 80064f0:	6861      	ldr	r1, [r4, #4]
 80064f2:	4299      	cmp	r1, r3
 80064f4:	bfde      	ittt	le
 80064f6:	2330      	movle	r3, #48	; 0x30
 80064f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006500:	1b92      	subs	r2, r2, r6
 8006502:	6122      	str	r2, [r4, #16]
 8006504:	f8cd a000 	str.w	sl, [sp]
 8006508:	464b      	mov	r3, r9
 800650a:	aa03      	add	r2, sp, #12
 800650c:	4621      	mov	r1, r4
 800650e:	4640      	mov	r0, r8
 8006510:	f7ff fee2 	bl	80062d8 <_printf_common>
 8006514:	3001      	adds	r0, #1
 8006516:	d14c      	bne.n	80065b2 <_printf_i+0x1fe>
 8006518:	f04f 30ff 	mov.w	r0, #4294967295
 800651c:	b004      	add	sp, #16
 800651e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006522:	4835      	ldr	r0, [pc, #212]	; (80065f8 <_printf_i+0x244>)
 8006524:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	680e      	ldr	r6, [r1, #0]
 800652c:	061f      	lsls	r7, r3, #24
 800652e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006532:	600e      	str	r6, [r1, #0]
 8006534:	d514      	bpl.n	8006560 <_printf_i+0x1ac>
 8006536:	07d9      	lsls	r1, r3, #31
 8006538:	bf44      	itt	mi
 800653a:	f043 0320 	orrmi.w	r3, r3, #32
 800653e:	6023      	strmi	r3, [r4, #0]
 8006540:	b91d      	cbnz	r5, 800654a <_printf_i+0x196>
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	f023 0320 	bic.w	r3, r3, #32
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	2310      	movs	r3, #16
 800654c:	e7b0      	b.n	80064b0 <_printf_i+0xfc>
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	f043 0320 	orr.w	r3, r3, #32
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	2378      	movs	r3, #120	; 0x78
 8006558:	4828      	ldr	r0, [pc, #160]	; (80065fc <_printf_i+0x248>)
 800655a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800655e:	e7e3      	b.n	8006528 <_printf_i+0x174>
 8006560:	065e      	lsls	r6, r3, #25
 8006562:	bf48      	it	mi
 8006564:	b2ad      	uxthmi	r5, r5
 8006566:	e7e6      	b.n	8006536 <_printf_i+0x182>
 8006568:	4616      	mov	r6, r2
 800656a:	e7bb      	b.n	80064e4 <_printf_i+0x130>
 800656c:	680b      	ldr	r3, [r1, #0]
 800656e:	6826      	ldr	r6, [r4, #0]
 8006570:	6960      	ldr	r0, [r4, #20]
 8006572:	1d1d      	adds	r5, r3, #4
 8006574:	600d      	str	r5, [r1, #0]
 8006576:	0635      	lsls	r5, r6, #24
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	d501      	bpl.n	8006580 <_printf_i+0x1cc>
 800657c:	6018      	str	r0, [r3, #0]
 800657e:	e002      	b.n	8006586 <_printf_i+0x1d2>
 8006580:	0671      	lsls	r1, r6, #25
 8006582:	d5fb      	bpl.n	800657c <_printf_i+0x1c8>
 8006584:	8018      	strh	r0, [r3, #0]
 8006586:	2300      	movs	r3, #0
 8006588:	6123      	str	r3, [r4, #16]
 800658a:	4616      	mov	r6, r2
 800658c:	e7ba      	b.n	8006504 <_printf_i+0x150>
 800658e:	680b      	ldr	r3, [r1, #0]
 8006590:	1d1a      	adds	r2, r3, #4
 8006592:	600a      	str	r2, [r1, #0]
 8006594:	681e      	ldr	r6, [r3, #0]
 8006596:	6862      	ldr	r2, [r4, #4]
 8006598:	2100      	movs	r1, #0
 800659a:	4630      	mov	r0, r6
 800659c:	f7f9 fe18 	bl	80001d0 <memchr>
 80065a0:	b108      	cbz	r0, 80065a6 <_printf_i+0x1f2>
 80065a2:	1b80      	subs	r0, r0, r6
 80065a4:	6060      	str	r0, [r4, #4]
 80065a6:	6863      	ldr	r3, [r4, #4]
 80065a8:	6123      	str	r3, [r4, #16]
 80065aa:	2300      	movs	r3, #0
 80065ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065b0:	e7a8      	b.n	8006504 <_printf_i+0x150>
 80065b2:	6923      	ldr	r3, [r4, #16]
 80065b4:	4632      	mov	r2, r6
 80065b6:	4649      	mov	r1, r9
 80065b8:	4640      	mov	r0, r8
 80065ba:	47d0      	blx	sl
 80065bc:	3001      	adds	r0, #1
 80065be:	d0ab      	beq.n	8006518 <_printf_i+0x164>
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	079b      	lsls	r3, r3, #30
 80065c4:	d413      	bmi.n	80065ee <_printf_i+0x23a>
 80065c6:	68e0      	ldr	r0, [r4, #12]
 80065c8:	9b03      	ldr	r3, [sp, #12]
 80065ca:	4298      	cmp	r0, r3
 80065cc:	bfb8      	it	lt
 80065ce:	4618      	movlt	r0, r3
 80065d0:	e7a4      	b.n	800651c <_printf_i+0x168>
 80065d2:	2301      	movs	r3, #1
 80065d4:	4632      	mov	r2, r6
 80065d6:	4649      	mov	r1, r9
 80065d8:	4640      	mov	r0, r8
 80065da:	47d0      	blx	sl
 80065dc:	3001      	adds	r0, #1
 80065de:	d09b      	beq.n	8006518 <_printf_i+0x164>
 80065e0:	3501      	adds	r5, #1
 80065e2:	68e3      	ldr	r3, [r4, #12]
 80065e4:	9903      	ldr	r1, [sp, #12]
 80065e6:	1a5b      	subs	r3, r3, r1
 80065e8:	42ab      	cmp	r3, r5
 80065ea:	dcf2      	bgt.n	80065d2 <_printf_i+0x21e>
 80065ec:	e7eb      	b.n	80065c6 <_printf_i+0x212>
 80065ee:	2500      	movs	r5, #0
 80065f0:	f104 0619 	add.w	r6, r4, #25
 80065f4:	e7f5      	b.n	80065e2 <_printf_i+0x22e>
 80065f6:	bf00      	nop
 80065f8:	080073f5 	.word	0x080073f5
 80065fc:	08007406 	.word	0x08007406

08006600 <memmove>:
 8006600:	4288      	cmp	r0, r1
 8006602:	b510      	push	{r4, lr}
 8006604:	eb01 0402 	add.w	r4, r1, r2
 8006608:	d902      	bls.n	8006610 <memmove+0x10>
 800660a:	4284      	cmp	r4, r0
 800660c:	4623      	mov	r3, r4
 800660e:	d807      	bhi.n	8006620 <memmove+0x20>
 8006610:	1e43      	subs	r3, r0, #1
 8006612:	42a1      	cmp	r1, r4
 8006614:	d008      	beq.n	8006628 <memmove+0x28>
 8006616:	f811 2b01 	ldrb.w	r2, [r1], #1
 800661a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800661e:	e7f8      	b.n	8006612 <memmove+0x12>
 8006620:	4402      	add	r2, r0
 8006622:	4601      	mov	r1, r0
 8006624:	428a      	cmp	r2, r1
 8006626:	d100      	bne.n	800662a <memmove+0x2a>
 8006628:	bd10      	pop	{r4, pc}
 800662a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800662e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006632:	e7f7      	b.n	8006624 <memmove+0x24>

08006634 <_free_r>:
 8006634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006636:	2900      	cmp	r1, #0
 8006638:	d048      	beq.n	80066cc <_free_r+0x98>
 800663a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800663e:	9001      	str	r0, [sp, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	f1a1 0404 	sub.w	r4, r1, #4
 8006646:	bfb8      	it	lt
 8006648:	18e4      	addlt	r4, r4, r3
 800664a:	f000 f8d3 	bl	80067f4 <__malloc_lock>
 800664e:	4a20      	ldr	r2, [pc, #128]	; (80066d0 <_free_r+0x9c>)
 8006650:	9801      	ldr	r0, [sp, #4]
 8006652:	6813      	ldr	r3, [r2, #0]
 8006654:	4615      	mov	r5, r2
 8006656:	b933      	cbnz	r3, 8006666 <_free_r+0x32>
 8006658:	6063      	str	r3, [r4, #4]
 800665a:	6014      	str	r4, [r2, #0]
 800665c:	b003      	add	sp, #12
 800665e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006662:	f000 b8cd 	b.w	8006800 <__malloc_unlock>
 8006666:	42a3      	cmp	r3, r4
 8006668:	d90b      	bls.n	8006682 <_free_r+0x4e>
 800666a:	6821      	ldr	r1, [r4, #0]
 800666c:	1862      	adds	r2, r4, r1
 800666e:	4293      	cmp	r3, r2
 8006670:	bf04      	itt	eq
 8006672:	681a      	ldreq	r2, [r3, #0]
 8006674:	685b      	ldreq	r3, [r3, #4]
 8006676:	6063      	str	r3, [r4, #4]
 8006678:	bf04      	itt	eq
 800667a:	1852      	addeq	r2, r2, r1
 800667c:	6022      	streq	r2, [r4, #0]
 800667e:	602c      	str	r4, [r5, #0]
 8006680:	e7ec      	b.n	800665c <_free_r+0x28>
 8006682:	461a      	mov	r2, r3
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	b10b      	cbz	r3, 800668c <_free_r+0x58>
 8006688:	42a3      	cmp	r3, r4
 800668a:	d9fa      	bls.n	8006682 <_free_r+0x4e>
 800668c:	6811      	ldr	r1, [r2, #0]
 800668e:	1855      	adds	r5, r2, r1
 8006690:	42a5      	cmp	r5, r4
 8006692:	d10b      	bne.n	80066ac <_free_r+0x78>
 8006694:	6824      	ldr	r4, [r4, #0]
 8006696:	4421      	add	r1, r4
 8006698:	1854      	adds	r4, r2, r1
 800669a:	42a3      	cmp	r3, r4
 800669c:	6011      	str	r1, [r2, #0]
 800669e:	d1dd      	bne.n	800665c <_free_r+0x28>
 80066a0:	681c      	ldr	r4, [r3, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	6053      	str	r3, [r2, #4]
 80066a6:	4421      	add	r1, r4
 80066a8:	6011      	str	r1, [r2, #0]
 80066aa:	e7d7      	b.n	800665c <_free_r+0x28>
 80066ac:	d902      	bls.n	80066b4 <_free_r+0x80>
 80066ae:	230c      	movs	r3, #12
 80066b0:	6003      	str	r3, [r0, #0]
 80066b2:	e7d3      	b.n	800665c <_free_r+0x28>
 80066b4:	6825      	ldr	r5, [r4, #0]
 80066b6:	1961      	adds	r1, r4, r5
 80066b8:	428b      	cmp	r3, r1
 80066ba:	bf04      	itt	eq
 80066bc:	6819      	ldreq	r1, [r3, #0]
 80066be:	685b      	ldreq	r3, [r3, #4]
 80066c0:	6063      	str	r3, [r4, #4]
 80066c2:	bf04      	itt	eq
 80066c4:	1949      	addeq	r1, r1, r5
 80066c6:	6021      	streq	r1, [r4, #0]
 80066c8:	6054      	str	r4, [r2, #4]
 80066ca:	e7c7      	b.n	800665c <_free_r+0x28>
 80066cc:	b003      	add	sp, #12
 80066ce:	bd30      	pop	{r4, r5, pc}
 80066d0:	200049a4 	.word	0x200049a4

080066d4 <_malloc_r>:
 80066d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d6:	1ccd      	adds	r5, r1, #3
 80066d8:	f025 0503 	bic.w	r5, r5, #3
 80066dc:	3508      	adds	r5, #8
 80066de:	2d0c      	cmp	r5, #12
 80066e0:	bf38      	it	cc
 80066e2:	250c      	movcc	r5, #12
 80066e4:	2d00      	cmp	r5, #0
 80066e6:	4606      	mov	r6, r0
 80066e8:	db01      	blt.n	80066ee <_malloc_r+0x1a>
 80066ea:	42a9      	cmp	r1, r5
 80066ec:	d903      	bls.n	80066f6 <_malloc_r+0x22>
 80066ee:	230c      	movs	r3, #12
 80066f0:	6033      	str	r3, [r6, #0]
 80066f2:	2000      	movs	r0, #0
 80066f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066f6:	f000 f87d 	bl	80067f4 <__malloc_lock>
 80066fa:	4921      	ldr	r1, [pc, #132]	; (8006780 <_malloc_r+0xac>)
 80066fc:	680a      	ldr	r2, [r1, #0]
 80066fe:	4614      	mov	r4, r2
 8006700:	b99c      	cbnz	r4, 800672a <_malloc_r+0x56>
 8006702:	4f20      	ldr	r7, [pc, #128]	; (8006784 <_malloc_r+0xb0>)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	b923      	cbnz	r3, 8006712 <_malloc_r+0x3e>
 8006708:	4621      	mov	r1, r4
 800670a:	4630      	mov	r0, r6
 800670c:	f000 f862 	bl	80067d4 <_sbrk_r>
 8006710:	6038      	str	r0, [r7, #0]
 8006712:	4629      	mov	r1, r5
 8006714:	4630      	mov	r0, r6
 8006716:	f000 f85d 	bl	80067d4 <_sbrk_r>
 800671a:	1c43      	adds	r3, r0, #1
 800671c:	d123      	bne.n	8006766 <_malloc_r+0x92>
 800671e:	230c      	movs	r3, #12
 8006720:	6033      	str	r3, [r6, #0]
 8006722:	4630      	mov	r0, r6
 8006724:	f000 f86c 	bl	8006800 <__malloc_unlock>
 8006728:	e7e3      	b.n	80066f2 <_malloc_r+0x1e>
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	1b5b      	subs	r3, r3, r5
 800672e:	d417      	bmi.n	8006760 <_malloc_r+0x8c>
 8006730:	2b0b      	cmp	r3, #11
 8006732:	d903      	bls.n	800673c <_malloc_r+0x68>
 8006734:	6023      	str	r3, [r4, #0]
 8006736:	441c      	add	r4, r3
 8006738:	6025      	str	r5, [r4, #0]
 800673a:	e004      	b.n	8006746 <_malloc_r+0x72>
 800673c:	6863      	ldr	r3, [r4, #4]
 800673e:	42a2      	cmp	r2, r4
 8006740:	bf0c      	ite	eq
 8006742:	600b      	streq	r3, [r1, #0]
 8006744:	6053      	strne	r3, [r2, #4]
 8006746:	4630      	mov	r0, r6
 8006748:	f000 f85a 	bl	8006800 <__malloc_unlock>
 800674c:	f104 000b 	add.w	r0, r4, #11
 8006750:	1d23      	adds	r3, r4, #4
 8006752:	f020 0007 	bic.w	r0, r0, #7
 8006756:	1ac2      	subs	r2, r0, r3
 8006758:	d0cc      	beq.n	80066f4 <_malloc_r+0x20>
 800675a:	1a1b      	subs	r3, r3, r0
 800675c:	50a3      	str	r3, [r4, r2]
 800675e:	e7c9      	b.n	80066f4 <_malloc_r+0x20>
 8006760:	4622      	mov	r2, r4
 8006762:	6864      	ldr	r4, [r4, #4]
 8006764:	e7cc      	b.n	8006700 <_malloc_r+0x2c>
 8006766:	1cc4      	adds	r4, r0, #3
 8006768:	f024 0403 	bic.w	r4, r4, #3
 800676c:	42a0      	cmp	r0, r4
 800676e:	d0e3      	beq.n	8006738 <_malloc_r+0x64>
 8006770:	1a21      	subs	r1, r4, r0
 8006772:	4630      	mov	r0, r6
 8006774:	f000 f82e 	bl	80067d4 <_sbrk_r>
 8006778:	3001      	adds	r0, #1
 800677a:	d1dd      	bne.n	8006738 <_malloc_r+0x64>
 800677c:	e7cf      	b.n	800671e <_malloc_r+0x4a>
 800677e:	bf00      	nop
 8006780:	200049a4 	.word	0x200049a4
 8006784:	200049a8 	.word	0x200049a8

08006788 <_realloc_r>:
 8006788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678a:	4607      	mov	r7, r0
 800678c:	4614      	mov	r4, r2
 800678e:	460e      	mov	r6, r1
 8006790:	b921      	cbnz	r1, 800679c <_realloc_r+0x14>
 8006792:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006796:	4611      	mov	r1, r2
 8006798:	f7ff bf9c 	b.w	80066d4 <_malloc_r>
 800679c:	b922      	cbnz	r2, 80067a8 <_realloc_r+0x20>
 800679e:	f7ff ff49 	bl	8006634 <_free_r>
 80067a2:	4625      	mov	r5, r4
 80067a4:	4628      	mov	r0, r5
 80067a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067a8:	f000 f830 	bl	800680c <_malloc_usable_size_r>
 80067ac:	42a0      	cmp	r0, r4
 80067ae:	d20f      	bcs.n	80067d0 <_realloc_r+0x48>
 80067b0:	4621      	mov	r1, r4
 80067b2:	4638      	mov	r0, r7
 80067b4:	f7ff ff8e 	bl	80066d4 <_malloc_r>
 80067b8:	4605      	mov	r5, r0
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d0f2      	beq.n	80067a4 <_realloc_r+0x1c>
 80067be:	4631      	mov	r1, r6
 80067c0:	4622      	mov	r2, r4
 80067c2:	f7ff fbf7 	bl	8005fb4 <memcpy>
 80067c6:	4631      	mov	r1, r6
 80067c8:	4638      	mov	r0, r7
 80067ca:	f7ff ff33 	bl	8006634 <_free_r>
 80067ce:	e7e9      	b.n	80067a4 <_realloc_r+0x1c>
 80067d0:	4635      	mov	r5, r6
 80067d2:	e7e7      	b.n	80067a4 <_realloc_r+0x1c>

080067d4 <_sbrk_r>:
 80067d4:	b538      	push	{r3, r4, r5, lr}
 80067d6:	4d06      	ldr	r5, [pc, #24]	; (80067f0 <_sbrk_r+0x1c>)
 80067d8:	2300      	movs	r3, #0
 80067da:	4604      	mov	r4, r0
 80067dc:	4608      	mov	r0, r1
 80067de:	602b      	str	r3, [r5, #0]
 80067e0:	f7fa fc0e 	bl	8001000 <_sbrk>
 80067e4:	1c43      	adds	r3, r0, #1
 80067e6:	d102      	bne.n	80067ee <_sbrk_r+0x1a>
 80067e8:	682b      	ldr	r3, [r5, #0]
 80067ea:	b103      	cbz	r3, 80067ee <_sbrk_r+0x1a>
 80067ec:	6023      	str	r3, [r4, #0]
 80067ee:	bd38      	pop	{r3, r4, r5, pc}
 80067f0:	20004edc 	.word	0x20004edc

080067f4 <__malloc_lock>:
 80067f4:	4801      	ldr	r0, [pc, #4]	; (80067fc <__malloc_lock+0x8>)
 80067f6:	f000 b811 	b.w	800681c <__retarget_lock_acquire_recursive>
 80067fa:	bf00      	nop
 80067fc:	20004ee4 	.word	0x20004ee4

08006800 <__malloc_unlock>:
 8006800:	4801      	ldr	r0, [pc, #4]	; (8006808 <__malloc_unlock+0x8>)
 8006802:	f000 b80c 	b.w	800681e <__retarget_lock_release_recursive>
 8006806:	bf00      	nop
 8006808:	20004ee4 	.word	0x20004ee4

0800680c <_malloc_usable_size_r>:
 800680c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006810:	1f18      	subs	r0, r3, #4
 8006812:	2b00      	cmp	r3, #0
 8006814:	bfbc      	itt	lt
 8006816:	580b      	ldrlt	r3, [r1, r0]
 8006818:	18c0      	addlt	r0, r0, r3
 800681a:	4770      	bx	lr

0800681c <__retarget_lock_acquire_recursive>:
 800681c:	4770      	bx	lr

0800681e <__retarget_lock_release_recursive>:
 800681e:	4770      	bx	lr

08006820 <_init>:
 8006820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006822:	bf00      	nop
 8006824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006826:	bc08      	pop	{r3}
 8006828:	469e      	mov	lr, r3
 800682a:	4770      	bx	lr

0800682c <_fini>:
 800682c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682e:	bf00      	nop
 8006830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006832:	bc08      	pop	{r3}
 8006834:	469e      	mov	lr, r3
 8006836:	4770      	bx	lr
