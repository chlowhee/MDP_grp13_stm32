
MDP_grp13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a548  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b94  0800a6d8  0800a6d8  0001a6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b26c  0800b26c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800b26c  0800b26c  0001b26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b274  0800b274  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b274  0800b274  0001b274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b278  0800b278  0001b278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800b27c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00005038  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200050ac  200050ac  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ed94  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b97  00000000  00000000  0003ee38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001738  00000000  00000000  000429d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015e0  00000000  00000000  00044108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004f1c  00000000  00000000  000456e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001972d  00000000  00000000  0004a604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2777  00000000  00000000  00063d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001464a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000679c  00000000  00000000  001464fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a6c0 	.word	0x0800a6c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800a6c0 	.word	0x0800a6c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bd0:	f000 b96e 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f040 8083 	bne.w	8000d02 <__udivmoddi4+0x116>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4617      	mov	r7, r2
 8000c00:	d947      	bls.n	8000c92 <__udivmoddi4+0xa6>
 8000c02:	fab2 f282 	clz	r2, r2
 8000c06:	b142      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c08:	f1c2 0020 	rsb	r0, r2, #32
 8000c0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c10:	4091      	lsls	r1, r2
 8000c12:	4097      	lsls	r7, r2
 8000c14:	ea40 0c01 	orr.w	ip, r0, r1
 8000c18:	4094      	lsls	r4, r2
 8000c1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fbbc f6f8 	udiv	r6, ip, r8
 8000c24:	fa1f fe87 	uxth.w	lr, r7
 8000c28:	fb08 c116 	mls	r1, r8, r6, ip
 8000c2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c30:	fb06 f10e 	mul.w	r1, r6, lr
 8000c34:	4299      	cmp	r1, r3
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x60>
 8000c38:	18fb      	adds	r3, r7, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c3e:	f080 8119 	bcs.w	8000e74 <__udivmoddi4+0x288>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 8116 	bls.w	8000e74 <__udivmoddi4+0x288>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	443b      	add	r3, r7
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x8c>
 8000c64:	193c      	adds	r4, r7, r4
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 8105 	bcs.w	8000e78 <__udivmoddi4+0x28c>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	f240 8102 	bls.w	8000e78 <__udivmoddi4+0x28c>
 8000c74:	3802      	subs	r0, #2
 8000c76:	443c      	add	r4, r7
 8000c78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7c:	eba4 040e 	sub.w	r4, r4, lr
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa0>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	b902      	cbnz	r2, 8000c96 <__udivmoddi4+0xaa>
 8000c94:	deff      	udf	#255	; 0xff
 8000c96:	fab2 f282 	clz	r2, r2
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d150      	bne.n	8000d40 <__udivmoddi4+0x154>
 8000c9e:	1bcb      	subs	r3, r1, r7
 8000ca0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca4:	fa1f f887 	uxth.w	r8, r7
 8000ca8:	2601      	movs	r6, #1
 8000caa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cae:	0c21      	lsrs	r1, r4, #16
 8000cb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cbc:	428b      	cmp	r3, r1
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0xe4>
 8000cc0:	1879      	adds	r1, r7, r1
 8000cc2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0xe2>
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	f200 80e9 	bhi.w	8000ea0 <__udivmoddi4+0x2b4>
 8000cce:	4684      	mov	ip, r0
 8000cd0:	1ac9      	subs	r1, r1, r3
 8000cd2:	b2a3      	uxth	r3, r4
 8000cd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ce0:	fb08 f800 	mul.w	r8, r8, r0
 8000ce4:	45a0      	cmp	r8, r4
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x10c>
 8000ce8:	193c      	adds	r4, r7, r4
 8000cea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x10a>
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	f200 80d9 	bhi.w	8000ea8 <__udivmoddi4+0x2bc>
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	eba4 0408 	sub.w	r4, r4, r8
 8000cfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d00:	e7bf      	b.n	8000c82 <__udivmoddi4+0x96>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x12e>
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	f000 80b1 	beq.w	8000e6e <__udivmoddi4+0x282>
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d12:	4630      	mov	r0, r6
 8000d14:	4631      	mov	r1, r6
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f683 	clz	r6, r3
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d14a      	bne.n	8000db8 <__udivmoddi4+0x1cc>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0x140>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80b8 	bhi.w	8000e9c <__udivmoddi4+0x2b0>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	468c      	mov	ip, r1
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0a8      	beq.n	8000c8c <__udivmoddi4+0xa0>
 8000d3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3e:	e7a5      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f603 	lsr.w	r6, r0, r3
 8000d48:	4097      	lsls	r7, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d52:	40d9      	lsrs	r1, r3
 8000d54:	4330      	orrs	r0, r6
 8000d56:	0c03      	lsrs	r3, r0, #16
 8000d58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d5c:	fa1f f887 	uxth.w	r8, r7
 8000d60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f108 	mul.w	r1, r6, r8
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x19c>
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 808d 	bcs.w	8000e98 <__udivmoddi4+0x2ac>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 808a 	bls.w	8000e98 <__udivmoddi4+0x2ac>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	443b      	add	r3, r7
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b281      	uxth	r1, r0
 8000d8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d98:	fb00 f308 	mul.w	r3, r0, r8
 8000d9c:	428b      	cmp	r3, r1
 8000d9e:	d907      	bls.n	8000db0 <__udivmoddi4+0x1c4>
 8000da0:	1879      	adds	r1, r7, r1
 8000da2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000da6:	d273      	bcs.n	8000e90 <__udivmoddi4+0x2a4>
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d971      	bls.n	8000e90 <__udivmoddi4+0x2a4>
 8000dac:	3802      	subs	r0, #2
 8000dae:	4439      	add	r1, r7
 8000db0:	1acb      	subs	r3, r1, r3
 8000db2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db6:	e778      	b.n	8000caa <__udivmoddi4+0xbe>
 8000db8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000dc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc4:	431c      	orrs	r4, r3
 8000dc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dca:	fa01 f306 	lsl.w	r3, r1, r6
 8000dce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd6:	431f      	orrs	r7, r3
 8000dd8:	0c3b      	lsrs	r3, r7, #16
 8000dda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dde:	fa1f f884 	uxth.w	r8, r4
 8000de2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dea:	fb09 fa08 	mul.w	sl, r9, r8
 8000dee:	458a      	cmp	sl, r1
 8000df0:	fa02 f206 	lsl.w	r2, r2, r6
 8000df4:	fa00 f306 	lsl.w	r3, r0, r6
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x220>
 8000dfa:	1861      	adds	r1, r4, r1
 8000dfc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e00:	d248      	bcs.n	8000e94 <__udivmoddi4+0x2a8>
 8000e02:	458a      	cmp	sl, r1
 8000e04:	d946      	bls.n	8000e94 <__udivmoddi4+0x2a8>
 8000e06:	f1a9 0902 	sub.w	r9, r9, #2
 8000e0a:	4421      	add	r1, r4
 8000e0c:	eba1 010a 	sub.w	r1, r1, sl
 8000e10:	b2bf      	uxth	r7, r7
 8000e12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1e:	fb00 f808 	mul.w	r8, r0, r8
 8000e22:	45b8      	cmp	r8, r7
 8000e24:	d907      	bls.n	8000e36 <__udivmoddi4+0x24a>
 8000e26:	19e7      	adds	r7, r4, r7
 8000e28:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e2c:	d22e      	bcs.n	8000e8c <__udivmoddi4+0x2a0>
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d92c      	bls.n	8000e8c <__udivmoddi4+0x2a0>
 8000e32:	3802      	subs	r0, #2
 8000e34:	4427      	add	r7, r4
 8000e36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e3a:	eba7 0708 	sub.w	r7, r7, r8
 8000e3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e42:	454f      	cmp	r7, r9
 8000e44:	46c6      	mov	lr, r8
 8000e46:	4649      	mov	r1, r9
 8000e48:	d31a      	bcc.n	8000e80 <__udivmoddi4+0x294>
 8000e4a:	d017      	beq.n	8000e7c <__udivmoddi4+0x290>
 8000e4c:	b15d      	cbz	r5, 8000e66 <__udivmoddi4+0x27a>
 8000e4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e52:	eb67 0701 	sbc.w	r7, r7, r1
 8000e56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e5a:	40f2      	lsrs	r2, r6
 8000e5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e60:	40f7      	lsrs	r7, r6
 8000e62:	e9c5 2700 	strd	r2, r7, [r5]
 8000e66:	2600      	movs	r6, #0
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	462e      	mov	r6, r5
 8000e70:	4628      	mov	r0, r5
 8000e72:	e70b      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000e74:	4606      	mov	r6, r0
 8000e76:	e6e9      	b.n	8000c4c <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fd      	b.n	8000c78 <__udivmoddi4+0x8c>
 8000e7c:	4543      	cmp	r3, r8
 8000e7e:	d2e5      	bcs.n	8000e4c <__udivmoddi4+0x260>
 8000e80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e84:	eb69 0104 	sbc.w	r1, r9, r4
 8000e88:	3801      	subs	r0, #1
 8000e8a:	e7df      	b.n	8000e4c <__udivmoddi4+0x260>
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	e7d2      	b.n	8000e36 <__udivmoddi4+0x24a>
 8000e90:	4660      	mov	r0, ip
 8000e92:	e78d      	b.n	8000db0 <__udivmoddi4+0x1c4>
 8000e94:	4681      	mov	r9, r0
 8000e96:	e7b9      	b.n	8000e0c <__udivmoddi4+0x220>
 8000e98:	4666      	mov	r6, ip
 8000e9a:	e775      	b.n	8000d88 <__udivmoddi4+0x19c>
 8000e9c:	4630      	mov	r0, r6
 8000e9e:	e74a      	b.n	8000d36 <__udivmoddi4+0x14a>
 8000ea0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea4:	4439      	add	r1, r7
 8000ea6:	e713      	b.n	8000cd0 <__udivmoddi4+0xe4>
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	443c      	add	r4, r7
 8000eac:	e724      	b.n	8000cf8 <__udivmoddi4+0x10c>
 8000eae:	bf00      	nop

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid) {
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0f;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0f;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f04f 0200 	mov.w	r2, #0
 8000ed2:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0f;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f04f 0200 	mov.w	r2, #0
 8000ee2:	635a      	str	r2, [r3, #52]	; 0x34

}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 8000ef0:	b480      	push	{r7}
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000efc:	edc7 0a01 	vstr	s1, [r7, #4]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 8000f00:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f04:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f0c:	edc7 7a05 	vstr	s15, [r7, #20]


	/*
	* Proportional
	*/
    float proportional = pid->Kp * error;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	edd3 7a00 	vldr	s15, [r3]
 8000f16:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f1e:	edc7 7a04 	vstr	s15, [r7, #16]


	/*
	* Integral
	*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f2e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8000f32:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	edd3 7a08 	vldr	s15, [r3, #32]
 8000f3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 8000f46:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f4a:	ee76 7a27 	vadd.f32	s15, s12, s15
 8000f4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24


	/*
	* Compute output and apply limits
	*/
    pid->out = proportional + pid->integrator;// + pid->differentiator;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000f62:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
//        pid->out = pid->limMin;
//
//    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	629a      	str	r2, [r3, #40]	; 0x28
    pid->prevMeasurement = measurement;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	631a      	str	r2, [r3, #48]	; 0x30

	/* Return controller output */
    return pid->out;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f80:	ee07 3a90 	vmov	s15, r3

}
 8000f84:	eeb0 0a67 	vmov.f32	s0, s15
 8000f88:	371c      	adds	r7, #28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <delay>:
uint32_t ir2Dist = 0;
float outLeft =0;
float outRight=0;
float error=0;

void delay(uint16_t time){  //provide us delay
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <delay+0x30>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim4) < time);
 8000fa6:	bf00      	nop
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <delay+0x30>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d3f9      	bcc.n	8000fa8 <delay+0x14>
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20004a28 	.word	0x20004a28

08000fc8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)		//For HCSR04_Read();
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	7f1b      	ldrb	r3, [r3, #28]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	f040 8083 	bne.w	80010e0 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000fda:	4b45      	ldr	r3, [pc, #276]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d11a      	bne.n	8001018 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f004 f9c1 	bl	800536c <HAL_TIM_ReadCapturedValue>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a41      	ldr	r2, [pc, #260]	; (80010f4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000fee:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000ff0:	4b3f      	ldr	r3, [pc, #252]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6a1a      	ldr	r2, [r3, #32]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 020a 	bic.w	r2, r2, #10
 8001004:	621a      	str	r2, [r3, #32]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6a1a      	ldr	r2, [r3, #32]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f042 0202 	orr.w	r2, r2, #2
 8001014:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 8001016:	e063      	b.n	80010e0 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001018:	4b35      	ldr	r3, [pc, #212]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d15f      	bne.n	80010e0 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001020:	2100      	movs	r1, #0
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f004 f9a2 	bl	800536c <HAL_TIM_ReadCapturedValue>
 8001028:	4603      	mov	r3, r0
 800102a:	4a33      	ldr	r2, [pc, #204]	; (80010f8 <HAL_TIM_IC_CaptureCallback+0x130>)
 800102c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 8001036:	4b30      	ldr	r3, [pc, #192]	; (80010f8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4b2e      	ldr	r3, [pc, #184]	; (80010f4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d907      	bls.n	8001052 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8001042:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	4a2b      	ldr	r2, [pc, #172]	; (80010fc <HAL_TIM_IC_CaptureCallback+0x134>)
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	e00f      	b.n	8001072 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2) {
 8001052:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	429a      	cmp	r2, r3
 800105c:	d909      	bls.n	8001072 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 800105e:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800106c:	33ff      	adds	r3, #255	; 0xff
 800106e:	4a23      	ldr	r2, [pc, #140]	; (80010fc <HAL_TIM_IC_CaptureCallback+0x134>)
 8001070:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8001072:	4b22      	ldr	r3, [pc, #136]	; (80010fc <HAL_TIM_IC_CaptureCallback+0x134>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fa44 	bl	8000504 <__aeabi_ui2d>
 800107c:	a31a      	add	r3, pc, #104	; (adr r3, 80010e8 <HAL_TIM_IC_CaptureCallback+0x120>)
 800107e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001082:	f7ff fab9 	bl	80005f8 <__aeabi_dmul>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4610      	mov	r0, r2
 800108c:	4619      	mov	r1, r3
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001096:	f7ff fbd9 	bl	800084c <__aeabi_ddiv>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f7ff fd6b 	bl	8000b7c <__aeabi_d2uiz>
 80010a6:	4603      	mov	r3, r0
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_TIM_IC_CaptureCallback+0x138>)
 80010ac:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6a1a      	ldr	r2, [r3, #32]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 020a 	bic.w	r2, r2, #10
 80010c2:	621a      	str	r2, [r3, #32]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6a12      	ldr	r2, [r2, #32]
 80010ce:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0202 	bic.w	r2, r2, #2
 80010de:	60da      	str	r2, [r3, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	b020c49c 	.word	0xb020c49c
 80010ec:	3fa16872 	.word	0x3fa16872
 80010f0:	200000a8 	.word	0x200000a8
 80010f4:	2000009c 	.word	0x2000009c
 80010f8:	200000a0 	.word	0x200000a0
 80010fc:	200000a4 	.word	0x200000a4
 8001100:	200000ac 	.word	0x200000ac
 8001104:	20004a28 	.word	0x20004a28

08001108 <HCSR04_Read>:

uint16_t HCSR04_Read (void)		//Read Ultrasonic Distance
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001112:	480c      	ldr	r0, [pc, #48]	; (8001144 <HCSR04_Read+0x3c>)
 8001114:	f002 fd60 	bl	8003bd8 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8001118:	200a      	movs	r0, #10
 800111a:	f7ff ff3b 	bl	8000f94 <delay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001124:	4807      	ldr	r0, [pc, #28]	; (8001144 <HCSR04_Read+0x3c>)
 8001126:	f002 fd57 	bl	8003bd8 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <HCSR04_Read+0x40>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HCSR04_Read+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f042 0202 	orr.w	r2, r2, #2
 8001138:	60da      	str	r2, [r3, #12]
	return Distance;
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <HCSR04_Read+0x44>)
 800113c:	881b      	ldrh	r3, [r3, #0]
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40020c00 	.word	0x40020c00
 8001148:	20004a28 	.word	0x20004a28
 800114c:	200000ac 	.word	0x200000ac

08001150 <ultraDistCheck>:

void ultraDistCheck (void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	uDistCheck1 = HCSR04_Read();
 8001154:	f7ff ffd8 	bl	8001108 <HCSR04_Read>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <ultraDistCheck+0x80>)
 800115e:	801a      	strh	r2, [r3, #0]
	HAL_Delay(100);
 8001160:	2064      	movs	r0, #100	; 0x64
 8001162:	f001 ff73 	bl	800304c <HAL_Delay>
	uDistCheck2 = HCSR04_Read();
 8001166:	f7ff ffcf 	bl	8001108 <HCSR04_Read>
 800116a:	4603      	mov	r3, r0
 800116c:	461a      	mov	r2, r3
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <ultraDistCheck+0x84>)
 8001170:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8001172:	2064      	movs	r0, #100	; 0x64
 8001174:	f001 ff6a 	bl	800304c <HAL_Delay>
	while (abs(uDistCheck1 - uDistCheck2) >= 5) { // || uDistCheck2 - uDistCheck1 >= 5) {
 8001178:	e011      	b.n	800119e <ultraDistCheck+0x4e>
		uDistCheck1 = HCSR04_Read();
 800117a:	f7ff ffc5 	bl	8001108 <HCSR04_Read>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <ultraDistCheck+0x80>)
 8001184:	801a      	strh	r2, [r3, #0]
		HAL_Delay(100);
 8001186:	2064      	movs	r0, #100	; 0x64
 8001188:	f001 ff60 	bl	800304c <HAL_Delay>
		uDistCheck2 = HCSR04_Read();
 800118c:	f7ff ffbc 	bl	8001108 <HCSR04_Read>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <ultraDistCheck+0x84>)
 8001196:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 8001198:	2064      	movs	r0, #100	; 0x64
 800119a:	f001 ff57 	bl	800304c <HAL_Delay>
	while (abs(uDistCheck1 - uDistCheck2) >= 5) { // || uDistCheck2 - uDistCheck1 >= 5) {
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <ultraDistCheck+0x80>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <ultraDistCheck+0x84>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	bfb8      	it	lt
 80011ae:	425b      	neglt	r3, r3
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	dce2      	bgt.n	800117a <ultraDistCheck+0x2a>
	}
	uDistFinal = (uDistCheck1 + uDistCheck2)/2;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <ultraDistCheck+0x80>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <ultraDistCheck+0x84>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4413      	add	r3, r2
 80011c0:	0fda      	lsrs	r2, r3, #31
 80011c2:	4413      	add	r3, r2
 80011c4:	105b      	asrs	r3, r3, #1
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <ultraDistCheck+0x88>)
 80011ca:	601a      	str	r2, [r3, #0]
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200000ae 	.word	0x200000ae
 80011d4:	200000b0 	.word	0x200000b0
 80011d8:	200000b4 	.word	0x200000b4

080011dc <waitCmd>:

	ir2Dist = 32.6167 * pow(V, -1.0928);
	return ir2Dist;
}

void waitCmd (void) {	//not complete
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	while (*aRxBuffer == 'Z') {
 80011e0:	e004      	b.n	80011ec <waitCmd+0x10>
		HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 1);
 80011e2:	2201      	movs	r2, #1
 80011e4:	4905      	ldr	r1, [pc, #20]	; (80011fc <waitCmd+0x20>)
 80011e6:	4806      	ldr	r0, [pc, #24]	; (8001200 <waitCmd+0x24>)
 80011e8:	f004 ff6c 	bl	80060c4 <HAL_UART_Receive_IT>
	while (*aRxBuffer == 'Z') {
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <waitCmd+0x20>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b5a      	cmp	r3, #90	; 0x5a
 80011f2:	d0f6      	beq.n	80011e2 <waitCmd+0x6>
	}
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20004bf8 	.word	0x20004bf8
 8001200:	20004a70 	.word	0x20004a70

08001204 <PIDmotor>:
	}

}

//Master function for motor with PID control
void PIDmotor(float distance){
 8001204:	b580      	push	{r7, lr}
 8001206:	b09e      	sub	sp, #120	; 0x78
 8001208:	af00      	add	r7, sp, #0
 800120a:	ed87 0a01 	vstr	s0, [r7, #4]
	/* Set UARTBuffer to default value */
	*aRxBuffer = 'Z';
 800120e:	4b64      	ldr	r3, [pc, #400]	; (80013a0 <PIDmotor+0x19c>)
 8001210:	225a      	movs	r2, #90	; 0x5a
 8001212:	701a      	strb	r2, [r3, #0]

	/* Initialise PID Controllers */
	PIDController pidLeft = {PID_KP,PID_KI,0,0,0,0,0,0,4.0f};
 8001214:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001218:	2238      	movs	r2, #56	; 0x38
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f008 fe27 	bl	8009e70 <memset>
 8001222:	4b60      	ldr	r3, [pc, #384]	; (80013a4 <PIDmotor+0x1a0>)
 8001224:	643b      	str	r3, [r7, #64]	; 0x40
 8001226:	4b60      	ldr	r3, [pc, #384]	; (80013a8 <PIDmotor+0x1a4>)
 8001228:	647b      	str	r3, [r7, #68]	; 0x44
 800122a:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800122e:	663b      	str	r3, [r7, #96]	; 0x60
	PIDController pidRight =  {PID_KP,PID_KI,0,0,0,0,0,0,4.0f};
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	2238      	movs	r2, #56	; 0x38
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f008 fe19 	bl	8009e70 <memset>
 800123e:	4b59      	ldr	r3, [pc, #356]	; (80013a4 <PIDmotor+0x1a0>)
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b59      	ldr	r3, [pc, #356]	; (80013a8 <PIDmotor+0x1a4>)
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Initialise Encoder */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);		//left encoder(MotorA) start
 800124c:	213c      	movs	r1, #60	; 0x3c
 800124e:	4857      	ldr	r0, [pc, #348]	; (80013ac <PIDmotor+0x1a8>)
 8001250:	f003 fcd0 	bl	8004bf4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		//right encoder(MotorB) start
 8001254:	213c      	movs	r1, #60	; 0x3c
 8001256:	4856      	ldr	r0, [pc, #344]	; (80013b0 <PIDmotor+0x1ac>)
 8001258:	f003 fccc 	bl	8004bf4 <HAL_TIM_Encoder_Start>

	/* Configure direction of motors */
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800125c:	2201      	movs	r2, #1
 800125e:	2108      	movs	r1, #8
 8001260:	4854      	ldr	r0, [pc, #336]	; (80013b4 <PIDmotor+0x1b0>)
 8001262:	f002 fcb9 	bl	8003bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	2104      	movs	r1, #4
 800126a:	4852      	ldr	r0, [pc, #328]	; (80013b4 <PIDmotor+0x1b0>)
 800126c:	f002 fcb4 	bl	8003bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8001270:	2201      	movs	r2, #1
 8001272:	2110      	movs	r1, #16
 8001274:	484f      	ldr	r0, [pc, #316]	; (80013b4 <PIDmotor+0x1b0>)
 8001276:	f002 fcaf 	bl	8003bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	2120      	movs	r1, #32
 800127e:	484d      	ldr	r0, [pc, #308]	; (80013b4 <PIDmotor+0x1b0>)
 8001280:	f002 fcaa 	bl	8003bd8 <HAL_GPIO_WritePin>
	PIDController_Init(&pidLeft);
 8001284:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fe13 	bl	8000eb4 <PIDController_Init>
	PIDController_Init(&pidRight);
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fe0e 	bl	8000eb4 <PIDController_Init>

	while(1){
		/* Take current encoder values */
		currentLeft = __HAL_TIM_GET_COUNTER(&htim2)*CMPERREV;
 8001298:	4b44      	ldr	r3, [pc, #272]	; (80013ac <PIDmotor+0x1a8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	ee07 3a90 	vmov	s15, r3
 80012a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012a6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80013b8 <PIDmotor+0x1b4>
 80012aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b2:	ee17 3a90 	vmov	r3, s15
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	4b40      	ldr	r3, [pc, #256]	; (80013bc <PIDmotor+0x1b8>)
 80012ba:	801a      	strh	r2, [r3, #0]
		currentRight = __HAL_TIM_GET_COUNTER(&htim3)*CMPERREV;
 80012bc:	4b3c      	ldr	r3, [pc, #240]	; (80013b0 <PIDmotor+0x1ac>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ca:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80013b8 <PIDmotor+0x1b4>
 80012ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d6:	ee17 3a90 	vmov	r3, s15
 80012da:	b21a      	sxth	r2, r3
 80012dc:	4b38      	ldr	r3, [pc, #224]	; (80013c0 <PIDmotor+0x1bc>)
 80012de:	801a      	strh	r2, [r3, #0]

		/* Compute new control signal */
		outLeft = PIDController_Update(&pidLeft, distance, currentLeft);
 80012e0:	4b36      	ldr	r3, [pc, #216]	; (80013bc <PIDmotor+0x1b8>)
 80012e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e6:	ee07 3a90 	vmov	s15, r3
 80012ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012f2:	eef0 0a67 	vmov.f32	s1, s15
 80012f6:	ed97 0a01 	vldr	s0, [r7, #4]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fdf8 	bl	8000ef0 <PIDController_Update>
 8001300:	eef0 7a40 	vmov.f32	s15, s0
 8001304:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <PIDmotor+0x1c0>)
 8001306:	edc3 7a00 	vstr	s15, [r3]
		outRight = PIDController_Update(&pidRight, distance, currentRight);
 800130a:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <PIDmotor+0x1bc>)
 800130c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001310:	ee07 3a90 	vmov	s15, r3
 8001314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	eef0 0a67 	vmov.f32	s1, s15
 8001320:	ed97 0a01 	vldr	s0, [r7, #4]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fde3 	bl	8000ef0 <PIDController_Update>
 800132a:	eef0 7a40 	vmov.f32	s15, s0
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <PIDmotor+0x1c4>)
 8001330:	edc3 7a00 	vstr	s15, [r3]

		/* Update new values to motors */
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, outLeft);
 8001334:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <PIDmotor+0x1c0>)
 8001336:	edd3 7a00 	vldr	s15, [r3]
 800133a:	4b24      	ldr	r3, [pc, #144]	; (80013cc <PIDmotor+0x1c8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001342:	ee17 2a90 	vmov	r2, s15
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, outRight);
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <PIDmotor+0x1c4>)
 800134a:	edd3 7a00 	vldr	s15, [r3]
 800134e:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <PIDmotor+0x1c8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001356:	ee17 2a90 	vmov	r2, s15
 800135a:	639a      	str	r2, [r3, #56]	; 0x38
		error = pidLeft.prevError;
 800135c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800135e:	4a1c      	ldr	r2, [pc, #112]	; (80013d0 <PIDmotor+0x1cc>)
 8001360:	6013      	str	r3, [r2, #0]
		/* Preventive measures for errors */
		if(pidLeft.out>=4000 || pidRight.out>=4000)break;
 8001362:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001366:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80013d4 <PIDmotor+0x1d0>
 800136a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800136e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001372:	da09      	bge.n	8001388 <PIDmotor+0x184>
 8001374:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001378:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80013d4 <PIDmotor+0x1d0>
 800137c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001384:	da00      	bge.n	8001388 <PIDmotor+0x184>
		currentLeft = __HAL_TIM_GET_COUNTER(&htim2)*CMPERREV;
 8001386:	e787      	b.n	8001298 <PIDmotor+0x94>
	}

	/* Reset Encoders value */
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <PIDmotor+0x1a8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2200      	movs	r2, #0
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <PIDmotor+0x1ac>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2200      	movs	r2, #0
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001398:	bf00      	nop
 800139a:	3778      	adds	r7, #120	; 0x78
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20004bf8 	.word	0x20004bf8
 80013a4:	41200000 	.word	0x41200000
 80013a8:	40200000 	.word	0x40200000
 80013ac:	20004bfc 	.word	0x20004bfc
 80013b0:	20004b1c 	.word	0x20004b1c
 80013b4:	40020000 	.word	0x40020000
 80013b8:	3c70f0f1 	.word	0x3c70f0f1
 80013bc:	20004b00 	.word	0x20004b00
 80013c0:	20004bac 	.word	0x20004bac
 80013c4:	200000b8 	.word	0x200000b8
 80013c8:	200000bc 	.word	0x200000bc
 80013cc:	200049e0 	.word	0x200049e0
 80013d0:	200000c0 	.word	0x200000c0
 80013d4:	457a0000 	.word	0x457a0000

080013d8 <motorCont>:


//Master function for image recognition motor control
int motorCont(int speedL, int speedR, char dirL, char dirR, double dist){
 80013d8:	b5b0      	push	{r4, r5, r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6178      	str	r0, [r7, #20]
 80013e0:	6139      	str	r1, [r7, #16]
 80013e2:	4611      	mov	r1, r2
 80013e4:	461a      	mov	r2, r3
 80013e6:	ed87 0b00 	vstr	d0, [r7]
 80013ea:	460b      	mov	r3, r1
 80013ec:	73fb      	strb	r3, [r7, #15]
 80013ee:	4613      	mov	r3, r2
 80013f0:	73bb      	strb	r3, [r7, #14]
	*aRxBuffer = 'Z';
 80013f2:	4ba5      	ldr	r3, [pc, #660]	; (8001688 <motorCont+0x2b0>)
 80013f4:	225a      	movs	r2, #90	; 0x5a
 80013f6:	701a      	strb	r2, [r3, #0]
	//declaration
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);		//left encoder(MotorA) start
 80013f8:	213c      	movs	r1, #60	; 0x3c
 80013fa:	48a4      	ldr	r0, [pc, #656]	; (800168c <motorCont+0x2b4>)
 80013fc:	f003 fbfa 	bl	8004bf4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		//right encoder(MotorB) start
 8001400:	213c      	movs	r1, #60	; 0x3c
 8001402:	48a3      	ldr	r0, [pc, #652]	; (8001690 <motorCont+0x2b8>)
 8001404:	f003 fbf6 	bl	8004bf4 <HAL_TIM_Encoder_Start>
	currentLeft = __HAL_TIM_GET_COUNTER(&htim2);
 8001408:	4ba0      	ldr	r3, [pc, #640]	; (800168c <motorCont+0x2b4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	b21a      	sxth	r2, r3
 8001410:	4ba0      	ldr	r3, [pc, #640]	; (8001694 <motorCont+0x2bc>)
 8001412:	801a      	strh	r2, [r3, #0]
	currentRight = __HAL_TIM_GET_COUNTER(&htim3);
 8001414:	4b9e      	ldr	r3, [pc, #632]	; (8001690 <motorCont+0x2b8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	b21a      	sxth	r2, r3
 800141c:	4b9e      	ldr	r3, [pc, #632]	; (8001698 <motorCont+0x2c0>)
 800141e:	801a      	strh	r2, [r3, #0]
	tick = HAL_GetTick();
 8001420:	f001 fe08 	bl	8003034 <HAL_GetTick>
 8001424:	4603      	mov	r3, r0
 8001426:	461a      	mov	r2, r3
 8001428:	4b9c      	ldr	r3, [pc, #624]	; (800169c <motorCont+0x2c4>)
 800142a:	601a      	str	r2, [r3, #0]
	double encDist = dist * 68;
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	4b9b      	ldr	r3, [pc, #620]	; (80016a0 <motorCont+0x2c8>)
 8001432:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001436:	f7ff f8df 	bl	80005f8 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	//Select direction of motor//
	switch(dirL){
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	2b46      	cmp	r3, #70	; 0x46
 8001446:	d002      	beq.n	800144e <motorCont+0x76>
 8001448:	2b52      	cmp	r3, #82	; 0x52
 800144a:	d00b      	beq.n	8001464 <motorCont+0x8c>
 800144c:	e015      	b.n	800147a <motorCont+0xa2>
		case 'F':
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800144e:	2201      	movs	r2, #1
 8001450:	2108      	movs	r1, #8
 8001452:	4894      	ldr	r0, [pc, #592]	; (80016a4 <motorCont+0x2cc>)
 8001454:	f002 fbc0 	bl	8003bd8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	2104      	movs	r1, #4
 800145c:	4891      	ldr	r0, [pc, #580]	; (80016a4 <motorCont+0x2cc>)
 800145e:	f002 fbbb 	bl	8003bd8 <HAL_GPIO_WritePin>
			break;
 8001462:	e00a      	b.n	800147a <motorCont+0xa2>

		case 'R':
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	2108      	movs	r1, #8
 8001468:	488e      	ldr	r0, [pc, #568]	; (80016a4 <motorCont+0x2cc>)
 800146a:	f002 fbb5 	bl	8003bd8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800146e:	2201      	movs	r2, #1
 8001470:	2104      	movs	r1, #4
 8001472:	488c      	ldr	r0, [pc, #560]	; (80016a4 <motorCont+0x2cc>)
 8001474:	f002 fbb0 	bl	8003bd8 <HAL_GPIO_WritePin>
			break;
 8001478:	bf00      	nop
	}

	switch(dirR){
 800147a:	7bbb      	ldrb	r3, [r7, #14]
 800147c:	2b46      	cmp	r3, #70	; 0x46
 800147e:	d002      	beq.n	8001486 <motorCont+0xae>
 8001480:	2b52      	cmp	r3, #82	; 0x52
 8001482:	d00b      	beq.n	800149c <motorCont+0xc4>
 8001484:	e015      	b.n	80014b2 <motorCont+0xda>
		case 'F':
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8001486:	2201      	movs	r2, #1
 8001488:	2110      	movs	r1, #16
 800148a:	4886      	ldr	r0, [pc, #536]	; (80016a4 <motorCont+0x2cc>)
 800148c:	f002 fba4 	bl	8003bd8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	2120      	movs	r1, #32
 8001494:	4883      	ldr	r0, [pc, #524]	; (80016a4 <motorCont+0x2cc>)
 8001496:	f002 fb9f 	bl	8003bd8 <HAL_GPIO_WritePin>
			break;
 800149a:	e00a      	b.n	80014b2 <motorCont+0xda>

		case 'R':
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	2110      	movs	r1, #16
 80014a0:	4880      	ldr	r0, [pc, #512]	; (80016a4 <motorCont+0x2cc>)
 80014a2:	f002 fb99 	bl	8003bd8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 80014a6:	2201      	movs	r2, #1
 80014a8:	2120      	movs	r1, #32
 80014aa:	487e      	ldr	r0, [pc, #504]	; (80016a4 <motorCont+0x2cc>)
 80014ac:	f002 fb94 	bl	8003bd8 <HAL_GPIO_WritePin>
			break;
 80014b0:	bf00      	nop
	}
	//End of motor direction selection//

	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, speedL);
 80014b2:	4b7d      	ldr	r3, [pc, #500]	; (80016a8 <motorCont+0x2d0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, speedR);
 80014ba:	4b7b      	ldr	r3, [pc, #492]	; (80016a8 <motorCont+0x2d0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	639a      	str	r2, [r3, #56]	; 0x38


	while(1){
			currentLeft = __HAL_TIM_GET_COUNTER(&htim2);
 80014c2:	4b72      	ldr	r3, [pc, #456]	; (800168c <motorCont+0x2b4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c8:	b21a      	sxth	r2, r3
 80014ca:	4b72      	ldr	r3, [pc, #456]	; (8001694 <motorCont+0x2bc>)
 80014cc:	801a      	strh	r2, [r3, #0]
			currentRight = __HAL_TIM_GET_COUNTER(&htim3);
 80014ce:	4b70      	ldr	r3, [pc, #448]	; (8001690 <motorCont+0x2b8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	4b70      	ldr	r3, [pc, #448]	; (8001698 <motorCont+0x2c0>)
 80014d8:	801a      	strh	r2, [r3, #0]
			diffl = abs(currentLeft);
 80014da:	4b6e      	ldr	r3, [pc, #440]	; (8001694 <motorCont+0x2bc>)
 80014dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	bfb8      	it	lt
 80014e4:	425b      	neglt	r3, r3
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	b21a      	sxth	r2, r3
 80014ea:	4b70      	ldr	r3, [pc, #448]	; (80016ac <motorCont+0x2d4>)
 80014ec:	801a      	strh	r2, [r3, #0]
			diffr =abs(currentRight);
 80014ee:	4b6a      	ldr	r3, [pc, #424]	; (8001698 <motorCont+0x2c0>)
 80014f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bfb8      	it	lt
 80014f8:	425b      	neglt	r3, r3
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	b21a      	sxth	r2, r3
 80014fe:	4b6c      	ldr	r3, [pc, #432]	; (80016b0 <motorCont+0x2d8>)
 8001500:	801a      	strh	r2, [r3, #0]
			avg = abs((diffl+diffr)/2);
 8001502:	4b6a      	ldr	r3, [pc, #424]	; (80016ac <motorCont+0x2d4>)
 8001504:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001508:	461a      	mov	r2, r3
 800150a:	4b69      	ldr	r3, [pc, #420]	; (80016b0 <motorCont+0x2d8>)
 800150c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001510:	4413      	add	r3, r2
 8001512:	0fda      	lsrs	r2, r3, #31
 8001514:	4413      	add	r3, r2
 8001516:	105b      	asrs	r3, r3, #1
 8001518:	2b00      	cmp	r3, #0
 800151a:	bfb8      	it	lt
 800151c:	425b      	neglt	r3, r3
 800151e:	b21a      	sxth	r2, r3
 8001520:	4b64      	ldr	r3, [pc, #400]	; (80016b4 <motorCont+0x2dc>)
 8001522:	801a      	strh	r2, [r3, #0]
			sprintf(display,"Left:%5d\0", diffl/68);
 8001524:	4b61      	ldr	r3, [pc, #388]	; (80016ac <motorCont+0x2d4>)
 8001526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152a:	4a63      	ldr	r2, [pc, #396]	; (80016b8 <motorCont+0x2e0>)
 800152c:	fb82 1203 	smull	r1, r2, r2, r3
 8001530:	1152      	asrs	r2, r2, #5
 8001532:	17db      	asrs	r3, r3, #31
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	b21b      	sxth	r3, r3
 8001538:	461a      	mov	r2, r3
 800153a:	4960      	ldr	r1, [pc, #384]	; (80016bc <motorCont+0x2e4>)
 800153c:	4860      	ldr	r0, [pc, #384]	; (80016c0 <motorCont+0x2e8>)
 800153e:	f008 fc9f 	bl	8009e80 <siprintf>
			OLED_ShowString(10,35,display);
 8001542:	4a5f      	ldr	r2, [pc, #380]	; (80016c0 <motorCont+0x2e8>)
 8001544:	2123      	movs	r1, #35	; 0x23
 8001546:	200a      	movs	r0, #10
 8001548:	f008 fb9c 	bl	8009c84 <OLED_ShowString>
			sprintf(display,"Right:%5d\0", diffr/68);
 800154c:	4b58      	ldr	r3, [pc, #352]	; (80016b0 <motorCont+0x2d8>)
 800154e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001552:	4a59      	ldr	r2, [pc, #356]	; (80016b8 <motorCont+0x2e0>)
 8001554:	fb82 1203 	smull	r1, r2, r2, r3
 8001558:	1152      	asrs	r2, r2, #5
 800155a:	17db      	asrs	r3, r3, #31
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	b21b      	sxth	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	4958      	ldr	r1, [pc, #352]	; (80016c4 <motorCont+0x2ec>)
 8001564:	4856      	ldr	r0, [pc, #344]	; (80016c0 <motorCont+0x2e8>)
 8001566:	f008 fc8b 	bl	8009e80 <siprintf>
			OLED_ShowString(10,50,display);
 800156a:	4a55      	ldr	r2, [pc, #340]	; (80016c0 <motorCont+0x2e8>)
 800156c:	2132      	movs	r1, #50	; 0x32
 800156e:	200a      	movs	r0, #10
 8001570:	f008 fb88 	bl	8009c84 <OLED_ShowString>
			OLED_Refresh_Gram();
 8001574:	f008 fa12 	bl	800999c <OLED_Refresh_Gram>

			if(avg>=encDist*0.95){
 8001578:	4b4e      	ldr	r3, [pc, #312]	; (80016b4 <motorCont+0x2dc>)
 800157a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ffd0 	bl	8000524 <__aeabi_i2d>
 8001584:	4604      	mov	r4, r0
 8001586:	460d      	mov	r5, r1
 8001588:	a33d      	add	r3, pc, #244	; (adr r3, 8001680 <motorCont+0x2a8>)
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001592:	f7ff f831 	bl	80005f8 <__aeabi_dmul>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4620      	mov	r0, r4
 800159c:	4629      	mov	r1, r5
 800159e:	f7ff fab1 	bl	8000b04 <__aeabi_dcmpge>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d027      	beq.n	80015f8 <motorCont+0x220>
				speedL = speedL*0.95;
 80015a8:	6978      	ldr	r0, [r7, #20]
 80015aa:	f7fe ffbb 	bl	8000524 <__aeabi_i2d>
 80015ae:	a334      	add	r3, pc, #208	; (adr r3, 8001680 <motorCont+0x2a8>)
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7ff f820 	bl	80005f8 <__aeabi_dmul>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff fab4 	bl	8000b2c <__aeabi_d2iz>
 80015c4:	4603      	mov	r3, r0
 80015c6:	617b      	str	r3, [r7, #20]
				speedR = speedR*0.95;
 80015c8:	6938      	ldr	r0, [r7, #16]
 80015ca:	f7fe ffab 	bl	8000524 <__aeabi_i2d>
 80015ce:	a32c      	add	r3, pc, #176	; (adr r3, 8001680 <motorCont+0x2a8>)
 80015d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d4:	f7ff f810 	bl	80005f8 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff faa4 	bl	8000b2c <__aeabi_d2iz>
 80015e4:	4603      	mov	r3, r0
 80015e6:	613b      	str	r3, [r7, #16]
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, speedL);
 80015e8:	4b2f      	ldr	r3, [pc, #188]	; (80016a8 <motorCont+0x2d0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, speedR);
 80015f0:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <motorCont+0x2d0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	639a      	str	r2, [r3, #56]	; 0x38
			}

			if(avg>=encDist){
 80015f8:	4b2e      	ldr	r3, [pc, #184]	; (80016b4 <motorCont+0x2dc>)
 80015fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ff90 	bl	8000524 <__aeabi_i2d>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800160c:	f7ff fa70 	bl	8000af0 <__aeabi_dcmple>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00c      	beq.n	8001630 <motorCont+0x258>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <motorCont+0x2d0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2200      	movs	r2, #0
 800161c:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 800161e:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <motorCont+0x2d0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2200      	movs	r2, #0
 8001624:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(500);
 8001626:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800162a:	f001 fd0f 	bl	800304c <HAL_Delay>
				break;
 800162e:	e000      	b.n	8001632 <motorCont+0x25a>
	while(1){
 8001630:	e747      	b.n	80014c2 <motorCont+0xea>
			}

		}
		__HAL_TIM_SET_COUNTER(&htim2,0);
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <motorCont+0x2b4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim3,0);
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <motorCont+0x2b8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	; 0x24

		speedL=speedR=tick=diffl=diffr=0;
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <motorCont+0x2d8>)
 8001644:	2200      	movs	r2, #0
 8001646:	801a      	strh	r2, [r3, #0]
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <motorCont+0x2d8>)
 800164a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800164e:	4b17      	ldr	r3, [pc, #92]	; (80016ac <motorCont+0x2d4>)
 8001650:	801a      	strh	r2, [r3, #0]
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <motorCont+0x2d4>)
 8001654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001658:	461a      	mov	r2, r3
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <motorCont+0x2c4>)
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <motorCont+0x2c4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	617b      	str	r3, [r7, #20]
		OLED_Refresh_Gram();
 8001668:	f008 f998 	bl	800999c <OLED_Refresh_Gram>
		*aRxBuffer = 'Z';
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <motorCont+0x2b0>)
 800166e:	225a      	movs	r2, #90	; 0x5a
 8001670:	701a      	strb	r2, [r3, #0]
}
 8001672:	bf00      	nop
 8001674:	4618      	mov	r0, r3
 8001676:	3720      	adds	r7, #32
 8001678:	46bd      	mov	sp, r7
 800167a:	bdb0      	pop	{r4, r5, r7, pc}
 800167c:	f3af 8000 	nop.w
 8001680:	66666666 	.word	0x66666666
 8001684:	3fee6666 	.word	0x3fee6666
 8001688:	20004bf8 	.word	0x20004bf8
 800168c:	20004bfc 	.word	0x20004bfc
 8001690:	20004b1c 	.word	0x20004b1c
 8001694:	20004b00 	.word	0x20004b00
 8001698:	20004bac 	.word	0x20004bac
 800169c:	20000098 	.word	0x20000098
 80016a0:	40510000 	.word	0x40510000
 80016a4:	40020000 	.word	0x40020000
 80016a8:	200049e0 	.word	0x200049e0
 80016ac:	20000090 	.word	0x20000090
 80016b0:	20000092 	.word	0x20000092
 80016b4:	20000094 	.word	0x20000094
 80016b8:	78787879 	.word	0x78787879
 80016bc:	0800a6f0 	.word	0x0800a6f0
 80016c0:	20004b08 	.word	0x20004b08
 80016c4:	0800a6fc 	.word	0x0800a6fc

080016c8 <degTurn>:

void degTurn(int mode){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	switch(mode){
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d003      	beq.n	80016de <degTurn+0x16>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d012      	beq.n	8001702 <degTurn+0x3a>
			motorCont(2200,500,'F','F',94*0.57);
			HAL_Delay(50);
			htim1.Instance->CCR4 = 73;
			break;
	}
}
 80016dc:	e02a      	b.n	8001734 <degTurn+0x6c>
			htim1.Instance->CCR4 = 61;
 80016de:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <degTurn+0x88>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	223d      	movs	r2, #61	; 0x3d
 80016e4:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 80016e6:	2064      	movs	r0, #100	; 0x64
 80016e8:	f001 fcb0 	bl	800304c <HAL_Delay>
			motorCont(500,2200,'F','F',97*0.57);
 80016ec:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8001740 <degTurn+0x78>
 80016f0:	2346      	movs	r3, #70	; 0x46
 80016f2:	2246      	movs	r2, #70	; 0x46
 80016f4:	f640 0198 	movw	r1, #2200	; 0x898
 80016f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016fc:	f7ff fe6c 	bl	80013d8 <motorCont>
			break;
 8001700:	e018      	b.n	8001734 <degTurn+0x6c>
			htim1.Instance->CCR4 = 96;
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <degTurn+0x88>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2260      	movs	r2, #96	; 0x60
 8001708:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 800170a:	2064      	movs	r0, #100	; 0x64
 800170c:	f001 fc9e 	bl	800304c <HAL_Delay>
			motorCont(2200,500,'F','F',94*0.57);
 8001710:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8001748 <degTurn+0x80>
 8001714:	2346      	movs	r3, #70	; 0x46
 8001716:	2246      	movs	r2, #70	; 0x46
 8001718:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800171c:	f640 0098 	movw	r0, #2200	; 0x898
 8001720:	f7ff fe5a 	bl	80013d8 <motorCont>
			HAL_Delay(50);
 8001724:	2032      	movs	r0, #50	; 0x32
 8001726:	f001 fc91 	bl	800304c <HAL_Delay>
			htim1.Instance->CCR4 = 73;
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <degTurn+0x88>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2249      	movs	r2, #73	; 0x49
 8001730:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001732:	bf00      	nop
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	f3af 8000 	nop.w
 8001740:	b851eb84 	.word	0xb851eb84
 8001744:	404ba51e 	.word	0x404ba51e
 8001748:	70a3d70a 	.word	0x70a3d70a
 800174c:	404aca3d 	.word	0x404aca3d
 8001750:	20004bb0 	.word	0x20004bb0
 8001754:	00000000 	.word	0x00000000

08001758 <forward>:

void forward(int mode){ //Forward for image recognition
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8001760:	2064      	movs	r0, #100	; 0x64
 8001762:	f001 fc73 	bl	800304c <HAL_Delay>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b09      	cmp	r3, #9
 800176a:	f200 8085 	bhi.w	8001878 <forward+0x120>
 800176e:	a201      	add	r2, pc, #4	; (adr r2, 8001774 <forward+0x1c>)
 8001770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001774:	0800179d 	.word	0x0800179d
 8001778:	080017b3 	.word	0x080017b3
 800177c:	080017c9 	.word	0x080017c9
 8001780:	080017df 	.word	0x080017df
 8001784:	080017f5 	.word	0x080017f5
 8001788:	0800180b 	.word	0x0800180b
 800178c:	08001821 	.word	0x08001821
 8001790:	08001837 	.word	0x08001837
 8001794:	0800184d 	.word	0x0800184d
 8001798:	08001863 	.word	0x08001863
	switch(mode){
	case 0:
			motorCont(1000, 1000, 'F', 'F', 104);break;
 800179c:	ed9f 0b38 	vldr	d0, [pc, #224]	; 8001880 <forward+0x128>
 80017a0:	2346      	movs	r3, #70	; 0x46
 80017a2:	2246      	movs	r2, #70	; 0x46
 80017a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017ac:	f7ff fe14 	bl	80013d8 <motorCont>
 80017b0:	e062      	b.n	8001878 <forward+0x120>
	case 1:
			motorCont(1000, 1000, 'F', 'F', 9);break;
 80017b2:	ed9f 0b35 	vldr	d0, [pc, #212]	; 8001888 <forward+0x130>
 80017b6:	2346      	movs	r3, #70	; 0x46
 80017b8:	2246      	movs	r2, #70	; 0x46
 80017ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017c2:	f7ff fe09 	bl	80013d8 <motorCont>
 80017c6:	e057      	b.n	8001878 <forward+0x120>
	case 2:
			motorCont(1000, 1000, 'F', 'F', 19.5);break;
 80017c8:	ed9f 0b31 	vldr	d0, [pc, #196]	; 8001890 <forward+0x138>
 80017cc:	2346      	movs	r3, #70	; 0x46
 80017ce:	2246      	movs	r2, #70	; 0x46
 80017d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017d8:	f7ff fdfe 	bl	80013d8 <motorCont>
 80017dc:	e04c      	b.n	8001878 <forward+0x120>
	case 3:
			motorCont(1000, 1000, 'F', 'F', 29);break;
 80017de:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 8001898 <forward+0x140>
 80017e2:	2346      	movs	r3, #70	; 0x46
 80017e4:	2246      	movs	r2, #70	; 0x46
 80017e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017ee:	f7ff fdf3 	bl	80013d8 <motorCont>
 80017f2:	e041      	b.n	8001878 <forward+0x120>
	case 4:
			motorCont(1000, 1000, 'F', 'F', 41);break;
 80017f4:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 80018a0 <forward+0x148>
 80017f8:	2346      	movs	r3, #70	; 0x46
 80017fa:	2246      	movs	r2, #70	; 0x46
 80017fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001800:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001804:	f7ff fde8 	bl	80013d8 <motorCont>
 8001808:	e036      	b.n	8001878 <forward+0x120>
	case 5:
			motorCont(1000, 1000, 'F', 'F', 51);break;
 800180a:	ed9f 0b27 	vldr	d0, [pc, #156]	; 80018a8 <forward+0x150>
 800180e:	2346      	movs	r3, #70	; 0x46
 8001810:	2246      	movs	r2, #70	; 0x46
 8001812:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001816:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800181a:	f7ff fddd 	bl	80013d8 <motorCont>
 800181e:	e02b      	b.n	8001878 <forward+0x120>
	case 6:
			motorCont(1000, 1000, 'F', 'F', 62);break;
 8001820:	ed9f 0b23 	vldr	d0, [pc, #140]	; 80018b0 <forward+0x158>
 8001824:	2346      	movs	r3, #70	; 0x46
 8001826:	2246      	movs	r2, #70	; 0x46
 8001828:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800182c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001830:	f7ff fdd2 	bl	80013d8 <motorCont>
 8001834:	e020      	b.n	8001878 <forward+0x120>
	case 7:
			motorCont(1000, 1000, 'F', 'F', 73);break;
 8001836:	ed9f 0b20 	vldr	d0, [pc, #128]	; 80018b8 <forward+0x160>
 800183a:	2346      	movs	r3, #70	; 0x46
 800183c:	2246      	movs	r2, #70	; 0x46
 800183e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001842:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001846:	f7ff fdc7 	bl	80013d8 <motorCont>
 800184a:	e015      	b.n	8001878 <forward+0x120>
	case 8:
			motorCont(1000, 1000, 'F', 'F', 84);break;
 800184c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80018c0 <forward+0x168>
 8001850:	2346      	movs	r3, #70	; 0x46
 8001852:	2246      	movs	r2, #70	; 0x46
 8001854:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001858:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800185c:	f7ff fdbc 	bl	80013d8 <motorCont>
 8001860:	e00a      	b.n	8001878 <forward+0x120>
	case 9:
			motorCont(1000, 1000, 'F', 'F', 94);break;
 8001862:	ed9f 0b19 	vldr	d0, [pc, #100]	; 80018c8 <forward+0x170>
 8001866:	2346      	movs	r3, #70	; 0x46
 8001868:	2246      	movs	r2, #70	; 0x46
 800186a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800186e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001872:	f7ff fdb1 	bl	80013d8 <motorCont>
 8001876:	bf00      	nop
	}
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	00000000 	.word	0x00000000
 8001884:	405a0000 	.word	0x405a0000
 8001888:	00000000 	.word	0x00000000
 800188c:	40220000 	.word	0x40220000
 8001890:	00000000 	.word	0x00000000
 8001894:	40338000 	.word	0x40338000
 8001898:	00000000 	.word	0x00000000
 800189c:	403d0000 	.word	0x403d0000
 80018a0:	00000000 	.word	0x00000000
 80018a4:	40448000 	.word	0x40448000
 80018a8:	00000000 	.word	0x00000000
 80018ac:	40498000 	.word	0x40498000
 80018b0:	00000000 	.word	0x00000000
 80018b4:	404f0000 	.word	0x404f0000
 80018b8:	00000000 	.word	0x00000000
 80018bc:	40524000 	.word	0x40524000
 80018c0:	00000000 	.word	0x00000000
 80018c4:	40550000 	.word	0x40550000
 80018c8:	00000000 	.word	0x00000000
 80018cc:	40578000 	.word	0x40578000

080018d0 <reverse>:

void reverse(int mode){//Reverse for image recognition
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80018d8:	2064      	movs	r0, #100	; 0x64
 80018da:	f001 fbb7 	bl	800304c <HAL_Delay>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b09      	cmp	r3, #9
 80018e2:	f200 8085 	bhi.w	80019f0 <reverse+0x120>
 80018e6:	a201      	add	r2, pc, #4	; (adr r2, 80018ec <reverse+0x1c>)
 80018e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ec:	08001915 	.word	0x08001915
 80018f0:	0800192b 	.word	0x0800192b
 80018f4:	08001941 	.word	0x08001941
 80018f8:	08001957 	.word	0x08001957
 80018fc:	0800196d 	.word	0x0800196d
 8001900:	08001983 	.word	0x08001983
 8001904:	08001999 	.word	0x08001999
 8001908:	080019af 	.word	0x080019af
 800190c:	080019c5 	.word	0x080019c5
 8001910:	080019db 	.word	0x080019db
	switch(mode){
	case 0:
			motorCont(1000, 1000, 'R', 'R', 104);break;
 8001914:	ed9f 0b38 	vldr	d0, [pc, #224]	; 80019f8 <reverse+0x128>
 8001918:	2352      	movs	r3, #82	; 0x52
 800191a:	2252      	movs	r2, #82	; 0x52
 800191c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001920:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001924:	f7ff fd58 	bl	80013d8 <motorCont>
 8001928:	e062      	b.n	80019f0 <reverse+0x120>
	case 1:
			motorCont(1000, 1000,'R', 'R', 8.5);break;
 800192a:	ed9f 0b35 	vldr	d0, [pc, #212]	; 8001a00 <reverse+0x130>
 800192e:	2352      	movs	r3, #82	; 0x52
 8001930:	2252      	movs	r2, #82	; 0x52
 8001932:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001936:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800193a:	f7ff fd4d 	bl	80013d8 <motorCont>
 800193e:	e057      	b.n	80019f0 <reverse+0x120>
	case 2:
			motorCont(1000, 1000,'R', 'R', 19.5);break;
 8001940:	ed9f 0b31 	vldr	d0, [pc, #196]	; 8001a08 <reverse+0x138>
 8001944:	2352      	movs	r3, #82	; 0x52
 8001946:	2252      	movs	r2, #82	; 0x52
 8001948:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800194c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001950:	f7ff fd42 	bl	80013d8 <motorCont>
 8001954:	e04c      	b.n	80019f0 <reverse+0x120>
	case 3:
			motorCont(1000, 1000, 'R', 'R', 29);break;
 8001956:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 8001a10 <reverse+0x140>
 800195a:	2352      	movs	r3, #82	; 0x52
 800195c:	2252      	movs	r2, #82	; 0x52
 800195e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001962:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001966:	f7ff fd37 	bl	80013d8 <motorCont>
 800196a:	e041      	b.n	80019f0 <reverse+0x120>
	case 4:
			motorCont(1000, 1000, 'R', 'R', 41);break;
 800196c:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8001a18 <reverse+0x148>
 8001970:	2352      	movs	r3, #82	; 0x52
 8001972:	2252      	movs	r2, #82	; 0x52
 8001974:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001978:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800197c:	f7ff fd2c 	bl	80013d8 <motorCont>
 8001980:	e036      	b.n	80019f0 <reverse+0x120>
	case 5:
			motorCont(1000, 1000,'R', 'R', 51);break;
 8001982:	ed9f 0b27 	vldr	d0, [pc, #156]	; 8001a20 <reverse+0x150>
 8001986:	2352      	movs	r3, #82	; 0x52
 8001988:	2252      	movs	r2, #82	; 0x52
 800198a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800198e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001992:	f7ff fd21 	bl	80013d8 <motorCont>
 8001996:	e02b      	b.n	80019f0 <reverse+0x120>
	case 6:
			motorCont(1000, 1000, 'R', 'R', 62);break;
 8001998:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8001a28 <reverse+0x158>
 800199c:	2352      	movs	r3, #82	; 0x52
 800199e:	2252      	movs	r2, #82	; 0x52
 80019a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019a8:	f7ff fd16 	bl	80013d8 <motorCont>
 80019ac:	e020      	b.n	80019f0 <reverse+0x120>
	case 7:
			motorCont(1000, 1000, 'R', 'R', 73);break;
 80019ae:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8001a30 <reverse+0x160>
 80019b2:	2352      	movs	r3, #82	; 0x52
 80019b4:	2252      	movs	r2, #82	; 0x52
 80019b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019be:	f7ff fd0b 	bl	80013d8 <motorCont>
 80019c2:	e015      	b.n	80019f0 <reverse+0x120>
	case 8:
			motorCont(1000, 1000, 'R', 'R', 84);break;
 80019c4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8001a38 <reverse+0x168>
 80019c8:	2352      	movs	r3, #82	; 0x52
 80019ca:	2252      	movs	r2, #82	; 0x52
 80019cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019d4:	f7ff fd00 	bl	80013d8 <motorCont>
 80019d8:	e00a      	b.n	80019f0 <reverse+0x120>
	case 9:
			motorCont(1000, 1000, 'R', 'R', 94);break;
 80019da:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8001a40 <reverse+0x170>
 80019de:	2352      	movs	r3, #82	; 0x52
 80019e0:	2252      	movs	r2, #82	; 0x52
 80019e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019ea:	f7ff fcf5 	bl	80013d8 <motorCont>
 80019ee:	bf00      	nop

	}
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	00000000 	.word	0x00000000
 80019fc:	405a0000 	.word	0x405a0000
 8001a00:	00000000 	.word	0x00000000
 8001a04:	40210000 	.word	0x40210000
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	40338000 	.word	0x40338000
 8001a10:	00000000 	.word	0x00000000
 8001a14:	403d0000 	.word	0x403d0000
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	40448000 	.word	0x40448000
 8001a20:	00000000 	.word	0x00000000
 8001a24:	40498000 	.word	0x40498000
 8001a28:	00000000 	.word	0x00000000
 8001a2c:	404f0000 	.word	0x404f0000
 8001a30:	00000000 	.word	0x00000000
 8001a34:	40524000 	.word	0x40524000
 8001a38:	00000000 	.word	0x00000000
 8001a3c:	40550000 	.word	0x40550000
 8001a40:	00000000 	.word	0x00000000
 8001a44:	40578000 	.word	0x40578000

08001a48 <spotTurn>:

void spotTurn(int mode){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	switch(mode){
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d003      	beq.n	8001a5e <spotTurn+0x16>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d03e      	beq.n	8001ada <spotTurn+0x92>
		motorCont(1500, 500, 'F', 'F', 5.5);
		HAL_Delay(50);
		htim1.Instance->CCR4 = 73;
		break;
	}
}
 8001a5c:	e07b      	b.n	8001b56 <spotTurn+0x10e>
		htim1.Instance->CCR4 = 56;
 8001a5e:	4b48      	ldr	r3, [pc, #288]	; (8001b80 <spotTurn+0x138>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2238      	movs	r2, #56	; 0x38
 8001a64:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(500);
 8001a66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a6a:	f001 faef 	bl	800304c <HAL_Delay>
		motorCont(500, 1500, 'F', 'F', 21);
 8001a6e:	ed9f 0b3c 	vldr	d0, [pc, #240]	; 8001b60 <spotTurn+0x118>
 8001a72:	2346      	movs	r3, #70	; 0x46
 8001a74:	2246      	movs	r2, #70	; 0x46
 8001a76:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001a7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a7e:	f7ff fcab 	bl	80013d8 <motorCont>
		htim1.Instance->CCR4 = 104;
 8001a82:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <spotTurn+0x138>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2268      	movs	r2, #104	; 0x68
 8001a88:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(500);
 8001a8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a8e:	f001 fadd 	bl	800304c <HAL_Delay>
		motorCont(1500, 500, 'R', 'R', 21);
 8001a92:	ed9f 0b33 	vldr	d0, [pc, #204]	; 8001b60 <spotTurn+0x118>
 8001a96:	2352      	movs	r3, #82	; 0x52
 8001a98:	2252      	movs	r2, #82	; 0x52
 8001a9a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001a9e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001aa2:	f7ff fc99 	bl	80013d8 <motorCont>
		htim1.Instance->CCR4 = 56;
 8001aa6:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <spotTurn+0x138>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2238      	movs	r2, #56	; 0x38
 8001aac:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(500);
 8001aae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ab2:	f001 facb 	bl	800304c <HAL_Delay>
		motorCont(500, 1500, 'F', 'F', 5.47);
 8001ab6:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8001b68 <spotTurn+0x120>
 8001aba:	2346      	movs	r3, #70	; 0x46
 8001abc:	2246      	movs	r2, #70	; 0x46
 8001abe:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001ac2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ac6:	f7ff fc87 	bl	80013d8 <motorCont>
		HAL_Delay(50);
 8001aca:	2032      	movs	r0, #50	; 0x32
 8001acc:	f001 fabe 	bl	800304c <HAL_Delay>
		htim1.Instance->CCR4 = 76;
 8001ad0:	4b2b      	ldr	r3, [pc, #172]	; (8001b80 <spotTurn+0x138>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	224c      	movs	r2, #76	; 0x4c
 8001ad6:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8001ad8:	e03d      	b.n	8001b56 <spotTurn+0x10e>
		htim1.Instance->CCR4 = 104;
 8001ada:	4b29      	ldr	r3, [pc, #164]	; (8001b80 <spotTurn+0x138>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2268      	movs	r2, #104	; 0x68
 8001ae0:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(500);
 8001ae2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ae6:	f001 fab1 	bl	800304c <HAL_Delay>
		motorCont(1500, 500, 'F', 'F', 21);
 8001aea:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8001b60 <spotTurn+0x118>
 8001aee:	2346      	movs	r3, #70	; 0x46
 8001af0:	2246      	movs	r2, #70	; 0x46
 8001af2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001af6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001afa:	f7ff fc6d 	bl	80013d8 <motorCont>
		htim1.Instance->CCR4 = 56;
 8001afe:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <spotTurn+0x138>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2238      	movs	r2, #56	; 0x38
 8001b04:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(500);
 8001b06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b0a:	f001 fa9f 	bl	800304c <HAL_Delay>
		motorCont(500, 1500, 'R', 'R', 20);
 8001b0e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8001b70 <spotTurn+0x128>
 8001b12:	2352      	movs	r3, #82	; 0x52
 8001b14:	2252      	movs	r2, #82	; 0x52
 8001b16:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001b1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b1e:	f7ff fc5b 	bl	80013d8 <motorCont>
		htim1.Instance->CCR4 = 104;
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <spotTurn+0x138>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2268      	movs	r2, #104	; 0x68
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(500);
 8001b2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b2e:	f001 fa8d 	bl	800304c <HAL_Delay>
		motorCont(1500, 500, 'F', 'F', 5.5);
 8001b32:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8001b78 <spotTurn+0x130>
 8001b36:	2346      	movs	r3, #70	; 0x46
 8001b38:	2246      	movs	r2, #70	; 0x46
 8001b3a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b3e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001b42:	f7ff fc49 	bl	80013d8 <motorCont>
		HAL_Delay(50);
 8001b46:	2032      	movs	r0, #50	; 0x32
 8001b48:	f001 fa80 	bl	800304c <HAL_Delay>
		htim1.Instance->CCR4 = 73;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <spotTurn+0x138>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2249      	movs	r2, #73	; 0x49
 8001b52:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8001b54:	bf00      	nop
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	00000000 	.word	0x00000000
 8001b64:	40350000 	.word	0x40350000
 8001b68:	ae147ae1 	.word	0xae147ae1
 8001b6c:	4015e147 	.word	0x4015e147
 8001b70:	00000000 	.word	0x00000000
 8001b74:	40340000 	.word	0x40340000
 8001b78:	00000000 	.word	0x00000000
 8001b7c:	40160000 	.word	0x40160000
 8001b80:	20004bb0 	.word	0x20004bb0

08001b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b88:	f001 f9ee 	bl	8002f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b8c:	f000 f844 	bl	8001c18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b90:	f000 fb96 	bl	80022c0 <MX_GPIO_Init>
  MX_TIM8_Init();
 8001b94:	f000 fade 	bl	8002154 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001b98:	f000 f9e0 	bl	8001f5c <MX_TIM2_Init>
  MX_TIM1_Init();
 8001b9c:	f000 f93e 	bl	8001e1c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001ba0:	f000 fa30 	bl	8002004 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001ba4:	f000 fa82 	bl	80020ac <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001ba8:	f000 fb60 	bl	800226c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001bac:	f000 f892 	bl	8001cd4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001bb0:	f000 f8e2 	bl	8001d78 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	480f      	ldr	r0, [pc, #60]	; (8001bf4 <main+0x70>)
 8001bb8:	f002 fe4e 	bl	8004858 <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 1);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	490e      	ldr	r1, [pc, #56]	; (8001bf8 <main+0x74>)
 8001bc0:	480e      	ldr	r0, [pc, #56]	; (8001bfc <main+0x78>)
 8001bc2:	f004 fa7f 	bl	80060c4 <HAL_UART_Receive_IT>
  OLED_Init();
 8001bc6:	f008 f88f 	bl	8009ce8 <OLED_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001bca:	f005 f997 	bl	8006efc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LED_Toggle */
  LED_ToggleHandle = osThreadNew(StartDefaultTask, NULL, &LED_Toggle_attributes);
 8001bce:	4a0c      	ldr	r2, [pc, #48]	; (8001c00 <main+0x7c>)
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	480c      	ldr	r0, [pc, #48]	; (8001c04 <main+0x80>)
 8001bd4:	f005 f9dc 	bl	8006f90 <osThreadNew>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4a0b      	ldr	r2, [pc, #44]	; (8001c08 <main+0x84>)
 8001bdc:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 8001bde:	4a0b      	ldr	r2, [pc, #44]	; (8001c0c <main+0x88>)
 8001be0:	2100      	movs	r1, #0
 8001be2:	480b      	ldr	r0, [pc, #44]	; (8001c10 <main+0x8c>)
 8001be4:	f005 f9d4 	bl	8006f90 <osThreadNew>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <main+0x90>)
 8001bec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001bee:	f005 f9a9 	bl	8006f44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <main+0x6e>
 8001bf4:	20004a28 	.word	0x20004a28
 8001bf8:	20004bf8 	.word	0x20004bf8
 8001bfc:	20004a70 	.word	0x20004a70
 8001c00:	0800a774 	.word	0x0800a774
 8001c04:	08002439 	.word	0x08002439
 8001c08:	20004afc 	.word	0x20004afc
 8001c0c:	0800a798 	.word	0x0800a798
 8001c10:	08002511 	.word	0x08002511
 8001c14:	20004b04 	.word	0x20004b04

08001c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b094      	sub	sp, #80	; 0x50
 8001c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c1e:	f107 0320 	add.w	r3, r7, #32
 8001c22:	2230      	movs	r2, #48	; 0x30
 8001c24:	2100      	movs	r1, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f008 f922 	bl	8009e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <SystemClock_Config+0xb4>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	4a21      	ldr	r2, [pc, #132]	; (8001ccc <SystemClock_Config+0xb4>)
 8001c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <SystemClock_Config+0xb4>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c58:	2300      	movs	r3, #0
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <SystemClock_Config+0xb8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <SystemClock_Config+0xb8>)
 8001c62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <SystemClock_Config+0xb8>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c74:	2302      	movs	r3, #2
 8001c76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c7c:	2310      	movs	r3, #16
 8001c7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c84:	f107 0320 	add.w	r3, r7, #32
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f001 ffe7 	bl	8003c5c <HAL_RCC_OscConfig>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001c94:	f000 fe3a 	bl	800290c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c98:	230f      	movs	r3, #15
 8001c9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f002 fa4a 	bl	800414c <HAL_RCC_ClockConfig>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001cbe:	f000 fe25 	bl	800290c <Error_Handler>
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	3750      	adds	r7, #80	; 0x50
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40007000 	.word	0x40007000

08001cd4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cda:	463b      	mov	r3, r7
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ce6:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001ce8:	4a21      	ldr	r2, [pc, #132]	; (8001d70 <MX_ADC1_Init+0x9c>)
 8001cea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001cec:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cf2:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001cf8:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d04:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d0c:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d12:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001d14:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <MX_ADC1_Init+0xa0>)
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d18:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d1e:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d32:	480e      	ldr	r0, [pc, #56]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001d34:	f001 f9ae 	bl	8003094 <HAL_ADC_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001d3e:	f000 fde5 	bl	800290c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001d42:	230b      	movs	r3, #11
 8001d44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d46:	2301      	movs	r3, #1
 8001d48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d4e:	463b      	mov	r3, r7
 8001d50:	4619      	mov	r1, r3
 8001d52:	4806      	ldr	r0, [pc, #24]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001d54:	f001 f9e2 	bl	800311c <HAL_ADC_ConfigChannel>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001d5e:	f000 fdd5 	bl	800290c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20004b64 	.word	0x20004b64
 8001d70:	40012000 	.word	0x40012000
 8001d74:	0f000001 	.word	0x0f000001

08001d78 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d7e:	463b      	mov	r3, r7
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001d8a:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001d8c:	4a21      	ldr	r2, [pc, #132]	; (8001e14 <MX_ADC2_Init+0x9c>)
 8001d8e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d90:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001d96:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001d9c:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001da2:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001da8:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001db0:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001db6:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001db8:	4a17      	ldr	r2, [pc, #92]	; (8001e18 <MX_ADC2_Init+0xa0>)
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001dc2:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001dd6:	480e      	ldr	r0, [pc, #56]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001dd8:	f001 f95c 	bl	8003094 <HAL_ADC_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001de2:	f000 fd93 	bl	800290c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001de6:	230c      	movs	r3, #12
 8001de8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001dea:	2301      	movs	r3, #1
 8001dec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001dee:	2300      	movs	r3, #0
 8001df0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001df2:	463b      	mov	r3, r7
 8001df4:	4619      	mov	r1, r3
 8001df6:	4806      	ldr	r0, [pc, #24]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001df8:	f001 f990 	bl	800311c <HAL_ADC_ConfigChannel>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001e02:	f000 fd83 	bl	800290c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20004ab4 	.word	0x20004ab4
 8001e14:	40012100 	.word	0x40012100
 8001e18:	0f000001 	.word	0x0f000001

08001e1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b096      	sub	sp, #88	; 0x58
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	60da      	str	r2, [r3, #12]
 8001e48:	611a      	str	r2, [r3, #16]
 8001e4a:	615a      	str	r2, [r3, #20]
 8001e4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	2220      	movs	r2, #32
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f008 f80b 	bl	8009e70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e5a:	4b3e      	ldr	r3, [pc, #248]	; (8001f54 <MX_TIM1_Init+0x138>)
 8001e5c:	4a3e      	ldr	r2, [pc, #248]	; (8001f58 <MX_TIM1_Init+0x13c>)
 8001e5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320;
 8001e60:	4b3c      	ldr	r3, [pc, #240]	; (8001f54 <MX_TIM1_Init+0x138>)
 8001e62:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e68:	4b3a      	ldr	r3, [pc, #232]	; (8001f54 <MX_TIM1_Init+0x138>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001e6e:	4b39      	ldr	r3, [pc, #228]	; (8001f54 <MX_TIM1_Init+0x138>)
 8001e70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e76:	4b37      	ldr	r3, [pc, #220]	; (8001f54 <MX_TIM1_Init+0x138>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e7c:	4b35      	ldr	r3, [pc, #212]	; (8001f54 <MX_TIM1_Init+0x138>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e82:	4b34      	ldr	r3, [pc, #208]	; (8001f54 <MX_TIM1_Init+0x138>)
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e88:	4832      	ldr	r0, [pc, #200]	; (8001f54 <MX_TIM1_Init+0x138>)
 8001e8a:	f002 fb2f 	bl	80044ec <HAL_TIM_Base_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001e94:	f000 fd3a 	bl	800290c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e9c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	482b      	ldr	r0, [pc, #172]	; (8001f54 <MX_TIM1_Init+0x138>)
 8001ea6:	f003 f999 	bl	80051dc <HAL_TIM_ConfigClockSource>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001eb0:	f000 fd2c 	bl	800290c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001eb4:	4827      	ldr	r0, [pc, #156]	; (8001f54 <MX_TIM1_Init+0x138>)
 8001eb6:	f002 fb68 	bl	800458a <HAL_TIM_PWM_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001ec0:	f000 fd24 	bl	800290c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ecc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4820      	ldr	r0, [pc, #128]	; (8001f54 <MX_TIM1_Init+0x138>)
 8001ed4:	f003 fef0 	bl	8005cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001ede:	f000 fd15 	bl	800290c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ee2:	2360      	movs	r3, #96	; 0x60
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eea:	2300      	movs	r3, #0
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efe:	220c      	movs	r2, #12
 8001f00:	4619      	mov	r1, r3
 8001f02:	4814      	ldr	r0, [pc, #80]	; (8001f54 <MX_TIM1_Init+0x138>)
 8001f04:	f003 f8a8 	bl	8005058 <HAL_TIM_PWM_ConfigChannel>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001f0e:	f000 fcfd 	bl	800290c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f2a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	4619      	mov	r1, r3
 8001f34:	4807      	ldr	r0, [pc, #28]	; (8001f54 <MX_TIM1_Init+0x138>)
 8001f36:	f003 ff3b 	bl	8005db0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001f40:	f000 fce4 	bl	800290c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f44:	4803      	ldr	r0, [pc, #12]	; (8001f54 <MX_TIM1_Init+0x138>)
 8001f46:	f000 fedb 	bl	8002d00 <HAL_TIM_MspPostInit>

}
 8001f4a:	bf00      	nop
 8001f4c:	3758      	adds	r7, #88	; 0x58
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20004bb0 	.word	0x20004bb0
 8001f58:	40010000 	.word	0x40010000

08001f5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08c      	sub	sp, #48	; 0x30
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f62:	f107 030c 	add.w	r3, r7, #12
 8001f66:	2224      	movs	r2, #36	; 0x24
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f007 ff80 	bl	8009e70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f78:	4b21      	ldr	r3, [pc, #132]	; (8002000 <MX_TIM2_Init+0xa4>)
 8001f7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f80:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <MX_TIM2_Init+0xa4>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f86:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <MX_TIM2_Init+0xa4>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001f8c:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <MX_TIM2_Init+0xa4>)
 8001f8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f94:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <MX_TIM2_Init+0xa4>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f9a:	4b19      	ldr	r3, [pc, #100]	; (8002000 <MX_TIM2_Init+0xa4>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fac:	2300      	movs	r3, #0
 8001fae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001fb0:	230a      	movs	r3, #10
 8001fb2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001fc0:	230a      	movs	r3, #10
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001fc4:	f107 030c 	add.w	r3, r7, #12
 8001fc8:	4619      	mov	r1, r3
 8001fca:	480d      	ldr	r0, [pc, #52]	; (8002000 <MX_TIM2_Init+0xa4>)
 8001fcc:	f002 fd6c 	bl	8004aa8 <HAL_TIM_Encoder_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001fd6:	f000 fc99 	bl	800290c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4806      	ldr	r0, [pc, #24]	; (8002000 <MX_TIM2_Init+0xa4>)
 8001fe8:	f003 fe66 	bl	8005cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001ff2:	f000 fc8b 	bl	800290c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	3730      	adds	r7, #48	; 0x30
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20004bfc 	.word	0x20004bfc

08002004 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08c      	sub	sp, #48	; 0x30
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800200a:	f107 030c 	add.w	r3, r7, #12
 800200e:	2224      	movs	r2, #36	; 0x24
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f007 ff2c 	bl	8009e70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002018:	1d3b      	adds	r3, r7, #4
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002020:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <MX_TIM3_Init+0xa0>)
 8002022:	4a21      	ldr	r2, [pc, #132]	; (80020a8 <MX_TIM3_Init+0xa4>)
 8002024:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002026:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <MX_TIM3_Init+0xa0>)
 8002028:	2200      	movs	r2, #0
 800202a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800202c:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <MX_TIM3_Init+0xa0>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002032:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <MX_TIM3_Init+0xa0>)
 8002034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002038:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800203a:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <MX_TIM3_Init+0xa0>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002040:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <MX_TIM3_Init+0xa0>)
 8002042:	2200      	movs	r2, #0
 8002044:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002046:	2303      	movs	r3, #3
 8002048:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800204e:	2301      	movs	r3, #1
 8002050:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002056:	230a      	movs	r3, #10
 8002058:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800205a:	2300      	movs	r3, #0
 800205c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800205e:	2301      	movs	r3, #1
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002062:	2300      	movs	r3, #0
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002066:	230a      	movs	r3, #10
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800206a:	f107 030c 	add.w	r3, r7, #12
 800206e:	4619      	mov	r1, r3
 8002070:	480c      	ldr	r0, [pc, #48]	; (80020a4 <MX_TIM3_Init+0xa0>)
 8002072:	f002 fd19 	bl	8004aa8 <HAL_TIM_Encoder_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800207c:	f000 fc46 	bl	800290c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002080:	2300      	movs	r3, #0
 8002082:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	4619      	mov	r1, r3
 800208c:	4805      	ldr	r0, [pc, #20]	; (80020a4 <MX_TIM3_Init+0xa0>)
 800208e:	f003 fe13 	bl	8005cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002098:	f000 fc38 	bl	800290c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800209c:	bf00      	nop
 800209e:	3730      	adds	r7, #48	; 0x30
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20004b1c 	.word	0x20004b1c
 80020a8:	40000400 	.word	0x40000400

080020ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b2:	f107 0310 	add.w	r3, r7, #16
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80020bc:	463b      	mov	r3, r7
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020c8:	4b20      	ldr	r3, [pc, #128]	; (800214c <MX_TIM4_Init+0xa0>)
 80020ca:	4a21      	ldr	r2, [pc, #132]	; (8002150 <MX_TIM4_Init+0xa4>)
 80020cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 80020ce:	4b1f      	ldr	r3, [pc, #124]	; (800214c <MX_TIM4_Init+0xa0>)
 80020d0:	220f      	movs	r2, #15
 80020d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d4:	4b1d      	ldr	r3, [pc, #116]	; (800214c <MX_TIM4_Init+0xa0>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 80020da:	4b1c      	ldr	r3, [pc, #112]	; (800214c <MX_TIM4_Init+0xa0>)
 80020dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80020e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e2:	4b1a      	ldr	r3, [pc, #104]	; (800214c <MX_TIM4_Init+0xa0>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e8:	4b18      	ldr	r3, [pc, #96]	; (800214c <MX_TIM4_Init+0xa0>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80020ee:	4817      	ldr	r0, [pc, #92]	; (800214c <MX_TIM4_Init+0xa0>)
 80020f0:	f002 fb62 	bl	80047b8 <HAL_TIM_IC_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80020fa:	f000 fc07 	bl	800290c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002106:	f107 0310 	add.w	r3, r7, #16
 800210a:	4619      	mov	r1, r3
 800210c:	480f      	ldr	r0, [pc, #60]	; (800214c <MX_TIM4_Init+0xa0>)
 800210e:	f003 fdd3 	bl	8005cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002118:	f000 fbf8 	bl	800290c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800211c:	2300      	movs	r3, #0
 800211e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002120:	2301      	movs	r3, #1
 8002122:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800212c:	463b      	mov	r3, r7
 800212e:	2200      	movs	r2, #0
 8002130:	4619      	mov	r1, r3
 8002132:	4806      	ldr	r0, [pc, #24]	; (800214c <MX_TIM4_Init+0xa0>)
 8002134:	f002 fef4 	bl	8004f20 <HAL_TIM_IC_ConfigChannel>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800213e:	f000 fbe5 	bl	800290c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002142:	bf00      	nop
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20004a28 	.word	0x20004a28
 8002150:	40000800 	.word	0x40000800

08002154 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b092      	sub	sp, #72	; 0x48
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800215a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
 8002174:	615a      	str	r2, [r3, #20]
 8002176:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	2220      	movs	r2, #32
 800217c:	2100      	movs	r1, #0
 800217e:	4618      	mov	r0, r3
 8002180:	f007 fe76 	bl	8009e70 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002184:	4b37      	ldr	r3, [pc, #220]	; (8002264 <MX_TIM8_Init+0x110>)
 8002186:	4a38      	ldr	r2, [pc, #224]	; (8002268 <MX_TIM8_Init+0x114>)
 8002188:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800218a:	4b36      	ldr	r3, [pc, #216]	; (8002264 <MX_TIM8_Init+0x110>)
 800218c:	2200      	movs	r2, #0
 800218e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002190:	4b34      	ldr	r3, [pc, #208]	; (8002264 <MX_TIM8_Init+0x110>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8002196:	4b33      	ldr	r3, [pc, #204]	; (8002264 <MX_TIM8_Init+0x110>)
 8002198:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800219c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800219e:	4b31      	ldr	r3, [pc, #196]	; (8002264 <MX_TIM8_Init+0x110>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80021a4:	4b2f      	ldr	r3, [pc, #188]	; (8002264 <MX_TIM8_Init+0x110>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021aa:	4b2e      	ldr	r3, [pc, #184]	; (8002264 <MX_TIM8_Init+0x110>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80021b0:	482c      	ldr	r0, [pc, #176]	; (8002264 <MX_TIM8_Init+0x110>)
 80021b2:	f002 f9ea 	bl	800458a <HAL_TIM_PWM_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80021bc:	f000 fba6 	bl	800290c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c0:	2300      	movs	r3, #0
 80021c2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80021c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021cc:	4619      	mov	r1, r3
 80021ce:	4825      	ldr	r0, [pc, #148]	; (8002264 <MX_TIM8_Init+0x110>)
 80021d0:	f003 fd72 	bl	8005cb8 <HAL_TIMEx_MasterConfigSynchronization>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80021da:	f000 fb97 	bl	800290c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021de:	2360      	movs	r3, #96	; 0x60
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021e6:	2300      	movs	r3, #0
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021ea:	2300      	movs	r3, #0
 80021ec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021f2:	2300      	movs	r3, #0
 80021f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fe:	2200      	movs	r2, #0
 8002200:	4619      	mov	r1, r3
 8002202:	4818      	ldr	r0, [pc, #96]	; (8002264 <MX_TIM8_Init+0x110>)
 8002204:	f002 ff28 	bl	8005058 <HAL_TIM_PWM_ConfigChannel>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800220e:	f000 fb7d 	bl	800290c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002216:	2204      	movs	r2, #4
 8002218:	4619      	mov	r1, r3
 800221a:	4812      	ldr	r0, [pc, #72]	; (8002264 <MX_TIM8_Init+0x110>)
 800221c:	f002 ff1c 	bl	8005058 <HAL_TIM_PWM_ConfigChannel>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8002226:	f000 fb71 	bl	800290c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800223e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002242:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002244:	2300      	movs	r3, #0
 8002246:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	4619      	mov	r1, r3
 800224c:	4805      	ldr	r0, [pc, #20]	; (8002264 <MX_TIM8_Init+0x110>)
 800224e:	f003 fdaf 	bl	8005db0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8002258:	f000 fb58 	bl	800290c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800225c:	bf00      	nop
 800225e:	3748      	adds	r7, #72	; 0x48
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	200049e0 	.word	0x200049e0
 8002268:	40010400 	.word	0x40010400

0800226c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <MX_USART3_UART_Init+0x4c>)
 8002272:	4a12      	ldr	r2, [pc, #72]	; (80022bc <MX_USART3_UART_Init+0x50>)
 8002274:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <MX_USART3_UART_Init+0x4c>)
 8002278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800227c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <MX_USART3_UART_Init+0x4c>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <MX_USART3_UART_Init+0x4c>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <MX_USART3_UART_Init+0x4c>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <MX_USART3_UART_Init+0x4c>)
 8002292:	220c      	movs	r2, #12
 8002294:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <MX_USART3_UART_Init+0x4c>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <MX_USART3_UART_Init+0x4c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022a2:	4805      	ldr	r0, [pc, #20]	; (80022b8 <MX_USART3_UART_Init+0x4c>)
 80022a4:	f003 fdea 	bl	8005e7c <HAL_UART_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80022ae:	f000 fb2d 	bl	800290c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20004a70 	.word	0x20004a70
 80022bc:	40004800 	.word	0x40004800

080022c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	60da      	str	r2, [r3, #12]
 80022d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	4b49      	ldr	r3, [pc, #292]	; (8002400 <MX_GPIO_Init+0x140>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a48      	ldr	r2, [pc, #288]	; (8002400 <MX_GPIO_Init+0x140>)
 80022e0:	f043 0310 	orr.w	r3, r3, #16
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b46      	ldr	r3, [pc, #280]	; (8002400 <MX_GPIO_Init+0x140>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b42      	ldr	r3, [pc, #264]	; (8002400 <MX_GPIO_Init+0x140>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a41      	ldr	r2, [pc, #260]	; (8002400 <MX_GPIO_Init+0x140>)
 80022fc:	f043 0304 	orr.w	r3, r3, #4
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b3f      	ldr	r3, [pc, #252]	; (8002400 <MX_GPIO_Init+0x140>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	4b3b      	ldr	r3, [pc, #236]	; (8002400 <MX_GPIO_Init+0x140>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a3a      	ldr	r2, [pc, #232]	; (8002400 <MX_GPIO_Init+0x140>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b38      	ldr	r3, [pc, #224]	; (8002400 <MX_GPIO_Init+0x140>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	4b34      	ldr	r3, [pc, #208]	; (8002400 <MX_GPIO_Init+0x140>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a33      	ldr	r2, [pc, #204]	; (8002400 <MX_GPIO_Init+0x140>)
 8002334:	f043 0308 	orr.w	r3, r3, #8
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b31      	ldr	r3, [pc, #196]	; (8002400 <MX_GPIO_Init+0x140>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	607b      	str	r3, [r7, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	603b      	str	r3, [r7, #0]
 800234a:	4b2d      	ldr	r3, [pc, #180]	; (8002400 <MX_GPIO_Init+0x140>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a2c      	ldr	r2, [pc, #176]	; (8002400 <MX_GPIO_Init+0x140>)
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b2a      	ldr	r3, [pc, #168]	; (8002400 <MX_GPIO_Init+0x140>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	603b      	str	r3, [r7, #0]
 8002360:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8002362:	2200      	movs	r2, #0
 8002364:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8002368:	4826      	ldr	r0, [pc, #152]	; (8002404 <MX_GPIO_Init+0x144>)
 800236a:	f001 fc35 	bl	8003bd8 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 800236e:	2200      	movs	r2, #0
 8002370:	213c      	movs	r1, #60	; 0x3c
 8002372:	4825      	ldr	r0, [pc, #148]	; (8002408 <MX_GPIO_Init+0x148>)
 8002374:	f001 fc30 	bl	8003bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8002378:	2200      	movs	r2, #0
 800237a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800237e:	4823      	ldr	r0, [pc, #140]	; (800240c <MX_GPIO_Init+0x14c>)
 8002380:	f001 fc2a 	bl	8003bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8002384:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8002388:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238a:	2301      	movs	r3, #1
 800238c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002392:	2300      	movs	r3, #0
 8002394:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002396:	f107 0314 	add.w	r3, r7, #20
 800239a:	4619      	mov	r1, r3
 800239c:	4819      	ldr	r0, [pc, #100]	; (8002404 <MX_GPIO_Init+0x144>)
 800239e:	f001 fa7f 	bl	80038a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 80023a2:	233c      	movs	r3, #60	; 0x3c
 80023a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a6:	2301      	movs	r3, #1
 80023a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ae:	2302      	movs	r3, #2
 80023b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b2:	f107 0314 	add.w	r3, r7, #20
 80023b6:	4619      	mov	r1, r3
 80023b8:	4813      	ldr	r0, [pc, #76]	; (8002408 <MX_GPIO_Init+0x148>)
 80023ba:	f001 fa71 	bl	80038a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USRBUT_Pin */
  GPIO_InitStruct.Pin = USRBUT_Pin;
 80023be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USRBUT_GPIO_Port, &GPIO_InitStruct);
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	4619      	mov	r1, r3
 80023d2:	480e      	ldr	r0, [pc, #56]	; (800240c <MX_GPIO_Init+0x14c>)
 80023d4:	f001 fa64 	bl	80038a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 80023d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023de:	2301      	movs	r3, #1
 80023e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e6:	2300      	movs	r3, #0
 80023e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80023ea:	f107 0314 	add.w	r3, r7, #20
 80023ee:	4619      	mov	r1, r3
 80023f0:	4806      	ldr	r0, [pc, #24]	; (800240c <MX_GPIO_Init+0x14c>)
 80023f2:	f001 fa55 	bl	80038a0 <HAL_GPIO_Init>

}
 80023f6:	bf00      	nop
 80023f8:	3728      	adds	r7, #40	; 0x28
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40023800 	.word	0x40023800
 8002404:	40021000 	.word	0x40021000
 8002408:	40020000 	.word	0x40020000
 800240c:	40020c00 	.word	0x40020c00

08002410 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	/*Prevent unused argument(s) compilation warning*/
	UNUSED(huart);
	HAL_UART_Transmit(&huart3,(uint8_t *)aRxBuffer,10,0xFFFF); //might not nd
 8002418:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800241c:	220a      	movs	r2, #10
 800241e:	4904      	ldr	r1, [pc, #16]	; (8002430 <HAL_UART_RxCpltCallback+0x20>)
 8002420:	4804      	ldr	r0, [pc, #16]	; (8002434 <HAL_UART_RxCpltCallback+0x24>)
 8002422:	f003 fd78 	bl	8005f16 <HAL_UART_Transmit>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20004bf8 	.word	0x20004bf8
 8002434:	20004a70 	.word	0x20004a70

08002438 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08e      	sub	sp, #56	; 0x38
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t test[20] = "Testing Pi";
 8002440:	4a2a      	ldr	r2, [pc, #168]	; (80024ec <StartDefaultTask+0xb4>)
 8002442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002446:	ca07      	ldmia	r2, {r0, r1, r2}
 8002448:	c303      	stmia	r3!, {r0, r1}
 800244a:	801a      	strh	r2, [r3, #0]
 800244c:	3302      	adds	r3, #2
 800244e:	0c12      	lsrs	r2, r2, #16
 8002450:	701a      	strb	r2, [r3, #0]
 8002452:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]
 800245c:	721a      	strb	r2, [r3, #8]
	uint8_t checkPi[1];

	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 1);
 800245e:	2201      	movs	r2, #1
 8002460:	4923      	ldr	r1, [pc, #140]	; (80024f0 <StartDefaultTask+0xb8>)
 8002462:	4824      	ldr	r0, [pc, #144]	; (80024f4 <StartDefaultTask+0xbc>)
 8002464:	f003 fe2e 	bl	80060c4 <HAL_UART_Receive_IT>
		OLED_ShowString(5,5,test);
 8002468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800246c:	461a      	mov	r2, r3
 800246e:	2105      	movs	r1, #5
 8002470:	2005      	movs	r0, #5
 8002472:	f007 fc07 	bl	8009c84 <OLED_ShowString>
//		sprintf(checkPi, "Pi cmd: %s\0", aRxBuffer);
//		OLED_ShowString(10, 20, checkPi);
		OLED_Clear();
 8002476:	f007 fb13 	bl	8009aa0 <OLED_Clear>
		ultraDistCheck();
 800247a:	f7fe fe69 	bl	8001150 <ultraDistCheck>
		HAL_Delay(200);
 800247e:	20c8      	movs	r0, #200	; 0xc8
 8002480:	f000 fde4 	bl	800304c <HAL_Delay>
		sprintf(ultra, "uDistF: %u\0", uDistFinal);
 8002484:	4b1c      	ldr	r3, [pc, #112]	; (80024f8 <StartDefaultTask+0xc0>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	f107 0310 	add.w	r3, r7, #16
 800248c:	491b      	ldr	r1, [pc, #108]	; (80024fc <StartDefaultTask+0xc4>)
 800248e:	4618      	mov	r0, r3
 8002490:	f007 fcf6 	bl	8009e80 <siprintf>
		OLED_ShowString(10, 50, ultra);
 8002494:	f107 0310 	add.w	r3, r7, #16
 8002498:	461a      	mov	r2, r3
 800249a:	2132      	movs	r1, #50	; 0x32
 800249c:	200a      	movs	r0, #10
 800249e:	f007 fbf1 	bl	8009c84 <OLED_ShowString>

		sprintf(ultra, "uDist1: %u\0", uDistCheck1);
 80024a2:	4b17      	ldr	r3, [pc, #92]	; (8002500 <StartDefaultTask+0xc8>)
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	f107 0310 	add.w	r3, r7, #16
 80024ac:	4915      	ldr	r1, [pc, #84]	; (8002504 <StartDefaultTask+0xcc>)
 80024ae:	4618      	mov	r0, r3
 80024b0:	f007 fce6 	bl	8009e80 <siprintf>
		OLED_ShowString(10, 25, ultra);
 80024b4:	f107 0310 	add.w	r3, r7, #16
 80024b8:	461a      	mov	r2, r3
 80024ba:	2119      	movs	r1, #25
 80024bc:	200a      	movs	r0, #10
 80024be:	f007 fbe1 	bl	8009c84 <OLED_ShowString>

		sprintf(ultra, "uDist2: %u\0", uDistCheck2);
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <StartDefaultTask+0xd0>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	f107 0310 	add.w	r3, r7, #16
 80024ca:	4910      	ldr	r1, [pc, #64]	; (800250c <StartDefaultTask+0xd4>)
 80024cc:	4618      	mov	r0, r3
 80024ce:	f007 fcd7 	bl	8009e80 <siprintf>
		OLED_ShowString(10, 35, ultra);
 80024d2:	f107 0310 	add.w	r3, r7, #16
 80024d6:	461a      	mov	r2, r3
 80024d8:	2123      	movs	r1, #35	; 0x23
 80024da:	200a      	movs	r0, #10
 80024dc:	f007 fbd2 	bl	8009c84 <OLED_ShowString>
//		HAL_Delay(100);
//		sprintf(ultra, "IR right: %u\0", ir2Dist);
//		OLED_ShowString(10, 40, ultra);


		OLED_Refresh_Gram();
 80024e0:	f007 fa5c 	bl	800999c <OLED_Refresh_Gram>
		//	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
		osDelay(100);
 80024e4:	2064      	movs	r0, #100	; 0x64
 80024e6:	f004 fde5 	bl	80070b4 <osDelay>
	{
 80024ea:	e7b8      	b.n	800245e <StartDefaultTask+0x26>
 80024ec:	0800a72c 	.word	0x0800a72c
 80024f0:	20004bf8 	.word	0x20004bf8
 80024f4:	20004a70 	.word	0x20004a70
 80024f8:	200000b4 	.word	0x200000b4
 80024fc:	0800a708 	.word	0x0800a708
 8002500:	200000ae 	.word	0x200000ae
 8002504:	0800a714 	.word	0x0800a714
 8002508:	200000b0 	.word	0x200000b0
 800250c:	0800a720 	.word	0x0800a720

08002510 <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002518:	2100      	movs	r1, #0
 800251a:	48ae      	ldr	r0, [pc, #696]	; (80027d4 <motor+0x2c4>)
 800251c:	f002 f884 	bl	8004628 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002520:	2104      	movs	r1, #4
 8002522:	48ac      	ldr	r0, [pc, #688]	; (80027d4 <motor+0x2c4>)
 8002524:	f002 f880 	bl	8004628 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002528:	210c      	movs	r1, #12
 800252a:	48ab      	ldr	r0, [pc, #684]	; (80027d8 <motor+0x2c8>)
 800252c:	f002 f87c 	bl	8004628 <HAL_TIM_PWM_Start>
	htim1.Instance->CCR4 = 74;
 8002530:	4ba9      	ldr	r3, [pc, #676]	; (80027d8 <motor+0x2c8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	224a      	movs	r2, #74	; 0x4a
 8002536:	641a      	str	r2, [r3, #64]	; 0x40
	//*aRxBuffer = '\0';
	*aRxBuffer = '\0';
 8002538:	4ba8      	ldr	r3, [pc, #672]	; (80027dc <motor+0x2cc>)
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
	uint8_t toRpiTest[6] = "NiHao";
 800253e:	4aa8      	ldr	r2, [pc, #672]	; (80027e0 <motor+0x2d0>)
 8002540:	f107 0310 	add.w	r3, r7, #16
 8002544:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002548:	6018      	str	r0, [r3, #0]
 800254a:	3304      	adds	r3, #4
 800254c:	8019      	strh	r1, [r3, #0]
		for(;;)
		  {
			switch (*aRxBuffer)
 800254e:	4ba3      	ldr	r3, [pc, #652]	; (80027dc <motor+0x2cc>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b5a      	cmp	r3, #90	; 0x5a
 8002554:	f200 81bc 	bhi.w	80028d0 <motor+0x3c0>
 8002558:	a201      	add	r2, pc, #4	; (adr r2, 8002560 <motor+0x50>)
 800255a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255e:	bf00      	nop
 8002560:	080026cd 	.word	0x080026cd
 8002564:	080028d1 	.word	0x080028d1
 8002568:	080028d1 	.word	0x080028d1
 800256c:	080028d1 	.word	0x080028d1
 8002570:	080028d1 	.word	0x080028d1
 8002574:	080028d1 	.word	0x080028d1
 8002578:	080028d1 	.word	0x080028d1
 800257c:	080028d1 	.word	0x080028d1
 8002580:	080028d1 	.word	0x080028d1
 8002584:	080028d1 	.word	0x080028d1
 8002588:	080028d1 	.word	0x080028d1
 800258c:	080028d1 	.word	0x080028d1
 8002590:	080028d1 	.word	0x080028d1
 8002594:	080028d1 	.word	0x080028d1
 8002598:	080028d1 	.word	0x080028d1
 800259c:	080028d1 	.word	0x080028d1
 80025a0:	080028d1 	.word	0x080028d1
 80025a4:	080028d1 	.word	0x080028d1
 80025a8:	080028d1 	.word	0x080028d1
 80025ac:	080028d1 	.word	0x080028d1
 80025b0:	080028d1 	.word	0x080028d1
 80025b4:	080028d1 	.word	0x080028d1
 80025b8:	080028d1 	.word	0x080028d1
 80025bc:	080028d1 	.word	0x080028d1
 80025c0:	080028d1 	.word	0x080028d1
 80025c4:	080028d1 	.word	0x080028d1
 80025c8:	080028d1 	.word	0x080028d1
 80025cc:	080028d1 	.word	0x080028d1
 80025d0:	080028d1 	.word	0x080028d1
 80025d4:	080028d1 	.word	0x080028d1
 80025d8:	080028d1 	.word	0x080028d1
 80025dc:	080028d1 	.word	0x080028d1
 80025e0:	080028d1 	.word	0x080028d1
 80025e4:	08002765 	.word	0x08002765
 80025e8:	0800276d 	.word	0x0800276d
 80025ec:	08002775 	.word	0x08002775
 80025f0:	0800277d 	.word	0x0800277d
 80025f4:	08002785 	.word	0x08002785
 80025f8:	0800278d 	.word	0x0800278d
 80025fc:	08002795 	.word	0x08002795
 8002600:	0800279d 	.word	0x0800279d
 8002604:	080027a5 	.word	0x080027a5
 8002608:	080027ad 	.word	0x080027ad
 800260c:	080028d1 	.word	0x080028d1
 8002610:	080028d1 	.word	0x080028d1
 8002614:	080028d1 	.word	0x080028d1
 8002618:	080028d1 	.word	0x080028d1
 800261c:	080028d1 	.word	0x080028d1
 8002620:	0800271d 	.word	0x0800271d
 8002624:	08002725 	.word	0x08002725
 8002628:	0800272d 	.word	0x0800272d
 800262c:	08002735 	.word	0x08002735
 8002630:	0800273d 	.word	0x0800273d
 8002634:	08002745 	.word	0x08002745
 8002638:	0800274d 	.word	0x0800274d
 800263c:	08002755 	.word	0x08002755
 8002640:	0800275d 	.word	0x0800275d
 8002644:	08002715 	.word	0x08002715
 8002648:	080028d1 	.word	0x080028d1
 800264c:	080028d1 	.word	0x080028d1
 8002650:	080028d1 	.word	0x080028d1
 8002654:	080028d1 	.word	0x080028d1
 8002658:	080028d1 	.word	0x080028d1
 800265c:	080028d1 	.word	0x080028d1
 8002660:	080028d1 	.word	0x080028d1
 8002664:	080028d1 	.word	0x080028d1
 8002668:	080028d1 	.word	0x080028d1
 800266c:	080028d1 	.word	0x080028d1
 8002670:	080028d1 	.word	0x080028d1
 8002674:	080027cd 	.word	0x080027cd
 8002678:	080028d1 	.word	0x080028d1
 800267c:	080028d1 	.word	0x080028d1
 8002680:	080026e1 	.word	0x080026e1
 8002684:	080028d1 	.word	0x080028d1
 8002688:	080028d1 	.word	0x080028d1
 800268c:	080026fd 	.word	0x080026fd
 8002690:	080027b5 	.word	0x080027b5
 8002694:	080028d1 	.word	0x080028d1
 8002698:	080028d1 	.word	0x080028d1
 800269c:	080028d1 	.word	0x080028d1
 80026a0:	080028d1 	.word	0x080028d1
 80026a4:	080027c5 	.word	0x080027c5
 80026a8:	080027bd 	.word	0x080027bd
 80026ac:	080028d1 	.word	0x080028d1
 80026b0:	080028d1 	.word	0x080028d1
 80026b4:	080027ed 	.word	0x080027ed
 80026b8:	080028d1 	.word	0x080028d1
 80026bc:	080028c1 	.word	0x080028c1
 80026c0:	080028d1 	.word	0x080028d1
 80026c4:	080028d1 	.word	0x080028d1
 80026c8:	080028cb 	.word	0x080028cb
			{
			case '\0': // initialize
				htim1.Instance->CCR4 = 74;
 80026cc:	4b42      	ldr	r3, [pc, #264]	; (80027d8 <motor+0x2c8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	224a      	movs	r2, #74	; 0x4a
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 1);
 80026d4:	2201      	movs	r2, #1
 80026d6:	4941      	ldr	r1, [pc, #260]	; (80027dc <motor+0x2cc>)
 80026d8:	4842      	ldr	r0, [pc, #264]	; (80027e4 <motor+0x2d4>)
 80026da:	f003 fcf3 	bl	80060c4 <HAL_UART_Receive_IT>
				break;
 80026de:	e0fd      	b.n	80028dc <motor+0x3cc>
			case 'H':
				HAL_UART_Transmit_IT(&huart3,(uint8_t *)&toRpiTest,6);
 80026e0:	f107 0310 	add.w	r3, r7, #16
 80026e4:	2206      	movs	r2, #6
 80026e6:	4619      	mov	r1, r3
 80026e8:	483e      	ldr	r0, [pc, #248]	; (80027e4 <motor+0x2d4>)
 80026ea:	f003 fca6 	bl	800603a <HAL_UART_Transmit_IT>
				osDelay(50);
 80026ee:	2032      	movs	r0, #50	; 0x32
 80026f0:	f004 fce0 	bl	80070b4 <osDelay>
				*aRxBuffer = 'Z';
 80026f4:	4b39      	ldr	r3, [pc, #228]	; (80027dc <motor+0x2cc>)
 80026f6:	225a      	movs	r2, #90	; 0x5a
 80026f8:	701a      	strb	r2, [r3, #0]
				break;
 80026fa:	e0ef      	b.n	80028dc <motor+0x3cc>
			case 'K':
				HAL_UART_Transmit_IT(&huart3,(uint8_t *)"OK?\n",4);
 80026fc:	2204      	movs	r2, #4
 80026fe:	493a      	ldr	r1, [pc, #232]	; (80027e8 <motor+0x2d8>)
 8002700:	4838      	ldr	r0, [pc, #224]	; (80027e4 <motor+0x2d4>)
 8002702:	f003 fc9a 	bl	800603a <HAL_UART_Transmit_IT>
				osDelay(50);
 8002706:	2032      	movs	r0, #50	; 0x32
 8002708:	f004 fcd4 	bl	80070b4 <osDelay>
				*aRxBuffer = 'Z';
 800270c:	4b33      	ldr	r3, [pc, #204]	; (80027dc <motor+0x2cc>)
 800270e:	225a      	movs	r2, #90	; 0x5a
 8002710:	701a      	strb	r2, [r3, #0]
				break;
 8002712:	e0e3      	b.n	80028dc <motor+0x3cc>
			//========================Forward========================
			case '9':
				forward(0);break;
 8002714:	2000      	movs	r0, #0
 8002716:	f7ff f81f 	bl	8001758 <forward>
 800271a:	e0df      	b.n	80028dc <motor+0x3cc>
			case '0':
				forward(1);break;
 800271c:	2001      	movs	r0, #1
 800271e:	f7ff f81b 	bl	8001758 <forward>
 8002722:	e0db      	b.n	80028dc <motor+0x3cc>
			case '1':
				forward(2);break;
 8002724:	2002      	movs	r0, #2
 8002726:	f7ff f817 	bl	8001758 <forward>
 800272a:	e0d7      	b.n	80028dc <motor+0x3cc>
			case '2':
				forward(3);break;
 800272c:	2003      	movs	r0, #3
 800272e:	f7ff f813 	bl	8001758 <forward>
 8002732:	e0d3      	b.n	80028dc <motor+0x3cc>
			case '3':
				forward(4);break;
 8002734:	2004      	movs	r0, #4
 8002736:	f7ff f80f 	bl	8001758 <forward>
 800273a:	e0cf      	b.n	80028dc <motor+0x3cc>
			case '4':
				forward(5);break;
 800273c:	2005      	movs	r0, #5
 800273e:	f7ff f80b 	bl	8001758 <forward>
 8002742:	e0cb      	b.n	80028dc <motor+0x3cc>
			case '5':
				forward(6);break;
 8002744:	2006      	movs	r0, #6
 8002746:	f7ff f807 	bl	8001758 <forward>
 800274a:	e0c7      	b.n	80028dc <motor+0x3cc>
			case '6':
				forward(7);break;
 800274c:	2007      	movs	r0, #7
 800274e:	f7ff f803 	bl	8001758 <forward>
 8002752:	e0c3      	b.n	80028dc <motor+0x3cc>
			case '7':
				forward(8);break;
 8002754:	2008      	movs	r0, #8
 8002756:	f7fe ffff 	bl	8001758 <forward>
 800275a:	e0bf      	b.n	80028dc <motor+0x3cc>
			case '8':
				forward(9);break;
 800275c:	2009      	movs	r0, #9
 800275e:	f7fe fffb 	bl	8001758 <forward>
 8002762:	e0bb      	b.n	80028dc <motor+0x3cc>
			//========================Reverse========================
			case 33:
				reverse(1);break;
 8002764:	2001      	movs	r0, #1
 8002766:	f7ff f8b3 	bl	80018d0 <reverse>
 800276a:	e0b7      	b.n	80028dc <motor+0x3cc>
			case 34:
				reverse(2);break;
 800276c:	2002      	movs	r0, #2
 800276e:	f7ff f8af 	bl	80018d0 <reverse>
 8002772:	e0b3      	b.n	80028dc <motor+0x3cc>
			case 35:
				reverse(3);break;
 8002774:	2003      	movs	r0, #3
 8002776:	f7ff f8ab 	bl	80018d0 <reverse>
 800277a:	e0af      	b.n	80028dc <motor+0x3cc>
			case 36:
				reverse(4);break;
 800277c:	2004      	movs	r0, #4
 800277e:	f7ff f8a7 	bl	80018d0 <reverse>
 8002782:	e0ab      	b.n	80028dc <motor+0x3cc>
			case 37:
				reverse(5);break;
 8002784:	2005      	movs	r0, #5
 8002786:	f7ff f8a3 	bl	80018d0 <reverse>
 800278a:	e0a7      	b.n	80028dc <motor+0x3cc>
			case 38:
				reverse(6);break;
 800278c:	2006      	movs	r0, #6
 800278e:	f7ff f89f 	bl	80018d0 <reverse>
 8002792:	e0a3      	b.n	80028dc <motor+0x3cc>
			case 39:
				reverse(7);break;
 8002794:	2007      	movs	r0, #7
 8002796:	f7ff f89b 	bl	80018d0 <reverse>
 800279a:	e09f      	b.n	80028dc <motor+0x3cc>
			case 40:
				reverse(8);break;
 800279c:	2008      	movs	r0, #8
 800279e:	f7ff f897 	bl	80018d0 <reverse>
 80027a2:	e09b      	b.n	80028dc <motor+0x3cc>
			case 41:
				reverse(9);break;
 80027a4:	2009      	movs	r0, #9
 80027a6:	f7ff f893 	bl	80018d0 <reverse>
 80027aa:	e097      	b.n	80028dc <motor+0x3cc>
			case 42:
				reverse(0);break;
 80027ac:	2000      	movs	r0, #0
 80027ae:	f7ff f88f 	bl	80018d0 <reverse>
 80027b2:	e093      	b.n	80028dc <motor+0x3cc>
			//========================Turn========================
			case 'L':
				spotTurn(1);break;
 80027b4:	2001      	movs	r0, #1
 80027b6:	f7ff f947 	bl	8001a48 <spotTurn>
 80027ba:	e08f      	b.n	80028dc <motor+0x3cc>
			case 'R':
				spotTurn(2);break;
 80027bc:	2002      	movs	r0, #2
 80027be:	f7ff f943 	bl	8001a48 <spotTurn>
 80027c2:	e08b      	b.n	80028dc <motor+0x3cc>
			case 'Q':
				degTurn(1);break;
 80027c4:	2001      	movs	r0, #1
 80027c6:	f7fe ff7f 	bl	80016c8 <degTurn>
 80027ca:	e087      	b.n	80028dc <motor+0x3cc>
			case 'E':
				degTurn(2);break;
 80027cc:	2002      	movs	r0, #2
 80027ce:	f7fe ff7b 	bl	80016c8 <degTurn>
 80027d2:	e083      	b.n	80028dc <motor+0x3cc>
 80027d4:	200049e0 	.word	0x200049e0
 80027d8:	20004bb0 	.word	0x20004bb0
 80027dc:	20004bf8 	.word	0x20004bf8
 80027e0:	0800a74c 	.word	0x0800a74c
 80027e4:	20004a70 	.word	0x20004a70
 80027e8:	0800a740 	.word	0x0800a740
			case 'U':
				ultraDistCheck();
 80027ec:	f7fe fcb0 	bl	8001150 <ultraDistCheck>
				HAL_Delay(200);
 80027f0:	20c8      	movs	r0, #200	; 0xc8
 80027f2:	f000 fc2b 	bl	800304c <HAL_Delay>
				char reply[] = "000\n";
 80027f6:	4a3e      	ldr	r2, [pc, #248]	; (80028f0 <motor+0x3e0>)
 80027f8:	f107 0308 	add.w	r3, r7, #8
 80027fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002800:	6018      	str	r0, [r3, #0]
 8002802:	3304      	adds	r3, #4
 8002804:	7019      	strb	r1, [r3, #0]
				reply[0] += uDistFinal / 100 % 10;
 8002806:	7a38      	ldrb	r0, [r7, #8]
 8002808:	4b3a      	ldr	r3, [pc, #232]	; (80028f4 <motor+0x3e4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a3a      	ldr	r2, [pc, #232]	; (80028f8 <motor+0x3e8>)
 800280e:	fb82 1203 	smull	r1, r2, r2, r3
 8002812:	1152      	asrs	r2, r2, #5
 8002814:	17db      	asrs	r3, r3, #31
 8002816:	1ad2      	subs	r2, r2, r3
 8002818:	4b38      	ldr	r3, [pc, #224]	; (80028fc <motor+0x3ec>)
 800281a:	fb83 1302 	smull	r1, r3, r3, r2
 800281e:	1099      	asrs	r1, r3, #2
 8002820:	17d3      	asrs	r3, r2, #31
 8002822:	1ac9      	subs	r1, r1, r3
 8002824:	460b      	mov	r3, r1
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	1ad1      	subs	r1, r2, r3
 800282e:	b2cb      	uxtb	r3, r1
 8002830:	4403      	add	r3, r0
 8002832:	b2db      	uxtb	r3, r3
 8002834:	723b      	strb	r3, [r7, #8]
				reply[1] += uDistFinal / 10 % 10;
 8002836:	7a78      	ldrb	r0, [r7, #9]
 8002838:	4b2e      	ldr	r3, [pc, #184]	; (80028f4 <motor+0x3e4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a2f      	ldr	r2, [pc, #188]	; (80028fc <motor+0x3ec>)
 800283e:	fb82 1203 	smull	r1, r2, r2, r3
 8002842:	1092      	asrs	r2, r2, #2
 8002844:	17db      	asrs	r3, r3, #31
 8002846:	1ad2      	subs	r2, r2, r3
 8002848:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <motor+0x3ec>)
 800284a:	fb83 1302 	smull	r1, r3, r3, r2
 800284e:	1099      	asrs	r1, r3, #2
 8002850:	17d3      	asrs	r3, r2, #31
 8002852:	1ac9      	subs	r1, r1, r3
 8002854:	460b      	mov	r3, r1
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	1ad1      	subs	r1, r2, r3
 800285e:	b2cb      	uxtb	r3, r1
 8002860:	4403      	add	r3, r0
 8002862:	b2db      	uxtb	r3, r3
 8002864:	727b      	strb	r3, [r7, #9]
				reply[2] += uDistFinal % 10;
 8002866:	7ab8      	ldrb	r0, [r7, #10]
 8002868:	4b22      	ldr	r3, [pc, #136]	; (80028f4 <motor+0x3e4>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4b23      	ldr	r3, [pc, #140]	; (80028fc <motor+0x3ec>)
 800286e:	fb83 1302 	smull	r1, r3, r3, r2
 8002872:	1099      	asrs	r1, r3, #2
 8002874:	17d3      	asrs	r3, r2, #31
 8002876:	1ac9      	subs	r1, r1, r3
 8002878:	460b      	mov	r3, r1
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	1ad1      	subs	r1, r2, r3
 8002882:	b2cb      	uxtb	r3, r1
 8002884:	4403      	add	r3, r0
 8002886:	b2db      	uxtb	r3, r3
 8002888:	72bb      	strb	r3, [r7, #10]
				if (uDistFinal > 999)
 800288a:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <motor+0x3e4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002892:	db01      	blt.n	8002898 <motor+0x388>
					reply[0] = '9';
 8002894:	2339      	movs	r3, #57	; 0x39
 8002896:	723b      	strb	r3, [r7, #8]
				HAL_UART_Transmit_IT(&huart3, (uint8_t *)reply, strlen(reply));
 8002898:	f107 0308 	add.w	r3, r7, #8
 800289c:	4618      	mov	r0, r3
 800289e:	f7fd fc97 	bl	80001d0 <strlen>
 80028a2:	4603      	mov	r3, r0
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	f107 0308 	add.w	r3, r7, #8
 80028aa:	4619      	mov	r1, r3
 80028ac:	4814      	ldr	r0, [pc, #80]	; (8002900 <motor+0x3f0>)
 80028ae:	f003 fbc4 	bl	800603a <HAL_UART_Transmit_IT>
				osDelay(50);
 80028b2:	2032      	movs	r0, #50	; 0x32
 80028b4:	f004 fbfe 	bl	80070b4 <osDelay>
				*aRxBuffer = 'Z';
 80028b8:	4b12      	ldr	r3, [pc, #72]	; (8002904 <motor+0x3f4>)
 80028ba:	225a      	movs	r2, #90	; 0x5a
 80028bc:	701a      	strb	r2, [r3, #0]
				break;
 80028be:	e00d      	b.n	80028dc <motor+0x3cc>
//				osDelay(50);
//				*aRxBuffer = 'R';
//				break;
			/* Test Cases */
			case 'W':
				PIDmotor(10);
 80028c0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80028c4:	f7fe fc9e 	bl	8001204 <PIDmotor>
				break;
 80028c8:	e008      	b.n	80028dc <motor+0x3cc>

			case 'Z':
				waitCmd();
 80028ca:	f7fe fc87 	bl	80011dc <waitCmd>
				break;
 80028ce:	e005      	b.n	80028dc <motor+0x3cc>
			default:
//				*aRxBuffer = 'R';
				HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 1);
 80028d0:	2201      	movs	r2, #1
 80028d2:	490c      	ldr	r1, [pc, #48]	; (8002904 <motor+0x3f4>)
 80028d4:	480a      	ldr	r0, [pc, #40]	; (8002900 <motor+0x3f0>)
 80028d6:	f003 fbf5 	bl	80060c4 <HAL_UART_Receive_IT>
				break;
 80028da:	bf00      	nop
			}
			HAL_Delay(100);
 80028dc:	2064      	movs	r0, #100	; 0x64
 80028de:	f000 fbb5 	bl	800304c <HAL_Delay>
			HAL_UART_Transmit_IT(&huart3,(uint8_t *)"OK\n",2);
 80028e2:	2202      	movs	r2, #2
 80028e4:	4908      	ldr	r1, [pc, #32]	; (8002908 <motor+0x3f8>)
 80028e6:	4806      	ldr	r0, [pc, #24]	; (8002900 <motor+0x3f0>)
 80028e8:	f003 fba7 	bl	800603a <HAL_UART_Transmit_IT>
			switch (*aRxBuffer)
 80028ec:	e62f      	b.n	800254e <motor+0x3e>
 80028ee:	bf00      	nop
 80028f0:	0800a754 	.word	0x0800a754
 80028f4:	200000b4 	.word	0x200000b4
 80028f8:	51eb851f 	.word	0x51eb851f
 80028fc:	66666667 	.word	0x66666667
 8002900:	20004a70 	.word	0x20004a70
 8002904:	20004bf8 	.word	0x20004bf8
 8002908:	0800a748 	.word	0x0800a748

0800290c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002910:	b672      	cpsid	i
}
 8002912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002914:	e7fe      	b.n	8002914 <Error_Handler+0x8>
	...

08002918 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	607b      	str	r3, [r7, #4]
 8002922:	4b12      	ldr	r3, [pc, #72]	; (800296c <HAL_MspInit+0x54>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	4a11      	ldr	r2, [pc, #68]	; (800296c <HAL_MspInit+0x54>)
 8002928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800292c:	6453      	str	r3, [r2, #68]	; 0x44
 800292e:	4b0f      	ldr	r3, [pc, #60]	; (800296c <HAL_MspInit+0x54>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	603b      	str	r3, [r7, #0]
 800293e:	4b0b      	ldr	r3, [pc, #44]	; (800296c <HAL_MspInit+0x54>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	4a0a      	ldr	r2, [pc, #40]	; (800296c <HAL_MspInit+0x54>)
 8002944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002948:	6413      	str	r3, [r2, #64]	; 0x40
 800294a:	4b08      	ldr	r3, [pc, #32]	; (800296c <HAL_MspInit+0x54>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002956:	2200      	movs	r2, #0
 8002958:	210f      	movs	r1, #15
 800295a:	f06f 0001 	mvn.w	r0, #1
 800295e:	f000 fed6 	bl	800370e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40023800 	.word	0x40023800

08002970 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08c      	sub	sp, #48	; 0x30
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	f107 031c 	add.w	r3, r7, #28
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a2e      	ldr	r2, [pc, #184]	; (8002a48 <HAL_ADC_MspInit+0xd8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d128      	bne.n	80029e4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	61bb      	str	r3, [r7, #24]
 8002996:	4b2d      	ldr	r3, [pc, #180]	; (8002a4c <HAL_ADC_MspInit+0xdc>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	4a2c      	ldr	r2, [pc, #176]	; (8002a4c <HAL_ADC_MspInit+0xdc>)
 800299c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a0:	6453      	str	r3, [r2, #68]	; 0x44
 80029a2:	4b2a      	ldr	r3, [pc, #168]	; (8002a4c <HAL_ADC_MspInit+0xdc>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	4b26      	ldr	r3, [pc, #152]	; (8002a4c <HAL_ADC_MspInit+0xdc>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	4a25      	ldr	r2, [pc, #148]	; (8002a4c <HAL_ADC_MspInit+0xdc>)
 80029b8:	f043 0304 	orr.w	r3, r3, #4
 80029bc:	6313      	str	r3, [r2, #48]	; 0x30
 80029be:	4b23      	ldr	r3, [pc, #140]	; (8002a4c <HAL_ADC_MspInit+0xdc>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80029ca:	2312      	movs	r3, #18
 80029cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029ce:	2303      	movs	r3, #3
 80029d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d6:	f107 031c 	add.w	r3, r7, #28
 80029da:	4619      	mov	r1, r3
 80029dc:	481c      	ldr	r0, [pc, #112]	; (8002a50 <HAL_ADC_MspInit+0xe0>)
 80029de:	f000 ff5f 	bl	80038a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80029e2:	e02c      	b.n	8002a3e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a1a      	ldr	r2, [pc, #104]	; (8002a54 <HAL_ADC_MspInit+0xe4>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d127      	bne.n	8002a3e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <HAL_ADC_MspInit+0xdc>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	4a15      	ldr	r2, [pc, #84]	; (8002a4c <HAL_ADC_MspInit+0xdc>)
 80029f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029fc:	6453      	str	r3, [r2, #68]	; 0x44
 80029fe:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <HAL_ADC_MspInit+0xdc>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <HAL_ADC_MspInit+0xdc>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <HAL_ADC_MspInit+0xdc>)
 8002a14:	f043 0304 	orr.w	r3, r3, #4
 8002a18:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1a:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <HAL_ADC_MspInit+0xdc>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a26:	2304      	movs	r3, #4
 8002a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a32:	f107 031c 	add.w	r3, r7, #28
 8002a36:	4619      	mov	r1, r3
 8002a38:	4805      	ldr	r0, [pc, #20]	; (8002a50 <HAL_ADC_MspInit+0xe0>)
 8002a3a:	f000 ff31 	bl	80038a0 <HAL_GPIO_Init>
}
 8002a3e:	bf00      	nop
 8002a40:	3730      	adds	r7, #48	; 0x30
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40012000 	.word	0x40012000
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40020800 	.word	0x40020800
 8002a54:	40012100 	.word	0x40012100

08002a58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0b      	ldr	r2, [pc, #44]	; (8002a94 <HAL_TIM_Base_MspInit+0x3c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d10d      	bne.n	8002a86 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <HAL_TIM_Base_MspInit+0x40>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	4a09      	ldr	r2, [pc, #36]	; (8002a98 <HAL_TIM_Base_MspInit+0x40>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7a:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <HAL_TIM_Base_MspInit+0x40>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40010000 	.word	0x40010000
 8002a98:	40023800 	.word	0x40023800

08002a9c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08c      	sub	sp, #48	; 0x30
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	f107 031c 	add.w	r3, r7, #28
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002abc:	d14b      	bne.n	8002b56 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	4b3f      	ldr	r3, [pc, #252]	; (8002bc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	4a3e      	ldr	r2, [pc, #248]	; (8002bc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ac8:	f043 0301 	orr.w	r3, r3, #1
 8002acc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ace:	4b3c      	ldr	r3, [pc, #240]	; (8002bc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	61bb      	str	r3, [r7, #24]
 8002ad8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	4b38      	ldr	r3, [pc, #224]	; (8002bc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4a37      	ldr	r2, [pc, #220]	; (8002bc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aea:	4b35      	ldr	r3, [pc, #212]	; (8002bc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	4b31      	ldr	r3, [pc, #196]	; (8002bc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a30      	ldr	r2, [pc, #192]	; (8002bc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b00:	f043 0302 	orr.w	r3, r3, #2
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b2e      	ldr	r3, [pc, #184]	; (8002bc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	613b      	str	r3, [r7, #16]
 8002b10:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	2300      	movs	r3, #0
 8002b22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b24:	2301      	movs	r3, #1
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b28:	f107 031c 	add.w	r3, r7, #28
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4825      	ldr	r0, [pc, #148]	; (8002bc4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002b30:	f000 feb6 	bl	80038a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b34:	2308      	movs	r3, #8
 8002b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b40:	2300      	movs	r3, #0
 8002b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b44:	2301      	movs	r3, #1
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b48:	f107 031c 	add.w	r3, r7, #28
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	481e      	ldr	r0, [pc, #120]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002b50:	f000 fea6 	bl	80038a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b54:	e030      	b.n	8002bb8 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a1c      	ldr	r2, [pc, #112]	; (8002bcc <HAL_TIM_Encoder_MspInit+0x130>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d12b      	bne.n	8002bb8 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	4a15      	ldr	r2, [pc, #84]	; (8002bc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b6a:	f043 0302 	orr.w	r3, r3, #2
 8002b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b70:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b84:	4a0e      	ldr	r2, [pc, #56]	; (8002bc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b98:	23c0      	movs	r3, #192	; 0xc0
 8002b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bac:	f107 031c 	add.w	r3, r7, #28
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4804      	ldr	r0, [pc, #16]	; (8002bc4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002bb4:	f000 fe74 	bl	80038a0 <HAL_GPIO_Init>
}
 8002bb8:	bf00      	nop
 8002bba:	3730      	adds	r7, #48	; 0x30
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40020000 	.word	0x40020000
 8002bc8:	40020400 	.word	0x40020400
 8002bcc:	40000400 	.word	0x40000400

08002bd0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08a      	sub	sp, #40	; 0x28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd8:	f107 0314 	add.w	r3, r7, #20
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1d      	ldr	r2, [pc, #116]	; (8002c64 <HAL_TIM_IC_MspInit+0x94>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d134      	bne.n	8002c5c <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <HAL_TIM_IC_MspInit+0x98>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	4a1b      	ldr	r2, [pc, #108]	; (8002c68 <HAL_TIM_IC_MspInit+0x98>)
 8002bfc:	f043 0304 	orr.w	r3, r3, #4
 8002c00:	6413      	str	r3, [r2, #64]	; 0x40
 8002c02:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <HAL_TIM_IC_MspInit+0x98>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <HAL_TIM_IC_MspInit+0x98>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	4a14      	ldr	r2, [pc, #80]	; (8002c68 <HAL_TIM_IC_MspInit+0x98>)
 8002c18:	f043 0308 	orr.w	r3, r3, #8
 8002c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1e:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <HAL_TIM_IC_MspInit+0x98>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c40:	f107 0314 	add.w	r3, r7, #20
 8002c44:	4619      	mov	r1, r3
 8002c46:	4809      	ldr	r0, [pc, #36]	; (8002c6c <HAL_TIM_IC_MspInit+0x9c>)
 8002c48:	f000 fe2a 	bl	80038a0 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2105      	movs	r1, #5
 8002c50:	201e      	movs	r0, #30
 8002c52:	f000 fd5c 	bl	800370e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c56:	201e      	movs	r0, #30
 8002c58:	f000 fd75 	bl	8003746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002c5c:	bf00      	nop
 8002c5e:	3728      	adds	r7, #40	; 0x28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40000800 	.word	0x40000800
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40020c00 	.word	0x40020c00

08002c70 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08a      	sub	sp, #40	; 0x28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c78:	f107 0314 	add.w	r3, r7, #20
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM8)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a19      	ldr	r2, [pc, #100]	; (8002cf4 <HAL_TIM_PWM_MspInit+0x84>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d12b      	bne.n	8002cea <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	4b18      	ldr	r3, [pc, #96]	; (8002cf8 <HAL_TIM_PWM_MspInit+0x88>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	4a17      	ldr	r2, [pc, #92]	; (8002cf8 <HAL_TIM_PWM_MspInit+0x88>)
 8002c9c:	f043 0302 	orr.w	r3, r3, #2
 8002ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca2:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <HAL_TIM_PWM_MspInit+0x88>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <HAL_TIM_PWM_MspInit+0x88>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	4a10      	ldr	r2, [pc, #64]	; (8002cf8 <HAL_TIM_PWM_MspInit+0x88>)
 8002cb8:	f043 0304 	orr.w	r3, r3, #4
 8002cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <HAL_TIM_PWM_MspInit+0x88>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8002cca:	23c0      	movs	r3, #192	; 0xc0
 8002ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cde:	f107 0314 	add.w	r3, r7, #20
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4805      	ldr	r0, [pc, #20]	; (8002cfc <HAL_TIM_PWM_MspInit+0x8c>)
 8002ce6:	f000 fddb 	bl	80038a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002cea:	bf00      	nop
 8002cec:	3728      	adds	r7, #40	; 0x28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40010400 	.word	0x40010400
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	40020800 	.word	0x40020800

08002d00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d08:	f107 030c 	add.w	r3, r7, #12
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	60da      	str	r2, [r3, #12]
 8002d16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a12      	ldr	r2, [pc, #72]	; (8002d68 <HAL_TIM_MspPostInit+0x68>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d11e      	bne.n	8002d60 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <HAL_TIM_MspPostInit+0x6c>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	4a10      	ldr	r2, [pc, #64]	; (8002d6c <HAL_TIM_MspPostInit+0x6c>)
 8002d2c:	f043 0310 	orr.w	r3, r3, #16
 8002d30:	6313      	str	r3, [r2, #48]	; 0x30
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <HAL_TIM_MspPostInit+0x6c>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	60bb      	str	r3, [r7, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002d3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	2302      	movs	r3, #2
 8002d46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d50:	2301      	movs	r3, #1
 8002d52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d54:	f107 030c 	add.w	r3, r7, #12
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4805      	ldr	r0, [pc, #20]	; (8002d70 <HAL_TIM_MspPostInit+0x70>)
 8002d5c:	f000 fda0 	bl	80038a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002d60:	bf00      	nop
 8002d62:	3720      	adds	r7, #32
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40010000 	.word	0x40010000
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40021000 	.word	0x40021000

08002d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08a      	sub	sp, #40	; 0x28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d7c:	f107 0314 	add.w	r3, r7, #20
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	60da      	str	r2, [r3, #12]
 8002d8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1d      	ldr	r2, [pc, #116]	; (8002e08 <HAL_UART_MspInit+0x94>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d134      	bne.n	8002e00 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	4b1c      	ldr	r3, [pc, #112]	; (8002e0c <HAL_UART_MspInit+0x98>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	4a1b      	ldr	r2, [pc, #108]	; (8002e0c <HAL_UART_MspInit+0x98>)
 8002da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da4:	6413      	str	r3, [r2, #64]	; 0x40
 8002da6:	4b19      	ldr	r3, [pc, #100]	; (8002e0c <HAL_UART_MspInit+0x98>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <HAL_UART_MspInit+0x98>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	4a14      	ldr	r2, [pc, #80]	; (8002e0c <HAL_UART_MspInit+0x98>)
 8002dbc:	f043 0304 	orr.w	r3, r3, #4
 8002dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc2:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <HAL_UART_MspInit+0x98>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002dce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002de0:	2307      	movs	r3, #7
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002de4:	f107 0314 	add.w	r3, r7, #20
 8002de8:	4619      	mov	r1, r3
 8002dea:	4809      	ldr	r0, [pc, #36]	; (8002e10 <HAL_UART_MspInit+0x9c>)
 8002dec:	f000 fd58 	bl	80038a0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002df0:	2200      	movs	r2, #0
 8002df2:	2105      	movs	r1, #5
 8002df4:	2027      	movs	r0, #39	; 0x27
 8002df6:	f000 fc8a 	bl	800370e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002dfa:	2027      	movs	r0, #39	; 0x27
 8002dfc:	f000 fca3 	bl	8003746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e00:	bf00      	nop
 8002e02:	3728      	adds	r7, #40	; 0x28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40004800 	.word	0x40004800
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40020800 	.word	0x40020800

08002e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e18:	e7fe      	b.n	8002e18 <NMI_Handler+0x4>

08002e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e1e:	e7fe      	b.n	8002e1e <HardFault_Handler+0x4>

08002e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e24:	e7fe      	b.n	8002e24 <MemManage_Handler+0x4>

08002e26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e26:	b480      	push	{r7}
 8002e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e2a:	e7fe      	b.n	8002e2a <BusFault_Handler+0x4>

08002e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e30:	e7fe      	b.n	8002e30 <UsageFault_Handler+0x4>

08002e32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e32:	b480      	push	{r7}
 8002e34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e44:	f000 f8e2 	bl	800300c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002e48:	f005 fd42 	bl	80088d0 <xTaskGetSchedulerState>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d001      	beq.n	8002e56 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002e52:	f006 fb29 	bl	80094a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002e60:	4802      	ldr	r0, [pc, #8]	; (8002e6c <TIM4_IRQHandler+0x10>)
 8002e62:	f001 ff55 	bl	8004d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20004a28 	.word	0x20004a28

08002e70 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e74:	4802      	ldr	r0, [pc, #8]	; (8002e80 <USART3_IRQHandler+0x10>)
 8002e76:	f003 f955 	bl	8006124 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20004a70 	.word	0x20004a70

08002e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e8c:	4a14      	ldr	r2, [pc, #80]	; (8002ee0 <_sbrk+0x5c>)
 8002e8e:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <_sbrk+0x60>)
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e98:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <_sbrk+0x64>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d102      	bne.n	8002ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <_sbrk+0x64>)
 8002ea2:	4a12      	ldr	r2, [pc, #72]	; (8002eec <_sbrk+0x68>)
 8002ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ea6:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <_sbrk+0x64>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4413      	add	r3, r2
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d207      	bcs.n	8002ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002eb4:	f006 ffa4 	bl	8009e00 <__errno>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	220c      	movs	r2, #12
 8002ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ec2:	e009      	b.n	8002ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ec4:	4b08      	ldr	r3, [pc, #32]	; (8002ee8 <_sbrk+0x64>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002eca:	4b07      	ldr	r3, [pc, #28]	; (8002ee8 <_sbrk+0x64>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	4a05      	ldr	r2, [pc, #20]	; (8002ee8 <_sbrk+0x64>)
 8002ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20020000 	.word	0x20020000
 8002ee4:	00000400 	.word	0x00000400
 8002ee8:	200000c4 	.word	0x200000c4
 8002eec:	200050b0 	.word	0x200050b0

08002ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ef4:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <SystemInit+0x20>)
 8002ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efa:	4a05      	ldr	r2, [pc, #20]	; (8002f10 <SystemInit+0x20>)
 8002efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f04:	bf00      	nop
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	e000ed00 	.word	0xe000ed00

08002f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f18:	480d      	ldr	r0, [pc, #52]	; (8002f50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f1a:	490e      	ldr	r1, [pc, #56]	; (8002f54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f1c:	4a0e      	ldr	r2, [pc, #56]	; (8002f58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f20:	e002      	b.n	8002f28 <LoopCopyDataInit>

08002f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f26:	3304      	adds	r3, #4

08002f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f2c:	d3f9      	bcc.n	8002f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f2e:	4a0b      	ldr	r2, [pc, #44]	; (8002f5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f30:	4c0b      	ldr	r4, [pc, #44]	; (8002f60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f34:	e001      	b.n	8002f3a <LoopFillZerobss>

08002f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f38:	3204      	adds	r2, #4

08002f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f3c:	d3fb      	bcc.n	8002f36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f3e:	f7ff ffd7 	bl	8002ef0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f42:	f006 ff63 	bl	8009e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f46:	f7fe fe1d 	bl	8001b84 <main>
  bx  lr    
 8002f4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f54:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002f58:	0800b27c 	.word	0x0800b27c
  ldr r2, =_sbss
 8002f5c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002f60:	200050ac 	.word	0x200050ac

08002f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f64:	e7fe      	b.n	8002f64 <ADC_IRQHandler>
	...

08002f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <HAL_Init+0x40>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a0d      	ldr	r2, [pc, #52]	; (8002fa8 <HAL_Init+0x40>)
 8002f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_Init+0x40>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a0a      	ldr	r2, [pc, #40]	; (8002fa8 <HAL_Init+0x40>)
 8002f7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f84:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <HAL_Init+0x40>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a07      	ldr	r2, [pc, #28]	; (8002fa8 <HAL_Init+0x40>)
 8002f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f90:	2003      	movs	r0, #3
 8002f92:	f000 fbb1 	bl	80036f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f96:	200f      	movs	r0, #15
 8002f98:	f000 f808 	bl	8002fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f9c:	f7ff fcbc 	bl	8002918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40023c00 	.word	0x40023c00

08002fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fb4:	4b12      	ldr	r3, [pc, #72]	; (8003000 <HAL_InitTick+0x54>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	4b12      	ldr	r3, [pc, #72]	; (8003004 <HAL_InitTick+0x58>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fbc9 	bl	8003762 <HAL_SYSTICK_Config>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e00e      	b.n	8002ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b0f      	cmp	r3, #15
 8002fde:	d80a      	bhi.n	8002ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fe8:	f000 fb91 	bl	800370e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fec:	4a06      	ldr	r2, [pc, #24]	; (8003008 <HAL_InitTick+0x5c>)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	e000      	b.n	8002ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	20000000 	.word	0x20000000
 8003004:	20000008 	.word	0x20000008
 8003008:	20000004 	.word	0x20000004

0800300c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003010:	4b06      	ldr	r3, [pc, #24]	; (800302c <HAL_IncTick+0x20>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_IncTick+0x24>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4413      	add	r3, r2
 800301c:	4a04      	ldr	r2, [pc, #16]	; (8003030 <HAL_IncTick+0x24>)
 800301e:	6013      	str	r3, [r2, #0]
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	20000008 	.word	0x20000008
 8003030:	20004c58 	.word	0x20004c58

08003034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return uwTick;
 8003038:	4b03      	ldr	r3, [pc, #12]	; (8003048 <HAL_GetTick+0x14>)
 800303a:	681b      	ldr	r3, [r3, #0]
}
 800303c:	4618      	mov	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	20004c58 	.word	0x20004c58

0800304c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003054:	f7ff ffee 	bl	8003034 <HAL_GetTick>
 8003058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003064:	d005      	beq.n	8003072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003066:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <HAL_Delay+0x44>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4413      	add	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003072:	bf00      	nop
 8003074:	f7ff ffde 	bl	8003034 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	429a      	cmp	r2, r3
 8003082:	d8f7      	bhi.n	8003074 <HAL_Delay+0x28>
  {
  }
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000008 	.word	0x20000008

08003094 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e033      	b.n	8003112 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff fc5c 	bl	8002970 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f003 0310 	and.w	r3, r3, #16
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d118      	bne.n	8003104 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030da:	f023 0302 	bic.w	r3, r3, #2
 80030de:	f043 0202 	orr.w	r2, r3, #2
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f93a 	bl	8003360 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f023 0303 	bic.w	r3, r3, #3
 80030fa:	f043 0201 	orr.w	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	641a      	str	r2, [r3, #64]	; 0x40
 8003102:	e001      	b.n	8003108 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003110:	7bfb      	ldrb	r3, [r7, #15]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x1c>
 8003134:	2302      	movs	r3, #2
 8003136:	e105      	b.n	8003344 <HAL_ADC_ConfigChannel+0x228>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b09      	cmp	r3, #9
 8003146:	d925      	bls.n	8003194 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68d9      	ldr	r1, [r3, #12]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	b29b      	uxth	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	4613      	mov	r3, r2
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	4413      	add	r3, r2
 800315c:	3b1e      	subs	r3, #30
 800315e:	2207      	movs	r2, #7
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43da      	mvns	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	400a      	ands	r2, r1
 800316c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68d9      	ldr	r1, [r3, #12]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	b29b      	uxth	r3, r3
 800317e:	4618      	mov	r0, r3
 8003180:	4603      	mov	r3, r0
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	4403      	add	r3, r0
 8003186:	3b1e      	subs	r3, #30
 8003188:	409a      	lsls	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	60da      	str	r2, [r3, #12]
 8003192:	e022      	b.n	80031da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6919      	ldr	r1, [r3, #16]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	461a      	mov	r2, r3
 80031a2:	4613      	mov	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	2207      	movs	r2, #7
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43da      	mvns	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	400a      	ands	r2, r1
 80031b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6919      	ldr	r1, [r3, #16]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	4618      	mov	r0, r3
 80031ca:	4603      	mov	r3, r0
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4403      	add	r3, r0
 80031d0:	409a      	lsls	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b06      	cmp	r3, #6
 80031e0:	d824      	bhi.n	800322c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	3b05      	subs	r3, #5
 80031f4:	221f      	movs	r2, #31
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43da      	mvns	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	400a      	ands	r2, r1
 8003202:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	b29b      	uxth	r3, r3
 8003210:	4618      	mov	r0, r3
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	3b05      	subs	r3, #5
 800321e:	fa00 f203 	lsl.w	r2, r0, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	635a      	str	r2, [r3, #52]	; 0x34
 800322a:	e04c      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b0c      	cmp	r3, #12
 8003232:	d824      	bhi.n	800327e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	3b23      	subs	r3, #35	; 0x23
 8003246:	221f      	movs	r2, #31
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	43da      	mvns	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	400a      	ands	r2, r1
 8003254:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	b29b      	uxth	r3, r3
 8003262:	4618      	mov	r0, r3
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	3b23      	subs	r3, #35	; 0x23
 8003270:	fa00 f203 	lsl.w	r2, r0, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	631a      	str	r2, [r3, #48]	; 0x30
 800327c:	e023      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	3b41      	subs	r3, #65	; 0x41
 8003290:	221f      	movs	r2, #31
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43da      	mvns	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	400a      	ands	r2, r1
 800329e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	4618      	mov	r0, r3
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	3b41      	subs	r3, #65	; 0x41
 80032ba:	fa00 f203 	lsl.w	r2, r0, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032c6:	4b22      	ldr	r3, [pc, #136]	; (8003350 <HAL_ADC_ConfigChannel+0x234>)
 80032c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a21      	ldr	r2, [pc, #132]	; (8003354 <HAL_ADC_ConfigChannel+0x238>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d109      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x1cc>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2b12      	cmp	r3, #18
 80032da:	d105      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a19      	ldr	r2, [pc, #100]	; (8003354 <HAL_ADC_ConfigChannel+0x238>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d123      	bne.n	800333a <HAL_ADC_ConfigChannel+0x21e>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b10      	cmp	r3, #16
 80032f8:	d003      	beq.n	8003302 <HAL_ADC_ConfigChannel+0x1e6>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b11      	cmp	r3, #17
 8003300:	d11b      	bne.n	800333a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b10      	cmp	r3, #16
 8003314:	d111      	bne.n	800333a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003316:	4b10      	ldr	r3, [pc, #64]	; (8003358 <HAL_ADC_ConfigChannel+0x23c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a10      	ldr	r2, [pc, #64]	; (800335c <HAL_ADC_ConfigChannel+0x240>)
 800331c:	fba2 2303 	umull	r2, r3, r2, r3
 8003320:	0c9a      	lsrs	r2, r3, #18
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800332c:	e002      	b.n	8003334 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	3b01      	subs	r3, #1
 8003332:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f9      	bne.n	800332e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	40012300 	.word	0x40012300
 8003354:	40012000 	.word	0x40012000
 8003358:	20000000 	.word	0x20000000
 800335c:	431bde83 	.word	0x431bde83

08003360 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003368:	4b79      	ldr	r3, [pc, #484]	; (8003550 <ADC_Init+0x1f0>)
 800336a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	431a      	orrs	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003394:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6859      	ldr	r1, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	021a      	lsls	r2, r3, #8
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80033b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6859      	ldr	r1, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6899      	ldr	r1, [r3, #8]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	4a58      	ldr	r2, [pc, #352]	; (8003554 <ADC_Init+0x1f4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d022      	beq.n	800343e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003406:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6899      	ldr	r1, [r3, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003428:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6899      	ldr	r1, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	609a      	str	r2, [r3, #8]
 800343c:	e00f      	b.n	800345e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800344c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800345c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0202 	bic.w	r2, r2, #2
 800346c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6899      	ldr	r1, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	7e1b      	ldrb	r3, [r3, #24]
 8003478:	005a      	lsls	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d01b      	beq.n	80034c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800349a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6859      	ldr	r1, [r3, #4]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	3b01      	subs	r3, #1
 80034b8:	035a      	lsls	r2, r3, #13
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]
 80034c2:	e007      	b.n	80034d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	051a      	lsls	r2, r3, #20
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003508:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6899      	ldr	r1, [r3, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003516:	025a      	lsls	r2, r3, #9
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800352e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6899      	ldr	r1, [r3, #8]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	029a      	lsls	r2, r3, #10
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	609a      	str	r2, [r3, #8]
}
 8003544:	bf00      	nop
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	40012300 	.word	0x40012300
 8003554:	0f000001 	.word	0x0f000001

08003558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <__NVIC_SetPriorityGrouping+0x44>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003574:	4013      	ands	r3, r2
 8003576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800358a:	4a04      	ldr	r2, [pc, #16]	; (800359c <__NVIC_SetPriorityGrouping+0x44>)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	60d3      	str	r3, [r2, #12]
}
 8003590:	bf00      	nop
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035a4:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <__NVIC_GetPriorityGrouping+0x18>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	0a1b      	lsrs	r3, r3, #8
 80035aa:	f003 0307 	and.w	r3, r3, #7
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	db0b      	blt.n	80035e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	f003 021f 	and.w	r2, r3, #31
 80035d4:	4907      	ldr	r1, [pc, #28]	; (80035f4 <__NVIC_EnableIRQ+0x38>)
 80035d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	2001      	movs	r0, #1
 80035de:	fa00 f202 	lsl.w	r2, r0, r2
 80035e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	e000e100 	.word	0xe000e100

080035f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	6039      	str	r1, [r7, #0]
 8003602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003608:	2b00      	cmp	r3, #0
 800360a:	db0a      	blt.n	8003622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	b2da      	uxtb	r2, r3
 8003610:	490c      	ldr	r1, [pc, #48]	; (8003644 <__NVIC_SetPriority+0x4c>)
 8003612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003616:	0112      	lsls	r2, r2, #4
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	440b      	add	r3, r1
 800361c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003620:	e00a      	b.n	8003638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	b2da      	uxtb	r2, r3
 8003626:	4908      	ldr	r1, [pc, #32]	; (8003648 <__NVIC_SetPriority+0x50>)
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	3b04      	subs	r3, #4
 8003630:	0112      	lsls	r2, r2, #4
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	440b      	add	r3, r1
 8003636:	761a      	strb	r2, [r3, #24]
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	e000e100 	.word	0xe000e100
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800364c:	b480      	push	{r7}
 800364e:	b089      	sub	sp, #36	; 0x24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f1c3 0307 	rsb	r3, r3, #7
 8003666:	2b04      	cmp	r3, #4
 8003668:	bf28      	it	cs
 800366a:	2304      	movcs	r3, #4
 800366c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3304      	adds	r3, #4
 8003672:	2b06      	cmp	r3, #6
 8003674:	d902      	bls.n	800367c <NVIC_EncodePriority+0x30>
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	3b03      	subs	r3, #3
 800367a:	e000      	b.n	800367e <NVIC_EncodePriority+0x32>
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43da      	mvns	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	401a      	ands	r2, r3
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003694:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	43d9      	mvns	r1, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a4:	4313      	orrs	r3, r2
         );
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3724      	adds	r7, #36	; 0x24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3b01      	subs	r3, #1
 80036c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036c4:	d301      	bcc.n	80036ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036c6:	2301      	movs	r3, #1
 80036c8:	e00f      	b.n	80036ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ca:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <SysTick_Config+0x40>)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036d2:	210f      	movs	r1, #15
 80036d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036d8:	f7ff ff8e 	bl	80035f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <SysTick_Config+0x40>)
 80036de:	2200      	movs	r2, #0
 80036e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036e2:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <SysTick_Config+0x40>)
 80036e4:	2207      	movs	r2, #7
 80036e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	e000e010 	.word	0xe000e010

080036f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff ff29 	bl	8003558 <__NVIC_SetPriorityGrouping>
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800370e:	b580      	push	{r7, lr}
 8003710:	b086      	sub	sp, #24
 8003712:	af00      	add	r7, sp, #0
 8003714:	4603      	mov	r3, r0
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003720:	f7ff ff3e 	bl	80035a0 <__NVIC_GetPriorityGrouping>
 8003724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	6978      	ldr	r0, [r7, #20]
 800372c:	f7ff ff8e 	bl	800364c <NVIC_EncodePriority>
 8003730:	4602      	mov	r2, r0
 8003732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003736:	4611      	mov	r1, r2
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff ff5d 	bl	80035f8 <__NVIC_SetPriority>
}
 800373e:	bf00      	nop
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	4603      	mov	r3, r0
 800374e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff ff31 	bl	80035bc <__NVIC_EnableIRQ>
}
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff ffa2 	bl	80036b4 <SysTick_Config>
 8003770:	4603      	mov	r3, r0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b084      	sub	sp, #16
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003786:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003788:	f7ff fc54 	bl	8003034 <HAL_GetTick>
 800378c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d008      	beq.n	80037ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2280      	movs	r2, #128	; 0x80
 800379e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e052      	b.n	8003852 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0216 	bic.w	r2, r2, #22
 80037ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695a      	ldr	r2, [r3, #20]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d103      	bne.n	80037dc <HAL_DMA_Abort+0x62>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d007      	beq.n	80037ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0208 	bic.w	r2, r2, #8
 80037ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0201 	bic.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037fc:	e013      	b.n	8003826 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037fe:	f7ff fc19 	bl	8003034 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b05      	cmp	r3, #5
 800380a:	d90c      	bls.n	8003826 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2203      	movs	r2, #3
 8003816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e015      	b.n	8003852 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e4      	bne.n	80037fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003838:	223f      	movs	r2, #63	; 0x3f
 800383a:	409a      	lsls	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d004      	beq.n	8003878 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2280      	movs	r2, #128	; 0x80
 8003872:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e00c      	b.n	8003892 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2205      	movs	r2, #5
 800387c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0201 	bic.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
	...

080038a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b089      	sub	sp, #36	; 0x24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038b6:	2300      	movs	r3, #0
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	e16b      	b.n	8003b94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038bc:	2201      	movs	r2, #1
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4013      	ands	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	f040 815a 	bne.w	8003b8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d005      	beq.n	80038f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d130      	bne.n	8003954 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	2203      	movs	r2, #3
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4013      	ands	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4313      	orrs	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003928:	2201      	movs	r2, #1
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 0201 	and.w	r2, r3, #1
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 0303 	and.w	r3, r3, #3
 800395c:	2b03      	cmp	r3, #3
 800395e:	d017      	beq.n	8003990 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	2203      	movs	r2, #3
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4313      	orrs	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 0303 	and.w	r3, r3, #3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d123      	bne.n	80039e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	08da      	lsrs	r2, r3, #3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3208      	adds	r2, #8
 80039a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	220f      	movs	r2, #15
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	43db      	mvns	r3, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	08da      	lsrs	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3208      	adds	r2, #8
 80039de:	69b9      	ldr	r1, [r7, #24]
 80039e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	2203      	movs	r2, #3
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4013      	ands	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 0203 	and.w	r2, r3, #3
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80b4 	beq.w	8003b8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	4b60      	ldr	r3, [pc, #384]	; (8003bac <HAL_GPIO_Init+0x30c>)
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2e:	4a5f      	ldr	r2, [pc, #380]	; (8003bac <HAL_GPIO_Init+0x30c>)
 8003a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a34:	6453      	str	r3, [r2, #68]	; 0x44
 8003a36:	4b5d      	ldr	r3, [pc, #372]	; (8003bac <HAL_GPIO_Init+0x30c>)
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a42:	4a5b      	ldr	r2, [pc, #364]	; (8003bb0 <HAL_GPIO_Init+0x310>)
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	089b      	lsrs	r3, r3, #2
 8003a48:	3302      	adds	r3, #2
 8003a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	220f      	movs	r2, #15
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4013      	ands	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a52      	ldr	r2, [pc, #328]	; (8003bb4 <HAL_GPIO_Init+0x314>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d02b      	beq.n	8003ac6 <HAL_GPIO_Init+0x226>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a51      	ldr	r2, [pc, #324]	; (8003bb8 <HAL_GPIO_Init+0x318>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d025      	beq.n	8003ac2 <HAL_GPIO_Init+0x222>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a50      	ldr	r2, [pc, #320]	; (8003bbc <HAL_GPIO_Init+0x31c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d01f      	beq.n	8003abe <HAL_GPIO_Init+0x21e>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a4f      	ldr	r2, [pc, #316]	; (8003bc0 <HAL_GPIO_Init+0x320>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d019      	beq.n	8003aba <HAL_GPIO_Init+0x21a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a4e      	ldr	r2, [pc, #312]	; (8003bc4 <HAL_GPIO_Init+0x324>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <HAL_GPIO_Init+0x216>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a4d      	ldr	r2, [pc, #308]	; (8003bc8 <HAL_GPIO_Init+0x328>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00d      	beq.n	8003ab2 <HAL_GPIO_Init+0x212>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a4c      	ldr	r2, [pc, #304]	; (8003bcc <HAL_GPIO_Init+0x32c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d007      	beq.n	8003aae <HAL_GPIO_Init+0x20e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a4b      	ldr	r2, [pc, #300]	; (8003bd0 <HAL_GPIO_Init+0x330>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d101      	bne.n	8003aaa <HAL_GPIO_Init+0x20a>
 8003aa6:	2307      	movs	r3, #7
 8003aa8:	e00e      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003aaa:	2308      	movs	r3, #8
 8003aac:	e00c      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003aae:	2306      	movs	r3, #6
 8003ab0:	e00a      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003ab2:	2305      	movs	r3, #5
 8003ab4:	e008      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	e006      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003aba:	2303      	movs	r3, #3
 8003abc:	e004      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e002      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	69fa      	ldr	r2, [r7, #28]
 8003aca:	f002 0203 	and.w	r2, r2, #3
 8003ace:	0092      	lsls	r2, r2, #2
 8003ad0:	4093      	lsls	r3, r2
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ad8:	4935      	ldr	r1, [pc, #212]	; (8003bb0 <HAL_GPIO_Init+0x310>)
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	089b      	lsrs	r3, r3, #2
 8003ade:	3302      	adds	r3, #2
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ae6:	4b3b      	ldr	r3, [pc, #236]	; (8003bd4 <HAL_GPIO_Init+0x334>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	43db      	mvns	r3, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4013      	ands	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b0a:	4a32      	ldr	r2, [pc, #200]	; (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b10:	4b30      	ldr	r3, [pc, #192]	; (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b34:	4a27      	ldr	r2, [pc, #156]	; (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b3a:	4b26      	ldr	r3, [pc, #152]	; (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	43db      	mvns	r3, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4013      	ands	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b5e:	4a1d      	ldr	r2, [pc, #116]	; (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b64:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4013      	ands	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b88:	4a12      	ldr	r2, [pc, #72]	; (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	3301      	adds	r3, #1
 8003b92:	61fb      	str	r3, [r7, #28]
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	2b0f      	cmp	r3, #15
 8003b98:	f67f ae90 	bls.w	80038bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b9c:	bf00      	nop
 8003b9e:	bf00      	nop
 8003ba0:	3724      	adds	r7, #36	; 0x24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40013800 	.word	0x40013800
 8003bb4:	40020000 	.word	0x40020000
 8003bb8:	40020400 	.word	0x40020400
 8003bbc:	40020800 	.word	0x40020800
 8003bc0:	40020c00 	.word	0x40020c00
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	40021400 	.word	0x40021400
 8003bcc:	40021800 	.word	0x40021800
 8003bd0:	40021c00 	.word	0x40021c00
 8003bd4:	40013c00 	.word	0x40013c00

08003bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	807b      	strh	r3, [r7, #2]
 8003be4:	4613      	mov	r3, r2
 8003be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003be8:	787b      	ldrb	r3, [r7, #1]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bee:	887a      	ldrh	r2, [r7, #2]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bf4:	e003      	b.n	8003bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bf6:	887b      	ldrh	r3, [r7, #2]
 8003bf8:	041a      	lsls	r2, r3, #16
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	619a      	str	r2, [r3, #24]
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
	...

08003c0c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003c12:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <HAL_PWR_EnableBkUpAccess+0x20>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_PWR_EnableBkUpAccess+0x24>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8003c1e:	687b      	ldr	r3, [r7, #4]
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	420e0020 	.word	0x420e0020
 8003c30:	40007000 	.word	0x40007000

08003c34 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8003c3a:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <HAL_PWR_DisableBkUpAccess+0x20>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8003c40:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <HAL_PWR_DisableBkUpAccess+0x24>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8003c46:	687b      	ldr	r3, [r7, #4]
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	420e0020 	.word	0x420e0020
 8003c58:	40007000 	.word	0x40007000

08003c5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e264      	b.n	8004138 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d075      	beq.n	8003d66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c7a:	4ba3      	ldr	r3, [pc, #652]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 030c 	and.w	r3, r3, #12
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d00c      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c86:	4ba0      	ldr	r3, [pc, #640]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	d112      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c92:	4b9d      	ldr	r3, [pc, #628]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c9e:	d10b      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca0:	4b99      	ldr	r3, [pc, #612]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d05b      	beq.n	8003d64 <HAL_RCC_OscConfig+0x108>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d157      	bne.n	8003d64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e23f      	b.n	8004138 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc0:	d106      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x74>
 8003cc2:	4b91      	ldr	r3, [pc, #580]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a90      	ldr	r2, [pc, #576]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	e01d      	b.n	8003d0c <HAL_RCC_OscConfig+0xb0>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cd8:	d10c      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x98>
 8003cda:	4b8b      	ldr	r3, [pc, #556]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a8a      	ldr	r2, [pc, #552]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	4b88      	ldr	r3, [pc, #544]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a87      	ldr	r2, [pc, #540]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	e00b      	b.n	8003d0c <HAL_RCC_OscConfig+0xb0>
 8003cf4:	4b84      	ldr	r3, [pc, #528]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a83      	ldr	r2, [pc, #524]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	4b81      	ldr	r3, [pc, #516]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a80      	ldr	r2, [pc, #512]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d013      	beq.n	8003d3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d14:	f7ff f98e 	bl	8003034 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d1c:	f7ff f98a 	bl	8003034 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b64      	cmp	r3, #100	; 0x64
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e204      	b.n	8004138 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2e:	4b76      	ldr	r3, [pc, #472]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0xc0>
 8003d3a:	e014      	b.n	8003d66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3c:	f7ff f97a 	bl	8003034 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d44:	f7ff f976 	bl	8003034 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b64      	cmp	r3, #100	; 0x64
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e1f0      	b.n	8004138 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d56:	4b6c      	ldr	r3, [pc, #432]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0xe8>
 8003d62:	e000      	b.n	8003d66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d063      	beq.n	8003e3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d72:	4b65      	ldr	r3, [pc, #404]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00b      	beq.n	8003d96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d7e:	4b62      	ldr	r3, [pc, #392]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d86:	2b08      	cmp	r3, #8
 8003d88:	d11c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d8a:	4b5f      	ldr	r3, [pc, #380]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d116      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d96:	4b5c      	ldr	r3, [pc, #368]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d005      	beq.n	8003dae <HAL_RCC_OscConfig+0x152>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d001      	beq.n	8003dae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e1c4      	b.n	8004138 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dae:	4b56      	ldr	r3, [pc, #344]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	4952      	ldr	r1, [pc, #328]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dc2:	e03a      	b.n	8003e3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d020      	beq.n	8003e0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dcc:	4b4f      	ldr	r3, [pc, #316]	; (8003f0c <HAL_RCC_OscConfig+0x2b0>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd2:	f7ff f92f 	bl	8003034 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dda:	f7ff f92b 	bl	8003034 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e1a5      	b.n	8004138 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dec:	4b46      	ldr	r3, [pc, #280]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df8:	4b43      	ldr	r3, [pc, #268]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4940      	ldr	r1, [pc, #256]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	600b      	str	r3, [r1, #0]
 8003e0c:	e015      	b.n	8003e3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e0e:	4b3f      	ldr	r3, [pc, #252]	; (8003f0c <HAL_RCC_OscConfig+0x2b0>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e14:	f7ff f90e 	bl	8003034 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e1c:	f7ff f90a 	bl	8003034 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e184      	b.n	8004138 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e2e:	4b36      	ldr	r3, [pc, #216]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1f0      	bne.n	8003e1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d030      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d016      	beq.n	8003e7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e4e:	4b30      	ldr	r3, [pc, #192]	; (8003f10 <HAL_RCC_OscConfig+0x2b4>)
 8003e50:	2201      	movs	r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e54:	f7ff f8ee 	bl	8003034 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e5c:	f7ff f8ea 	bl	8003034 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e164      	b.n	8004138 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e6e:	4b26      	ldr	r3, [pc, #152]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0x200>
 8003e7a:	e015      	b.n	8003ea8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e7c:	4b24      	ldr	r3, [pc, #144]	; (8003f10 <HAL_RCC_OscConfig+0x2b4>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e82:	f7ff f8d7 	bl	8003034 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e8a:	f7ff f8d3 	bl	8003034 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e14d      	b.n	8004138 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e9c:	4b1a      	ldr	r3, [pc, #104]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1f0      	bne.n	8003e8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80a0 	beq.w	8003ff6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eba:	4b13      	ldr	r3, [pc, #76]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10f      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60bb      	str	r3, [r7, #8]
 8003eca:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	4a0e      	ldr	r2, [pc, #56]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ed6:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <HAL_RCC_OscConfig+0x2ac>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ede:	60bb      	str	r3, [r7, #8]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee6:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <HAL_RCC_OscConfig+0x2b8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d121      	bne.n	8003f36 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ef2:	4b08      	ldr	r3, [pc, #32]	; (8003f14 <HAL_RCC_OscConfig+0x2b8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a07      	ldr	r2, [pc, #28]	; (8003f14 <HAL_RCC_OscConfig+0x2b8>)
 8003ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003efe:	f7ff f899 	bl	8003034 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f04:	e011      	b.n	8003f2a <HAL_RCC_OscConfig+0x2ce>
 8003f06:	bf00      	nop
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	42470000 	.word	0x42470000
 8003f10:	42470e80 	.word	0x42470e80
 8003f14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f18:	f7ff f88c 	bl	8003034 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e106      	b.n	8004138 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2a:	4b85      	ldr	r3, [pc, #532]	; (8004140 <HAL_RCC_OscConfig+0x4e4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d106      	bne.n	8003f4c <HAL_RCC_OscConfig+0x2f0>
 8003f3e:	4b81      	ldr	r3, [pc, #516]	; (8004144 <HAL_RCC_OscConfig+0x4e8>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f42:	4a80      	ldr	r2, [pc, #512]	; (8004144 <HAL_RCC_OscConfig+0x4e8>)
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	6713      	str	r3, [r2, #112]	; 0x70
 8003f4a:	e01c      	b.n	8003f86 <HAL_RCC_OscConfig+0x32a>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b05      	cmp	r3, #5
 8003f52:	d10c      	bne.n	8003f6e <HAL_RCC_OscConfig+0x312>
 8003f54:	4b7b      	ldr	r3, [pc, #492]	; (8004144 <HAL_RCC_OscConfig+0x4e8>)
 8003f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f58:	4a7a      	ldr	r2, [pc, #488]	; (8004144 <HAL_RCC_OscConfig+0x4e8>)
 8003f5a:	f043 0304 	orr.w	r3, r3, #4
 8003f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f60:	4b78      	ldr	r3, [pc, #480]	; (8004144 <HAL_RCC_OscConfig+0x4e8>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f64:	4a77      	ldr	r2, [pc, #476]	; (8004144 <HAL_RCC_OscConfig+0x4e8>)
 8003f66:	f043 0301 	orr.w	r3, r3, #1
 8003f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f6c:	e00b      	b.n	8003f86 <HAL_RCC_OscConfig+0x32a>
 8003f6e:	4b75      	ldr	r3, [pc, #468]	; (8004144 <HAL_RCC_OscConfig+0x4e8>)
 8003f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f72:	4a74      	ldr	r2, [pc, #464]	; (8004144 <HAL_RCC_OscConfig+0x4e8>)
 8003f74:	f023 0301 	bic.w	r3, r3, #1
 8003f78:	6713      	str	r3, [r2, #112]	; 0x70
 8003f7a:	4b72      	ldr	r3, [pc, #456]	; (8004144 <HAL_RCC_OscConfig+0x4e8>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	4a71      	ldr	r2, [pc, #452]	; (8004144 <HAL_RCC_OscConfig+0x4e8>)
 8003f80:	f023 0304 	bic.w	r3, r3, #4
 8003f84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d015      	beq.n	8003fba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8e:	f7ff f851 	bl	8003034 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f94:	e00a      	b.n	8003fac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f96:	f7ff f84d 	bl	8003034 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e0c5      	b.n	8004138 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fac:	4b65      	ldr	r3, [pc, #404]	; (8004144 <HAL_RCC_OscConfig+0x4e8>)
 8003fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0ee      	beq.n	8003f96 <HAL_RCC_OscConfig+0x33a>
 8003fb8:	e014      	b.n	8003fe4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fba:	f7ff f83b 	bl	8003034 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc0:	e00a      	b.n	8003fd8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fc2:	f7ff f837 	bl	8003034 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e0af      	b.n	8004138 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd8:	4b5a      	ldr	r3, [pc, #360]	; (8004144 <HAL_RCC_OscConfig+0x4e8>)
 8003fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1ee      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d105      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fea:	4b56      	ldr	r3, [pc, #344]	; (8004144 <HAL_RCC_OscConfig+0x4e8>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	4a55      	ldr	r2, [pc, #340]	; (8004144 <HAL_RCC_OscConfig+0x4e8>)
 8003ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 809b 	beq.w	8004136 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004000:	4b50      	ldr	r3, [pc, #320]	; (8004144 <HAL_RCC_OscConfig+0x4e8>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 030c 	and.w	r3, r3, #12
 8004008:	2b08      	cmp	r3, #8
 800400a:	d05c      	beq.n	80040c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d141      	bne.n	8004098 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004014:	4b4c      	ldr	r3, [pc, #304]	; (8004148 <HAL_RCC_OscConfig+0x4ec>)
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401a:	f7ff f80b 	bl	8003034 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004022:	f7ff f807 	bl	8003034 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e081      	b.n	8004138 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004034:	4b43      	ldr	r3, [pc, #268]	; (8004144 <HAL_RCC_OscConfig+0x4e8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1f0      	bne.n	8004022 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69da      	ldr	r2, [r3, #28]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	019b      	lsls	r3, r3, #6
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004056:	085b      	lsrs	r3, r3, #1
 8004058:	3b01      	subs	r3, #1
 800405a:	041b      	lsls	r3, r3, #16
 800405c:	431a      	orrs	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004062:	061b      	lsls	r3, r3, #24
 8004064:	4937      	ldr	r1, [pc, #220]	; (8004144 <HAL_RCC_OscConfig+0x4e8>)
 8004066:	4313      	orrs	r3, r2
 8004068:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800406a:	4b37      	ldr	r3, [pc, #220]	; (8004148 <HAL_RCC_OscConfig+0x4ec>)
 800406c:	2201      	movs	r2, #1
 800406e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004070:	f7fe ffe0 	bl	8003034 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004078:	f7fe ffdc 	bl	8003034 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e056      	b.n	8004138 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800408a:	4b2e      	ldr	r3, [pc, #184]	; (8004144 <HAL_RCC_OscConfig+0x4e8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0f0      	beq.n	8004078 <HAL_RCC_OscConfig+0x41c>
 8004096:	e04e      	b.n	8004136 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004098:	4b2b      	ldr	r3, [pc, #172]	; (8004148 <HAL_RCC_OscConfig+0x4ec>)
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409e:	f7fe ffc9 	bl	8003034 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040a6:	f7fe ffc5 	bl	8003034 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e03f      	b.n	8004138 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b8:	4b22      	ldr	r3, [pc, #136]	; (8004144 <HAL_RCC_OscConfig+0x4e8>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1f0      	bne.n	80040a6 <HAL_RCC_OscConfig+0x44a>
 80040c4:	e037      	b.n	8004136 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e032      	b.n	8004138 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040d2:	4b1c      	ldr	r3, [pc, #112]	; (8004144 <HAL_RCC_OscConfig+0x4e8>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d028      	beq.n	8004132 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d121      	bne.n	8004132 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d11a      	bne.n	8004132 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004102:	4013      	ands	r3, r2
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004108:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800410a:	4293      	cmp	r3, r2
 800410c:	d111      	bne.n	8004132 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004118:	085b      	lsrs	r3, r3, #1
 800411a:	3b01      	subs	r3, #1
 800411c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800411e:	429a      	cmp	r2, r3
 8004120:	d107      	bne.n	8004132 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800412e:	429a      	cmp	r2, r3
 8004130:	d001      	beq.n	8004136 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40007000 	.word	0x40007000
 8004144:	40023800 	.word	0x40023800
 8004148:	42470060 	.word	0x42470060

0800414c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0cc      	b.n	80042fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004160:	4b68      	ldr	r3, [pc, #416]	; (8004304 <HAL_RCC_ClockConfig+0x1b8>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d90c      	bls.n	8004188 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416e:	4b65      	ldr	r3, [pc, #404]	; (8004304 <HAL_RCC_ClockConfig+0x1b8>)
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004176:	4b63      	ldr	r3, [pc, #396]	; (8004304 <HAL_RCC_ClockConfig+0x1b8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d001      	beq.n	8004188 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e0b8      	b.n	80042fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d020      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d005      	beq.n	80041ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041a0:	4b59      	ldr	r3, [pc, #356]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	4a58      	ldr	r2, [pc, #352]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041b8:	4b53      	ldr	r3, [pc, #332]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	4a52      	ldr	r2, [pc, #328]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c4:	4b50      	ldr	r3, [pc, #320]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	494d      	ldr	r1, [pc, #308]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d044      	beq.n	800426c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d107      	bne.n	80041fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ea:	4b47      	ldr	r3, [pc, #284]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d119      	bne.n	800422a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e07f      	b.n	80042fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d003      	beq.n	800420a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004206:	2b03      	cmp	r3, #3
 8004208:	d107      	bne.n	800421a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800420a:	4b3f      	ldr	r3, [pc, #252]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d109      	bne.n	800422a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e06f      	b.n	80042fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800421a:	4b3b      	ldr	r3, [pc, #236]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e067      	b.n	80042fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800422a:	4b37      	ldr	r3, [pc, #220]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f023 0203 	bic.w	r2, r3, #3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	4934      	ldr	r1, [pc, #208]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 8004238:	4313      	orrs	r3, r2
 800423a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800423c:	f7fe fefa 	bl	8003034 <HAL_GetTick>
 8004240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004242:	e00a      	b.n	800425a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004244:	f7fe fef6 	bl	8003034 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004252:	4293      	cmp	r3, r2
 8004254:	d901      	bls.n	800425a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e04f      	b.n	80042fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425a:	4b2b      	ldr	r3, [pc, #172]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 020c 	and.w	r2, r3, #12
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	429a      	cmp	r2, r3
 800426a:	d1eb      	bne.n	8004244 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800426c:	4b25      	ldr	r3, [pc, #148]	; (8004304 <HAL_RCC_ClockConfig+0x1b8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d20c      	bcs.n	8004294 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427a:	4b22      	ldr	r3, [pc, #136]	; (8004304 <HAL_RCC_ClockConfig+0x1b8>)
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004282:	4b20      	ldr	r3, [pc, #128]	; (8004304 <HAL_RCC_ClockConfig+0x1b8>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d001      	beq.n	8004294 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e032      	b.n	80042fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d008      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042a0:	4b19      	ldr	r3, [pc, #100]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4916      	ldr	r1, [pc, #88]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0308 	and.w	r3, r3, #8
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d009      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042be:	4b12      	ldr	r3, [pc, #72]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	490e      	ldr	r1, [pc, #56]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042d2:	f000 f821 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 80042d6:	4602      	mov	r2, r0
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	091b      	lsrs	r3, r3, #4
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	490a      	ldr	r1, [pc, #40]	; (800430c <HAL_RCC_ClockConfig+0x1c0>)
 80042e4:	5ccb      	ldrb	r3, [r1, r3]
 80042e6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ea:	4a09      	ldr	r2, [pc, #36]	; (8004310 <HAL_RCC_ClockConfig+0x1c4>)
 80042ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042ee:	4b09      	ldr	r3, [pc, #36]	; (8004314 <HAL_RCC_ClockConfig+0x1c8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fe fe5a 	bl	8002fac <HAL_InitTick>

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40023c00 	.word	0x40023c00
 8004308:	40023800 	.word	0x40023800
 800430c:	0800a7bc 	.word	0x0800a7bc
 8004310:	20000000 	.word	0x20000000
 8004314:	20000004 	.word	0x20000004

08004318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004318:	b5b0      	push	{r4, r5, r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800431e:	2100      	movs	r1, #0
 8004320:	6079      	str	r1, [r7, #4]
 8004322:	2100      	movs	r1, #0
 8004324:	60f9      	str	r1, [r7, #12]
 8004326:	2100      	movs	r1, #0
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800432a:	2100      	movs	r1, #0
 800432c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800432e:	4952      	ldr	r1, [pc, #328]	; (8004478 <HAL_RCC_GetSysClockFreq+0x160>)
 8004330:	6889      	ldr	r1, [r1, #8]
 8004332:	f001 010c 	and.w	r1, r1, #12
 8004336:	2908      	cmp	r1, #8
 8004338:	d00d      	beq.n	8004356 <HAL_RCC_GetSysClockFreq+0x3e>
 800433a:	2908      	cmp	r1, #8
 800433c:	f200 8094 	bhi.w	8004468 <HAL_RCC_GetSysClockFreq+0x150>
 8004340:	2900      	cmp	r1, #0
 8004342:	d002      	beq.n	800434a <HAL_RCC_GetSysClockFreq+0x32>
 8004344:	2904      	cmp	r1, #4
 8004346:	d003      	beq.n	8004350 <HAL_RCC_GetSysClockFreq+0x38>
 8004348:	e08e      	b.n	8004468 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800434a:	4b4c      	ldr	r3, [pc, #304]	; (800447c <HAL_RCC_GetSysClockFreq+0x164>)
 800434c:	60bb      	str	r3, [r7, #8]
       break;
 800434e:	e08e      	b.n	800446e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004350:	4b4b      	ldr	r3, [pc, #300]	; (8004480 <HAL_RCC_GetSysClockFreq+0x168>)
 8004352:	60bb      	str	r3, [r7, #8]
      break;
 8004354:	e08b      	b.n	800446e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004356:	4948      	ldr	r1, [pc, #288]	; (8004478 <HAL_RCC_GetSysClockFreq+0x160>)
 8004358:	6849      	ldr	r1, [r1, #4]
 800435a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800435e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004360:	4945      	ldr	r1, [pc, #276]	; (8004478 <HAL_RCC_GetSysClockFreq+0x160>)
 8004362:	6849      	ldr	r1, [r1, #4]
 8004364:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004368:	2900      	cmp	r1, #0
 800436a:	d024      	beq.n	80043b6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800436c:	4942      	ldr	r1, [pc, #264]	; (8004478 <HAL_RCC_GetSysClockFreq+0x160>)
 800436e:	6849      	ldr	r1, [r1, #4]
 8004370:	0989      	lsrs	r1, r1, #6
 8004372:	4608      	mov	r0, r1
 8004374:	f04f 0100 	mov.w	r1, #0
 8004378:	f240 14ff 	movw	r4, #511	; 0x1ff
 800437c:	f04f 0500 	mov.w	r5, #0
 8004380:	ea00 0204 	and.w	r2, r0, r4
 8004384:	ea01 0305 	and.w	r3, r1, r5
 8004388:	493d      	ldr	r1, [pc, #244]	; (8004480 <HAL_RCC_GetSysClockFreq+0x168>)
 800438a:	fb01 f003 	mul.w	r0, r1, r3
 800438e:	2100      	movs	r1, #0
 8004390:	fb01 f102 	mul.w	r1, r1, r2
 8004394:	1844      	adds	r4, r0, r1
 8004396:	493a      	ldr	r1, [pc, #232]	; (8004480 <HAL_RCC_GetSysClockFreq+0x168>)
 8004398:	fba2 0101 	umull	r0, r1, r2, r1
 800439c:	1863      	adds	r3, r4, r1
 800439e:	4619      	mov	r1, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	461a      	mov	r2, r3
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	f7fc fc08 	bl	8000bbc <__aeabi_uldivmod>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4613      	mov	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	e04a      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b6:	4b30      	ldr	r3, [pc, #192]	; (8004478 <HAL_RCC_GetSysClockFreq+0x160>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	099b      	lsrs	r3, r3, #6
 80043bc:	461a      	mov	r2, r3
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043c6:	f04f 0100 	mov.w	r1, #0
 80043ca:	ea02 0400 	and.w	r4, r2, r0
 80043ce:	ea03 0501 	and.w	r5, r3, r1
 80043d2:	4620      	mov	r0, r4
 80043d4:	4629      	mov	r1, r5
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	014b      	lsls	r3, r1, #5
 80043e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043e4:	0142      	lsls	r2, r0, #5
 80043e6:	4610      	mov	r0, r2
 80043e8:	4619      	mov	r1, r3
 80043ea:	1b00      	subs	r0, r0, r4
 80043ec:	eb61 0105 	sbc.w	r1, r1, r5
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	018b      	lsls	r3, r1, #6
 80043fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043fe:	0182      	lsls	r2, r0, #6
 8004400:	1a12      	subs	r2, r2, r0
 8004402:	eb63 0301 	sbc.w	r3, r3, r1
 8004406:	f04f 0000 	mov.w	r0, #0
 800440a:	f04f 0100 	mov.w	r1, #0
 800440e:	00d9      	lsls	r1, r3, #3
 8004410:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004414:	00d0      	lsls	r0, r2, #3
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	1912      	adds	r2, r2, r4
 800441c:	eb45 0303 	adc.w	r3, r5, r3
 8004420:	f04f 0000 	mov.w	r0, #0
 8004424:	f04f 0100 	mov.w	r1, #0
 8004428:	0299      	lsls	r1, r3, #10
 800442a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800442e:	0290      	lsls	r0, r2, #10
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4610      	mov	r0, r2
 8004436:	4619      	mov	r1, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	461a      	mov	r2, r3
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	f7fc fbbc 	bl	8000bbc <__aeabi_uldivmod>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4613      	mov	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800444c:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <HAL_RCC_GetSysClockFreq+0x160>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	0c1b      	lsrs	r3, r3, #16
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	3301      	adds	r3, #1
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	fbb2 f3f3 	udiv	r3, r2, r3
 8004464:	60bb      	str	r3, [r7, #8]
      break;
 8004466:	e002      	b.n	800446e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004468:	4b04      	ldr	r3, [pc, #16]	; (800447c <HAL_RCC_GetSysClockFreq+0x164>)
 800446a:	60bb      	str	r3, [r7, #8]
      break;
 800446c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800446e:	68bb      	ldr	r3, [r7, #8]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bdb0      	pop	{r4, r5, r7, pc}
 8004478:	40023800 	.word	0x40023800
 800447c:	00f42400 	.word	0x00f42400
 8004480:	017d7840 	.word	0x017d7840

08004484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004488:	4b03      	ldr	r3, [pc, #12]	; (8004498 <HAL_RCC_GetHCLKFreq+0x14>)
 800448a:	681b      	ldr	r3, [r3, #0]
}
 800448c:	4618      	mov	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	20000000 	.word	0x20000000

0800449c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044a0:	f7ff fff0 	bl	8004484 <HAL_RCC_GetHCLKFreq>
 80044a4:	4602      	mov	r2, r0
 80044a6:	4b05      	ldr	r3, [pc, #20]	; (80044bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	0a9b      	lsrs	r3, r3, #10
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	4903      	ldr	r1, [pc, #12]	; (80044c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044b2:	5ccb      	ldrb	r3, [r1, r3]
 80044b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40023800 	.word	0x40023800
 80044c0:	0800a7cc 	.word	0x0800a7cc

080044c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044c8:	f7ff ffdc 	bl	8004484 <HAL_RCC_GetHCLKFreq>
 80044cc:	4602      	mov	r2, r0
 80044ce:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	0b5b      	lsrs	r3, r3, #13
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	4903      	ldr	r1, [pc, #12]	; (80044e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044da:	5ccb      	ldrb	r3, [r1, r3]
 80044dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40023800 	.word	0x40023800
 80044e8:	0800a7cc 	.word	0x0800a7cc

080044ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e041      	b.n	8004582 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fe faa0 	bl	8002a58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3304      	adds	r3, #4
 8004528:	4619      	mov	r1, r3
 800452a:	4610      	mov	r0, r2
 800452c:	f000 ff8a 	bl	8005444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b082      	sub	sp, #8
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e041      	b.n	8004620 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d106      	bne.n	80045b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7fe fb5d 	bl	8002c70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2202      	movs	r2, #2
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3304      	adds	r3, #4
 80045c6:	4619      	mov	r1, r3
 80045c8:	4610      	mov	r0, r2
 80045ca:	f000 ff3b 	bl	8005444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d109      	bne.n	800464c <HAL_TIM_PWM_Start+0x24>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b01      	cmp	r3, #1
 8004642:	bf14      	ite	ne
 8004644:	2301      	movne	r3, #1
 8004646:	2300      	moveq	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	e022      	b.n	8004692 <HAL_TIM_PWM_Start+0x6a>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2b04      	cmp	r3, #4
 8004650:	d109      	bne.n	8004666 <HAL_TIM_PWM_Start+0x3e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b01      	cmp	r3, #1
 800465c:	bf14      	ite	ne
 800465e:	2301      	movne	r3, #1
 8004660:	2300      	moveq	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	e015      	b.n	8004692 <HAL_TIM_PWM_Start+0x6a>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b08      	cmp	r3, #8
 800466a:	d109      	bne.n	8004680 <HAL_TIM_PWM_Start+0x58>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b01      	cmp	r3, #1
 8004676:	bf14      	ite	ne
 8004678:	2301      	movne	r3, #1
 800467a:	2300      	moveq	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	e008      	b.n	8004692 <HAL_TIM_PWM_Start+0x6a>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	bf14      	ite	ne
 800468c:	2301      	movne	r3, #1
 800468e:	2300      	moveq	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e07c      	b.n	8004794 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d104      	bne.n	80046aa <HAL_TIM_PWM_Start+0x82>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046a8:	e013      	b.n	80046d2 <HAL_TIM_PWM_Start+0xaa>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d104      	bne.n	80046ba <HAL_TIM_PWM_Start+0x92>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046b8:	e00b      	b.n	80046d2 <HAL_TIM_PWM_Start+0xaa>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d104      	bne.n	80046ca <HAL_TIM_PWM_Start+0xa2>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046c8:	e003      	b.n	80046d2 <HAL_TIM_PWM_Start+0xaa>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2202      	movs	r2, #2
 80046ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2201      	movs	r2, #1
 80046d8:	6839      	ldr	r1, [r7, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f001 fac6 	bl	8005c6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a2d      	ldr	r2, [pc, #180]	; (800479c <HAL_TIM_PWM_Start+0x174>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d004      	beq.n	80046f4 <HAL_TIM_PWM_Start+0xcc>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a2c      	ldr	r2, [pc, #176]	; (80047a0 <HAL_TIM_PWM_Start+0x178>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d101      	bne.n	80046f8 <HAL_TIM_PWM_Start+0xd0>
 80046f4:	2301      	movs	r3, #1
 80046f6:	e000      	b.n	80046fa <HAL_TIM_PWM_Start+0xd2>
 80046f8:	2300      	movs	r3, #0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d007      	beq.n	800470e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800470c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a22      	ldr	r2, [pc, #136]	; (800479c <HAL_TIM_PWM_Start+0x174>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d022      	beq.n	800475e <HAL_TIM_PWM_Start+0x136>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004720:	d01d      	beq.n	800475e <HAL_TIM_PWM_Start+0x136>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a1f      	ldr	r2, [pc, #124]	; (80047a4 <HAL_TIM_PWM_Start+0x17c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d018      	beq.n	800475e <HAL_TIM_PWM_Start+0x136>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a1d      	ldr	r2, [pc, #116]	; (80047a8 <HAL_TIM_PWM_Start+0x180>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d013      	beq.n	800475e <HAL_TIM_PWM_Start+0x136>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a1c      	ldr	r2, [pc, #112]	; (80047ac <HAL_TIM_PWM_Start+0x184>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d00e      	beq.n	800475e <HAL_TIM_PWM_Start+0x136>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a16      	ldr	r2, [pc, #88]	; (80047a0 <HAL_TIM_PWM_Start+0x178>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d009      	beq.n	800475e <HAL_TIM_PWM_Start+0x136>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a18      	ldr	r2, [pc, #96]	; (80047b0 <HAL_TIM_PWM_Start+0x188>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d004      	beq.n	800475e <HAL_TIM_PWM_Start+0x136>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a16      	ldr	r2, [pc, #88]	; (80047b4 <HAL_TIM_PWM_Start+0x18c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d111      	bne.n	8004782 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2b06      	cmp	r3, #6
 800476e:	d010      	beq.n	8004792 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004780:	e007      	b.n	8004792 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f042 0201 	orr.w	r2, r2, #1
 8004790:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40010000 	.word	0x40010000
 80047a0:	40010400 	.word	0x40010400
 80047a4:	40000400 	.word	0x40000400
 80047a8:	40000800 	.word	0x40000800
 80047ac:	40000c00 	.word	0x40000c00
 80047b0:	40014000 	.word	0x40014000
 80047b4:	40001800 	.word	0x40001800

080047b8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e041      	b.n	800484e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7fe f9f6 	bl	8002bd0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3304      	adds	r3, #4
 80047f4:	4619      	mov	r1, r3
 80047f6:	4610      	mov	r0, r2
 80047f8:	f000 fe24 	bl	8005444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d104      	bne.n	8004876 <HAL_TIM_IC_Start_IT+0x1e>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004872:	b2db      	uxtb	r3, r3
 8004874:	e013      	b.n	800489e <HAL_TIM_IC_Start_IT+0x46>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b04      	cmp	r3, #4
 800487a:	d104      	bne.n	8004886 <HAL_TIM_IC_Start_IT+0x2e>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004882:	b2db      	uxtb	r3, r3
 8004884:	e00b      	b.n	800489e <HAL_TIM_IC_Start_IT+0x46>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b08      	cmp	r3, #8
 800488a:	d104      	bne.n	8004896 <HAL_TIM_IC_Start_IT+0x3e>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004892:	b2db      	uxtb	r3, r3
 8004894:	e003      	b.n	800489e <HAL_TIM_IC_Start_IT+0x46>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800489c:	b2db      	uxtb	r3, r3
 800489e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d104      	bne.n	80048b0 <HAL_TIM_IC_Start_IT+0x58>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	e013      	b.n	80048d8 <HAL_TIM_IC_Start_IT+0x80>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d104      	bne.n	80048c0 <HAL_TIM_IC_Start_IT+0x68>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	e00b      	b.n	80048d8 <HAL_TIM_IC_Start_IT+0x80>
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d104      	bne.n	80048d0 <HAL_TIM_IC_Start_IT+0x78>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	e003      	b.n	80048d8 <HAL_TIM_IC_Start_IT+0x80>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80048da:	7bbb      	ldrb	r3, [r7, #14]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d102      	bne.n	80048e6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80048e0:	7b7b      	ldrb	r3, [r7, #13]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d001      	beq.n	80048ea <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e0cc      	b.n	8004a84 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d104      	bne.n	80048fa <HAL_TIM_IC_Start_IT+0xa2>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048f8:	e013      	b.n	8004922 <HAL_TIM_IC_Start_IT+0xca>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d104      	bne.n	800490a <HAL_TIM_IC_Start_IT+0xb2>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004908:	e00b      	b.n	8004922 <HAL_TIM_IC_Start_IT+0xca>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b08      	cmp	r3, #8
 800490e:	d104      	bne.n	800491a <HAL_TIM_IC_Start_IT+0xc2>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004918:	e003      	b.n	8004922 <HAL_TIM_IC_Start_IT+0xca>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2202      	movs	r2, #2
 800491e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d104      	bne.n	8004932 <HAL_TIM_IC_Start_IT+0xda>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004930:	e013      	b.n	800495a <HAL_TIM_IC_Start_IT+0x102>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b04      	cmp	r3, #4
 8004936:	d104      	bne.n	8004942 <HAL_TIM_IC_Start_IT+0xea>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004940:	e00b      	b.n	800495a <HAL_TIM_IC_Start_IT+0x102>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b08      	cmp	r3, #8
 8004946:	d104      	bne.n	8004952 <HAL_TIM_IC_Start_IT+0xfa>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004950:	e003      	b.n	800495a <HAL_TIM_IC_Start_IT+0x102>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2202      	movs	r2, #2
 8004956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b0c      	cmp	r3, #12
 800495e:	d841      	bhi.n	80049e4 <HAL_TIM_IC_Start_IT+0x18c>
 8004960:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <HAL_TIM_IC_Start_IT+0x110>)
 8004962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004966:	bf00      	nop
 8004968:	0800499d 	.word	0x0800499d
 800496c:	080049e5 	.word	0x080049e5
 8004970:	080049e5 	.word	0x080049e5
 8004974:	080049e5 	.word	0x080049e5
 8004978:	080049af 	.word	0x080049af
 800497c:	080049e5 	.word	0x080049e5
 8004980:	080049e5 	.word	0x080049e5
 8004984:	080049e5 	.word	0x080049e5
 8004988:	080049c1 	.word	0x080049c1
 800498c:	080049e5 	.word	0x080049e5
 8004990:	080049e5 	.word	0x080049e5
 8004994:	080049e5 	.word	0x080049e5
 8004998:	080049d3 	.word	0x080049d3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0202 	orr.w	r2, r2, #2
 80049aa:	60da      	str	r2, [r3, #12]
      break;
 80049ac:	e01d      	b.n	80049ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68da      	ldr	r2, [r3, #12]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f042 0204 	orr.w	r2, r2, #4
 80049bc:	60da      	str	r2, [r3, #12]
      break;
 80049be:	e014      	b.n	80049ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0208 	orr.w	r2, r2, #8
 80049ce:	60da      	str	r2, [r3, #12]
      break;
 80049d0:	e00b      	b.n	80049ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0210 	orr.w	r2, r2, #16
 80049e0:	60da      	str	r2, [r3, #12]
      break;
 80049e2:	e002      	b.n	80049ea <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	73fb      	strb	r3, [r7, #15]
      break;
 80049e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d148      	bne.n	8004a82 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2201      	movs	r2, #1
 80049f6:	6839      	ldr	r1, [r7, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f001 f937 	bl	8005c6c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a22      	ldr	r2, [pc, #136]	; (8004a8c <HAL_TIM_IC_Start_IT+0x234>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d022      	beq.n	8004a4e <HAL_TIM_IC_Start_IT+0x1f6>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a10:	d01d      	beq.n	8004a4e <HAL_TIM_IC_Start_IT+0x1f6>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a1e      	ldr	r2, [pc, #120]	; (8004a90 <HAL_TIM_IC_Start_IT+0x238>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d018      	beq.n	8004a4e <HAL_TIM_IC_Start_IT+0x1f6>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a1c      	ldr	r2, [pc, #112]	; (8004a94 <HAL_TIM_IC_Start_IT+0x23c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <HAL_TIM_IC_Start_IT+0x1f6>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1b      	ldr	r2, [pc, #108]	; (8004a98 <HAL_TIM_IC_Start_IT+0x240>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00e      	beq.n	8004a4e <HAL_TIM_IC_Start_IT+0x1f6>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a19      	ldr	r2, [pc, #100]	; (8004a9c <HAL_TIM_IC_Start_IT+0x244>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d009      	beq.n	8004a4e <HAL_TIM_IC_Start_IT+0x1f6>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a18      	ldr	r2, [pc, #96]	; (8004aa0 <HAL_TIM_IC_Start_IT+0x248>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d004      	beq.n	8004a4e <HAL_TIM_IC_Start_IT+0x1f6>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a16      	ldr	r2, [pc, #88]	; (8004aa4 <HAL_TIM_IC_Start_IT+0x24c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d111      	bne.n	8004a72 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b06      	cmp	r3, #6
 8004a5e:	d010      	beq.n	8004a82 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0201 	orr.w	r2, r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a70:	e007      	b.n	8004a82 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 0201 	orr.w	r2, r2, #1
 8004a80:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	40010000 	.word	0x40010000
 8004a90:	40000400 	.word	0x40000400
 8004a94:	40000800 	.word	0x40000800
 8004a98:	40000c00 	.word	0x40000c00
 8004a9c:	40010400 	.word	0x40010400
 8004aa0:	40014000 	.word	0x40014000
 8004aa4:	40001800 	.word	0x40001800

08004aa8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e097      	b.n	8004bec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d106      	bne.n	8004ad6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7fd ffe3 	bl	8002a9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2202      	movs	r2, #2
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6812      	ldr	r2, [r2, #0]
 8004ae8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aec:	f023 0307 	bic.w	r3, r3, #7
 8004af0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	3304      	adds	r3, #4
 8004afa:	4619      	mov	r1, r3
 8004afc:	4610      	mov	r0, r2
 8004afe:	f000 fca1 	bl	8005444 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2a:	f023 0303 	bic.w	r3, r3, #3
 8004b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	021b      	lsls	r3, r3, #8
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004b48:	f023 030c 	bic.w	r3, r3, #12
 8004b4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	021b      	lsls	r3, r3, #8
 8004b64:	4313      	orrs	r3, r2
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	011a      	lsls	r2, r3, #4
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	031b      	lsls	r3, r3, #12
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004b86:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004b8e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	011b      	lsls	r3, r3, #4
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c04:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c0c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c14:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c1c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d110      	bne.n	8004c46 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d102      	bne.n	8004c30 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c2a:	7b7b      	ldrb	r3, [r7, #13]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d001      	beq.n	8004c34 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e069      	b.n	8004d08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c44:	e031      	b.n	8004caa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d110      	bne.n	8004c6e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c4c:	7bbb      	ldrb	r3, [r7, #14]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d102      	bne.n	8004c58 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c52:	7b3b      	ldrb	r3, [r7, #12]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d001      	beq.n	8004c5c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e055      	b.n	8004d08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c6c:	e01d      	b.n	8004caa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d108      	bne.n	8004c86 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c74:	7bbb      	ldrb	r3, [r7, #14]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d105      	bne.n	8004c86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c7a:	7b7b      	ldrb	r3, [r7, #13]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d102      	bne.n	8004c86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c80:	7b3b      	ldrb	r3, [r7, #12]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d001      	beq.n	8004c8a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e03e      	b.n	8004d08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2202      	movs	r2, #2
 8004c96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_TIM_Encoder_Start+0xc4>
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d008      	beq.n	8004cc8 <HAL_TIM_Encoder_Start+0xd4>
 8004cb6:	e00f      	b.n	8004cd8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 ffd3 	bl	8005c6c <TIM_CCxChannelCmd>
      break;
 8004cc6:	e016      	b.n	8004cf6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	2104      	movs	r1, #4
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 ffcb 	bl	8005c6c <TIM_CCxChannelCmd>
      break;
 8004cd6:	e00e      	b.n	8004cf6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	2100      	movs	r1, #0
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 ffc3 	bl	8005c6c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2201      	movs	r2, #1
 8004cec:	2104      	movs	r1, #4
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 ffbc 	bl	8005c6c <TIM_CCxChannelCmd>
      break;
 8004cf4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f042 0201 	orr.w	r2, r2, #1
 8004d04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d122      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d11b      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0202 	mvn.w	r2, #2
 8004d3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fc f938 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 8004d58:	e005      	b.n	8004d66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fb54 	bl	8005408 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fb5b 	bl	800541c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d122      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d11b      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f06f 0204 	mvn.w	r2, #4
 8004d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2202      	movs	r2, #2
 8004d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7fc f90e 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 8004dac:	e005      	b.n	8004dba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fb2a 	bl	8005408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 fb31 	bl	800541c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f003 0308 	and.w	r3, r3, #8
 8004dca:	2b08      	cmp	r3, #8
 8004dcc:	d122      	bne.n	8004e14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d11b      	bne.n	8004e14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0208 	mvn.w	r2, #8
 8004de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2204      	movs	r2, #4
 8004dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7fc f8e4 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 8004e00:	e005      	b.n	8004e0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fb00 	bl	8005408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fb07 	bl	800541c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	f003 0310 	and.w	r3, r3, #16
 8004e1e:	2b10      	cmp	r3, #16
 8004e20:	d122      	bne.n	8004e68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f003 0310 	and.w	r3, r3, #16
 8004e2c:	2b10      	cmp	r3, #16
 8004e2e:	d11b      	bne.n	8004e68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f06f 0210 	mvn.w	r2, #16
 8004e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fc f8ba 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 8004e54:	e005      	b.n	8004e62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fad6 	bl	8005408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fadd 	bl	800541c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d10e      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d107      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0201 	mvn.w	r2, #1
 8004e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fab0 	bl	80053f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9e:	2b80      	cmp	r3, #128	; 0x80
 8004ea0:	d10e      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eac:	2b80      	cmp	r3, #128	; 0x80
 8004eae:	d107      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 ffd4 	bl	8005e68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eca:	2b40      	cmp	r3, #64	; 0x40
 8004ecc:	d10e      	bne.n	8004eec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed8:	2b40      	cmp	r3, #64	; 0x40
 8004eda:	d107      	bne.n	8004eec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 faa2 	bl	8005430 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b20      	cmp	r3, #32
 8004ef8:	d10e      	bne.n	8004f18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d107      	bne.n	8004f18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0220 	mvn.w	r2, #32
 8004f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 ff9e 	bl	8005e54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f18:	bf00      	nop
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d101      	bne.n	8004f3e <HAL_TIM_IC_ConfigChannel+0x1e>
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	e088      	b.n	8005050 <HAL_TIM_IC_ConfigChannel+0x130>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d11b      	bne.n	8004f84 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6818      	ldr	r0, [r3, #0]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	6819      	ldr	r1, [r3, #0]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f000 fcc2 	bl	80058e4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 020c 	bic.w	r2, r2, #12
 8004f6e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6999      	ldr	r1, [r3, #24]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	619a      	str	r2, [r3, #24]
 8004f82:	e060      	b.n	8005046 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d11c      	bne.n	8004fc4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6818      	ldr	r0, [r3, #0]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	6819      	ldr	r1, [r3, #0]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f000 fd46 	bl	8005a2a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	699a      	ldr	r2, [r3, #24]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004fac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6999      	ldr	r1, [r3, #24]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	021a      	lsls	r2, r3, #8
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	619a      	str	r2, [r3, #24]
 8004fc2:	e040      	b.n	8005046 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b08      	cmp	r3, #8
 8004fc8:	d11b      	bne.n	8005002 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6818      	ldr	r0, [r3, #0]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	6819      	ldr	r1, [r3, #0]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f000 fd93 	bl	8005b04 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69da      	ldr	r2, [r3, #28]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 020c 	bic.w	r2, r2, #12
 8004fec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69d9      	ldr	r1, [r3, #28]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	61da      	str	r2, [r3, #28]
 8005000:	e021      	b.n	8005046 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b0c      	cmp	r3, #12
 8005006:	d11c      	bne.n	8005042 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6818      	ldr	r0, [r3, #0]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	6819      	ldr	r1, [r3, #0]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f000 fdb0 	bl	8005b7c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	69da      	ldr	r2, [r3, #28]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800502a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	69d9      	ldr	r1, [r3, #28]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	021a      	lsls	r2, r3, #8
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	61da      	str	r2, [r3, #28]
 8005040:	e001      	b.n	8005046 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800504e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005064:	2300      	movs	r3, #0
 8005066:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800506e:	2b01      	cmp	r3, #1
 8005070:	d101      	bne.n	8005076 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005072:	2302      	movs	r3, #2
 8005074:	e0ae      	b.n	80051d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b0c      	cmp	r3, #12
 8005082:	f200 809f 	bhi.w	80051c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005086:	a201      	add	r2, pc, #4	; (adr r2, 800508c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508c:	080050c1 	.word	0x080050c1
 8005090:	080051c5 	.word	0x080051c5
 8005094:	080051c5 	.word	0x080051c5
 8005098:	080051c5 	.word	0x080051c5
 800509c:	08005101 	.word	0x08005101
 80050a0:	080051c5 	.word	0x080051c5
 80050a4:	080051c5 	.word	0x080051c5
 80050a8:	080051c5 	.word	0x080051c5
 80050ac:	08005143 	.word	0x08005143
 80050b0:	080051c5 	.word	0x080051c5
 80050b4:	080051c5 	.word	0x080051c5
 80050b8:	080051c5 	.word	0x080051c5
 80050bc:	08005183 	.word	0x08005183
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68b9      	ldr	r1, [r7, #8]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fa5c 	bl	8005584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	699a      	ldr	r2, [r3, #24]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0208 	orr.w	r2, r2, #8
 80050da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699a      	ldr	r2, [r3, #24]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0204 	bic.w	r2, r2, #4
 80050ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6999      	ldr	r1, [r3, #24]
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	691a      	ldr	r2, [r3, #16]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	619a      	str	r2, [r3, #24]
      break;
 80050fe:	e064      	b.n	80051ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	4618      	mov	r0, r3
 8005108:	f000 faac 	bl	8005664 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699a      	ldr	r2, [r3, #24]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800511a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699a      	ldr	r2, [r3, #24]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800512a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6999      	ldr	r1, [r3, #24]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	021a      	lsls	r2, r3, #8
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	619a      	str	r2, [r3, #24]
      break;
 8005140:	e043      	b.n	80051ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68b9      	ldr	r1, [r7, #8]
 8005148:	4618      	mov	r0, r3
 800514a:	f000 fb01 	bl	8005750 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69da      	ldr	r2, [r3, #28]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f042 0208 	orr.w	r2, r2, #8
 800515c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	69da      	ldr	r2, [r3, #28]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0204 	bic.w	r2, r2, #4
 800516c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	69d9      	ldr	r1, [r3, #28]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	61da      	str	r2, [r3, #28]
      break;
 8005180:	e023      	b.n	80051ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fb55 	bl	8005838 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69da      	ldr	r2, [r3, #28]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800519c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69da      	ldr	r2, [r3, #28]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69d9      	ldr	r1, [r3, #28]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	021a      	lsls	r2, r3, #8
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	61da      	str	r2, [r3, #28]
      break;
 80051c2:	e002      	b.n	80051ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	75fb      	strb	r3, [r7, #23]
      break;
 80051c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d101      	bne.n	80051f8 <HAL_TIM_ConfigClockSource+0x1c>
 80051f4:	2302      	movs	r3, #2
 80051f6:	e0b4      	b.n	8005362 <HAL_TIM_ConfigClockSource+0x186>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800521e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005230:	d03e      	beq.n	80052b0 <HAL_TIM_ConfigClockSource+0xd4>
 8005232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005236:	f200 8087 	bhi.w	8005348 <HAL_TIM_ConfigClockSource+0x16c>
 800523a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800523e:	f000 8086 	beq.w	800534e <HAL_TIM_ConfigClockSource+0x172>
 8005242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005246:	d87f      	bhi.n	8005348 <HAL_TIM_ConfigClockSource+0x16c>
 8005248:	2b70      	cmp	r3, #112	; 0x70
 800524a:	d01a      	beq.n	8005282 <HAL_TIM_ConfigClockSource+0xa6>
 800524c:	2b70      	cmp	r3, #112	; 0x70
 800524e:	d87b      	bhi.n	8005348 <HAL_TIM_ConfigClockSource+0x16c>
 8005250:	2b60      	cmp	r3, #96	; 0x60
 8005252:	d050      	beq.n	80052f6 <HAL_TIM_ConfigClockSource+0x11a>
 8005254:	2b60      	cmp	r3, #96	; 0x60
 8005256:	d877      	bhi.n	8005348 <HAL_TIM_ConfigClockSource+0x16c>
 8005258:	2b50      	cmp	r3, #80	; 0x50
 800525a:	d03c      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0xfa>
 800525c:	2b50      	cmp	r3, #80	; 0x50
 800525e:	d873      	bhi.n	8005348 <HAL_TIM_ConfigClockSource+0x16c>
 8005260:	2b40      	cmp	r3, #64	; 0x40
 8005262:	d058      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0x13a>
 8005264:	2b40      	cmp	r3, #64	; 0x40
 8005266:	d86f      	bhi.n	8005348 <HAL_TIM_ConfigClockSource+0x16c>
 8005268:	2b30      	cmp	r3, #48	; 0x30
 800526a:	d064      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0x15a>
 800526c:	2b30      	cmp	r3, #48	; 0x30
 800526e:	d86b      	bhi.n	8005348 <HAL_TIM_ConfigClockSource+0x16c>
 8005270:	2b20      	cmp	r3, #32
 8005272:	d060      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0x15a>
 8005274:	2b20      	cmp	r3, #32
 8005276:	d867      	bhi.n	8005348 <HAL_TIM_ConfigClockSource+0x16c>
 8005278:	2b00      	cmp	r3, #0
 800527a:	d05c      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0x15a>
 800527c:	2b10      	cmp	r3, #16
 800527e:	d05a      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0x15a>
 8005280:	e062      	b.n	8005348 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6899      	ldr	r1, [r3, #8]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f000 fccb 	bl	8005c2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	609a      	str	r2, [r3, #8]
      break;
 80052ae:	e04f      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6818      	ldr	r0, [r3, #0]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	6899      	ldr	r1, [r3, #8]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f000 fcb4 	bl	8005c2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689a      	ldr	r2, [r3, #8]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052d2:	609a      	str	r2, [r3, #8]
      break;
 80052d4:	e03c      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	6859      	ldr	r1, [r3, #4]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	461a      	mov	r2, r3
 80052e4:	f000 fb72 	bl	80059cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2150      	movs	r1, #80	; 0x50
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fc81 	bl	8005bf6 <TIM_ITRx_SetConfig>
      break;
 80052f4:	e02c      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6818      	ldr	r0, [r3, #0]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	6859      	ldr	r1, [r3, #4]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	461a      	mov	r2, r3
 8005304:	f000 fbce 	bl	8005aa4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2160      	movs	r1, #96	; 0x60
 800530e:	4618      	mov	r0, r3
 8005310:	f000 fc71 	bl	8005bf6 <TIM_ITRx_SetConfig>
      break;
 8005314:	e01c      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6818      	ldr	r0, [r3, #0]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	6859      	ldr	r1, [r3, #4]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	461a      	mov	r2, r3
 8005324:	f000 fb52 	bl	80059cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2140      	movs	r1, #64	; 0x40
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fc61 	bl	8005bf6 <TIM_ITRx_SetConfig>
      break;
 8005334:	e00c      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4619      	mov	r1, r3
 8005340:	4610      	mov	r0, r2
 8005342:	f000 fc58 	bl	8005bf6 <TIM_ITRx_SetConfig>
      break;
 8005346:	e003      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	73fb      	strb	r3, [r7, #15]
      break;
 800534c:	e000      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800534e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005360:	7bfb      	ldrb	r3, [r7, #15]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
	...

0800536c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b0c      	cmp	r3, #12
 800537e:	d831      	bhi.n	80053e4 <HAL_TIM_ReadCapturedValue+0x78>
 8005380:	a201      	add	r2, pc, #4	; (adr r2, 8005388 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005386:	bf00      	nop
 8005388:	080053bd 	.word	0x080053bd
 800538c:	080053e5 	.word	0x080053e5
 8005390:	080053e5 	.word	0x080053e5
 8005394:	080053e5 	.word	0x080053e5
 8005398:	080053c7 	.word	0x080053c7
 800539c:	080053e5 	.word	0x080053e5
 80053a0:	080053e5 	.word	0x080053e5
 80053a4:	080053e5 	.word	0x080053e5
 80053a8:	080053d1 	.word	0x080053d1
 80053ac:	080053e5 	.word	0x080053e5
 80053b0:	080053e5 	.word	0x080053e5
 80053b4:	080053e5 	.word	0x080053e5
 80053b8:	080053db 	.word	0x080053db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c2:	60fb      	str	r3, [r7, #12]

      break;
 80053c4:	e00f      	b.n	80053e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	60fb      	str	r3, [r7, #12]

      break;
 80053ce:	e00a      	b.n	80053e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d6:	60fb      	str	r3, [r7, #12]

      break;
 80053d8:	e005      	b.n	80053e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e0:	60fb      	str	r3, [r7, #12]

      break;
 80053e2:	e000      	b.n	80053e6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80053e4:	bf00      	nop
  }

  return tmpreg;
 80053e6:	68fb      	ldr	r3, [r7, #12]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a40      	ldr	r2, [pc, #256]	; (8005558 <TIM_Base_SetConfig+0x114>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d013      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005462:	d00f      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a3d      	ldr	r2, [pc, #244]	; (800555c <TIM_Base_SetConfig+0x118>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00b      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a3c      	ldr	r2, [pc, #240]	; (8005560 <TIM_Base_SetConfig+0x11c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d007      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a3b      	ldr	r2, [pc, #236]	; (8005564 <TIM_Base_SetConfig+0x120>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d003      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a3a      	ldr	r2, [pc, #232]	; (8005568 <TIM_Base_SetConfig+0x124>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d108      	bne.n	8005496 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a2f      	ldr	r2, [pc, #188]	; (8005558 <TIM_Base_SetConfig+0x114>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d02b      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a4:	d027      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a2c      	ldr	r2, [pc, #176]	; (800555c <TIM_Base_SetConfig+0x118>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d023      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a2b      	ldr	r2, [pc, #172]	; (8005560 <TIM_Base_SetConfig+0x11c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d01f      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a2a      	ldr	r2, [pc, #168]	; (8005564 <TIM_Base_SetConfig+0x120>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d01b      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a29      	ldr	r2, [pc, #164]	; (8005568 <TIM_Base_SetConfig+0x124>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d017      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a28      	ldr	r2, [pc, #160]	; (800556c <TIM_Base_SetConfig+0x128>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d013      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a27      	ldr	r2, [pc, #156]	; (8005570 <TIM_Base_SetConfig+0x12c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d00f      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a26      	ldr	r2, [pc, #152]	; (8005574 <TIM_Base_SetConfig+0x130>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00b      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a25      	ldr	r2, [pc, #148]	; (8005578 <TIM_Base_SetConfig+0x134>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d007      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a24      	ldr	r2, [pc, #144]	; (800557c <TIM_Base_SetConfig+0x138>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d003      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a23      	ldr	r2, [pc, #140]	; (8005580 <TIM_Base_SetConfig+0x13c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d108      	bne.n	8005508 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a0a      	ldr	r2, [pc, #40]	; (8005558 <TIM_Base_SetConfig+0x114>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d003      	beq.n	800553c <TIM_Base_SetConfig+0xf8>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a0c      	ldr	r2, [pc, #48]	; (8005568 <TIM_Base_SetConfig+0x124>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d103      	bne.n	8005544 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	691a      	ldr	r2, [r3, #16]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	615a      	str	r2, [r3, #20]
}
 800554a:	bf00      	nop
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40010000 	.word	0x40010000
 800555c:	40000400 	.word	0x40000400
 8005560:	40000800 	.word	0x40000800
 8005564:	40000c00 	.word	0x40000c00
 8005568:	40010400 	.word	0x40010400
 800556c:	40014000 	.word	0x40014000
 8005570:	40014400 	.word	0x40014400
 8005574:	40014800 	.word	0x40014800
 8005578:	40001800 	.word	0x40001800
 800557c:	40001c00 	.word	0x40001c00
 8005580:	40002000 	.word	0x40002000

08005584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	f023 0201 	bic.w	r2, r3, #1
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0303 	bic.w	r3, r3, #3
 80055ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f023 0302 	bic.w	r3, r3, #2
 80055cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a20      	ldr	r2, [pc, #128]	; (800565c <TIM_OC1_SetConfig+0xd8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d003      	beq.n	80055e8 <TIM_OC1_SetConfig+0x64>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a1f      	ldr	r2, [pc, #124]	; (8005660 <TIM_OC1_SetConfig+0xdc>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d10c      	bne.n	8005602 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f023 0308 	bic.w	r3, r3, #8
 80055ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f023 0304 	bic.w	r3, r3, #4
 8005600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a15      	ldr	r2, [pc, #84]	; (800565c <TIM_OC1_SetConfig+0xd8>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d003      	beq.n	8005612 <TIM_OC1_SetConfig+0x8e>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a14      	ldr	r2, [pc, #80]	; (8005660 <TIM_OC1_SetConfig+0xdc>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d111      	bne.n	8005636 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	621a      	str	r2, [r3, #32]
}
 8005650:	bf00      	nop
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	40010000 	.word	0x40010000
 8005660:	40010400 	.word	0x40010400

08005664 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f023 0210 	bic.w	r2, r3, #16
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800569a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f023 0320 	bic.w	r3, r3, #32
 80056ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a22      	ldr	r2, [pc, #136]	; (8005748 <TIM_OC2_SetConfig+0xe4>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_OC2_SetConfig+0x68>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a21      	ldr	r2, [pc, #132]	; (800574c <TIM_OC2_SetConfig+0xe8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d10d      	bne.n	80056e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a17      	ldr	r2, [pc, #92]	; (8005748 <TIM_OC2_SetConfig+0xe4>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d003      	beq.n	80056f8 <TIM_OC2_SetConfig+0x94>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a16      	ldr	r2, [pc, #88]	; (800574c <TIM_OC2_SetConfig+0xe8>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d113      	bne.n	8005720 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005706:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4313      	orrs	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	621a      	str	r2, [r3, #32]
}
 800573a:	bf00      	nop
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	40010000 	.word	0x40010000
 800574c:	40010400 	.word	0x40010400

08005750 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0303 	bic.w	r3, r3, #3
 8005786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	021b      	lsls	r3, r3, #8
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a21      	ldr	r2, [pc, #132]	; (8005830 <TIM_OC3_SetConfig+0xe0>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d003      	beq.n	80057b6 <TIM_OC3_SetConfig+0x66>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a20      	ldr	r2, [pc, #128]	; (8005834 <TIM_OC3_SetConfig+0xe4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d10d      	bne.n	80057d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	021b      	lsls	r3, r3, #8
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a16      	ldr	r2, [pc, #88]	; (8005830 <TIM_OC3_SetConfig+0xe0>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d003      	beq.n	80057e2 <TIM_OC3_SetConfig+0x92>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a15      	ldr	r2, [pc, #84]	; (8005834 <TIM_OC3_SetConfig+0xe4>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d113      	bne.n	800580a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	011b      	lsls	r3, r3, #4
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	621a      	str	r2, [r3, #32]
}
 8005824:	bf00      	nop
 8005826:	371c      	adds	r7, #28
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	40010000 	.word	0x40010000
 8005834:	40010400 	.word	0x40010400

08005838 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800586e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	021b      	lsls	r3, r3, #8
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	4313      	orrs	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005882:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	031b      	lsls	r3, r3, #12
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	4313      	orrs	r3, r2
 800588e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a12      	ldr	r2, [pc, #72]	; (80058dc <TIM_OC4_SetConfig+0xa4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d003      	beq.n	80058a0 <TIM_OC4_SetConfig+0x68>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a11      	ldr	r2, [pc, #68]	; (80058e0 <TIM_OC4_SetConfig+0xa8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d109      	bne.n	80058b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	019b      	lsls	r3, r3, #6
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	621a      	str	r2, [r3, #32]
}
 80058ce:	bf00      	nop
 80058d0:	371c      	adds	r7, #28
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40010000 	.word	0x40010000
 80058e0:	40010400 	.word	0x40010400

080058e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	f023 0201 	bic.w	r2, r3, #1
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4a28      	ldr	r2, [pc, #160]	; (80059b0 <TIM_TI1_SetConfig+0xcc>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d01b      	beq.n	800594a <TIM_TI1_SetConfig+0x66>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005918:	d017      	beq.n	800594a <TIM_TI1_SetConfig+0x66>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4a25      	ldr	r2, [pc, #148]	; (80059b4 <TIM_TI1_SetConfig+0xd0>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d013      	beq.n	800594a <TIM_TI1_SetConfig+0x66>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4a24      	ldr	r2, [pc, #144]	; (80059b8 <TIM_TI1_SetConfig+0xd4>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00f      	beq.n	800594a <TIM_TI1_SetConfig+0x66>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4a23      	ldr	r2, [pc, #140]	; (80059bc <TIM_TI1_SetConfig+0xd8>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00b      	beq.n	800594a <TIM_TI1_SetConfig+0x66>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4a22      	ldr	r2, [pc, #136]	; (80059c0 <TIM_TI1_SetConfig+0xdc>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d007      	beq.n	800594a <TIM_TI1_SetConfig+0x66>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4a21      	ldr	r2, [pc, #132]	; (80059c4 <TIM_TI1_SetConfig+0xe0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d003      	beq.n	800594a <TIM_TI1_SetConfig+0x66>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4a20      	ldr	r2, [pc, #128]	; (80059c8 <TIM_TI1_SetConfig+0xe4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d101      	bne.n	800594e <TIM_TI1_SetConfig+0x6a>
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <TIM_TI1_SetConfig+0x6c>
 800594e:	2300      	movs	r3, #0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d008      	beq.n	8005966 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f023 0303 	bic.w	r3, r3, #3
 800595a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4313      	orrs	r3, r2
 8005962:	617b      	str	r3, [r7, #20]
 8005964:	e003      	b.n	800596e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f043 0301 	orr.w	r3, r3, #1
 800596c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005974:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	b2db      	uxtb	r3, r3
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	4313      	orrs	r3, r2
 8005980:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	f023 030a 	bic.w	r3, r3, #10
 8005988:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f003 030a 	and.w	r3, r3, #10
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	4313      	orrs	r3, r2
 8005994:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	621a      	str	r2, [r3, #32]
}
 80059a2:	bf00      	nop
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	40010000 	.word	0x40010000
 80059b4:	40000400 	.word	0x40000400
 80059b8:	40000800 	.word	0x40000800
 80059bc:	40000c00 	.word	0x40000c00
 80059c0:	40010400 	.word	0x40010400
 80059c4:	40014000 	.word	0x40014000
 80059c8:	40001800 	.word	0x40001800

080059cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	f023 0201 	bic.w	r2, r3, #1
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f023 030a 	bic.w	r3, r3, #10
 8005a08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	621a      	str	r2, [r3, #32]
}
 8005a1e:	bf00      	nop
 8005a20:	371c      	adds	r7, #28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b087      	sub	sp, #28
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	60f8      	str	r0, [r7, #12]
 8005a32:	60b9      	str	r1, [r7, #8]
 8005a34:	607a      	str	r2, [r7, #4]
 8005a36:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	f023 0210 	bic.w	r2, r3, #16
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	021b      	lsls	r3, r3, #8
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	031b      	lsls	r3, r3, #12
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a7c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	011b      	lsls	r3, r3, #4
 8005a82:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	621a      	str	r2, [r3, #32]
}
 8005a98:	bf00      	nop
 8005a9a:	371c      	adds	r7, #28
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	f023 0210 	bic.w	r2, r3, #16
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ace:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	031b      	lsls	r3, r3, #12
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ae0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	621a      	str	r2, [r3, #32]
}
 8005af8:	bf00      	nop
 8005afa:	371c      	adds	r7, #28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
 8005b10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f023 0303 	bic.w	r3, r3, #3
 8005b30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005b54:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	021b      	lsls	r3, r3, #8
 8005b5a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	621a      	str	r2, [r3, #32]
}
 8005b70:	bf00      	nop
 8005b72:	371c      	adds	r7, #28
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
 8005b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ba8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	021b      	lsls	r3, r3, #8
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	031b      	lsls	r3, r3, #12
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005bce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	031b      	lsls	r3, r3, #12
 8005bd4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	621a      	str	r2, [r3, #32]
}
 8005bea:	bf00      	nop
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b085      	sub	sp, #20
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	f043 0307 	orr.w	r3, r3, #7
 8005c18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	609a      	str	r2, [r3, #8]
}
 8005c20:	bf00      	nop
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	021a      	lsls	r2, r3, #8
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	609a      	str	r2, [r3, #8]
}
 8005c60:	bf00      	nop
 8005c62:	371c      	adds	r7, #28
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f003 031f 	and.w	r3, r3, #31
 8005c7e:	2201      	movs	r2, #1
 8005c80:	fa02 f303 	lsl.w	r3, r2, r3
 8005c84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a1a      	ldr	r2, [r3, #32]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	43db      	mvns	r3, r3
 8005c8e:	401a      	ands	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a1a      	ldr	r2, [r3, #32]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f003 031f 	and.w	r3, r3, #31
 8005c9e:	6879      	ldr	r1, [r7, #4]
 8005ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	621a      	str	r2, [r3, #32]
}
 8005caa:	bf00      	nop
 8005cac:	371c      	adds	r7, #28
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
	...

08005cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d101      	bne.n	8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	e05a      	b.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a21      	ldr	r2, [pc, #132]	; (8005d94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d022      	beq.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d1c:	d01d      	beq.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a1d      	ldr	r2, [pc, #116]	; (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d018      	beq.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a1b      	ldr	r2, [pc, #108]	; (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d013      	beq.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a1a      	ldr	r2, [pc, #104]	; (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d00e      	beq.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a18      	ldr	r2, [pc, #96]	; (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d009      	beq.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a17      	ldr	r2, [pc, #92]	; (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d004      	beq.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a15      	ldr	r2, [pc, #84]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d10c      	bne.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	40010000 	.word	0x40010000
 8005d98:	40000400 	.word	0x40000400
 8005d9c:	40000800 	.word	0x40000800
 8005da0:	40000c00 	.word	0x40000c00
 8005da4:	40010400 	.word	0x40010400
 8005da8:	40014000 	.word	0x40014000
 8005dac:	40001800 	.word	0x40001800

08005db0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e03d      	b.n	8005e48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e03f      	b.n	8005f0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d106      	bne.n	8005ea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fc ff66 	bl	8002d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2224      	movs	r2, #36	; 0x24
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68da      	ldr	r2, [r3, #12]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ebe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fe1f 	bl	8006b04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	691a      	ldr	r2, [r3, #16]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ed4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	695a      	ldr	r2, [r3, #20]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ee4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ef4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b08a      	sub	sp, #40	; 0x28
 8005f1a:	af02      	add	r7, sp, #8
 8005f1c:	60f8      	str	r0, [r7, #12]
 8005f1e:	60b9      	str	r1, [r7, #8]
 8005f20:	603b      	str	r3, [r7, #0]
 8005f22:	4613      	mov	r3, r2
 8005f24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	d17c      	bne.n	8006030 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <HAL_UART_Transmit+0x2c>
 8005f3c:	88fb      	ldrh	r3, [r7, #6]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e075      	b.n	8006032 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_UART_Transmit+0x3e>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e06e      	b.n	8006032 <HAL_UART_Transmit+0x11c>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2221      	movs	r2, #33	; 0x21
 8005f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f6a:	f7fd f863 	bl	8003034 <HAL_GetTick>
 8005f6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	88fa      	ldrh	r2, [r7, #6]
 8005f74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	88fa      	ldrh	r2, [r7, #6]
 8005f7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f84:	d108      	bne.n	8005f98 <HAL_UART_Transmit+0x82>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d104      	bne.n	8005f98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	61bb      	str	r3, [r7, #24]
 8005f96:	e003      	b.n	8005fa0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005fa8:	e02a      	b.n	8006000 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2180      	movs	r1, #128	; 0x80
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 fb63 	bl	8006680 <UART_WaitOnFlagUntilTimeout>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e036      	b.n	8006032 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10b      	bne.n	8005fe2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	3302      	adds	r3, #2
 8005fde:	61bb      	str	r3, [r7, #24]
 8005fe0:	e007      	b.n	8005ff2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	781a      	ldrb	r2, [r3, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006004:	b29b      	uxth	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1cf      	bne.n	8005faa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	2200      	movs	r2, #0
 8006012:	2140      	movs	r1, #64	; 0x40
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 fb33 	bl	8006680 <UART_WaitOnFlagUntilTimeout>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d001      	beq.n	8006024 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e006      	b.n	8006032 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2220      	movs	r2, #32
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	e000      	b.n	8006032 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006030:	2302      	movs	r3, #2
  }
}
 8006032:	4618      	mov	r0, r3
 8006034:	3720      	adds	r7, #32
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800603a:	b480      	push	{r7}
 800603c:	b085      	sub	sp, #20
 800603e:	af00      	add	r7, sp, #0
 8006040:	60f8      	str	r0, [r7, #12]
 8006042:	60b9      	str	r1, [r7, #8]
 8006044:	4613      	mov	r3, r2
 8006046:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b20      	cmp	r3, #32
 8006052:	d130      	bne.n	80060b6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <HAL_UART_Transmit_IT+0x26>
 800605a:	88fb      	ldrh	r3, [r7, #6]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e029      	b.n	80060b8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800606a:	2b01      	cmp	r3, #1
 800606c:	d101      	bne.n	8006072 <HAL_UART_Transmit_IT+0x38>
 800606e:	2302      	movs	r3, #2
 8006070:	e022      	b.n	80060b8 <HAL_UART_Transmit_IT+0x7e>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	88fa      	ldrh	r2, [r7, #6]
 8006084:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	88fa      	ldrh	r2, [r7, #6]
 800608a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2221      	movs	r2, #33	; 0x21
 8006096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68da      	ldr	r2, [r3, #12]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80060b0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	e000      	b.n	80060b8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80060b6:	2302      	movs	r3, #2
  }
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	4613      	mov	r3, r2
 80060d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b20      	cmp	r3, #32
 80060dc:	d11d      	bne.n	800611a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <HAL_UART_Receive_IT+0x26>
 80060e4:	88fb      	ldrh	r3, [r7, #6]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e016      	b.n	800611c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d101      	bne.n	80060fc <HAL_UART_Receive_IT+0x38>
 80060f8:	2302      	movs	r3, #2
 80060fa:	e00f      	b.n	800611c <HAL_UART_Receive_IT+0x58>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800610a:	88fb      	ldrh	r3, [r7, #6]
 800610c:	461a      	mov	r2, r3
 800610e:	68b9      	ldr	r1, [r7, #8]
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 fb23 	bl	800675c <UART_Start_Receive_IT>
 8006116:	4603      	mov	r3, r0
 8006118:	e000      	b.n	800611c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800611a:	2302      	movs	r3, #2
  }
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b0ba      	sub	sp, #232	; 0xe8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800614a:	2300      	movs	r3, #0
 800614c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006150:	2300      	movs	r3, #0
 8006152:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800615a:	f003 030f 	and.w	r3, r3, #15
 800615e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006162:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10f      	bne.n	800618a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800616a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b00      	cmp	r3, #0
 8006174:	d009      	beq.n	800618a <HAL_UART_IRQHandler+0x66>
 8006176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800617a:	f003 0320 	and.w	r3, r3, #32
 800617e:	2b00      	cmp	r3, #0
 8006180:	d003      	beq.n	800618a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fc03 	bl	800698e <UART_Receive_IT>
      return;
 8006188:	e256      	b.n	8006638 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800618a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 80de 	beq.w	8006350 <HAL_UART_IRQHandler+0x22c>
 8006194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006198:	f003 0301 	and.w	r3, r3, #1
 800619c:	2b00      	cmp	r3, #0
 800619e:	d106      	bne.n	80061ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 80d1 	beq.w	8006350 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00b      	beq.n	80061d2 <HAL_UART_IRQHandler+0xae>
 80061ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d005      	beq.n	80061d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ca:	f043 0201 	orr.w	r2, r3, #1
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d6:	f003 0304 	and.w	r3, r3, #4
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00b      	beq.n	80061f6 <HAL_UART_IRQHandler+0xd2>
 80061de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d005      	beq.n	80061f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ee:	f043 0202 	orr.w	r2, r3, #2
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00b      	beq.n	800621a <HAL_UART_IRQHandler+0xf6>
 8006202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d005      	beq.n	800621a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	f043 0204 	orr.w	r2, r3, #4
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800621a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d011      	beq.n	800624a <HAL_UART_IRQHandler+0x126>
 8006226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	2b00      	cmp	r3, #0
 8006230:	d105      	bne.n	800623e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d005      	beq.n	800624a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	f043 0208 	orr.w	r2, r3, #8
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	2b00      	cmp	r3, #0
 8006250:	f000 81ed 	beq.w	800662e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006258:	f003 0320 	and.w	r3, r3, #32
 800625c:	2b00      	cmp	r3, #0
 800625e:	d008      	beq.n	8006272 <HAL_UART_IRQHandler+0x14e>
 8006260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006264:	f003 0320 	and.w	r3, r3, #32
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 fb8e 	bl	800698e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627c:	2b40      	cmp	r3, #64	; 0x40
 800627e:	bf0c      	ite	eq
 8006280:	2301      	moveq	r3, #1
 8006282:	2300      	movne	r3, #0
 8006284:	b2db      	uxtb	r3, r3
 8006286:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	f003 0308 	and.w	r3, r3, #8
 8006292:	2b00      	cmp	r3, #0
 8006294:	d103      	bne.n	800629e <HAL_UART_IRQHandler+0x17a>
 8006296:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800629a:	2b00      	cmp	r3, #0
 800629c:	d04f      	beq.n	800633e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fa96 	bl	80067d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ae:	2b40      	cmp	r3, #64	; 0x40
 80062b0:	d141      	bne.n	8006336 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3314      	adds	r3, #20
 80062b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062c0:	e853 3f00 	ldrex	r3, [r3]
 80062c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3314      	adds	r3, #20
 80062da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80062de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80062e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80062ee:	e841 2300 	strex	r3, r2, [r1]
 80062f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80062f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1d9      	bne.n	80062b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006302:	2b00      	cmp	r3, #0
 8006304:	d013      	beq.n	800632e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630a:	4a7d      	ldr	r2, [pc, #500]	; (8006500 <HAL_UART_IRQHandler+0x3dc>)
 800630c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006312:	4618      	mov	r0, r3
 8006314:	f7fd faa1 	bl	800385a <HAL_DMA_Abort_IT>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d016      	beq.n	800634c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006328:	4610      	mov	r0, r2
 800632a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800632c:	e00e      	b.n	800634c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f990 	bl	8006654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006334:	e00a      	b.n	800634c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f98c 	bl	8006654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800633c:	e006      	b.n	800634c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f988 	bl	8006654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800634a:	e170      	b.n	800662e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800634c:	bf00      	nop
    return;
 800634e:	e16e      	b.n	800662e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006354:	2b01      	cmp	r3, #1
 8006356:	f040 814a 	bne.w	80065ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800635a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800635e:	f003 0310 	and.w	r3, r3, #16
 8006362:	2b00      	cmp	r3, #0
 8006364:	f000 8143 	beq.w	80065ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800636c:	f003 0310 	and.w	r3, r3, #16
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 813c 	beq.w	80065ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006376:	2300      	movs	r3, #0
 8006378:	60bb      	str	r3, [r7, #8]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	60bb      	str	r3, [r7, #8]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	60bb      	str	r3, [r7, #8]
 800638a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006396:	2b40      	cmp	r3, #64	; 0x40
 8006398:	f040 80b4 	bne.w	8006504 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 8140 	beq.w	8006632 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063ba:	429a      	cmp	r2, r3
 80063bc:	f080 8139 	bcs.w	8006632 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d2:	f000 8088 	beq.w	80064e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	330c      	adds	r3, #12
 80063dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063e4:	e853 3f00 	ldrex	r3, [r3]
 80063e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80063ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	330c      	adds	r3, #12
 80063fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006402:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006406:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800640e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006412:	e841 2300 	strex	r3, r2, [r1]
 8006416:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800641a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1d9      	bne.n	80063d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3314      	adds	r3, #20
 8006428:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800642c:	e853 3f00 	ldrex	r3, [r3]
 8006430:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006434:	f023 0301 	bic.w	r3, r3, #1
 8006438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3314      	adds	r3, #20
 8006442:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006446:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800644a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800644e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006452:	e841 2300 	strex	r3, r2, [r1]
 8006456:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006458:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1e1      	bne.n	8006422 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3314      	adds	r3, #20
 8006464:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800646e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006474:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3314      	adds	r3, #20
 800647e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006482:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006484:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006488:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e3      	bne.n	800645e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2220      	movs	r2, #32
 800649a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	330c      	adds	r3, #12
 80064aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ae:	e853 3f00 	ldrex	r3, [r3]
 80064b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064b6:	f023 0310 	bic.w	r3, r3, #16
 80064ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	330c      	adds	r3, #12
 80064c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80064c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80064ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064d0:	e841 2300 	strex	r3, r2, [r1]
 80064d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1e3      	bne.n	80064a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fd f94a 	bl	800377a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	4619      	mov	r1, r3
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f8b6 	bl	8006668 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064fc:	e099      	b.n	8006632 <HAL_UART_IRQHandler+0x50e>
 80064fe:	bf00      	nop
 8006500:	08006897 	.word	0x08006897
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800650c:	b29b      	uxth	r3, r3
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006518:	b29b      	uxth	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 808b 	beq.w	8006636 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006520:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 8086 	beq.w	8006636 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	330c      	adds	r3, #12
 8006530:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800653a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800653c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006540:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	330c      	adds	r3, #12
 800654a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800654e:	647a      	str	r2, [r7, #68]	; 0x44
 8006550:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006552:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006554:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006556:	e841 2300 	strex	r3, r2, [r1]
 800655a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800655c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1e3      	bne.n	800652a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3314      	adds	r3, #20
 8006568:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	e853 3f00 	ldrex	r3, [r3]
 8006570:	623b      	str	r3, [r7, #32]
   return(result);
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	f023 0301 	bic.w	r3, r3, #1
 8006578:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3314      	adds	r3, #20
 8006582:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006586:	633a      	str	r2, [r7, #48]	; 0x30
 8006588:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800658c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800658e:	e841 2300 	strex	r3, r2, [r1]
 8006592:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1e3      	bne.n	8006562 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2220      	movs	r2, #32
 800659e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	330c      	adds	r3, #12
 80065ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	e853 3f00 	ldrex	r3, [r3]
 80065b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f023 0310 	bic.w	r3, r3, #16
 80065be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	330c      	adds	r3, #12
 80065c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80065cc:	61fa      	str	r2, [r7, #28]
 80065ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d0:	69b9      	ldr	r1, [r7, #24]
 80065d2:	69fa      	ldr	r2, [r7, #28]
 80065d4:	e841 2300 	strex	r3, r2, [r1]
 80065d8:	617b      	str	r3, [r7, #20]
   return(result);
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1e3      	bne.n	80065a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065e4:	4619      	mov	r1, r3
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f83e 	bl	8006668 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065ec:	e023      	b.n	8006636 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d009      	beq.n	800660e <HAL_UART_IRQHandler+0x4ea>
 80065fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f959 	bl	80068be <UART_Transmit_IT>
    return;
 800660c:	e014      	b.n	8006638 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800660e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00e      	beq.n	8006638 <HAL_UART_IRQHandler+0x514>
 800661a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800661e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006622:	2b00      	cmp	r3, #0
 8006624:	d008      	beq.n	8006638 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f999 	bl	800695e <UART_EndTransmit_IT>
    return;
 800662c:	e004      	b.n	8006638 <HAL_UART_IRQHandler+0x514>
    return;
 800662e:	bf00      	nop
 8006630:	e002      	b.n	8006638 <HAL_UART_IRQHandler+0x514>
      return;
 8006632:	bf00      	nop
 8006634:	e000      	b.n	8006638 <HAL_UART_IRQHandler+0x514>
      return;
 8006636:	bf00      	nop
  }
}
 8006638:	37e8      	adds	r7, #232	; 0xe8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop

08006640 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	460b      	mov	r3, r1
 8006672:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b090      	sub	sp, #64	; 0x40
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	603b      	str	r3, [r7, #0]
 800668c:	4613      	mov	r3, r2
 800668e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006690:	e050      	b.n	8006734 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006698:	d04c      	beq.n	8006734 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800669a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800669c:	2b00      	cmp	r3, #0
 800669e:	d007      	beq.n	80066b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80066a0:	f7fc fcc8 	bl	8003034 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d241      	bcs.n	8006734 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	330c      	adds	r3, #12
 80066b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ba:	e853 3f00 	ldrex	r3, [r3]
 80066be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	330c      	adds	r3, #12
 80066ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066d0:	637a      	str	r2, [r7, #52]	; 0x34
 80066d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066d8:	e841 2300 	strex	r3, r2, [r1]
 80066dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1e5      	bne.n	80066b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3314      	adds	r3, #20
 80066ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	e853 3f00 	ldrex	r3, [r3]
 80066f2:	613b      	str	r3, [r7, #16]
   return(result);
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f023 0301 	bic.w	r3, r3, #1
 80066fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3314      	adds	r3, #20
 8006702:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006704:	623a      	str	r2, [r7, #32]
 8006706:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006708:	69f9      	ldr	r1, [r7, #28]
 800670a:	6a3a      	ldr	r2, [r7, #32]
 800670c:	e841 2300 	strex	r3, r2, [r1]
 8006710:	61bb      	str	r3, [r7, #24]
   return(result);
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e5      	bne.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2220      	movs	r2, #32
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2220      	movs	r2, #32
 8006724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e00f      	b.n	8006754 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	4013      	ands	r3, r2
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	429a      	cmp	r2, r3
 8006742:	bf0c      	ite	eq
 8006744:	2301      	moveq	r3, #1
 8006746:	2300      	movne	r3, #0
 8006748:	b2db      	uxtb	r3, r3
 800674a:	461a      	mov	r2, r3
 800674c:	79fb      	ldrb	r3, [r7, #7]
 800674e:	429a      	cmp	r2, r3
 8006750:	d09f      	beq.n	8006692 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3740      	adds	r7, #64	; 0x40
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	4613      	mov	r3, r2
 8006768:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	88fa      	ldrh	r2, [r7, #6]
 8006774:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	88fa      	ldrh	r2, [r7, #6]
 800677a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2222      	movs	r2, #34	; 0x22
 8006786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68da      	ldr	r2, [r3, #12]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067a0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	695a      	ldr	r2, [r3, #20]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f042 0201 	orr.w	r2, r2, #1
 80067b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68da      	ldr	r2, [r3, #12]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f042 0220 	orr.w	r2, r2, #32
 80067c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b095      	sub	sp, #84	; 0x54
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	330c      	adds	r3, #12
 80067de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e2:	e853 3f00 	ldrex	r3, [r3]
 80067e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	330c      	adds	r3, #12
 80067f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067f8:	643a      	str	r2, [r7, #64]	; 0x40
 80067fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006800:	e841 2300 	strex	r3, r2, [r1]
 8006804:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1e5      	bne.n	80067d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3314      	adds	r3, #20
 8006812:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	e853 3f00 	ldrex	r3, [r3]
 800681a:	61fb      	str	r3, [r7, #28]
   return(result);
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	f023 0301 	bic.w	r3, r3, #1
 8006822:	64bb      	str	r3, [r7, #72]	; 0x48
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3314      	adds	r3, #20
 800682a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800682c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800682e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e5      	bne.n	800680c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006844:	2b01      	cmp	r3, #1
 8006846:	d119      	bne.n	800687c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	330c      	adds	r3, #12
 800684e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	e853 3f00 	ldrex	r3, [r3]
 8006856:	60bb      	str	r3, [r7, #8]
   return(result);
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	f023 0310 	bic.w	r3, r3, #16
 800685e:	647b      	str	r3, [r7, #68]	; 0x44
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	330c      	adds	r3, #12
 8006866:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006868:	61ba      	str	r2, [r7, #24]
 800686a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686c:	6979      	ldr	r1, [r7, #20]
 800686e:	69ba      	ldr	r2, [r7, #24]
 8006870:	e841 2300 	strex	r3, r2, [r1]
 8006874:	613b      	str	r3, [r7, #16]
   return(result);
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1e5      	bne.n	8006848 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2220      	movs	r2, #32
 8006880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	631a      	str	r2, [r3, #48]	; 0x30
}
 800688a:	bf00      	nop
 800688c:	3754      	adds	r7, #84	; 0x54
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b084      	sub	sp, #16
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f7ff fecf 	bl	8006654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068b6:	bf00      	nop
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80068be:	b480      	push	{r7}
 80068c0:	b085      	sub	sp, #20
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b21      	cmp	r3, #33	; 0x21
 80068d0:	d13e      	bne.n	8006950 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068da:	d114      	bne.n	8006906 <UART_Transmit_IT+0x48>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d110      	bne.n	8006906 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	461a      	mov	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	1c9a      	adds	r2, r3, #2
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	621a      	str	r2, [r3, #32]
 8006904:	e008      	b.n	8006918 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	1c59      	adds	r1, r3, #1
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6211      	str	r1, [r2, #32]
 8006910:	781a      	ldrb	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800691c:	b29b      	uxth	r3, r3
 800691e:	3b01      	subs	r3, #1
 8006920:	b29b      	uxth	r3, r3
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	4619      	mov	r1, r3
 8006926:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10f      	bne.n	800694c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68da      	ldr	r2, [r3, #12]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800693a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800694a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800694c:	2300      	movs	r3, #0
 800694e:	e000      	b.n	8006952 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006950:	2302      	movs	r3, #2
  }
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b082      	sub	sp, #8
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68da      	ldr	r2, [r3, #12]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006974:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2220      	movs	r2, #32
 800697a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7ff fe5e 	bl	8006640 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b08c      	sub	sp, #48	; 0x30
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b22      	cmp	r3, #34	; 0x22
 80069a0:	f040 80ab 	bne.w	8006afa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ac:	d117      	bne.n	80069de <UART_Receive_IT+0x50>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d113      	bne.n	80069de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80069b6:	2300      	movs	r3, #0
 80069b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d6:	1c9a      	adds	r2, r3, #2
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	629a      	str	r2, [r3, #40]	; 0x28
 80069dc:	e026      	b.n	8006a2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80069e4:	2300      	movs	r3, #0
 80069e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f0:	d007      	beq.n	8006a02 <UART_Receive_IT+0x74>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10a      	bne.n	8006a10 <UART_Receive_IT+0x82>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d106      	bne.n	8006a10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0c:	701a      	strb	r2, [r3, #0]
 8006a0e:	e008      	b.n	8006a22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	3b01      	subs	r3, #1
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	4619      	mov	r1, r3
 8006a3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d15a      	bne.n	8006af6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68da      	ldr	r2, [r3, #12]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 0220 	bic.w	r2, r2, #32
 8006a4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68da      	ldr	r2, [r3, #12]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	695a      	ldr	r2, [r3, #20]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f022 0201 	bic.w	r2, r2, #1
 8006a6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2220      	movs	r2, #32
 8006a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d135      	bne.n	8006aec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	330c      	adds	r3, #12
 8006a8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	e853 3f00 	ldrex	r3, [r3]
 8006a94:	613b      	str	r3, [r7, #16]
   return(result);
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f023 0310 	bic.w	r3, r3, #16
 8006a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	330c      	adds	r3, #12
 8006aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa6:	623a      	str	r2, [r7, #32]
 8006aa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aaa:	69f9      	ldr	r1, [r7, #28]
 8006aac:	6a3a      	ldr	r2, [r7, #32]
 8006aae:	e841 2300 	strex	r3, r2, [r1]
 8006ab2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1e5      	bne.n	8006a86 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0310 	and.w	r3, r3, #16
 8006ac4:	2b10      	cmp	r3, #16
 8006ac6:	d10a      	bne.n	8006ade <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ac8:	2300      	movs	r3, #0
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff fdbf 	bl	8006668 <HAL_UARTEx_RxEventCallback>
 8006aea:	e002      	b.n	8006af2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7fb fc8f 	bl	8002410 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	e002      	b.n	8006afc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006af6:	2300      	movs	r3, #0
 8006af8:	e000      	b.n	8006afc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006afa:	2302      	movs	r3, #2
  }
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3730      	adds	r7, #48	; 0x30
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b08:	b09f      	sub	sp, #124	; 0x7c
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1a:	68d9      	ldr	r1, [r3, #12]
 8006b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	ea40 0301 	orr.w	r3, r0, r1
 8006b24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b28:	689a      	ldr	r2, [r3, #8]
 8006b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	431a      	orrs	r2, r3
 8006b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b48:	f021 010c 	bic.w	r1, r1, #12
 8006b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b52:	430b      	orrs	r3, r1
 8006b54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b62:	6999      	ldr	r1, [r3, #24]
 8006b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	ea40 0301 	orr.w	r3, r0, r1
 8006b6c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	4bc5      	ldr	r3, [pc, #788]	; (8006e88 <UART_SetConfig+0x384>)
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d004      	beq.n	8006b82 <UART_SetConfig+0x7e>
 8006b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	4bc3      	ldr	r3, [pc, #780]	; (8006e8c <UART_SetConfig+0x388>)
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d103      	bne.n	8006b8a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b82:	f7fd fc9f 	bl	80044c4 <HAL_RCC_GetPCLK2Freq>
 8006b86:	6778      	str	r0, [r7, #116]	; 0x74
 8006b88:	e002      	b.n	8006b90 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b8a:	f7fd fc87 	bl	800449c <HAL_RCC_GetPCLK1Freq>
 8006b8e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b92:	69db      	ldr	r3, [r3, #28]
 8006b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b98:	f040 80b6 	bne.w	8006d08 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b9e:	461c      	mov	r4, r3
 8006ba0:	f04f 0500 	mov.w	r5, #0
 8006ba4:	4622      	mov	r2, r4
 8006ba6:	462b      	mov	r3, r5
 8006ba8:	1891      	adds	r1, r2, r2
 8006baa:	6439      	str	r1, [r7, #64]	; 0x40
 8006bac:	415b      	adcs	r3, r3
 8006bae:	647b      	str	r3, [r7, #68]	; 0x44
 8006bb0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006bb4:	1912      	adds	r2, r2, r4
 8006bb6:	eb45 0303 	adc.w	r3, r5, r3
 8006bba:	f04f 0000 	mov.w	r0, #0
 8006bbe:	f04f 0100 	mov.w	r1, #0
 8006bc2:	00d9      	lsls	r1, r3, #3
 8006bc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006bc8:	00d0      	lsls	r0, r2, #3
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	1911      	adds	r1, r2, r4
 8006bd0:	6639      	str	r1, [r7, #96]	; 0x60
 8006bd2:	416b      	adcs	r3, r5
 8006bd4:	667b      	str	r3, [r7, #100]	; 0x64
 8006bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	f04f 0300 	mov.w	r3, #0
 8006be0:	1891      	adds	r1, r2, r2
 8006be2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006be4:	415b      	adcs	r3, r3
 8006be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006be8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006bec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006bf0:	f7f9 ffe4 	bl	8000bbc <__aeabi_uldivmod>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4ba5      	ldr	r3, [pc, #660]	; (8006e90 <UART_SetConfig+0x38c>)
 8006bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8006bfe:	095b      	lsrs	r3, r3, #5
 8006c00:	011e      	lsls	r6, r3, #4
 8006c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c04:	461c      	mov	r4, r3
 8006c06:	f04f 0500 	mov.w	r5, #0
 8006c0a:	4622      	mov	r2, r4
 8006c0c:	462b      	mov	r3, r5
 8006c0e:	1891      	adds	r1, r2, r2
 8006c10:	6339      	str	r1, [r7, #48]	; 0x30
 8006c12:	415b      	adcs	r3, r3
 8006c14:	637b      	str	r3, [r7, #52]	; 0x34
 8006c16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006c1a:	1912      	adds	r2, r2, r4
 8006c1c:	eb45 0303 	adc.w	r3, r5, r3
 8006c20:	f04f 0000 	mov.w	r0, #0
 8006c24:	f04f 0100 	mov.w	r1, #0
 8006c28:	00d9      	lsls	r1, r3, #3
 8006c2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c2e:	00d0      	lsls	r0, r2, #3
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	1911      	adds	r1, r2, r4
 8006c36:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c38:	416b      	adcs	r3, r5
 8006c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	461a      	mov	r2, r3
 8006c42:	f04f 0300 	mov.w	r3, #0
 8006c46:	1891      	adds	r1, r2, r2
 8006c48:	62b9      	str	r1, [r7, #40]	; 0x28
 8006c4a:	415b      	adcs	r3, r3
 8006c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c52:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006c56:	f7f9 ffb1 	bl	8000bbc <__aeabi_uldivmod>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	4b8c      	ldr	r3, [pc, #560]	; (8006e90 <UART_SetConfig+0x38c>)
 8006c60:	fba3 1302 	umull	r1, r3, r3, r2
 8006c64:	095b      	lsrs	r3, r3, #5
 8006c66:	2164      	movs	r1, #100	; 0x64
 8006c68:	fb01 f303 	mul.w	r3, r1, r3
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	00db      	lsls	r3, r3, #3
 8006c70:	3332      	adds	r3, #50	; 0x32
 8006c72:	4a87      	ldr	r2, [pc, #540]	; (8006e90 <UART_SetConfig+0x38c>)
 8006c74:	fba2 2303 	umull	r2, r3, r2, r3
 8006c78:	095b      	lsrs	r3, r3, #5
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c80:	441e      	add	r6, r3
 8006c82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c84:	4618      	mov	r0, r3
 8006c86:	f04f 0100 	mov.w	r1, #0
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	1894      	adds	r4, r2, r2
 8006c90:	623c      	str	r4, [r7, #32]
 8006c92:	415b      	adcs	r3, r3
 8006c94:	627b      	str	r3, [r7, #36]	; 0x24
 8006c96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c9a:	1812      	adds	r2, r2, r0
 8006c9c:	eb41 0303 	adc.w	r3, r1, r3
 8006ca0:	f04f 0400 	mov.w	r4, #0
 8006ca4:	f04f 0500 	mov.w	r5, #0
 8006ca8:	00dd      	lsls	r5, r3, #3
 8006caa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006cae:	00d4      	lsls	r4, r2, #3
 8006cb0:	4622      	mov	r2, r4
 8006cb2:	462b      	mov	r3, r5
 8006cb4:	1814      	adds	r4, r2, r0
 8006cb6:	653c      	str	r4, [r7, #80]	; 0x50
 8006cb8:	414b      	adcs	r3, r1
 8006cba:	657b      	str	r3, [r7, #84]	; 0x54
 8006cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	f04f 0300 	mov.w	r3, #0
 8006cc6:	1891      	adds	r1, r2, r2
 8006cc8:	61b9      	str	r1, [r7, #24]
 8006cca:	415b      	adcs	r3, r3
 8006ccc:	61fb      	str	r3, [r7, #28]
 8006cce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cd2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006cd6:	f7f9 ff71 	bl	8000bbc <__aeabi_uldivmod>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4b6c      	ldr	r3, [pc, #432]	; (8006e90 <UART_SetConfig+0x38c>)
 8006ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ce4:	095b      	lsrs	r3, r3, #5
 8006ce6:	2164      	movs	r1, #100	; 0x64
 8006ce8:	fb01 f303 	mul.w	r3, r1, r3
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	3332      	adds	r3, #50	; 0x32
 8006cf2:	4a67      	ldr	r2, [pc, #412]	; (8006e90 <UART_SetConfig+0x38c>)
 8006cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf8:	095b      	lsrs	r3, r3, #5
 8006cfa:	f003 0207 	and.w	r2, r3, #7
 8006cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4432      	add	r2, r6
 8006d04:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d06:	e0b9      	b.n	8006e7c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d0a:	461c      	mov	r4, r3
 8006d0c:	f04f 0500 	mov.w	r5, #0
 8006d10:	4622      	mov	r2, r4
 8006d12:	462b      	mov	r3, r5
 8006d14:	1891      	adds	r1, r2, r2
 8006d16:	6139      	str	r1, [r7, #16]
 8006d18:	415b      	adcs	r3, r3
 8006d1a:	617b      	str	r3, [r7, #20]
 8006d1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006d20:	1912      	adds	r2, r2, r4
 8006d22:	eb45 0303 	adc.w	r3, r5, r3
 8006d26:	f04f 0000 	mov.w	r0, #0
 8006d2a:	f04f 0100 	mov.w	r1, #0
 8006d2e:	00d9      	lsls	r1, r3, #3
 8006d30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d34:	00d0      	lsls	r0, r2, #3
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	eb12 0804 	adds.w	r8, r2, r4
 8006d3e:	eb43 0905 	adc.w	r9, r3, r5
 8006d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f04f 0100 	mov.w	r1, #0
 8006d4c:	f04f 0200 	mov.w	r2, #0
 8006d50:	f04f 0300 	mov.w	r3, #0
 8006d54:	008b      	lsls	r3, r1, #2
 8006d56:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d5a:	0082      	lsls	r2, r0, #2
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	4649      	mov	r1, r9
 8006d60:	f7f9 ff2c 	bl	8000bbc <__aeabi_uldivmod>
 8006d64:	4602      	mov	r2, r0
 8006d66:	460b      	mov	r3, r1
 8006d68:	4b49      	ldr	r3, [pc, #292]	; (8006e90 <UART_SetConfig+0x38c>)
 8006d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d6e:	095b      	lsrs	r3, r3, #5
 8006d70:	011e      	lsls	r6, r3, #4
 8006d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d74:	4618      	mov	r0, r3
 8006d76:	f04f 0100 	mov.w	r1, #0
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	1894      	adds	r4, r2, r2
 8006d80:	60bc      	str	r4, [r7, #8]
 8006d82:	415b      	adcs	r3, r3
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d8a:	1812      	adds	r2, r2, r0
 8006d8c:	eb41 0303 	adc.w	r3, r1, r3
 8006d90:	f04f 0400 	mov.w	r4, #0
 8006d94:	f04f 0500 	mov.w	r5, #0
 8006d98:	00dd      	lsls	r5, r3, #3
 8006d9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d9e:	00d4      	lsls	r4, r2, #3
 8006da0:	4622      	mov	r2, r4
 8006da2:	462b      	mov	r3, r5
 8006da4:	1814      	adds	r4, r2, r0
 8006da6:	64bc      	str	r4, [r7, #72]	; 0x48
 8006da8:	414b      	adcs	r3, r1
 8006daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f04f 0100 	mov.w	r1, #0
 8006db6:	f04f 0200 	mov.w	r2, #0
 8006dba:	f04f 0300 	mov.w	r3, #0
 8006dbe:	008b      	lsls	r3, r1, #2
 8006dc0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006dc4:	0082      	lsls	r2, r0, #2
 8006dc6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006dca:	f7f9 fef7 	bl	8000bbc <__aeabi_uldivmod>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4b2f      	ldr	r3, [pc, #188]	; (8006e90 <UART_SetConfig+0x38c>)
 8006dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8006dd8:	095b      	lsrs	r3, r3, #5
 8006dda:	2164      	movs	r1, #100	; 0x64
 8006ddc:	fb01 f303 	mul.w	r3, r1, r3
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	011b      	lsls	r3, r3, #4
 8006de4:	3332      	adds	r3, #50	; 0x32
 8006de6:	4a2a      	ldr	r2, [pc, #168]	; (8006e90 <UART_SetConfig+0x38c>)
 8006de8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dec:	095b      	lsrs	r3, r3, #5
 8006dee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006df2:	441e      	add	r6, r3
 8006df4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006df6:	4618      	mov	r0, r3
 8006df8:	f04f 0100 	mov.w	r1, #0
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	460b      	mov	r3, r1
 8006e00:	1894      	adds	r4, r2, r2
 8006e02:	603c      	str	r4, [r7, #0]
 8006e04:	415b      	adcs	r3, r3
 8006e06:	607b      	str	r3, [r7, #4]
 8006e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e0c:	1812      	adds	r2, r2, r0
 8006e0e:	eb41 0303 	adc.w	r3, r1, r3
 8006e12:	f04f 0400 	mov.w	r4, #0
 8006e16:	f04f 0500 	mov.w	r5, #0
 8006e1a:	00dd      	lsls	r5, r3, #3
 8006e1c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e20:	00d4      	lsls	r4, r2, #3
 8006e22:	4622      	mov	r2, r4
 8006e24:	462b      	mov	r3, r5
 8006e26:	eb12 0a00 	adds.w	sl, r2, r0
 8006e2a:	eb43 0b01 	adc.w	fp, r3, r1
 8006e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f04f 0100 	mov.w	r1, #0
 8006e38:	f04f 0200 	mov.w	r2, #0
 8006e3c:	f04f 0300 	mov.w	r3, #0
 8006e40:	008b      	lsls	r3, r1, #2
 8006e42:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e46:	0082      	lsls	r2, r0, #2
 8006e48:	4650      	mov	r0, sl
 8006e4a:	4659      	mov	r1, fp
 8006e4c:	f7f9 feb6 	bl	8000bbc <__aeabi_uldivmod>
 8006e50:	4602      	mov	r2, r0
 8006e52:	460b      	mov	r3, r1
 8006e54:	4b0e      	ldr	r3, [pc, #56]	; (8006e90 <UART_SetConfig+0x38c>)
 8006e56:	fba3 1302 	umull	r1, r3, r3, r2
 8006e5a:	095b      	lsrs	r3, r3, #5
 8006e5c:	2164      	movs	r1, #100	; 0x64
 8006e5e:	fb01 f303 	mul.w	r3, r1, r3
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	011b      	lsls	r3, r3, #4
 8006e66:	3332      	adds	r3, #50	; 0x32
 8006e68:	4a09      	ldr	r2, [pc, #36]	; (8006e90 <UART_SetConfig+0x38c>)
 8006e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6e:	095b      	lsrs	r3, r3, #5
 8006e70:	f003 020f 	and.w	r2, r3, #15
 8006e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4432      	add	r2, r6
 8006e7a:	609a      	str	r2, [r3, #8]
}
 8006e7c:	bf00      	nop
 8006e7e:	377c      	adds	r7, #124	; 0x7c
 8006e80:	46bd      	mov	sp, r7
 8006e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e86:	bf00      	nop
 8006e88:	40011000 	.word	0x40011000
 8006e8c:	40011400 	.word	0x40011400
 8006e90:	51eb851f 	.word	0x51eb851f

08006e94 <__NVIC_SetPriority>:
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	6039      	str	r1, [r7, #0]
 8006e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	db0a      	blt.n	8006ebe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	490c      	ldr	r1, [pc, #48]	; (8006ee0 <__NVIC_SetPriority+0x4c>)
 8006eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eb2:	0112      	lsls	r2, r2, #4
 8006eb4:	b2d2      	uxtb	r2, r2
 8006eb6:	440b      	add	r3, r1
 8006eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006ebc:	e00a      	b.n	8006ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	4908      	ldr	r1, [pc, #32]	; (8006ee4 <__NVIC_SetPriority+0x50>)
 8006ec4:	79fb      	ldrb	r3, [r7, #7]
 8006ec6:	f003 030f 	and.w	r3, r3, #15
 8006eca:	3b04      	subs	r3, #4
 8006ecc:	0112      	lsls	r2, r2, #4
 8006ece:	b2d2      	uxtb	r2, r2
 8006ed0:	440b      	add	r3, r1
 8006ed2:	761a      	strb	r2, [r3, #24]
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	e000e100 	.word	0xe000e100
 8006ee4:	e000ed00 	.word	0xe000ed00

08006ee8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006eec:	2100      	movs	r1, #0
 8006eee:	f06f 0004 	mvn.w	r0, #4
 8006ef2:	f7ff ffcf 	bl	8006e94 <__NVIC_SetPriority>
#endif
}
 8006ef6:	bf00      	nop
 8006ef8:	bd80      	pop	{r7, pc}
	...

08006efc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f02:	f3ef 8305 	mrs	r3, IPSR
 8006f06:	603b      	str	r3, [r7, #0]
  return(result);
 8006f08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d003      	beq.n	8006f16 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006f0e:	f06f 0305 	mvn.w	r3, #5
 8006f12:	607b      	str	r3, [r7, #4]
 8006f14:	e00c      	b.n	8006f30 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006f16:	4b0a      	ldr	r3, [pc, #40]	; (8006f40 <osKernelInitialize+0x44>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d105      	bne.n	8006f2a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006f1e:	4b08      	ldr	r3, [pc, #32]	; (8006f40 <osKernelInitialize+0x44>)
 8006f20:	2201      	movs	r2, #1
 8006f22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006f24:	2300      	movs	r3, #0
 8006f26:	607b      	str	r3, [r7, #4]
 8006f28:	e002      	b.n	8006f30 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006f2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006f30:	687b      	ldr	r3, [r7, #4]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	200000c8 	.word	0x200000c8

08006f44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f4a:	f3ef 8305 	mrs	r3, IPSR
 8006f4e:	603b      	str	r3, [r7, #0]
  return(result);
 8006f50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006f56:	f06f 0305 	mvn.w	r3, #5
 8006f5a:	607b      	str	r3, [r7, #4]
 8006f5c:	e010      	b.n	8006f80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006f5e:	4b0b      	ldr	r3, [pc, #44]	; (8006f8c <osKernelStart+0x48>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d109      	bne.n	8006f7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006f66:	f7ff ffbf 	bl	8006ee8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006f6a:	4b08      	ldr	r3, [pc, #32]	; (8006f8c <osKernelStart+0x48>)
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006f70:	f001 f866 	bl	8008040 <vTaskStartScheduler>
      stat = osOK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	607b      	str	r3, [r7, #4]
 8006f78:	e002      	b.n	8006f80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006f80:	687b      	ldr	r3, [r7, #4]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	200000c8 	.word	0x200000c8

08006f90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b08e      	sub	sp, #56	; 0x38
 8006f94:	af04      	add	r7, sp, #16
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fa0:	f3ef 8305 	mrs	r3, IPSR
 8006fa4:	617b      	str	r3, [r7, #20]
  return(result);
 8006fa6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d17e      	bne.n	80070aa <osThreadNew+0x11a>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d07b      	beq.n	80070aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006fb2:	2380      	movs	r3, #128	; 0x80
 8006fb4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006fb6:	2318      	movs	r3, #24
 8006fb8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fc2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d045      	beq.n	8007056 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <osThreadNew+0x48>
        name = attr->name;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d008      	beq.n	8006ffe <osThreadNew+0x6e>
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	2b38      	cmp	r3, #56	; 0x38
 8006ff0:	d805      	bhi.n	8006ffe <osThreadNew+0x6e>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <osThreadNew+0x72>
        return (NULL);
 8006ffe:	2300      	movs	r3, #0
 8007000:	e054      	b.n	80070ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	089b      	lsrs	r3, r3, #2
 8007010:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00e      	beq.n	8007038 <osThreadNew+0xa8>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	2b5b      	cmp	r3, #91	; 0x5b
 8007020:	d90a      	bls.n	8007038 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007026:	2b00      	cmp	r3, #0
 8007028:	d006      	beq.n	8007038 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d002      	beq.n	8007038 <osThreadNew+0xa8>
        mem = 1;
 8007032:	2301      	movs	r3, #1
 8007034:	61bb      	str	r3, [r7, #24]
 8007036:	e010      	b.n	800705a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10c      	bne.n	800705a <osThreadNew+0xca>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d108      	bne.n	800705a <osThreadNew+0xca>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d104      	bne.n	800705a <osThreadNew+0xca>
          mem = 0;
 8007050:	2300      	movs	r3, #0
 8007052:	61bb      	str	r3, [r7, #24]
 8007054:	e001      	b.n	800705a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007056:	2300      	movs	r3, #0
 8007058:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d110      	bne.n	8007082 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007068:	9202      	str	r2, [sp, #8]
 800706a:	9301      	str	r3, [sp, #4]
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	6a3a      	ldr	r2, [r7, #32]
 8007074:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 fe0c 	bl	8007c94 <xTaskCreateStatic>
 800707c:	4603      	mov	r3, r0
 800707e:	613b      	str	r3, [r7, #16]
 8007080:	e013      	b.n	80070aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d110      	bne.n	80070aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	b29a      	uxth	r2, r3
 800708c:	f107 0310 	add.w	r3, r7, #16
 8007090:	9301      	str	r3, [sp, #4]
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 fe57 	bl	8007d4e <xTaskCreate>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d001      	beq.n	80070aa <osThreadNew+0x11a>
            hTask = NULL;
 80070a6:	2300      	movs	r3, #0
 80070a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80070aa:	693b      	ldr	r3, [r7, #16]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3728      	adds	r7, #40	; 0x28
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070bc:	f3ef 8305 	mrs	r3, IPSR
 80070c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80070c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d003      	beq.n	80070d0 <osDelay+0x1c>
    stat = osErrorISR;
 80070c8:	f06f 0305 	mvn.w	r3, #5
 80070cc:	60fb      	str	r3, [r7, #12]
 80070ce:	e007      	b.n	80070e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 ff7c 	bl	8007fd8 <vTaskDelay>
    }
  }

  return (stat);
 80070e0:	68fb      	ldr	r3, [r7, #12]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
	...

080070ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	4a07      	ldr	r2, [pc, #28]	; (8007118 <vApplicationGetIdleTaskMemory+0x2c>)
 80070fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	4a06      	ldr	r2, [pc, #24]	; (800711c <vApplicationGetIdleTaskMemory+0x30>)
 8007102:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2280      	movs	r2, #128	; 0x80
 8007108:	601a      	str	r2, [r3, #0]
}
 800710a:	bf00      	nop
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	200000cc 	.word	0x200000cc
 800711c:	20000128 	.word	0x20000128

08007120 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4a07      	ldr	r2, [pc, #28]	; (800714c <vApplicationGetTimerTaskMemory+0x2c>)
 8007130:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	4a06      	ldr	r2, [pc, #24]	; (8007150 <vApplicationGetTimerTaskMemory+0x30>)
 8007136:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800713e:	601a      	str	r2, [r3, #0]
}
 8007140:	bf00      	nop
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	20000328 	.word	0x20000328
 8007150:	20000384 	.word	0x20000384

08007154 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f103 0208 	add.w	r2, r3, #8
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800716c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f103 0208 	add.w	r2, r3, #8
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f103 0208 	add.w	r2, r3, #8
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071a2:	bf00      	nop
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071ae:	b480      	push	{r7}
 80071b0:	b085      	sub	sp, #20
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
 80071b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	689a      	ldr	r2, [r3, #8]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	683a      	ldr	r2, [r7, #0]
 80071d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	1c5a      	adds	r2, r3, #1
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	601a      	str	r2, [r3, #0]
}
 80071ea:	bf00      	nop
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071f6:	b480      	push	{r7}
 80071f8:	b085      	sub	sp, #20
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800720c:	d103      	bne.n	8007216 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	e00c      	b.n	8007230 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	3308      	adds	r3, #8
 800721a:	60fb      	str	r3, [r7, #12]
 800721c:	e002      	b.n	8007224 <vListInsert+0x2e>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	429a      	cmp	r2, r3
 800722e:	d2f6      	bcs.n	800721e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	683a      	ldr	r2, [r7, #0]
 800724a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	1c5a      	adds	r2, r3, #1
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	601a      	str	r2, [r3, #0]
}
 800725c:	bf00      	nop
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	6892      	ldr	r2, [r2, #8]
 800727e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	6852      	ldr	r2, [r2, #4]
 8007288:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	429a      	cmp	r2, r3
 8007292:	d103      	bne.n	800729c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689a      	ldr	r2, [r3, #8]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	1e5a      	subs	r2, r3, #1
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10a      	bne.n	80072e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80072e2:	bf00      	nop
 80072e4:	e7fe      	b.n	80072e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80072e6:	f002 f84d 	bl	8009384 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f2:	68f9      	ldr	r1, [r7, #12]
 80072f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80072f6:	fb01 f303 	mul.w	r3, r1, r3
 80072fa:	441a      	add	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007316:	3b01      	subs	r3, #1
 8007318:	68f9      	ldr	r1, [r7, #12]
 800731a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800731c:	fb01 f303 	mul.w	r3, r1, r3
 8007320:	441a      	add	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	22ff      	movs	r2, #255	; 0xff
 800732a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	22ff      	movs	r2, #255	; 0xff
 8007332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d114      	bne.n	8007366 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d01a      	beq.n	800737a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	3310      	adds	r3, #16
 8007348:	4618      	mov	r0, r3
 800734a:	f001 f903 	bl	8008554 <xTaskRemoveFromEventList>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d012      	beq.n	800737a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007354:	4b0c      	ldr	r3, [pc, #48]	; (8007388 <xQueueGenericReset+0xcc>)
 8007356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800735a:	601a      	str	r2, [r3, #0]
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	e009      	b.n	800737a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	3310      	adds	r3, #16
 800736a:	4618      	mov	r0, r3
 800736c:	f7ff fef2 	bl	8007154 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	3324      	adds	r3, #36	; 0x24
 8007374:	4618      	mov	r0, r3
 8007376:	f7ff feed 	bl	8007154 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800737a:	f002 f833 	bl	80093e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800737e:	2301      	movs	r3, #1
}
 8007380:	4618      	mov	r0, r3
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	e000ed04 	.word	0xe000ed04

0800738c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800738c:	b580      	push	{r7, lr}
 800738e:	b08e      	sub	sp, #56	; 0x38
 8007390:	af02      	add	r7, sp, #8
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
 8007398:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10a      	bne.n	80073b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80073b2:	bf00      	nop
 80073b4:	e7fe      	b.n	80073b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10a      	bne.n	80073d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80073bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c0:	f383 8811 	msr	BASEPRI, r3
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073ce:	bf00      	nop
 80073d0:	e7fe      	b.n	80073d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d002      	beq.n	80073de <xQueueGenericCreateStatic+0x52>
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <xQueueGenericCreateStatic+0x56>
 80073de:	2301      	movs	r3, #1
 80073e0:	e000      	b.n	80073e4 <xQueueGenericCreateStatic+0x58>
 80073e2:	2300      	movs	r3, #0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10a      	bne.n	80073fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80073e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ec:	f383 8811 	msr	BASEPRI, r3
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	623b      	str	r3, [r7, #32]
}
 80073fa:	bf00      	nop
 80073fc:	e7fe      	b.n	80073fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d102      	bne.n	800740a <xQueueGenericCreateStatic+0x7e>
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d101      	bne.n	800740e <xQueueGenericCreateStatic+0x82>
 800740a:	2301      	movs	r3, #1
 800740c:	e000      	b.n	8007410 <xQueueGenericCreateStatic+0x84>
 800740e:	2300      	movs	r3, #0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10a      	bne.n	800742a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	61fb      	str	r3, [r7, #28]
}
 8007426:	bf00      	nop
 8007428:	e7fe      	b.n	8007428 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800742a:	2350      	movs	r3, #80	; 0x50
 800742c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b50      	cmp	r3, #80	; 0x50
 8007432:	d00a      	beq.n	800744a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007438:	f383 8811 	msr	BASEPRI, r3
 800743c:	f3bf 8f6f 	isb	sy
 8007440:	f3bf 8f4f 	dsb	sy
 8007444:	61bb      	str	r3, [r7, #24]
}
 8007446:	bf00      	nop
 8007448:	e7fe      	b.n	8007448 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800744a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00d      	beq.n	8007472 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007458:	2201      	movs	r2, #1
 800745a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800745e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	4613      	mov	r3, r2
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	68b9      	ldr	r1, [r7, #8]
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 f805 	bl	800747c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007474:	4618      	mov	r0, r3
 8007476:	3730      	adds	r7, #48	; 0x30
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d103      	bne.n	8007498 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	601a      	str	r2, [r3, #0]
 8007496:	e002      	b.n	800749e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80074aa:	2101      	movs	r1, #1
 80074ac:	69b8      	ldr	r0, [r7, #24]
 80074ae:	f7ff ff05 	bl	80072bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	78fa      	ldrb	r2, [r7, #3]
 80074b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80074ba:	bf00      	nop
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
	...

080074c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b08e      	sub	sp, #56	; 0x38
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
 80074d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80074d2:	2300      	movs	r3, #0
 80074d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80074da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10a      	bne.n	80074f6 <xQueueGenericSend+0x32>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80074f2:	bf00      	nop
 80074f4:	e7fe      	b.n	80074f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d103      	bne.n	8007504 <xQueueGenericSend+0x40>
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007500:	2b00      	cmp	r3, #0
 8007502:	d101      	bne.n	8007508 <xQueueGenericSend+0x44>
 8007504:	2301      	movs	r3, #1
 8007506:	e000      	b.n	800750a <xQueueGenericSend+0x46>
 8007508:	2300      	movs	r3, #0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10a      	bne.n	8007524 <xQueueGenericSend+0x60>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007520:	bf00      	nop
 8007522:	e7fe      	b.n	8007522 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	2b02      	cmp	r3, #2
 8007528:	d103      	bne.n	8007532 <xQueueGenericSend+0x6e>
 800752a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800752e:	2b01      	cmp	r3, #1
 8007530:	d101      	bne.n	8007536 <xQueueGenericSend+0x72>
 8007532:	2301      	movs	r3, #1
 8007534:	e000      	b.n	8007538 <xQueueGenericSend+0x74>
 8007536:	2300      	movs	r3, #0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10a      	bne.n	8007552 <xQueueGenericSend+0x8e>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	623b      	str	r3, [r7, #32]
}
 800754e:	bf00      	nop
 8007550:	e7fe      	b.n	8007550 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007552:	f001 f9bd 	bl	80088d0 <xTaskGetSchedulerState>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d102      	bne.n	8007562 <xQueueGenericSend+0x9e>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <xQueueGenericSend+0xa2>
 8007562:	2301      	movs	r3, #1
 8007564:	e000      	b.n	8007568 <xQueueGenericSend+0xa4>
 8007566:	2300      	movs	r3, #0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10a      	bne.n	8007582 <xQueueGenericSend+0xbe>
	__asm volatile
 800756c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	61fb      	str	r3, [r7, #28]
}
 800757e:	bf00      	nop
 8007580:	e7fe      	b.n	8007580 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007582:	f001 feff 	bl	8009384 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758e:	429a      	cmp	r2, r3
 8007590:	d302      	bcc.n	8007598 <xQueueGenericSend+0xd4>
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b02      	cmp	r3, #2
 8007596:	d129      	bne.n	80075ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007598:	683a      	ldr	r2, [r7, #0]
 800759a:	68b9      	ldr	r1, [r7, #8]
 800759c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800759e:	f000 fa0b 	bl	80079b8 <prvCopyDataToQueue>
 80075a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d010      	beq.n	80075ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ae:	3324      	adds	r3, #36	; 0x24
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 ffcf 	bl	8008554 <xTaskRemoveFromEventList>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d013      	beq.n	80075e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80075bc:	4b3f      	ldr	r3, [pc, #252]	; (80076bc <xQueueGenericSend+0x1f8>)
 80075be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	e00a      	b.n	80075e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d007      	beq.n	80075e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80075d4:	4b39      	ldr	r3, [pc, #228]	; (80076bc <xQueueGenericSend+0x1f8>)
 80075d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80075e4:	f001 fefe 	bl	80093e4 <vPortExitCritical>
				return pdPASS;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e063      	b.n	80076b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d103      	bne.n	80075fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075f2:	f001 fef7 	bl	80093e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	e05c      	b.n	80076b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d106      	bne.n	800760e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007600:	f107 0314 	add.w	r3, r7, #20
 8007604:	4618      	mov	r0, r3
 8007606:	f001 f809 	bl	800861c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800760a:	2301      	movs	r3, #1
 800760c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800760e:	f001 fee9 	bl	80093e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007612:	f000 fd7b 	bl	800810c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007616:	f001 feb5 	bl	8009384 <vPortEnterCritical>
 800761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007620:	b25b      	sxtb	r3, r3
 8007622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007626:	d103      	bne.n	8007630 <xQueueGenericSend+0x16c>
 8007628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007636:	b25b      	sxtb	r3, r3
 8007638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800763c:	d103      	bne.n	8007646 <xQueueGenericSend+0x182>
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007646:	f001 fecd 	bl	80093e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800764a:	1d3a      	adds	r2, r7, #4
 800764c:	f107 0314 	add.w	r3, r7, #20
 8007650:	4611      	mov	r1, r2
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fff8 	bl	8008648 <xTaskCheckForTimeOut>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d124      	bne.n	80076a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800765e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007660:	f000 faa2 	bl	8007ba8 <prvIsQueueFull>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d018      	beq.n	800769c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766c:	3310      	adds	r3, #16
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	4611      	mov	r1, r2
 8007672:	4618      	mov	r0, r3
 8007674:	f000 ff1e 	bl	80084b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800767a:	f000 fa2d 	bl	8007ad8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800767e:	f000 fd53 	bl	8008128 <xTaskResumeAll>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	f47f af7c 	bne.w	8007582 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800768a:	4b0c      	ldr	r3, [pc, #48]	; (80076bc <xQueueGenericSend+0x1f8>)
 800768c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	e772      	b.n	8007582 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800769c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800769e:	f000 fa1b 	bl	8007ad8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076a2:	f000 fd41 	bl	8008128 <xTaskResumeAll>
 80076a6:	e76c      	b.n	8007582 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80076a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076aa:	f000 fa15 	bl	8007ad8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076ae:	f000 fd3b 	bl	8008128 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80076b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3738      	adds	r7, #56	; 0x38
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	e000ed04 	.word	0xe000ed04

080076c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b090      	sub	sp, #64	; 0x40
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80076d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10a      	bne.n	80076ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80076d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80076ea:	bf00      	nop
 80076ec:	e7fe      	b.n	80076ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d103      	bne.n	80076fc <xQueueGenericSendFromISR+0x3c>
 80076f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <xQueueGenericSendFromISR+0x40>
 80076fc:	2301      	movs	r3, #1
 80076fe:	e000      	b.n	8007702 <xQueueGenericSendFromISR+0x42>
 8007700:	2300      	movs	r3, #0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10a      	bne.n	800771c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007718:	bf00      	nop
 800771a:	e7fe      	b.n	800771a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	2b02      	cmp	r3, #2
 8007720:	d103      	bne.n	800772a <xQueueGenericSendFromISR+0x6a>
 8007722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007726:	2b01      	cmp	r3, #1
 8007728:	d101      	bne.n	800772e <xQueueGenericSendFromISR+0x6e>
 800772a:	2301      	movs	r3, #1
 800772c:	e000      	b.n	8007730 <xQueueGenericSendFromISR+0x70>
 800772e:	2300      	movs	r3, #0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10a      	bne.n	800774a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	623b      	str	r3, [r7, #32]
}
 8007746:	bf00      	nop
 8007748:	e7fe      	b.n	8007748 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800774a:	f001 fefd 	bl	8009548 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800774e:	f3ef 8211 	mrs	r2, BASEPRI
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	61fa      	str	r2, [r7, #28]
 8007764:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007766:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007768:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800776a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800776e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007772:	429a      	cmp	r2, r3
 8007774:	d302      	bcc.n	800777c <xQueueGenericSendFromISR+0xbc>
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	2b02      	cmp	r3, #2
 800777a:	d12f      	bne.n	80077dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800777c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	68b9      	ldr	r1, [r7, #8]
 8007790:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007792:	f000 f911 	bl	80079b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007796:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800779a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800779e:	d112      	bne.n	80077c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d016      	beq.n	80077d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077aa:	3324      	adds	r3, #36	; 0x24
 80077ac:	4618      	mov	r0, r3
 80077ae:	f000 fed1 	bl	8008554 <xTaskRemoveFromEventList>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00e      	beq.n	80077d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00b      	beq.n	80077d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	e007      	b.n	80077d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80077ca:	3301      	adds	r3, #1
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	b25a      	sxtb	r2, r3
 80077d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80077d6:	2301      	movs	r3, #1
 80077d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80077da:	e001      	b.n	80077e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80077dc:	2300      	movs	r3, #0
 80077de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3740      	adds	r7, #64	; 0x40
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
	...

080077f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b08c      	sub	sp, #48	; 0x30
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007804:	2300      	movs	r3, #0
 8007806:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800780c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10a      	bne.n	8007828 <xQueueReceive+0x30>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	623b      	str	r3, [r7, #32]
}
 8007824:	bf00      	nop
 8007826:	e7fe      	b.n	8007826 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d103      	bne.n	8007836 <xQueueReceive+0x3e>
 800782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <xQueueReceive+0x42>
 8007836:	2301      	movs	r3, #1
 8007838:	e000      	b.n	800783c <xQueueReceive+0x44>
 800783a:	2300      	movs	r3, #0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10a      	bne.n	8007856 <xQueueReceive+0x5e>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	61fb      	str	r3, [r7, #28]
}
 8007852:	bf00      	nop
 8007854:	e7fe      	b.n	8007854 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007856:	f001 f83b 	bl	80088d0 <xTaskGetSchedulerState>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d102      	bne.n	8007866 <xQueueReceive+0x6e>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <xQueueReceive+0x72>
 8007866:	2301      	movs	r3, #1
 8007868:	e000      	b.n	800786c <xQueueReceive+0x74>
 800786a:	2300      	movs	r3, #0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10a      	bne.n	8007886 <xQueueReceive+0x8e>
	__asm volatile
 8007870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	61bb      	str	r3, [r7, #24]
}
 8007882:	bf00      	nop
 8007884:	e7fe      	b.n	8007884 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007886:	f001 fd7d 	bl	8009384 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	2b00      	cmp	r3, #0
 8007894:	d01f      	beq.n	80078d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007896:	68b9      	ldr	r1, [r7, #8]
 8007898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800789a:	f000 f8f7 	bl	8007a8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	1e5a      	subs	r2, r3, #1
 80078a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00f      	beq.n	80078ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b0:	3310      	adds	r3, #16
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 fe4e 	bl	8008554 <xTaskRemoveFromEventList>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d007      	beq.n	80078ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078be:	4b3d      	ldr	r3, [pc, #244]	; (80079b4 <xQueueReceive+0x1bc>)
 80078c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078ce:	f001 fd89 	bl	80093e4 <vPortExitCritical>
				return pdPASS;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e069      	b.n	80079aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d103      	bne.n	80078e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078dc:	f001 fd82 	bl	80093e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078e0:	2300      	movs	r3, #0
 80078e2:	e062      	b.n	80079aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d106      	bne.n	80078f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078ea:	f107 0310 	add.w	r3, r7, #16
 80078ee:	4618      	mov	r0, r3
 80078f0:	f000 fe94 	bl	800861c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078f4:	2301      	movs	r3, #1
 80078f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078f8:	f001 fd74 	bl	80093e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078fc:	f000 fc06 	bl	800810c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007900:	f001 fd40 	bl	8009384 <vPortEnterCritical>
 8007904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007906:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800790a:	b25b      	sxtb	r3, r3
 800790c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007910:	d103      	bne.n	800791a <xQueueReceive+0x122>
 8007912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800791a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007920:	b25b      	sxtb	r3, r3
 8007922:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007926:	d103      	bne.n	8007930 <xQueueReceive+0x138>
 8007928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792a:	2200      	movs	r2, #0
 800792c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007930:	f001 fd58 	bl	80093e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007934:	1d3a      	adds	r2, r7, #4
 8007936:	f107 0310 	add.w	r3, r7, #16
 800793a:	4611      	mov	r1, r2
 800793c:	4618      	mov	r0, r3
 800793e:	f000 fe83 	bl	8008648 <xTaskCheckForTimeOut>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d123      	bne.n	8007990 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800794a:	f000 f917 	bl	8007b7c <prvIsQueueEmpty>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d017      	beq.n	8007984 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007956:	3324      	adds	r3, #36	; 0x24
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	4611      	mov	r1, r2
 800795c:	4618      	mov	r0, r3
 800795e:	f000 fda9 	bl	80084b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007964:	f000 f8b8 	bl	8007ad8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007968:	f000 fbde 	bl	8008128 <xTaskResumeAll>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d189      	bne.n	8007886 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007972:	4b10      	ldr	r3, [pc, #64]	; (80079b4 <xQueueReceive+0x1bc>)
 8007974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007978:	601a      	str	r2, [r3, #0]
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	e780      	b.n	8007886 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007986:	f000 f8a7 	bl	8007ad8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800798a:	f000 fbcd 	bl	8008128 <xTaskResumeAll>
 800798e:	e77a      	b.n	8007886 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007992:	f000 f8a1 	bl	8007ad8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007996:	f000 fbc7 	bl	8008128 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800799a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800799c:	f000 f8ee 	bl	8007b7c <prvIsQueueEmpty>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f43f af6f 	beq.w	8007886 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80079a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3730      	adds	r7, #48	; 0x30
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	e000ed04 	.word	0xe000ed04

080079b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80079c4:	2300      	movs	r3, #0
 80079c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10d      	bne.n	80079f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d14d      	bne.n	8007a7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 ff92 	bl	800890c <xTaskPriorityDisinherit>
 80079e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	609a      	str	r2, [r3, #8]
 80079f0:	e043      	b.n	8007a7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d119      	bne.n	8007a2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6858      	ldr	r0, [r3, #4]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a00:	461a      	mov	r2, r3
 8007a02:	68b9      	ldr	r1, [r7, #8]
 8007a04:	f002 fa26 	bl	8009e54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a10:	441a      	add	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d32b      	bcc.n	8007a7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	605a      	str	r2, [r3, #4]
 8007a2a:	e026      	b.n	8007a7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	68d8      	ldr	r0, [r3, #12]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a34:	461a      	mov	r2, r3
 8007a36:	68b9      	ldr	r1, [r7, #8]
 8007a38:	f002 fa0c 	bl	8009e54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	68da      	ldr	r2, [r3, #12]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a44:	425b      	negs	r3, r3
 8007a46:	441a      	add	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d207      	bcs.n	8007a68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	689a      	ldr	r2, [r3, #8]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a60:	425b      	negs	r3, r3
 8007a62:	441a      	add	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d105      	bne.n	8007a7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	3b01      	subs	r3, #1
 8007a78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	1c5a      	adds	r2, r3, #1
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007a82:	697b      	ldr	r3, [r7, #20]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3718      	adds	r7, #24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d018      	beq.n	8007ad0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68da      	ldr	r2, [r3, #12]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa6:	441a      	add	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	68da      	ldr	r2, [r3, #12]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d303      	bcc.n	8007ac0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68d9      	ldr	r1, [r3, #12]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac8:	461a      	mov	r2, r3
 8007aca:	6838      	ldr	r0, [r7, #0]
 8007acc:	f002 f9c2 	bl	8009e54 <memcpy>
	}
}
 8007ad0:	bf00      	nop
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ae0:	f001 fc50 	bl	8009384 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007aec:	e011      	b.n	8007b12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d012      	beq.n	8007b1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	3324      	adds	r3, #36	; 0x24
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 fd2a 	bl	8008554 <xTaskRemoveFromEventList>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b06:	f000 fe01 	bl	800870c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	dce9      	bgt.n	8007aee <prvUnlockQueue+0x16>
 8007b1a:	e000      	b.n	8007b1e <prvUnlockQueue+0x46>
					break;
 8007b1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	22ff      	movs	r2, #255	; 0xff
 8007b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007b26:	f001 fc5d 	bl	80093e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007b2a:	f001 fc2b 	bl	8009384 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b36:	e011      	b.n	8007b5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d012      	beq.n	8007b66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	3310      	adds	r3, #16
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 fd05 	bl	8008554 <xTaskRemoveFromEventList>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d001      	beq.n	8007b54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007b50:	f000 fddc 	bl	800870c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007b54:	7bbb      	ldrb	r3, [r7, #14]
 8007b56:	3b01      	subs	r3, #1
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	dce9      	bgt.n	8007b38 <prvUnlockQueue+0x60>
 8007b64:	e000      	b.n	8007b68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	22ff      	movs	r2, #255	; 0xff
 8007b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007b70:	f001 fc38 	bl	80093e4 <vPortExitCritical>
}
 8007b74:	bf00      	nop
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b84:	f001 fbfe 	bl	8009384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d102      	bne.n	8007b96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b90:	2301      	movs	r3, #1
 8007b92:	60fb      	str	r3, [r7, #12]
 8007b94:	e001      	b.n	8007b9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b96:	2300      	movs	r3, #0
 8007b98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b9a:	f001 fc23 	bl	80093e4 <vPortExitCritical>

	return xReturn;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007bb0:	f001 fbe8 	bl	8009384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d102      	bne.n	8007bc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	60fb      	str	r3, [r7, #12]
 8007bc4:	e001      	b.n	8007bca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bca:	f001 fc0b 	bl	80093e4 <vPortExitCritical>

	return xReturn;
 8007bce:	68fb      	ldr	r3, [r7, #12]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007be2:	2300      	movs	r3, #0
 8007be4:	60fb      	str	r3, [r7, #12]
 8007be6:	e014      	b.n	8007c12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007be8:	4a0f      	ldr	r2, [pc, #60]	; (8007c28 <vQueueAddToRegistry+0x50>)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10b      	bne.n	8007c0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007bf4:	490c      	ldr	r1, [pc, #48]	; (8007c28 <vQueueAddToRegistry+0x50>)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007bfe:	4a0a      	ldr	r2, [pc, #40]	; (8007c28 <vQueueAddToRegistry+0x50>)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	00db      	lsls	r3, r3, #3
 8007c04:	4413      	add	r3, r2
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007c0a:	e006      	b.n	8007c1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	60fb      	str	r3, [r7, #12]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2b07      	cmp	r3, #7
 8007c16:	d9e7      	bls.n	8007be8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c18:	bf00      	nop
 8007c1a:	bf00      	nop
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	20004c5c 	.word	0x20004c5c

08007c2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007c3c:	f001 fba2 	bl	8009384 <vPortEnterCritical>
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c46:	b25b      	sxtb	r3, r3
 8007c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c4c:	d103      	bne.n	8007c56 <vQueueWaitForMessageRestricted+0x2a>
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c5c:	b25b      	sxtb	r3, r3
 8007c5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c62:	d103      	bne.n	8007c6c <vQueueWaitForMessageRestricted+0x40>
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c6c:	f001 fbba 	bl	80093e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d106      	bne.n	8007c86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	3324      	adds	r3, #36	; 0x24
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	68b9      	ldr	r1, [r7, #8]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 fc3b 	bl	80084fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007c86:	6978      	ldr	r0, [r7, #20]
 8007c88:	f7ff ff26 	bl	8007ad8 <prvUnlockQueue>
	}
 8007c8c:	bf00      	nop
 8007c8e:	3718      	adds	r7, #24
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08e      	sub	sp, #56	; 0x38
 8007c98:	af04      	add	r7, sp, #16
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10a      	bne.n	8007cbe <xTaskCreateStatic+0x2a>
	__asm volatile
 8007ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cac:	f383 8811 	msr	BASEPRI, r3
 8007cb0:	f3bf 8f6f 	isb	sy
 8007cb4:	f3bf 8f4f 	dsb	sy
 8007cb8:	623b      	str	r3, [r7, #32]
}
 8007cba:	bf00      	nop
 8007cbc:	e7fe      	b.n	8007cbc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10a      	bne.n	8007cda <xTaskCreateStatic+0x46>
	__asm volatile
 8007cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	61fb      	str	r3, [r7, #28]
}
 8007cd6:	bf00      	nop
 8007cd8:	e7fe      	b.n	8007cd8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007cda:	235c      	movs	r3, #92	; 0x5c
 8007cdc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	2b5c      	cmp	r3, #92	; 0x5c
 8007ce2:	d00a      	beq.n	8007cfa <xTaskCreateStatic+0x66>
	__asm volatile
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	61bb      	str	r3, [r7, #24]
}
 8007cf6:	bf00      	nop
 8007cf8:	e7fe      	b.n	8007cf8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007cfa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d01e      	beq.n	8007d40 <xTaskCreateStatic+0xac>
 8007d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d01b      	beq.n	8007d40 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d14:	2202      	movs	r2, #2
 8007d16:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	9303      	str	r3, [sp, #12]
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	9302      	str	r3, [sp, #8]
 8007d22:	f107 0314 	add.w	r3, r7, #20
 8007d26:	9301      	str	r3, [sp, #4]
 8007d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	68b9      	ldr	r1, [r7, #8]
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f000 f850 	bl	8007dd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d3a:	f000 f8dd 	bl	8007ef8 <prvAddNewTaskToReadyList>
 8007d3e:	e001      	b.n	8007d44 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007d40:	2300      	movs	r3, #0
 8007d42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d44:	697b      	ldr	r3, [r7, #20]
	}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3728      	adds	r7, #40	; 0x28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b08c      	sub	sp, #48	; 0x30
 8007d52:	af04      	add	r7, sp, #16
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	603b      	str	r3, [r7, #0]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d5e:	88fb      	ldrh	r3, [r7, #6]
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4618      	mov	r0, r3
 8007d64:	f001 fc30 	bl	80095c8 <pvPortMalloc>
 8007d68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00e      	beq.n	8007d8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d70:	205c      	movs	r0, #92	; 0x5c
 8007d72:	f001 fc29 	bl	80095c8 <pvPortMalloc>
 8007d76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d003      	beq.n	8007d86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	697a      	ldr	r2, [r7, #20]
 8007d82:	631a      	str	r2, [r3, #48]	; 0x30
 8007d84:	e005      	b.n	8007d92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d86:	6978      	ldr	r0, [r7, #20]
 8007d88:	f001 fcea 	bl	8009760 <vPortFree>
 8007d8c:	e001      	b.n	8007d92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d017      	beq.n	8007dc8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007da0:	88fa      	ldrh	r2, [r7, #6]
 8007da2:	2300      	movs	r3, #0
 8007da4:	9303      	str	r3, [sp, #12]
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	9302      	str	r3, [sp, #8]
 8007daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dac:	9301      	str	r3, [sp, #4]
 8007dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db0:	9300      	str	r3, [sp, #0]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	68b9      	ldr	r1, [r7, #8]
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 f80e 	bl	8007dd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007dbc:	69f8      	ldr	r0, [r7, #28]
 8007dbe:	f000 f89b 	bl	8007ef8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	61bb      	str	r3, [r7, #24]
 8007dc6:	e002      	b.n	8007dce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dcc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007dce:	69bb      	ldr	r3, [r7, #24]
	}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3720      	adds	r7, #32
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b088      	sub	sp, #32
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
 8007de4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	461a      	mov	r2, r3
 8007df0:	21a5      	movs	r1, #165	; 0xa5
 8007df2:	f002 f83d 	bl	8009e70 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007e00:	3b01      	subs	r3, #1
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4413      	add	r3, r2
 8007e06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	f023 0307 	bic.w	r3, r3, #7
 8007e0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	f003 0307 	and.w	r3, r3, #7
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00a      	beq.n	8007e30 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	617b      	str	r3, [r7, #20]
}
 8007e2c:	bf00      	nop
 8007e2e:	e7fe      	b.n	8007e2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d01f      	beq.n	8007e76 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e36:	2300      	movs	r3, #0
 8007e38:	61fb      	str	r3, [r7, #28]
 8007e3a:	e012      	b.n	8007e62 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	4413      	add	r3, r2
 8007e42:	7819      	ldrb	r1, [r3, #0]
 8007e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	4413      	add	r3, r2
 8007e4a:	3334      	adds	r3, #52	; 0x34
 8007e4c:	460a      	mov	r2, r1
 8007e4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	4413      	add	r3, r2
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d006      	beq.n	8007e6a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	61fb      	str	r3, [r7, #28]
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	2b0f      	cmp	r3, #15
 8007e66:	d9e9      	bls.n	8007e3c <prvInitialiseNewTask+0x64>
 8007e68:	e000      	b.n	8007e6c <prvInitialiseNewTask+0x94>
			{
				break;
 8007e6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e74:	e003      	b.n	8007e7e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e80:	2b37      	cmp	r3, #55	; 0x37
 8007e82:	d901      	bls.n	8007e88 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e84:	2337      	movs	r3, #55	; 0x37
 8007e86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e96:	2200      	movs	r2, #0
 8007e98:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9c:	3304      	adds	r3, #4
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7ff f978 	bl	8007194 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea6:	3318      	adds	r3, #24
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7ff f973 	bl	8007194 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ec2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	68f9      	ldr	r1, [r7, #12]
 8007ed6:	69b8      	ldr	r0, [r7, #24]
 8007ed8:	f001 f928 	bl	800912c <pxPortInitialiseStack>
 8007edc:	4602      	mov	r2, r0
 8007ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007eee:	bf00      	nop
 8007ef0:	3720      	adds	r7, #32
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
	...

08007ef8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f00:	f001 fa40 	bl	8009384 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f04:	4b2d      	ldr	r3, [pc, #180]	; (8007fbc <prvAddNewTaskToReadyList+0xc4>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	4a2c      	ldr	r2, [pc, #176]	; (8007fbc <prvAddNewTaskToReadyList+0xc4>)
 8007f0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f0e:	4b2c      	ldr	r3, [pc, #176]	; (8007fc0 <prvAddNewTaskToReadyList+0xc8>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d109      	bne.n	8007f2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f16:	4a2a      	ldr	r2, [pc, #168]	; (8007fc0 <prvAddNewTaskToReadyList+0xc8>)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f1c:	4b27      	ldr	r3, [pc, #156]	; (8007fbc <prvAddNewTaskToReadyList+0xc4>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d110      	bne.n	8007f46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f24:	f000 fc16 	bl	8008754 <prvInitialiseTaskLists>
 8007f28:	e00d      	b.n	8007f46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f2a:	4b26      	ldr	r3, [pc, #152]	; (8007fc4 <prvAddNewTaskToReadyList+0xcc>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d109      	bne.n	8007f46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f32:	4b23      	ldr	r3, [pc, #140]	; (8007fc0 <prvAddNewTaskToReadyList+0xc8>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d802      	bhi.n	8007f46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f40:	4a1f      	ldr	r2, [pc, #124]	; (8007fc0 <prvAddNewTaskToReadyList+0xc8>)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f46:	4b20      	ldr	r3, [pc, #128]	; (8007fc8 <prvAddNewTaskToReadyList+0xd0>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	4a1e      	ldr	r2, [pc, #120]	; (8007fc8 <prvAddNewTaskToReadyList+0xd0>)
 8007f4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007f50:	4b1d      	ldr	r3, [pc, #116]	; (8007fc8 <prvAddNewTaskToReadyList+0xd0>)
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f5c:	4b1b      	ldr	r3, [pc, #108]	; (8007fcc <prvAddNewTaskToReadyList+0xd4>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d903      	bls.n	8007f6c <prvAddNewTaskToReadyList+0x74>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f68:	4a18      	ldr	r2, [pc, #96]	; (8007fcc <prvAddNewTaskToReadyList+0xd4>)
 8007f6a:	6013      	str	r3, [r2, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f70:	4613      	mov	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4413      	add	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4a15      	ldr	r2, [pc, #84]	; (8007fd0 <prvAddNewTaskToReadyList+0xd8>)
 8007f7a:	441a      	add	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	3304      	adds	r3, #4
 8007f80:	4619      	mov	r1, r3
 8007f82:	4610      	mov	r0, r2
 8007f84:	f7ff f913 	bl	80071ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f88:	f001 fa2c 	bl	80093e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f8c:	4b0d      	ldr	r3, [pc, #52]	; (8007fc4 <prvAddNewTaskToReadyList+0xcc>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00e      	beq.n	8007fb2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f94:	4b0a      	ldr	r3, [pc, #40]	; (8007fc0 <prvAddNewTaskToReadyList+0xc8>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d207      	bcs.n	8007fb2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007fa2:	4b0c      	ldr	r3, [pc, #48]	; (8007fd4 <prvAddNewTaskToReadyList+0xdc>)
 8007fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fa8:	601a      	str	r2, [r3, #0]
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fb2:	bf00      	nop
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	20000c58 	.word	0x20000c58
 8007fc0:	20000784 	.word	0x20000784
 8007fc4:	20000c64 	.word	0x20000c64
 8007fc8:	20000c74 	.word	0x20000c74
 8007fcc:	20000c60 	.word	0x20000c60
 8007fd0:	20000788 	.word	0x20000788
 8007fd4:	e000ed04 	.word	0xe000ed04

08007fd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d017      	beq.n	800801a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007fea:	4b13      	ldr	r3, [pc, #76]	; (8008038 <vTaskDelay+0x60>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00a      	beq.n	8008008 <vTaskDelay+0x30>
	__asm volatile
 8007ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	60bb      	str	r3, [r7, #8]
}
 8008004:	bf00      	nop
 8008006:	e7fe      	b.n	8008006 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008008:	f000 f880 	bl	800810c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800800c:	2100      	movs	r1, #0
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fcea 	bl	80089e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008014:	f000 f888 	bl	8008128 <xTaskResumeAll>
 8008018:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d107      	bne.n	8008030 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008020:	4b06      	ldr	r3, [pc, #24]	; (800803c <vTaskDelay+0x64>)
 8008022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008026:	601a      	str	r2, [r3, #0]
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008030:	bf00      	nop
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	20000c80 	.word	0x20000c80
 800803c:	e000ed04 	.word	0xe000ed04

08008040 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b08a      	sub	sp, #40	; 0x28
 8008044:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008046:	2300      	movs	r3, #0
 8008048:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800804a:	2300      	movs	r3, #0
 800804c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800804e:	463a      	mov	r2, r7
 8008050:	1d39      	adds	r1, r7, #4
 8008052:	f107 0308 	add.w	r3, r7, #8
 8008056:	4618      	mov	r0, r3
 8008058:	f7ff f848 	bl	80070ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	9202      	str	r2, [sp, #8]
 8008064:	9301      	str	r3, [sp, #4]
 8008066:	2300      	movs	r3, #0
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	2300      	movs	r3, #0
 800806c:	460a      	mov	r2, r1
 800806e:	4921      	ldr	r1, [pc, #132]	; (80080f4 <vTaskStartScheduler+0xb4>)
 8008070:	4821      	ldr	r0, [pc, #132]	; (80080f8 <vTaskStartScheduler+0xb8>)
 8008072:	f7ff fe0f 	bl	8007c94 <xTaskCreateStatic>
 8008076:	4603      	mov	r3, r0
 8008078:	4a20      	ldr	r2, [pc, #128]	; (80080fc <vTaskStartScheduler+0xbc>)
 800807a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800807c:	4b1f      	ldr	r3, [pc, #124]	; (80080fc <vTaskStartScheduler+0xbc>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008084:	2301      	movs	r3, #1
 8008086:	617b      	str	r3, [r7, #20]
 8008088:	e001      	b.n	800808e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800808a:	2300      	movs	r3, #0
 800808c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d102      	bne.n	800809a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008094:	f000 fcfc 	bl	8008a90 <xTimerCreateTimerTask>
 8008098:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d116      	bne.n	80080ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	613b      	str	r3, [r7, #16]
}
 80080b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80080b4:	4b12      	ldr	r3, [pc, #72]	; (8008100 <vTaskStartScheduler+0xc0>)
 80080b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80080bc:	4b11      	ldr	r3, [pc, #68]	; (8008104 <vTaskStartScheduler+0xc4>)
 80080be:	2201      	movs	r2, #1
 80080c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80080c2:	4b11      	ldr	r3, [pc, #68]	; (8008108 <vTaskStartScheduler+0xc8>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80080c8:	f001 f8ba 	bl	8009240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80080cc:	e00e      	b.n	80080ec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080d4:	d10a      	bne.n	80080ec <vTaskStartScheduler+0xac>
	__asm volatile
 80080d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080da:	f383 8811 	msr	BASEPRI, r3
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	60fb      	str	r3, [r7, #12]
}
 80080e8:	bf00      	nop
 80080ea:	e7fe      	b.n	80080ea <vTaskStartScheduler+0xaa>
}
 80080ec:	bf00      	nop
 80080ee:	3718      	adds	r7, #24
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	0800a75c 	.word	0x0800a75c
 80080f8:	08008725 	.word	0x08008725
 80080fc:	20000c7c 	.word	0x20000c7c
 8008100:	20000c78 	.word	0x20000c78
 8008104:	20000c64 	.word	0x20000c64
 8008108:	20000c5c 	.word	0x20000c5c

0800810c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800810c:	b480      	push	{r7}
 800810e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008110:	4b04      	ldr	r3, [pc, #16]	; (8008124 <vTaskSuspendAll+0x18>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	3301      	adds	r3, #1
 8008116:	4a03      	ldr	r2, [pc, #12]	; (8008124 <vTaskSuspendAll+0x18>)
 8008118:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800811a:	bf00      	nop
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	20000c80 	.word	0x20000c80

08008128 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800812e:	2300      	movs	r3, #0
 8008130:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008132:	2300      	movs	r3, #0
 8008134:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008136:	4b42      	ldr	r3, [pc, #264]	; (8008240 <xTaskResumeAll+0x118>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10a      	bne.n	8008154 <xTaskResumeAll+0x2c>
	__asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	603b      	str	r3, [r7, #0]
}
 8008150:	bf00      	nop
 8008152:	e7fe      	b.n	8008152 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008154:	f001 f916 	bl	8009384 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008158:	4b39      	ldr	r3, [pc, #228]	; (8008240 <xTaskResumeAll+0x118>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3b01      	subs	r3, #1
 800815e:	4a38      	ldr	r2, [pc, #224]	; (8008240 <xTaskResumeAll+0x118>)
 8008160:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008162:	4b37      	ldr	r3, [pc, #220]	; (8008240 <xTaskResumeAll+0x118>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d162      	bne.n	8008230 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800816a:	4b36      	ldr	r3, [pc, #216]	; (8008244 <xTaskResumeAll+0x11c>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d05e      	beq.n	8008230 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008172:	e02f      	b.n	80081d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008174:	4b34      	ldr	r3, [pc, #208]	; (8008248 <xTaskResumeAll+0x120>)
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	3318      	adds	r3, #24
 8008180:	4618      	mov	r0, r3
 8008182:	f7ff f871 	bl	8007268 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	3304      	adds	r3, #4
 800818a:	4618      	mov	r0, r3
 800818c:	f7ff f86c 	bl	8007268 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008194:	4b2d      	ldr	r3, [pc, #180]	; (800824c <xTaskResumeAll+0x124>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	429a      	cmp	r2, r3
 800819a:	d903      	bls.n	80081a4 <xTaskResumeAll+0x7c>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a0:	4a2a      	ldr	r2, [pc, #168]	; (800824c <xTaskResumeAll+0x124>)
 80081a2:	6013      	str	r3, [r2, #0]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a8:	4613      	mov	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4413      	add	r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	4a27      	ldr	r2, [pc, #156]	; (8008250 <xTaskResumeAll+0x128>)
 80081b2:	441a      	add	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	3304      	adds	r3, #4
 80081b8:	4619      	mov	r1, r3
 80081ba:	4610      	mov	r0, r2
 80081bc:	f7fe fff7 	bl	80071ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c4:	4b23      	ldr	r3, [pc, #140]	; (8008254 <xTaskResumeAll+0x12c>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d302      	bcc.n	80081d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80081ce:	4b22      	ldr	r3, [pc, #136]	; (8008258 <xTaskResumeAll+0x130>)
 80081d0:	2201      	movs	r2, #1
 80081d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081d4:	4b1c      	ldr	r3, [pc, #112]	; (8008248 <xTaskResumeAll+0x120>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1cb      	bne.n	8008174 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d001      	beq.n	80081e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80081e2:	f000 fb55 	bl	8008890 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80081e6:	4b1d      	ldr	r3, [pc, #116]	; (800825c <xTaskResumeAll+0x134>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d010      	beq.n	8008214 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80081f2:	f000 f847 	bl	8008284 <xTaskIncrementTick>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80081fc:	4b16      	ldr	r3, [pc, #88]	; (8008258 <xTaskResumeAll+0x130>)
 80081fe:	2201      	movs	r2, #1
 8008200:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	3b01      	subs	r3, #1
 8008206:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1f1      	bne.n	80081f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800820e:	4b13      	ldr	r3, [pc, #76]	; (800825c <xTaskResumeAll+0x134>)
 8008210:	2200      	movs	r2, #0
 8008212:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008214:	4b10      	ldr	r3, [pc, #64]	; (8008258 <xTaskResumeAll+0x130>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d009      	beq.n	8008230 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800821c:	2301      	movs	r3, #1
 800821e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008220:	4b0f      	ldr	r3, [pc, #60]	; (8008260 <xTaskResumeAll+0x138>)
 8008222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008230:	f001 f8d8 	bl	80093e4 <vPortExitCritical>

	return xAlreadyYielded;
 8008234:	68bb      	ldr	r3, [r7, #8]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	20000c80 	.word	0x20000c80
 8008244:	20000c58 	.word	0x20000c58
 8008248:	20000c18 	.word	0x20000c18
 800824c:	20000c60 	.word	0x20000c60
 8008250:	20000788 	.word	0x20000788
 8008254:	20000784 	.word	0x20000784
 8008258:	20000c6c 	.word	0x20000c6c
 800825c:	20000c68 	.word	0x20000c68
 8008260:	e000ed04 	.word	0xe000ed04

08008264 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800826a:	4b05      	ldr	r3, [pc, #20]	; (8008280 <xTaskGetTickCount+0x1c>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008270:	687b      	ldr	r3, [r7, #4]
}
 8008272:	4618      	mov	r0, r3
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	20000c5c 	.word	0x20000c5c

08008284 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800828a:	2300      	movs	r3, #0
 800828c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800828e:	4b4f      	ldr	r3, [pc, #316]	; (80083cc <xTaskIncrementTick+0x148>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	f040 808f 	bne.w	80083b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008298:	4b4d      	ldr	r3, [pc, #308]	; (80083d0 <xTaskIncrementTick+0x14c>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	3301      	adds	r3, #1
 800829e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80082a0:	4a4b      	ldr	r2, [pc, #300]	; (80083d0 <xTaskIncrementTick+0x14c>)
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d120      	bne.n	80082ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80082ac:	4b49      	ldr	r3, [pc, #292]	; (80083d4 <xTaskIncrementTick+0x150>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00a      	beq.n	80082cc <xTaskIncrementTick+0x48>
	__asm volatile
 80082b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ba:	f383 8811 	msr	BASEPRI, r3
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	603b      	str	r3, [r7, #0]
}
 80082c8:	bf00      	nop
 80082ca:	e7fe      	b.n	80082ca <xTaskIncrementTick+0x46>
 80082cc:	4b41      	ldr	r3, [pc, #260]	; (80083d4 <xTaskIncrementTick+0x150>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	60fb      	str	r3, [r7, #12]
 80082d2:	4b41      	ldr	r3, [pc, #260]	; (80083d8 <xTaskIncrementTick+0x154>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a3f      	ldr	r2, [pc, #252]	; (80083d4 <xTaskIncrementTick+0x150>)
 80082d8:	6013      	str	r3, [r2, #0]
 80082da:	4a3f      	ldr	r2, [pc, #252]	; (80083d8 <xTaskIncrementTick+0x154>)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6013      	str	r3, [r2, #0]
 80082e0:	4b3e      	ldr	r3, [pc, #248]	; (80083dc <xTaskIncrementTick+0x158>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	3301      	adds	r3, #1
 80082e6:	4a3d      	ldr	r2, [pc, #244]	; (80083dc <xTaskIncrementTick+0x158>)
 80082e8:	6013      	str	r3, [r2, #0]
 80082ea:	f000 fad1 	bl	8008890 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80082ee:	4b3c      	ldr	r3, [pc, #240]	; (80083e0 <xTaskIncrementTick+0x15c>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	693a      	ldr	r2, [r7, #16]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d349      	bcc.n	800838c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082f8:	4b36      	ldr	r3, [pc, #216]	; (80083d4 <xTaskIncrementTick+0x150>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d104      	bne.n	800830c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008302:	4b37      	ldr	r3, [pc, #220]	; (80083e0 <xTaskIncrementTick+0x15c>)
 8008304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008308:	601a      	str	r2, [r3, #0]
					break;
 800830a:	e03f      	b.n	800838c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800830c:	4b31      	ldr	r3, [pc, #196]	; (80083d4 <xTaskIncrementTick+0x150>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800831c:	693a      	ldr	r2, [r7, #16]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	429a      	cmp	r2, r3
 8008322:	d203      	bcs.n	800832c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008324:	4a2e      	ldr	r2, [pc, #184]	; (80083e0 <xTaskIncrementTick+0x15c>)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800832a:	e02f      	b.n	800838c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	3304      	adds	r3, #4
 8008330:	4618      	mov	r0, r3
 8008332:	f7fe ff99 	bl	8007268 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833a:	2b00      	cmp	r3, #0
 800833c:	d004      	beq.n	8008348 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	3318      	adds	r3, #24
 8008342:	4618      	mov	r0, r3
 8008344:	f7fe ff90 	bl	8007268 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834c:	4b25      	ldr	r3, [pc, #148]	; (80083e4 <xTaskIncrementTick+0x160>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	429a      	cmp	r2, r3
 8008352:	d903      	bls.n	800835c <xTaskIncrementTick+0xd8>
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008358:	4a22      	ldr	r2, [pc, #136]	; (80083e4 <xTaskIncrementTick+0x160>)
 800835a:	6013      	str	r3, [r2, #0]
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008360:	4613      	mov	r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	4413      	add	r3, r2
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4a1f      	ldr	r2, [pc, #124]	; (80083e8 <xTaskIncrementTick+0x164>)
 800836a:	441a      	add	r2, r3
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	3304      	adds	r3, #4
 8008370:	4619      	mov	r1, r3
 8008372:	4610      	mov	r0, r2
 8008374:	f7fe ff1b 	bl	80071ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800837c:	4b1b      	ldr	r3, [pc, #108]	; (80083ec <xTaskIncrementTick+0x168>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008382:	429a      	cmp	r2, r3
 8008384:	d3b8      	bcc.n	80082f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008386:	2301      	movs	r3, #1
 8008388:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800838a:	e7b5      	b.n	80082f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800838c:	4b17      	ldr	r3, [pc, #92]	; (80083ec <xTaskIncrementTick+0x168>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008392:	4915      	ldr	r1, [pc, #84]	; (80083e8 <xTaskIncrementTick+0x164>)
 8008394:	4613      	mov	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	440b      	add	r3, r1
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d901      	bls.n	80083a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80083a4:	2301      	movs	r3, #1
 80083a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80083a8:	4b11      	ldr	r3, [pc, #68]	; (80083f0 <xTaskIncrementTick+0x16c>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d007      	beq.n	80083c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80083b0:	2301      	movs	r3, #1
 80083b2:	617b      	str	r3, [r7, #20]
 80083b4:	e004      	b.n	80083c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80083b6:	4b0f      	ldr	r3, [pc, #60]	; (80083f4 <xTaskIncrementTick+0x170>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	3301      	adds	r3, #1
 80083bc:	4a0d      	ldr	r2, [pc, #52]	; (80083f4 <xTaskIncrementTick+0x170>)
 80083be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80083c0:	697b      	ldr	r3, [r7, #20]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3718      	adds	r7, #24
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	20000c80 	.word	0x20000c80
 80083d0:	20000c5c 	.word	0x20000c5c
 80083d4:	20000c10 	.word	0x20000c10
 80083d8:	20000c14 	.word	0x20000c14
 80083dc:	20000c70 	.word	0x20000c70
 80083e0:	20000c78 	.word	0x20000c78
 80083e4:	20000c60 	.word	0x20000c60
 80083e8:	20000788 	.word	0x20000788
 80083ec:	20000784 	.word	0x20000784
 80083f0:	20000c6c 	.word	0x20000c6c
 80083f4:	20000c68 	.word	0x20000c68

080083f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083fe:	4b28      	ldr	r3, [pc, #160]	; (80084a0 <vTaskSwitchContext+0xa8>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d003      	beq.n	800840e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008406:	4b27      	ldr	r3, [pc, #156]	; (80084a4 <vTaskSwitchContext+0xac>)
 8008408:	2201      	movs	r2, #1
 800840a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800840c:	e041      	b.n	8008492 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800840e:	4b25      	ldr	r3, [pc, #148]	; (80084a4 <vTaskSwitchContext+0xac>)
 8008410:	2200      	movs	r2, #0
 8008412:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008414:	4b24      	ldr	r3, [pc, #144]	; (80084a8 <vTaskSwitchContext+0xb0>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	60fb      	str	r3, [r7, #12]
 800841a:	e010      	b.n	800843e <vTaskSwitchContext+0x46>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d10a      	bne.n	8008438 <vTaskSwitchContext+0x40>
	__asm volatile
 8008422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008426:	f383 8811 	msr	BASEPRI, r3
 800842a:	f3bf 8f6f 	isb	sy
 800842e:	f3bf 8f4f 	dsb	sy
 8008432:	607b      	str	r3, [r7, #4]
}
 8008434:	bf00      	nop
 8008436:	e7fe      	b.n	8008436 <vTaskSwitchContext+0x3e>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	3b01      	subs	r3, #1
 800843c:	60fb      	str	r3, [r7, #12]
 800843e:	491b      	ldr	r1, [pc, #108]	; (80084ac <vTaskSwitchContext+0xb4>)
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	4613      	mov	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4413      	add	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	440b      	add	r3, r1
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d0e4      	beq.n	800841c <vTaskSwitchContext+0x24>
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	4613      	mov	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4a13      	ldr	r2, [pc, #76]	; (80084ac <vTaskSwitchContext+0xb4>)
 800845e:	4413      	add	r3, r2
 8008460:	60bb      	str	r3, [r7, #8]
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	685a      	ldr	r2, [r3, #4]
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	605a      	str	r2, [r3, #4]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	685a      	ldr	r2, [r3, #4]
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	3308      	adds	r3, #8
 8008474:	429a      	cmp	r2, r3
 8008476:	d104      	bne.n	8008482 <vTaskSwitchContext+0x8a>
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	605a      	str	r2, [r3, #4]
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	4a09      	ldr	r2, [pc, #36]	; (80084b0 <vTaskSwitchContext+0xb8>)
 800848a:	6013      	str	r3, [r2, #0]
 800848c:	4a06      	ldr	r2, [pc, #24]	; (80084a8 <vTaskSwitchContext+0xb0>)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6013      	str	r3, [r2, #0]
}
 8008492:	bf00      	nop
 8008494:	3714      	adds	r7, #20
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	20000c80 	.word	0x20000c80
 80084a4:	20000c6c 	.word	0x20000c6c
 80084a8:	20000c60 	.word	0x20000c60
 80084ac:	20000788 	.word	0x20000788
 80084b0:	20000784 	.word	0x20000784

080084b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10a      	bne.n	80084da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80084c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	60fb      	str	r3, [r7, #12]
}
 80084d6:	bf00      	nop
 80084d8:	e7fe      	b.n	80084d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084da:	4b07      	ldr	r3, [pc, #28]	; (80084f8 <vTaskPlaceOnEventList+0x44>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	3318      	adds	r3, #24
 80084e0:	4619      	mov	r1, r3
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f7fe fe87 	bl	80071f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80084e8:	2101      	movs	r1, #1
 80084ea:	6838      	ldr	r0, [r7, #0]
 80084ec:	f000 fa7c 	bl	80089e8 <prvAddCurrentTaskToDelayedList>
}
 80084f0:	bf00      	nop
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	20000784 	.word	0x20000784

080084fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b086      	sub	sp, #24
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10a      	bne.n	8008524 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	617b      	str	r3, [r7, #20]
}
 8008520:	bf00      	nop
 8008522:	e7fe      	b.n	8008522 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008524:	4b0a      	ldr	r3, [pc, #40]	; (8008550 <vTaskPlaceOnEventListRestricted+0x54>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3318      	adds	r3, #24
 800852a:	4619      	mov	r1, r3
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f7fe fe3e 	bl	80071ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d002      	beq.n	800853e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800853c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800853e:	6879      	ldr	r1, [r7, #4]
 8008540:	68b8      	ldr	r0, [r7, #8]
 8008542:	f000 fa51 	bl	80089e8 <prvAddCurrentTaskToDelayedList>
	}
 8008546:	bf00      	nop
 8008548:	3718      	adds	r7, #24
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	20000784 	.word	0x20000784

08008554 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10a      	bne.n	8008580 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800856a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	60fb      	str	r3, [r7, #12]
}
 800857c:	bf00      	nop
 800857e:	e7fe      	b.n	800857e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	3318      	adds	r3, #24
 8008584:	4618      	mov	r0, r3
 8008586:	f7fe fe6f 	bl	8007268 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800858a:	4b1e      	ldr	r3, [pc, #120]	; (8008604 <xTaskRemoveFromEventList+0xb0>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d11d      	bne.n	80085ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	3304      	adds	r3, #4
 8008596:	4618      	mov	r0, r3
 8008598:	f7fe fe66 	bl	8007268 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a0:	4b19      	ldr	r3, [pc, #100]	; (8008608 <xTaskRemoveFromEventList+0xb4>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d903      	bls.n	80085b0 <xTaskRemoveFromEventList+0x5c>
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ac:	4a16      	ldr	r2, [pc, #88]	; (8008608 <xTaskRemoveFromEventList+0xb4>)
 80085ae:	6013      	str	r3, [r2, #0]
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085b4:	4613      	mov	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	4413      	add	r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4a13      	ldr	r2, [pc, #76]	; (800860c <xTaskRemoveFromEventList+0xb8>)
 80085be:	441a      	add	r2, r3
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	3304      	adds	r3, #4
 80085c4:	4619      	mov	r1, r3
 80085c6:	4610      	mov	r0, r2
 80085c8:	f7fe fdf1 	bl	80071ae <vListInsertEnd>
 80085cc:	e005      	b.n	80085da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	3318      	adds	r3, #24
 80085d2:	4619      	mov	r1, r3
 80085d4:	480e      	ldr	r0, [pc, #56]	; (8008610 <xTaskRemoveFromEventList+0xbc>)
 80085d6:	f7fe fdea 	bl	80071ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085de:	4b0d      	ldr	r3, [pc, #52]	; (8008614 <xTaskRemoveFromEventList+0xc0>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d905      	bls.n	80085f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80085e8:	2301      	movs	r3, #1
 80085ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80085ec:	4b0a      	ldr	r3, [pc, #40]	; (8008618 <xTaskRemoveFromEventList+0xc4>)
 80085ee:	2201      	movs	r2, #1
 80085f0:	601a      	str	r2, [r3, #0]
 80085f2:	e001      	b.n	80085f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80085f4:	2300      	movs	r3, #0
 80085f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80085f8:	697b      	ldr	r3, [r7, #20]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3718      	adds	r7, #24
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	20000c80 	.word	0x20000c80
 8008608:	20000c60 	.word	0x20000c60
 800860c:	20000788 	.word	0x20000788
 8008610:	20000c18 	.word	0x20000c18
 8008614:	20000784 	.word	0x20000784
 8008618:	20000c6c 	.word	0x20000c6c

0800861c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008624:	4b06      	ldr	r3, [pc, #24]	; (8008640 <vTaskInternalSetTimeOutState+0x24>)
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800862c:	4b05      	ldr	r3, [pc, #20]	; (8008644 <vTaskInternalSetTimeOutState+0x28>)
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	605a      	str	r2, [r3, #4]
}
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	20000c70 	.word	0x20000c70
 8008644:	20000c5c 	.word	0x20000c5c

08008648 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b088      	sub	sp, #32
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10a      	bne.n	800866e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865c:	f383 8811 	msr	BASEPRI, r3
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	613b      	str	r3, [r7, #16]
}
 800866a:	bf00      	nop
 800866c:	e7fe      	b.n	800866c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10a      	bne.n	800868a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008678:	f383 8811 	msr	BASEPRI, r3
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	60fb      	str	r3, [r7, #12]
}
 8008686:	bf00      	nop
 8008688:	e7fe      	b.n	8008688 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800868a:	f000 fe7b 	bl	8009384 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800868e:	4b1d      	ldr	r3, [pc, #116]	; (8008704 <xTaskCheckForTimeOut+0xbc>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	69ba      	ldr	r2, [r7, #24]
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086a6:	d102      	bne.n	80086ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80086a8:	2300      	movs	r3, #0
 80086aa:	61fb      	str	r3, [r7, #28]
 80086ac:	e023      	b.n	80086f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	4b15      	ldr	r3, [pc, #84]	; (8008708 <xTaskCheckForTimeOut+0xc0>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d007      	beq.n	80086ca <xTaskCheckForTimeOut+0x82>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	69ba      	ldr	r2, [r7, #24]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d302      	bcc.n	80086ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80086c4:	2301      	movs	r3, #1
 80086c6:	61fb      	str	r3, [r7, #28]
 80086c8:	e015      	b.n	80086f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d20b      	bcs.n	80086ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	1ad2      	subs	r2, r2, r3
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7ff ff9b 	bl	800861c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80086e6:	2300      	movs	r3, #0
 80086e8:	61fb      	str	r3, [r7, #28]
 80086ea:	e004      	b.n	80086f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	2200      	movs	r2, #0
 80086f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80086f2:	2301      	movs	r3, #1
 80086f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80086f6:	f000 fe75 	bl	80093e4 <vPortExitCritical>

	return xReturn;
 80086fa:	69fb      	ldr	r3, [r7, #28]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3720      	adds	r7, #32
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	20000c5c 	.word	0x20000c5c
 8008708:	20000c70 	.word	0x20000c70

0800870c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800870c:	b480      	push	{r7}
 800870e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008710:	4b03      	ldr	r3, [pc, #12]	; (8008720 <vTaskMissedYield+0x14>)
 8008712:	2201      	movs	r2, #1
 8008714:	601a      	str	r2, [r3, #0]
}
 8008716:	bf00      	nop
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	20000c6c 	.word	0x20000c6c

08008724 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800872c:	f000 f852 	bl	80087d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008730:	4b06      	ldr	r3, [pc, #24]	; (800874c <prvIdleTask+0x28>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d9f9      	bls.n	800872c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008738:	4b05      	ldr	r3, [pc, #20]	; (8008750 <prvIdleTask+0x2c>)
 800873a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800873e:	601a      	str	r2, [r3, #0]
 8008740:	f3bf 8f4f 	dsb	sy
 8008744:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008748:	e7f0      	b.n	800872c <prvIdleTask+0x8>
 800874a:	bf00      	nop
 800874c:	20000788 	.word	0x20000788
 8008750:	e000ed04 	.word	0xe000ed04

08008754 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800875a:	2300      	movs	r3, #0
 800875c:	607b      	str	r3, [r7, #4]
 800875e:	e00c      	b.n	800877a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	4613      	mov	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4a12      	ldr	r2, [pc, #72]	; (80087b4 <prvInitialiseTaskLists+0x60>)
 800876c:	4413      	add	r3, r2
 800876e:	4618      	mov	r0, r3
 8008770:	f7fe fcf0 	bl	8007154 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	3301      	adds	r3, #1
 8008778:	607b      	str	r3, [r7, #4]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b37      	cmp	r3, #55	; 0x37
 800877e:	d9ef      	bls.n	8008760 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008780:	480d      	ldr	r0, [pc, #52]	; (80087b8 <prvInitialiseTaskLists+0x64>)
 8008782:	f7fe fce7 	bl	8007154 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008786:	480d      	ldr	r0, [pc, #52]	; (80087bc <prvInitialiseTaskLists+0x68>)
 8008788:	f7fe fce4 	bl	8007154 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800878c:	480c      	ldr	r0, [pc, #48]	; (80087c0 <prvInitialiseTaskLists+0x6c>)
 800878e:	f7fe fce1 	bl	8007154 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008792:	480c      	ldr	r0, [pc, #48]	; (80087c4 <prvInitialiseTaskLists+0x70>)
 8008794:	f7fe fcde 	bl	8007154 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008798:	480b      	ldr	r0, [pc, #44]	; (80087c8 <prvInitialiseTaskLists+0x74>)
 800879a:	f7fe fcdb 	bl	8007154 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800879e:	4b0b      	ldr	r3, [pc, #44]	; (80087cc <prvInitialiseTaskLists+0x78>)
 80087a0:	4a05      	ldr	r2, [pc, #20]	; (80087b8 <prvInitialiseTaskLists+0x64>)
 80087a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80087a4:	4b0a      	ldr	r3, [pc, #40]	; (80087d0 <prvInitialiseTaskLists+0x7c>)
 80087a6:	4a05      	ldr	r2, [pc, #20]	; (80087bc <prvInitialiseTaskLists+0x68>)
 80087a8:	601a      	str	r2, [r3, #0]
}
 80087aa:	bf00      	nop
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	20000788 	.word	0x20000788
 80087b8:	20000be8 	.word	0x20000be8
 80087bc:	20000bfc 	.word	0x20000bfc
 80087c0:	20000c18 	.word	0x20000c18
 80087c4:	20000c2c 	.word	0x20000c2c
 80087c8:	20000c44 	.word	0x20000c44
 80087cc:	20000c10 	.word	0x20000c10
 80087d0:	20000c14 	.word	0x20000c14

080087d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087da:	e019      	b.n	8008810 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80087dc:	f000 fdd2 	bl	8009384 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087e0:	4b10      	ldr	r3, [pc, #64]	; (8008824 <prvCheckTasksWaitingTermination+0x50>)
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	3304      	adds	r3, #4
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fe fd3b 	bl	8007268 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80087f2:	4b0d      	ldr	r3, [pc, #52]	; (8008828 <prvCheckTasksWaitingTermination+0x54>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3b01      	subs	r3, #1
 80087f8:	4a0b      	ldr	r2, [pc, #44]	; (8008828 <prvCheckTasksWaitingTermination+0x54>)
 80087fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80087fc:	4b0b      	ldr	r3, [pc, #44]	; (800882c <prvCheckTasksWaitingTermination+0x58>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	3b01      	subs	r3, #1
 8008802:	4a0a      	ldr	r2, [pc, #40]	; (800882c <prvCheckTasksWaitingTermination+0x58>)
 8008804:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008806:	f000 fded 	bl	80093e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f810 	bl	8008830 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008810:	4b06      	ldr	r3, [pc, #24]	; (800882c <prvCheckTasksWaitingTermination+0x58>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1e1      	bne.n	80087dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008818:	bf00      	nop
 800881a:	bf00      	nop
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	20000c2c 	.word	0x20000c2c
 8008828:	20000c58 	.word	0x20000c58
 800882c:	20000c40 	.word	0x20000c40

08008830 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800883e:	2b00      	cmp	r3, #0
 8008840:	d108      	bne.n	8008854 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008846:	4618      	mov	r0, r3
 8008848:	f000 ff8a 	bl	8009760 <vPortFree>
				vPortFree( pxTCB );
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 ff87 	bl	8009760 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008852:	e018      	b.n	8008886 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800885a:	2b01      	cmp	r3, #1
 800885c:	d103      	bne.n	8008866 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 ff7e 	bl	8009760 <vPortFree>
	}
 8008864:	e00f      	b.n	8008886 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800886c:	2b02      	cmp	r3, #2
 800886e:	d00a      	beq.n	8008886 <prvDeleteTCB+0x56>
	__asm volatile
 8008870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008874:	f383 8811 	msr	BASEPRI, r3
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	60fb      	str	r3, [r7, #12]
}
 8008882:	bf00      	nop
 8008884:	e7fe      	b.n	8008884 <prvDeleteTCB+0x54>
	}
 8008886:	bf00      	nop
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
	...

08008890 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008896:	4b0c      	ldr	r3, [pc, #48]	; (80088c8 <prvResetNextTaskUnblockTime+0x38>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d104      	bne.n	80088aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80088a0:	4b0a      	ldr	r3, [pc, #40]	; (80088cc <prvResetNextTaskUnblockTime+0x3c>)
 80088a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80088a8:	e008      	b.n	80088bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088aa:	4b07      	ldr	r3, [pc, #28]	; (80088c8 <prvResetNextTaskUnblockTime+0x38>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	4a04      	ldr	r2, [pc, #16]	; (80088cc <prvResetNextTaskUnblockTime+0x3c>)
 80088ba:	6013      	str	r3, [r2, #0]
}
 80088bc:	bf00      	nop
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	20000c10 	.word	0x20000c10
 80088cc:	20000c78 	.word	0x20000c78

080088d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80088d6:	4b0b      	ldr	r3, [pc, #44]	; (8008904 <xTaskGetSchedulerState+0x34>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d102      	bne.n	80088e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80088de:	2301      	movs	r3, #1
 80088e0:	607b      	str	r3, [r7, #4]
 80088e2:	e008      	b.n	80088f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088e4:	4b08      	ldr	r3, [pc, #32]	; (8008908 <xTaskGetSchedulerState+0x38>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d102      	bne.n	80088f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80088ec:	2302      	movs	r3, #2
 80088ee:	607b      	str	r3, [r7, #4]
 80088f0:	e001      	b.n	80088f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80088f2:	2300      	movs	r3, #0
 80088f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80088f6:	687b      	ldr	r3, [r7, #4]
	}
 80088f8:	4618      	mov	r0, r3
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr
 8008904:	20000c64 	.word	0x20000c64
 8008908:	20000c80 	.word	0x20000c80

0800890c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800890c:	b580      	push	{r7, lr}
 800890e:	b086      	sub	sp, #24
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008918:	2300      	movs	r3, #0
 800891a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d056      	beq.n	80089d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008922:	4b2e      	ldr	r3, [pc, #184]	; (80089dc <xTaskPriorityDisinherit+0xd0>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	693a      	ldr	r2, [r7, #16]
 8008928:	429a      	cmp	r2, r3
 800892a:	d00a      	beq.n	8008942 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800892c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008930:	f383 8811 	msr	BASEPRI, r3
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	60fb      	str	r3, [r7, #12]
}
 800893e:	bf00      	nop
 8008940:	e7fe      	b.n	8008940 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008946:	2b00      	cmp	r3, #0
 8008948:	d10a      	bne.n	8008960 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800894a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894e:	f383 8811 	msr	BASEPRI, r3
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	60bb      	str	r3, [r7, #8]
}
 800895c:	bf00      	nop
 800895e:	e7fe      	b.n	800895e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008964:	1e5a      	subs	r2, r3, #1
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008972:	429a      	cmp	r2, r3
 8008974:	d02c      	beq.n	80089d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800897a:	2b00      	cmp	r3, #0
 800897c:	d128      	bne.n	80089d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	3304      	adds	r3, #4
 8008982:	4618      	mov	r0, r3
 8008984:	f7fe fc70 	bl	8007268 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008994:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a0:	4b0f      	ldr	r3, [pc, #60]	; (80089e0 <xTaskPriorityDisinherit+0xd4>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d903      	bls.n	80089b0 <xTaskPriorityDisinherit+0xa4>
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ac:	4a0c      	ldr	r2, [pc, #48]	; (80089e0 <xTaskPriorityDisinherit+0xd4>)
 80089ae:	6013      	str	r3, [r2, #0]
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b4:	4613      	mov	r3, r2
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4413      	add	r3, r2
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	4a09      	ldr	r2, [pc, #36]	; (80089e4 <xTaskPriorityDisinherit+0xd8>)
 80089be:	441a      	add	r2, r3
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	3304      	adds	r3, #4
 80089c4:	4619      	mov	r1, r3
 80089c6:	4610      	mov	r0, r2
 80089c8:	f7fe fbf1 	bl	80071ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80089cc:	2301      	movs	r3, #1
 80089ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80089d0:	697b      	ldr	r3, [r7, #20]
	}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3718      	adds	r7, #24
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	20000784 	.word	0x20000784
 80089e0:	20000c60 	.word	0x20000c60
 80089e4:	20000788 	.word	0x20000788

080089e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80089f2:	4b21      	ldr	r3, [pc, #132]	; (8008a78 <prvAddCurrentTaskToDelayedList+0x90>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089f8:	4b20      	ldr	r3, [pc, #128]	; (8008a7c <prvAddCurrentTaskToDelayedList+0x94>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	3304      	adds	r3, #4
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fe fc32 	bl	8007268 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a0a:	d10a      	bne.n	8008a22 <prvAddCurrentTaskToDelayedList+0x3a>
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d007      	beq.n	8008a22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a12:	4b1a      	ldr	r3, [pc, #104]	; (8008a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	3304      	adds	r3, #4
 8008a18:	4619      	mov	r1, r3
 8008a1a:	4819      	ldr	r0, [pc, #100]	; (8008a80 <prvAddCurrentTaskToDelayedList+0x98>)
 8008a1c:	f7fe fbc7 	bl	80071ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a20:	e026      	b.n	8008a70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4413      	add	r3, r2
 8008a28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a2a:	4b14      	ldr	r3, [pc, #80]	; (8008a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a32:	68ba      	ldr	r2, [r7, #8]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d209      	bcs.n	8008a4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a3a:	4b12      	ldr	r3, [pc, #72]	; (8008a84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	4b0f      	ldr	r3, [pc, #60]	; (8008a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	3304      	adds	r3, #4
 8008a44:	4619      	mov	r1, r3
 8008a46:	4610      	mov	r0, r2
 8008a48:	f7fe fbd5 	bl	80071f6 <vListInsert>
}
 8008a4c:	e010      	b.n	8008a70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a4e:	4b0e      	ldr	r3, [pc, #56]	; (8008a88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	4b0a      	ldr	r3, [pc, #40]	; (8008a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	3304      	adds	r3, #4
 8008a58:	4619      	mov	r1, r3
 8008a5a:	4610      	mov	r0, r2
 8008a5c:	f7fe fbcb 	bl	80071f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a60:	4b0a      	ldr	r3, [pc, #40]	; (8008a8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d202      	bcs.n	8008a70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008a6a:	4a08      	ldr	r2, [pc, #32]	; (8008a8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	6013      	str	r3, [r2, #0]
}
 8008a70:	bf00      	nop
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	20000c5c 	.word	0x20000c5c
 8008a7c:	20000784 	.word	0x20000784
 8008a80:	20000c44 	.word	0x20000c44
 8008a84:	20000c14 	.word	0x20000c14
 8008a88:	20000c10 	.word	0x20000c10
 8008a8c:	20000c78 	.word	0x20000c78

08008a90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b08a      	sub	sp, #40	; 0x28
 8008a94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008a96:	2300      	movs	r3, #0
 8008a98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008a9a:	f000 fb07 	bl	80090ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008a9e:	4b1c      	ldr	r3, [pc, #112]	; (8008b10 <xTimerCreateTimerTask+0x80>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d021      	beq.n	8008aea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008aae:	1d3a      	adds	r2, r7, #4
 8008ab0:	f107 0108 	add.w	r1, r7, #8
 8008ab4:	f107 030c 	add.w	r3, r7, #12
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7fe fb31 	bl	8007120 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008abe:	6879      	ldr	r1, [r7, #4]
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	9202      	str	r2, [sp, #8]
 8008ac6:	9301      	str	r3, [sp, #4]
 8008ac8:	2302      	movs	r3, #2
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	2300      	movs	r3, #0
 8008ace:	460a      	mov	r2, r1
 8008ad0:	4910      	ldr	r1, [pc, #64]	; (8008b14 <xTimerCreateTimerTask+0x84>)
 8008ad2:	4811      	ldr	r0, [pc, #68]	; (8008b18 <xTimerCreateTimerTask+0x88>)
 8008ad4:	f7ff f8de 	bl	8007c94 <xTaskCreateStatic>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	4a10      	ldr	r2, [pc, #64]	; (8008b1c <xTimerCreateTimerTask+0x8c>)
 8008adc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008ade:	4b0f      	ldr	r3, [pc, #60]	; (8008b1c <xTimerCreateTimerTask+0x8c>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d001      	beq.n	8008aea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d10a      	bne.n	8008b06 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	613b      	str	r3, [r7, #16]
}
 8008b02:	bf00      	nop
 8008b04:	e7fe      	b.n	8008b04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008b06:	697b      	ldr	r3, [r7, #20]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3718      	adds	r7, #24
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	20000cb4 	.word	0x20000cb4
 8008b14:	0800a764 	.word	0x0800a764
 8008b18:	08008c55 	.word	0x08008c55
 8008b1c:	20000cb8 	.word	0x20000cb8

08008b20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b08a      	sub	sp, #40	; 0x28
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	607a      	str	r2, [r7, #4]
 8008b2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10a      	bne.n	8008b4e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3c:	f383 8811 	msr	BASEPRI, r3
 8008b40:	f3bf 8f6f 	isb	sy
 8008b44:	f3bf 8f4f 	dsb	sy
 8008b48:	623b      	str	r3, [r7, #32]
}
 8008b4a:	bf00      	nop
 8008b4c:	e7fe      	b.n	8008b4c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008b4e:	4b1a      	ldr	r3, [pc, #104]	; (8008bb8 <xTimerGenericCommand+0x98>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d02a      	beq.n	8008bac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	2b05      	cmp	r3, #5
 8008b66:	dc18      	bgt.n	8008b9a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008b68:	f7ff feb2 	bl	80088d0 <xTaskGetSchedulerState>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d109      	bne.n	8008b86 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008b72:	4b11      	ldr	r3, [pc, #68]	; (8008bb8 <xTimerGenericCommand+0x98>)
 8008b74:	6818      	ldr	r0, [r3, #0]
 8008b76:	f107 0110 	add.w	r1, r7, #16
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b7e:	f7fe fca1 	bl	80074c4 <xQueueGenericSend>
 8008b82:	6278      	str	r0, [r7, #36]	; 0x24
 8008b84:	e012      	b.n	8008bac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008b86:	4b0c      	ldr	r3, [pc, #48]	; (8008bb8 <xTimerGenericCommand+0x98>)
 8008b88:	6818      	ldr	r0, [r3, #0]
 8008b8a:	f107 0110 	add.w	r1, r7, #16
 8008b8e:	2300      	movs	r3, #0
 8008b90:	2200      	movs	r2, #0
 8008b92:	f7fe fc97 	bl	80074c4 <xQueueGenericSend>
 8008b96:	6278      	str	r0, [r7, #36]	; 0x24
 8008b98:	e008      	b.n	8008bac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008b9a:	4b07      	ldr	r3, [pc, #28]	; (8008bb8 <xTimerGenericCommand+0x98>)
 8008b9c:	6818      	ldr	r0, [r3, #0]
 8008b9e:	f107 0110 	add.w	r1, r7, #16
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	f7fe fd8b 	bl	80076c0 <xQueueGenericSendFromISR>
 8008baa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3728      	adds	r7, #40	; 0x28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20000cb4 	.word	0x20000cb4

08008bbc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b088      	sub	sp, #32
 8008bc0:	af02      	add	r7, sp, #8
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bc6:	4b22      	ldr	r3, [pc, #136]	; (8008c50 <prvProcessExpiredTimer+0x94>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7fe fb47 	bl	8007268 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008be0:	f003 0304 	and.w	r3, r3, #4
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d022      	beq.n	8008c2e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	699a      	ldr	r2, [r3, #24]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	18d1      	adds	r1, r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	683a      	ldr	r2, [r7, #0]
 8008bf4:	6978      	ldr	r0, [r7, #20]
 8008bf6:	f000 f8d1 	bl	8008d9c <prvInsertTimerInActiveList>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d01f      	beq.n	8008c40 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c00:	2300      	movs	r3, #0
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	2300      	movs	r3, #0
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	2100      	movs	r1, #0
 8008c0a:	6978      	ldr	r0, [r7, #20]
 8008c0c:	f7ff ff88 	bl	8008b20 <xTimerGenericCommand>
 8008c10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d113      	bne.n	8008c40 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	60fb      	str	r3, [r7, #12]
}
 8008c2a:	bf00      	nop
 8008c2c:	e7fe      	b.n	8008c2c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c34:	f023 0301 	bic.w	r3, r3, #1
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	6a1b      	ldr	r3, [r3, #32]
 8008c44:	6978      	ldr	r0, [r7, #20]
 8008c46:	4798      	blx	r3
}
 8008c48:	bf00      	nop
 8008c4a:	3718      	adds	r7, #24
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	20000cac 	.word	0x20000cac

08008c54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c5c:	f107 0308 	add.w	r3, r7, #8
 8008c60:	4618      	mov	r0, r3
 8008c62:	f000 f857 	bl	8008d14 <prvGetNextExpireTime>
 8008c66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f000 f803 	bl	8008c78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008c72:	f000 f8d5 	bl	8008e20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c76:	e7f1      	b.n	8008c5c <prvTimerTask+0x8>

08008c78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008c82:	f7ff fa43 	bl	800810c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c86:	f107 0308 	add.w	r3, r7, #8
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f000 f866 	bl	8008d5c <prvSampleTimeNow>
 8008c90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d130      	bne.n	8008cfa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10a      	bne.n	8008cb4 <prvProcessTimerOrBlockTask+0x3c>
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d806      	bhi.n	8008cb4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008ca6:	f7ff fa3f 	bl	8008128 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008caa:	68f9      	ldr	r1, [r7, #12]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f7ff ff85 	bl	8008bbc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008cb2:	e024      	b.n	8008cfe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d008      	beq.n	8008ccc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008cba:	4b13      	ldr	r3, [pc, #76]	; (8008d08 <prvProcessTimerOrBlockTask+0x90>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d101      	bne.n	8008cc8 <prvProcessTimerOrBlockTask+0x50>
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e000      	b.n	8008cca <prvProcessTimerOrBlockTask+0x52>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008ccc:	4b0f      	ldr	r3, [pc, #60]	; (8008d0c <prvProcessTimerOrBlockTask+0x94>)
 8008cce:	6818      	ldr	r0, [r3, #0]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	683a      	ldr	r2, [r7, #0]
 8008cd8:	4619      	mov	r1, r3
 8008cda:	f7fe ffa7 	bl	8007c2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008cde:	f7ff fa23 	bl	8008128 <xTaskResumeAll>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10a      	bne.n	8008cfe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008ce8:	4b09      	ldr	r3, [pc, #36]	; (8008d10 <prvProcessTimerOrBlockTask+0x98>)
 8008cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cee:	601a      	str	r2, [r3, #0]
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	f3bf 8f6f 	isb	sy
}
 8008cf8:	e001      	b.n	8008cfe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008cfa:	f7ff fa15 	bl	8008128 <xTaskResumeAll>
}
 8008cfe:	bf00      	nop
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	20000cb0 	.word	0x20000cb0
 8008d0c:	20000cb4 	.word	0x20000cb4
 8008d10:	e000ed04 	.word	0xe000ed04

08008d14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008d1c:	4b0e      	ldr	r3, [pc, #56]	; (8008d58 <prvGetNextExpireTime+0x44>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d101      	bne.n	8008d2a <prvGetNextExpireTime+0x16>
 8008d26:	2201      	movs	r2, #1
 8008d28:	e000      	b.n	8008d2c <prvGetNextExpireTime+0x18>
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d105      	bne.n	8008d44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d38:	4b07      	ldr	r3, [pc, #28]	; (8008d58 <prvGetNextExpireTime+0x44>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	60fb      	str	r3, [r7, #12]
 8008d42:	e001      	b.n	8008d48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008d44:	2300      	movs	r3, #0
 8008d46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008d48:	68fb      	ldr	r3, [r7, #12]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	20000cac 	.word	0x20000cac

08008d5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008d64:	f7ff fa7e 	bl	8008264 <xTaskGetTickCount>
 8008d68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008d6a:	4b0b      	ldr	r3, [pc, #44]	; (8008d98 <prvSampleTimeNow+0x3c>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d205      	bcs.n	8008d80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008d74:	f000 f936 	bl	8008fe4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	601a      	str	r2, [r3, #0]
 8008d7e:	e002      	b.n	8008d86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008d86:	4a04      	ldr	r2, [pc, #16]	; (8008d98 <prvSampleTimeNow+0x3c>)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	20000cbc 	.word	0x20000cbc

08008d9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
 8008da8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008daa:	2300      	movs	r3, #0
 8008dac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	68ba      	ldr	r2, [r7, #8]
 8008db2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d812      	bhi.n	8008de8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	1ad2      	subs	r2, r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d302      	bcc.n	8008dd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	617b      	str	r3, [r7, #20]
 8008dd4:	e01b      	b.n	8008e0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008dd6:	4b10      	ldr	r3, [pc, #64]	; (8008e18 <prvInsertTimerInActiveList+0x7c>)
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3304      	adds	r3, #4
 8008dde:	4619      	mov	r1, r3
 8008de0:	4610      	mov	r0, r2
 8008de2:	f7fe fa08 	bl	80071f6 <vListInsert>
 8008de6:	e012      	b.n	8008e0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d206      	bcs.n	8008dfe <prvInsertTimerInActiveList+0x62>
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d302      	bcc.n	8008dfe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	617b      	str	r3, [r7, #20]
 8008dfc:	e007      	b.n	8008e0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008dfe:	4b07      	ldr	r3, [pc, #28]	; (8008e1c <prvInsertTimerInActiveList+0x80>)
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	3304      	adds	r3, #4
 8008e06:	4619      	mov	r1, r3
 8008e08:	4610      	mov	r0, r2
 8008e0a:	f7fe f9f4 	bl	80071f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008e0e:	697b      	ldr	r3, [r7, #20]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3718      	adds	r7, #24
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	20000cb0 	.word	0x20000cb0
 8008e1c:	20000cac 	.word	0x20000cac

08008e20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b08e      	sub	sp, #56	; 0x38
 8008e24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e26:	e0ca      	b.n	8008fbe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	da18      	bge.n	8008e60 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008e2e:	1d3b      	adds	r3, r7, #4
 8008e30:	3304      	adds	r3, #4
 8008e32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10a      	bne.n	8008e50 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3e:	f383 8811 	msr	BASEPRI, r3
 8008e42:	f3bf 8f6f 	isb	sy
 8008e46:	f3bf 8f4f 	dsb	sy
 8008e4a:	61fb      	str	r3, [r7, #28]
}
 8008e4c:	bf00      	nop
 8008e4e:	e7fe      	b.n	8008e4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e56:	6850      	ldr	r0, [r2, #4]
 8008e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e5a:	6892      	ldr	r2, [r2, #8]
 8008e5c:	4611      	mov	r1, r2
 8008e5e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f2c0 80aa 	blt.w	8008fbc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6e:	695b      	ldr	r3, [r3, #20]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d004      	beq.n	8008e7e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e76:	3304      	adds	r3, #4
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7fe f9f5 	bl	8007268 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e7e:	463b      	mov	r3, r7
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7ff ff6b 	bl	8008d5c <prvSampleTimeNow>
 8008e86:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2b09      	cmp	r3, #9
 8008e8c:	f200 8097 	bhi.w	8008fbe <prvProcessReceivedCommands+0x19e>
 8008e90:	a201      	add	r2, pc, #4	; (adr r2, 8008e98 <prvProcessReceivedCommands+0x78>)
 8008e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e96:	bf00      	nop
 8008e98:	08008ec1 	.word	0x08008ec1
 8008e9c:	08008ec1 	.word	0x08008ec1
 8008ea0:	08008ec1 	.word	0x08008ec1
 8008ea4:	08008f35 	.word	0x08008f35
 8008ea8:	08008f49 	.word	0x08008f49
 8008eac:	08008f93 	.word	0x08008f93
 8008eb0:	08008ec1 	.word	0x08008ec1
 8008eb4:	08008ec1 	.word	0x08008ec1
 8008eb8:	08008f35 	.word	0x08008f35
 8008ebc:	08008f49 	.word	0x08008f49
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ec6:	f043 0301 	orr.w	r3, r3, #1
 8008eca:	b2da      	uxtb	r2, r3
 8008ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ece:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008ed2:	68ba      	ldr	r2, [r7, #8]
 8008ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	18d1      	adds	r1, r2, r3
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ee0:	f7ff ff5c 	bl	8008d9c <prvInsertTimerInActiveList>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d069      	beq.n	8008fbe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eec:	6a1b      	ldr	r3, [r3, #32]
 8008eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ef0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ef8:	f003 0304 	and.w	r3, r3, #4
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d05e      	beq.n	8008fbe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008f00:	68ba      	ldr	r2, [r7, #8]
 8008f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	441a      	add	r2, r3
 8008f08:	2300      	movs	r3, #0
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	2100      	movs	r1, #0
 8008f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f12:	f7ff fe05 	bl	8008b20 <xTimerGenericCommand>
 8008f16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d14f      	bne.n	8008fbe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f22:	f383 8811 	msr	BASEPRI, r3
 8008f26:	f3bf 8f6f 	isb	sy
 8008f2a:	f3bf 8f4f 	dsb	sy
 8008f2e:	61bb      	str	r3, [r7, #24]
}
 8008f30:	bf00      	nop
 8008f32:	e7fe      	b.n	8008f32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f3a:	f023 0301 	bic.w	r3, r3, #1
 8008f3e:	b2da      	uxtb	r2, r3
 8008f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008f46:	e03a      	b.n	8008fbe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f4e:	f043 0301 	orr.w	r3, r3, #1
 8008f52:	b2da      	uxtb	r2, r3
 8008f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10a      	bne.n	8008f7e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	617b      	str	r3, [r7, #20]
}
 8008f7a:	bf00      	nop
 8008f7c:	e7fe      	b.n	8008f7c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f80:	699a      	ldr	r2, [r3, #24]
 8008f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f84:	18d1      	adds	r1, r2, r3
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f8c:	f7ff ff06 	bl	8008d9c <prvInsertTimerInActiveList>
					break;
 8008f90:	e015      	b.n	8008fbe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f98:	f003 0302 	and.w	r3, r3, #2
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d103      	bne.n	8008fa8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fa2:	f000 fbdd 	bl	8009760 <vPortFree>
 8008fa6:	e00a      	b.n	8008fbe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008faa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fae:	f023 0301 	bic.w	r3, r3, #1
 8008fb2:	b2da      	uxtb	r2, r3
 8008fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008fba:	e000      	b.n	8008fbe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008fbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008fbe:	4b08      	ldr	r3, [pc, #32]	; (8008fe0 <prvProcessReceivedCommands+0x1c0>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	1d39      	adds	r1, r7, #4
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fe fc16 	bl	80077f8 <xQueueReceive>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f47f af2a 	bne.w	8008e28 <prvProcessReceivedCommands+0x8>
	}
}
 8008fd4:	bf00      	nop
 8008fd6:	bf00      	nop
 8008fd8:	3730      	adds	r7, #48	; 0x30
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	20000cb4 	.word	0x20000cb4

08008fe4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b088      	sub	sp, #32
 8008fe8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008fea:	e048      	b.n	800907e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008fec:	4b2d      	ldr	r3, [pc, #180]	; (80090a4 <prvSwitchTimerLists+0xc0>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ff6:	4b2b      	ldr	r3, [pc, #172]	; (80090a4 <prvSwitchTimerLists+0xc0>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	3304      	adds	r3, #4
 8009004:	4618      	mov	r0, r3
 8009006:	f7fe f92f 	bl	8007268 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6a1b      	ldr	r3, [r3, #32]
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009018:	f003 0304 	and.w	r3, r3, #4
 800901c:	2b00      	cmp	r3, #0
 800901e:	d02e      	beq.n	800907e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	693a      	ldr	r2, [r7, #16]
 8009026:	4413      	add	r3, r2
 8009028:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	429a      	cmp	r2, r3
 8009030:	d90e      	bls.n	8009050 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	68ba      	ldr	r2, [r7, #8]
 8009036:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800903e:	4b19      	ldr	r3, [pc, #100]	; (80090a4 <prvSwitchTimerLists+0xc0>)
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	3304      	adds	r3, #4
 8009046:	4619      	mov	r1, r3
 8009048:	4610      	mov	r0, r2
 800904a:	f7fe f8d4 	bl	80071f6 <vListInsert>
 800904e:	e016      	b.n	800907e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009050:	2300      	movs	r3, #0
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	2300      	movs	r3, #0
 8009056:	693a      	ldr	r2, [r7, #16]
 8009058:	2100      	movs	r1, #0
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f7ff fd60 	bl	8008b20 <xTimerGenericCommand>
 8009060:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d10a      	bne.n	800907e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906c:	f383 8811 	msr	BASEPRI, r3
 8009070:	f3bf 8f6f 	isb	sy
 8009074:	f3bf 8f4f 	dsb	sy
 8009078:	603b      	str	r3, [r7, #0]
}
 800907a:	bf00      	nop
 800907c:	e7fe      	b.n	800907c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800907e:	4b09      	ldr	r3, [pc, #36]	; (80090a4 <prvSwitchTimerLists+0xc0>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d1b1      	bne.n	8008fec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009088:	4b06      	ldr	r3, [pc, #24]	; (80090a4 <prvSwitchTimerLists+0xc0>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800908e:	4b06      	ldr	r3, [pc, #24]	; (80090a8 <prvSwitchTimerLists+0xc4>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a04      	ldr	r2, [pc, #16]	; (80090a4 <prvSwitchTimerLists+0xc0>)
 8009094:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009096:	4a04      	ldr	r2, [pc, #16]	; (80090a8 <prvSwitchTimerLists+0xc4>)
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	6013      	str	r3, [r2, #0]
}
 800909c:	bf00      	nop
 800909e:	3718      	adds	r7, #24
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	20000cac 	.word	0x20000cac
 80090a8:	20000cb0 	.word	0x20000cb0

080090ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80090b2:	f000 f967 	bl	8009384 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80090b6:	4b15      	ldr	r3, [pc, #84]	; (800910c <prvCheckForValidListAndQueue+0x60>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d120      	bne.n	8009100 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80090be:	4814      	ldr	r0, [pc, #80]	; (8009110 <prvCheckForValidListAndQueue+0x64>)
 80090c0:	f7fe f848 	bl	8007154 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80090c4:	4813      	ldr	r0, [pc, #76]	; (8009114 <prvCheckForValidListAndQueue+0x68>)
 80090c6:	f7fe f845 	bl	8007154 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80090ca:	4b13      	ldr	r3, [pc, #76]	; (8009118 <prvCheckForValidListAndQueue+0x6c>)
 80090cc:	4a10      	ldr	r2, [pc, #64]	; (8009110 <prvCheckForValidListAndQueue+0x64>)
 80090ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80090d0:	4b12      	ldr	r3, [pc, #72]	; (800911c <prvCheckForValidListAndQueue+0x70>)
 80090d2:	4a10      	ldr	r2, [pc, #64]	; (8009114 <prvCheckForValidListAndQueue+0x68>)
 80090d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80090d6:	2300      	movs	r3, #0
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	4b11      	ldr	r3, [pc, #68]	; (8009120 <prvCheckForValidListAndQueue+0x74>)
 80090dc:	4a11      	ldr	r2, [pc, #68]	; (8009124 <prvCheckForValidListAndQueue+0x78>)
 80090de:	2110      	movs	r1, #16
 80090e0:	200a      	movs	r0, #10
 80090e2:	f7fe f953 	bl	800738c <xQueueGenericCreateStatic>
 80090e6:	4603      	mov	r3, r0
 80090e8:	4a08      	ldr	r2, [pc, #32]	; (800910c <prvCheckForValidListAndQueue+0x60>)
 80090ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80090ec:	4b07      	ldr	r3, [pc, #28]	; (800910c <prvCheckForValidListAndQueue+0x60>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d005      	beq.n	8009100 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80090f4:	4b05      	ldr	r3, [pc, #20]	; (800910c <prvCheckForValidListAndQueue+0x60>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	490b      	ldr	r1, [pc, #44]	; (8009128 <prvCheckForValidListAndQueue+0x7c>)
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7fe fd6c 	bl	8007bd8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009100:	f000 f970 	bl	80093e4 <vPortExitCritical>
}
 8009104:	bf00      	nop
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	20000cb4 	.word	0x20000cb4
 8009110:	20000c84 	.word	0x20000c84
 8009114:	20000c98 	.word	0x20000c98
 8009118:	20000cac 	.word	0x20000cac
 800911c:	20000cb0 	.word	0x20000cb0
 8009120:	20000d60 	.word	0x20000d60
 8009124:	20000cc0 	.word	0x20000cc0
 8009128:	0800a76c 	.word	0x0800a76c

0800912c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800912c:	b480      	push	{r7}
 800912e:	b085      	sub	sp, #20
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	3b04      	subs	r3, #4
 800913c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009144:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	3b04      	subs	r3, #4
 800914a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	f023 0201 	bic.w	r2, r3, #1
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	3b04      	subs	r3, #4
 800915a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800915c:	4a0c      	ldr	r2, [pc, #48]	; (8009190 <pxPortInitialiseStack+0x64>)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3b14      	subs	r3, #20
 8009166:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	3b04      	subs	r3, #4
 8009172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f06f 0202 	mvn.w	r2, #2
 800917a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	3b20      	subs	r3, #32
 8009180:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009182:	68fb      	ldr	r3, [r7, #12]
}
 8009184:	4618      	mov	r0, r3
 8009186:	3714      	adds	r7, #20
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr
 8009190:	08009195 	.word	0x08009195

08009194 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800919a:	2300      	movs	r3, #0
 800919c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800919e:	4b12      	ldr	r3, [pc, #72]	; (80091e8 <prvTaskExitError+0x54>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091a6:	d00a      	beq.n	80091be <prvTaskExitError+0x2a>
	__asm volatile
 80091a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ac:	f383 8811 	msr	BASEPRI, r3
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	60fb      	str	r3, [r7, #12]
}
 80091ba:	bf00      	nop
 80091bc:	e7fe      	b.n	80091bc <prvTaskExitError+0x28>
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	60bb      	str	r3, [r7, #8]
}
 80091d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80091d2:	bf00      	nop
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d0fc      	beq.n	80091d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80091da:	bf00      	nop
 80091dc:	bf00      	nop
 80091de:	3714      	adds	r7, #20
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr
 80091e8:	2000000c 	.word	0x2000000c
 80091ec:	00000000 	.word	0x00000000

080091f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80091f0:	4b07      	ldr	r3, [pc, #28]	; (8009210 <pxCurrentTCBConst2>)
 80091f2:	6819      	ldr	r1, [r3, #0]
 80091f4:	6808      	ldr	r0, [r1, #0]
 80091f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091fa:	f380 8809 	msr	PSP, r0
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f04f 0000 	mov.w	r0, #0
 8009206:	f380 8811 	msr	BASEPRI, r0
 800920a:	4770      	bx	lr
 800920c:	f3af 8000 	nop.w

08009210 <pxCurrentTCBConst2>:
 8009210:	20000784 	.word	0x20000784
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009214:	bf00      	nop
 8009216:	bf00      	nop

08009218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009218:	4808      	ldr	r0, [pc, #32]	; (800923c <prvPortStartFirstTask+0x24>)
 800921a:	6800      	ldr	r0, [r0, #0]
 800921c:	6800      	ldr	r0, [r0, #0]
 800921e:	f380 8808 	msr	MSP, r0
 8009222:	f04f 0000 	mov.w	r0, #0
 8009226:	f380 8814 	msr	CONTROL, r0
 800922a:	b662      	cpsie	i
 800922c:	b661      	cpsie	f
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	df00      	svc	0
 8009238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800923a:	bf00      	nop
 800923c:	e000ed08 	.word	0xe000ed08

08009240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009246:	4b46      	ldr	r3, [pc, #280]	; (8009360 <xPortStartScheduler+0x120>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a46      	ldr	r2, [pc, #280]	; (8009364 <xPortStartScheduler+0x124>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d10a      	bne.n	8009266 <xPortStartScheduler+0x26>
	__asm volatile
 8009250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	613b      	str	r3, [r7, #16]
}
 8009262:	bf00      	nop
 8009264:	e7fe      	b.n	8009264 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009266:	4b3e      	ldr	r3, [pc, #248]	; (8009360 <xPortStartScheduler+0x120>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a3f      	ldr	r2, [pc, #252]	; (8009368 <xPortStartScheduler+0x128>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d10a      	bne.n	8009286 <xPortStartScheduler+0x46>
	__asm volatile
 8009270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	60fb      	str	r3, [r7, #12]
}
 8009282:	bf00      	nop
 8009284:	e7fe      	b.n	8009284 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009286:	4b39      	ldr	r3, [pc, #228]	; (800936c <xPortStartScheduler+0x12c>)
 8009288:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	b2db      	uxtb	r3, r3
 8009290:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	22ff      	movs	r2, #255	; 0xff
 8009296:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	b2db      	uxtb	r3, r3
 800929e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092a0:	78fb      	ldrb	r3, [r7, #3]
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	4b31      	ldr	r3, [pc, #196]	; (8009370 <xPortStartScheduler+0x130>)
 80092ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80092ae:	4b31      	ldr	r3, [pc, #196]	; (8009374 <xPortStartScheduler+0x134>)
 80092b0:	2207      	movs	r2, #7
 80092b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092b4:	e009      	b.n	80092ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80092b6:	4b2f      	ldr	r3, [pc, #188]	; (8009374 <xPortStartScheduler+0x134>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3b01      	subs	r3, #1
 80092bc:	4a2d      	ldr	r2, [pc, #180]	; (8009374 <xPortStartScheduler+0x134>)
 80092be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	005b      	lsls	r3, r3, #1
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092ca:	78fb      	ldrb	r3, [r7, #3]
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092d2:	2b80      	cmp	r3, #128	; 0x80
 80092d4:	d0ef      	beq.n	80092b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80092d6:	4b27      	ldr	r3, [pc, #156]	; (8009374 <xPortStartScheduler+0x134>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f1c3 0307 	rsb	r3, r3, #7
 80092de:	2b04      	cmp	r3, #4
 80092e0:	d00a      	beq.n	80092f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80092e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	60bb      	str	r3, [r7, #8]
}
 80092f4:	bf00      	nop
 80092f6:	e7fe      	b.n	80092f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80092f8:	4b1e      	ldr	r3, [pc, #120]	; (8009374 <xPortStartScheduler+0x134>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	021b      	lsls	r3, r3, #8
 80092fe:	4a1d      	ldr	r2, [pc, #116]	; (8009374 <xPortStartScheduler+0x134>)
 8009300:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009302:	4b1c      	ldr	r3, [pc, #112]	; (8009374 <xPortStartScheduler+0x134>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800930a:	4a1a      	ldr	r2, [pc, #104]	; (8009374 <xPortStartScheduler+0x134>)
 800930c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	b2da      	uxtb	r2, r3
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009316:	4b18      	ldr	r3, [pc, #96]	; (8009378 <xPortStartScheduler+0x138>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a17      	ldr	r2, [pc, #92]	; (8009378 <xPortStartScheduler+0x138>)
 800931c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009320:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009322:	4b15      	ldr	r3, [pc, #84]	; (8009378 <xPortStartScheduler+0x138>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a14      	ldr	r2, [pc, #80]	; (8009378 <xPortStartScheduler+0x138>)
 8009328:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800932c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800932e:	f000 f8dd 	bl	80094ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009332:	4b12      	ldr	r3, [pc, #72]	; (800937c <xPortStartScheduler+0x13c>)
 8009334:	2200      	movs	r2, #0
 8009336:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009338:	f000 f8fc 	bl	8009534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800933c:	4b10      	ldr	r3, [pc, #64]	; (8009380 <xPortStartScheduler+0x140>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a0f      	ldr	r2, [pc, #60]	; (8009380 <xPortStartScheduler+0x140>)
 8009342:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009346:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009348:	f7ff ff66 	bl	8009218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800934c:	f7ff f854 	bl	80083f8 <vTaskSwitchContext>
	prvTaskExitError();
 8009350:	f7ff ff20 	bl	8009194 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3718      	adds	r7, #24
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	e000ed00 	.word	0xe000ed00
 8009364:	410fc271 	.word	0x410fc271
 8009368:	410fc270 	.word	0x410fc270
 800936c:	e000e400 	.word	0xe000e400
 8009370:	20000db0 	.word	0x20000db0
 8009374:	20000db4 	.word	0x20000db4
 8009378:	e000ed20 	.word	0xe000ed20
 800937c:	2000000c 	.word	0x2000000c
 8009380:	e000ef34 	.word	0xe000ef34

08009384 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
	__asm volatile
 800938a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938e:	f383 8811 	msr	BASEPRI, r3
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	f3bf 8f4f 	dsb	sy
 800939a:	607b      	str	r3, [r7, #4]
}
 800939c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800939e:	4b0f      	ldr	r3, [pc, #60]	; (80093dc <vPortEnterCritical+0x58>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	3301      	adds	r3, #1
 80093a4:	4a0d      	ldr	r2, [pc, #52]	; (80093dc <vPortEnterCritical+0x58>)
 80093a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80093a8:	4b0c      	ldr	r3, [pc, #48]	; (80093dc <vPortEnterCritical+0x58>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d10f      	bne.n	80093d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80093b0:	4b0b      	ldr	r3, [pc, #44]	; (80093e0 <vPortEnterCritical+0x5c>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00a      	beq.n	80093d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	603b      	str	r3, [r7, #0]
}
 80093cc:	bf00      	nop
 80093ce:	e7fe      	b.n	80093ce <vPortEnterCritical+0x4a>
	}
}
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr
 80093dc:	2000000c 	.word	0x2000000c
 80093e0:	e000ed04 	.word	0xe000ed04

080093e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80093ea:	4b12      	ldr	r3, [pc, #72]	; (8009434 <vPortExitCritical+0x50>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10a      	bne.n	8009408 <vPortExitCritical+0x24>
	__asm volatile
 80093f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f6:	f383 8811 	msr	BASEPRI, r3
 80093fa:	f3bf 8f6f 	isb	sy
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	607b      	str	r3, [r7, #4]
}
 8009404:	bf00      	nop
 8009406:	e7fe      	b.n	8009406 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009408:	4b0a      	ldr	r3, [pc, #40]	; (8009434 <vPortExitCritical+0x50>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	3b01      	subs	r3, #1
 800940e:	4a09      	ldr	r2, [pc, #36]	; (8009434 <vPortExitCritical+0x50>)
 8009410:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009412:	4b08      	ldr	r3, [pc, #32]	; (8009434 <vPortExitCritical+0x50>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d105      	bne.n	8009426 <vPortExitCritical+0x42>
 800941a:	2300      	movs	r3, #0
 800941c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	f383 8811 	msr	BASEPRI, r3
}
 8009424:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009426:	bf00      	nop
 8009428:	370c      	adds	r7, #12
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	2000000c 	.word	0x2000000c
	...

08009440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009440:	f3ef 8009 	mrs	r0, PSP
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	4b15      	ldr	r3, [pc, #84]	; (80094a0 <pxCurrentTCBConst>)
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	f01e 0f10 	tst.w	lr, #16
 8009450:	bf08      	it	eq
 8009452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800945a:	6010      	str	r0, [r2, #0]
 800945c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009464:	f380 8811 	msr	BASEPRI, r0
 8009468:	f3bf 8f4f 	dsb	sy
 800946c:	f3bf 8f6f 	isb	sy
 8009470:	f7fe ffc2 	bl	80083f8 <vTaskSwitchContext>
 8009474:	f04f 0000 	mov.w	r0, #0
 8009478:	f380 8811 	msr	BASEPRI, r0
 800947c:	bc09      	pop	{r0, r3}
 800947e:	6819      	ldr	r1, [r3, #0]
 8009480:	6808      	ldr	r0, [r1, #0]
 8009482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009486:	f01e 0f10 	tst.w	lr, #16
 800948a:	bf08      	it	eq
 800948c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009490:	f380 8809 	msr	PSP, r0
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	f3af 8000 	nop.w

080094a0 <pxCurrentTCBConst>:
 80094a0:	20000784 	.word	0x20000784
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80094a4:	bf00      	nop
 80094a6:	bf00      	nop

080094a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
	__asm volatile
 80094ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b2:	f383 8811 	msr	BASEPRI, r3
 80094b6:	f3bf 8f6f 	isb	sy
 80094ba:	f3bf 8f4f 	dsb	sy
 80094be:	607b      	str	r3, [r7, #4]
}
 80094c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80094c2:	f7fe fedf 	bl	8008284 <xTaskIncrementTick>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d003      	beq.n	80094d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80094cc:	4b06      	ldr	r3, [pc, #24]	; (80094e8 <xPortSysTickHandler+0x40>)
 80094ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094d2:	601a      	str	r2, [r3, #0]
 80094d4:	2300      	movs	r3, #0
 80094d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	f383 8811 	msr	BASEPRI, r3
}
 80094de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80094e0:	bf00      	nop
 80094e2:	3708      	adds	r7, #8
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	e000ed04 	.word	0xe000ed04

080094ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80094ec:	b480      	push	{r7}
 80094ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80094f0:	4b0b      	ldr	r3, [pc, #44]	; (8009520 <vPortSetupTimerInterrupt+0x34>)
 80094f2:	2200      	movs	r2, #0
 80094f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80094f6:	4b0b      	ldr	r3, [pc, #44]	; (8009524 <vPortSetupTimerInterrupt+0x38>)
 80094f8:	2200      	movs	r2, #0
 80094fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80094fc:	4b0a      	ldr	r3, [pc, #40]	; (8009528 <vPortSetupTimerInterrupt+0x3c>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a0a      	ldr	r2, [pc, #40]	; (800952c <vPortSetupTimerInterrupt+0x40>)
 8009502:	fba2 2303 	umull	r2, r3, r2, r3
 8009506:	099b      	lsrs	r3, r3, #6
 8009508:	4a09      	ldr	r2, [pc, #36]	; (8009530 <vPortSetupTimerInterrupt+0x44>)
 800950a:	3b01      	subs	r3, #1
 800950c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800950e:	4b04      	ldr	r3, [pc, #16]	; (8009520 <vPortSetupTimerInterrupt+0x34>)
 8009510:	2207      	movs	r2, #7
 8009512:	601a      	str	r2, [r3, #0]
}
 8009514:	bf00      	nop
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	e000e010 	.word	0xe000e010
 8009524:	e000e018 	.word	0xe000e018
 8009528:	20000000 	.word	0x20000000
 800952c:	10624dd3 	.word	0x10624dd3
 8009530:	e000e014 	.word	0xe000e014

08009534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009544 <vPortEnableVFP+0x10>
 8009538:	6801      	ldr	r1, [r0, #0]
 800953a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800953e:	6001      	str	r1, [r0, #0]
 8009540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009542:	bf00      	nop
 8009544:	e000ed88 	.word	0xe000ed88

08009548 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800954e:	f3ef 8305 	mrs	r3, IPSR
 8009552:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2b0f      	cmp	r3, #15
 8009558:	d914      	bls.n	8009584 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800955a:	4a17      	ldr	r2, [pc, #92]	; (80095b8 <vPortValidateInterruptPriority+0x70>)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	4413      	add	r3, r2
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009564:	4b15      	ldr	r3, [pc, #84]	; (80095bc <vPortValidateInterruptPriority+0x74>)
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	7afa      	ldrb	r2, [r7, #11]
 800956a:	429a      	cmp	r2, r3
 800956c:	d20a      	bcs.n	8009584 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800956e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009572:	f383 8811 	msr	BASEPRI, r3
 8009576:	f3bf 8f6f 	isb	sy
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	607b      	str	r3, [r7, #4]
}
 8009580:	bf00      	nop
 8009582:	e7fe      	b.n	8009582 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009584:	4b0e      	ldr	r3, [pc, #56]	; (80095c0 <vPortValidateInterruptPriority+0x78>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800958c:	4b0d      	ldr	r3, [pc, #52]	; (80095c4 <vPortValidateInterruptPriority+0x7c>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	429a      	cmp	r2, r3
 8009592:	d90a      	bls.n	80095aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	603b      	str	r3, [r7, #0]
}
 80095a6:	bf00      	nop
 80095a8:	e7fe      	b.n	80095a8 <vPortValidateInterruptPriority+0x60>
	}
 80095aa:	bf00      	nop
 80095ac:	3714      	adds	r7, #20
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	e000e3f0 	.word	0xe000e3f0
 80095bc:	20000db0 	.word	0x20000db0
 80095c0:	e000ed0c 	.word	0xe000ed0c
 80095c4:	20000db4 	.word	0x20000db4

080095c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b08a      	sub	sp, #40	; 0x28
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80095d0:	2300      	movs	r3, #0
 80095d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80095d4:	f7fe fd9a 	bl	800810c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80095d8:	4b5b      	ldr	r3, [pc, #364]	; (8009748 <pvPortMalloc+0x180>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d101      	bne.n	80095e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80095e0:	f000 f920 	bl	8009824 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80095e4:	4b59      	ldr	r3, [pc, #356]	; (800974c <pvPortMalloc+0x184>)
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4013      	ands	r3, r2
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f040 8093 	bne.w	8009718 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d01d      	beq.n	8009634 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80095f8:	2208      	movs	r2, #8
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4413      	add	r3, r2
 80095fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f003 0307 	and.w	r3, r3, #7
 8009606:	2b00      	cmp	r3, #0
 8009608:	d014      	beq.n	8009634 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f023 0307 	bic.w	r3, r3, #7
 8009610:	3308      	adds	r3, #8
 8009612:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f003 0307 	and.w	r3, r3, #7
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00a      	beq.n	8009634 <pvPortMalloc+0x6c>
	__asm volatile
 800961e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009622:	f383 8811 	msr	BASEPRI, r3
 8009626:	f3bf 8f6f 	isb	sy
 800962a:	f3bf 8f4f 	dsb	sy
 800962e:	617b      	str	r3, [r7, #20]
}
 8009630:	bf00      	nop
 8009632:	e7fe      	b.n	8009632 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d06e      	beq.n	8009718 <pvPortMalloc+0x150>
 800963a:	4b45      	ldr	r3, [pc, #276]	; (8009750 <pvPortMalloc+0x188>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	429a      	cmp	r2, r3
 8009642:	d869      	bhi.n	8009718 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009644:	4b43      	ldr	r3, [pc, #268]	; (8009754 <pvPortMalloc+0x18c>)
 8009646:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009648:	4b42      	ldr	r3, [pc, #264]	; (8009754 <pvPortMalloc+0x18c>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800964e:	e004      	b.n	800965a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009652:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	429a      	cmp	r2, r3
 8009662:	d903      	bls.n	800966c <pvPortMalloc+0xa4>
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1f1      	bne.n	8009650 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800966c:	4b36      	ldr	r3, [pc, #216]	; (8009748 <pvPortMalloc+0x180>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009672:	429a      	cmp	r2, r3
 8009674:	d050      	beq.n	8009718 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009676:	6a3b      	ldr	r3, [r7, #32]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2208      	movs	r2, #8
 800967c:	4413      	add	r3, r2
 800967e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968a:	685a      	ldr	r2, [r3, #4]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	1ad2      	subs	r2, r2, r3
 8009690:	2308      	movs	r3, #8
 8009692:	005b      	lsls	r3, r3, #1
 8009694:	429a      	cmp	r2, r3
 8009696:	d91f      	bls.n	80096d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4413      	add	r3, r2
 800969e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	f003 0307 	and.w	r3, r3, #7
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00a      	beq.n	80096c0 <pvPortMalloc+0xf8>
	__asm volatile
 80096aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ae:	f383 8811 	msr	BASEPRI, r3
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	613b      	str	r3, [r7, #16]
}
 80096bc:	bf00      	nop
 80096be:	e7fe      	b.n	80096be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80096c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c2:	685a      	ldr	r2, [r3, #4]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	1ad2      	subs	r2, r2, r3
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80096cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80096d2:	69b8      	ldr	r0, [r7, #24]
 80096d4:	f000 f908 	bl	80098e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80096d8:	4b1d      	ldr	r3, [pc, #116]	; (8009750 <pvPortMalloc+0x188>)
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	4a1b      	ldr	r2, [pc, #108]	; (8009750 <pvPortMalloc+0x188>)
 80096e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80096e6:	4b1a      	ldr	r3, [pc, #104]	; (8009750 <pvPortMalloc+0x188>)
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	4b1b      	ldr	r3, [pc, #108]	; (8009758 <pvPortMalloc+0x190>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d203      	bcs.n	80096fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80096f2:	4b17      	ldr	r3, [pc, #92]	; (8009750 <pvPortMalloc+0x188>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a18      	ldr	r2, [pc, #96]	; (8009758 <pvPortMalloc+0x190>)
 80096f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80096fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fc:	685a      	ldr	r2, [r3, #4]
 80096fe:	4b13      	ldr	r3, [pc, #76]	; (800974c <pvPortMalloc+0x184>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	431a      	orrs	r2, r3
 8009704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009706:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970a:	2200      	movs	r2, #0
 800970c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800970e:	4b13      	ldr	r3, [pc, #76]	; (800975c <pvPortMalloc+0x194>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3301      	adds	r3, #1
 8009714:	4a11      	ldr	r2, [pc, #68]	; (800975c <pvPortMalloc+0x194>)
 8009716:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009718:	f7fe fd06 	bl	8008128 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	f003 0307 	and.w	r3, r3, #7
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00a      	beq.n	800973c <pvPortMalloc+0x174>
	__asm volatile
 8009726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972a:	f383 8811 	msr	BASEPRI, r3
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f3bf 8f4f 	dsb	sy
 8009736:	60fb      	str	r3, [r7, #12]
}
 8009738:	bf00      	nop
 800973a:	e7fe      	b.n	800973a <pvPortMalloc+0x172>
	return pvReturn;
 800973c:	69fb      	ldr	r3, [r7, #28]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3728      	adds	r7, #40	; 0x28
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	200049c0 	.word	0x200049c0
 800974c:	200049d4 	.word	0x200049d4
 8009750:	200049c4 	.word	0x200049c4
 8009754:	200049b8 	.word	0x200049b8
 8009758:	200049c8 	.word	0x200049c8
 800975c:	200049cc 	.word	0x200049cc

08009760 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d04d      	beq.n	800980e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009772:	2308      	movs	r3, #8
 8009774:	425b      	negs	r3, r3
 8009776:	697a      	ldr	r2, [r7, #20]
 8009778:	4413      	add	r3, r2
 800977a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	4b24      	ldr	r3, [pc, #144]	; (8009818 <vPortFree+0xb8>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4013      	ands	r3, r2
 800978a:	2b00      	cmp	r3, #0
 800978c:	d10a      	bne.n	80097a4 <vPortFree+0x44>
	__asm volatile
 800978e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	60fb      	str	r3, [r7, #12]
}
 80097a0:	bf00      	nop
 80097a2:	e7fe      	b.n	80097a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00a      	beq.n	80097c2 <vPortFree+0x62>
	__asm volatile
 80097ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	60bb      	str	r3, [r7, #8]
}
 80097be:	bf00      	nop
 80097c0:	e7fe      	b.n	80097c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	685a      	ldr	r2, [r3, #4]
 80097c6:	4b14      	ldr	r3, [pc, #80]	; (8009818 <vPortFree+0xb8>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4013      	ands	r3, r2
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d01e      	beq.n	800980e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d11a      	bne.n	800980e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	4b0e      	ldr	r3, [pc, #56]	; (8009818 <vPortFree+0xb8>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	43db      	mvns	r3, r3
 80097e2:	401a      	ands	r2, r3
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80097e8:	f7fe fc90 	bl	800810c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	685a      	ldr	r2, [r3, #4]
 80097f0:	4b0a      	ldr	r3, [pc, #40]	; (800981c <vPortFree+0xbc>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4413      	add	r3, r2
 80097f6:	4a09      	ldr	r2, [pc, #36]	; (800981c <vPortFree+0xbc>)
 80097f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80097fa:	6938      	ldr	r0, [r7, #16]
 80097fc:	f000 f874 	bl	80098e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009800:	4b07      	ldr	r3, [pc, #28]	; (8009820 <vPortFree+0xc0>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	3301      	adds	r3, #1
 8009806:	4a06      	ldr	r2, [pc, #24]	; (8009820 <vPortFree+0xc0>)
 8009808:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800980a:	f7fe fc8d 	bl	8008128 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800980e:	bf00      	nop
 8009810:	3718      	adds	r7, #24
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	200049d4 	.word	0x200049d4
 800981c:	200049c4 	.word	0x200049c4
 8009820:	200049d0 	.word	0x200049d0

08009824 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800982a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800982e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009830:	4b27      	ldr	r3, [pc, #156]	; (80098d0 <prvHeapInit+0xac>)
 8009832:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f003 0307 	and.w	r3, r3, #7
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00c      	beq.n	8009858 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	3307      	adds	r3, #7
 8009842:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f023 0307 	bic.w	r3, r3, #7
 800984a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800984c:	68ba      	ldr	r2, [r7, #8]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	4a1f      	ldr	r2, [pc, #124]	; (80098d0 <prvHeapInit+0xac>)
 8009854:	4413      	add	r3, r2
 8009856:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800985c:	4a1d      	ldr	r2, [pc, #116]	; (80098d4 <prvHeapInit+0xb0>)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009862:	4b1c      	ldr	r3, [pc, #112]	; (80098d4 <prvHeapInit+0xb0>)
 8009864:	2200      	movs	r2, #0
 8009866:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68ba      	ldr	r2, [r7, #8]
 800986c:	4413      	add	r3, r2
 800986e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009870:	2208      	movs	r2, #8
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	1a9b      	subs	r3, r3, r2
 8009876:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f023 0307 	bic.w	r3, r3, #7
 800987e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	4a15      	ldr	r2, [pc, #84]	; (80098d8 <prvHeapInit+0xb4>)
 8009884:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009886:	4b14      	ldr	r3, [pc, #80]	; (80098d8 <prvHeapInit+0xb4>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2200      	movs	r2, #0
 800988c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800988e:	4b12      	ldr	r3, [pc, #72]	; (80098d8 <prvHeapInit+0xb4>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2200      	movs	r2, #0
 8009894:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	1ad2      	subs	r2, r2, r3
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80098a4:	4b0c      	ldr	r3, [pc, #48]	; (80098d8 <prvHeapInit+0xb4>)
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	4a0a      	ldr	r2, [pc, #40]	; (80098dc <prvHeapInit+0xb8>)
 80098b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	4a09      	ldr	r2, [pc, #36]	; (80098e0 <prvHeapInit+0xbc>)
 80098ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80098bc:	4b09      	ldr	r3, [pc, #36]	; (80098e4 <prvHeapInit+0xc0>)
 80098be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80098c2:	601a      	str	r2, [r3, #0]
}
 80098c4:	bf00      	nop
 80098c6:	3714      	adds	r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr
 80098d0:	20000db8 	.word	0x20000db8
 80098d4:	200049b8 	.word	0x200049b8
 80098d8:	200049c0 	.word	0x200049c0
 80098dc:	200049c8 	.word	0x200049c8
 80098e0:	200049c4 	.word	0x200049c4
 80098e4:	200049d4 	.word	0x200049d4

080098e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80098f0:	4b28      	ldr	r3, [pc, #160]	; (8009994 <prvInsertBlockIntoFreeList+0xac>)
 80098f2:	60fb      	str	r3, [r7, #12]
 80098f4:	e002      	b.n	80098fc <prvInsertBlockIntoFreeList+0x14>
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	60fb      	str	r3, [r7, #12]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	429a      	cmp	r2, r3
 8009904:	d8f7      	bhi.n	80098f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	4413      	add	r3, r2
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	429a      	cmp	r2, r3
 8009916:	d108      	bne.n	800992a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	685a      	ldr	r2, [r3, #4]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	441a      	add	r2, r3
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	68ba      	ldr	r2, [r7, #8]
 8009934:	441a      	add	r2, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	429a      	cmp	r2, r3
 800993c:	d118      	bne.n	8009970 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	4b15      	ldr	r3, [pc, #84]	; (8009998 <prvInsertBlockIntoFreeList+0xb0>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	429a      	cmp	r2, r3
 8009948:	d00d      	beq.n	8009966 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	685a      	ldr	r2, [r3, #4]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	441a      	add	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	e008      	b.n	8009978 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009966:	4b0c      	ldr	r3, [pc, #48]	; (8009998 <prvInsertBlockIntoFreeList+0xb0>)
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	601a      	str	r2, [r3, #0]
 800996e:	e003      	b.n	8009978 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	429a      	cmp	r2, r3
 800997e:	d002      	beq.n	8009986 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009986:	bf00      	nop
 8009988:	3714      	adds	r7, #20
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	200049b8 	.word	0x200049b8
 8009998:	200049c0 	.word	0x200049c0

0800999c <OLED_Refresh_Gram>:
#include "stdlib.h"
#include "oledfont.h"  

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 80099a2:	2300      	movs	r3, #0
 80099a4:	71fb      	strb	r3, [r7, #7]
 80099a6:	e026      	b.n	80099f6 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 80099a8:	79fb      	ldrb	r3, [r7, #7]
 80099aa:	3b50      	subs	r3, #80	; 0x50
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	2100      	movs	r1, #0
 80099b0:	4618      	mov	r0, r3
 80099b2:	f000 f82b 	bl	8009a0c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 80099b6:	2100      	movs	r1, #0
 80099b8:	2000      	movs	r0, #0
 80099ba:	f000 f827 	bl	8009a0c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 80099be:	2100      	movs	r1, #0
 80099c0:	2010      	movs	r0, #16
 80099c2:	f000 f823 	bl	8009a0c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 80099c6:	2300      	movs	r3, #0
 80099c8:	71bb      	strb	r3, [r7, #6]
 80099ca:	e00d      	b.n	80099e8 <OLED_Refresh_Gram+0x4c>
 80099cc:	79ba      	ldrb	r2, [r7, #6]
 80099ce:	79fb      	ldrb	r3, [r7, #7]
 80099d0:	490d      	ldr	r1, [pc, #52]	; (8009a08 <OLED_Refresh_Gram+0x6c>)
 80099d2:	00d2      	lsls	r2, r2, #3
 80099d4:	440a      	add	r2, r1
 80099d6:	4413      	add	r3, r2
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	2101      	movs	r1, #1
 80099dc:	4618      	mov	r0, r3
 80099de:	f000 f815 	bl	8009a0c <OLED_WR_Byte>
 80099e2:	79bb      	ldrb	r3, [r7, #6]
 80099e4:	3301      	adds	r3, #1
 80099e6:	71bb      	strb	r3, [r7, #6]
 80099e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	daed      	bge.n	80099cc <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 80099f0:	79fb      	ldrb	r3, [r7, #7]
 80099f2:	3301      	adds	r3, #1
 80099f4:	71fb      	strb	r3, [r7, #7]
 80099f6:	79fb      	ldrb	r3, [r7, #7]
 80099f8:	2b07      	cmp	r3, #7
 80099fa:	d9d5      	bls.n	80099a8 <OLED_Refresh_Gram+0xc>
	}   
}
 80099fc:	bf00      	nop
 80099fe:	bf00      	nop
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	20004c9c 	.word	0x20004c9c

08009a0c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	4603      	mov	r3, r0
 8009a14:	460a      	mov	r2, r1
 8009a16:	71fb      	strb	r3, [r7, #7]
 8009a18:	4613      	mov	r3, r2
 8009a1a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8009a1c:	79bb      	ldrb	r3, [r7, #6]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d006      	beq.n	8009a30 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8009a22:	2201      	movs	r2, #1
 8009a24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009a28:	481c      	ldr	r0, [pc, #112]	; (8009a9c <OLED_WR_Byte+0x90>)
 8009a2a:	f7fa f8d5 	bl	8003bd8 <HAL_GPIO_WritePin>
 8009a2e:	e005      	b.n	8009a3c <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8009a30:	2200      	movs	r2, #0
 8009a32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009a36:	4819      	ldr	r0, [pc, #100]	; (8009a9c <OLED_WR_Byte+0x90>)
 8009a38:	f7fa f8ce 	bl	8003bd8 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	73fb      	strb	r3, [r7, #15]
 8009a40:	e01e      	b.n	8009a80 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8009a42:	2200      	movs	r2, #0
 8009a44:	2120      	movs	r1, #32
 8009a46:	4815      	ldr	r0, [pc, #84]	; (8009a9c <OLED_WR_Byte+0x90>)
 8009a48:	f7fa f8c6 	bl	8003bd8 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8009a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	da05      	bge.n	8009a60 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8009a54:	2201      	movs	r2, #1
 8009a56:	2140      	movs	r1, #64	; 0x40
 8009a58:	4810      	ldr	r0, [pc, #64]	; (8009a9c <OLED_WR_Byte+0x90>)
 8009a5a:	f7fa f8bd 	bl	8003bd8 <HAL_GPIO_WritePin>
 8009a5e:	e004      	b.n	8009a6a <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8009a60:	2200      	movs	r2, #0
 8009a62:	2140      	movs	r1, #64	; 0x40
 8009a64:	480d      	ldr	r0, [pc, #52]	; (8009a9c <OLED_WR_Byte+0x90>)
 8009a66:	f7fa f8b7 	bl	8003bd8 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	2120      	movs	r1, #32
 8009a6e:	480b      	ldr	r0, [pc, #44]	; (8009a9c <OLED_WR_Byte+0x90>)
 8009a70:	f7fa f8b2 	bl	8003bd8 <HAL_GPIO_WritePin>
		dat<<=1;   
 8009a74:	79fb      	ldrb	r3, [r7, #7]
 8009a76:	005b      	lsls	r3, r3, #1
 8009a78:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8009a7a:	7bfb      	ldrb	r3, [r7, #15]
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	73fb      	strb	r3, [r7, #15]
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
 8009a82:	2b07      	cmp	r3, #7
 8009a84:	d9dd      	bls.n	8009a42 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8009a86:	2201      	movs	r2, #1
 8009a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009a8c:	4803      	ldr	r0, [pc, #12]	; (8009a9c <OLED_WR_Byte+0x90>)
 8009a8e:	f7fa f8a3 	bl	8003bd8 <HAL_GPIO_WritePin>
} 
 8009a92:	bf00      	nop
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	40021000 	.word	0x40021000

08009aa0 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	71fb      	strb	r3, [r7, #7]
 8009aaa:	e014      	b.n	8009ad6 <OLED_Clear+0x36>
 8009aac:	2300      	movs	r3, #0
 8009aae:	71bb      	strb	r3, [r7, #6]
 8009ab0:	e00a      	b.n	8009ac8 <OLED_Clear+0x28>
 8009ab2:	79ba      	ldrb	r2, [r7, #6]
 8009ab4:	79fb      	ldrb	r3, [r7, #7]
 8009ab6:	490c      	ldr	r1, [pc, #48]	; (8009ae8 <OLED_Clear+0x48>)
 8009ab8:	00d2      	lsls	r2, r2, #3
 8009aba:	440a      	add	r2, r1
 8009abc:	4413      	add	r3, r2
 8009abe:	2200      	movs	r2, #0
 8009ac0:	701a      	strb	r2, [r3, #0]
 8009ac2:	79bb      	ldrb	r3, [r7, #6]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	71bb      	strb	r3, [r7, #6]
 8009ac8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	daf0      	bge.n	8009ab2 <OLED_Clear+0x12>
 8009ad0:	79fb      	ldrb	r3, [r7, #7]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	71fb      	strb	r3, [r7, #7]
 8009ad6:	79fb      	ldrb	r3, [r7, #7]
 8009ad8:	2b07      	cmp	r3, #7
 8009ada:	d9e7      	bls.n	8009aac <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8009adc:	f7ff ff5e 	bl	800999c <OLED_Refresh_Gram>
}
 8009ae0:	bf00      	nop
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	20004c9c 	.word	0x20004c9c

08009aec <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	4603      	mov	r3, r0
 8009af4:	71fb      	strb	r3, [r7, #7]
 8009af6:	460b      	mov	r3, r1
 8009af8:	71bb      	strb	r3, [r7, #6]
 8009afa:	4613      	mov	r3, r2
 8009afc:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8009afe:	2300      	movs	r3, #0
 8009b00:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8009b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	db41      	blt.n	8009b8e <OLED_DrawPoint+0xa2>
 8009b0a:	79bb      	ldrb	r3, [r7, #6]
 8009b0c:	2b3f      	cmp	r3, #63	; 0x3f
 8009b0e:	d83e      	bhi.n	8009b8e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8009b10:	79bb      	ldrb	r3, [r7, #6]
 8009b12:	08db      	lsrs	r3, r3, #3
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	f1c3 0307 	rsb	r3, r3, #7
 8009b1a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8009b1c:	79bb      	ldrb	r3, [r7, #6]
 8009b1e:	f003 0307 	and.w	r3, r3, #7
 8009b22:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8009b24:	7b7b      	ldrb	r3, [r7, #13]
 8009b26:	f1c3 0307 	rsb	r3, r3, #7
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b30:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8009b32:	797b      	ldrb	r3, [r7, #5]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d012      	beq.n	8009b5e <OLED_DrawPoint+0x72>
 8009b38:	79fa      	ldrb	r2, [r7, #7]
 8009b3a:	7bbb      	ldrb	r3, [r7, #14]
 8009b3c:	4917      	ldr	r1, [pc, #92]	; (8009b9c <OLED_DrawPoint+0xb0>)
 8009b3e:	00d2      	lsls	r2, r2, #3
 8009b40:	440a      	add	r2, r1
 8009b42:	4413      	add	r3, r2
 8009b44:	7818      	ldrb	r0, [r3, #0]
 8009b46:	79fa      	ldrb	r2, [r7, #7]
 8009b48:	7bbb      	ldrb	r3, [r7, #14]
 8009b4a:	7bf9      	ldrb	r1, [r7, #15]
 8009b4c:	4301      	orrs	r1, r0
 8009b4e:	b2c8      	uxtb	r0, r1
 8009b50:	4912      	ldr	r1, [pc, #72]	; (8009b9c <OLED_DrawPoint+0xb0>)
 8009b52:	00d2      	lsls	r2, r2, #3
 8009b54:	440a      	add	r2, r1
 8009b56:	4413      	add	r3, r2
 8009b58:	4602      	mov	r2, r0
 8009b5a:	701a      	strb	r2, [r3, #0]
 8009b5c:	e018      	b.n	8009b90 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8009b5e:	79fa      	ldrb	r2, [r7, #7]
 8009b60:	7bbb      	ldrb	r3, [r7, #14]
 8009b62:	490e      	ldr	r1, [pc, #56]	; (8009b9c <OLED_DrawPoint+0xb0>)
 8009b64:	00d2      	lsls	r2, r2, #3
 8009b66:	440a      	add	r2, r1
 8009b68:	4413      	add	r3, r2
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	b25a      	sxtb	r2, r3
 8009b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b72:	43db      	mvns	r3, r3
 8009b74:	b25b      	sxtb	r3, r3
 8009b76:	4013      	ands	r3, r2
 8009b78:	b259      	sxtb	r1, r3
 8009b7a:	79fa      	ldrb	r2, [r7, #7]
 8009b7c:	7bbb      	ldrb	r3, [r7, #14]
 8009b7e:	b2c8      	uxtb	r0, r1
 8009b80:	4906      	ldr	r1, [pc, #24]	; (8009b9c <OLED_DrawPoint+0xb0>)
 8009b82:	00d2      	lsls	r2, r2, #3
 8009b84:	440a      	add	r2, r1
 8009b86:	4413      	add	r3, r2
 8009b88:	4602      	mov	r2, r0
 8009b8a:	701a      	strb	r2, [r3, #0]
 8009b8c:	e000      	b.n	8009b90 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8009b8e:	bf00      	nop
}
 8009b90:	3714      	adds	r7, #20
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	20004c9c 	.word	0x20004c9c

08009ba0 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8009ba0:	b590      	push	{r4, r7, lr}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	4608      	mov	r0, r1
 8009baa:	4611      	mov	r1, r2
 8009bac:	461a      	mov	r2, r3
 8009bae:	4623      	mov	r3, r4
 8009bb0:	71fb      	strb	r3, [r7, #7]
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	71bb      	strb	r3, [r7, #6]
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	717b      	strb	r3, [r7, #5]
 8009bba:	4613      	mov	r3, r2
 8009bbc:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8009bbe:	79bb      	ldrb	r3, [r7, #6]
 8009bc0:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8009bc2:	797b      	ldrb	r3, [r7, #5]
 8009bc4:	3b20      	subs	r3, #32
 8009bc6:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8009bc8:	2300      	movs	r3, #0
 8009bca:	73bb      	strb	r3, [r7, #14]
 8009bcc:	e04d      	b.n	8009c6a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8009bce:	793b      	ldrb	r3, [r7, #4]
 8009bd0:	2b0c      	cmp	r3, #12
 8009bd2:	d10b      	bne.n	8009bec <OLED_ShowChar+0x4c>
 8009bd4:	797a      	ldrb	r2, [r7, #5]
 8009bd6:	7bb9      	ldrb	r1, [r7, #14]
 8009bd8:	4828      	ldr	r0, [pc, #160]	; (8009c7c <OLED_ShowChar+0xdc>)
 8009bda:	4613      	mov	r3, r2
 8009bdc:	005b      	lsls	r3, r3, #1
 8009bde:	4413      	add	r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	4403      	add	r3, r0
 8009be4:	440b      	add	r3, r1
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	73fb      	strb	r3, [r7, #15]
 8009bea:	e007      	b.n	8009bfc <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8009bec:	797a      	ldrb	r2, [r7, #5]
 8009bee:	7bbb      	ldrb	r3, [r7, #14]
 8009bf0:	4923      	ldr	r1, [pc, #140]	; (8009c80 <OLED_ShowChar+0xe0>)
 8009bf2:	0112      	lsls	r2, r2, #4
 8009bf4:	440a      	add	r2, r1
 8009bf6:	4413      	add	r3, r2
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	737b      	strb	r3, [r7, #13]
 8009c00:	e02d      	b.n	8009c5e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8009c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	da07      	bge.n	8009c1a <OLED_ShowChar+0x7a>
 8009c0a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009c0e:	79b9      	ldrb	r1, [r7, #6]
 8009c10:	79fb      	ldrb	r3, [r7, #7]
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7ff ff6a 	bl	8009aec <OLED_DrawPoint>
 8009c18:	e00c      	b.n	8009c34 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8009c1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	bf0c      	ite	eq
 8009c22:	2301      	moveq	r3, #1
 8009c24:	2300      	movne	r3, #0
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	461a      	mov	r2, r3
 8009c2a:	79b9      	ldrb	r1, [r7, #6]
 8009c2c:	79fb      	ldrb	r3, [r7, #7]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7ff ff5c 	bl	8009aec <OLED_DrawPoint>
			temp<<=1;
 8009c34:	7bfb      	ldrb	r3, [r7, #15]
 8009c36:	005b      	lsls	r3, r3, #1
 8009c38:	73fb      	strb	r3, [r7, #15]
			y++;
 8009c3a:	79bb      	ldrb	r3, [r7, #6]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8009c40:	79ba      	ldrb	r2, [r7, #6]
 8009c42:	7b3b      	ldrb	r3, [r7, #12]
 8009c44:	1ad2      	subs	r2, r2, r3
 8009c46:	793b      	ldrb	r3, [r7, #4]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d105      	bne.n	8009c58 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8009c4c:	7b3b      	ldrb	r3, [r7, #12]
 8009c4e:	71bb      	strb	r3, [r7, #6]
				x++;
 8009c50:	79fb      	ldrb	r3, [r7, #7]
 8009c52:	3301      	adds	r3, #1
 8009c54:	71fb      	strb	r3, [r7, #7]
				break;
 8009c56:	e005      	b.n	8009c64 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8009c58:	7b7b      	ldrb	r3, [r7, #13]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	737b      	strb	r3, [r7, #13]
 8009c5e:	7b7b      	ldrb	r3, [r7, #13]
 8009c60:	2b07      	cmp	r3, #7
 8009c62:	d9ce      	bls.n	8009c02 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8009c64:	7bbb      	ldrb	r3, [r7, #14]
 8009c66:	3301      	adds	r3, #1
 8009c68:	73bb      	strb	r3, [r7, #14]
 8009c6a:	7bba      	ldrb	r2, [r7, #14]
 8009c6c:	793b      	ldrb	r3, [r7, #4]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d3ad      	bcc.n	8009bce <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8009c72:	bf00      	nop
 8009c74:	bf00      	nop
 8009c76:	3714      	adds	r7, #20
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd90      	pop	{r4, r7, pc}
 8009c7c:	0800a7d4 	.word	0x0800a7d4
 8009c80:	0800ac48 	.word	0x0800ac48

08009c84 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af02      	add	r7, sp, #8
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	603a      	str	r2, [r7, #0]
 8009c8e:	71fb      	strb	r3, [r7, #7]
 8009c90:	460b      	mov	r3, r1
 8009c92:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8009c94:	e01f      	b.n	8009cd6 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8009c96:	79fb      	ldrb	r3, [r7, #7]
 8009c98:	2b7a      	cmp	r3, #122	; 0x7a
 8009c9a:	d904      	bls.n	8009ca6 <OLED_ShowString+0x22>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	71fb      	strb	r3, [r7, #7]
 8009ca0:	79bb      	ldrb	r3, [r7, #6]
 8009ca2:	3310      	adds	r3, #16
 8009ca4:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8009ca6:	79bb      	ldrb	r3, [r7, #6]
 8009ca8:	2b3a      	cmp	r3, #58	; 0x3a
 8009caa:	d905      	bls.n	8009cb8 <OLED_ShowString+0x34>
 8009cac:	2300      	movs	r3, #0
 8009cae:	71fb      	strb	r3, [r7, #7]
 8009cb0:	79fb      	ldrb	r3, [r7, #7]
 8009cb2:	71bb      	strb	r3, [r7, #6]
 8009cb4:	f7ff fef4 	bl	8009aa0 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	781a      	ldrb	r2, [r3, #0]
 8009cbc:	79b9      	ldrb	r1, [r7, #6]
 8009cbe:	79f8      	ldrb	r0, [r7, #7]
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	9300      	str	r3, [sp, #0]
 8009cc4:	230c      	movs	r3, #12
 8009cc6:	f7ff ff6b 	bl	8009ba0 <OLED_ShowChar>
        x+=8;
 8009cca:	79fb      	ldrb	r3, [r7, #7]
 8009ccc:	3308      	adds	r3, #8
 8009cce:	71fb      	strb	r3, [r7, #7]
        p++;
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d1db      	bne.n	8009c96 <OLED_ShowString+0x12>
    }  
}	 
 8009cde:	bf00      	nop
 8009ce0:	bf00      	nop
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <OLED_Init>:

void OLED_Init(void)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8009cec:	f7f9 ff8e 	bl	8003c0c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8009cf0:	4b41      	ldr	r3, [pc, #260]	; (8009df8 <OLED_Init+0x110>)
 8009cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cf4:	4a40      	ldr	r2, [pc, #256]	; (8009df8 <OLED_Init+0x110>)
 8009cf6:	f023 0301 	bic.w	r3, r3, #1
 8009cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8009cfc:	4b3e      	ldr	r3, [pc, #248]	; (8009df8 <OLED_Init+0x110>)
 8009cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d00:	4a3d      	ldr	r2, [pc, #244]	; (8009df8 <OLED_Init+0x110>)
 8009d02:	f023 0304 	bic.w	r3, r3, #4
 8009d06:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8009d08:	f7f9 ff94 	bl	8003c34 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	2180      	movs	r1, #128	; 0x80
 8009d10:	483a      	ldr	r0, [pc, #232]	; (8009dfc <OLED_Init+0x114>)
 8009d12:	f7f9 ff61 	bl	8003bd8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8009d16:	2064      	movs	r0, #100	; 0x64
 8009d18:	f7f9 f998 	bl	800304c <HAL_Delay>
	OLED_RST_Set();
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	2180      	movs	r1, #128	; 0x80
 8009d20:	4836      	ldr	r0, [pc, #216]	; (8009dfc <OLED_Init+0x114>)
 8009d22:	f7f9 ff59 	bl	8003bd8 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8009d26:	2100      	movs	r1, #0
 8009d28:	20ae      	movs	r0, #174	; 0xae
 8009d2a:	f7ff fe6f 	bl	8009a0c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8009d2e:	2100      	movs	r1, #0
 8009d30:	20d5      	movs	r0, #213	; 0xd5
 8009d32:	f7ff fe6b 	bl	8009a0c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8009d36:	2100      	movs	r1, #0
 8009d38:	2050      	movs	r0, #80	; 0x50
 8009d3a:	f7ff fe67 	bl	8009a0c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8009d3e:	2100      	movs	r1, #0
 8009d40:	20a8      	movs	r0, #168	; 0xa8
 8009d42:	f7ff fe63 	bl	8009a0c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8009d46:	2100      	movs	r1, #0
 8009d48:	203f      	movs	r0, #63	; 0x3f
 8009d4a:	f7ff fe5f 	bl	8009a0c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8009d4e:	2100      	movs	r1, #0
 8009d50:	20d3      	movs	r0, #211	; 0xd3
 8009d52:	f7ff fe5b 	bl	8009a0c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8009d56:	2100      	movs	r1, #0
 8009d58:	2000      	movs	r0, #0
 8009d5a:	f7ff fe57 	bl	8009a0c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8009d5e:	2100      	movs	r1, #0
 8009d60:	2040      	movs	r0, #64	; 0x40
 8009d62:	f7ff fe53 	bl	8009a0c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8009d66:	2100      	movs	r1, #0
 8009d68:	208d      	movs	r0, #141	; 0x8d
 8009d6a:	f7ff fe4f 	bl	8009a0c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8009d6e:	2100      	movs	r1, #0
 8009d70:	2014      	movs	r0, #20
 8009d72:	f7ff fe4b 	bl	8009a0c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8009d76:	2100      	movs	r1, #0
 8009d78:	2020      	movs	r0, #32
 8009d7a:	f7ff fe47 	bl	8009a0c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8009d7e:	2100      	movs	r1, #0
 8009d80:	2002      	movs	r0, #2
 8009d82:	f7ff fe43 	bl	8009a0c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8009d86:	2100      	movs	r1, #0
 8009d88:	20a1      	movs	r0, #161	; 0xa1
 8009d8a:	f7ff fe3f 	bl	8009a0c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8009d8e:	2100      	movs	r1, #0
 8009d90:	20c0      	movs	r0, #192	; 0xc0
 8009d92:	f7ff fe3b 	bl	8009a0c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8009d96:	2100      	movs	r1, #0
 8009d98:	20da      	movs	r0, #218	; 0xda
 8009d9a:	f7ff fe37 	bl	8009a0c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8009d9e:	2100      	movs	r1, #0
 8009da0:	2012      	movs	r0, #18
 8009da2:	f7ff fe33 	bl	8009a0c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8009da6:	2100      	movs	r1, #0
 8009da8:	2081      	movs	r0, #129	; 0x81
 8009daa:	f7ff fe2f 	bl	8009a0c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8009dae:	2100      	movs	r1, #0
 8009db0:	20ef      	movs	r0, #239	; 0xef
 8009db2:	f7ff fe2b 	bl	8009a0c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8009db6:	2100      	movs	r1, #0
 8009db8:	20d9      	movs	r0, #217	; 0xd9
 8009dba:	f7ff fe27 	bl	8009a0c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8009dbe:	2100      	movs	r1, #0
 8009dc0:	20f1      	movs	r0, #241	; 0xf1
 8009dc2:	f7ff fe23 	bl	8009a0c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	20db      	movs	r0, #219	; 0xdb
 8009dca:	f7ff fe1f 	bl	8009a0c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8009dce:	2100      	movs	r1, #0
 8009dd0:	2030      	movs	r0, #48	; 0x30
 8009dd2:	f7ff fe1b 	bl	8009a0c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	20a4      	movs	r0, #164	; 0xa4
 8009dda:	f7ff fe17 	bl	8009a0c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8009dde:	2100      	movs	r1, #0
 8009de0:	20a6      	movs	r0, #166	; 0xa6
 8009de2:	f7ff fe13 	bl	8009a0c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8009de6:	2100      	movs	r1, #0
 8009de8:	20af      	movs	r0, #175	; 0xaf
 8009dea:	f7ff fe0f 	bl	8009a0c <OLED_WR_Byte>
	OLED_Clear(); 
 8009dee:	f7ff fe57 	bl	8009aa0 <OLED_Clear>
 8009df2:	bf00      	nop
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	40023800 	.word	0x40023800
 8009dfc:	40021000 	.word	0x40021000

08009e00 <__errno>:
 8009e00:	4b01      	ldr	r3, [pc, #4]	; (8009e08 <__errno+0x8>)
 8009e02:	6818      	ldr	r0, [r3, #0]
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	20000010 	.word	0x20000010

08009e0c <__libc_init_array>:
 8009e0c:	b570      	push	{r4, r5, r6, lr}
 8009e0e:	4d0d      	ldr	r5, [pc, #52]	; (8009e44 <__libc_init_array+0x38>)
 8009e10:	4c0d      	ldr	r4, [pc, #52]	; (8009e48 <__libc_init_array+0x3c>)
 8009e12:	1b64      	subs	r4, r4, r5
 8009e14:	10a4      	asrs	r4, r4, #2
 8009e16:	2600      	movs	r6, #0
 8009e18:	42a6      	cmp	r6, r4
 8009e1a:	d109      	bne.n	8009e30 <__libc_init_array+0x24>
 8009e1c:	4d0b      	ldr	r5, [pc, #44]	; (8009e4c <__libc_init_array+0x40>)
 8009e1e:	4c0c      	ldr	r4, [pc, #48]	; (8009e50 <__libc_init_array+0x44>)
 8009e20:	f000 fc4e 	bl	800a6c0 <_init>
 8009e24:	1b64      	subs	r4, r4, r5
 8009e26:	10a4      	asrs	r4, r4, #2
 8009e28:	2600      	movs	r6, #0
 8009e2a:	42a6      	cmp	r6, r4
 8009e2c:	d105      	bne.n	8009e3a <__libc_init_array+0x2e>
 8009e2e:	bd70      	pop	{r4, r5, r6, pc}
 8009e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e34:	4798      	blx	r3
 8009e36:	3601      	adds	r6, #1
 8009e38:	e7ee      	b.n	8009e18 <__libc_init_array+0xc>
 8009e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e3e:	4798      	blx	r3
 8009e40:	3601      	adds	r6, #1
 8009e42:	e7f2      	b.n	8009e2a <__libc_init_array+0x1e>
 8009e44:	0800b274 	.word	0x0800b274
 8009e48:	0800b274 	.word	0x0800b274
 8009e4c:	0800b274 	.word	0x0800b274
 8009e50:	0800b278 	.word	0x0800b278

08009e54 <memcpy>:
 8009e54:	440a      	add	r2, r1
 8009e56:	4291      	cmp	r1, r2
 8009e58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009e5c:	d100      	bne.n	8009e60 <memcpy+0xc>
 8009e5e:	4770      	bx	lr
 8009e60:	b510      	push	{r4, lr}
 8009e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e6a:	4291      	cmp	r1, r2
 8009e6c:	d1f9      	bne.n	8009e62 <memcpy+0xe>
 8009e6e:	bd10      	pop	{r4, pc}

08009e70 <memset>:
 8009e70:	4402      	add	r2, r0
 8009e72:	4603      	mov	r3, r0
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d100      	bne.n	8009e7a <memset+0xa>
 8009e78:	4770      	bx	lr
 8009e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8009e7e:	e7f9      	b.n	8009e74 <memset+0x4>

08009e80 <siprintf>:
 8009e80:	b40e      	push	{r1, r2, r3}
 8009e82:	b500      	push	{lr}
 8009e84:	b09c      	sub	sp, #112	; 0x70
 8009e86:	ab1d      	add	r3, sp, #116	; 0x74
 8009e88:	9002      	str	r0, [sp, #8]
 8009e8a:	9006      	str	r0, [sp, #24]
 8009e8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e90:	4809      	ldr	r0, [pc, #36]	; (8009eb8 <siprintf+0x38>)
 8009e92:	9107      	str	r1, [sp, #28]
 8009e94:	9104      	str	r1, [sp, #16]
 8009e96:	4909      	ldr	r1, [pc, #36]	; (8009ebc <siprintf+0x3c>)
 8009e98:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e9c:	9105      	str	r1, [sp, #20]
 8009e9e:	6800      	ldr	r0, [r0, #0]
 8009ea0:	9301      	str	r3, [sp, #4]
 8009ea2:	a902      	add	r1, sp, #8
 8009ea4:	f000 f868 	bl	8009f78 <_svfiprintf_r>
 8009ea8:	9b02      	ldr	r3, [sp, #8]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	701a      	strb	r2, [r3, #0]
 8009eae:	b01c      	add	sp, #112	; 0x70
 8009eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009eb4:	b003      	add	sp, #12
 8009eb6:	4770      	bx	lr
 8009eb8:	20000010 	.word	0x20000010
 8009ebc:	ffff0208 	.word	0xffff0208

08009ec0 <__ssputs_r>:
 8009ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec4:	688e      	ldr	r6, [r1, #8]
 8009ec6:	429e      	cmp	r6, r3
 8009ec8:	4682      	mov	sl, r0
 8009eca:	460c      	mov	r4, r1
 8009ecc:	4690      	mov	r8, r2
 8009ece:	461f      	mov	r7, r3
 8009ed0:	d838      	bhi.n	8009f44 <__ssputs_r+0x84>
 8009ed2:	898a      	ldrh	r2, [r1, #12]
 8009ed4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ed8:	d032      	beq.n	8009f40 <__ssputs_r+0x80>
 8009eda:	6825      	ldr	r5, [r4, #0]
 8009edc:	6909      	ldr	r1, [r1, #16]
 8009ede:	eba5 0901 	sub.w	r9, r5, r1
 8009ee2:	6965      	ldr	r5, [r4, #20]
 8009ee4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ee8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009eec:	3301      	adds	r3, #1
 8009eee:	444b      	add	r3, r9
 8009ef0:	106d      	asrs	r5, r5, #1
 8009ef2:	429d      	cmp	r5, r3
 8009ef4:	bf38      	it	cc
 8009ef6:	461d      	movcc	r5, r3
 8009ef8:	0553      	lsls	r3, r2, #21
 8009efa:	d531      	bpl.n	8009f60 <__ssputs_r+0xa0>
 8009efc:	4629      	mov	r1, r5
 8009efe:	f000 fb39 	bl	800a574 <_malloc_r>
 8009f02:	4606      	mov	r6, r0
 8009f04:	b950      	cbnz	r0, 8009f1c <__ssputs_r+0x5c>
 8009f06:	230c      	movs	r3, #12
 8009f08:	f8ca 3000 	str.w	r3, [sl]
 8009f0c:	89a3      	ldrh	r3, [r4, #12]
 8009f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f12:	81a3      	strh	r3, [r4, #12]
 8009f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f1c:	6921      	ldr	r1, [r4, #16]
 8009f1e:	464a      	mov	r2, r9
 8009f20:	f7ff ff98 	bl	8009e54 <memcpy>
 8009f24:	89a3      	ldrh	r3, [r4, #12]
 8009f26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f2e:	81a3      	strh	r3, [r4, #12]
 8009f30:	6126      	str	r6, [r4, #16]
 8009f32:	6165      	str	r5, [r4, #20]
 8009f34:	444e      	add	r6, r9
 8009f36:	eba5 0509 	sub.w	r5, r5, r9
 8009f3a:	6026      	str	r6, [r4, #0]
 8009f3c:	60a5      	str	r5, [r4, #8]
 8009f3e:	463e      	mov	r6, r7
 8009f40:	42be      	cmp	r6, r7
 8009f42:	d900      	bls.n	8009f46 <__ssputs_r+0x86>
 8009f44:	463e      	mov	r6, r7
 8009f46:	4632      	mov	r2, r6
 8009f48:	6820      	ldr	r0, [r4, #0]
 8009f4a:	4641      	mov	r1, r8
 8009f4c:	f000 faa8 	bl	800a4a0 <memmove>
 8009f50:	68a3      	ldr	r3, [r4, #8]
 8009f52:	6822      	ldr	r2, [r4, #0]
 8009f54:	1b9b      	subs	r3, r3, r6
 8009f56:	4432      	add	r2, r6
 8009f58:	60a3      	str	r3, [r4, #8]
 8009f5a:	6022      	str	r2, [r4, #0]
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	e7db      	b.n	8009f18 <__ssputs_r+0x58>
 8009f60:	462a      	mov	r2, r5
 8009f62:	f000 fb61 	bl	800a628 <_realloc_r>
 8009f66:	4606      	mov	r6, r0
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	d1e1      	bne.n	8009f30 <__ssputs_r+0x70>
 8009f6c:	6921      	ldr	r1, [r4, #16]
 8009f6e:	4650      	mov	r0, sl
 8009f70:	f000 fab0 	bl	800a4d4 <_free_r>
 8009f74:	e7c7      	b.n	8009f06 <__ssputs_r+0x46>
	...

08009f78 <_svfiprintf_r>:
 8009f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f7c:	4698      	mov	r8, r3
 8009f7e:	898b      	ldrh	r3, [r1, #12]
 8009f80:	061b      	lsls	r3, r3, #24
 8009f82:	b09d      	sub	sp, #116	; 0x74
 8009f84:	4607      	mov	r7, r0
 8009f86:	460d      	mov	r5, r1
 8009f88:	4614      	mov	r4, r2
 8009f8a:	d50e      	bpl.n	8009faa <_svfiprintf_r+0x32>
 8009f8c:	690b      	ldr	r3, [r1, #16]
 8009f8e:	b963      	cbnz	r3, 8009faa <_svfiprintf_r+0x32>
 8009f90:	2140      	movs	r1, #64	; 0x40
 8009f92:	f000 faef 	bl	800a574 <_malloc_r>
 8009f96:	6028      	str	r0, [r5, #0]
 8009f98:	6128      	str	r0, [r5, #16]
 8009f9a:	b920      	cbnz	r0, 8009fa6 <_svfiprintf_r+0x2e>
 8009f9c:	230c      	movs	r3, #12
 8009f9e:	603b      	str	r3, [r7, #0]
 8009fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fa4:	e0d1      	b.n	800a14a <_svfiprintf_r+0x1d2>
 8009fa6:	2340      	movs	r3, #64	; 0x40
 8009fa8:	616b      	str	r3, [r5, #20]
 8009faa:	2300      	movs	r3, #0
 8009fac:	9309      	str	r3, [sp, #36]	; 0x24
 8009fae:	2320      	movs	r3, #32
 8009fb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fb8:	2330      	movs	r3, #48	; 0x30
 8009fba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a164 <_svfiprintf_r+0x1ec>
 8009fbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fc2:	f04f 0901 	mov.w	r9, #1
 8009fc6:	4623      	mov	r3, r4
 8009fc8:	469a      	mov	sl, r3
 8009fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fce:	b10a      	cbz	r2, 8009fd4 <_svfiprintf_r+0x5c>
 8009fd0:	2a25      	cmp	r2, #37	; 0x25
 8009fd2:	d1f9      	bne.n	8009fc8 <_svfiprintf_r+0x50>
 8009fd4:	ebba 0b04 	subs.w	fp, sl, r4
 8009fd8:	d00b      	beq.n	8009ff2 <_svfiprintf_r+0x7a>
 8009fda:	465b      	mov	r3, fp
 8009fdc:	4622      	mov	r2, r4
 8009fde:	4629      	mov	r1, r5
 8009fe0:	4638      	mov	r0, r7
 8009fe2:	f7ff ff6d 	bl	8009ec0 <__ssputs_r>
 8009fe6:	3001      	adds	r0, #1
 8009fe8:	f000 80aa 	beq.w	800a140 <_svfiprintf_r+0x1c8>
 8009fec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fee:	445a      	add	r2, fp
 8009ff0:	9209      	str	r2, [sp, #36]	; 0x24
 8009ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f000 80a2 	beq.w	800a140 <_svfiprintf_r+0x1c8>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a006:	f10a 0a01 	add.w	sl, sl, #1
 800a00a:	9304      	str	r3, [sp, #16]
 800a00c:	9307      	str	r3, [sp, #28]
 800a00e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a012:	931a      	str	r3, [sp, #104]	; 0x68
 800a014:	4654      	mov	r4, sl
 800a016:	2205      	movs	r2, #5
 800a018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a01c:	4851      	ldr	r0, [pc, #324]	; (800a164 <_svfiprintf_r+0x1ec>)
 800a01e:	f7f6 f8df 	bl	80001e0 <memchr>
 800a022:	9a04      	ldr	r2, [sp, #16]
 800a024:	b9d8      	cbnz	r0, 800a05e <_svfiprintf_r+0xe6>
 800a026:	06d0      	lsls	r0, r2, #27
 800a028:	bf44      	itt	mi
 800a02a:	2320      	movmi	r3, #32
 800a02c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a030:	0711      	lsls	r1, r2, #28
 800a032:	bf44      	itt	mi
 800a034:	232b      	movmi	r3, #43	; 0x2b
 800a036:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a03a:	f89a 3000 	ldrb.w	r3, [sl]
 800a03e:	2b2a      	cmp	r3, #42	; 0x2a
 800a040:	d015      	beq.n	800a06e <_svfiprintf_r+0xf6>
 800a042:	9a07      	ldr	r2, [sp, #28]
 800a044:	4654      	mov	r4, sl
 800a046:	2000      	movs	r0, #0
 800a048:	f04f 0c0a 	mov.w	ip, #10
 800a04c:	4621      	mov	r1, r4
 800a04e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a052:	3b30      	subs	r3, #48	; 0x30
 800a054:	2b09      	cmp	r3, #9
 800a056:	d94e      	bls.n	800a0f6 <_svfiprintf_r+0x17e>
 800a058:	b1b0      	cbz	r0, 800a088 <_svfiprintf_r+0x110>
 800a05a:	9207      	str	r2, [sp, #28]
 800a05c:	e014      	b.n	800a088 <_svfiprintf_r+0x110>
 800a05e:	eba0 0308 	sub.w	r3, r0, r8
 800a062:	fa09 f303 	lsl.w	r3, r9, r3
 800a066:	4313      	orrs	r3, r2
 800a068:	9304      	str	r3, [sp, #16]
 800a06a:	46a2      	mov	sl, r4
 800a06c:	e7d2      	b.n	800a014 <_svfiprintf_r+0x9c>
 800a06e:	9b03      	ldr	r3, [sp, #12]
 800a070:	1d19      	adds	r1, r3, #4
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	9103      	str	r1, [sp, #12]
 800a076:	2b00      	cmp	r3, #0
 800a078:	bfbb      	ittet	lt
 800a07a:	425b      	neglt	r3, r3
 800a07c:	f042 0202 	orrlt.w	r2, r2, #2
 800a080:	9307      	strge	r3, [sp, #28]
 800a082:	9307      	strlt	r3, [sp, #28]
 800a084:	bfb8      	it	lt
 800a086:	9204      	strlt	r2, [sp, #16]
 800a088:	7823      	ldrb	r3, [r4, #0]
 800a08a:	2b2e      	cmp	r3, #46	; 0x2e
 800a08c:	d10c      	bne.n	800a0a8 <_svfiprintf_r+0x130>
 800a08e:	7863      	ldrb	r3, [r4, #1]
 800a090:	2b2a      	cmp	r3, #42	; 0x2a
 800a092:	d135      	bne.n	800a100 <_svfiprintf_r+0x188>
 800a094:	9b03      	ldr	r3, [sp, #12]
 800a096:	1d1a      	adds	r2, r3, #4
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	9203      	str	r2, [sp, #12]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	bfb8      	it	lt
 800a0a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a0a4:	3402      	adds	r4, #2
 800a0a6:	9305      	str	r3, [sp, #20]
 800a0a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a174 <_svfiprintf_r+0x1fc>
 800a0ac:	7821      	ldrb	r1, [r4, #0]
 800a0ae:	2203      	movs	r2, #3
 800a0b0:	4650      	mov	r0, sl
 800a0b2:	f7f6 f895 	bl	80001e0 <memchr>
 800a0b6:	b140      	cbz	r0, 800a0ca <_svfiprintf_r+0x152>
 800a0b8:	2340      	movs	r3, #64	; 0x40
 800a0ba:	eba0 000a 	sub.w	r0, r0, sl
 800a0be:	fa03 f000 	lsl.w	r0, r3, r0
 800a0c2:	9b04      	ldr	r3, [sp, #16]
 800a0c4:	4303      	orrs	r3, r0
 800a0c6:	3401      	adds	r4, #1
 800a0c8:	9304      	str	r3, [sp, #16]
 800a0ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ce:	4826      	ldr	r0, [pc, #152]	; (800a168 <_svfiprintf_r+0x1f0>)
 800a0d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0d4:	2206      	movs	r2, #6
 800a0d6:	f7f6 f883 	bl	80001e0 <memchr>
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	d038      	beq.n	800a150 <_svfiprintf_r+0x1d8>
 800a0de:	4b23      	ldr	r3, [pc, #140]	; (800a16c <_svfiprintf_r+0x1f4>)
 800a0e0:	bb1b      	cbnz	r3, 800a12a <_svfiprintf_r+0x1b2>
 800a0e2:	9b03      	ldr	r3, [sp, #12]
 800a0e4:	3307      	adds	r3, #7
 800a0e6:	f023 0307 	bic.w	r3, r3, #7
 800a0ea:	3308      	adds	r3, #8
 800a0ec:	9303      	str	r3, [sp, #12]
 800a0ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0f0:	4433      	add	r3, r6
 800a0f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a0f4:	e767      	b.n	8009fc6 <_svfiprintf_r+0x4e>
 800a0f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0fa:	460c      	mov	r4, r1
 800a0fc:	2001      	movs	r0, #1
 800a0fe:	e7a5      	b.n	800a04c <_svfiprintf_r+0xd4>
 800a100:	2300      	movs	r3, #0
 800a102:	3401      	adds	r4, #1
 800a104:	9305      	str	r3, [sp, #20]
 800a106:	4619      	mov	r1, r3
 800a108:	f04f 0c0a 	mov.w	ip, #10
 800a10c:	4620      	mov	r0, r4
 800a10e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a112:	3a30      	subs	r2, #48	; 0x30
 800a114:	2a09      	cmp	r2, #9
 800a116:	d903      	bls.n	800a120 <_svfiprintf_r+0x1a8>
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d0c5      	beq.n	800a0a8 <_svfiprintf_r+0x130>
 800a11c:	9105      	str	r1, [sp, #20]
 800a11e:	e7c3      	b.n	800a0a8 <_svfiprintf_r+0x130>
 800a120:	fb0c 2101 	mla	r1, ip, r1, r2
 800a124:	4604      	mov	r4, r0
 800a126:	2301      	movs	r3, #1
 800a128:	e7f0      	b.n	800a10c <_svfiprintf_r+0x194>
 800a12a:	ab03      	add	r3, sp, #12
 800a12c:	9300      	str	r3, [sp, #0]
 800a12e:	462a      	mov	r2, r5
 800a130:	4b0f      	ldr	r3, [pc, #60]	; (800a170 <_svfiprintf_r+0x1f8>)
 800a132:	a904      	add	r1, sp, #16
 800a134:	4638      	mov	r0, r7
 800a136:	f3af 8000 	nop.w
 800a13a:	1c42      	adds	r2, r0, #1
 800a13c:	4606      	mov	r6, r0
 800a13e:	d1d6      	bne.n	800a0ee <_svfiprintf_r+0x176>
 800a140:	89ab      	ldrh	r3, [r5, #12]
 800a142:	065b      	lsls	r3, r3, #25
 800a144:	f53f af2c 	bmi.w	8009fa0 <_svfiprintf_r+0x28>
 800a148:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a14a:	b01d      	add	sp, #116	; 0x74
 800a14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a150:	ab03      	add	r3, sp, #12
 800a152:	9300      	str	r3, [sp, #0]
 800a154:	462a      	mov	r2, r5
 800a156:	4b06      	ldr	r3, [pc, #24]	; (800a170 <_svfiprintf_r+0x1f8>)
 800a158:	a904      	add	r1, sp, #16
 800a15a:	4638      	mov	r0, r7
 800a15c:	f000 f87a 	bl	800a254 <_printf_i>
 800a160:	e7eb      	b.n	800a13a <_svfiprintf_r+0x1c2>
 800a162:	bf00      	nop
 800a164:	0800b238 	.word	0x0800b238
 800a168:	0800b242 	.word	0x0800b242
 800a16c:	00000000 	.word	0x00000000
 800a170:	08009ec1 	.word	0x08009ec1
 800a174:	0800b23e 	.word	0x0800b23e

0800a178 <_printf_common>:
 800a178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a17c:	4616      	mov	r6, r2
 800a17e:	4699      	mov	r9, r3
 800a180:	688a      	ldr	r2, [r1, #8]
 800a182:	690b      	ldr	r3, [r1, #16]
 800a184:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a188:	4293      	cmp	r3, r2
 800a18a:	bfb8      	it	lt
 800a18c:	4613      	movlt	r3, r2
 800a18e:	6033      	str	r3, [r6, #0]
 800a190:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a194:	4607      	mov	r7, r0
 800a196:	460c      	mov	r4, r1
 800a198:	b10a      	cbz	r2, 800a19e <_printf_common+0x26>
 800a19a:	3301      	adds	r3, #1
 800a19c:	6033      	str	r3, [r6, #0]
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	0699      	lsls	r1, r3, #26
 800a1a2:	bf42      	ittt	mi
 800a1a4:	6833      	ldrmi	r3, [r6, #0]
 800a1a6:	3302      	addmi	r3, #2
 800a1a8:	6033      	strmi	r3, [r6, #0]
 800a1aa:	6825      	ldr	r5, [r4, #0]
 800a1ac:	f015 0506 	ands.w	r5, r5, #6
 800a1b0:	d106      	bne.n	800a1c0 <_printf_common+0x48>
 800a1b2:	f104 0a19 	add.w	sl, r4, #25
 800a1b6:	68e3      	ldr	r3, [r4, #12]
 800a1b8:	6832      	ldr	r2, [r6, #0]
 800a1ba:	1a9b      	subs	r3, r3, r2
 800a1bc:	42ab      	cmp	r3, r5
 800a1be:	dc26      	bgt.n	800a20e <_printf_common+0x96>
 800a1c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1c4:	1e13      	subs	r3, r2, #0
 800a1c6:	6822      	ldr	r2, [r4, #0]
 800a1c8:	bf18      	it	ne
 800a1ca:	2301      	movne	r3, #1
 800a1cc:	0692      	lsls	r2, r2, #26
 800a1ce:	d42b      	bmi.n	800a228 <_printf_common+0xb0>
 800a1d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1d4:	4649      	mov	r1, r9
 800a1d6:	4638      	mov	r0, r7
 800a1d8:	47c0      	blx	r8
 800a1da:	3001      	adds	r0, #1
 800a1dc:	d01e      	beq.n	800a21c <_printf_common+0xa4>
 800a1de:	6823      	ldr	r3, [r4, #0]
 800a1e0:	68e5      	ldr	r5, [r4, #12]
 800a1e2:	6832      	ldr	r2, [r6, #0]
 800a1e4:	f003 0306 	and.w	r3, r3, #6
 800a1e8:	2b04      	cmp	r3, #4
 800a1ea:	bf08      	it	eq
 800a1ec:	1aad      	subeq	r5, r5, r2
 800a1ee:	68a3      	ldr	r3, [r4, #8]
 800a1f0:	6922      	ldr	r2, [r4, #16]
 800a1f2:	bf0c      	ite	eq
 800a1f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1f8:	2500      	movne	r5, #0
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	bfc4      	itt	gt
 800a1fe:	1a9b      	subgt	r3, r3, r2
 800a200:	18ed      	addgt	r5, r5, r3
 800a202:	2600      	movs	r6, #0
 800a204:	341a      	adds	r4, #26
 800a206:	42b5      	cmp	r5, r6
 800a208:	d11a      	bne.n	800a240 <_printf_common+0xc8>
 800a20a:	2000      	movs	r0, #0
 800a20c:	e008      	b.n	800a220 <_printf_common+0xa8>
 800a20e:	2301      	movs	r3, #1
 800a210:	4652      	mov	r2, sl
 800a212:	4649      	mov	r1, r9
 800a214:	4638      	mov	r0, r7
 800a216:	47c0      	blx	r8
 800a218:	3001      	adds	r0, #1
 800a21a:	d103      	bne.n	800a224 <_printf_common+0xac>
 800a21c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a224:	3501      	adds	r5, #1
 800a226:	e7c6      	b.n	800a1b6 <_printf_common+0x3e>
 800a228:	18e1      	adds	r1, r4, r3
 800a22a:	1c5a      	adds	r2, r3, #1
 800a22c:	2030      	movs	r0, #48	; 0x30
 800a22e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a232:	4422      	add	r2, r4
 800a234:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a238:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a23c:	3302      	adds	r3, #2
 800a23e:	e7c7      	b.n	800a1d0 <_printf_common+0x58>
 800a240:	2301      	movs	r3, #1
 800a242:	4622      	mov	r2, r4
 800a244:	4649      	mov	r1, r9
 800a246:	4638      	mov	r0, r7
 800a248:	47c0      	blx	r8
 800a24a:	3001      	adds	r0, #1
 800a24c:	d0e6      	beq.n	800a21c <_printf_common+0xa4>
 800a24e:	3601      	adds	r6, #1
 800a250:	e7d9      	b.n	800a206 <_printf_common+0x8e>
	...

0800a254 <_printf_i>:
 800a254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a258:	460c      	mov	r4, r1
 800a25a:	4691      	mov	r9, r2
 800a25c:	7e27      	ldrb	r7, [r4, #24]
 800a25e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a260:	2f78      	cmp	r7, #120	; 0x78
 800a262:	4680      	mov	r8, r0
 800a264:	469a      	mov	sl, r3
 800a266:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a26a:	d807      	bhi.n	800a27c <_printf_i+0x28>
 800a26c:	2f62      	cmp	r7, #98	; 0x62
 800a26e:	d80a      	bhi.n	800a286 <_printf_i+0x32>
 800a270:	2f00      	cmp	r7, #0
 800a272:	f000 80d8 	beq.w	800a426 <_printf_i+0x1d2>
 800a276:	2f58      	cmp	r7, #88	; 0x58
 800a278:	f000 80a3 	beq.w	800a3c2 <_printf_i+0x16e>
 800a27c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a280:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a284:	e03a      	b.n	800a2fc <_printf_i+0xa8>
 800a286:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a28a:	2b15      	cmp	r3, #21
 800a28c:	d8f6      	bhi.n	800a27c <_printf_i+0x28>
 800a28e:	a001      	add	r0, pc, #4	; (adr r0, 800a294 <_printf_i+0x40>)
 800a290:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a294:	0800a2ed 	.word	0x0800a2ed
 800a298:	0800a301 	.word	0x0800a301
 800a29c:	0800a27d 	.word	0x0800a27d
 800a2a0:	0800a27d 	.word	0x0800a27d
 800a2a4:	0800a27d 	.word	0x0800a27d
 800a2a8:	0800a27d 	.word	0x0800a27d
 800a2ac:	0800a301 	.word	0x0800a301
 800a2b0:	0800a27d 	.word	0x0800a27d
 800a2b4:	0800a27d 	.word	0x0800a27d
 800a2b8:	0800a27d 	.word	0x0800a27d
 800a2bc:	0800a27d 	.word	0x0800a27d
 800a2c0:	0800a40d 	.word	0x0800a40d
 800a2c4:	0800a331 	.word	0x0800a331
 800a2c8:	0800a3ef 	.word	0x0800a3ef
 800a2cc:	0800a27d 	.word	0x0800a27d
 800a2d0:	0800a27d 	.word	0x0800a27d
 800a2d4:	0800a42f 	.word	0x0800a42f
 800a2d8:	0800a27d 	.word	0x0800a27d
 800a2dc:	0800a331 	.word	0x0800a331
 800a2e0:	0800a27d 	.word	0x0800a27d
 800a2e4:	0800a27d 	.word	0x0800a27d
 800a2e8:	0800a3f7 	.word	0x0800a3f7
 800a2ec:	680b      	ldr	r3, [r1, #0]
 800a2ee:	1d1a      	adds	r2, r3, #4
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	600a      	str	r2, [r1, #0]
 800a2f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a2f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e0a3      	b.n	800a448 <_printf_i+0x1f4>
 800a300:	6825      	ldr	r5, [r4, #0]
 800a302:	6808      	ldr	r0, [r1, #0]
 800a304:	062e      	lsls	r6, r5, #24
 800a306:	f100 0304 	add.w	r3, r0, #4
 800a30a:	d50a      	bpl.n	800a322 <_printf_i+0xce>
 800a30c:	6805      	ldr	r5, [r0, #0]
 800a30e:	600b      	str	r3, [r1, #0]
 800a310:	2d00      	cmp	r5, #0
 800a312:	da03      	bge.n	800a31c <_printf_i+0xc8>
 800a314:	232d      	movs	r3, #45	; 0x2d
 800a316:	426d      	negs	r5, r5
 800a318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a31c:	485e      	ldr	r0, [pc, #376]	; (800a498 <_printf_i+0x244>)
 800a31e:	230a      	movs	r3, #10
 800a320:	e019      	b.n	800a356 <_printf_i+0x102>
 800a322:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a326:	6805      	ldr	r5, [r0, #0]
 800a328:	600b      	str	r3, [r1, #0]
 800a32a:	bf18      	it	ne
 800a32c:	b22d      	sxthne	r5, r5
 800a32e:	e7ef      	b.n	800a310 <_printf_i+0xbc>
 800a330:	680b      	ldr	r3, [r1, #0]
 800a332:	6825      	ldr	r5, [r4, #0]
 800a334:	1d18      	adds	r0, r3, #4
 800a336:	6008      	str	r0, [r1, #0]
 800a338:	0628      	lsls	r0, r5, #24
 800a33a:	d501      	bpl.n	800a340 <_printf_i+0xec>
 800a33c:	681d      	ldr	r5, [r3, #0]
 800a33e:	e002      	b.n	800a346 <_printf_i+0xf2>
 800a340:	0669      	lsls	r1, r5, #25
 800a342:	d5fb      	bpl.n	800a33c <_printf_i+0xe8>
 800a344:	881d      	ldrh	r5, [r3, #0]
 800a346:	4854      	ldr	r0, [pc, #336]	; (800a498 <_printf_i+0x244>)
 800a348:	2f6f      	cmp	r7, #111	; 0x6f
 800a34a:	bf0c      	ite	eq
 800a34c:	2308      	moveq	r3, #8
 800a34e:	230a      	movne	r3, #10
 800a350:	2100      	movs	r1, #0
 800a352:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a356:	6866      	ldr	r6, [r4, #4]
 800a358:	60a6      	str	r6, [r4, #8]
 800a35a:	2e00      	cmp	r6, #0
 800a35c:	bfa2      	ittt	ge
 800a35e:	6821      	ldrge	r1, [r4, #0]
 800a360:	f021 0104 	bicge.w	r1, r1, #4
 800a364:	6021      	strge	r1, [r4, #0]
 800a366:	b90d      	cbnz	r5, 800a36c <_printf_i+0x118>
 800a368:	2e00      	cmp	r6, #0
 800a36a:	d04d      	beq.n	800a408 <_printf_i+0x1b4>
 800a36c:	4616      	mov	r6, r2
 800a36e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a372:	fb03 5711 	mls	r7, r3, r1, r5
 800a376:	5dc7      	ldrb	r7, [r0, r7]
 800a378:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a37c:	462f      	mov	r7, r5
 800a37e:	42bb      	cmp	r3, r7
 800a380:	460d      	mov	r5, r1
 800a382:	d9f4      	bls.n	800a36e <_printf_i+0x11a>
 800a384:	2b08      	cmp	r3, #8
 800a386:	d10b      	bne.n	800a3a0 <_printf_i+0x14c>
 800a388:	6823      	ldr	r3, [r4, #0]
 800a38a:	07df      	lsls	r7, r3, #31
 800a38c:	d508      	bpl.n	800a3a0 <_printf_i+0x14c>
 800a38e:	6923      	ldr	r3, [r4, #16]
 800a390:	6861      	ldr	r1, [r4, #4]
 800a392:	4299      	cmp	r1, r3
 800a394:	bfde      	ittt	le
 800a396:	2330      	movle	r3, #48	; 0x30
 800a398:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a39c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a3a0:	1b92      	subs	r2, r2, r6
 800a3a2:	6122      	str	r2, [r4, #16]
 800a3a4:	f8cd a000 	str.w	sl, [sp]
 800a3a8:	464b      	mov	r3, r9
 800a3aa:	aa03      	add	r2, sp, #12
 800a3ac:	4621      	mov	r1, r4
 800a3ae:	4640      	mov	r0, r8
 800a3b0:	f7ff fee2 	bl	800a178 <_printf_common>
 800a3b4:	3001      	adds	r0, #1
 800a3b6:	d14c      	bne.n	800a452 <_printf_i+0x1fe>
 800a3b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3bc:	b004      	add	sp, #16
 800a3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3c2:	4835      	ldr	r0, [pc, #212]	; (800a498 <_printf_i+0x244>)
 800a3c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a3c8:	6823      	ldr	r3, [r4, #0]
 800a3ca:	680e      	ldr	r6, [r1, #0]
 800a3cc:	061f      	lsls	r7, r3, #24
 800a3ce:	f856 5b04 	ldr.w	r5, [r6], #4
 800a3d2:	600e      	str	r6, [r1, #0]
 800a3d4:	d514      	bpl.n	800a400 <_printf_i+0x1ac>
 800a3d6:	07d9      	lsls	r1, r3, #31
 800a3d8:	bf44      	itt	mi
 800a3da:	f043 0320 	orrmi.w	r3, r3, #32
 800a3de:	6023      	strmi	r3, [r4, #0]
 800a3e0:	b91d      	cbnz	r5, 800a3ea <_printf_i+0x196>
 800a3e2:	6823      	ldr	r3, [r4, #0]
 800a3e4:	f023 0320 	bic.w	r3, r3, #32
 800a3e8:	6023      	str	r3, [r4, #0]
 800a3ea:	2310      	movs	r3, #16
 800a3ec:	e7b0      	b.n	800a350 <_printf_i+0xfc>
 800a3ee:	6823      	ldr	r3, [r4, #0]
 800a3f0:	f043 0320 	orr.w	r3, r3, #32
 800a3f4:	6023      	str	r3, [r4, #0]
 800a3f6:	2378      	movs	r3, #120	; 0x78
 800a3f8:	4828      	ldr	r0, [pc, #160]	; (800a49c <_printf_i+0x248>)
 800a3fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3fe:	e7e3      	b.n	800a3c8 <_printf_i+0x174>
 800a400:	065e      	lsls	r6, r3, #25
 800a402:	bf48      	it	mi
 800a404:	b2ad      	uxthmi	r5, r5
 800a406:	e7e6      	b.n	800a3d6 <_printf_i+0x182>
 800a408:	4616      	mov	r6, r2
 800a40a:	e7bb      	b.n	800a384 <_printf_i+0x130>
 800a40c:	680b      	ldr	r3, [r1, #0]
 800a40e:	6826      	ldr	r6, [r4, #0]
 800a410:	6960      	ldr	r0, [r4, #20]
 800a412:	1d1d      	adds	r5, r3, #4
 800a414:	600d      	str	r5, [r1, #0]
 800a416:	0635      	lsls	r5, r6, #24
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	d501      	bpl.n	800a420 <_printf_i+0x1cc>
 800a41c:	6018      	str	r0, [r3, #0]
 800a41e:	e002      	b.n	800a426 <_printf_i+0x1d2>
 800a420:	0671      	lsls	r1, r6, #25
 800a422:	d5fb      	bpl.n	800a41c <_printf_i+0x1c8>
 800a424:	8018      	strh	r0, [r3, #0]
 800a426:	2300      	movs	r3, #0
 800a428:	6123      	str	r3, [r4, #16]
 800a42a:	4616      	mov	r6, r2
 800a42c:	e7ba      	b.n	800a3a4 <_printf_i+0x150>
 800a42e:	680b      	ldr	r3, [r1, #0]
 800a430:	1d1a      	adds	r2, r3, #4
 800a432:	600a      	str	r2, [r1, #0]
 800a434:	681e      	ldr	r6, [r3, #0]
 800a436:	6862      	ldr	r2, [r4, #4]
 800a438:	2100      	movs	r1, #0
 800a43a:	4630      	mov	r0, r6
 800a43c:	f7f5 fed0 	bl	80001e0 <memchr>
 800a440:	b108      	cbz	r0, 800a446 <_printf_i+0x1f2>
 800a442:	1b80      	subs	r0, r0, r6
 800a444:	6060      	str	r0, [r4, #4]
 800a446:	6863      	ldr	r3, [r4, #4]
 800a448:	6123      	str	r3, [r4, #16]
 800a44a:	2300      	movs	r3, #0
 800a44c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a450:	e7a8      	b.n	800a3a4 <_printf_i+0x150>
 800a452:	6923      	ldr	r3, [r4, #16]
 800a454:	4632      	mov	r2, r6
 800a456:	4649      	mov	r1, r9
 800a458:	4640      	mov	r0, r8
 800a45a:	47d0      	blx	sl
 800a45c:	3001      	adds	r0, #1
 800a45e:	d0ab      	beq.n	800a3b8 <_printf_i+0x164>
 800a460:	6823      	ldr	r3, [r4, #0]
 800a462:	079b      	lsls	r3, r3, #30
 800a464:	d413      	bmi.n	800a48e <_printf_i+0x23a>
 800a466:	68e0      	ldr	r0, [r4, #12]
 800a468:	9b03      	ldr	r3, [sp, #12]
 800a46a:	4298      	cmp	r0, r3
 800a46c:	bfb8      	it	lt
 800a46e:	4618      	movlt	r0, r3
 800a470:	e7a4      	b.n	800a3bc <_printf_i+0x168>
 800a472:	2301      	movs	r3, #1
 800a474:	4632      	mov	r2, r6
 800a476:	4649      	mov	r1, r9
 800a478:	4640      	mov	r0, r8
 800a47a:	47d0      	blx	sl
 800a47c:	3001      	adds	r0, #1
 800a47e:	d09b      	beq.n	800a3b8 <_printf_i+0x164>
 800a480:	3501      	adds	r5, #1
 800a482:	68e3      	ldr	r3, [r4, #12]
 800a484:	9903      	ldr	r1, [sp, #12]
 800a486:	1a5b      	subs	r3, r3, r1
 800a488:	42ab      	cmp	r3, r5
 800a48a:	dcf2      	bgt.n	800a472 <_printf_i+0x21e>
 800a48c:	e7eb      	b.n	800a466 <_printf_i+0x212>
 800a48e:	2500      	movs	r5, #0
 800a490:	f104 0619 	add.w	r6, r4, #25
 800a494:	e7f5      	b.n	800a482 <_printf_i+0x22e>
 800a496:	bf00      	nop
 800a498:	0800b249 	.word	0x0800b249
 800a49c:	0800b25a 	.word	0x0800b25a

0800a4a0 <memmove>:
 800a4a0:	4288      	cmp	r0, r1
 800a4a2:	b510      	push	{r4, lr}
 800a4a4:	eb01 0402 	add.w	r4, r1, r2
 800a4a8:	d902      	bls.n	800a4b0 <memmove+0x10>
 800a4aa:	4284      	cmp	r4, r0
 800a4ac:	4623      	mov	r3, r4
 800a4ae:	d807      	bhi.n	800a4c0 <memmove+0x20>
 800a4b0:	1e43      	subs	r3, r0, #1
 800a4b2:	42a1      	cmp	r1, r4
 800a4b4:	d008      	beq.n	800a4c8 <memmove+0x28>
 800a4b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4be:	e7f8      	b.n	800a4b2 <memmove+0x12>
 800a4c0:	4402      	add	r2, r0
 800a4c2:	4601      	mov	r1, r0
 800a4c4:	428a      	cmp	r2, r1
 800a4c6:	d100      	bne.n	800a4ca <memmove+0x2a>
 800a4c8:	bd10      	pop	{r4, pc}
 800a4ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a4d2:	e7f7      	b.n	800a4c4 <memmove+0x24>

0800a4d4 <_free_r>:
 800a4d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4d6:	2900      	cmp	r1, #0
 800a4d8:	d048      	beq.n	800a56c <_free_r+0x98>
 800a4da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4de:	9001      	str	r0, [sp, #4]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	f1a1 0404 	sub.w	r4, r1, #4
 800a4e6:	bfb8      	it	lt
 800a4e8:	18e4      	addlt	r4, r4, r3
 800a4ea:	f000 f8d3 	bl	800a694 <__malloc_lock>
 800a4ee:	4a20      	ldr	r2, [pc, #128]	; (800a570 <_free_r+0x9c>)
 800a4f0:	9801      	ldr	r0, [sp, #4]
 800a4f2:	6813      	ldr	r3, [r2, #0]
 800a4f4:	4615      	mov	r5, r2
 800a4f6:	b933      	cbnz	r3, 800a506 <_free_r+0x32>
 800a4f8:	6063      	str	r3, [r4, #4]
 800a4fa:	6014      	str	r4, [r2, #0]
 800a4fc:	b003      	add	sp, #12
 800a4fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a502:	f000 b8cd 	b.w	800a6a0 <__malloc_unlock>
 800a506:	42a3      	cmp	r3, r4
 800a508:	d90b      	bls.n	800a522 <_free_r+0x4e>
 800a50a:	6821      	ldr	r1, [r4, #0]
 800a50c:	1862      	adds	r2, r4, r1
 800a50e:	4293      	cmp	r3, r2
 800a510:	bf04      	itt	eq
 800a512:	681a      	ldreq	r2, [r3, #0]
 800a514:	685b      	ldreq	r3, [r3, #4]
 800a516:	6063      	str	r3, [r4, #4]
 800a518:	bf04      	itt	eq
 800a51a:	1852      	addeq	r2, r2, r1
 800a51c:	6022      	streq	r2, [r4, #0]
 800a51e:	602c      	str	r4, [r5, #0]
 800a520:	e7ec      	b.n	800a4fc <_free_r+0x28>
 800a522:	461a      	mov	r2, r3
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	b10b      	cbz	r3, 800a52c <_free_r+0x58>
 800a528:	42a3      	cmp	r3, r4
 800a52a:	d9fa      	bls.n	800a522 <_free_r+0x4e>
 800a52c:	6811      	ldr	r1, [r2, #0]
 800a52e:	1855      	adds	r5, r2, r1
 800a530:	42a5      	cmp	r5, r4
 800a532:	d10b      	bne.n	800a54c <_free_r+0x78>
 800a534:	6824      	ldr	r4, [r4, #0]
 800a536:	4421      	add	r1, r4
 800a538:	1854      	adds	r4, r2, r1
 800a53a:	42a3      	cmp	r3, r4
 800a53c:	6011      	str	r1, [r2, #0]
 800a53e:	d1dd      	bne.n	800a4fc <_free_r+0x28>
 800a540:	681c      	ldr	r4, [r3, #0]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	6053      	str	r3, [r2, #4]
 800a546:	4421      	add	r1, r4
 800a548:	6011      	str	r1, [r2, #0]
 800a54a:	e7d7      	b.n	800a4fc <_free_r+0x28>
 800a54c:	d902      	bls.n	800a554 <_free_r+0x80>
 800a54e:	230c      	movs	r3, #12
 800a550:	6003      	str	r3, [r0, #0]
 800a552:	e7d3      	b.n	800a4fc <_free_r+0x28>
 800a554:	6825      	ldr	r5, [r4, #0]
 800a556:	1961      	adds	r1, r4, r5
 800a558:	428b      	cmp	r3, r1
 800a55a:	bf04      	itt	eq
 800a55c:	6819      	ldreq	r1, [r3, #0]
 800a55e:	685b      	ldreq	r3, [r3, #4]
 800a560:	6063      	str	r3, [r4, #4]
 800a562:	bf04      	itt	eq
 800a564:	1949      	addeq	r1, r1, r5
 800a566:	6021      	streq	r1, [r4, #0]
 800a568:	6054      	str	r4, [r2, #4]
 800a56a:	e7c7      	b.n	800a4fc <_free_r+0x28>
 800a56c:	b003      	add	sp, #12
 800a56e:	bd30      	pop	{r4, r5, pc}
 800a570:	200049d8 	.word	0x200049d8

0800a574 <_malloc_r>:
 800a574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a576:	1ccd      	adds	r5, r1, #3
 800a578:	f025 0503 	bic.w	r5, r5, #3
 800a57c:	3508      	adds	r5, #8
 800a57e:	2d0c      	cmp	r5, #12
 800a580:	bf38      	it	cc
 800a582:	250c      	movcc	r5, #12
 800a584:	2d00      	cmp	r5, #0
 800a586:	4606      	mov	r6, r0
 800a588:	db01      	blt.n	800a58e <_malloc_r+0x1a>
 800a58a:	42a9      	cmp	r1, r5
 800a58c:	d903      	bls.n	800a596 <_malloc_r+0x22>
 800a58e:	230c      	movs	r3, #12
 800a590:	6033      	str	r3, [r6, #0]
 800a592:	2000      	movs	r0, #0
 800a594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a596:	f000 f87d 	bl	800a694 <__malloc_lock>
 800a59a:	4921      	ldr	r1, [pc, #132]	; (800a620 <_malloc_r+0xac>)
 800a59c:	680a      	ldr	r2, [r1, #0]
 800a59e:	4614      	mov	r4, r2
 800a5a0:	b99c      	cbnz	r4, 800a5ca <_malloc_r+0x56>
 800a5a2:	4f20      	ldr	r7, [pc, #128]	; (800a624 <_malloc_r+0xb0>)
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	b923      	cbnz	r3, 800a5b2 <_malloc_r+0x3e>
 800a5a8:	4621      	mov	r1, r4
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	f000 f862 	bl	800a674 <_sbrk_r>
 800a5b0:	6038      	str	r0, [r7, #0]
 800a5b2:	4629      	mov	r1, r5
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	f000 f85d 	bl	800a674 <_sbrk_r>
 800a5ba:	1c43      	adds	r3, r0, #1
 800a5bc:	d123      	bne.n	800a606 <_malloc_r+0x92>
 800a5be:	230c      	movs	r3, #12
 800a5c0:	6033      	str	r3, [r6, #0]
 800a5c2:	4630      	mov	r0, r6
 800a5c4:	f000 f86c 	bl	800a6a0 <__malloc_unlock>
 800a5c8:	e7e3      	b.n	800a592 <_malloc_r+0x1e>
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	1b5b      	subs	r3, r3, r5
 800a5ce:	d417      	bmi.n	800a600 <_malloc_r+0x8c>
 800a5d0:	2b0b      	cmp	r3, #11
 800a5d2:	d903      	bls.n	800a5dc <_malloc_r+0x68>
 800a5d4:	6023      	str	r3, [r4, #0]
 800a5d6:	441c      	add	r4, r3
 800a5d8:	6025      	str	r5, [r4, #0]
 800a5da:	e004      	b.n	800a5e6 <_malloc_r+0x72>
 800a5dc:	6863      	ldr	r3, [r4, #4]
 800a5de:	42a2      	cmp	r2, r4
 800a5e0:	bf0c      	ite	eq
 800a5e2:	600b      	streq	r3, [r1, #0]
 800a5e4:	6053      	strne	r3, [r2, #4]
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	f000 f85a 	bl	800a6a0 <__malloc_unlock>
 800a5ec:	f104 000b 	add.w	r0, r4, #11
 800a5f0:	1d23      	adds	r3, r4, #4
 800a5f2:	f020 0007 	bic.w	r0, r0, #7
 800a5f6:	1ac2      	subs	r2, r0, r3
 800a5f8:	d0cc      	beq.n	800a594 <_malloc_r+0x20>
 800a5fa:	1a1b      	subs	r3, r3, r0
 800a5fc:	50a3      	str	r3, [r4, r2]
 800a5fe:	e7c9      	b.n	800a594 <_malloc_r+0x20>
 800a600:	4622      	mov	r2, r4
 800a602:	6864      	ldr	r4, [r4, #4]
 800a604:	e7cc      	b.n	800a5a0 <_malloc_r+0x2c>
 800a606:	1cc4      	adds	r4, r0, #3
 800a608:	f024 0403 	bic.w	r4, r4, #3
 800a60c:	42a0      	cmp	r0, r4
 800a60e:	d0e3      	beq.n	800a5d8 <_malloc_r+0x64>
 800a610:	1a21      	subs	r1, r4, r0
 800a612:	4630      	mov	r0, r6
 800a614:	f000 f82e 	bl	800a674 <_sbrk_r>
 800a618:	3001      	adds	r0, #1
 800a61a:	d1dd      	bne.n	800a5d8 <_malloc_r+0x64>
 800a61c:	e7cf      	b.n	800a5be <_malloc_r+0x4a>
 800a61e:	bf00      	nop
 800a620:	200049d8 	.word	0x200049d8
 800a624:	200049dc 	.word	0x200049dc

0800a628 <_realloc_r>:
 800a628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a62a:	4607      	mov	r7, r0
 800a62c:	4614      	mov	r4, r2
 800a62e:	460e      	mov	r6, r1
 800a630:	b921      	cbnz	r1, 800a63c <_realloc_r+0x14>
 800a632:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a636:	4611      	mov	r1, r2
 800a638:	f7ff bf9c 	b.w	800a574 <_malloc_r>
 800a63c:	b922      	cbnz	r2, 800a648 <_realloc_r+0x20>
 800a63e:	f7ff ff49 	bl	800a4d4 <_free_r>
 800a642:	4625      	mov	r5, r4
 800a644:	4628      	mov	r0, r5
 800a646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a648:	f000 f830 	bl	800a6ac <_malloc_usable_size_r>
 800a64c:	42a0      	cmp	r0, r4
 800a64e:	d20f      	bcs.n	800a670 <_realloc_r+0x48>
 800a650:	4621      	mov	r1, r4
 800a652:	4638      	mov	r0, r7
 800a654:	f7ff ff8e 	bl	800a574 <_malloc_r>
 800a658:	4605      	mov	r5, r0
 800a65a:	2800      	cmp	r0, #0
 800a65c:	d0f2      	beq.n	800a644 <_realloc_r+0x1c>
 800a65e:	4631      	mov	r1, r6
 800a660:	4622      	mov	r2, r4
 800a662:	f7ff fbf7 	bl	8009e54 <memcpy>
 800a666:	4631      	mov	r1, r6
 800a668:	4638      	mov	r0, r7
 800a66a:	f7ff ff33 	bl	800a4d4 <_free_r>
 800a66e:	e7e9      	b.n	800a644 <_realloc_r+0x1c>
 800a670:	4635      	mov	r5, r6
 800a672:	e7e7      	b.n	800a644 <_realloc_r+0x1c>

0800a674 <_sbrk_r>:
 800a674:	b538      	push	{r3, r4, r5, lr}
 800a676:	4d06      	ldr	r5, [pc, #24]	; (800a690 <_sbrk_r+0x1c>)
 800a678:	2300      	movs	r3, #0
 800a67a:	4604      	mov	r4, r0
 800a67c:	4608      	mov	r0, r1
 800a67e:	602b      	str	r3, [r5, #0]
 800a680:	f7f8 fc00 	bl	8002e84 <_sbrk>
 800a684:	1c43      	adds	r3, r0, #1
 800a686:	d102      	bne.n	800a68e <_sbrk_r+0x1a>
 800a688:	682b      	ldr	r3, [r5, #0]
 800a68a:	b103      	cbz	r3, 800a68e <_sbrk_r+0x1a>
 800a68c:	6023      	str	r3, [r4, #0]
 800a68e:	bd38      	pop	{r3, r4, r5, pc}
 800a690:	2000509c 	.word	0x2000509c

0800a694 <__malloc_lock>:
 800a694:	4801      	ldr	r0, [pc, #4]	; (800a69c <__malloc_lock+0x8>)
 800a696:	f000 b811 	b.w	800a6bc <__retarget_lock_acquire_recursive>
 800a69a:	bf00      	nop
 800a69c:	200050a4 	.word	0x200050a4

0800a6a0 <__malloc_unlock>:
 800a6a0:	4801      	ldr	r0, [pc, #4]	; (800a6a8 <__malloc_unlock+0x8>)
 800a6a2:	f000 b80c 	b.w	800a6be <__retarget_lock_release_recursive>
 800a6a6:	bf00      	nop
 800a6a8:	200050a4 	.word	0x200050a4

0800a6ac <_malloc_usable_size_r>:
 800a6ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6b0:	1f18      	subs	r0, r3, #4
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	bfbc      	itt	lt
 800a6b6:	580b      	ldrlt	r3, [r1, r0]
 800a6b8:	18c0      	addlt	r0, r0, r3
 800a6ba:	4770      	bx	lr

0800a6bc <__retarget_lock_acquire_recursive>:
 800a6bc:	4770      	bx	lr

0800a6be <__retarget_lock_release_recursive>:
 800a6be:	4770      	bx	lr

0800a6c0 <_init>:
 800a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c2:	bf00      	nop
 800a6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6c6:	bc08      	pop	{r3}
 800a6c8:	469e      	mov	lr, r3
 800a6ca:	4770      	bx	lr

0800a6cc <_fini>:
 800a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ce:	bf00      	nop
 800a6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6d2:	bc08      	pop	{r3}
 800a6d4:	469e      	mov	lr, r3
 800a6d6:	4770      	bx	lr
