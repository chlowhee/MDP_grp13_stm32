
MDP_grp13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bb8  0800a978  0800a978  0001a978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b530  0800b530  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800b530  0800b530  0001b530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b538  0800b538  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b538  0800b538  0001b538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b53c  0800b53c  0001b53c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00004fa4  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000501c  2000501c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d67a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003861  00000000  00000000  0003d722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e8  00000000  00000000  00040f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014c8  00000000  00000000  00042570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003fee  00000000  00000000  00043a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000178b9  00000000  00000000  00047a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5d0e  00000000  00000000  0005f2df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00134fed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006414  00000000  00000000  00135040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a95c 	.word	0x0800a95c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800a95c 	.word	0x0800a95c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <delay>:
uint16_t uDistCheck1 = 0; uDistCheck2 = 0; uDistFinal = 0;
uint8_t ultra[20];
/* UART */
uint8_t aRxBuffer[1];

void delay(uint16_t time){  //provide us delay
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <delay+0x30>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim4) < time);
 8000ef2:	bf00      	nop
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <delay+0x30>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d3f9      	bcc.n	8000ef4 <delay+0x14>
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20004a24 	.word	0x20004a24
 8000f14:	00000000 	.word	0x00000000

08000f18 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)		//For HCSR04_Read();
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	7f1b      	ldrb	r3, [r3, #28]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	f040 8083 	bne.w	8001030 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000f2a:	4b45      	ldr	r3, [pc, #276]	; (8001040 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d11a      	bne.n	8000f68 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000f32:	2100      	movs	r1, #0
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f003 fbad 	bl	8004694 <HAL_TIM_ReadCapturedValue>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4a41      	ldr	r2, [pc, #260]	; (8001044 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f3e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000f40:	4b3f      	ldr	r3, [pc, #252]	; (8001040 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	601a      	str	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6a1a      	ldr	r2, [r3, #32]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 020a 	bic.w	r2, r2, #10
 8000f54:	621a      	str	r2, [r3, #32]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6a1a      	ldr	r2, [r3, #32]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f042 0202 	orr.w	r2, r2, #2
 8000f64:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 8000f66:	e063      	b.n	8001030 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000f68:	4b35      	ldr	r3, [pc, #212]	; (8001040 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d15f      	bne.n	8001030 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000f70:	2100      	movs	r1, #0
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f003 fb8e 	bl	8004694 <HAL_TIM_ReadCapturedValue>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a33      	ldr	r2, [pc, #204]	; (8001048 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f7c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 8000f86:	4b30      	ldr	r3, [pc, #192]	; (8001048 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	4b2e      	ldr	r3, [pc, #184]	; (8001044 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d907      	bls.n	8000fa2 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000f92:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	4b2b      	ldr	r3, [pc, #172]	; (8001044 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	4a2b      	ldr	r2, [pc, #172]	; (800104c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	e00f      	b.n	8000fc2 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2) {
 8000fa2:	4b28      	ldr	r3, [pc, #160]	; (8001044 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	4b28      	ldr	r3, [pc, #160]	; (8001048 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d909      	bls.n	8000fc2 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000fae:	4b26      	ldr	r3, [pc, #152]	; (8001048 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	4b24      	ldr	r3, [pc, #144]	; (8001044 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000fbc:	33ff      	adds	r3, #255	; 0xff
 8000fbe:	4a23      	ldr	r2, [pc, #140]	; (800104c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000fc0:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000fc2:	4b22      	ldr	r3, [pc, #136]	; (800104c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fa9c 	bl	8000504 <__aeabi_ui2d>
 8000fcc:	a31a      	add	r3, pc, #104	; (adr r3, 8001038 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	f7ff fb11 	bl	80005f8 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fe6:	f7ff fc31 	bl	800084c <__aeabi_ddiv>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4610      	mov	r0, r2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f7ff fdd9 	bl	8000ba8 <__aeabi_d2uiz>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000ffc:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6a1a      	ldr	r2, [r3, #32]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 020a 	bic.w	r2, r2, #10
 8001012:	621a      	str	r2, [r3, #32]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6a12      	ldr	r2, [r2, #32]
 800101e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 0202 	bic.w	r2, r2, #2
 800102e:	60da      	str	r2, [r3, #12]
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	b020c49c 	.word	0xb020c49c
 800103c:	3fa16872 	.word	0x3fa16872
 8001040:	200000ac 	.word	0x200000ac
 8001044:	200000a0 	.word	0x200000a0
 8001048:	200000a4 	.word	0x200000a4
 800104c:	200000a8 	.word	0x200000a8
 8001050:	200000b0 	.word	0x200000b0
 8001054:	20004a24 	.word	0x20004a24

08001058 <HCSR04_Read>:

uint16_t HCSR04_Read (void)		//Read Ultrasonic Distance
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800105c:	2201      	movs	r2, #1
 800105e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001062:	480c      	ldr	r0, [pc, #48]	; (8001094 <HCSR04_Read+0x3c>)
 8001064:	f001 ff4c 	bl	8002f00 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8001068:	200a      	movs	r0, #10
 800106a:	f7ff ff39 	bl	8000ee0 <delay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001074:	4807      	ldr	r0, [pc, #28]	; (8001094 <HCSR04_Read+0x3c>)
 8001076:	f001 ff43 	bl	8002f00 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <HCSR04_Read+0x40>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <HCSR04_Read+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f042 0202 	orr.w	r2, r2, #2
 8001088:	60da      	str	r2, [r3, #12]
	return Distance;
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <HCSR04_Read+0x44>)
 800108c:	881b      	ldrh	r3, [r3, #0]
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40020c00 	.word	0x40020c00
 8001098:	20004a24 	.word	0x20004a24
 800109c:	200000b0 	.word	0x200000b0

080010a0 <ultraDistCheck>:

void ultraDistCheck (void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	uDistCheck1 = HCSR04_Read();
 80010a4:	f7ff ffd8 	bl	8001058 <HCSR04_Read>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b26      	ldr	r3, [pc, #152]	; (8001148 <ultraDistCheck+0xa8>)
 80010ae:	801a      	strh	r2, [r3, #0]
	HAL_Delay(100);
 80010b0:	2064      	movs	r0, #100	; 0x64
 80010b2:	f001 fbc1 	bl	8002838 <HAL_Delay>
	uDistCheck2 = HCSR04_Read();
 80010b6:	f7ff ffcf 	bl	8001058 <HCSR04_Read>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	4b23      	ldr	r3, [pc, #140]	; (800114c <ultraDistCheck+0xac>)
 80010c0:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 80010c2:	2064      	movs	r0, #100	; 0x64
 80010c4:	f001 fbb8 	bl	8002838 <HAL_Delay>

	while (uDistCheck1 - uDistCheck2 >= 5 || uDistCheck2 - uDistCheck1 >= 5) {
 80010c8:	e020      	b.n	800110c <ultraDistCheck+0x6c>
		uDistCheck1 = HCSR04_Read();
 80010ca:	f7ff ffc5 	bl	8001058 <HCSR04_Read>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <ultraDistCheck+0xa8>)
 80010d4:	801a      	strh	r2, [r3, #0]
		HAL_Delay(100);
 80010d6:	2064      	movs	r0, #100	; 0x64
 80010d8:	f001 fbae 	bl	8002838 <HAL_Delay>
		uDistCheck2 = HCSR04_Read();
 80010dc:	f7ff ffbc 	bl	8001058 <HCSR04_Read>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <ultraDistCheck+0xac>)
 80010e6:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 80010e8:	2064      	movs	r0, #100	; 0x64
 80010ea:	f001 fba5 	bl	8002838 <HAL_Delay>

		if (uDistCheck1 - uDistCheck2 < 5 || uDistCheck2 - uDistCheck1 < 5) {
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <ultraDistCheck+0xa8>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <ultraDistCheck+0xac>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	dd15      	ble.n	800112a <ultraDistCheck+0x8a>
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <ultraDistCheck+0xac>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a11      	ldr	r2, [pc, #68]	; (8001148 <ultraDistCheck+0xa8>)
 8001104:	8812      	ldrh	r2, [r2, #0]
 8001106:	1a9b      	subs	r3, r3, r2
 8001108:	2b04      	cmp	r3, #4
 800110a:	dd0e      	ble.n	800112a <ultraDistCheck+0x8a>
	while (uDistCheck1 - uDistCheck2 >= 5 || uDistCheck2 - uDistCheck1 >= 5) {
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <ultraDistCheck+0xa8>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <ultraDistCheck+0xac>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b04      	cmp	r3, #4
 800111a:	dcd6      	bgt.n	80010ca <ultraDistCheck+0x2a>
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <ultraDistCheck+0xac>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a09      	ldr	r2, [pc, #36]	; (8001148 <ultraDistCheck+0xa8>)
 8001122:	8812      	ldrh	r2, [r2, #0]
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	2b04      	cmp	r3, #4
 8001128:	dccf      	bgt.n	80010ca <ultraDistCheck+0x2a>
			break;
		}
	}
	uDistFinal = (uDistCheck1 + uDistCheck2)/2;
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <ultraDistCheck+0xa8>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <ultraDistCheck+0xac>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4413      	add	r3, r2
 8001136:	0fda      	lsrs	r2, r3, #31
 8001138:	4413      	add	r3, r2
 800113a:	105b      	asrs	r3, r3, #1
 800113c:	461a      	mov	r2, r3
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <ultraDistCheck+0xb0>)
 8001140:	601a      	str	r2, [r3, #0]
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200000b2 	.word	0x200000b2
 800114c:	200000b4 	.word	0x200000b4
 8001150:	200000b8 	.word	0x200000b8

08001154 <waitCmd>:

void waitCmd (void) {
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	while (*aRxBuffer == 'R') {
 8001158:	e004      	b.n	8001164 <waitCmd+0x10>
		HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 1);
 800115a:	2201      	movs	r2, #1
 800115c:	4905      	ldr	r1, [pc, #20]	; (8001174 <waitCmd+0x20>)
 800115e:	4806      	ldr	r0, [pc, #24]	; (8001178 <waitCmd+0x24>)
 8001160:	f004 f944 	bl	80053ec <HAL_UART_Receive_IT>
	while (*aRxBuffer == 'R') {
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <waitCmd+0x20>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b52      	cmp	r3, #82	; 0x52
 800116a:	d0f6      	beq.n	800115a <waitCmd+0x6>
	}
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20004b68 	.word	0x20004b68
 8001178:	20004a70 	.word	0x20004a70
 800117c:	00000000 	.word	0x00000000

08001180 <motorControl>:

//Master function for all motor functions
int motorControl(int speedL, int speedR, char dirL, char dirR, int turn, int time, double dist){
 8001180:	b5b0      	push	{r4, r5, r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6178      	str	r0, [r7, #20]
 8001188:	6139      	str	r1, [r7, #16]
 800118a:	4611      	mov	r1, r2
 800118c:	461a      	mov	r2, r3
 800118e:	ed87 0b00 	vstr	d0, [r7]
 8001192:	460b      	mov	r3, r1
 8001194:	73fb      	strb	r3, [r7, #15]
 8001196:	4613      	mov	r3, r2
 8001198:	73bb      	strb	r3, [r7, #14]

	//declaration
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);		//left encoder(MotorA) start
 800119a:	213c      	movs	r1, #60	; 0x3c
 800119c:	483c      	ldr	r0, [pc, #240]	; (8001290 <motorControl+0x110>)
 800119e:	f002 febd 	bl	8003f1c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		//right encoder(MotorB) start
 80011a2:	213c      	movs	r1, #60	; 0x3c
 80011a4:	483b      	ldr	r0, [pc, #236]	; (8001294 <motorControl+0x114>)
 80011a6:	f002 feb9 	bl	8003f1c <HAL_TIM_Encoder_Start>
	cntl1 = __HAL_TIM_GET_COUNTER(&htim2);
 80011aa:	4b39      	ldr	r3, [pc, #228]	; (8001290 <motorControl+0x110>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	4b39      	ldr	r3, [pc, #228]	; (8001298 <motorControl+0x118>)
 80011b4:	801a      	strh	r2, [r3, #0]
	cntr1 = __HAL_TIM_GET_COUNTER(&htim3);
 80011b6:	4b37      	ldr	r3, [pc, #220]	; (8001294 <motorControl+0x114>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	b21a      	sxth	r2, r3
 80011be:	4b37      	ldr	r3, [pc, #220]	; (800129c <motorControl+0x11c>)
 80011c0:	801a      	strh	r2, [r3, #0]
	tick = HAL_GetTick();
 80011c2:	f001 fb2d 	bl	8002820 <HAL_GetTick>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b35      	ldr	r3, [pc, #212]	; (80012a0 <motorControl+0x120>)
 80011cc:	601a      	str	r2, [r3, #0]
	double encDist = dist * 68;
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <motorControl+0x124>)
 80011d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011d8:	f7ff fa0e 	bl	80005f8 <__aeabi_dmul>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	e9c7 2308 	strd	r2, r3, [r7, #32]

	int currTime = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]

	//Select direction of motor//

	switch(dirL){
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	2b46      	cmp	r3, #70	; 0x46
 80011ec:	d002      	beq.n	80011f4 <motorControl+0x74>
 80011ee:	2b52      	cmp	r3, #82	; 0x52
 80011f0:	d00b      	beq.n	800120a <motorControl+0x8a>
 80011f2:	e015      	b.n	8001220 <motorControl+0xa0>
		case 'F':
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80011f4:	2201      	movs	r2, #1
 80011f6:	2108      	movs	r1, #8
 80011f8:	482b      	ldr	r0, [pc, #172]	; (80012a8 <motorControl+0x128>)
 80011fa:	f001 fe81 	bl	8002f00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	2104      	movs	r1, #4
 8001202:	4829      	ldr	r0, [pc, #164]	; (80012a8 <motorControl+0x128>)
 8001204:	f001 fe7c 	bl	8002f00 <HAL_GPIO_WritePin>
			break;
 8001208:	e00a      	b.n	8001220 <motorControl+0xa0>

		case 'R':
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	2108      	movs	r1, #8
 800120e:	4826      	ldr	r0, [pc, #152]	; (80012a8 <motorControl+0x128>)
 8001210:	f001 fe76 	bl	8002f00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	2104      	movs	r1, #4
 8001218:	4823      	ldr	r0, [pc, #140]	; (80012a8 <motorControl+0x128>)
 800121a:	f001 fe71 	bl	8002f00 <HAL_GPIO_WritePin>
			break;
 800121e:	bf00      	nop
	}

	switch(dirR){
 8001220:	7bbb      	ldrb	r3, [r7, #14]
 8001222:	2b46      	cmp	r3, #70	; 0x46
 8001224:	d002      	beq.n	800122c <motorControl+0xac>
 8001226:	2b52      	cmp	r3, #82	; 0x52
 8001228:	d00b      	beq.n	8001242 <motorControl+0xc2>
 800122a:	e015      	b.n	8001258 <motorControl+0xd8>
		case 'F':
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 800122c:	2201      	movs	r2, #1
 800122e:	2110      	movs	r1, #16
 8001230:	481d      	ldr	r0, [pc, #116]	; (80012a8 <motorControl+0x128>)
 8001232:	f001 fe65 	bl	8002f00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2120      	movs	r1, #32
 800123a:	481b      	ldr	r0, [pc, #108]	; (80012a8 <motorControl+0x128>)
 800123c:	f001 fe60 	bl	8002f00 <HAL_GPIO_WritePin>
			break;
 8001240:	e00a      	b.n	8001258 <motorControl+0xd8>

		case 'R':
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2110      	movs	r1, #16
 8001246:	4818      	ldr	r0, [pc, #96]	; (80012a8 <motorControl+0x128>)
 8001248:	f001 fe5a 	bl	8002f00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 800124c:	2201      	movs	r2, #1
 800124e:	2120      	movs	r1, #32
 8001250:	4815      	ldr	r0, [pc, #84]	; (80012a8 <motorControl+0x128>)
 8001252:	f001 fe55 	bl	8002f00 <HAL_GPIO_WritePin>
			break;
 8001256:	bf00      	nop
	}
	//End of motor direction selection//

	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, speedL*1.08);
 8001258:	6978      	ldr	r0, [r7, #20]
 800125a:	f7ff f963 	bl	8000524 <__aeabi_i2d>
 800125e:	a30a      	add	r3, pc, #40	; (adr r3, 8001288 <motorControl+0x108>)
 8001260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001264:	f7ff f9c8 	bl	80005f8 <__aeabi_dmul>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	490f      	ldr	r1, [pc, #60]	; (80012ac <motorControl+0x12c>)
 800126e:	680c      	ldr	r4, [r1, #0]
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f7ff fc98 	bl	8000ba8 <__aeabi_d2uiz>
 8001278:	4603      	mov	r3, r0
 800127a:	6363      	str	r3, [r4, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, speedR);
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <motorControl+0x12c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	639a      	str	r2, [r3, #56]	; 0x38


	while(currTime<time){
 8001284:	e221      	b.n	80016ca <motorControl+0x54a>
 8001286:	bf00      	nop
 8001288:	147ae148 	.word	0x147ae148
 800128c:	3ff147ae 	.word	0x3ff147ae
 8001290:	20004b6c 	.word	0x20004b6c
 8001294:	20004ad4 	.word	0x20004ad4
 8001298:	20004a6c 	.word	0x20004a6c
 800129c:	20004b64 	.word	0x20004b64
 80012a0:	2000009c 	.word	0x2000009c
 80012a4:	40510000 	.word	0x40510000
 80012a8:	40020000 	.word	0x40020000
 80012ac:	200049dc 	.word	0x200049dc
			cntl2 = __HAL_TIM_GET_COUNTER(&htim2);
 80012b0:	4baf      	ldr	r3, [pc, #700]	; (8001570 <motorControl+0x3f0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	4bae      	ldr	r3, [pc, #696]	; (8001574 <motorControl+0x3f4>)
 80012ba:	801a      	strh	r2, [r3, #0]
			cntr2 = __HAL_TIM_GET_COUNTER(&htim3);
 80012bc:	4bae      	ldr	r3, [pc, #696]	; (8001578 <motorControl+0x3f8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	b21a      	sxth	r2, r3
 80012c4:	4bad      	ldr	r3, [pc, #692]	; (800157c <motorControl+0x3fc>)
 80012c6:	801a      	strh	r2, [r3, #0]
			diffl = abs(cntl2);
 80012c8:	4baa      	ldr	r3, [pc, #680]	; (8001574 <motorControl+0x3f4>)
 80012ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	bfb8      	it	lt
 80012d2:	425b      	neglt	r3, r3
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	b21a      	sxth	r2, r3
 80012d8:	4ba9      	ldr	r3, [pc, #676]	; (8001580 <motorControl+0x400>)
 80012da:	801a      	strh	r2, [r3, #0]
			diffr =abs(cntr2);
 80012dc:	4ba7      	ldr	r3, [pc, #668]	; (800157c <motorControl+0x3fc>)
 80012de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	bfb8      	it	lt
 80012e6:	425b      	neglt	r3, r3
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	b21a      	sxth	r2, r3
 80012ec:	4ba5      	ldr	r3, [pc, #660]	; (8001584 <motorControl+0x404>)
 80012ee:	801a      	strh	r2, [r3, #0]
			diffr =abs(cntr2);
 80012f0:	4ba2      	ldr	r3, [pc, #648]	; (800157c <motorControl+0x3fc>)
 80012f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	bfb8      	it	lt
 80012fa:	425b      	neglt	r3, r3
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	b21a      	sxth	r2, r3
 8001300:	4ba0      	ldr	r3, [pc, #640]	; (8001584 <motorControl+0x404>)
 8001302:	801a      	strh	r2, [r3, #0]
			avg = abs((diffl+diffr)/2);
 8001304:	4b9e      	ldr	r3, [pc, #632]	; (8001580 <motorControl+0x400>)
 8001306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130a:	461a      	mov	r2, r3
 800130c:	4b9d      	ldr	r3, [pc, #628]	; (8001584 <motorControl+0x404>)
 800130e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001312:	4413      	add	r3, r2
 8001314:	0fda      	lsrs	r2, r3, #31
 8001316:	4413      	add	r3, r2
 8001318:	105b      	asrs	r3, r3, #1
 800131a:	2b00      	cmp	r3, #0
 800131c:	bfb8      	it	lt
 800131e:	425b      	neglt	r3, r3
 8001320:	b21a      	sxth	r2, r3
 8001322:	4b99      	ldr	r3, [pc, #612]	; (8001588 <motorControl+0x408>)
 8001324:	801a      	strh	r2, [r3, #0]
			sprintf(display,"Left:%5d\0", diffl/68);
 8001326:	4b96      	ldr	r3, [pc, #600]	; (8001580 <motorControl+0x400>)
 8001328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132c:	4a97      	ldr	r2, [pc, #604]	; (800158c <motorControl+0x40c>)
 800132e:	fb82 1203 	smull	r1, r2, r2, r3
 8001332:	1152      	asrs	r2, r2, #5
 8001334:	17db      	asrs	r3, r3, #31
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	b21b      	sxth	r3, r3
 800133a:	461a      	mov	r2, r3
 800133c:	4994      	ldr	r1, [pc, #592]	; (8001590 <motorControl+0x410>)
 800133e:	4895      	ldr	r0, [pc, #596]	; (8001594 <motorControl+0x414>)
 8001340:	f007 ff36 	bl	80091b0 <siprintf>
			OLED_ShowString(10,35,display);
 8001344:	4a93      	ldr	r2, [pc, #588]	; (8001594 <motorControl+0x414>)
 8001346:	2123      	movs	r1, #35	; 0x23
 8001348:	200a      	movs	r0, #10
 800134a:	f007 fe33 	bl	8008fb4 <OLED_ShowString>
			sprintf(display,"Right:%5d\0", diffr/68);
 800134e:	4b8d      	ldr	r3, [pc, #564]	; (8001584 <motorControl+0x404>)
 8001350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001354:	4a8d      	ldr	r2, [pc, #564]	; (800158c <motorControl+0x40c>)
 8001356:	fb82 1203 	smull	r1, r2, r2, r3
 800135a:	1152      	asrs	r2, r2, #5
 800135c:	17db      	asrs	r3, r3, #31
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	b21b      	sxth	r3, r3
 8001362:	461a      	mov	r2, r3
 8001364:	498c      	ldr	r1, [pc, #560]	; (8001598 <motorControl+0x418>)
 8001366:	488b      	ldr	r0, [pc, #556]	; (8001594 <motorControl+0x414>)
 8001368:	f007 ff22 	bl	80091b0 <siprintf>
			OLED_ShowString(10,50,display);
 800136c:	4a89      	ldr	r2, [pc, #548]	; (8001594 <motorControl+0x414>)
 800136e:	2132      	movs	r1, #50	; 0x32
 8001370:	200a      	movs	r0, #10
 8001372:	f007 fe1f 	bl	8008fb4 <OLED_ShowString>
			OLED_Refresh_Gram();
 8001376:	f007 fca9 	bl	8008ccc <OLED_Refresh_Gram>

			if(avg>=encDist*pow(0.8,30/dist)&&turn==0){
 800137a:	4b83      	ldr	r3, [pc, #524]	; (8001588 <motorControl+0x408>)
 800137c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f8cf 	bl	8000524 <__aeabi_i2d>
 8001386:	4604      	mov	r4, r0
 8001388:	460d      	mov	r5, r1
 800138a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800138e:	f04f 0000 	mov.w	r0, #0
 8001392:	4982      	ldr	r1, [pc, #520]	; (800159c <motorControl+0x41c>)
 8001394:	f7ff fa5a 	bl	800084c <__aeabi_ddiv>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	ec43 2b17 	vmov	d7, r2, r3
 80013a0:	eeb0 1a47 	vmov.f32	s2, s14
 80013a4:	eef0 1a67 	vmov.f32	s3, s15
 80013a8:	ed9f 0b6d 	vldr	d0, [pc, #436]	; 8001560 <motorControl+0x3e0>
 80013ac:	f008 fb20 	bl	80099f0 <pow>
 80013b0:	ec51 0b10 	vmov	r0, r1, d0
 80013b4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013b8:	f7ff f91e 	bl	80005f8 <__aeabi_dmul>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4620      	mov	r0, r4
 80013c2:	4629      	mov	r1, r5
 80013c4:	f7ff fb9e 	bl	8000b04 <__aeabi_dcmpge>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d056      	beq.n	800147c <motorControl+0x2fc>
 80013ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d153      	bne.n	800147c <motorControl+0x2fc>
				speedL = speedL*pow(0.9,1+speedL/1000);
 80013d4:	6978      	ldr	r0, [r7, #20]
 80013d6:	f7ff f8a5 	bl	8000524 <__aeabi_i2d>
 80013da:	4604      	mov	r4, r0
 80013dc:	460d      	mov	r5, r1
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	4a6f      	ldr	r2, [pc, #444]	; (80015a0 <motorControl+0x420>)
 80013e2:	fb82 1203 	smull	r1, r2, r2, r3
 80013e6:	1192      	asrs	r2, r2, #6
 80013e8:	17db      	asrs	r3, r3, #31
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	3301      	adds	r3, #1
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f898 	bl	8000524 <__aeabi_i2d>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	ec43 2b11 	vmov	d1, r2, r3
 80013fc:	ed9f 0b5a 	vldr	d0, [pc, #360]	; 8001568 <motorControl+0x3e8>
 8001400:	f008 faf6 	bl	80099f0 <pow>
 8001404:	ec53 2b10 	vmov	r2, r3, d0
 8001408:	4620      	mov	r0, r4
 800140a:	4629      	mov	r1, r5
 800140c:	f7ff f8f4 	bl	80005f8 <__aeabi_dmul>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	f7ff fb9e 	bl	8000b58 <__aeabi_d2iz>
 800141c:	4603      	mov	r3, r0
 800141e:	617b      	str	r3, [r7, #20]
				speedR = speedR*pow(0.9,1+speedR/1000);
 8001420:	6938      	ldr	r0, [r7, #16]
 8001422:	f7ff f87f 	bl	8000524 <__aeabi_i2d>
 8001426:	4604      	mov	r4, r0
 8001428:	460d      	mov	r5, r1
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4a5c      	ldr	r2, [pc, #368]	; (80015a0 <motorControl+0x420>)
 800142e:	fb82 1203 	smull	r1, r2, r2, r3
 8001432:	1192      	asrs	r2, r2, #6
 8001434:	17db      	asrs	r3, r3, #31
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	3301      	adds	r3, #1
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff f872 	bl	8000524 <__aeabi_i2d>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	ec43 2b11 	vmov	d1, r2, r3
 8001448:	ed9f 0b47 	vldr	d0, [pc, #284]	; 8001568 <motorControl+0x3e8>
 800144c:	f008 fad0 	bl	80099f0 <pow>
 8001450:	ec53 2b10 	vmov	r2, r3, d0
 8001454:	4620      	mov	r0, r4
 8001456:	4629      	mov	r1, r5
 8001458:	f7ff f8ce 	bl	80005f8 <__aeabi_dmul>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fb78 	bl	8000b58 <__aeabi_d2iz>
 8001468:	4603      	mov	r3, r0
 800146a:	613b      	str	r3, [r7, #16]
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, speedL);
 800146c:	4b4d      	ldr	r3, [pc, #308]	; (80015a4 <motorControl+0x424>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, speedR);
 8001474:	4b4b      	ldr	r3, [pc, #300]	; (80015a4 <motorControl+0x424>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	639a      	str	r2, [r3, #56]	; 0x38
			}
			if(avg>=encDist && turn==0 && dirL=='F'){
 800147c:	4b42      	ldr	r3, [pc, #264]	; (8001588 <motorControl+0x408>)
 800147e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f84e 	bl	8000524 <__aeabi_i2d>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001490:	f7ff fb2e 	bl	8000af0 <__aeabi_dcmple>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d029      	beq.n	80014ee <motorControl+0x36e>
 800149a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800149c:	2b00      	cmp	r3, #0
 800149e:	d126      	bne.n	80014ee <motorControl+0x36e>
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	2b46      	cmp	r3, #70	; 0x46
 80014a4:	d123      	bne.n	80014ee <motorControl+0x36e>
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2108      	movs	r1, #8
 80014aa:	483f      	ldr	r0, [pc, #252]	; (80015a8 <motorControl+0x428>)
 80014ac:	f001 fd28 	bl	8002f00 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	2104      	movs	r1, #4
 80014b4:	483c      	ldr	r0, [pc, #240]	; (80015a8 <motorControl+0x428>)
 80014b6:	f001 fd23 	bl	8002f00 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2110      	movs	r1, #16
 80014be:	483a      	ldr	r0, [pc, #232]	; (80015a8 <motorControl+0x428>)
 80014c0:	f001 fd1e 	bl	8002f00 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	2120      	movs	r1, #32
 80014c8:	4837      	ldr	r0, [pc, #220]	; (80015a8 <motorControl+0x428>)
 80014ca:	f001 fd19 	bl	8002f00 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 80014ce:	2064      	movs	r0, #100	; 0x64
 80014d0:	f001 f9b2 	bl	8002838 <HAL_Delay>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80014d4:	4b33      	ldr	r3, [pc, #204]	; (80015a4 <motorControl+0x424>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2200      	movs	r2, #0
 80014da:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 80014dc:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <motorControl+0x424>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2200      	movs	r2, #0
 80014e2:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(500);
 80014e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014e8:	f001 f9a6 	bl	8002838 <HAL_Delay>
				break;
 80014ec:	e0f4      	b.n	80016d8 <motorControl+0x558>
			}

			if(avg>=encDist && turn==0 && dirL=='R'){
 80014ee:	4b26      	ldr	r3, [pc, #152]	; (8001588 <motorControl+0x408>)
 80014f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f815 	bl	8000524 <__aeabi_i2d>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001502:	f7ff faf5 	bl	8000af0 <__aeabi_dcmple>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d04f      	beq.n	80015ac <motorControl+0x42c>
 800150c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800150e:	2b00      	cmp	r3, #0
 8001510:	d14c      	bne.n	80015ac <motorControl+0x42c>
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	2b52      	cmp	r3, #82	; 0x52
 8001516:	d149      	bne.n	80015ac <motorControl+0x42c>
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001518:	2201      	movs	r2, #1
 800151a:	2108      	movs	r1, #8
 800151c:	4822      	ldr	r0, [pc, #136]	; (80015a8 <motorControl+0x428>)
 800151e:	f001 fcef 	bl	8002f00 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	2104      	movs	r1, #4
 8001526:	4820      	ldr	r0, [pc, #128]	; (80015a8 <motorControl+0x428>)
 8001528:	f001 fcea 	bl	8002f00 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	2110      	movs	r1, #16
 8001530:	481d      	ldr	r0, [pc, #116]	; (80015a8 <motorControl+0x428>)
 8001532:	f001 fce5 	bl	8002f00 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	2120      	movs	r1, #32
 800153a:	481b      	ldr	r0, [pc, #108]	; (80015a8 <motorControl+0x428>)
 800153c:	f001 fce0 	bl	8002f00 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 8001540:	2064      	movs	r0, #100	; 0x64
 8001542:	f001 f979 	bl	8002838 <HAL_Delay>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <motorControl+0x424>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2200      	movs	r2, #0
 800154c:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <motorControl+0x424>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2200      	movs	r2, #0
 8001554:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(500);
 8001556:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800155a:	f001 f96d 	bl	8002838 <HAL_Delay>
				break;
 800155e:	e0bb      	b.n	80016d8 <motorControl+0x558>
 8001560:	9999999a 	.word	0x9999999a
 8001564:	3fe99999 	.word	0x3fe99999
 8001568:	cccccccd 	.word	0xcccccccd
 800156c:	3feccccc 	.word	0x3feccccc
 8001570:	20004b6c 	.word	0x20004b6c
 8001574:	20004abc 	.word	0x20004abc
 8001578:	20004ad4 	.word	0x20004ad4
 800157c:	200049d8 	.word	0x200049d8
 8001580:	20000094 	.word	0x20000094
 8001584:	20000096 	.word	0x20000096
 8001588:	20000098 	.word	0x20000098
 800158c:	78787879 	.word	0x78787879
 8001590:	0800a990 	.word	0x0800a990
 8001594:	20004ac0 	.word	0x20004ac0
 8001598:	0800a99c 	.word	0x0800a99c
 800159c:	403e0000 	.word	0x403e0000
 80015a0:	10624dd3 	.word	0x10624dd3
 80015a4:	200049dc 	.word	0x200049dc
 80015a8:	40020000 	.word	0x40020000
			}

			if((diffl>=encDist*0.7 || diffr>=encDist*0.8)&&turn==1){
 80015ac:	4b62      	ldr	r3, [pc, #392]	; (8001738 <motorControl+0x5b8>)
 80015ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ffb6 	bl	8000524 <__aeabi_i2d>
 80015b8:	4604      	mov	r4, r0
 80015ba:	460d      	mov	r5, r1
 80015bc:	a358      	add	r3, pc, #352	; (adr r3, 8001720 <motorControl+0x5a0>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80015c6:	f7ff f817 	bl	80005f8 <__aeabi_dmul>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4620      	mov	r0, r4
 80015d0:	4629      	mov	r1, r5
 80015d2:	f7ff fa97 	bl	8000b04 <__aeabi_dcmpge>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d117      	bne.n	800160c <motorControl+0x48c>
 80015dc:	4b57      	ldr	r3, [pc, #348]	; (800173c <motorControl+0x5bc>)
 80015de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ff9e 	bl	8000524 <__aeabi_i2d>
 80015e8:	4604      	mov	r4, r0
 80015ea:	460d      	mov	r5, r1
 80015ec:	a34e      	add	r3, pc, #312	; (adr r3, 8001728 <motorControl+0x5a8>)
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80015f6:	f7fe ffff 	bl	80005f8 <__aeabi_dmul>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4620      	mov	r0, r4
 8001600:	4629      	mov	r1, r5
 8001602:	f7ff fa7f 	bl	8000b04 <__aeabi_dcmpge>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d02a      	beq.n	8001662 <motorControl+0x4e2>
 800160c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800160e:	2b01      	cmp	r3, #1
 8001610:	d127      	bne.n	8001662 <motorControl+0x4e2>
				speedL = speedL*0.9;
 8001612:	6978      	ldr	r0, [r7, #20]
 8001614:	f7fe ff86 	bl	8000524 <__aeabi_i2d>
 8001618:	a345      	add	r3, pc, #276	; (adr r3, 8001730 <motorControl+0x5b0>)
 800161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161e:	f7fe ffeb 	bl	80005f8 <__aeabi_dmul>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff fa95 	bl	8000b58 <__aeabi_d2iz>
 800162e:	4603      	mov	r3, r0
 8001630:	617b      	str	r3, [r7, #20]
				speedR = speedR*0.9;
 8001632:	6938      	ldr	r0, [r7, #16]
 8001634:	f7fe ff76 	bl	8000524 <__aeabi_i2d>
 8001638:	a33d      	add	r3, pc, #244	; (adr r3, 8001730 <motorControl+0x5b0>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7fe ffdb 	bl	80005f8 <__aeabi_dmul>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	f7ff fa85 	bl	8000b58 <__aeabi_d2iz>
 800164e:	4603      	mov	r3, r0
 8001650:	613b      	str	r3, [r7, #16]
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, speedL);
 8001652:	4b3b      	ldr	r3, [pc, #236]	; (8001740 <motorControl+0x5c0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, speedR);
 800165a:	4b39      	ldr	r3, [pc, #228]	; (8001740 <motorControl+0x5c0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	639a      	str	r2, [r3, #56]	; 0x38
			}

			if((diffl>=encDist*0.9 || diffr>=encDist*0.9)&&turn==1){
 8001662:	4b35      	ldr	r3, [pc, #212]	; (8001738 <motorControl+0x5b8>)
 8001664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe ff5b 	bl	8000524 <__aeabi_i2d>
 800166e:	4604      	mov	r4, r0
 8001670:	460d      	mov	r5, r1
 8001672:	a32f      	add	r3, pc, #188	; (adr r3, 8001730 <motorControl+0x5b0>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800167c:	f7fe ffbc 	bl	80005f8 <__aeabi_dmul>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4620      	mov	r0, r4
 8001686:	4629      	mov	r1, r5
 8001688:	f7ff fa3c 	bl	8000b04 <__aeabi_dcmpge>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d118      	bne.n	80016c4 <motorControl+0x544>
 8001692:	4b2a      	ldr	r3, [pc, #168]	; (800173c <motorControl+0x5bc>)
 8001694:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe ff43 	bl	8000524 <__aeabi_i2d>
 800169e:	4604      	mov	r4, r0
 80016a0:	460d      	mov	r5, r1
 80016a2:	a323      	add	r3, pc, #140	; (adr r3, 8001730 <motorControl+0x5b0>)
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016ac:	f7fe ffa4 	bl	80005f8 <__aeabi_dmul>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4620      	mov	r0, r4
 80016b6:	4629      	mov	r1, r5
 80016b8:	f7ff fa24 	bl	8000b04 <__aeabi_dcmpge>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d100      	bne.n	80016c4 <motorControl+0x544>
 80016c2:	e002      	b.n	80016ca <motorControl+0x54a>
 80016c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d005      	beq.n	80016d6 <motorControl+0x556>
	while(currTime<time){
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016ce:	429a      	cmp	r2, r3
 80016d0:	f6ff adee 	blt.w	80012b0 <motorControl+0x130>
 80016d4:	e000      	b.n	80016d8 <motorControl+0x558>

				break;
 80016d6:	bf00      	nop
			}

		}
		__HAL_TIM_SET_COUNTER(&htim2,0);
 80016d8:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <motorControl+0x5c4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2200      	movs	r2, #0
 80016de:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim3,0);
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <motorControl+0x5c8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2200      	movs	r2, #0
 80016e6:	625a      	str	r2, [r3, #36]	; 0x24

		speedL=speedR=tick=diffl=diffr=0;
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <motorControl+0x5bc>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	801a      	strh	r2, [r3, #0]
 80016ee:	4b13      	ldr	r3, [pc, #76]	; (800173c <motorControl+0x5bc>)
 80016f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016f4:	4b10      	ldr	r3, [pc, #64]	; (8001738 <motorControl+0x5b8>)
 80016f6:	801a      	strh	r2, [r3, #0]
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <motorControl+0x5b8>)
 80016fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fe:	461a      	mov	r2, r3
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <motorControl+0x5cc>)
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <motorControl+0x5cc>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	617b      	str	r3, [r7, #20]
		OLED_Refresh_Gram();
 800170e:	f007 fadd 	bl	8008ccc <OLED_Refresh_Gram>
}
 8001712:	bf00      	nop
 8001714:	4618      	mov	r0, r3
 8001716:	3728      	adds	r7, #40	; 0x28
 8001718:	46bd      	mov	sp, r7
 800171a:	bdb0      	pop	{r4, r5, r7, pc}
 800171c:	f3af 8000 	nop.w
 8001720:	66666666 	.word	0x66666666
 8001724:	3fe66666 	.word	0x3fe66666
 8001728:	9999999a 	.word	0x9999999a
 800172c:	3fe99999 	.word	0x3fe99999
 8001730:	cccccccd 	.word	0xcccccccd
 8001734:	3feccccc 	.word	0x3feccccc
 8001738:	20000094 	.word	0x20000094
 800173c:	20000096 	.word	0x20000096
 8001740:	200049dc 	.word	0x200049dc
 8001744:	20004b6c 	.word	0x20004b6c
 8001748:	20004ad4 	.word	0x20004ad4
 800174c:	2000009c 	.word	0x2000009c

08001750 <Fleft>:

void Fleft(int deg){
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af02      	add	r7, sp, #8
 8001756:	6078      	str	r0, [r7, #4]
	double dist = 0.585 * deg;
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7fe fee3 	bl	8000524 <__aeabi_i2d>
 800175e:	a31f      	add	r3, pc, #124	; (adr r3, 80017dc <Fleft+0x8c>)
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	f7fe ff48 	bl	80005f8 <__aeabi_dmul>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	htim1.Instance->CCR4 = 56;
 8001770:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <Fleft+0x88>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2238      	movs	r2, #56	; 0x38
 8001776:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(500);
 8001778:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800177c:	f001 f85c 	bl	8002838 <HAL_Delay>
	motorControl(800, 4000, 'F', 'F', 1, 1000, dist);
 8001780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001784:	9301      	str	r3, [sp, #4]
 8001786:	2301      	movs	r3, #1
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	ed97 0b02 	vldr	d0, [r7, #8]
 800178e:	2346      	movs	r3, #70	; 0x46
 8001790:	2246      	movs	r2, #70	; 0x46
 8001792:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001796:	f44f 7048 	mov.w	r0, #800	; 0x320
 800179a:	f7ff fcf1 	bl	8001180 <motorControl>
	htim1.Instance->CCR4 = 74;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <Fleft+0x88>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	224a      	movs	r2, #74	; 0x4a
 80017a4:	641a      	str	r2, [r3, #64]	; 0x40
	motorControl(2000, 2000, 'F', 'F', 0, 1000, 13);
 80017a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	2300      	movs	r3, #0
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	ed9f 0b07 	vldr	d0, [pc, #28]	; 80017d0 <Fleft+0x80>
 80017b4:	2346      	movs	r3, #70	; 0x46
 80017b6:	2246      	movs	r2, #70	; 0x46
 80017b8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80017bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017c0:	f7ff fcde 	bl	8001180 <motorControl>
}
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	f3af 8000 	nop.w
 80017d0:	00000000 	.word	0x00000000
 80017d4:	402a0000 	.word	0x402a0000
 80017d8:	20004b1c 	.word	0x20004b1c
 80017dc:	eb851eb8 	.word	0xeb851eb8
 80017e0:	3fe2b851 	.word	0x3fe2b851

080017e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017e8:	f000 ffb4 	bl	8002754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ec:	f000 f840 	bl	8001870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017f0:	f000 faee 	bl	8001dd0 <MX_GPIO_Init>
  MX_TIM8_Init();
 80017f4:	f000 fa36 	bl	8001c64 <MX_TIM8_Init>
  MX_TIM2_Init();
 80017f8:	f000 f938 	bl	8001a6c <MX_TIM2_Init>
  MX_TIM1_Init();
 80017fc:	f000 f896 	bl	800192c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001800:	f000 f988 	bl	8001b14 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001804:	f000 f9da 	bl	8001bbc <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001808:	f000 fab8 	bl	8001d7c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800180c:	2100      	movs	r1, #0
 800180e:	480f      	ldr	r0, [pc, #60]	; (800184c <main+0x68>)
 8001810:	f002 f9b6 	bl	8003b80 <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 1);
 8001814:	2201      	movs	r2, #1
 8001816:	490e      	ldr	r1, [pc, #56]	; (8001850 <main+0x6c>)
 8001818:	480e      	ldr	r0, [pc, #56]	; (8001854 <main+0x70>)
 800181a:	f003 fde7 	bl	80053ec <HAL_UART_Receive_IT>
  OLED_Init();
 800181e:	f007 fbfb 	bl	8009018 <OLED_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001822:	f004 fcff 	bl	8006224 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LED_Toggle */
  LED_ToggleHandle = osThreadNew(StartDefaultTask, NULL, &LED_Toggle_attributes);
 8001826:	4a0c      	ldr	r2, [pc, #48]	; (8001858 <main+0x74>)
 8001828:	2100      	movs	r1, #0
 800182a:	480c      	ldr	r0, [pc, #48]	; (800185c <main+0x78>)
 800182c:	f004 fd44 	bl	80062b8 <osThreadNew>
 8001830:	4603      	mov	r3, r0
 8001832:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <main+0x7c>)
 8001834:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 8001836:	4a0b      	ldr	r2, [pc, #44]	; (8001864 <main+0x80>)
 8001838:	2100      	movs	r1, #0
 800183a:	480b      	ldr	r0, [pc, #44]	; (8001868 <main+0x84>)
 800183c:	f004 fd3c 	bl	80062b8 <osThreadNew>
 8001840:	4603      	mov	r3, r0
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <main+0x88>)
 8001844:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001846:	f004 fd11 	bl	800626c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800184a:	e7fe      	b.n	800184a <main+0x66>
 800184c:	20004a24 	.word	0x20004a24
 8001850:	20004b68 	.word	0x20004b68
 8001854:	20004a70 	.word	0x20004a70
 8001858:	0800a9f8 	.word	0x0800a9f8
 800185c:	08001f49 	.word	0x08001f49
 8001860:	20004ab4 	.word	0x20004ab4
 8001864:	0800aa1c 	.word	0x0800aa1c
 8001868:	08001fa9 	.word	0x08001fa9
 800186c:	20004ab8 	.word	0x20004ab8

08001870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b094      	sub	sp, #80	; 0x50
 8001874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001876:	f107 0320 	add.w	r3, r7, #32
 800187a:	2230      	movs	r2, #48	; 0x30
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f007 fc8e 	bl	80091a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001884:	f107 030c 	add.w	r3, r7, #12
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	4b22      	ldr	r3, [pc, #136]	; (8001924 <SystemClock_Config+0xb4>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	4a21      	ldr	r2, [pc, #132]	; (8001924 <SystemClock_Config+0xb4>)
 800189e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a2:	6413      	str	r3, [r2, #64]	; 0x40
 80018a4:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <SystemClock_Config+0xb4>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018b0:	2300      	movs	r3, #0
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <SystemClock_Config+0xb8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a1b      	ldr	r2, [pc, #108]	; (8001928 <SystemClock_Config+0xb8>)
 80018ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b19      	ldr	r3, [pc, #100]	; (8001928 <SystemClock_Config+0xb8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018cc:	2302      	movs	r3, #2
 80018ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d0:	2301      	movs	r3, #1
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018d4:	2310      	movs	r3, #16
 80018d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018d8:	2300      	movs	r3, #0
 80018da:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018dc:	f107 0320 	add.w	r3, r7, #32
 80018e0:	4618      	mov	r0, r3
 80018e2:	f001 fb4f 	bl	8002f84 <HAL_RCC_OscConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80018ec:	f000 fc78 	bl	80021e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f0:	230f      	movs	r3, #15
 80018f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018f4:	2300      	movs	r3, #0
 80018f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f001 fdb2 	bl	8003474 <HAL_RCC_ClockConfig>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001916:	f000 fc63 	bl	80021e0 <Error_Handler>
  }
}
 800191a:	bf00      	nop
 800191c:	3750      	adds	r7, #80	; 0x50
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	40007000 	.word	0x40007000

0800192c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b096      	sub	sp, #88	; 0x58
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001932:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001940:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800194a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	611a      	str	r2, [r3, #16]
 800195a:	615a      	str	r2, [r3, #20]
 800195c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	2220      	movs	r2, #32
 8001962:	2100      	movs	r1, #0
 8001964:	4618      	mov	r0, r3
 8001966:	f007 fc1b 	bl	80091a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800196a:	4b3e      	ldr	r3, [pc, #248]	; (8001a64 <MX_TIM1_Init+0x138>)
 800196c:	4a3e      	ldr	r2, [pc, #248]	; (8001a68 <MX_TIM1_Init+0x13c>)
 800196e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320;
 8001970:	4b3c      	ldr	r3, [pc, #240]	; (8001a64 <MX_TIM1_Init+0x138>)
 8001972:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001976:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001978:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <MX_TIM1_Init+0x138>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800197e:	4b39      	ldr	r3, [pc, #228]	; (8001a64 <MX_TIM1_Init+0x138>)
 8001980:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001984:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001986:	4b37      	ldr	r3, [pc, #220]	; (8001a64 <MX_TIM1_Init+0x138>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800198c:	4b35      	ldr	r3, [pc, #212]	; (8001a64 <MX_TIM1_Init+0x138>)
 800198e:	2200      	movs	r2, #0
 8001990:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001992:	4b34      	ldr	r3, [pc, #208]	; (8001a64 <MX_TIM1_Init+0x138>)
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001998:	4832      	ldr	r0, [pc, #200]	; (8001a64 <MX_TIM1_Init+0x138>)
 800199a:	f001 ff3b 	bl	8003814 <HAL_TIM_Base_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80019a4:	f000 fc1c 	bl	80021e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019b2:	4619      	mov	r1, r3
 80019b4:	482b      	ldr	r0, [pc, #172]	; (8001a64 <MX_TIM1_Init+0x138>)
 80019b6:	f002 fda5 	bl	8004504 <HAL_TIM_ConfigClockSource>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80019c0:	f000 fc0e 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019c4:	4827      	ldr	r0, [pc, #156]	; (8001a64 <MX_TIM1_Init+0x138>)
 80019c6:	f001 ff74 	bl	80038b2 <HAL_TIM_PWM_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80019d0:	f000 fc06 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d4:	2300      	movs	r3, #0
 80019d6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019e0:	4619      	mov	r1, r3
 80019e2:	4820      	ldr	r0, [pc, #128]	; (8001a64 <MX_TIM1_Init+0x138>)
 80019e4:	f003 fafc 	bl	8004fe0 <HAL_TIMEx_MasterConfigSynchronization>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80019ee:	f000 fbf7 	bl	80021e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f2:	2360      	movs	r3, #96	; 0x60
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019fa:	2300      	movs	r3, #0
 80019fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a02:	2300      	movs	r3, #0
 8001a04:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0e:	220c      	movs	r2, #12
 8001a10:	4619      	mov	r1, r3
 8001a12:	4814      	ldr	r0, [pc, #80]	; (8001a64 <MX_TIM1_Init+0x138>)
 8001a14:	f002 fcb4 	bl	8004380 <HAL_TIM_PWM_ConfigChannel>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001a1e:	f000 fbdf 	bl	80021e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a3a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	4619      	mov	r1, r3
 8001a44:	4807      	ldr	r0, [pc, #28]	; (8001a64 <MX_TIM1_Init+0x138>)
 8001a46:	f003 fb47 	bl	80050d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001a50:	f000 fbc6 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a54:	4803      	ldr	r0, [pc, #12]	; (8001a64 <MX_TIM1_Init+0x138>)
 8001a56:	f000 fd49 	bl	80024ec <HAL_TIM_MspPostInit>

}
 8001a5a:	bf00      	nop
 8001a5c:	3758      	adds	r7, #88	; 0x58
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20004b1c 	.word	0x20004b1c
 8001a68:	40010000 	.word	0x40010000

08001a6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08c      	sub	sp, #48	; 0x30
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a72:	f107 030c 	add.w	r3, r7, #12
 8001a76:	2224      	movs	r2, #36	; 0x24
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f007 fb90 	bl	80091a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a88:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <MX_TIM2_Init+0xa4>)
 8001a8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a90:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <MX_TIM2_Init+0xa4>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a96:	4b1e      	ldr	r3, [pc, #120]	; (8001b10 <MX_TIM2_Init+0xa4>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001a9c:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <MX_TIM2_Init+0xa4>)
 8001a9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aa2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa4:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <MX_TIM2_Init+0xa4>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aaa:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <MX_TIM2_Init+0xa4>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001ac0:	230a      	movs	r3, #10
 8001ac2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001acc:	2300      	movs	r3, #0
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001ad0:	230a      	movs	r3, #10
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480d      	ldr	r0, [pc, #52]	; (8001b10 <MX_TIM2_Init+0xa4>)
 8001adc:	f002 f978 	bl	8003dd0 <HAL_TIM_Encoder_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001ae6:	f000 fb7b 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	4619      	mov	r1, r3
 8001af6:	4806      	ldr	r0, [pc, #24]	; (8001b10 <MX_TIM2_Init+0xa4>)
 8001af8:	f003 fa72 	bl	8004fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001b02:	f000 fb6d 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b06:	bf00      	nop
 8001b08:	3730      	adds	r7, #48	; 0x30
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20004b6c 	.word	0x20004b6c

08001b14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08c      	sub	sp, #48	; 0x30
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	2224      	movs	r2, #36	; 0x24
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f007 fb3c 	bl	80091a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b30:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <MX_TIM3_Init+0xa0>)
 8001b32:	4a21      	ldr	r2, [pc, #132]	; (8001bb8 <MX_TIM3_Init+0xa4>)
 8001b34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <MX_TIM3_Init+0xa0>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <MX_TIM3_Init+0xa0>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <MX_TIM3_Init+0xa0>)
 8001b44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <MX_TIM3_Init+0xa0>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b50:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <MX_TIM3_Init+0xa0>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b56:	2303      	movs	r3, #3
 8001b58:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001b66:	230a      	movs	r3, #10
 8001b68:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001b76:	230a      	movs	r3, #10
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	4619      	mov	r1, r3
 8001b80:	480c      	ldr	r0, [pc, #48]	; (8001bb4 <MX_TIM3_Init+0xa0>)
 8001b82:	f002 f925 	bl	8003dd0 <HAL_TIM_Encoder_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001b8c:	f000 fb28 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b90:	2300      	movs	r3, #0
 8001b92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <MX_TIM3_Init+0xa0>)
 8001b9e:	f003 fa1f 	bl	8004fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001ba8:	f000 fb1a 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	3730      	adds	r7, #48	; 0x30
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20004ad4 	.word	0x20004ad4
 8001bb8:	40000400 	.word	0x40000400

08001bbc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc2:	f107 0310 	add.w	r3, r7, #16
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001bcc:	463b      	mov	r3, r7
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bd8:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <MX_TIM4_Init+0xa0>)
 8001bda:	4a21      	ldr	r2, [pc, #132]	; (8001c60 <MX_TIM4_Init+0xa4>)
 8001bdc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001bde:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <MX_TIM4_Init+0xa0>)
 8001be0:	220f      	movs	r2, #15
 8001be2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be4:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <MX_TIM4_Init+0xa0>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8001bea:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <MX_TIM4_Init+0xa0>)
 8001bec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001bf0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <MX_TIM4_Init+0xa0>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <MX_TIM4_Init+0xa0>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001bfe:	4817      	ldr	r0, [pc, #92]	; (8001c5c <MX_TIM4_Init+0xa0>)
 8001c00:	f001 ff6e 	bl	8003ae0 <HAL_TIM_IC_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001c0a:	f000 fae9 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c16:	f107 0310 	add.w	r3, r7, #16
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	480f      	ldr	r0, [pc, #60]	; (8001c5c <MX_TIM4_Init+0xa0>)
 8001c1e:	f003 f9df 	bl	8004fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001c28:	f000 fada 	bl	80021e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c30:	2301      	movs	r3, #1
 8001c32:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	2200      	movs	r2, #0
 8001c40:	4619      	mov	r1, r3
 8001c42:	4806      	ldr	r0, [pc, #24]	; (8001c5c <MX_TIM4_Init+0xa0>)
 8001c44:	f002 fb00 	bl	8004248 <HAL_TIM_IC_ConfigChannel>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001c4e:	f000 fac7 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c52:	bf00      	nop
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20004a24 	.word	0x20004a24
 8001c60:	40000800 	.word	0x40000800

08001c64 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b092      	sub	sp, #72	; 0x48
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
 8001c84:	615a      	str	r2, [r3, #20]
 8001c86:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f007 fa86 	bl	80091a0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c94:	4b37      	ldr	r3, [pc, #220]	; (8001d74 <MX_TIM8_Init+0x110>)
 8001c96:	4a38      	ldr	r2, [pc, #224]	; (8001d78 <MX_TIM8_Init+0x114>)
 8001c98:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001c9a:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <MX_TIM8_Init+0x110>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca0:	4b34      	ldr	r3, [pc, #208]	; (8001d74 <MX_TIM8_Init+0x110>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001ca6:	4b33      	ldr	r3, [pc, #204]	; (8001d74 <MX_TIM8_Init+0x110>)
 8001ca8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001cac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cae:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <MX_TIM8_Init+0x110>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001cb4:	4b2f      	ldr	r3, [pc, #188]	; (8001d74 <MX_TIM8_Init+0x110>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cba:	4b2e      	ldr	r3, [pc, #184]	; (8001d74 <MX_TIM8_Init+0x110>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001cc0:	482c      	ldr	r0, [pc, #176]	; (8001d74 <MX_TIM8_Init+0x110>)
 8001cc2:	f001 fdf6 	bl	80038b2 <HAL_TIM_PWM_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001ccc:	f000 fa88 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001cd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4825      	ldr	r0, [pc, #148]	; (8001d74 <MX_TIM8_Init+0x110>)
 8001ce0:	f003 f97e 	bl	8004fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8001cea:	f000 fa79 	bl	80021e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cee:	2360      	movs	r3, #96	; 0x60
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d06:	2300      	movs	r3, #0
 8001d08:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d0e:	2200      	movs	r2, #0
 8001d10:	4619      	mov	r1, r3
 8001d12:	4818      	ldr	r0, [pc, #96]	; (8001d74 <MX_TIM8_Init+0x110>)
 8001d14:	f002 fb34 	bl	8004380 <HAL_TIM_PWM_ConfigChannel>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8001d1e:	f000 fa5f 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d26:	2204      	movs	r2, #4
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4812      	ldr	r0, [pc, #72]	; (8001d74 <MX_TIM8_Init+0x110>)
 8001d2c:	f002 fb28 	bl	8004380 <HAL_TIM_PWM_ConfigChannel>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8001d36:	f000 fa53 	bl	80021e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4805      	ldr	r0, [pc, #20]	; (8001d74 <MX_TIM8_Init+0x110>)
 8001d5e:	f003 f9bb 	bl	80050d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001d68:	f000 fa3a 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	3748      	adds	r7, #72	; 0x48
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	200049dc 	.word	0x200049dc
 8001d78:	40010400 	.word	0x40010400

08001d7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <MX_USART3_UART_Init+0x4c>)
 8001d82:	4a12      	ldr	r2, [pc, #72]	; (8001dcc <MX_USART3_UART_Init+0x50>)
 8001d84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <MX_USART3_UART_Init+0x4c>)
 8001d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <MX_USART3_UART_Init+0x4c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <MX_USART3_UART_Init+0x4c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <MX_USART3_UART_Init+0x4c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001da0:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <MX_USART3_UART_Init+0x4c>)
 8001da2:	220c      	movs	r2, #12
 8001da4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <MX_USART3_UART_Init+0x4c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <MX_USART3_UART_Init+0x4c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001db2:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <MX_USART3_UART_Init+0x4c>)
 8001db4:	f003 f9f6 	bl	80051a4 <HAL_UART_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001dbe:	f000 fa0f 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20004a70 	.word	0x20004a70
 8001dcc:	40004800 	.word	0x40004800

08001dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
 8001de4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	4b49      	ldr	r3, [pc, #292]	; (8001f10 <MX_GPIO_Init+0x140>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a48      	ldr	r2, [pc, #288]	; (8001f10 <MX_GPIO_Init+0x140>)
 8001df0:	f043 0310 	orr.w	r3, r3, #16
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b46      	ldr	r3, [pc, #280]	; (8001f10 <MX_GPIO_Init+0x140>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0310 	and.w	r3, r3, #16
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b42      	ldr	r3, [pc, #264]	; (8001f10 <MX_GPIO_Init+0x140>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a41      	ldr	r2, [pc, #260]	; (8001f10 <MX_GPIO_Init+0x140>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b3f      	ldr	r3, [pc, #252]	; (8001f10 <MX_GPIO_Init+0x140>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <MX_GPIO_Init+0x140>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a3a      	ldr	r2, [pc, #232]	; (8001f10 <MX_GPIO_Init+0x140>)
 8001e28:	f043 0308 	orr.w	r3, r3, #8
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <MX_GPIO_Init+0x140>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	4b34      	ldr	r3, [pc, #208]	; (8001f10 <MX_GPIO_Init+0x140>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a33      	ldr	r2, [pc, #204]	; (8001f10 <MX_GPIO_Init+0x140>)
 8001e44:	f043 0304 	orr.w	r3, r3, #4
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b31      	ldr	r3, [pc, #196]	; (8001f10 <MX_GPIO_Init+0x140>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	4b2d      	ldr	r3, [pc, #180]	; (8001f10 <MX_GPIO_Init+0x140>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a2c      	ldr	r2, [pc, #176]	; (8001f10 <MX_GPIO_Init+0x140>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b2a      	ldr	r3, [pc, #168]	; (8001f10 <MX_GPIO_Init+0x140>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001e72:	2200      	movs	r2, #0
 8001e74:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8001e78:	4826      	ldr	r0, [pc, #152]	; (8001f14 <MX_GPIO_Init+0x144>)
 8001e7a:	f001 f841 	bl	8002f00 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	213c      	movs	r1, #60	; 0x3c
 8001e82:	4825      	ldr	r0, [pc, #148]	; (8001f18 <MX_GPIO_Init+0x148>)
 8001e84:	f001 f83c 	bl	8002f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e8e:	4823      	ldr	r0, [pc, #140]	; (8001f1c <MX_GPIO_Init+0x14c>)
 8001e90:	f001 f836 	bl	8002f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001e94:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8001e98:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4819      	ldr	r0, [pc, #100]	; (8001f14 <MX_GPIO_Init+0x144>)
 8001eae:	f000 fe8b 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001eb2:	233c      	movs	r3, #60	; 0x3c
 8001eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4813      	ldr	r0, [pc, #76]	; (8001f18 <MX_GPIO_Init+0x148>)
 8001eca:	f000 fe7d 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USRBUT_Pin */
  GPIO_InitStruct.Pin = USRBUT_Pin;
 8001ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USRBUT_GPIO_Port, &GPIO_InitStruct);
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	480e      	ldr	r0, [pc, #56]	; (8001f1c <MX_GPIO_Init+0x14c>)
 8001ee4:	f000 fe70 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001ee8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	4806      	ldr	r0, [pc, #24]	; (8001f1c <MX_GPIO_Init+0x14c>)
 8001f02:	f000 fe61 	bl	8002bc8 <HAL_GPIO_Init>

}
 8001f06:	bf00      	nop
 8001f08:	3728      	adds	r7, #40	; 0x28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40020000 	.word	0x40020000
 8001f1c:	40020c00 	.word	0x40020c00

08001f20 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	/*Prevent unused argument(s) compilation warning*/
	UNUSED(huart);
	HAL_UART_Transmit(&huart3,(uint8_t *)aRxBuffer,10,0xFFFF); //might not nd since we not rly transmitting
 8001f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f2c:	220a      	movs	r2, #10
 8001f2e:	4904      	ldr	r1, [pc, #16]	; (8001f40 <HAL_UART_RxCpltCallback+0x20>)
 8001f30:	4804      	ldr	r0, [pc, #16]	; (8001f44 <HAL_UART_RxCpltCallback+0x24>)
 8001f32:	f003 f984 	bl	800523e <HAL_UART_Transmit>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20004b68 	.word	0x20004b68
 8001f44:	20004a70 	.word	0x20004a70

08001f48 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t test[20] = "Testing w/ UART";
 8001f50:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <StartDefaultTask+0x50>)
 8001f52:	f107 040c 	add.w	r4, r7, #12
 8001f56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61fb      	str	r3, [r7, #28]
//	uint8_t ch = 'A'; /* From Workshop */
	/* Infinite loop */
	for(;;)
	{
//		HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 1);
		OLED_ShowString(5,5,test);
 8001f60:	f107 030c 	add.w	r3, r7, #12
 8001f64:	461a      	mov	r2, r3
 8001f66:	2105      	movs	r1, #5
 8001f68:	2005      	movs	r0, #5
 8001f6a:	f007 f823 	bl	8008fb4 <OLED_ShowString>
		sprintf(checkPi, "Pi cmd: %s\0", aRxBuffer);
 8001f6e:	f107 0308 	add.w	r3, r7, #8
 8001f72:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <StartDefaultTask+0x54>)
 8001f74:	490a      	ldr	r1, [pc, #40]	; (8001fa0 <StartDefaultTask+0x58>)
 8001f76:	4618      	mov	r0, r3
 8001f78:	f007 f91a 	bl	80091b0 <siprintf>
		OLED_ShowString(10, 20, checkPi);
 8001f7c:	f107 0308 	add.w	r3, r7, #8
 8001f80:	461a      	mov	r2, r3
 8001f82:	2114      	movs	r1, #20
 8001f84:	200a      	movs	r0, #10
 8001f86:	f007 f815 	bl	8008fb4 <OLED_ShowString>
//		ultraDistCheck();
//		HAL_Delay(200);
//		sprintf(ultra, "uDist: %u cm\0", uDistFinal);
//		OLED_ShowString(10, 20, ultra);

		OLED_Refresh_Gram();
 8001f8a:	f006 fe9f 	bl	8008ccc <OLED_Refresh_Gram>
		//	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
//		HAL_Delay(1000);
		osDelay(1000);
 8001f8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f92:	f004 fa23 	bl	80063dc <osDelay>
	{
 8001f96:	e7e3      	b.n	8001f60 <StartDefaultTask+0x18>
 8001f98:	0800a9b4 	.word	0x0800a9b4
 8001f9c:	20004b68 	.word	0x20004b68
 8001fa0:	0800a9a8 	.word	0x0800a9a8
 8001fa4:	00000000 	.word	0x00000000

08001fa8 <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4881      	ldr	r0, [pc, #516]	; (80021b8 <motor+0x210>)
 8001fb4:	f001 fccc 	bl	8003950 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001fb8:	2104      	movs	r1, #4
 8001fba:	487f      	ldr	r0, [pc, #508]	; (80021b8 <motor+0x210>)
 8001fbc:	f001 fcc8 	bl	8003950 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001fc0:	210c      	movs	r1, #12
 8001fc2:	487e      	ldr	r0, [pc, #504]	; (80021bc <motor+0x214>)
 8001fc4:	f001 fcc4 	bl	8003950 <HAL_TIM_PWM_Start>
	int x = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61fb      	str	r3, [r7, #28]

	*aRxBuffer = '\0';
 8001fcc:	4b7c      	ldr	r3, [pc, #496]	; (80021c0 <motor+0x218>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]

	uint8_t toRpiTest[6] = "NiHao";
 8001fd2:	4a7c      	ldr	r2, [pc, #496]	; (80021c4 <motor+0x21c>)
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fdc:	6018      	str	r0, [r3, #0]
 8001fde:	3304      	adds	r3, #4
 8001fe0:	8019      	strh	r1, [r3, #0]
		for(;;)
		  {
			switch (*aRxBuffer)
 8001fe2:	4b77      	ldr	r3, [pc, #476]	; (80021c0 <motor+0x218>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d030      	beq.n	800204c <motor+0xa4>
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f2c0 80d5 	blt.w	800219a <motor+0x1f2>
 8001ff0:	2b55      	cmp	r3, #85	; 0x55
 8001ff2:	f300 80d2 	bgt.w	800219a <motor+0x1f2>
 8001ff6:	2b46      	cmp	r3, #70	; 0x46
 8001ff8:	f2c0 80cf 	blt.w	800219a <motor+0x1f2>
 8001ffc:	3b46      	subs	r3, #70	; 0x46
 8001ffe:	2b0f      	cmp	r3, #15
 8002000:	f200 80cb 	bhi.w	800219a <motor+0x1f2>
 8002004:	a201      	add	r2, pc, #4	; (adr r2, 800200c <motor+0x64>)
 8002006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200a:	bf00      	nop
 800200c:	0800209b 	.word	0x0800209b
 8002010:	0800219b 	.word	0x0800219b
 8002014:	08002059 	.word	0x08002059
 8002018:	0800219b 	.word	0x0800219b
 800201c:	0800219b 	.word	0x0800219b
 8002020:	08002075 	.word	0x08002075
 8002024:	0800208d 	.word	0x0800208d
 8002028:	0800219b 	.word	0x0800219b
 800202c:	0800219b 	.word	0x0800219b
 8002030:	0800219b 	.word	0x0800219b
 8002034:	0800219b 	.word	0x0800219b
 8002038:	0800219b 	.word	0x0800219b
 800203c:	08002195 	.word	0x08002195
 8002040:	0800219b 	.word	0x0800219b
 8002044:	0800219b 	.word	0x0800219b
 8002048:	080020c1 	.word	0x080020c1
			{
			case '\0': // initialize
				HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 1);
 800204c:	2201      	movs	r2, #1
 800204e:	495c      	ldr	r1, [pc, #368]	; (80021c0 <motor+0x218>)
 8002050:	485d      	ldr	r0, [pc, #372]	; (80021c8 <motor+0x220>)
 8002052:	f003 f9cb 	bl	80053ec <HAL_UART_Receive_IT>
				break;
 8002056:	e0a4      	b.n	80021a2 <motor+0x1fa>
			case 'H':
				HAL_UART_Transmit_IT(&huart3,(uint8_t *)&toRpiTest,6);
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	2206      	movs	r2, #6
 800205e:	4619      	mov	r1, r3
 8002060:	4859      	ldr	r0, [pc, #356]	; (80021c8 <motor+0x220>)
 8002062:	f003 f97e 	bl	8005362 <HAL_UART_Transmit_IT>
				osDelay(50);
 8002066:	2032      	movs	r0, #50	; 0x32
 8002068:	f004 f9b8 	bl	80063dc <osDelay>
				*aRxBuffer = 'R';
 800206c:	4b54      	ldr	r3, [pc, #336]	; (80021c0 <motor+0x218>)
 800206e:	2252      	movs	r2, #82	; 0x52
 8002070:	701a      	strb	r2, [r3, #0]
				break;
 8002072:	e096      	b.n	80021a2 <motor+0x1fa>
			case 'K':
				HAL_UART_Transmit_IT(&huart3,(uint8_t *)"OK?\n",4);
 8002074:	2204      	movs	r2, #4
 8002076:	4955      	ldr	r1, [pc, #340]	; (80021cc <motor+0x224>)
 8002078:	4853      	ldr	r0, [pc, #332]	; (80021c8 <motor+0x220>)
 800207a:	f003 f972 	bl	8005362 <HAL_UART_Transmit_IT>
				osDelay(50);
 800207e:	2032      	movs	r0, #50	; 0x32
 8002080:	f004 f9ac 	bl	80063dc <osDelay>
				*aRxBuffer = 'R';
 8002084:	4b4e      	ldr	r3, [pc, #312]	; (80021c0 <motor+0x218>)
 8002086:	2252      	movs	r2, #82	; 0x52
 8002088:	701a      	strb	r2, [r3, #0]
				break;
 800208a:	e08a      	b.n	80021a2 <motor+0x1fa>
			case 'L':
				Fleft(90);
 800208c:	205a      	movs	r0, #90	; 0x5a
 800208e:	f7ff fb5f 	bl	8001750 <Fleft>
				*aRxBuffer = 'R';
 8002092:	4b4b      	ldr	r3, [pc, #300]	; (80021c0 <motor+0x218>)
 8002094:	2252      	movs	r2, #82	; 0x52
 8002096:	701a      	strb	r2, [r3, #0]
				break;
 8002098:	e083      	b.n	80021a2 <motor+0x1fa>
			case 'F':
				motorControl(3000, 3000, 'F', 'F', 0, 10000, 90);
 800209a:	f242 7310 	movw	r3, #10000	; 0x2710
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	2300      	movs	r3, #0
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	ed9f 0b42 	vldr	d0, [pc, #264]	; 80021b0 <motor+0x208>
 80020a8:	2346      	movs	r3, #70	; 0x46
 80020aa:	2246      	movs	r2, #70	; 0x46
 80020ac:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80020b0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80020b4:	f7ff f864 	bl	8001180 <motorControl>
				*aRxBuffer = 'R';
 80020b8:	4b41      	ldr	r3, [pc, #260]	; (80021c0 <motor+0x218>)
 80020ba:	2252      	movs	r2, #82	; 0x52
 80020bc:	701a      	strb	r2, [r3, #0]
				break;
 80020be:	e070      	b.n	80021a2 <motor+0x1fa>
			case 'U':
				ultraDistCheck();
 80020c0:	f7fe ffee 	bl	80010a0 <ultraDistCheck>
				HAL_Delay(200);
 80020c4:	20c8      	movs	r0, #200	; 0xc8
 80020c6:	f000 fbb7 	bl	8002838 <HAL_Delay>
				char reply[] = "000\n";
 80020ca:	4a41      	ldr	r2, [pc, #260]	; (80021d0 <motor+0x228>)
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020d4:	6018      	str	r0, [r3, #0]
 80020d6:	3304      	adds	r3, #4
 80020d8:	7019      	strb	r1, [r3, #0]
				reply[0] += uDistFinal / 100 % 10;
 80020da:	7b38      	ldrb	r0, [r7, #12]
 80020dc:	4b3d      	ldr	r3, [pc, #244]	; (80021d4 <motor+0x22c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a3d      	ldr	r2, [pc, #244]	; (80021d8 <motor+0x230>)
 80020e2:	fb82 1203 	smull	r1, r2, r2, r3
 80020e6:	1152      	asrs	r2, r2, #5
 80020e8:	17db      	asrs	r3, r3, #31
 80020ea:	1ad2      	subs	r2, r2, r3
 80020ec:	4b3b      	ldr	r3, [pc, #236]	; (80021dc <motor+0x234>)
 80020ee:	fb83 1302 	smull	r1, r3, r3, r2
 80020f2:	1099      	asrs	r1, r3, #2
 80020f4:	17d3      	asrs	r3, r2, #31
 80020f6:	1ac9      	subs	r1, r1, r3
 80020f8:	460b      	mov	r3, r1
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	1ad1      	subs	r1, r2, r3
 8002102:	b2cb      	uxtb	r3, r1
 8002104:	4403      	add	r3, r0
 8002106:	b2db      	uxtb	r3, r3
 8002108:	733b      	strb	r3, [r7, #12]
				reply[1] += uDistFinal / 10 % 10;
 800210a:	7b78      	ldrb	r0, [r7, #13]
 800210c:	4b31      	ldr	r3, [pc, #196]	; (80021d4 <motor+0x22c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a32      	ldr	r2, [pc, #200]	; (80021dc <motor+0x234>)
 8002112:	fb82 1203 	smull	r1, r2, r2, r3
 8002116:	1092      	asrs	r2, r2, #2
 8002118:	17db      	asrs	r3, r3, #31
 800211a:	1ad2      	subs	r2, r2, r3
 800211c:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <motor+0x234>)
 800211e:	fb83 1302 	smull	r1, r3, r3, r2
 8002122:	1099      	asrs	r1, r3, #2
 8002124:	17d3      	asrs	r3, r2, #31
 8002126:	1ac9      	subs	r1, r1, r3
 8002128:	460b      	mov	r3, r1
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	1ad1      	subs	r1, r2, r3
 8002132:	b2cb      	uxtb	r3, r1
 8002134:	4403      	add	r3, r0
 8002136:	b2db      	uxtb	r3, r3
 8002138:	737b      	strb	r3, [r7, #13]
				reply[2] += uDistFinal % 10;
 800213a:	7bb8      	ldrb	r0, [r7, #14]
 800213c:	4b25      	ldr	r3, [pc, #148]	; (80021d4 <motor+0x22c>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4b26      	ldr	r3, [pc, #152]	; (80021dc <motor+0x234>)
 8002142:	fb83 1302 	smull	r1, r3, r3, r2
 8002146:	1099      	asrs	r1, r3, #2
 8002148:	17d3      	asrs	r3, r2, #31
 800214a:	1ac9      	subs	r1, r1, r3
 800214c:	460b      	mov	r3, r1
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	1ad1      	subs	r1, r2, r3
 8002156:	b2cb      	uxtb	r3, r1
 8002158:	4403      	add	r3, r0
 800215a:	b2db      	uxtb	r3, r3
 800215c:	73bb      	strb	r3, [r7, #14]
				if (uDistFinal > 999)
 800215e:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <motor+0x22c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002166:	db01      	blt.n	800216c <motor+0x1c4>
					reply[0] = '9';
 8002168:	2339      	movs	r3, #57	; 0x39
 800216a:	733b      	strb	r3, [r7, #12]
				HAL_UART_Transmit_IT(&huart3, (uint8_t *)reply, strlen(reply));
 800216c:	f107 030c 	add.w	r3, r7, #12
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe f82d 	bl	80001d0 <strlen>
 8002176:	4603      	mov	r3, r0
 8002178:	b29a      	uxth	r2, r3
 800217a:	f107 030c 	add.w	r3, r7, #12
 800217e:	4619      	mov	r1, r3
 8002180:	4811      	ldr	r0, [pc, #68]	; (80021c8 <motor+0x220>)
 8002182:	f003 f8ee 	bl	8005362 <HAL_UART_Transmit_IT>
				osDelay(50);
 8002186:	2032      	movs	r0, #50	; 0x32
 8002188:	f004 f928 	bl	80063dc <osDelay>
				*aRxBuffer = 'R';
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <motor+0x218>)
 800218e:	2252      	movs	r2, #82	; 0x52
 8002190:	701a      	strb	r2, [r3, #0]
				break;
 8002192:	e006      	b.n	80021a2 <motor+0x1fa>
			case 'R':
				waitCmd();
 8002194:	f7fe ffde 	bl	8001154 <waitCmd>
				break;
 8002198:	e003      	b.n	80021a2 <motor+0x1fa>
			default:
				*aRxBuffer = 'R';
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <motor+0x218>)
 800219c:	2252      	movs	r2, #82	; 0x52
 800219e:	701a      	strb	r2, [r3, #0]
				break;
 80021a0:	bf00      	nop
			}
			HAL_Delay(100);
 80021a2:	2064      	movs	r0, #100	; 0x64
 80021a4:	f000 fb48 	bl	8002838 <HAL_Delay>
			switch (*aRxBuffer)
 80021a8:	e71b      	b.n	8001fe2 <motor+0x3a>
 80021aa:	bf00      	nop
 80021ac:	f3af 8000 	nop.w
 80021b0:	00000000 	.word	0x00000000
 80021b4:	40568000 	.word	0x40568000
 80021b8:	200049dc 	.word	0x200049dc
 80021bc:	20004b1c 	.word	0x20004b1c
 80021c0:	20004b68 	.word	0x20004b68
 80021c4:	0800a9d0 	.word	0x0800a9d0
 80021c8:	20004a70 	.word	0x20004a70
 80021cc:	0800a9c8 	.word	0x0800a9c8
 80021d0:	0800a9d8 	.word	0x0800a9d8
 80021d4:	200000b8 	.word	0x200000b8
 80021d8:	51eb851f 	.word	0x51eb851f
 80021dc:	66666667 	.word	0x66666667

080021e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021e4:	b672      	cpsid	i
}
 80021e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021e8:	e7fe      	b.n	80021e8 <Error_Handler+0x8>
	...

080021ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_MspInit+0x54>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	4a11      	ldr	r2, [pc, #68]	; (8002240 <HAL_MspInit+0x54>)
 80021fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002200:	6453      	str	r3, [r2, #68]	; 0x44
 8002202:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_MspInit+0x54>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	603b      	str	r3, [r7, #0]
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_MspInit+0x54>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <HAL_MspInit+0x54>)
 8002218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221c:	6413      	str	r3, [r2, #64]	; 0x40
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_MspInit+0x54>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002226:	603b      	str	r3, [r7, #0]
 8002228:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	210f      	movs	r1, #15
 800222e:	f06f 0001 	mvn.w	r0, #1
 8002232:	f000 fc00 	bl	8002a36 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800

08002244 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0b      	ldr	r2, [pc, #44]	; (8002280 <HAL_TIM_Base_MspInit+0x3c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d10d      	bne.n	8002272 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <HAL_TIM_Base_MspInit+0x40>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	4a09      	ldr	r2, [pc, #36]	; (8002284 <HAL_TIM_Base_MspInit+0x40>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6453      	str	r3, [r2, #68]	; 0x44
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <HAL_TIM_Base_MspInit+0x40>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002272:	bf00      	nop
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40010000 	.word	0x40010000
 8002284:	40023800 	.word	0x40023800

08002288 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08c      	sub	sp, #48	; 0x30
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 031c 	add.w	r3, r7, #28
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a8:	d14b      	bne.n	8002342 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
 80022ae:	4b3f      	ldr	r3, [pc, #252]	; (80023ac <HAL_TIM_Encoder_MspInit+0x124>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	4a3e      	ldr	r2, [pc, #248]	; (80023ac <HAL_TIM_Encoder_MspInit+0x124>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ba:	4b3c      	ldr	r3, [pc, #240]	; (80023ac <HAL_TIM_Encoder_MspInit+0x124>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	61bb      	str	r3, [r7, #24]
 80022c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	4b38      	ldr	r3, [pc, #224]	; (80023ac <HAL_TIM_Encoder_MspInit+0x124>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	4a37      	ldr	r2, [pc, #220]	; (80023ac <HAL_TIM_Encoder_MspInit+0x124>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6313      	str	r3, [r2, #48]	; 0x30
 80022d6:	4b35      	ldr	r3, [pc, #212]	; (80023ac <HAL_TIM_Encoder_MspInit+0x124>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	4b31      	ldr	r3, [pc, #196]	; (80023ac <HAL_TIM_Encoder_MspInit+0x124>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a30      	ldr	r2, [pc, #192]	; (80023ac <HAL_TIM_Encoder_MspInit+0x124>)
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b2e      	ldr	r3, [pc, #184]	; (80023ac <HAL_TIM_Encoder_MspInit+0x124>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230c:	2300      	movs	r3, #0
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002310:	2301      	movs	r3, #1
 8002312:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002314:	f107 031c 	add.w	r3, r7, #28
 8002318:	4619      	mov	r1, r3
 800231a:	4825      	ldr	r0, [pc, #148]	; (80023b0 <HAL_TIM_Encoder_MspInit+0x128>)
 800231c:	f000 fc54 	bl	8002bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002320:	2308      	movs	r3, #8
 8002322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	2300      	movs	r3, #0
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002330:	2301      	movs	r3, #1
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002334:	f107 031c 	add.w	r3, r7, #28
 8002338:	4619      	mov	r1, r3
 800233a:	481e      	ldr	r0, [pc, #120]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x12c>)
 800233c:	f000 fc44 	bl	8002bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002340:	e030      	b.n	80023a4 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a1c      	ldr	r2, [pc, #112]	; (80023b8 <HAL_TIM_Encoder_MspInit+0x130>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d12b      	bne.n	80023a4 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	4b16      	ldr	r3, [pc, #88]	; (80023ac <HAL_TIM_Encoder_MspInit+0x124>)
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	4a15      	ldr	r2, [pc, #84]	; (80023ac <HAL_TIM_Encoder_MspInit+0x124>)
 8002356:	f043 0302 	orr.w	r3, r3, #2
 800235a:	6413      	str	r3, [r2, #64]	; 0x40
 800235c:	4b13      	ldr	r3, [pc, #76]	; (80023ac <HAL_TIM_Encoder_MspInit+0x124>)
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002368:	2300      	movs	r3, #0
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <HAL_TIM_Encoder_MspInit+0x124>)
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	4a0e      	ldr	r2, [pc, #56]	; (80023ac <HAL_TIM_Encoder_MspInit+0x124>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6313      	str	r3, [r2, #48]	; 0x30
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <HAL_TIM_Encoder_MspInit+0x124>)
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002384:	23c0      	movs	r3, #192	; 0xc0
 8002386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	2302      	movs	r3, #2
 800238a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002390:	2300      	movs	r3, #0
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002394:	2302      	movs	r3, #2
 8002396:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002398:	f107 031c 	add.w	r3, r7, #28
 800239c:	4619      	mov	r1, r3
 800239e:	4804      	ldr	r0, [pc, #16]	; (80023b0 <HAL_TIM_Encoder_MspInit+0x128>)
 80023a0:	f000 fc12 	bl	8002bc8 <HAL_GPIO_Init>
}
 80023a4:	bf00      	nop
 80023a6:	3730      	adds	r7, #48	; 0x30
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40020000 	.word	0x40020000
 80023b4:	40020400 	.word	0x40020400
 80023b8:	40000400 	.word	0x40000400

080023bc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08a      	sub	sp, #40	; 0x28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a1d      	ldr	r2, [pc, #116]	; (8002450 <HAL_TIM_IC_MspInit+0x94>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d134      	bne.n	8002448 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <HAL_TIM_IC_MspInit+0x98>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	4a1b      	ldr	r2, [pc, #108]	; (8002454 <HAL_TIM_IC_MspInit+0x98>)
 80023e8:	f043 0304 	orr.w	r3, r3, #4
 80023ec:	6413      	str	r3, [r2, #64]	; 0x40
 80023ee:	4b19      	ldr	r3, [pc, #100]	; (8002454 <HAL_TIM_IC_MspInit+0x98>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	4b15      	ldr	r3, [pc, #84]	; (8002454 <HAL_TIM_IC_MspInit+0x98>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a14      	ldr	r2, [pc, #80]	; (8002454 <HAL_TIM_IC_MspInit+0x98>)
 8002404:	f043 0308 	orr.w	r3, r3, #8
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b12      	ldr	r3, [pc, #72]	; (8002454 <HAL_TIM_IC_MspInit+0x98>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800241a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241c:	2302      	movs	r3, #2
 800241e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002424:	2300      	movs	r3, #0
 8002426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002428:	2302      	movs	r3, #2
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	4619      	mov	r1, r3
 8002432:	4809      	ldr	r0, [pc, #36]	; (8002458 <HAL_TIM_IC_MspInit+0x9c>)
 8002434:	f000 fbc8 	bl	8002bc8 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002438:	2200      	movs	r2, #0
 800243a:	2105      	movs	r1, #5
 800243c:	201e      	movs	r0, #30
 800243e:	f000 fafa 	bl	8002a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002442:	201e      	movs	r0, #30
 8002444:	f000 fb13 	bl	8002a6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002448:	bf00      	nop
 800244a:	3728      	adds	r7, #40	; 0x28
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40000800 	.word	0x40000800
 8002454:	40023800 	.word	0x40023800
 8002458:	40020c00 	.word	0x40020c00

0800245c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08a      	sub	sp, #40	; 0x28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM8)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a19      	ldr	r2, [pc, #100]	; (80024e0 <HAL_TIM_PWM_MspInit+0x84>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d12b      	bne.n	80024d6 <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	4b18      	ldr	r3, [pc, #96]	; (80024e4 <HAL_TIM_PWM_MspInit+0x88>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	4a17      	ldr	r2, [pc, #92]	; (80024e4 <HAL_TIM_PWM_MspInit+0x88>)
 8002488:	f043 0302 	orr.w	r3, r3, #2
 800248c:	6453      	str	r3, [r2, #68]	; 0x44
 800248e:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <HAL_TIM_PWM_MspInit+0x88>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <HAL_TIM_PWM_MspInit+0x88>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	4a10      	ldr	r2, [pc, #64]	; (80024e4 <HAL_TIM_PWM_MspInit+0x88>)
 80024a4:	f043 0304 	orr.w	r3, r3, #4
 80024a8:	6313      	str	r3, [r2, #48]	; 0x30
 80024aa:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <HAL_TIM_PWM_MspInit+0x88>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80024b6:	23c0      	movs	r3, #192	; 0xc0
 80024b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	2300      	movs	r3, #0
 80024c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80024c6:	2303      	movs	r3, #3
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ca:	f107 0314 	add.w	r3, r7, #20
 80024ce:	4619      	mov	r1, r3
 80024d0:	4805      	ldr	r0, [pc, #20]	; (80024e8 <HAL_TIM_PWM_MspInit+0x8c>)
 80024d2:	f000 fb79 	bl	8002bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80024d6:	bf00      	nop
 80024d8:	3728      	adds	r7, #40	; 0x28
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40010400 	.word	0x40010400
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40020800 	.word	0x40020800

080024ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f4:	f107 030c 	add.w	r3, r7, #12
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a12      	ldr	r2, [pc, #72]	; (8002554 <HAL_TIM_MspPostInit+0x68>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d11e      	bne.n	800254c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <HAL_TIM_MspPostInit+0x6c>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4a10      	ldr	r2, [pc, #64]	; (8002558 <HAL_TIM_MspPostInit+0x6c>)
 8002518:	f043 0310 	orr.w	r3, r3, #16
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <HAL_TIM_MspPostInit+0x6c>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800252a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800252e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002530:	2302      	movs	r3, #2
 8002532:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002538:	2300      	movs	r3, #0
 800253a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800253c:	2301      	movs	r3, #1
 800253e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002540:	f107 030c 	add.w	r3, r7, #12
 8002544:	4619      	mov	r1, r3
 8002546:	4805      	ldr	r0, [pc, #20]	; (800255c <HAL_TIM_MspPostInit+0x70>)
 8002548:	f000 fb3e 	bl	8002bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800254c:	bf00      	nop
 800254e:	3720      	adds	r7, #32
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40010000 	.word	0x40010000
 8002558:	40023800 	.word	0x40023800
 800255c:	40021000 	.word	0x40021000

08002560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08a      	sub	sp, #40	; 0x28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a1d      	ldr	r2, [pc, #116]	; (80025f4 <HAL_UART_MspInit+0x94>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d134      	bne.n	80025ec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	4b1c      	ldr	r3, [pc, #112]	; (80025f8 <HAL_UART_MspInit+0x98>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	4a1b      	ldr	r2, [pc, #108]	; (80025f8 <HAL_UART_MspInit+0x98>)
 800258c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002590:	6413      	str	r3, [r2, #64]	; 0x40
 8002592:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_UART_MspInit+0x98>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <HAL_UART_MspInit+0x98>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	4a14      	ldr	r2, [pc, #80]	; (80025f8 <HAL_UART_MspInit+0x98>)
 80025a8:	f043 0304 	orr.w	r3, r3, #4
 80025ac:	6313      	str	r3, [r2, #48]	; 0x30
 80025ae:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <HAL_UART_MspInit+0x98>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c8:	2303      	movs	r3, #3
 80025ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025cc:	2307      	movs	r3, #7
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	4619      	mov	r1, r3
 80025d6:	4809      	ldr	r0, [pc, #36]	; (80025fc <HAL_UART_MspInit+0x9c>)
 80025d8:	f000 faf6 	bl	8002bc8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80025dc:	2200      	movs	r2, #0
 80025de:	2105      	movs	r1, #5
 80025e0:	2027      	movs	r0, #39	; 0x27
 80025e2:	f000 fa28 	bl	8002a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025e6:	2027      	movs	r0, #39	; 0x27
 80025e8:	f000 fa41 	bl	8002a6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025ec:	bf00      	nop
 80025ee:	3728      	adds	r7, #40	; 0x28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40004800 	.word	0x40004800
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40020800 	.word	0x40020800

08002600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002604:	e7fe      	b.n	8002604 <NMI_Handler+0x4>

08002606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800260a:	e7fe      	b.n	800260a <HardFault_Handler+0x4>

0800260c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002610:	e7fe      	b.n	8002610 <MemManage_Handler+0x4>

08002612 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002616:	e7fe      	b.n	8002616 <BusFault_Handler+0x4>

08002618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800261c:	e7fe      	b.n	800261c <UsageFault_Handler+0x4>

0800261e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002630:	f000 f8e2 	bl	80027f8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002634:	f005 fae0 	bl	8007bf8 <xTaskGetSchedulerState>
 8002638:	4603      	mov	r3, r0
 800263a:	2b01      	cmp	r3, #1
 800263c:	d001      	beq.n	8002642 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800263e:	f006 f8cb 	bl	80087d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800264c:	4802      	ldr	r0, [pc, #8]	; (8002658 <TIM4_IRQHandler+0x10>)
 800264e:	f001 fcf3 	bl	8004038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20004a24 	.word	0x20004a24

0800265c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002660:	4802      	ldr	r0, [pc, #8]	; (800266c <USART3_IRQHandler+0x10>)
 8002662:	f002 fef3 	bl	800544c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20004a70 	.word	0x20004a70

08002670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002678:	4a14      	ldr	r2, [pc, #80]	; (80026cc <_sbrk+0x5c>)
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <_sbrk+0x60>)
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <_sbrk+0x64>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d102      	bne.n	8002692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <_sbrk+0x64>)
 800268e:	4a12      	ldr	r2, [pc, #72]	; (80026d8 <_sbrk+0x68>)
 8002690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <_sbrk+0x64>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	429a      	cmp	r2, r3
 800269e:	d207      	bcs.n	80026b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a0:	f006 fd46 	bl	8009130 <__errno>
 80026a4:	4603      	mov	r3, r0
 80026a6:	220c      	movs	r2, #12
 80026a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295
 80026ae:	e009      	b.n	80026c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <_sbrk+0x64>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <_sbrk+0x64>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	4a05      	ldr	r2, [pc, #20]	; (80026d4 <_sbrk+0x64>)
 80026c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026c2:	68fb      	ldr	r3, [r7, #12]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20020000 	.word	0x20020000
 80026d0:	00000400 	.word	0x00000400
 80026d4:	200000bc 	.word	0x200000bc
 80026d8:	20005020 	.word	0x20005020

080026dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <SystemInit+0x20>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	4a05      	ldr	r2, [pc, #20]	; (80026fc <SystemInit+0x20>)
 80026e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <Reset_Handler>:
 8002700:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002738 <LoopFillZerobss+0x12>
 8002704:	480d      	ldr	r0, [pc, #52]	; (800273c <LoopFillZerobss+0x16>)
 8002706:	490e      	ldr	r1, [pc, #56]	; (8002740 <LoopFillZerobss+0x1a>)
 8002708:	4a0e      	ldr	r2, [pc, #56]	; (8002744 <LoopFillZerobss+0x1e>)
 800270a:	2300      	movs	r3, #0
 800270c:	e002      	b.n	8002714 <LoopCopyDataInit>

0800270e <CopyDataInit>:
 800270e:	58d4      	ldr	r4, [r2, r3]
 8002710:	50c4      	str	r4, [r0, r3]
 8002712:	3304      	adds	r3, #4

08002714 <LoopCopyDataInit>:
 8002714:	18c4      	adds	r4, r0, r3
 8002716:	428c      	cmp	r4, r1
 8002718:	d3f9      	bcc.n	800270e <CopyDataInit>
 800271a:	4a0b      	ldr	r2, [pc, #44]	; (8002748 <LoopFillZerobss+0x22>)
 800271c:	4c0b      	ldr	r4, [pc, #44]	; (800274c <LoopFillZerobss+0x26>)
 800271e:	2300      	movs	r3, #0
 8002720:	e001      	b.n	8002726 <LoopFillZerobss>

08002722 <FillZerobss>:
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	3204      	adds	r2, #4

08002726 <LoopFillZerobss>:
 8002726:	42a2      	cmp	r2, r4
 8002728:	d3fb      	bcc.n	8002722 <FillZerobss>
 800272a:	f7ff ffd7 	bl	80026dc <SystemInit>
 800272e:	f006 fd05 	bl	800913c <__libc_init_array>
 8002732:	f7ff f857 	bl	80017e4 <main>
 8002736:	4770      	bx	lr
 8002738:	20020000 	.word	0x20020000
 800273c:	20000000 	.word	0x20000000
 8002740:	20000078 	.word	0x20000078
 8002744:	0800b540 	.word	0x0800b540
 8002748:	20000078 	.word	0x20000078
 800274c:	2000501c 	.word	0x2000501c

08002750 <ADC_IRQHandler>:
 8002750:	e7fe      	b.n	8002750 <ADC_IRQHandler>
	...

08002754 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002758:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <HAL_Init+0x40>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a0d      	ldr	r2, [pc, #52]	; (8002794 <HAL_Init+0x40>)
 800275e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002762:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_Init+0x40>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a0a      	ldr	r2, [pc, #40]	; (8002794 <HAL_Init+0x40>)
 800276a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800276e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <HAL_Init+0x40>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a07      	ldr	r2, [pc, #28]	; (8002794 <HAL_Init+0x40>)
 8002776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800277c:	2003      	movs	r0, #3
 800277e:	f000 f94f 	bl	8002a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002782:	200f      	movs	r0, #15
 8002784:	f000 f808 	bl	8002798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002788:	f7ff fd30 	bl	80021ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40023c00 	.word	0x40023c00

08002798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027a0:	4b12      	ldr	r3, [pc, #72]	; (80027ec <HAL_InitTick+0x54>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_InitTick+0x58>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	4619      	mov	r1, r3
 80027aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80027b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 f967 	bl	8002a8a <HAL_SYSTICK_Config>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e00e      	b.n	80027e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b0f      	cmp	r3, #15
 80027ca:	d80a      	bhi.n	80027e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027cc:	2200      	movs	r2, #0
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295
 80027d4:	f000 f92f 	bl	8002a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027d8:	4a06      	ldr	r2, [pc, #24]	; (80027f4 <HAL_InitTick+0x5c>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e000      	b.n	80027e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20000000 	.word	0x20000000
 80027f0:	20000008 	.word	0x20000008
 80027f4:	20000004 	.word	0x20000004

080027f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_IncTick+0x20>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_IncTick+0x24>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4413      	add	r3, r2
 8002808:	4a04      	ldr	r2, [pc, #16]	; (800281c <HAL_IncTick+0x24>)
 800280a:	6013      	str	r3, [r2, #0]
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000008 	.word	0x20000008
 800281c:	20004bc8 	.word	0x20004bc8

08002820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return uwTick;
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <HAL_GetTick+0x14>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20004bc8 	.word	0x20004bc8

08002838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002840:	f7ff ffee 	bl	8002820 <HAL_GetTick>
 8002844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002850:	d005      	beq.n	800285e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_Delay+0x44>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4413      	add	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800285e:	bf00      	nop
 8002860:	f7ff ffde 	bl	8002820 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	429a      	cmp	r2, r3
 800286e:	d8f7      	bhi.n	8002860 <HAL_Delay+0x28>
  {
  }
}
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000008 	.word	0x20000008

08002880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800289c:	4013      	ands	r3, r2
 800289e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028b2:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <__NVIC_SetPriorityGrouping+0x44>)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	60d3      	str	r3, [r2, #12]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028cc:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	0a1b      	lsrs	r3, r3, #8
 80028d2:	f003 0307 	and.w	r3, r3, #7
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	e000ed00 	.word	0xe000ed00

080028e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	db0b      	blt.n	800290e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	f003 021f 	and.w	r2, r3, #31
 80028fc:	4907      	ldr	r1, [pc, #28]	; (800291c <__NVIC_EnableIRQ+0x38>)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	2001      	movs	r0, #1
 8002906:	fa00 f202 	lsl.w	r2, r0, r2
 800290a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	e000e100 	.word	0xe000e100

08002920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	6039      	str	r1, [r7, #0]
 800292a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800292c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002930:	2b00      	cmp	r3, #0
 8002932:	db0a      	blt.n	800294a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	b2da      	uxtb	r2, r3
 8002938:	490c      	ldr	r1, [pc, #48]	; (800296c <__NVIC_SetPriority+0x4c>)
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	0112      	lsls	r2, r2, #4
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	440b      	add	r3, r1
 8002944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002948:	e00a      	b.n	8002960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	b2da      	uxtb	r2, r3
 800294e:	4908      	ldr	r1, [pc, #32]	; (8002970 <__NVIC_SetPriority+0x50>)
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	3b04      	subs	r3, #4
 8002958:	0112      	lsls	r2, r2, #4
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	440b      	add	r3, r1
 800295e:	761a      	strb	r2, [r3, #24]
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000e100 	.word	0xe000e100
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002974:	b480      	push	{r7}
 8002976:	b089      	sub	sp, #36	; 0x24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f1c3 0307 	rsb	r3, r3, #7
 800298e:	2b04      	cmp	r3, #4
 8002990:	bf28      	it	cs
 8002992:	2304      	movcs	r3, #4
 8002994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3304      	adds	r3, #4
 800299a:	2b06      	cmp	r3, #6
 800299c:	d902      	bls.n	80029a4 <NVIC_EncodePriority+0x30>
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	3b03      	subs	r3, #3
 80029a2:	e000      	b.n	80029a6 <NVIC_EncodePriority+0x32>
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a8:	f04f 32ff 	mov.w	r2, #4294967295
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43da      	mvns	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	401a      	ands	r2, r3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029bc:	f04f 31ff 	mov.w	r1, #4294967295
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	43d9      	mvns	r1, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029cc:	4313      	orrs	r3, r2
         );
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3724      	adds	r7, #36	; 0x24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029ec:	d301      	bcc.n	80029f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ee:	2301      	movs	r3, #1
 80029f0:	e00f      	b.n	8002a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029f2:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <SysTick_Config+0x40>)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029fa:	210f      	movs	r1, #15
 80029fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002a00:	f7ff ff8e 	bl	8002920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <SysTick_Config+0x40>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a0a:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <SysTick_Config+0x40>)
 8002a0c:	2207      	movs	r2, #7
 8002a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	e000e010 	.word	0xe000e010

08002a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff ff29 	bl	8002880 <__NVIC_SetPriorityGrouping>
}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b086      	sub	sp, #24
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
 8002a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a48:	f7ff ff3e 	bl	80028c8 <__NVIC_GetPriorityGrouping>
 8002a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	68b9      	ldr	r1, [r7, #8]
 8002a52:	6978      	ldr	r0, [r7, #20]
 8002a54:	f7ff ff8e 	bl	8002974 <NVIC_EncodePriority>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a5e:	4611      	mov	r1, r2
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff ff5d 	bl	8002920 <__NVIC_SetPriority>
}
 8002a66:	bf00      	nop
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	4603      	mov	r3, r0
 8002a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff ff31 	bl	80028e4 <__NVIC_EnableIRQ>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff ffa2 	bl	80029dc <SysTick_Config>
 8002a98:	4603      	mov	r3, r0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ab0:	f7ff feb6 	bl	8002820 <HAL_GetTick>
 8002ab4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d008      	beq.n	8002ad4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2280      	movs	r2, #128	; 0x80
 8002ac6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e052      	b.n	8002b7a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0216 	bic.w	r2, r2, #22
 8002ae2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002af2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d103      	bne.n	8002b04 <HAL_DMA_Abort+0x62>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d007      	beq.n	8002b14 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0208 	bic.w	r2, r2, #8
 8002b12:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0201 	bic.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b24:	e013      	b.n	8002b4e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b26:	f7ff fe7b 	bl	8002820 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b05      	cmp	r3, #5
 8002b32:	d90c      	bls.n	8002b4e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2220      	movs	r2, #32
 8002b38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e015      	b.n	8002b7a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1e4      	bne.n	8002b26 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b60:	223f      	movs	r2, #63	; 0x3f
 8002b62:	409a      	lsls	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d004      	beq.n	8002ba0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2280      	movs	r2, #128	; 0x80
 8002b9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e00c      	b.n	8002bba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2205      	movs	r2, #5
 8002ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b089      	sub	sp, #36	; 0x24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	e16b      	b.n	8002ebc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002be4:	2201      	movs	r2, #1
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	f040 815a 	bne.w	8002eb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d005      	beq.n	8002c1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d130      	bne.n	8002c7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	2203      	movs	r2, #3
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c50:	2201      	movs	r2, #1
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	091b      	lsrs	r3, r3, #4
 8002c66:	f003 0201 	and.w	r2, r3, #1
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d017      	beq.n	8002cb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	2203      	movs	r2, #3
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d123      	bne.n	8002d0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	08da      	lsrs	r2, r3, #3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3208      	adds	r2, #8
 8002ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	220f      	movs	r2, #15
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	08da      	lsrs	r2, r3, #3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3208      	adds	r2, #8
 8002d06:	69b9      	ldr	r1, [r7, #24]
 8002d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	2203      	movs	r2, #3
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0203 	and.w	r2, r3, #3
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 80b4 	beq.w	8002eb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	4b60      	ldr	r3, [pc, #384]	; (8002ed4 <HAL_GPIO_Init+0x30c>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	4a5f      	ldr	r2, [pc, #380]	; (8002ed4 <HAL_GPIO_Init+0x30c>)
 8002d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5e:	4b5d      	ldr	r3, [pc, #372]	; (8002ed4 <HAL_GPIO_Init+0x30c>)
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d6a:	4a5b      	ldr	r2, [pc, #364]	; (8002ed8 <HAL_GPIO_Init+0x310>)
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	089b      	lsrs	r3, r3, #2
 8002d70:	3302      	adds	r3, #2
 8002d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	220f      	movs	r2, #15
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a52      	ldr	r2, [pc, #328]	; (8002edc <HAL_GPIO_Init+0x314>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d02b      	beq.n	8002dee <HAL_GPIO_Init+0x226>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a51      	ldr	r2, [pc, #324]	; (8002ee0 <HAL_GPIO_Init+0x318>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d025      	beq.n	8002dea <HAL_GPIO_Init+0x222>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a50      	ldr	r2, [pc, #320]	; (8002ee4 <HAL_GPIO_Init+0x31c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d01f      	beq.n	8002de6 <HAL_GPIO_Init+0x21e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a4f      	ldr	r2, [pc, #316]	; (8002ee8 <HAL_GPIO_Init+0x320>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d019      	beq.n	8002de2 <HAL_GPIO_Init+0x21a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a4e      	ldr	r2, [pc, #312]	; (8002eec <HAL_GPIO_Init+0x324>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d013      	beq.n	8002dde <HAL_GPIO_Init+0x216>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a4d      	ldr	r2, [pc, #308]	; (8002ef0 <HAL_GPIO_Init+0x328>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d00d      	beq.n	8002dda <HAL_GPIO_Init+0x212>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4c      	ldr	r2, [pc, #304]	; (8002ef4 <HAL_GPIO_Init+0x32c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d007      	beq.n	8002dd6 <HAL_GPIO_Init+0x20e>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4b      	ldr	r2, [pc, #300]	; (8002ef8 <HAL_GPIO_Init+0x330>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d101      	bne.n	8002dd2 <HAL_GPIO_Init+0x20a>
 8002dce:	2307      	movs	r3, #7
 8002dd0:	e00e      	b.n	8002df0 <HAL_GPIO_Init+0x228>
 8002dd2:	2308      	movs	r3, #8
 8002dd4:	e00c      	b.n	8002df0 <HAL_GPIO_Init+0x228>
 8002dd6:	2306      	movs	r3, #6
 8002dd8:	e00a      	b.n	8002df0 <HAL_GPIO_Init+0x228>
 8002dda:	2305      	movs	r3, #5
 8002ddc:	e008      	b.n	8002df0 <HAL_GPIO_Init+0x228>
 8002dde:	2304      	movs	r3, #4
 8002de0:	e006      	b.n	8002df0 <HAL_GPIO_Init+0x228>
 8002de2:	2303      	movs	r3, #3
 8002de4:	e004      	b.n	8002df0 <HAL_GPIO_Init+0x228>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e002      	b.n	8002df0 <HAL_GPIO_Init+0x228>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <HAL_GPIO_Init+0x228>
 8002dee:	2300      	movs	r3, #0
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	f002 0203 	and.w	r2, r2, #3
 8002df6:	0092      	lsls	r2, r2, #2
 8002df8:	4093      	lsls	r3, r2
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e00:	4935      	ldr	r1, [pc, #212]	; (8002ed8 <HAL_GPIO_Init+0x310>)
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	089b      	lsrs	r3, r3, #2
 8002e06:	3302      	adds	r3, #2
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e0e:	4b3b      	ldr	r3, [pc, #236]	; (8002efc <HAL_GPIO_Init+0x334>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	43db      	mvns	r3, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e32:	4a32      	ldr	r2, [pc, #200]	; (8002efc <HAL_GPIO_Init+0x334>)
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e38:	4b30      	ldr	r3, [pc, #192]	; (8002efc <HAL_GPIO_Init+0x334>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e5c:	4a27      	ldr	r2, [pc, #156]	; (8002efc <HAL_GPIO_Init+0x334>)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e62:	4b26      	ldr	r3, [pc, #152]	; (8002efc <HAL_GPIO_Init+0x334>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e86:	4a1d      	ldr	r2, [pc, #116]	; (8002efc <HAL_GPIO_Init+0x334>)
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <HAL_GPIO_Init+0x334>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	43db      	mvns	r3, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eb0:	4a12      	ldr	r2, [pc, #72]	; (8002efc <HAL_GPIO_Init+0x334>)
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	61fb      	str	r3, [r7, #28]
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	2b0f      	cmp	r3, #15
 8002ec0:	f67f ae90 	bls.w	8002be4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	bf00      	nop
 8002ec8:	3724      	adds	r7, #36	; 0x24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40013800 	.word	0x40013800
 8002edc:	40020000 	.word	0x40020000
 8002ee0:	40020400 	.word	0x40020400
 8002ee4:	40020800 	.word	0x40020800
 8002ee8:	40020c00 	.word	0x40020c00
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40021400 	.word	0x40021400
 8002ef4:	40021800 	.word	0x40021800
 8002ef8:	40021c00 	.word	0x40021c00
 8002efc:	40013c00 	.word	0x40013c00

08002f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	807b      	strh	r3, [r7, #2]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f10:	787b      	ldrb	r3, [r7, #1]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f16:	887a      	ldrh	r2, [r7, #2]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f1c:	e003      	b.n	8002f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f1e:	887b      	ldrh	r3, [r7, #2]
 8002f20:	041a      	lsls	r2, r3, #16
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	619a      	str	r2, [r3, #24]
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
	...

08002f34 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002f3a:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <HAL_PWR_EnableBkUpAccess+0x20>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <HAL_PWR_EnableBkUpAccess+0x24>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8002f46:	687b      	ldr	r3, [r7, #4]
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	420e0020 	.word	0x420e0020
 8002f58:	40007000 	.word	0x40007000

08002f5c <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_PWR_DisableBkUpAccess+0x20>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002f68:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <HAL_PWR_DisableBkUpAccess+0x24>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8002f6e:	687b      	ldr	r3, [r7, #4]
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	420e0020 	.word	0x420e0020
 8002f80:	40007000 	.word	0x40007000

08002f84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e264      	b.n	8003460 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d075      	beq.n	800308e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fa2:	4ba3      	ldr	r3, [pc, #652]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d00c      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fae:	4ba0      	ldr	r3, [pc, #640]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d112      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fba:	4b9d      	ldr	r3, [pc, #628]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fc6:	d10b      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc8:	4b99      	ldr	r3, [pc, #612]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d05b      	beq.n	800308c <HAL_RCC_OscConfig+0x108>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d157      	bne.n	800308c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e23f      	b.n	8003460 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe8:	d106      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x74>
 8002fea:	4b91      	ldr	r3, [pc, #580]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a90      	ldr	r2, [pc, #576]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 8002ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	e01d      	b.n	8003034 <HAL_RCC_OscConfig+0xb0>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003000:	d10c      	bne.n	800301c <HAL_RCC_OscConfig+0x98>
 8003002:	4b8b      	ldr	r3, [pc, #556]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a8a      	ldr	r2, [pc, #552]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 8003008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	4b88      	ldr	r3, [pc, #544]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a87      	ldr	r2, [pc, #540]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 8003014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	e00b      	b.n	8003034 <HAL_RCC_OscConfig+0xb0>
 800301c:	4b84      	ldr	r3, [pc, #528]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a83      	ldr	r2, [pc, #524]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 8003022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	4b81      	ldr	r3, [pc, #516]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a80      	ldr	r2, [pc, #512]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 800302e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d013      	beq.n	8003064 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7ff fbf0 	bl	8002820 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003044:	f7ff fbec 	bl	8002820 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b64      	cmp	r3, #100	; 0x64
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e204      	b.n	8003460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003056:	4b76      	ldr	r3, [pc, #472]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0xc0>
 8003062:	e014      	b.n	800308e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7ff fbdc 	bl	8002820 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800306c:	f7ff fbd8 	bl	8002820 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	; 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e1f0      	b.n	8003460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307e:	4b6c      	ldr	r3, [pc, #432]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0xe8>
 800308a:	e000      	b.n	800308e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d063      	beq.n	8003162 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800309a:	4b65      	ldr	r3, [pc, #404]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00b      	beq.n	80030be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030a6:	4b62      	ldr	r3, [pc, #392]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d11c      	bne.n	80030ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030b2:	4b5f      	ldr	r3, [pc, #380]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d116      	bne.n	80030ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030be:	4b5c      	ldr	r3, [pc, #368]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d005      	beq.n	80030d6 <HAL_RCC_OscConfig+0x152>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d001      	beq.n	80030d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e1c4      	b.n	8003460 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d6:	4b56      	ldr	r3, [pc, #344]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4952      	ldr	r1, [pc, #328]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ea:	e03a      	b.n	8003162 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d020      	beq.n	8003136 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f4:	4b4f      	ldr	r3, [pc, #316]	; (8003234 <HAL_RCC_OscConfig+0x2b0>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fa:	f7ff fb91 	bl	8002820 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003102:	f7ff fb8d 	bl	8002820 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e1a5      	b.n	8003460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003114:	4b46      	ldr	r3, [pc, #280]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f0      	beq.n	8003102 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003120:	4b43      	ldr	r3, [pc, #268]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4940      	ldr	r1, [pc, #256]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	4313      	orrs	r3, r2
 8003132:	600b      	str	r3, [r1, #0]
 8003134:	e015      	b.n	8003162 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003136:	4b3f      	ldr	r3, [pc, #252]	; (8003234 <HAL_RCC_OscConfig+0x2b0>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7ff fb70 	bl	8002820 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003144:	f7ff fb6c 	bl	8002820 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e184      	b.n	8003460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003156:	4b36      	ldr	r3, [pc, #216]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d030      	beq.n	80031d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d016      	beq.n	80031a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003176:	4b30      	ldr	r3, [pc, #192]	; (8003238 <HAL_RCC_OscConfig+0x2b4>)
 8003178:	2201      	movs	r2, #1
 800317a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317c:	f7ff fb50 	bl	8002820 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003184:	f7ff fb4c 	bl	8002820 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e164      	b.n	8003460 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003196:	4b26      	ldr	r3, [pc, #152]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 8003198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0x200>
 80031a2:	e015      	b.n	80031d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a4:	4b24      	ldr	r3, [pc, #144]	; (8003238 <HAL_RCC_OscConfig+0x2b4>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031aa:	f7ff fb39 	bl	8002820 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b2:	f7ff fb35 	bl	8002820 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e14d      	b.n	8003460 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c4:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 80031c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f0      	bne.n	80031b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 80a0 	beq.w	800331e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031de:	2300      	movs	r3, #0
 80031e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031e2:	4b13      	ldr	r3, [pc, #76]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10f      	bne.n	800320e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ee:	2300      	movs	r3, #0
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	4a0e      	ldr	r2, [pc, #56]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fc:	6413      	str	r3, [r2, #64]	; 0x40
 80031fe:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <HAL_RCC_OscConfig+0x2ac>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003206:	60bb      	str	r3, [r7, #8]
 8003208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800320a:	2301      	movs	r3, #1
 800320c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320e:	4b0b      	ldr	r3, [pc, #44]	; (800323c <HAL_RCC_OscConfig+0x2b8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003216:	2b00      	cmp	r3, #0
 8003218:	d121      	bne.n	800325e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800321a:	4b08      	ldr	r3, [pc, #32]	; (800323c <HAL_RCC_OscConfig+0x2b8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a07      	ldr	r2, [pc, #28]	; (800323c <HAL_RCC_OscConfig+0x2b8>)
 8003220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003226:	f7ff fafb 	bl	8002820 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322c:	e011      	b.n	8003252 <HAL_RCC_OscConfig+0x2ce>
 800322e:	bf00      	nop
 8003230:	40023800 	.word	0x40023800
 8003234:	42470000 	.word	0x42470000
 8003238:	42470e80 	.word	0x42470e80
 800323c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003240:	f7ff faee 	bl	8002820 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e106      	b.n	8003460 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003252:	4b85      	ldr	r3, [pc, #532]	; (8003468 <HAL_RCC_OscConfig+0x4e4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d106      	bne.n	8003274 <HAL_RCC_OscConfig+0x2f0>
 8003266:	4b81      	ldr	r3, [pc, #516]	; (800346c <HAL_RCC_OscConfig+0x4e8>)
 8003268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326a:	4a80      	ldr	r2, [pc, #512]	; (800346c <HAL_RCC_OscConfig+0x4e8>)
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	6713      	str	r3, [r2, #112]	; 0x70
 8003272:	e01c      	b.n	80032ae <HAL_RCC_OscConfig+0x32a>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2b05      	cmp	r3, #5
 800327a:	d10c      	bne.n	8003296 <HAL_RCC_OscConfig+0x312>
 800327c:	4b7b      	ldr	r3, [pc, #492]	; (800346c <HAL_RCC_OscConfig+0x4e8>)
 800327e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003280:	4a7a      	ldr	r2, [pc, #488]	; (800346c <HAL_RCC_OscConfig+0x4e8>)
 8003282:	f043 0304 	orr.w	r3, r3, #4
 8003286:	6713      	str	r3, [r2, #112]	; 0x70
 8003288:	4b78      	ldr	r3, [pc, #480]	; (800346c <HAL_RCC_OscConfig+0x4e8>)
 800328a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328c:	4a77      	ldr	r2, [pc, #476]	; (800346c <HAL_RCC_OscConfig+0x4e8>)
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	6713      	str	r3, [r2, #112]	; 0x70
 8003294:	e00b      	b.n	80032ae <HAL_RCC_OscConfig+0x32a>
 8003296:	4b75      	ldr	r3, [pc, #468]	; (800346c <HAL_RCC_OscConfig+0x4e8>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	4a74      	ldr	r2, [pc, #464]	; (800346c <HAL_RCC_OscConfig+0x4e8>)
 800329c:	f023 0301 	bic.w	r3, r3, #1
 80032a0:	6713      	str	r3, [r2, #112]	; 0x70
 80032a2:	4b72      	ldr	r3, [pc, #456]	; (800346c <HAL_RCC_OscConfig+0x4e8>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a6:	4a71      	ldr	r2, [pc, #452]	; (800346c <HAL_RCC_OscConfig+0x4e8>)
 80032a8:	f023 0304 	bic.w	r3, r3, #4
 80032ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d015      	beq.n	80032e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b6:	f7ff fab3 	bl	8002820 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032be:	f7ff faaf 	bl	8002820 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e0c5      	b.n	8003460 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d4:	4b65      	ldr	r3, [pc, #404]	; (800346c <HAL_RCC_OscConfig+0x4e8>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0ee      	beq.n	80032be <HAL_RCC_OscConfig+0x33a>
 80032e0:	e014      	b.n	800330c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e2:	f7ff fa9d 	bl	8002820 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e8:	e00a      	b.n	8003300 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ea:	f7ff fa99 	bl	8002820 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e0af      	b.n	8003460 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003300:	4b5a      	ldr	r3, [pc, #360]	; (800346c <HAL_RCC_OscConfig+0x4e8>)
 8003302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1ee      	bne.n	80032ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800330c:	7dfb      	ldrb	r3, [r7, #23]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d105      	bne.n	800331e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003312:	4b56      	ldr	r3, [pc, #344]	; (800346c <HAL_RCC_OscConfig+0x4e8>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	4a55      	ldr	r2, [pc, #340]	; (800346c <HAL_RCC_OscConfig+0x4e8>)
 8003318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800331c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 809b 	beq.w	800345e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003328:	4b50      	ldr	r3, [pc, #320]	; (800346c <HAL_RCC_OscConfig+0x4e8>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 030c 	and.w	r3, r3, #12
 8003330:	2b08      	cmp	r3, #8
 8003332:	d05c      	beq.n	80033ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d141      	bne.n	80033c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333c:	4b4c      	ldr	r3, [pc, #304]	; (8003470 <HAL_RCC_OscConfig+0x4ec>)
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003342:	f7ff fa6d 	bl	8002820 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334a:	f7ff fa69 	bl	8002820 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e081      	b.n	8003460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335c:	4b43      	ldr	r3, [pc, #268]	; (800346c <HAL_RCC_OscConfig+0x4e8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f0      	bne.n	800334a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69da      	ldr	r2, [r3, #28]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	019b      	lsls	r3, r3, #6
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	085b      	lsrs	r3, r3, #1
 8003380:	3b01      	subs	r3, #1
 8003382:	041b      	lsls	r3, r3, #16
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	061b      	lsls	r3, r3, #24
 800338c:	4937      	ldr	r1, [pc, #220]	; (800346c <HAL_RCC_OscConfig+0x4e8>)
 800338e:	4313      	orrs	r3, r2
 8003390:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003392:	4b37      	ldr	r3, [pc, #220]	; (8003470 <HAL_RCC_OscConfig+0x4ec>)
 8003394:	2201      	movs	r2, #1
 8003396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003398:	f7ff fa42 	bl	8002820 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a0:	f7ff fa3e 	bl	8002820 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e056      	b.n	8003460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b2:	4b2e      	ldr	r3, [pc, #184]	; (800346c <HAL_RCC_OscConfig+0x4e8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0x41c>
 80033be:	e04e      	b.n	800345e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c0:	4b2b      	ldr	r3, [pc, #172]	; (8003470 <HAL_RCC_OscConfig+0x4ec>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c6:	f7ff fa2b 	bl	8002820 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ce:	f7ff fa27 	bl	8002820 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e03f      	b.n	8003460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e0:	4b22      	ldr	r3, [pc, #136]	; (800346c <HAL_RCC_OscConfig+0x4e8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f0      	bne.n	80033ce <HAL_RCC_OscConfig+0x44a>
 80033ec:	e037      	b.n	800345e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e032      	b.n	8003460 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033fa:	4b1c      	ldr	r3, [pc, #112]	; (800346c <HAL_RCC_OscConfig+0x4e8>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d028      	beq.n	800345a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003412:	429a      	cmp	r2, r3
 8003414:	d121      	bne.n	800345a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003420:	429a      	cmp	r2, r3
 8003422:	d11a      	bne.n	800345a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800342a:	4013      	ands	r3, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003430:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003432:	4293      	cmp	r3, r2
 8003434:	d111      	bne.n	800345a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	085b      	lsrs	r3, r3, #1
 8003442:	3b01      	subs	r3, #1
 8003444:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003446:	429a      	cmp	r2, r3
 8003448:	d107      	bne.n	800345a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003456:	429a      	cmp	r2, r3
 8003458:	d001      	beq.n	800345e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40007000 	.word	0x40007000
 800346c:	40023800 	.word	0x40023800
 8003470:	42470060 	.word	0x42470060

08003474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0cc      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003488:	4b68      	ldr	r3, [pc, #416]	; (800362c <HAL_RCC_ClockConfig+0x1b8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d90c      	bls.n	80034b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003496:	4b65      	ldr	r3, [pc, #404]	; (800362c <HAL_RCC_ClockConfig+0x1b8>)
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800349e:	4b63      	ldr	r3, [pc, #396]	; (800362c <HAL_RCC_ClockConfig+0x1b8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0b8      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d020      	beq.n	80034fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034c8:	4b59      	ldr	r3, [pc, #356]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	4a58      	ldr	r2, [pc, #352]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e0:	4b53      	ldr	r3, [pc, #332]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	4a52      	ldr	r2, [pc, #328]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ec:	4b50      	ldr	r3, [pc, #320]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	494d      	ldr	r1, [pc, #308]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d044      	beq.n	8003594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003512:	4b47      	ldr	r3, [pc, #284]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d119      	bne.n	8003552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e07f      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d003      	beq.n	8003532 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800352e:	2b03      	cmp	r3, #3
 8003530:	d107      	bne.n	8003542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003532:	4b3f      	ldr	r3, [pc, #252]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e06f      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003542:	4b3b      	ldr	r3, [pc, #236]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e067      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003552:	4b37      	ldr	r3, [pc, #220]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f023 0203 	bic.w	r2, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4934      	ldr	r1, [pc, #208]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	4313      	orrs	r3, r2
 8003562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003564:	f7ff f95c 	bl	8002820 <HAL_GetTick>
 8003568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356a:	e00a      	b.n	8003582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800356c:	f7ff f958 	bl	8002820 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f241 3288 	movw	r2, #5000	; 0x1388
 800357a:	4293      	cmp	r3, r2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e04f      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003582:	4b2b      	ldr	r3, [pc, #172]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 020c 	and.w	r2, r3, #12
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	429a      	cmp	r2, r3
 8003592:	d1eb      	bne.n	800356c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003594:	4b25      	ldr	r3, [pc, #148]	; (800362c <HAL_RCC_ClockConfig+0x1b8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d20c      	bcs.n	80035bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a2:	4b22      	ldr	r3, [pc, #136]	; (800362c <HAL_RCC_ClockConfig+0x1b8>)
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b20      	ldr	r3, [pc, #128]	; (800362c <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e032      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c8:	4b19      	ldr	r3, [pc, #100]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4916      	ldr	r1, [pc, #88]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035e6:	4b12      	ldr	r3, [pc, #72]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	490e      	ldr	r1, [pc, #56]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035fa:	f000 f821 	bl	8003640 <HAL_RCC_GetSysClockFreq>
 80035fe:	4602      	mov	r2, r0
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	091b      	lsrs	r3, r3, #4
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	490a      	ldr	r1, [pc, #40]	; (8003634 <HAL_RCC_ClockConfig+0x1c0>)
 800360c:	5ccb      	ldrb	r3, [r1, r3]
 800360e:	fa22 f303 	lsr.w	r3, r2, r3
 8003612:	4a09      	ldr	r2, [pc, #36]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 8003614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <HAL_RCC_ClockConfig+0x1c8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff f8bc 	bl	8002798 <HAL_InitTick>

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40023c00 	.word	0x40023c00
 8003630:	40023800 	.word	0x40023800
 8003634:	0800aa40 	.word	0x0800aa40
 8003638:	20000000 	.word	0x20000000
 800363c:	20000004 	.word	0x20000004

08003640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003640:	b5b0      	push	{r4, r5, r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003646:	2100      	movs	r1, #0
 8003648:	6079      	str	r1, [r7, #4]
 800364a:	2100      	movs	r1, #0
 800364c:	60f9      	str	r1, [r7, #12]
 800364e:	2100      	movs	r1, #0
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003652:	2100      	movs	r1, #0
 8003654:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003656:	4952      	ldr	r1, [pc, #328]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003658:	6889      	ldr	r1, [r1, #8]
 800365a:	f001 010c 	and.w	r1, r1, #12
 800365e:	2908      	cmp	r1, #8
 8003660:	d00d      	beq.n	800367e <HAL_RCC_GetSysClockFreq+0x3e>
 8003662:	2908      	cmp	r1, #8
 8003664:	f200 8094 	bhi.w	8003790 <HAL_RCC_GetSysClockFreq+0x150>
 8003668:	2900      	cmp	r1, #0
 800366a:	d002      	beq.n	8003672 <HAL_RCC_GetSysClockFreq+0x32>
 800366c:	2904      	cmp	r1, #4
 800366e:	d003      	beq.n	8003678 <HAL_RCC_GetSysClockFreq+0x38>
 8003670:	e08e      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003672:	4b4c      	ldr	r3, [pc, #304]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003674:	60bb      	str	r3, [r7, #8]
       break;
 8003676:	e08e      	b.n	8003796 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003678:	4b4b      	ldr	r3, [pc, #300]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x168>)
 800367a:	60bb      	str	r3, [r7, #8]
      break;
 800367c:	e08b      	b.n	8003796 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800367e:	4948      	ldr	r1, [pc, #288]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003680:	6849      	ldr	r1, [r1, #4]
 8003682:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003686:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003688:	4945      	ldr	r1, [pc, #276]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x160>)
 800368a:	6849      	ldr	r1, [r1, #4]
 800368c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003690:	2900      	cmp	r1, #0
 8003692:	d024      	beq.n	80036de <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003694:	4942      	ldr	r1, [pc, #264]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003696:	6849      	ldr	r1, [r1, #4]
 8003698:	0989      	lsrs	r1, r1, #6
 800369a:	4608      	mov	r0, r1
 800369c:	f04f 0100 	mov.w	r1, #0
 80036a0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80036a4:	f04f 0500 	mov.w	r5, #0
 80036a8:	ea00 0204 	and.w	r2, r0, r4
 80036ac:	ea01 0305 	and.w	r3, r1, r5
 80036b0:	493d      	ldr	r1, [pc, #244]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80036b2:	fb01 f003 	mul.w	r0, r1, r3
 80036b6:	2100      	movs	r1, #0
 80036b8:	fb01 f102 	mul.w	r1, r1, r2
 80036bc:	1844      	adds	r4, r0, r1
 80036be:	493a      	ldr	r1, [pc, #232]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80036c0:	fba2 0101 	umull	r0, r1, r2, r1
 80036c4:	1863      	adds	r3, r4, r1
 80036c6:	4619      	mov	r1, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	461a      	mov	r2, r3
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	f7fd fa8a 	bl	8000be8 <__aeabi_uldivmod>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4613      	mov	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	e04a      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036de:	4b30      	ldr	r3, [pc, #192]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	099b      	lsrs	r3, r3, #6
 80036e4:	461a      	mov	r2, r3
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036ee:	f04f 0100 	mov.w	r1, #0
 80036f2:	ea02 0400 	and.w	r4, r2, r0
 80036f6:	ea03 0501 	and.w	r5, r3, r1
 80036fa:	4620      	mov	r0, r4
 80036fc:	4629      	mov	r1, r5
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	014b      	lsls	r3, r1, #5
 8003708:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800370c:	0142      	lsls	r2, r0, #5
 800370e:	4610      	mov	r0, r2
 8003710:	4619      	mov	r1, r3
 8003712:	1b00      	subs	r0, r0, r4
 8003714:	eb61 0105 	sbc.w	r1, r1, r5
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	018b      	lsls	r3, r1, #6
 8003722:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003726:	0182      	lsls	r2, r0, #6
 8003728:	1a12      	subs	r2, r2, r0
 800372a:	eb63 0301 	sbc.w	r3, r3, r1
 800372e:	f04f 0000 	mov.w	r0, #0
 8003732:	f04f 0100 	mov.w	r1, #0
 8003736:	00d9      	lsls	r1, r3, #3
 8003738:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800373c:	00d0      	lsls	r0, r2, #3
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	1912      	adds	r2, r2, r4
 8003744:	eb45 0303 	adc.w	r3, r5, r3
 8003748:	f04f 0000 	mov.w	r0, #0
 800374c:	f04f 0100 	mov.w	r1, #0
 8003750:	0299      	lsls	r1, r3, #10
 8003752:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003756:	0290      	lsls	r0, r2, #10
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	4610      	mov	r0, r2
 800375e:	4619      	mov	r1, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	461a      	mov	r2, r3
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	f7fd fa3e 	bl	8000be8 <__aeabi_uldivmod>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4613      	mov	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	0c1b      	lsrs	r3, r3, #16
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	3301      	adds	r3, #1
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	fbb2 f3f3 	udiv	r3, r2, r3
 800378c:	60bb      	str	r3, [r7, #8]
      break;
 800378e:	e002      	b.n	8003796 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003790:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003792:	60bb      	str	r3, [r7, #8]
      break;
 8003794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003796:	68bb      	ldr	r3, [r7, #8]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bdb0      	pop	{r4, r5, r7, pc}
 80037a0:	40023800 	.word	0x40023800
 80037a4:	00f42400 	.word	0x00f42400
 80037a8:	017d7840 	.word	0x017d7840

080037ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b0:	4b03      	ldr	r3, [pc, #12]	; (80037c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037b2:	681b      	ldr	r3, [r3, #0]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	20000000 	.word	0x20000000

080037c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037c8:	f7ff fff0 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 80037cc:	4602      	mov	r2, r0
 80037ce:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	0a9b      	lsrs	r3, r3, #10
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	4903      	ldr	r1, [pc, #12]	; (80037e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037da:	5ccb      	ldrb	r3, [r1, r3]
 80037dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40023800 	.word	0x40023800
 80037e8:	0800aa50 	.word	0x0800aa50

080037ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037f0:	f7ff ffdc 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4b05      	ldr	r3, [pc, #20]	; (800380c <HAL_RCC_GetPCLK2Freq+0x20>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	0b5b      	lsrs	r3, r3, #13
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	4903      	ldr	r1, [pc, #12]	; (8003810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003802:	5ccb      	ldrb	r3, [r1, r3]
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003808:	4618      	mov	r0, r3
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40023800 	.word	0x40023800
 8003810:	0800aa50 	.word	0x0800aa50

08003814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e041      	b.n	80038aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fe fd02 	bl	8002244 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3304      	adds	r3, #4
 8003850:	4619      	mov	r1, r3
 8003852:	4610      	mov	r0, r2
 8003854:	f000 ff8a 	bl	800476c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e041      	b.n	8003948 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d106      	bne.n	80038de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7fe fdbf 	bl	800245c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2202      	movs	r2, #2
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3304      	adds	r3, #4
 80038ee:	4619      	mov	r1, r3
 80038f0:	4610      	mov	r0, r2
 80038f2:	f000 ff3b 	bl	800476c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d109      	bne.n	8003974 <HAL_TIM_PWM_Start+0x24>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b01      	cmp	r3, #1
 800396a:	bf14      	ite	ne
 800396c:	2301      	movne	r3, #1
 800396e:	2300      	moveq	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	e022      	b.n	80039ba <HAL_TIM_PWM_Start+0x6a>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2b04      	cmp	r3, #4
 8003978:	d109      	bne.n	800398e <HAL_TIM_PWM_Start+0x3e>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b01      	cmp	r3, #1
 8003984:	bf14      	ite	ne
 8003986:	2301      	movne	r3, #1
 8003988:	2300      	moveq	r3, #0
 800398a:	b2db      	uxtb	r3, r3
 800398c:	e015      	b.n	80039ba <HAL_TIM_PWM_Start+0x6a>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b08      	cmp	r3, #8
 8003992:	d109      	bne.n	80039a8 <HAL_TIM_PWM_Start+0x58>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b01      	cmp	r3, #1
 800399e:	bf14      	ite	ne
 80039a0:	2301      	movne	r3, #1
 80039a2:	2300      	moveq	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	e008      	b.n	80039ba <HAL_TIM_PWM_Start+0x6a>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	bf14      	ite	ne
 80039b4:	2301      	movne	r3, #1
 80039b6:	2300      	moveq	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e07c      	b.n	8003abc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d104      	bne.n	80039d2 <HAL_TIM_PWM_Start+0x82>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039d0:	e013      	b.n	80039fa <HAL_TIM_PWM_Start+0xaa>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d104      	bne.n	80039e2 <HAL_TIM_PWM_Start+0x92>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039e0:	e00b      	b.n	80039fa <HAL_TIM_PWM_Start+0xaa>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d104      	bne.n	80039f2 <HAL_TIM_PWM_Start+0xa2>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039f0:	e003      	b.n	80039fa <HAL_TIM_PWM_Start+0xaa>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2202      	movs	r2, #2
 80039f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2201      	movs	r2, #1
 8003a00:	6839      	ldr	r1, [r7, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f001 fac6 	bl	8004f94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a2d      	ldr	r2, [pc, #180]	; (8003ac4 <HAL_TIM_PWM_Start+0x174>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d004      	beq.n	8003a1c <HAL_TIM_PWM_Start+0xcc>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a2c      	ldr	r2, [pc, #176]	; (8003ac8 <HAL_TIM_PWM_Start+0x178>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d101      	bne.n	8003a20 <HAL_TIM_PWM_Start+0xd0>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <HAL_TIM_PWM_Start+0xd2>
 8003a20:	2300      	movs	r3, #0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a22      	ldr	r2, [pc, #136]	; (8003ac4 <HAL_TIM_PWM_Start+0x174>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d022      	beq.n	8003a86 <HAL_TIM_PWM_Start+0x136>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a48:	d01d      	beq.n	8003a86 <HAL_TIM_PWM_Start+0x136>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a1f      	ldr	r2, [pc, #124]	; (8003acc <HAL_TIM_PWM_Start+0x17c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d018      	beq.n	8003a86 <HAL_TIM_PWM_Start+0x136>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a1d      	ldr	r2, [pc, #116]	; (8003ad0 <HAL_TIM_PWM_Start+0x180>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d013      	beq.n	8003a86 <HAL_TIM_PWM_Start+0x136>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a1c      	ldr	r2, [pc, #112]	; (8003ad4 <HAL_TIM_PWM_Start+0x184>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00e      	beq.n	8003a86 <HAL_TIM_PWM_Start+0x136>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a16      	ldr	r2, [pc, #88]	; (8003ac8 <HAL_TIM_PWM_Start+0x178>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d009      	beq.n	8003a86 <HAL_TIM_PWM_Start+0x136>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a18      	ldr	r2, [pc, #96]	; (8003ad8 <HAL_TIM_PWM_Start+0x188>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d004      	beq.n	8003a86 <HAL_TIM_PWM_Start+0x136>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a16      	ldr	r2, [pc, #88]	; (8003adc <HAL_TIM_PWM_Start+0x18c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d111      	bne.n	8003aaa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b06      	cmp	r3, #6
 8003a96:	d010      	beq.n	8003aba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0201 	orr.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa8:	e007      	b.n	8003aba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f042 0201 	orr.w	r2, r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40010000 	.word	0x40010000
 8003ac8:	40010400 	.word	0x40010400
 8003acc:	40000400 	.word	0x40000400
 8003ad0:	40000800 	.word	0x40000800
 8003ad4:	40000c00 	.word	0x40000c00
 8003ad8:	40014000 	.word	0x40014000
 8003adc:	40001800 	.word	0x40001800

08003ae0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e041      	b.n	8003b76 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d106      	bne.n	8003b0c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fe fc58 	bl	80023bc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4610      	mov	r0, r2
 8003b20:	f000 fe24 	bl	800476c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d104      	bne.n	8003b9e <HAL_TIM_IC_Start_IT+0x1e>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	e013      	b.n	8003bc6 <HAL_TIM_IC_Start_IT+0x46>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d104      	bne.n	8003bae <HAL_TIM_IC_Start_IT+0x2e>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	e00b      	b.n	8003bc6 <HAL_TIM_IC_Start_IT+0x46>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d104      	bne.n	8003bbe <HAL_TIM_IC_Start_IT+0x3e>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	e003      	b.n	8003bc6 <HAL_TIM_IC_Start_IT+0x46>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d104      	bne.n	8003bd8 <HAL_TIM_IC_Start_IT+0x58>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	e013      	b.n	8003c00 <HAL_TIM_IC_Start_IT+0x80>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d104      	bne.n	8003be8 <HAL_TIM_IC_Start_IT+0x68>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	e00b      	b.n	8003c00 <HAL_TIM_IC_Start_IT+0x80>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d104      	bne.n	8003bf8 <HAL_TIM_IC_Start_IT+0x78>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	e003      	b.n	8003c00 <HAL_TIM_IC_Start_IT+0x80>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c02:	7bbb      	ldrb	r3, [r7, #14]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d102      	bne.n	8003c0e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c08:	7b7b      	ldrb	r3, [r7, #13]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d001      	beq.n	8003c12 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e0cc      	b.n	8003dac <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d104      	bne.n	8003c22 <HAL_TIM_IC_Start_IT+0xa2>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c20:	e013      	b.n	8003c4a <HAL_TIM_IC_Start_IT+0xca>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d104      	bne.n	8003c32 <HAL_TIM_IC_Start_IT+0xb2>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c30:	e00b      	b.n	8003c4a <HAL_TIM_IC_Start_IT+0xca>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d104      	bne.n	8003c42 <HAL_TIM_IC_Start_IT+0xc2>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c40:	e003      	b.n	8003c4a <HAL_TIM_IC_Start_IT+0xca>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2202      	movs	r2, #2
 8003c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d104      	bne.n	8003c5a <HAL_TIM_IC_Start_IT+0xda>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c58:	e013      	b.n	8003c82 <HAL_TIM_IC_Start_IT+0x102>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d104      	bne.n	8003c6a <HAL_TIM_IC_Start_IT+0xea>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c68:	e00b      	b.n	8003c82 <HAL_TIM_IC_Start_IT+0x102>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d104      	bne.n	8003c7a <HAL_TIM_IC_Start_IT+0xfa>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c78:	e003      	b.n	8003c82 <HAL_TIM_IC_Start_IT+0x102>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b0c      	cmp	r3, #12
 8003c86:	d841      	bhi.n	8003d0c <HAL_TIM_IC_Start_IT+0x18c>
 8003c88:	a201      	add	r2, pc, #4	; (adr r2, 8003c90 <HAL_TIM_IC_Start_IT+0x110>)
 8003c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8e:	bf00      	nop
 8003c90:	08003cc5 	.word	0x08003cc5
 8003c94:	08003d0d 	.word	0x08003d0d
 8003c98:	08003d0d 	.word	0x08003d0d
 8003c9c:	08003d0d 	.word	0x08003d0d
 8003ca0:	08003cd7 	.word	0x08003cd7
 8003ca4:	08003d0d 	.word	0x08003d0d
 8003ca8:	08003d0d 	.word	0x08003d0d
 8003cac:	08003d0d 	.word	0x08003d0d
 8003cb0:	08003ce9 	.word	0x08003ce9
 8003cb4:	08003d0d 	.word	0x08003d0d
 8003cb8:	08003d0d 	.word	0x08003d0d
 8003cbc:	08003d0d 	.word	0x08003d0d
 8003cc0:	08003cfb 	.word	0x08003cfb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0202 	orr.w	r2, r2, #2
 8003cd2:	60da      	str	r2, [r3, #12]
      break;
 8003cd4:	e01d      	b.n	8003d12 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0204 	orr.w	r2, r2, #4
 8003ce4:	60da      	str	r2, [r3, #12]
      break;
 8003ce6:	e014      	b.n	8003d12 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0208 	orr.w	r2, r2, #8
 8003cf6:	60da      	str	r2, [r3, #12]
      break;
 8003cf8:	e00b      	b.n	8003d12 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 0210 	orr.w	r2, r2, #16
 8003d08:	60da      	str	r2, [r3, #12]
      break;
 8003d0a:	e002      	b.n	8003d12 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d10:	bf00      	nop
  }

  if (status == HAL_OK)
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d148      	bne.n	8003daa <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	6839      	ldr	r1, [r7, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f001 f937 	bl	8004f94 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a22      	ldr	r2, [pc, #136]	; (8003db4 <HAL_TIM_IC_Start_IT+0x234>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d022      	beq.n	8003d76 <HAL_TIM_IC_Start_IT+0x1f6>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d38:	d01d      	beq.n	8003d76 <HAL_TIM_IC_Start_IT+0x1f6>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a1e      	ldr	r2, [pc, #120]	; (8003db8 <HAL_TIM_IC_Start_IT+0x238>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d018      	beq.n	8003d76 <HAL_TIM_IC_Start_IT+0x1f6>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a1c      	ldr	r2, [pc, #112]	; (8003dbc <HAL_TIM_IC_Start_IT+0x23c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d013      	beq.n	8003d76 <HAL_TIM_IC_Start_IT+0x1f6>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a1b      	ldr	r2, [pc, #108]	; (8003dc0 <HAL_TIM_IC_Start_IT+0x240>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00e      	beq.n	8003d76 <HAL_TIM_IC_Start_IT+0x1f6>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a19      	ldr	r2, [pc, #100]	; (8003dc4 <HAL_TIM_IC_Start_IT+0x244>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d009      	beq.n	8003d76 <HAL_TIM_IC_Start_IT+0x1f6>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a18      	ldr	r2, [pc, #96]	; (8003dc8 <HAL_TIM_IC_Start_IT+0x248>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d004      	beq.n	8003d76 <HAL_TIM_IC_Start_IT+0x1f6>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a16      	ldr	r2, [pc, #88]	; (8003dcc <HAL_TIM_IC_Start_IT+0x24c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d111      	bne.n	8003d9a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2b06      	cmp	r3, #6
 8003d86:	d010      	beq.n	8003daa <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0201 	orr.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d98:	e007      	b.n	8003daa <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0201 	orr.w	r2, r2, #1
 8003da8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40010000 	.word	0x40010000
 8003db8:	40000400 	.word	0x40000400
 8003dbc:	40000800 	.word	0x40000800
 8003dc0:	40000c00 	.word	0x40000c00
 8003dc4:	40010400 	.word	0x40010400
 8003dc8:	40014000 	.word	0x40014000
 8003dcc:	40001800 	.word	0x40001800

08003dd0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e097      	b.n	8003f14 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d106      	bne.n	8003dfe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7fe fa45 	bl	8002288 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2202      	movs	r2, #2
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6812      	ldr	r2, [r2, #0]
 8003e10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e14:	f023 0307 	bic.w	r3, r3, #7
 8003e18:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3304      	adds	r3, #4
 8003e22:	4619      	mov	r1, r3
 8003e24:	4610      	mov	r0, r2
 8003e26:	f000 fca1 	bl	800476c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e52:	f023 0303 	bic.w	r3, r3, #3
 8003e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	021b      	lsls	r3, r3, #8
 8003e62:	4313      	orrs	r3, r2
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e70:	f023 030c 	bic.w	r3, r3, #12
 8003e74:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	021b      	lsls	r3, r3, #8
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	011a      	lsls	r2, r3, #4
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	031b      	lsls	r3, r3, #12
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003eae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003eb6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f2c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f34:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f3c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f44:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d110      	bne.n	8003f6e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d102      	bne.n	8003f58 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f52:	7b7b      	ldrb	r3, [r7, #13]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d001      	beq.n	8003f5c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e069      	b.n	8004030 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f6c:	e031      	b.n	8003fd2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d110      	bne.n	8003f96 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f74:	7bbb      	ldrb	r3, [r7, #14]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d102      	bne.n	8003f80 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f7a:	7b3b      	ldrb	r3, [r7, #12]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d001      	beq.n	8003f84 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e055      	b.n	8004030 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f94:	e01d      	b.n	8003fd2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d108      	bne.n	8003fae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f9c:	7bbb      	ldrb	r3, [r7, #14]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d105      	bne.n	8003fae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fa2:	7b7b      	ldrb	r3, [r7, #13]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d102      	bne.n	8003fae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fa8:	7b3b      	ldrb	r3, [r7, #12]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d001      	beq.n	8003fb2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e03e      	b.n	8004030 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_TIM_Encoder_Start+0xc4>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d008      	beq.n	8003ff0 <HAL_TIM_Encoder_Start+0xd4>
 8003fde:	e00f      	b.n	8004000 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 ffd3 	bl	8004f94 <TIM_CCxChannelCmd>
      break;
 8003fee:	e016      	b.n	800401e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	2104      	movs	r1, #4
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 ffcb 	bl	8004f94 <TIM_CCxChannelCmd>
      break;
 8003ffe:	e00e      	b.n	800401e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2201      	movs	r2, #1
 8004006:	2100      	movs	r1, #0
 8004008:	4618      	mov	r0, r3
 800400a:	f000 ffc3 	bl	8004f94 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2201      	movs	r2, #1
 8004014:	2104      	movs	r1, #4
 8004016:	4618      	mov	r0, r3
 8004018:	f000 ffbc 	bl	8004f94 <TIM_CCxChannelCmd>
      break;
 800401c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0201 	orr.w	r2, r2, #1
 800402c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b02      	cmp	r3, #2
 800404c:	d122      	bne.n	8004094 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b02      	cmp	r3, #2
 800405a:	d11b      	bne.n	8004094 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0202 	mvn.w	r2, #2
 8004064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fc ff4c 	bl	8000f18 <HAL_TIM_IC_CaptureCallback>
 8004080:	e005      	b.n	800408e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fb54 	bl	8004730 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fb5b 	bl	8004744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d122      	bne.n	80040e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d11b      	bne.n	80040e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0204 	mvn.w	r2, #4
 80040b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2202      	movs	r2, #2
 80040be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fc ff22 	bl	8000f18 <HAL_TIM_IC_CaptureCallback>
 80040d4:	e005      	b.n	80040e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fb2a 	bl	8004730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fb31 	bl	8004744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	d122      	bne.n	800413c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b08      	cmp	r3, #8
 8004102:	d11b      	bne.n	800413c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0208 	mvn.w	r2, #8
 800410c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2204      	movs	r2, #4
 8004112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7fc fef8 	bl	8000f18 <HAL_TIM_IC_CaptureCallback>
 8004128:	e005      	b.n	8004136 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fb00 	bl	8004730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fb07 	bl	8004744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	f003 0310 	and.w	r3, r3, #16
 8004146:	2b10      	cmp	r3, #16
 8004148:	d122      	bne.n	8004190 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0310 	and.w	r3, r3, #16
 8004154:	2b10      	cmp	r3, #16
 8004156:	d11b      	bne.n	8004190 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f06f 0210 	mvn.w	r2, #16
 8004160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2208      	movs	r2, #8
 8004166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7fc fece 	bl	8000f18 <HAL_TIM_IC_CaptureCallback>
 800417c:	e005      	b.n	800418a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fad6 	bl	8004730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 fadd 	bl	8004744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b01      	cmp	r3, #1
 800419c:	d10e      	bne.n	80041bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d107      	bne.n	80041bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f06f 0201 	mvn.w	r2, #1
 80041b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 fab0 	bl	800471c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c6:	2b80      	cmp	r3, #128	; 0x80
 80041c8:	d10e      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d4:	2b80      	cmp	r3, #128	; 0x80
 80041d6:	d107      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 ffd4 	bl	8005190 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f2:	2b40      	cmp	r3, #64	; 0x40
 80041f4:	d10e      	bne.n	8004214 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004200:	2b40      	cmp	r3, #64	; 0x40
 8004202:	d107      	bne.n	8004214 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800420c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 faa2 	bl	8004758 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b20      	cmp	r3, #32
 8004220:	d10e      	bne.n	8004240 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0320 	and.w	r3, r3, #32
 800422c:	2b20      	cmp	r3, #32
 800422e:	d107      	bne.n	8004240 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f06f 0220 	mvn.w	r2, #32
 8004238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 ff9e 	bl	800517c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004240:	bf00      	nop
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800425e:	2b01      	cmp	r3, #1
 8004260:	d101      	bne.n	8004266 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004262:	2302      	movs	r3, #2
 8004264:	e088      	b.n	8004378 <HAL_TIM_IC_ConfigChannel+0x130>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d11b      	bne.n	80042ac <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6818      	ldr	r0, [r3, #0]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	6819      	ldr	r1, [r3, #0]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f000 fcc2 	bl	8004c0c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699a      	ldr	r2, [r3, #24]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 020c 	bic.w	r2, r2, #12
 8004296:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6999      	ldr	r1, [r3, #24]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	619a      	str	r2, [r3, #24]
 80042aa:	e060      	b.n	800436e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d11c      	bne.n	80042ec <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6818      	ldr	r0, [r3, #0]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	6819      	ldr	r1, [r3, #0]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f000 fd46 	bl	8004d52 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699a      	ldr	r2, [r3, #24]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80042d4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6999      	ldr	r1, [r3, #24]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	021a      	lsls	r2, r3, #8
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	619a      	str	r2, [r3, #24]
 80042ea:	e040      	b.n	800436e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d11b      	bne.n	800432a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6818      	ldr	r0, [r3, #0]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	6819      	ldr	r1, [r3, #0]
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f000 fd93 	bl	8004e2c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69da      	ldr	r2, [r3, #28]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 020c 	bic.w	r2, r2, #12
 8004314:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69d9      	ldr	r1, [r3, #28]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	61da      	str	r2, [r3, #28]
 8004328:	e021      	b.n	800436e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b0c      	cmp	r3, #12
 800432e:	d11c      	bne.n	800436a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6818      	ldr	r0, [r3, #0]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	6819      	ldr	r1, [r3, #0]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f000 fdb0 	bl	8004ea4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	69da      	ldr	r2, [r3, #28]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004352:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	69d9      	ldr	r1, [r3, #28]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	021a      	lsls	r2, r3, #8
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	61da      	str	r2, [r3, #28]
 8004368:	e001      	b.n	800436e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004376:	7dfb      	ldrb	r3, [r7, #23]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800438c:	2300      	movs	r3, #0
 800438e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004396:	2b01      	cmp	r3, #1
 8004398:	d101      	bne.n	800439e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800439a:	2302      	movs	r3, #2
 800439c:	e0ae      	b.n	80044fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b0c      	cmp	r3, #12
 80043aa:	f200 809f 	bhi.w	80044ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043ae:	a201      	add	r2, pc, #4	; (adr r2, 80043b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b4:	080043e9 	.word	0x080043e9
 80043b8:	080044ed 	.word	0x080044ed
 80043bc:	080044ed 	.word	0x080044ed
 80043c0:	080044ed 	.word	0x080044ed
 80043c4:	08004429 	.word	0x08004429
 80043c8:	080044ed 	.word	0x080044ed
 80043cc:	080044ed 	.word	0x080044ed
 80043d0:	080044ed 	.word	0x080044ed
 80043d4:	0800446b 	.word	0x0800446b
 80043d8:	080044ed 	.word	0x080044ed
 80043dc:	080044ed 	.word	0x080044ed
 80043e0:	080044ed 	.word	0x080044ed
 80043e4:	080044ab 	.word	0x080044ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fa5c 	bl	80048ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699a      	ldr	r2, [r3, #24]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0208 	orr.w	r2, r2, #8
 8004402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699a      	ldr	r2, [r3, #24]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0204 	bic.w	r2, r2, #4
 8004412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6999      	ldr	r1, [r3, #24]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	691a      	ldr	r2, [r3, #16]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	619a      	str	r2, [r3, #24]
      break;
 8004426:	e064      	b.n	80044f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68b9      	ldr	r1, [r7, #8]
 800442e:	4618      	mov	r0, r3
 8004430:	f000 faac 	bl	800498c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699a      	ldr	r2, [r3, #24]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	699a      	ldr	r2, [r3, #24]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6999      	ldr	r1, [r3, #24]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	021a      	lsls	r2, r3, #8
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	619a      	str	r2, [r3, #24]
      break;
 8004468:	e043      	b.n	80044f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68b9      	ldr	r1, [r7, #8]
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fb01 	bl	8004a78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69da      	ldr	r2, [r3, #28]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 0208 	orr.w	r2, r2, #8
 8004484:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69da      	ldr	r2, [r3, #28]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0204 	bic.w	r2, r2, #4
 8004494:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69d9      	ldr	r1, [r3, #28]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	691a      	ldr	r2, [r3, #16]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	61da      	str	r2, [r3, #28]
      break;
 80044a8:	e023      	b.n	80044f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68b9      	ldr	r1, [r7, #8]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 fb55 	bl	8004b60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69da      	ldr	r2, [r3, #28]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	69da      	ldr	r2, [r3, #28]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	69d9      	ldr	r1, [r3, #28]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	021a      	lsls	r2, r3, #8
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	61da      	str	r2, [r3, #28]
      break;
 80044ea:	e002      	b.n	80044f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	75fb      	strb	r3, [r7, #23]
      break;
 80044f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <HAL_TIM_ConfigClockSource+0x1c>
 800451c:	2302      	movs	r3, #2
 800451e:	e0b4      	b.n	800468a <HAL_TIM_ConfigClockSource+0x186>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800453e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004546:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004558:	d03e      	beq.n	80045d8 <HAL_TIM_ConfigClockSource+0xd4>
 800455a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800455e:	f200 8087 	bhi.w	8004670 <HAL_TIM_ConfigClockSource+0x16c>
 8004562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004566:	f000 8086 	beq.w	8004676 <HAL_TIM_ConfigClockSource+0x172>
 800456a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456e:	d87f      	bhi.n	8004670 <HAL_TIM_ConfigClockSource+0x16c>
 8004570:	2b70      	cmp	r3, #112	; 0x70
 8004572:	d01a      	beq.n	80045aa <HAL_TIM_ConfigClockSource+0xa6>
 8004574:	2b70      	cmp	r3, #112	; 0x70
 8004576:	d87b      	bhi.n	8004670 <HAL_TIM_ConfigClockSource+0x16c>
 8004578:	2b60      	cmp	r3, #96	; 0x60
 800457a:	d050      	beq.n	800461e <HAL_TIM_ConfigClockSource+0x11a>
 800457c:	2b60      	cmp	r3, #96	; 0x60
 800457e:	d877      	bhi.n	8004670 <HAL_TIM_ConfigClockSource+0x16c>
 8004580:	2b50      	cmp	r3, #80	; 0x50
 8004582:	d03c      	beq.n	80045fe <HAL_TIM_ConfigClockSource+0xfa>
 8004584:	2b50      	cmp	r3, #80	; 0x50
 8004586:	d873      	bhi.n	8004670 <HAL_TIM_ConfigClockSource+0x16c>
 8004588:	2b40      	cmp	r3, #64	; 0x40
 800458a:	d058      	beq.n	800463e <HAL_TIM_ConfigClockSource+0x13a>
 800458c:	2b40      	cmp	r3, #64	; 0x40
 800458e:	d86f      	bhi.n	8004670 <HAL_TIM_ConfigClockSource+0x16c>
 8004590:	2b30      	cmp	r3, #48	; 0x30
 8004592:	d064      	beq.n	800465e <HAL_TIM_ConfigClockSource+0x15a>
 8004594:	2b30      	cmp	r3, #48	; 0x30
 8004596:	d86b      	bhi.n	8004670 <HAL_TIM_ConfigClockSource+0x16c>
 8004598:	2b20      	cmp	r3, #32
 800459a:	d060      	beq.n	800465e <HAL_TIM_ConfigClockSource+0x15a>
 800459c:	2b20      	cmp	r3, #32
 800459e:	d867      	bhi.n	8004670 <HAL_TIM_ConfigClockSource+0x16c>
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d05c      	beq.n	800465e <HAL_TIM_ConfigClockSource+0x15a>
 80045a4:	2b10      	cmp	r3, #16
 80045a6:	d05a      	beq.n	800465e <HAL_TIM_ConfigClockSource+0x15a>
 80045a8:	e062      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	6899      	ldr	r1, [r3, #8]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f000 fccb 	bl	8004f54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	609a      	str	r2, [r3, #8]
      break;
 80045d6:	e04f      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	6899      	ldr	r1, [r3, #8]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f000 fcb4 	bl	8004f54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045fa:	609a      	str	r2, [r3, #8]
      break;
 80045fc:	e03c      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6818      	ldr	r0, [r3, #0]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	6859      	ldr	r1, [r3, #4]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	461a      	mov	r2, r3
 800460c:	f000 fb72 	bl	8004cf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2150      	movs	r1, #80	; 0x50
 8004616:	4618      	mov	r0, r3
 8004618:	f000 fc81 	bl	8004f1e <TIM_ITRx_SetConfig>
      break;
 800461c:	e02c      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6818      	ldr	r0, [r3, #0]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	6859      	ldr	r1, [r3, #4]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	461a      	mov	r2, r3
 800462c:	f000 fbce 	bl	8004dcc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2160      	movs	r1, #96	; 0x60
 8004636:	4618      	mov	r0, r3
 8004638:	f000 fc71 	bl	8004f1e <TIM_ITRx_SetConfig>
      break;
 800463c:	e01c      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6818      	ldr	r0, [r3, #0]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	6859      	ldr	r1, [r3, #4]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	461a      	mov	r2, r3
 800464c:	f000 fb52 	bl	8004cf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2140      	movs	r1, #64	; 0x40
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fc61 	bl	8004f1e <TIM_ITRx_SetConfig>
      break;
 800465c:	e00c      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4619      	mov	r1, r3
 8004668:	4610      	mov	r0, r2
 800466a:	f000 fc58 	bl	8004f1e <TIM_ITRx_SetConfig>
      break;
 800466e:	e003      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	73fb      	strb	r3, [r7, #15]
      break;
 8004674:	e000      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004676:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004688:	7bfb      	ldrb	r3, [r7, #15]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
	...

08004694 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b0c      	cmp	r3, #12
 80046a6:	d831      	bhi.n	800470c <HAL_TIM_ReadCapturedValue+0x78>
 80046a8:	a201      	add	r2, pc, #4	; (adr r2, 80046b0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80046aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ae:	bf00      	nop
 80046b0:	080046e5 	.word	0x080046e5
 80046b4:	0800470d 	.word	0x0800470d
 80046b8:	0800470d 	.word	0x0800470d
 80046bc:	0800470d 	.word	0x0800470d
 80046c0:	080046ef 	.word	0x080046ef
 80046c4:	0800470d 	.word	0x0800470d
 80046c8:	0800470d 	.word	0x0800470d
 80046cc:	0800470d 	.word	0x0800470d
 80046d0:	080046f9 	.word	0x080046f9
 80046d4:	0800470d 	.word	0x0800470d
 80046d8:	0800470d 	.word	0x0800470d
 80046dc:	0800470d 	.word	0x0800470d
 80046e0:	08004703 	.word	0x08004703
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ea:	60fb      	str	r3, [r7, #12]

      break;
 80046ec:	e00f      	b.n	800470e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	60fb      	str	r3, [r7, #12]

      break;
 80046f6:	e00a      	b.n	800470e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fe:	60fb      	str	r3, [r7, #12]

      break;
 8004700:	e005      	b.n	800470e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	60fb      	str	r3, [r7, #12]

      break;
 800470a:	e000      	b.n	800470e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800470c:	bf00      	nop
  }

  return tmpreg;
 800470e:	68fb      	ldr	r3, [r7, #12]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a40      	ldr	r2, [pc, #256]	; (8004880 <TIM_Base_SetConfig+0x114>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d013      	beq.n	80047ac <TIM_Base_SetConfig+0x40>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478a:	d00f      	beq.n	80047ac <TIM_Base_SetConfig+0x40>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a3d      	ldr	r2, [pc, #244]	; (8004884 <TIM_Base_SetConfig+0x118>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d00b      	beq.n	80047ac <TIM_Base_SetConfig+0x40>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a3c      	ldr	r2, [pc, #240]	; (8004888 <TIM_Base_SetConfig+0x11c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d007      	beq.n	80047ac <TIM_Base_SetConfig+0x40>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a3b      	ldr	r2, [pc, #236]	; (800488c <TIM_Base_SetConfig+0x120>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d003      	beq.n	80047ac <TIM_Base_SetConfig+0x40>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a3a      	ldr	r2, [pc, #232]	; (8004890 <TIM_Base_SetConfig+0x124>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d108      	bne.n	80047be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a2f      	ldr	r2, [pc, #188]	; (8004880 <TIM_Base_SetConfig+0x114>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d02b      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047cc:	d027      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a2c      	ldr	r2, [pc, #176]	; (8004884 <TIM_Base_SetConfig+0x118>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d023      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a2b      	ldr	r2, [pc, #172]	; (8004888 <TIM_Base_SetConfig+0x11c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d01f      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a2a      	ldr	r2, [pc, #168]	; (800488c <TIM_Base_SetConfig+0x120>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d01b      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a29      	ldr	r2, [pc, #164]	; (8004890 <TIM_Base_SetConfig+0x124>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d017      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a28      	ldr	r2, [pc, #160]	; (8004894 <TIM_Base_SetConfig+0x128>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d013      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a27      	ldr	r2, [pc, #156]	; (8004898 <TIM_Base_SetConfig+0x12c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00f      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a26      	ldr	r2, [pc, #152]	; (800489c <TIM_Base_SetConfig+0x130>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d00b      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a25      	ldr	r2, [pc, #148]	; (80048a0 <TIM_Base_SetConfig+0x134>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d007      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a24      	ldr	r2, [pc, #144]	; (80048a4 <TIM_Base_SetConfig+0x138>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d003      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a23      	ldr	r2, [pc, #140]	; (80048a8 <TIM_Base_SetConfig+0x13c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d108      	bne.n	8004830 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a0a      	ldr	r2, [pc, #40]	; (8004880 <TIM_Base_SetConfig+0x114>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d003      	beq.n	8004864 <TIM_Base_SetConfig+0xf8>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a0c      	ldr	r2, [pc, #48]	; (8004890 <TIM_Base_SetConfig+0x124>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d103      	bne.n	800486c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	615a      	str	r2, [r3, #20]
}
 8004872:	bf00      	nop
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40010000 	.word	0x40010000
 8004884:	40000400 	.word	0x40000400
 8004888:	40000800 	.word	0x40000800
 800488c:	40000c00 	.word	0x40000c00
 8004890:	40010400 	.word	0x40010400
 8004894:	40014000 	.word	0x40014000
 8004898:	40014400 	.word	0x40014400
 800489c:	40014800 	.word	0x40014800
 80048a0:	40001800 	.word	0x40001800
 80048a4:	40001c00 	.word	0x40001c00
 80048a8:	40002000 	.word	0x40002000

080048ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	f023 0201 	bic.w	r2, r3, #1
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0303 	bic.w	r3, r3, #3
 80048e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f023 0302 	bic.w	r3, r3, #2
 80048f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a20      	ldr	r2, [pc, #128]	; (8004984 <TIM_OC1_SetConfig+0xd8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d003      	beq.n	8004910 <TIM_OC1_SetConfig+0x64>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a1f      	ldr	r2, [pc, #124]	; (8004988 <TIM_OC1_SetConfig+0xdc>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d10c      	bne.n	800492a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f023 0308 	bic.w	r3, r3, #8
 8004916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f023 0304 	bic.w	r3, r3, #4
 8004928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a15      	ldr	r2, [pc, #84]	; (8004984 <TIM_OC1_SetConfig+0xd8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d003      	beq.n	800493a <TIM_OC1_SetConfig+0x8e>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a14      	ldr	r2, [pc, #80]	; (8004988 <TIM_OC1_SetConfig+0xdc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d111      	bne.n	800495e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	621a      	str	r2, [r3, #32]
}
 8004978:	bf00      	nop
 800497a:	371c      	adds	r7, #28
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	40010000 	.word	0x40010000
 8004988:	40010400 	.word	0x40010400

0800498c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	f023 0210 	bic.w	r2, r3, #16
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	021b      	lsls	r3, r3, #8
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f023 0320 	bic.w	r3, r3, #32
 80049d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a22      	ldr	r2, [pc, #136]	; (8004a70 <TIM_OC2_SetConfig+0xe4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d003      	beq.n	80049f4 <TIM_OC2_SetConfig+0x68>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a21      	ldr	r2, [pc, #132]	; (8004a74 <TIM_OC2_SetConfig+0xe8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d10d      	bne.n	8004a10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a17      	ldr	r2, [pc, #92]	; (8004a70 <TIM_OC2_SetConfig+0xe4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d003      	beq.n	8004a20 <TIM_OC2_SetConfig+0x94>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a16      	ldr	r2, [pc, #88]	; (8004a74 <TIM_OC2_SetConfig+0xe8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d113      	bne.n	8004a48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	621a      	str	r2, [r3, #32]
}
 8004a62:	bf00      	nop
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40010000 	.word	0x40010000
 8004a74:	40010400 	.word	0x40010400

08004a78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0303 	bic.w	r3, r3, #3
 8004aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a21      	ldr	r2, [pc, #132]	; (8004b58 <TIM_OC3_SetConfig+0xe0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d003      	beq.n	8004ade <TIM_OC3_SetConfig+0x66>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a20      	ldr	r2, [pc, #128]	; (8004b5c <TIM_OC3_SetConfig+0xe4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d10d      	bne.n	8004afa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ae4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a16      	ldr	r2, [pc, #88]	; (8004b58 <TIM_OC3_SetConfig+0xe0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d003      	beq.n	8004b0a <TIM_OC3_SetConfig+0x92>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a15      	ldr	r2, [pc, #84]	; (8004b5c <TIM_OC3_SetConfig+0xe4>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d113      	bne.n	8004b32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	011b      	lsls	r3, r3, #4
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	621a      	str	r2, [r3, #32]
}
 8004b4c:	bf00      	nop
 8004b4e:	371c      	adds	r7, #28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	40010000 	.word	0x40010000
 8004b5c:	40010400 	.word	0x40010400

08004b60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	021b      	lsls	r3, r3, #8
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004baa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	031b      	lsls	r3, r3, #12
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a12      	ldr	r2, [pc, #72]	; (8004c04 <TIM_OC4_SetConfig+0xa4>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d003      	beq.n	8004bc8 <TIM_OC4_SetConfig+0x68>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a11      	ldr	r2, [pc, #68]	; (8004c08 <TIM_OC4_SetConfig+0xa8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d109      	bne.n	8004bdc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	019b      	lsls	r3, r3, #6
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	621a      	str	r2, [r3, #32]
}
 8004bf6:	bf00      	nop
 8004bf8:	371c      	adds	r7, #28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	40010000 	.word	0x40010000
 8004c08:	40010400 	.word	0x40010400

08004c0c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	f023 0201 	bic.w	r2, r3, #1
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4a28      	ldr	r2, [pc, #160]	; (8004cd8 <TIM_TI1_SetConfig+0xcc>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d01b      	beq.n	8004c72 <TIM_TI1_SetConfig+0x66>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c40:	d017      	beq.n	8004c72 <TIM_TI1_SetConfig+0x66>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4a25      	ldr	r2, [pc, #148]	; (8004cdc <TIM_TI1_SetConfig+0xd0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d013      	beq.n	8004c72 <TIM_TI1_SetConfig+0x66>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4a24      	ldr	r2, [pc, #144]	; (8004ce0 <TIM_TI1_SetConfig+0xd4>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00f      	beq.n	8004c72 <TIM_TI1_SetConfig+0x66>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4a23      	ldr	r2, [pc, #140]	; (8004ce4 <TIM_TI1_SetConfig+0xd8>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00b      	beq.n	8004c72 <TIM_TI1_SetConfig+0x66>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4a22      	ldr	r2, [pc, #136]	; (8004ce8 <TIM_TI1_SetConfig+0xdc>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d007      	beq.n	8004c72 <TIM_TI1_SetConfig+0x66>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4a21      	ldr	r2, [pc, #132]	; (8004cec <TIM_TI1_SetConfig+0xe0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d003      	beq.n	8004c72 <TIM_TI1_SetConfig+0x66>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4a20      	ldr	r2, [pc, #128]	; (8004cf0 <TIM_TI1_SetConfig+0xe4>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d101      	bne.n	8004c76 <TIM_TI1_SetConfig+0x6a>
 8004c72:	2301      	movs	r3, #1
 8004c74:	e000      	b.n	8004c78 <TIM_TI1_SetConfig+0x6c>
 8004c76:	2300      	movs	r3, #0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d008      	beq.n	8004c8e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f023 0303 	bic.w	r3, r3, #3
 8004c82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	e003      	b.n	8004c96 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f043 0301 	orr.w	r3, r3, #1
 8004c94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f023 030a 	bic.w	r3, r3, #10
 8004cb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f003 030a 	and.w	r3, r3, #10
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	621a      	str	r2, [r3, #32]
}
 8004cca:	bf00      	nop
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40010000 	.word	0x40010000
 8004cdc:	40000400 	.word	0x40000400
 8004ce0:	40000800 	.word	0x40000800
 8004ce4:	40000c00 	.word	0x40000c00
 8004ce8:	40010400 	.word	0x40010400
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	40001800 	.word	0x40001800

08004cf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	f023 0201 	bic.w	r2, r3, #1
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f023 030a 	bic.w	r3, r3, #10
 8004d30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	621a      	str	r2, [r3, #32]
}
 8004d46:	bf00      	nop
 8004d48:	371c      	adds	r7, #28
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b087      	sub	sp, #28
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	607a      	str	r2, [r7, #4]
 8004d5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	f023 0210 	bic.w	r2, r3, #16
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	021b      	lsls	r3, r3, #8
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	031b      	lsls	r3, r3, #12
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004da4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	621a      	str	r2, [r3, #32]
}
 8004dc0:	bf00      	nop
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	f023 0210 	bic.w	r2, r3, #16
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004df6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	031b      	lsls	r3, r3, #12
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	011b      	lsls	r3, r3, #4
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	621a      	str	r2, [r3, #32]
}
 8004e20:	bf00      	nop
 8004e22:	371c      	adds	r7, #28
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f023 0303 	bic.w	r3, r3, #3
 8004e58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004e7c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	621a      	str	r2, [r3, #32]
}
 8004e98:	bf00      	nop
 8004e9a:	371c      	adds	r7, #28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	021b      	lsls	r3, r3, #8
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ee2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	031b      	lsls	r3, r3, #12
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004ef6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	031b      	lsls	r3, r3, #12
 8004efc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	621a      	str	r2, [r3, #32]
}
 8004f12:	bf00      	nop
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b085      	sub	sp, #20
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f043 0307 	orr.w	r3, r3, #7
 8004f40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	609a      	str	r2, [r3, #8]
}
 8004f48:	bf00      	nop
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	021a      	lsls	r2, r3, #8
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	431a      	orrs	r2, r3
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	609a      	str	r2, [r3, #8]
}
 8004f88:	bf00      	nop
 8004f8a:	371c      	adds	r7, #28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f003 031f 	and.w	r3, r3, #31
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a1a      	ldr	r2, [r3, #32]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	401a      	ands	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a1a      	ldr	r2, [r3, #32]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f003 031f 	and.w	r3, r3, #31
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	621a      	str	r2, [r3, #32]
}
 8004fd2:	bf00      	nop
 8004fd4:	371c      	adds	r7, #28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
	...

08004fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e05a      	b.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a21      	ldr	r2, [pc, #132]	; (80050bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d022      	beq.n	8005082 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005044:	d01d      	beq.n	8005082 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a1d      	ldr	r2, [pc, #116]	; (80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d018      	beq.n	8005082 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1b      	ldr	r2, [pc, #108]	; (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d013      	beq.n	8005082 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a1a      	ldr	r2, [pc, #104]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d00e      	beq.n	8005082 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a18      	ldr	r2, [pc, #96]	; (80050cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d009      	beq.n	8005082 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a17      	ldr	r2, [pc, #92]	; (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d004      	beq.n	8005082 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a15      	ldr	r2, [pc, #84]	; (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d10c      	bne.n	800509c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005088:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	4313      	orrs	r3, r2
 8005092:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	40010000 	.word	0x40010000
 80050c0:	40000400 	.word	0x40000400
 80050c4:	40000800 	.word	0x40000800
 80050c8:	40000c00 	.word	0x40000c00
 80050cc:	40010400 	.word	0x40010400
 80050d0:	40014000 	.word	0x40014000
 80050d4:	40001800 	.word	0x40001800

080050d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e03d      	b.n	8005170 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	4313      	orrs	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4313      	orrs	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	4313      	orrs	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e03f      	b.n	8005236 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d106      	bne.n	80051d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7fd f9c8 	bl	8002560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2224      	movs	r2, #36	; 0x24
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fe1f 	bl	8005e2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695a      	ldr	r2, [r3, #20]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800520c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800521c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2220      	movs	r2, #32
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b08a      	sub	sp, #40	; 0x28
 8005242:	af02      	add	r7, sp, #8
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	60b9      	str	r1, [r7, #8]
 8005248:	603b      	str	r3, [r7, #0]
 800524a:	4613      	mov	r3, r2
 800524c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800524e:	2300      	movs	r3, #0
 8005250:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b20      	cmp	r3, #32
 800525c:	d17c      	bne.n	8005358 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d002      	beq.n	800526a <HAL_UART_Transmit+0x2c>
 8005264:	88fb      	ldrh	r3, [r7, #6]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e075      	b.n	800535a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <HAL_UART_Transmit+0x3e>
 8005278:	2302      	movs	r3, #2
 800527a:	e06e      	b.n	800535a <HAL_UART_Transmit+0x11c>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2221      	movs	r2, #33	; 0x21
 800528e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005292:	f7fd fac5 	bl	8002820 <HAL_GetTick>
 8005296:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	88fa      	ldrh	r2, [r7, #6]
 800529c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	88fa      	ldrh	r2, [r7, #6]
 80052a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ac:	d108      	bne.n	80052c0 <HAL_UART_Transmit+0x82>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d104      	bne.n	80052c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	61bb      	str	r3, [r7, #24]
 80052be:	e003      	b.n	80052c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052c4:	2300      	movs	r3, #0
 80052c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80052d0:	e02a      	b.n	8005328 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2200      	movs	r2, #0
 80052da:	2180      	movs	r1, #128	; 0x80
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 fb63 	bl	80059a8 <UART_WaitOnFlagUntilTimeout>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e036      	b.n	800535a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10b      	bne.n	800530a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	461a      	mov	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005300:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	3302      	adds	r3, #2
 8005306:	61bb      	str	r3, [r7, #24]
 8005308:	e007      	b.n	800531a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	781a      	ldrb	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	3301      	adds	r3, #1
 8005318:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800531e:	b29b      	uxth	r3, r3
 8005320:	3b01      	subs	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800532c:	b29b      	uxth	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1cf      	bne.n	80052d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2200      	movs	r2, #0
 800533a:	2140      	movs	r1, #64	; 0x40
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 fb33 	bl	80059a8 <UART_WaitOnFlagUntilTimeout>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e006      	b.n	800535a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	e000      	b.n	800535a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005358:	2302      	movs	r3, #2
  }
}
 800535a:	4618      	mov	r0, r3
 800535c:	3720      	adds	r7, #32
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005362:	b480      	push	{r7}
 8005364:	b085      	sub	sp, #20
 8005366:	af00      	add	r7, sp, #0
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	4613      	mov	r3, r2
 800536e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b20      	cmp	r3, #32
 800537a:	d130      	bne.n	80053de <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <HAL_UART_Transmit_IT+0x26>
 8005382:	88fb      	ldrh	r3, [r7, #6]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e029      	b.n	80053e0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005392:	2b01      	cmp	r3, #1
 8005394:	d101      	bne.n	800539a <HAL_UART_Transmit_IT+0x38>
 8005396:	2302      	movs	r3, #2
 8005398:	e022      	b.n	80053e0 <HAL_UART_Transmit_IT+0x7e>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	88fa      	ldrh	r2, [r7, #6]
 80053ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	88fa      	ldrh	r2, [r7, #6]
 80053b2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2221      	movs	r2, #33	; 0x21
 80053be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68da      	ldr	r2, [r3, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80053d8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80053da:	2300      	movs	r3, #0
 80053dc:	e000      	b.n	80053e0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80053de:	2302      	movs	r3, #2
  }
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	4613      	mov	r3, r2
 80053f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b20      	cmp	r3, #32
 8005404:	d11d      	bne.n	8005442 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <HAL_UART_Receive_IT+0x26>
 800540c:	88fb      	ldrh	r3, [r7, #6]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e016      	b.n	8005444 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_UART_Receive_IT+0x38>
 8005420:	2302      	movs	r3, #2
 8005422:	e00f      	b.n	8005444 <HAL_UART_Receive_IT+0x58>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005432:	88fb      	ldrh	r3, [r7, #6]
 8005434:	461a      	mov	r2, r3
 8005436:	68b9      	ldr	r1, [r7, #8]
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 fb23 	bl	8005a84 <UART_Start_Receive_IT>
 800543e:	4603      	mov	r3, r0
 8005440:	e000      	b.n	8005444 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005442:	2302      	movs	r3, #2
  }
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b0ba      	sub	sp, #232	; 0xe8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005472:	2300      	movs	r3, #0
 8005474:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005478:	2300      	movs	r3, #0
 800547a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800547e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800548a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10f      	bne.n	80054b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005496:	f003 0320 	and.w	r3, r3, #32
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <HAL_UART_IRQHandler+0x66>
 800549e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a2:	f003 0320 	and.w	r3, r3, #32
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fc03 	bl	8005cb6 <UART_Receive_IT>
      return;
 80054b0:	e256      	b.n	8005960 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80054b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 80de 	beq.w	8005678 <HAL_UART_IRQHandler+0x22c>
 80054bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d106      	bne.n	80054d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 80d1 	beq.w	8005678 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00b      	beq.n	80054fa <HAL_UART_IRQHandler+0xae>
 80054e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d005      	beq.n	80054fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	f043 0201 	orr.w	r2, r3, #1
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00b      	beq.n	800551e <HAL_UART_IRQHandler+0xd2>
 8005506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	f043 0202 	orr.w	r2, r3, #2
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800551e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00b      	beq.n	8005542 <HAL_UART_IRQHandler+0xf6>
 800552a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	f043 0204 	orr.w	r2, r3, #4
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005546:	f003 0308 	and.w	r3, r3, #8
 800554a:	2b00      	cmp	r3, #0
 800554c:	d011      	beq.n	8005572 <HAL_UART_IRQHandler+0x126>
 800554e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	d105      	bne.n	8005566 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800555a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d005      	beq.n	8005572 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	f043 0208 	orr.w	r2, r3, #8
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 81ed 	beq.w	8005956 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800557c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005580:	f003 0320 	and.w	r3, r3, #32
 8005584:	2b00      	cmp	r3, #0
 8005586:	d008      	beq.n	800559a <HAL_UART_IRQHandler+0x14e>
 8005588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800558c:	f003 0320 	and.w	r3, r3, #32
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fb8e 	bl	8005cb6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a4:	2b40      	cmp	r3, #64	; 0x40
 80055a6:	bf0c      	ite	eq
 80055a8:	2301      	moveq	r3, #1
 80055aa:	2300      	movne	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	f003 0308 	and.w	r3, r3, #8
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d103      	bne.n	80055c6 <HAL_UART_IRQHandler+0x17a>
 80055be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d04f      	beq.n	8005666 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fa96 	bl	8005af8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d6:	2b40      	cmp	r3, #64	; 0x40
 80055d8:	d141      	bne.n	800565e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3314      	adds	r3, #20
 80055e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055e8:	e853 3f00 	ldrex	r3, [r3]
 80055ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3314      	adds	r3, #20
 8005602:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005606:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800560a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005612:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005616:	e841 2300 	strex	r3, r2, [r1]
 800561a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800561e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1d9      	bne.n	80055da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562a:	2b00      	cmp	r3, #0
 800562c:	d013      	beq.n	8005656 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	4a7d      	ldr	r2, [pc, #500]	; (8005828 <HAL_UART_IRQHandler+0x3dc>)
 8005634:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563a:	4618      	mov	r0, r3
 800563c:	f7fd faa1 	bl	8002b82 <HAL_DMA_Abort_IT>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d016      	beq.n	8005674 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005650:	4610      	mov	r0, r2
 8005652:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005654:	e00e      	b.n	8005674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f990 	bl	800597c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800565c:	e00a      	b.n	8005674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f98c 	bl	800597c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005664:	e006      	b.n	8005674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f988 	bl	800597c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005672:	e170      	b.n	8005956 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005674:	bf00      	nop
    return;
 8005676:	e16e      	b.n	8005956 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567c:	2b01      	cmp	r3, #1
 800567e:	f040 814a 	bne.w	8005916 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005686:	f003 0310 	and.w	r3, r3, #16
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 8143 	beq.w	8005916 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 813c 	beq.w	8005916 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800569e:	2300      	movs	r3, #0
 80056a0:	60bb      	str	r3, [r7, #8]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	60bb      	str	r3, [r7, #8]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	60bb      	str	r3, [r7, #8]
 80056b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056be:	2b40      	cmp	r3, #64	; 0x40
 80056c0:	f040 80b4 	bne.w	800582c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 8140 	beq.w	800595a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056e2:	429a      	cmp	r2, r3
 80056e4:	f080 8139 	bcs.w	800595a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056fa:	f000 8088 	beq.w	800580e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	330c      	adds	r3, #12
 8005704:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005708:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800570c:	e853 3f00 	ldrex	r3, [r3]
 8005710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005714:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800571c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	330c      	adds	r3, #12
 8005726:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800572a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800572e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005736:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800573a:	e841 2300 	strex	r3, r2, [r1]
 800573e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005742:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1d9      	bne.n	80056fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3314      	adds	r3, #20
 8005750:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005754:	e853 3f00 	ldrex	r3, [r3]
 8005758:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800575a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800575c:	f023 0301 	bic.w	r3, r3, #1
 8005760:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3314      	adds	r3, #20
 800576a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800576e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005772:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005774:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005776:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005780:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e1      	bne.n	800574a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3314      	adds	r3, #20
 800578c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005790:	e853 3f00 	ldrex	r3, [r3]
 8005794:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800579c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3314      	adds	r3, #20
 80057a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80057aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80057ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80057b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057b2:	e841 2300 	strex	r3, r2, [r1]
 80057b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1e3      	bne.n	8005786 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	330c      	adds	r3, #12
 80057d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057de:	f023 0310 	bic.w	r3, r3, #16
 80057e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	330c      	adds	r3, #12
 80057ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80057f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80057f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057f8:	e841 2300 	strex	r3, r2, [r1]
 80057fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1e3      	bne.n	80057cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005808:	4618      	mov	r0, r3
 800580a:	f7fd f94a 	bl	8002aa2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005816:	b29b      	uxth	r3, r3
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	b29b      	uxth	r3, r3
 800581c:	4619      	mov	r1, r3
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f8b6 	bl	8005990 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005824:	e099      	b.n	800595a <HAL_UART_IRQHandler+0x50e>
 8005826:	bf00      	nop
 8005828:	08005bbf 	.word	0x08005bbf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005834:	b29b      	uxth	r3, r3
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005840:	b29b      	uxth	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 808b 	beq.w	800595e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005848:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 8086 	beq.w	800595e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	330c      	adds	r3, #12
 8005858:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585c:	e853 3f00 	ldrex	r3, [r3]
 8005860:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005864:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005868:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	330c      	adds	r3, #12
 8005872:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005876:	647a      	str	r2, [r7, #68]	; 0x44
 8005878:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800587c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800587e:	e841 2300 	strex	r3, r2, [r1]
 8005882:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1e3      	bne.n	8005852 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3314      	adds	r3, #20
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	e853 3f00 	ldrex	r3, [r3]
 8005898:	623b      	str	r3, [r7, #32]
   return(result);
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	f023 0301 	bic.w	r3, r3, #1
 80058a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3314      	adds	r3, #20
 80058aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80058ae:	633a      	str	r2, [r7, #48]	; 0x30
 80058b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058b6:	e841 2300 	strex	r3, r2, [r1]
 80058ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1e3      	bne.n	800588a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2220      	movs	r2, #32
 80058c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	330c      	adds	r3, #12
 80058d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	60fb      	str	r3, [r7, #12]
   return(result);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 0310 	bic.w	r3, r3, #16
 80058e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	330c      	adds	r3, #12
 80058f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80058f4:	61fa      	str	r2, [r7, #28]
 80058f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f8:	69b9      	ldr	r1, [r7, #24]
 80058fa:	69fa      	ldr	r2, [r7, #28]
 80058fc:	e841 2300 	strex	r3, r2, [r1]
 8005900:	617b      	str	r3, [r7, #20]
   return(result);
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1e3      	bne.n	80058d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005908:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800590c:	4619      	mov	r1, r3
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f83e 	bl	8005990 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005914:	e023      	b.n	800595e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591e:	2b00      	cmp	r3, #0
 8005920:	d009      	beq.n	8005936 <HAL_UART_IRQHandler+0x4ea>
 8005922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f959 	bl	8005be6 <UART_Transmit_IT>
    return;
 8005934:	e014      	b.n	8005960 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800593a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00e      	beq.n	8005960 <HAL_UART_IRQHandler+0x514>
 8005942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	d008      	beq.n	8005960 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f999 	bl	8005c86 <UART_EndTransmit_IT>
    return;
 8005954:	e004      	b.n	8005960 <HAL_UART_IRQHandler+0x514>
    return;
 8005956:	bf00      	nop
 8005958:	e002      	b.n	8005960 <HAL_UART_IRQHandler+0x514>
      return;
 800595a:	bf00      	nop
 800595c:	e000      	b.n	8005960 <HAL_UART_IRQHandler+0x514>
      return;
 800595e:	bf00      	nop
  }
}
 8005960:	37e8      	adds	r7, #232	; 0xe8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop

08005968 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	460b      	mov	r3, r1
 800599a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b090      	sub	sp, #64	; 0x40
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	603b      	str	r3, [r7, #0]
 80059b4:	4613      	mov	r3, r2
 80059b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059b8:	e050      	b.n	8005a5c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c0:	d04c      	beq.n	8005a5c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d007      	beq.n	80059d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80059c8:	f7fc ff2a 	bl	8002820 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d241      	bcs.n	8005a5c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	330c      	adds	r3, #12
 80059de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e2:	e853 3f00 	ldrex	r3, [r3]
 80059e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	330c      	adds	r3, #12
 80059f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059f8:	637a      	str	r2, [r7, #52]	; 0x34
 80059fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a00:	e841 2300 	strex	r3, r2, [r1]
 8005a04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e5      	bne.n	80059d8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3314      	adds	r3, #20
 8005a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	e853 3f00 	ldrex	r3, [r3]
 8005a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	f023 0301 	bic.w	r3, r3, #1
 8005a22:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3314      	adds	r3, #20
 8005a2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a2c:	623a      	str	r2, [r7, #32]
 8005a2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a30:	69f9      	ldr	r1, [r7, #28]
 8005a32:	6a3a      	ldr	r2, [r7, #32]
 8005a34:	e841 2300 	strex	r3, r2, [r1]
 8005a38:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e5      	bne.n	8005a0c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e00f      	b.n	8005a7c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	4013      	ands	r3, r2
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	bf0c      	ite	eq
 8005a6c:	2301      	moveq	r3, #1
 8005a6e:	2300      	movne	r3, #0
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	461a      	mov	r2, r3
 8005a74:	79fb      	ldrb	r3, [r7, #7]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d09f      	beq.n	80059ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3740      	adds	r7, #64	; 0x40
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	88fa      	ldrh	r2, [r7, #6]
 8005a9c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	88fa      	ldrh	r2, [r7, #6]
 8005aa2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2222      	movs	r2, #34	; 0x22
 8005aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ac8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695a      	ldr	r2, [r3, #20]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0201 	orr.w	r2, r2, #1
 8005ad8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f042 0220 	orr.w	r2, r2, #32
 8005ae8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b095      	sub	sp, #84	; 0x54
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	330c      	adds	r3, #12
 8005b06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0a:	e853 3f00 	ldrex	r3, [r3]
 8005b0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	330c      	adds	r3, #12
 8005b1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b20:	643a      	str	r2, [r7, #64]	; 0x40
 8005b22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b28:	e841 2300 	strex	r3, r2, [r1]
 8005b2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1e5      	bne.n	8005b00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3314      	adds	r3, #20
 8005b3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	e853 3f00 	ldrex	r3, [r3]
 8005b42:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	f023 0301 	bic.w	r3, r3, #1
 8005b4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	3314      	adds	r3, #20
 8005b52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b5c:	e841 2300 	strex	r3, r2, [r1]
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1e5      	bne.n	8005b34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d119      	bne.n	8005ba4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	330c      	adds	r3, #12
 8005b76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	e853 3f00 	ldrex	r3, [r3]
 8005b7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f023 0310 	bic.w	r3, r3, #16
 8005b86:	647b      	str	r3, [r7, #68]	; 0x44
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	330c      	adds	r3, #12
 8005b8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b90:	61ba      	str	r2, [r7, #24]
 8005b92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b94:	6979      	ldr	r1, [r7, #20]
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	e841 2300 	strex	r3, r2, [r1]
 8005b9c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1e5      	bne.n	8005b70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005bb2:	bf00      	nop
 8005bb4:	3754      	adds	r7, #84	; 0x54
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b084      	sub	sp, #16
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f7ff fecf 	bl	800597c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bde:	bf00      	nop
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b085      	sub	sp, #20
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b21      	cmp	r3, #33	; 0x21
 8005bf8:	d13e      	bne.n	8005c78 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c02:	d114      	bne.n	8005c2e <UART_Transmit_IT+0x48>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d110      	bne.n	8005c2e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c20:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	1c9a      	adds	r2, r3, #2
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	621a      	str	r2, [r3, #32]
 8005c2c:	e008      	b.n	8005c40 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	1c59      	adds	r1, r3, #1
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6211      	str	r1, [r2, #32]
 8005c38:	781a      	ldrb	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10f      	bne.n	8005c74 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c62:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c72:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	e000      	b.n	8005c7a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c78:	2302      	movs	r3, #2
  }
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b082      	sub	sp, #8
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68da      	ldr	r2, [r3, #12]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7ff fe5e 	bl	8005968 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b08c      	sub	sp, #48	; 0x30
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b22      	cmp	r3, #34	; 0x22
 8005cc8:	f040 80ab 	bne.w	8005e22 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd4:	d117      	bne.n	8005d06 <UART_Receive_IT+0x50>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d113      	bne.n	8005d06 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfe:	1c9a      	adds	r2, r3, #2
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	629a      	str	r2, [r3, #40]	; 0x28
 8005d04:	e026      	b.n	8005d54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d18:	d007      	beq.n	8005d2a <UART_Receive_IT+0x74>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10a      	bne.n	8005d38 <UART_Receive_IT+0x82>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d106      	bne.n	8005d38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	e008      	b.n	8005d4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4e:	1c5a      	adds	r2, r3, #1
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	4619      	mov	r1, r3
 8005d62:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d15a      	bne.n	8005e1e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 0220 	bic.w	r2, r2, #32
 8005d76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	695a      	ldr	r2, [r3, #20]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 0201 	bic.w	r2, r2, #1
 8005d96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d135      	bne.n	8005e14 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	330c      	adds	r3, #12
 8005db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f023 0310 	bic.w	r3, r3, #16
 8005dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	330c      	adds	r3, #12
 8005dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dce:	623a      	str	r2, [r7, #32]
 8005dd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	69f9      	ldr	r1, [r7, #28]
 8005dd4:	6a3a      	ldr	r2, [r7, #32]
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e5      	bne.n	8005dae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0310 	and.w	r3, r3, #16
 8005dec:	2b10      	cmp	r3, #16
 8005dee:	d10a      	bne.n	8005e06 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005df0:	2300      	movs	r3, #0
 8005df2:	60fb      	str	r3, [r7, #12]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7ff fdbf 	bl	8005990 <HAL_UARTEx_RxEventCallback>
 8005e12:	e002      	b.n	8005e1a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7fc f883 	bl	8001f20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e002      	b.n	8005e24 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	e000      	b.n	8005e24 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e22:	2302      	movs	r3, #2
  }
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3730      	adds	r7, #48	; 0x30
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e30:	b09f      	sub	sp, #124	; 0x7c
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e42:	68d9      	ldr	r1, [r3, #12]
 8005e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	ea40 0301 	orr.w	r3, r0, r1
 8005e4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e50:	689a      	ldr	r2, [r3, #8]
 8005e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	431a      	orrs	r2, r3
 8005e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e70:	f021 010c 	bic.w	r1, r1, #12
 8005e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e7a:	430b      	orrs	r3, r1
 8005e7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e8a:	6999      	ldr	r1, [r3, #24]
 8005e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	ea40 0301 	orr.w	r3, r0, r1
 8005e94:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	4bc5      	ldr	r3, [pc, #788]	; (80061b0 <UART_SetConfig+0x384>)
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d004      	beq.n	8005eaa <UART_SetConfig+0x7e>
 8005ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	4bc3      	ldr	r3, [pc, #780]	; (80061b4 <UART_SetConfig+0x388>)
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d103      	bne.n	8005eb2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005eaa:	f7fd fc9f 	bl	80037ec <HAL_RCC_GetPCLK2Freq>
 8005eae:	6778      	str	r0, [r7, #116]	; 0x74
 8005eb0:	e002      	b.n	8005eb8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005eb2:	f7fd fc87 	bl	80037c4 <HAL_RCC_GetPCLK1Freq>
 8005eb6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ec0:	f040 80b6 	bne.w	8006030 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ec6:	461c      	mov	r4, r3
 8005ec8:	f04f 0500 	mov.w	r5, #0
 8005ecc:	4622      	mov	r2, r4
 8005ece:	462b      	mov	r3, r5
 8005ed0:	1891      	adds	r1, r2, r2
 8005ed2:	6439      	str	r1, [r7, #64]	; 0x40
 8005ed4:	415b      	adcs	r3, r3
 8005ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ed8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005edc:	1912      	adds	r2, r2, r4
 8005ede:	eb45 0303 	adc.w	r3, r5, r3
 8005ee2:	f04f 0000 	mov.w	r0, #0
 8005ee6:	f04f 0100 	mov.w	r1, #0
 8005eea:	00d9      	lsls	r1, r3, #3
 8005eec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ef0:	00d0      	lsls	r0, r2, #3
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	1911      	adds	r1, r2, r4
 8005ef8:	6639      	str	r1, [r7, #96]	; 0x60
 8005efa:	416b      	adcs	r3, r5
 8005efc:	667b      	str	r3, [r7, #100]	; 0x64
 8005efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	461a      	mov	r2, r3
 8005f04:	f04f 0300 	mov.w	r3, #0
 8005f08:	1891      	adds	r1, r2, r2
 8005f0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f0c:	415b      	adcs	r3, r3
 8005f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f14:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005f18:	f7fa fe66 	bl	8000be8 <__aeabi_uldivmod>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4ba5      	ldr	r3, [pc, #660]	; (80061b8 <UART_SetConfig+0x38c>)
 8005f22:	fba3 2302 	umull	r2, r3, r3, r2
 8005f26:	095b      	lsrs	r3, r3, #5
 8005f28:	011e      	lsls	r6, r3, #4
 8005f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f2c:	461c      	mov	r4, r3
 8005f2e:	f04f 0500 	mov.w	r5, #0
 8005f32:	4622      	mov	r2, r4
 8005f34:	462b      	mov	r3, r5
 8005f36:	1891      	adds	r1, r2, r2
 8005f38:	6339      	str	r1, [r7, #48]	; 0x30
 8005f3a:	415b      	adcs	r3, r3
 8005f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005f42:	1912      	adds	r2, r2, r4
 8005f44:	eb45 0303 	adc.w	r3, r5, r3
 8005f48:	f04f 0000 	mov.w	r0, #0
 8005f4c:	f04f 0100 	mov.w	r1, #0
 8005f50:	00d9      	lsls	r1, r3, #3
 8005f52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f56:	00d0      	lsls	r0, r2, #3
 8005f58:	4602      	mov	r2, r0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	1911      	adds	r1, r2, r4
 8005f5e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f60:	416b      	adcs	r3, r5
 8005f62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	f04f 0300 	mov.w	r3, #0
 8005f6e:	1891      	adds	r1, r2, r2
 8005f70:	62b9      	str	r1, [r7, #40]	; 0x28
 8005f72:	415b      	adcs	r3, r3
 8005f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f7a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005f7e:	f7fa fe33 	bl	8000be8 <__aeabi_uldivmod>
 8005f82:	4602      	mov	r2, r0
 8005f84:	460b      	mov	r3, r1
 8005f86:	4b8c      	ldr	r3, [pc, #560]	; (80061b8 <UART_SetConfig+0x38c>)
 8005f88:	fba3 1302 	umull	r1, r3, r3, r2
 8005f8c:	095b      	lsrs	r3, r3, #5
 8005f8e:	2164      	movs	r1, #100	; 0x64
 8005f90:	fb01 f303 	mul.w	r3, r1, r3
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	3332      	adds	r3, #50	; 0x32
 8005f9a:	4a87      	ldr	r2, [pc, #540]	; (80061b8 <UART_SetConfig+0x38c>)
 8005f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa0:	095b      	lsrs	r3, r3, #5
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fa8:	441e      	add	r6, r3
 8005faa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fac:	4618      	mov	r0, r3
 8005fae:	f04f 0100 	mov.w	r1, #0
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	1894      	adds	r4, r2, r2
 8005fb8:	623c      	str	r4, [r7, #32]
 8005fba:	415b      	adcs	r3, r3
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8005fbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fc2:	1812      	adds	r2, r2, r0
 8005fc4:	eb41 0303 	adc.w	r3, r1, r3
 8005fc8:	f04f 0400 	mov.w	r4, #0
 8005fcc:	f04f 0500 	mov.w	r5, #0
 8005fd0:	00dd      	lsls	r5, r3, #3
 8005fd2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fd6:	00d4      	lsls	r4, r2, #3
 8005fd8:	4622      	mov	r2, r4
 8005fda:	462b      	mov	r3, r5
 8005fdc:	1814      	adds	r4, r2, r0
 8005fde:	653c      	str	r4, [r7, #80]	; 0x50
 8005fe0:	414b      	adcs	r3, r1
 8005fe2:	657b      	str	r3, [r7, #84]	; 0x54
 8005fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	f04f 0300 	mov.w	r3, #0
 8005fee:	1891      	adds	r1, r2, r2
 8005ff0:	61b9      	str	r1, [r7, #24]
 8005ff2:	415b      	adcs	r3, r3
 8005ff4:	61fb      	str	r3, [r7, #28]
 8005ff6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ffa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005ffe:	f7fa fdf3 	bl	8000be8 <__aeabi_uldivmod>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	4b6c      	ldr	r3, [pc, #432]	; (80061b8 <UART_SetConfig+0x38c>)
 8006008:	fba3 1302 	umull	r1, r3, r3, r2
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	2164      	movs	r1, #100	; 0x64
 8006010:	fb01 f303 	mul.w	r3, r1, r3
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	3332      	adds	r3, #50	; 0x32
 800601a:	4a67      	ldr	r2, [pc, #412]	; (80061b8 <UART_SetConfig+0x38c>)
 800601c:	fba2 2303 	umull	r2, r3, r2, r3
 8006020:	095b      	lsrs	r3, r3, #5
 8006022:	f003 0207 	and.w	r2, r3, #7
 8006026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4432      	add	r2, r6
 800602c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800602e:	e0b9      	b.n	80061a4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006030:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006032:	461c      	mov	r4, r3
 8006034:	f04f 0500 	mov.w	r5, #0
 8006038:	4622      	mov	r2, r4
 800603a:	462b      	mov	r3, r5
 800603c:	1891      	adds	r1, r2, r2
 800603e:	6139      	str	r1, [r7, #16]
 8006040:	415b      	adcs	r3, r3
 8006042:	617b      	str	r3, [r7, #20]
 8006044:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006048:	1912      	adds	r2, r2, r4
 800604a:	eb45 0303 	adc.w	r3, r5, r3
 800604e:	f04f 0000 	mov.w	r0, #0
 8006052:	f04f 0100 	mov.w	r1, #0
 8006056:	00d9      	lsls	r1, r3, #3
 8006058:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800605c:	00d0      	lsls	r0, r2, #3
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	eb12 0804 	adds.w	r8, r2, r4
 8006066:	eb43 0905 	adc.w	r9, r3, r5
 800606a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	4618      	mov	r0, r3
 8006070:	f04f 0100 	mov.w	r1, #0
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	f04f 0300 	mov.w	r3, #0
 800607c:	008b      	lsls	r3, r1, #2
 800607e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006082:	0082      	lsls	r2, r0, #2
 8006084:	4640      	mov	r0, r8
 8006086:	4649      	mov	r1, r9
 8006088:	f7fa fdae 	bl	8000be8 <__aeabi_uldivmod>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4b49      	ldr	r3, [pc, #292]	; (80061b8 <UART_SetConfig+0x38c>)
 8006092:	fba3 2302 	umull	r2, r3, r3, r2
 8006096:	095b      	lsrs	r3, r3, #5
 8006098:	011e      	lsls	r6, r3, #4
 800609a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800609c:	4618      	mov	r0, r3
 800609e:	f04f 0100 	mov.w	r1, #0
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	1894      	adds	r4, r2, r2
 80060a8:	60bc      	str	r4, [r7, #8]
 80060aa:	415b      	adcs	r3, r3
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060b2:	1812      	adds	r2, r2, r0
 80060b4:	eb41 0303 	adc.w	r3, r1, r3
 80060b8:	f04f 0400 	mov.w	r4, #0
 80060bc:	f04f 0500 	mov.w	r5, #0
 80060c0:	00dd      	lsls	r5, r3, #3
 80060c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060c6:	00d4      	lsls	r4, r2, #3
 80060c8:	4622      	mov	r2, r4
 80060ca:	462b      	mov	r3, r5
 80060cc:	1814      	adds	r4, r2, r0
 80060ce:	64bc      	str	r4, [r7, #72]	; 0x48
 80060d0:	414b      	adcs	r3, r1
 80060d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	4618      	mov	r0, r3
 80060da:	f04f 0100 	mov.w	r1, #0
 80060de:	f04f 0200 	mov.w	r2, #0
 80060e2:	f04f 0300 	mov.w	r3, #0
 80060e6:	008b      	lsls	r3, r1, #2
 80060e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060ec:	0082      	lsls	r2, r0, #2
 80060ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80060f2:	f7fa fd79 	bl	8000be8 <__aeabi_uldivmod>
 80060f6:	4602      	mov	r2, r0
 80060f8:	460b      	mov	r3, r1
 80060fa:	4b2f      	ldr	r3, [pc, #188]	; (80061b8 <UART_SetConfig+0x38c>)
 80060fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006100:	095b      	lsrs	r3, r3, #5
 8006102:	2164      	movs	r1, #100	; 0x64
 8006104:	fb01 f303 	mul.w	r3, r1, r3
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	3332      	adds	r3, #50	; 0x32
 800610e:	4a2a      	ldr	r2, [pc, #168]	; (80061b8 <UART_SetConfig+0x38c>)
 8006110:	fba2 2303 	umull	r2, r3, r2, r3
 8006114:	095b      	lsrs	r3, r3, #5
 8006116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800611a:	441e      	add	r6, r3
 800611c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800611e:	4618      	mov	r0, r3
 8006120:	f04f 0100 	mov.w	r1, #0
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	1894      	adds	r4, r2, r2
 800612a:	603c      	str	r4, [r7, #0]
 800612c:	415b      	adcs	r3, r3
 800612e:	607b      	str	r3, [r7, #4]
 8006130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006134:	1812      	adds	r2, r2, r0
 8006136:	eb41 0303 	adc.w	r3, r1, r3
 800613a:	f04f 0400 	mov.w	r4, #0
 800613e:	f04f 0500 	mov.w	r5, #0
 8006142:	00dd      	lsls	r5, r3, #3
 8006144:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006148:	00d4      	lsls	r4, r2, #3
 800614a:	4622      	mov	r2, r4
 800614c:	462b      	mov	r3, r5
 800614e:	eb12 0a00 	adds.w	sl, r2, r0
 8006152:	eb43 0b01 	adc.w	fp, r3, r1
 8006156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	4618      	mov	r0, r3
 800615c:	f04f 0100 	mov.w	r1, #0
 8006160:	f04f 0200 	mov.w	r2, #0
 8006164:	f04f 0300 	mov.w	r3, #0
 8006168:	008b      	lsls	r3, r1, #2
 800616a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800616e:	0082      	lsls	r2, r0, #2
 8006170:	4650      	mov	r0, sl
 8006172:	4659      	mov	r1, fp
 8006174:	f7fa fd38 	bl	8000be8 <__aeabi_uldivmod>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	4b0e      	ldr	r3, [pc, #56]	; (80061b8 <UART_SetConfig+0x38c>)
 800617e:	fba3 1302 	umull	r1, r3, r3, r2
 8006182:	095b      	lsrs	r3, r3, #5
 8006184:	2164      	movs	r1, #100	; 0x64
 8006186:	fb01 f303 	mul.w	r3, r1, r3
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	011b      	lsls	r3, r3, #4
 800618e:	3332      	adds	r3, #50	; 0x32
 8006190:	4a09      	ldr	r2, [pc, #36]	; (80061b8 <UART_SetConfig+0x38c>)
 8006192:	fba2 2303 	umull	r2, r3, r2, r3
 8006196:	095b      	lsrs	r3, r3, #5
 8006198:	f003 020f 	and.w	r2, r3, #15
 800619c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4432      	add	r2, r6
 80061a2:	609a      	str	r2, [r3, #8]
}
 80061a4:	bf00      	nop
 80061a6:	377c      	adds	r7, #124	; 0x7c
 80061a8:	46bd      	mov	sp, r7
 80061aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ae:	bf00      	nop
 80061b0:	40011000 	.word	0x40011000
 80061b4:	40011400 	.word	0x40011400
 80061b8:	51eb851f 	.word	0x51eb851f

080061bc <__NVIC_SetPriority>:
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	4603      	mov	r3, r0
 80061c4:	6039      	str	r1, [r7, #0]
 80061c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	db0a      	blt.n	80061e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	490c      	ldr	r1, [pc, #48]	; (8006208 <__NVIC_SetPriority+0x4c>)
 80061d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061da:	0112      	lsls	r2, r2, #4
 80061dc:	b2d2      	uxtb	r2, r2
 80061de:	440b      	add	r3, r1
 80061e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80061e4:	e00a      	b.n	80061fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	4908      	ldr	r1, [pc, #32]	; (800620c <__NVIC_SetPriority+0x50>)
 80061ec:	79fb      	ldrb	r3, [r7, #7]
 80061ee:	f003 030f 	and.w	r3, r3, #15
 80061f2:	3b04      	subs	r3, #4
 80061f4:	0112      	lsls	r2, r2, #4
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	440b      	add	r3, r1
 80061fa:	761a      	strb	r2, [r3, #24]
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	e000e100 	.word	0xe000e100
 800620c:	e000ed00 	.word	0xe000ed00

08006210 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006210:	b580      	push	{r7, lr}
 8006212:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006214:	2100      	movs	r1, #0
 8006216:	f06f 0004 	mvn.w	r0, #4
 800621a:	f7ff ffcf 	bl	80061bc <__NVIC_SetPriority>
#endif
}
 800621e:	bf00      	nop
 8006220:	bd80      	pop	{r7, pc}
	...

08006224 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800622a:	f3ef 8305 	mrs	r3, IPSR
 800622e:	603b      	str	r3, [r7, #0]
  return(result);
 8006230:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006236:	f06f 0305 	mvn.w	r3, #5
 800623a:	607b      	str	r3, [r7, #4]
 800623c:	e00c      	b.n	8006258 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800623e:	4b0a      	ldr	r3, [pc, #40]	; (8006268 <osKernelInitialize+0x44>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d105      	bne.n	8006252 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006246:	4b08      	ldr	r3, [pc, #32]	; (8006268 <osKernelInitialize+0x44>)
 8006248:	2201      	movs	r2, #1
 800624a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800624c:	2300      	movs	r3, #0
 800624e:	607b      	str	r3, [r7, #4]
 8006250:	e002      	b.n	8006258 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006252:	f04f 33ff 	mov.w	r3, #4294967295
 8006256:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006258:	687b      	ldr	r3, [r7, #4]
}
 800625a:	4618      	mov	r0, r3
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	200000c0 	.word	0x200000c0

0800626c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006272:	f3ef 8305 	mrs	r3, IPSR
 8006276:	603b      	str	r3, [r7, #0]
  return(result);
 8006278:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <osKernelStart+0x1a>
    stat = osErrorISR;
 800627e:	f06f 0305 	mvn.w	r3, #5
 8006282:	607b      	str	r3, [r7, #4]
 8006284:	e010      	b.n	80062a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006286:	4b0b      	ldr	r3, [pc, #44]	; (80062b4 <osKernelStart+0x48>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d109      	bne.n	80062a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800628e:	f7ff ffbf 	bl	8006210 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006292:	4b08      	ldr	r3, [pc, #32]	; (80062b4 <osKernelStart+0x48>)
 8006294:	2202      	movs	r2, #2
 8006296:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006298:	f001 f866 	bl	8007368 <vTaskStartScheduler>
      stat = osOK;
 800629c:	2300      	movs	r3, #0
 800629e:	607b      	str	r3, [r7, #4]
 80062a0:	e002      	b.n	80062a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80062a2:	f04f 33ff 	mov.w	r3, #4294967295
 80062a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80062a8:	687b      	ldr	r3, [r7, #4]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	200000c0 	.word	0x200000c0

080062b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b08e      	sub	sp, #56	; 0x38
 80062bc:	af04      	add	r7, sp, #16
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80062c4:	2300      	movs	r3, #0
 80062c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062c8:	f3ef 8305 	mrs	r3, IPSR
 80062cc:	617b      	str	r3, [r7, #20]
  return(result);
 80062ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d17e      	bne.n	80063d2 <osThreadNew+0x11a>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d07b      	beq.n	80063d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80062da:	2380      	movs	r3, #128	; 0x80
 80062dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80062de:	2318      	movs	r3, #24
 80062e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80062e2:	2300      	movs	r3, #0
 80062e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80062e6:	f04f 33ff 	mov.w	r3, #4294967295
 80062ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d045      	beq.n	800637e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <osThreadNew+0x48>
        name = attr->name;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d008      	beq.n	8006326 <osThreadNew+0x6e>
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	2b38      	cmp	r3, #56	; 0x38
 8006318:	d805      	bhi.n	8006326 <osThreadNew+0x6e>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <osThreadNew+0x72>
        return (NULL);
 8006326:	2300      	movs	r3, #0
 8006328:	e054      	b.n	80063d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	089b      	lsrs	r3, r3, #2
 8006338:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00e      	beq.n	8006360 <osThreadNew+0xa8>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	2b5b      	cmp	r3, #91	; 0x5b
 8006348:	d90a      	bls.n	8006360 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800634e:	2b00      	cmp	r3, #0
 8006350:	d006      	beq.n	8006360 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d002      	beq.n	8006360 <osThreadNew+0xa8>
        mem = 1;
 800635a:	2301      	movs	r3, #1
 800635c:	61bb      	str	r3, [r7, #24]
 800635e:	e010      	b.n	8006382 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10c      	bne.n	8006382 <osThreadNew+0xca>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d108      	bne.n	8006382 <osThreadNew+0xca>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d104      	bne.n	8006382 <osThreadNew+0xca>
          mem = 0;
 8006378:	2300      	movs	r3, #0
 800637a:	61bb      	str	r3, [r7, #24]
 800637c:	e001      	b.n	8006382 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800637e:	2300      	movs	r3, #0
 8006380:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d110      	bne.n	80063aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006390:	9202      	str	r2, [sp, #8]
 8006392:	9301      	str	r3, [sp, #4]
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	6a3a      	ldr	r2, [r7, #32]
 800639c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f000 fe0c 	bl	8006fbc <xTaskCreateStatic>
 80063a4:	4603      	mov	r3, r0
 80063a6:	613b      	str	r3, [r7, #16]
 80063a8:	e013      	b.n	80063d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d110      	bne.n	80063d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	f107 0310 	add.w	r3, r7, #16
 80063b8:	9301      	str	r3, [sp, #4]
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f000 fe57 	bl	8007076 <xTaskCreate>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d001      	beq.n	80063d2 <osThreadNew+0x11a>
            hTask = NULL;
 80063ce:	2300      	movs	r3, #0
 80063d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80063d2:	693b      	ldr	r3, [r7, #16]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3728      	adds	r7, #40	; 0x28
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063e4:	f3ef 8305 	mrs	r3, IPSR
 80063e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80063ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d003      	beq.n	80063f8 <osDelay+0x1c>
    stat = osErrorISR;
 80063f0:	f06f 0305 	mvn.w	r3, #5
 80063f4:	60fb      	str	r3, [r7, #12]
 80063f6:	e007      	b.n	8006408 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 ff7c 	bl	8007300 <vTaskDelay>
    }
  }

  return (stat);
 8006408:	68fb      	ldr	r3, [r7, #12]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4a07      	ldr	r2, [pc, #28]	; (8006440 <vApplicationGetIdleTaskMemory+0x2c>)
 8006424:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	4a06      	ldr	r2, [pc, #24]	; (8006444 <vApplicationGetIdleTaskMemory+0x30>)
 800642a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2280      	movs	r2, #128	; 0x80
 8006430:	601a      	str	r2, [r3, #0]
}
 8006432:	bf00      	nop
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	200000c4 	.word	0x200000c4
 8006444:	20000120 	.word	0x20000120

08006448 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4a07      	ldr	r2, [pc, #28]	; (8006474 <vApplicationGetTimerTaskMemory+0x2c>)
 8006458:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	4a06      	ldr	r2, [pc, #24]	; (8006478 <vApplicationGetTimerTaskMemory+0x30>)
 800645e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006466:	601a      	str	r2, [r3, #0]
}
 8006468:	bf00      	nop
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	20000320 	.word	0x20000320
 8006478:	2000037c 	.word	0x2000037c

0800647c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f103 0208 	add.w	r2, r3, #8
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f04f 32ff 	mov.w	r2, #4294967295
 8006494:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f103 0208 	add.w	r2, r3, #8
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f103 0208 	add.w	r2, r3, #8
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80064ca:	bf00      	nop
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064d6:	b480      	push	{r7}
 80064d8:	b085      	sub	sp, #20
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	601a      	str	r2, [r3, #0]
}
 8006512:	bf00      	nop
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800651e:	b480      	push	{r7}
 8006520:	b085      	sub	sp, #20
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006534:	d103      	bne.n	800653e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	e00c      	b.n	8006558 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	3308      	adds	r3, #8
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	e002      	b.n	800654c <vListInsert+0x2e>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	60fb      	str	r3, [r7, #12]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	429a      	cmp	r2, r3
 8006556:	d2f6      	bcs.n	8006546 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	601a      	str	r2, [r3, #0]
}
 8006584:	bf00      	nop
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6892      	ldr	r2, [r2, #8]
 80065a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	6852      	ldr	r2, [r2, #4]
 80065b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d103      	bne.n	80065c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	1e5a      	subs	r2, r3, #1
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10a      	bne.n	800660e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80065f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800660a:	bf00      	nop
 800660c:	e7fe      	b.n	800660c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800660e:	f002 f851 	bl	80086b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800661a:	68f9      	ldr	r1, [r7, #12]
 800661c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800661e:	fb01 f303 	mul.w	r3, r1, r3
 8006622:	441a      	add	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800663e:	3b01      	subs	r3, #1
 8006640:	68f9      	ldr	r1, [r7, #12]
 8006642:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006644:	fb01 f303 	mul.w	r3, r1, r3
 8006648:	441a      	add	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	22ff      	movs	r2, #255	; 0xff
 8006652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	22ff      	movs	r2, #255	; 0xff
 800665a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d114      	bne.n	800668e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d01a      	beq.n	80066a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	3310      	adds	r3, #16
 8006670:	4618      	mov	r0, r3
 8006672:	f001 f903 	bl	800787c <xTaskRemoveFromEventList>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d012      	beq.n	80066a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800667c:	4b0c      	ldr	r3, [pc, #48]	; (80066b0 <xQueueGenericReset+0xcc>)
 800667e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	e009      	b.n	80066a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3310      	adds	r3, #16
 8006692:	4618      	mov	r0, r3
 8006694:	f7ff fef2 	bl	800647c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3324      	adds	r3, #36	; 0x24
 800669c:	4618      	mov	r0, r3
 800669e:	f7ff feed 	bl	800647c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80066a2:	f002 f837 	bl	8008714 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80066a6:	2301      	movs	r3, #1
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	e000ed04 	.word	0xe000ed04

080066b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b08e      	sub	sp, #56	; 0x38
 80066b8:	af02      	add	r7, sp, #8
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
 80066c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10a      	bne.n	80066de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80066c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80066da:	bf00      	nop
 80066dc:	e7fe      	b.n	80066dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10a      	bne.n	80066fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80066e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066f6:	bf00      	nop
 80066f8:	e7fe      	b.n	80066f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <xQueueGenericCreateStatic+0x52>
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <xQueueGenericCreateStatic+0x56>
 8006706:	2301      	movs	r3, #1
 8006708:	e000      	b.n	800670c <xQueueGenericCreateStatic+0x58>
 800670a:	2300      	movs	r3, #0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10a      	bne.n	8006726 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	623b      	str	r3, [r7, #32]
}
 8006722:	bf00      	nop
 8006724:	e7fe      	b.n	8006724 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d102      	bne.n	8006732 <xQueueGenericCreateStatic+0x7e>
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <xQueueGenericCreateStatic+0x82>
 8006732:	2301      	movs	r3, #1
 8006734:	e000      	b.n	8006738 <xQueueGenericCreateStatic+0x84>
 8006736:	2300      	movs	r3, #0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10a      	bne.n	8006752 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800673c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	61fb      	str	r3, [r7, #28]
}
 800674e:	bf00      	nop
 8006750:	e7fe      	b.n	8006750 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006752:	2350      	movs	r3, #80	; 0x50
 8006754:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2b50      	cmp	r3, #80	; 0x50
 800675a:	d00a      	beq.n	8006772 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800675c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	61bb      	str	r3, [r7, #24]
}
 800676e:	bf00      	nop
 8006770:	e7fe      	b.n	8006770 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006772:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00d      	beq.n	800679a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800677e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006786:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800678a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	4613      	mov	r3, r2
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	68b9      	ldr	r1, [r7, #8]
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 f805 	bl	80067a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800679a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800679c:	4618      	mov	r0, r3
 800679e:	3730      	adds	r7, #48	; 0x30
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d103      	bne.n	80067c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	e002      	b.n	80067c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067d2:	2101      	movs	r1, #1
 80067d4:	69b8      	ldr	r0, [r7, #24]
 80067d6:	f7ff ff05 	bl	80065e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	78fa      	ldrb	r2, [r7, #3]
 80067de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80067e2:	bf00      	nop
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08e      	sub	sp, #56	; 0x38
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
 80067f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80067fa:	2300      	movs	r3, #0
 80067fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10a      	bne.n	800681e <xQueueGenericSend+0x32>
	__asm volatile
 8006808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800681a:	bf00      	nop
 800681c:	e7fe      	b.n	800681c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d103      	bne.n	800682c <xQueueGenericSend+0x40>
 8006824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <xQueueGenericSend+0x44>
 800682c:	2301      	movs	r3, #1
 800682e:	e000      	b.n	8006832 <xQueueGenericSend+0x46>
 8006830:	2300      	movs	r3, #0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10a      	bne.n	800684c <xQueueGenericSend+0x60>
	__asm volatile
 8006836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006848:	bf00      	nop
 800684a:	e7fe      	b.n	800684a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2b02      	cmp	r3, #2
 8006850:	d103      	bne.n	800685a <xQueueGenericSend+0x6e>
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006856:	2b01      	cmp	r3, #1
 8006858:	d101      	bne.n	800685e <xQueueGenericSend+0x72>
 800685a:	2301      	movs	r3, #1
 800685c:	e000      	b.n	8006860 <xQueueGenericSend+0x74>
 800685e:	2300      	movs	r3, #0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10a      	bne.n	800687a <xQueueGenericSend+0x8e>
	__asm volatile
 8006864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	623b      	str	r3, [r7, #32]
}
 8006876:	bf00      	nop
 8006878:	e7fe      	b.n	8006878 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800687a:	f001 f9bd 	bl	8007bf8 <xTaskGetSchedulerState>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d102      	bne.n	800688a <xQueueGenericSend+0x9e>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <xQueueGenericSend+0xa2>
 800688a:	2301      	movs	r3, #1
 800688c:	e000      	b.n	8006890 <xQueueGenericSend+0xa4>
 800688e:	2300      	movs	r3, #0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10a      	bne.n	80068aa <xQueueGenericSend+0xbe>
	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	61fb      	str	r3, [r7, #28]
}
 80068a6:	bf00      	nop
 80068a8:	e7fe      	b.n	80068a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068aa:	f001 ff03 	bl	80086b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d302      	bcc.n	80068c0 <xQueueGenericSend+0xd4>
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d129      	bne.n	8006914 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	68b9      	ldr	r1, [r7, #8]
 80068c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068c6:	f000 fa0b 	bl	8006ce0 <prvCopyDataToQueue>
 80068ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d010      	beq.n	80068f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d6:	3324      	adds	r3, #36	; 0x24
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 ffcf 	bl	800787c <xTaskRemoveFromEventList>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d013      	beq.n	800690c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80068e4:	4b3f      	ldr	r3, [pc, #252]	; (80069e4 <xQueueGenericSend+0x1f8>)
 80068e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	e00a      	b.n	800690c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80068f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d007      	beq.n	800690c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80068fc:	4b39      	ldr	r3, [pc, #228]	; (80069e4 <xQueueGenericSend+0x1f8>)
 80068fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	f3bf 8f4f 	dsb	sy
 8006908:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800690c:	f001 ff02 	bl	8008714 <vPortExitCritical>
				return pdPASS;
 8006910:	2301      	movs	r3, #1
 8006912:	e063      	b.n	80069dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d103      	bne.n	8006922 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800691a:	f001 fefb 	bl	8008714 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800691e:	2300      	movs	r3, #0
 8006920:	e05c      	b.n	80069dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006924:	2b00      	cmp	r3, #0
 8006926:	d106      	bne.n	8006936 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006928:	f107 0314 	add.w	r3, r7, #20
 800692c:	4618      	mov	r0, r3
 800692e:	f001 f809 	bl	8007944 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006932:	2301      	movs	r3, #1
 8006934:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006936:	f001 feed 	bl	8008714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800693a:	f000 fd7b 	bl	8007434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800693e:	f001 feb9 	bl	80086b4 <vPortEnterCritical>
 8006942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006944:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006948:	b25b      	sxtb	r3, r3
 800694a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694e:	d103      	bne.n	8006958 <xQueueGenericSend+0x16c>
 8006950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800695e:	b25b      	sxtb	r3, r3
 8006960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006964:	d103      	bne.n	800696e <xQueueGenericSend+0x182>
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800696e:	f001 fed1 	bl	8008714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006972:	1d3a      	adds	r2, r7, #4
 8006974:	f107 0314 	add.w	r3, r7, #20
 8006978:	4611      	mov	r1, r2
 800697a:	4618      	mov	r0, r3
 800697c:	f000 fff8 	bl	8007970 <xTaskCheckForTimeOut>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d124      	bne.n	80069d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006986:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006988:	f000 faa2 	bl	8006ed0 <prvIsQueueFull>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d018      	beq.n	80069c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006994:	3310      	adds	r3, #16
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	4611      	mov	r1, r2
 800699a:	4618      	mov	r0, r3
 800699c:	f000 ff1e 	bl	80077dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80069a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069a2:	f000 fa2d 	bl	8006e00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80069a6:	f000 fd53 	bl	8007450 <xTaskResumeAll>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f47f af7c 	bne.w	80068aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80069b2:	4b0c      	ldr	r3, [pc, #48]	; (80069e4 <xQueueGenericSend+0x1f8>)
 80069b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069b8:	601a      	str	r2, [r3, #0]
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	e772      	b.n	80068aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80069c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069c6:	f000 fa1b 	bl	8006e00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069ca:	f000 fd41 	bl	8007450 <xTaskResumeAll>
 80069ce:	e76c      	b.n	80068aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80069d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069d2:	f000 fa15 	bl	8006e00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069d6:	f000 fd3b 	bl	8007450 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80069da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3738      	adds	r7, #56	; 0x38
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	e000ed04 	.word	0xe000ed04

080069e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b090      	sub	sp, #64	; 0x40
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80069fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10a      	bne.n	8006a16 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a04:	f383 8811 	msr	BASEPRI, r3
 8006a08:	f3bf 8f6f 	isb	sy
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a12:	bf00      	nop
 8006a14:	e7fe      	b.n	8006a14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d103      	bne.n	8006a24 <xQueueGenericSendFromISR+0x3c>
 8006a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <xQueueGenericSendFromISR+0x40>
 8006a24:	2301      	movs	r3, #1
 8006a26:	e000      	b.n	8006a2a <xQueueGenericSendFromISR+0x42>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10a      	bne.n	8006a44 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a40:	bf00      	nop
 8006a42:	e7fe      	b.n	8006a42 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d103      	bne.n	8006a52 <xQueueGenericSendFromISR+0x6a>
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d101      	bne.n	8006a56 <xQueueGenericSendFromISR+0x6e>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e000      	b.n	8006a58 <xQueueGenericSendFromISR+0x70>
 8006a56:	2300      	movs	r3, #0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10a      	bne.n	8006a72 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	623b      	str	r3, [r7, #32]
}
 8006a6e:	bf00      	nop
 8006a70:	e7fe      	b.n	8006a70 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a72:	f001 ff01 	bl	8008878 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a76:	f3ef 8211 	mrs	r2, BASEPRI
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	61fa      	str	r2, [r7, #28]
 8006a8c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a8e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a90:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d302      	bcc.n	8006aa4 <xQueueGenericSendFromISR+0xbc>
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d12f      	bne.n	8006b04 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ab4:	683a      	ldr	r2, [r7, #0]
 8006ab6:	68b9      	ldr	r1, [r7, #8]
 8006ab8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006aba:	f000 f911 	bl	8006ce0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006abe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac6:	d112      	bne.n	8006aee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d016      	beq.n	8006afe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad2:	3324      	adds	r3, #36	; 0x24
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 fed1 	bl	800787c <xTaskRemoveFromEventList>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00e      	beq.n	8006afe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00b      	beq.n	8006afe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	e007      	b.n	8006afe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006aee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006af2:	3301      	adds	r3, #1
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	b25a      	sxtb	r2, r3
 8006af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006afe:	2301      	movs	r3, #1
 8006b00:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006b02:	e001      	b.n	8006b08 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b04:	2300      	movs	r3, #0
 8006b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006b12:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3740      	adds	r7, #64	; 0x40
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
	...

08006b20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08c      	sub	sp, #48	; 0x30
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10a      	bne.n	8006b50 <xQueueReceive+0x30>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	623b      	str	r3, [r7, #32]
}
 8006b4c:	bf00      	nop
 8006b4e:	e7fe      	b.n	8006b4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d103      	bne.n	8006b5e <xQueueReceive+0x3e>
 8006b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <xQueueReceive+0x42>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e000      	b.n	8006b64 <xQueueReceive+0x44>
 8006b62:	2300      	movs	r3, #0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10a      	bne.n	8006b7e <xQueueReceive+0x5e>
	__asm volatile
 8006b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6c:	f383 8811 	msr	BASEPRI, r3
 8006b70:	f3bf 8f6f 	isb	sy
 8006b74:	f3bf 8f4f 	dsb	sy
 8006b78:	61fb      	str	r3, [r7, #28]
}
 8006b7a:	bf00      	nop
 8006b7c:	e7fe      	b.n	8006b7c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b7e:	f001 f83b 	bl	8007bf8 <xTaskGetSchedulerState>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d102      	bne.n	8006b8e <xQueueReceive+0x6e>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <xQueueReceive+0x72>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e000      	b.n	8006b94 <xQueueReceive+0x74>
 8006b92:	2300      	movs	r3, #0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10a      	bne.n	8006bae <xQueueReceive+0x8e>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	61bb      	str	r3, [r7, #24]
}
 8006baa:	bf00      	nop
 8006bac:	e7fe      	b.n	8006bac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bae:	f001 fd81 	bl	80086b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d01f      	beq.n	8006bfe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006bbe:	68b9      	ldr	r1, [r7, #8]
 8006bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bc2:	f000 f8f7 	bl	8006db4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	1e5a      	subs	r2, r3, #1
 8006bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bcc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00f      	beq.n	8006bf6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd8:	3310      	adds	r3, #16
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 fe4e 	bl	800787c <xTaskRemoveFromEventList>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d007      	beq.n	8006bf6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006be6:	4b3d      	ldr	r3, [pc, #244]	; (8006cdc <xQueueReceive+0x1bc>)
 8006be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006bf6:	f001 fd8d 	bl	8008714 <vPortExitCritical>
				return pdPASS;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e069      	b.n	8006cd2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d103      	bne.n	8006c0c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c04:	f001 fd86 	bl	8008714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	e062      	b.n	8006cd2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d106      	bne.n	8006c20 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c12:	f107 0310 	add.w	r3, r7, #16
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 fe94 	bl	8007944 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c20:	f001 fd78 	bl	8008714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c24:	f000 fc06 	bl	8007434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c28:	f001 fd44 	bl	80086b4 <vPortEnterCritical>
 8006c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c32:	b25b      	sxtb	r3, r3
 8006c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c38:	d103      	bne.n	8006c42 <xQueueReceive+0x122>
 8006c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c48:	b25b      	sxtb	r3, r3
 8006c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4e:	d103      	bne.n	8006c58 <xQueueReceive+0x138>
 8006c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c58:	f001 fd5c 	bl	8008714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c5c:	1d3a      	adds	r2, r7, #4
 8006c5e:	f107 0310 	add.w	r3, r7, #16
 8006c62:	4611      	mov	r1, r2
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 fe83 	bl	8007970 <xTaskCheckForTimeOut>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d123      	bne.n	8006cb8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c72:	f000 f917 	bl	8006ea4 <prvIsQueueEmpty>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d017      	beq.n	8006cac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7e:	3324      	adds	r3, #36	; 0x24
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	4611      	mov	r1, r2
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 fda9 	bl	80077dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c8c:	f000 f8b8 	bl	8006e00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c90:	f000 fbde 	bl	8007450 <xTaskResumeAll>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d189      	bne.n	8006bae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006c9a:	4b10      	ldr	r3, [pc, #64]	; (8006cdc <xQueueReceive+0x1bc>)
 8006c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	e780      	b.n	8006bae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cae:	f000 f8a7 	bl	8006e00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cb2:	f000 fbcd 	bl	8007450 <xTaskResumeAll>
 8006cb6:	e77a      	b.n	8006bae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cba:	f000 f8a1 	bl	8006e00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cbe:	f000 fbc7 	bl	8007450 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cc4:	f000 f8ee 	bl	8006ea4 <prvIsQueueEmpty>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f43f af6f 	beq.w	8006bae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006cd0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3730      	adds	r7, #48	; 0x30
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	e000ed04 	.word	0xe000ed04

08006ce0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006cec:	2300      	movs	r3, #0
 8006cee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10d      	bne.n	8006d1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d14d      	bne.n	8006da2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 ff92 	bl	8007c34 <xTaskPriorityDisinherit>
 8006d10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	609a      	str	r2, [r3, #8]
 8006d18:	e043      	b.n	8006da2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d119      	bne.n	8006d54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6858      	ldr	r0, [r3, #4]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d28:	461a      	mov	r2, r3
 8006d2a:	68b9      	ldr	r1, [r7, #8]
 8006d2c:	f002 fa2a 	bl	8009184 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d38:	441a      	add	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d32b      	bcc.n	8006da2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	605a      	str	r2, [r3, #4]
 8006d52:	e026      	b.n	8006da2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	68d8      	ldr	r0, [r3, #12]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	68b9      	ldr	r1, [r7, #8]
 8006d60:	f002 fa10 	bl	8009184 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	68da      	ldr	r2, [r3, #12]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6c:	425b      	negs	r3, r3
 8006d6e:	441a      	add	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	68da      	ldr	r2, [r3, #12]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d207      	bcs.n	8006d90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	689a      	ldr	r2, [r3, #8]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d88:	425b      	negs	r3, r3
 8006d8a:	441a      	add	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d105      	bne.n	8006da2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d002      	beq.n	8006da2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	1c5a      	adds	r2, r3, #1
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006daa:	697b      	ldr	r3, [r7, #20]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3718      	adds	r7, #24
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d018      	beq.n	8006df8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68da      	ldr	r2, [r3, #12]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dce:	441a      	add	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68da      	ldr	r2, [r3, #12]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d303      	bcc.n	8006de8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68d9      	ldr	r1, [r3, #12]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df0:	461a      	mov	r2, r3
 8006df2:	6838      	ldr	r0, [r7, #0]
 8006df4:	f002 f9c6 	bl	8009184 <memcpy>
	}
}
 8006df8:	bf00      	nop
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e08:	f001 fc54 	bl	80086b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e14:	e011      	b.n	8006e3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d012      	beq.n	8006e44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	3324      	adds	r3, #36	; 0x24
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 fd2a 	bl	800787c <xTaskRemoveFromEventList>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e2e:	f000 fe01 	bl	8007a34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	dce9      	bgt.n	8006e16 <prvUnlockQueue+0x16>
 8006e42:	e000      	b.n	8006e46 <prvUnlockQueue+0x46>
					break;
 8006e44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	22ff      	movs	r2, #255	; 0xff
 8006e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006e4e:	f001 fc61 	bl	8008714 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e52:	f001 fc2f 	bl	80086b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e5e:	e011      	b.n	8006e84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d012      	beq.n	8006e8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	3310      	adds	r3, #16
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 fd05 	bl	800787c <xTaskRemoveFromEventList>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e78:	f000 fddc 	bl	8007a34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e7c:	7bbb      	ldrb	r3, [r7, #14]
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	dce9      	bgt.n	8006e60 <prvUnlockQueue+0x60>
 8006e8c:	e000      	b.n	8006e90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	22ff      	movs	r2, #255	; 0xff
 8006e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006e98:	f001 fc3c 	bl	8008714 <vPortExitCritical>
}
 8006e9c:	bf00      	nop
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006eac:	f001 fc02 	bl	80086b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d102      	bne.n	8006ebe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	60fb      	str	r3, [r7, #12]
 8006ebc:	e001      	b.n	8006ec2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ec2:	f001 fc27 	bl	8008714 <vPortExitCritical>

	return xReturn;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ed8:	f001 fbec 	bl	80086b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d102      	bne.n	8006eee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	e001      	b.n	8006ef2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ef2:	f001 fc0f 	bl	8008714 <vPortExitCritical>

	return xReturn;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	60fb      	str	r3, [r7, #12]
 8006f0e:	e014      	b.n	8006f3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f10:	4a0f      	ldr	r2, [pc, #60]	; (8006f50 <vQueueAddToRegistry+0x50>)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10b      	bne.n	8006f34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f1c:	490c      	ldr	r1, [pc, #48]	; (8006f50 <vQueueAddToRegistry+0x50>)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	683a      	ldr	r2, [r7, #0]
 8006f22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f26:	4a0a      	ldr	r2, [pc, #40]	; (8006f50 <vQueueAddToRegistry+0x50>)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	00db      	lsls	r3, r3, #3
 8006f2c:	4413      	add	r3, r2
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f32:	e006      	b.n	8006f42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	3301      	adds	r3, #1
 8006f38:	60fb      	str	r3, [r7, #12]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b07      	cmp	r3, #7
 8006f3e:	d9e7      	bls.n	8006f10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f40:	bf00      	nop
 8006f42:	bf00      	nop
 8006f44:	3714      	adds	r7, #20
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	20004bcc 	.word	0x20004bcc

08006f54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f64:	f001 fba6 	bl	80086b4 <vPortEnterCritical>
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f6e:	b25b      	sxtb	r3, r3
 8006f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f74:	d103      	bne.n	8006f7e <vQueueWaitForMessageRestricted+0x2a>
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f84:	b25b      	sxtb	r3, r3
 8006f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8a:	d103      	bne.n	8006f94 <vQueueWaitForMessageRestricted+0x40>
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f94:	f001 fbbe 	bl	8008714 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d106      	bne.n	8006fae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	3324      	adds	r3, #36	; 0x24
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	68b9      	ldr	r1, [r7, #8]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f000 fc3b 	bl	8007824 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006fae:	6978      	ldr	r0, [r7, #20]
 8006fb0:	f7ff ff26 	bl	8006e00 <prvUnlockQueue>
	}
 8006fb4:	bf00      	nop
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b08e      	sub	sp, #56	; 0x38
 8006fc0:	af04      	add	r7, sp, #16
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
 8006fc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10a      	bne.n	8006fe6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	623b      	str	r3, [r7, #32]
}
 8006fe2:	bf00      	nop
 8006fe4:	e7fe      	b.n	8006fe4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10a      	bne.n	8007002 <xTaskCreateStatic+0x46>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	61fb      	str	r3, [r7, #28]
}
 8006ffe:	bf00      	nop
 8007000:	e7fe      	b.n	8007000 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007002:	235c      	movs	r3, #92	; 0x5c
 8007004:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	2b5c      	cmp	r3, #92	; 0x5c
 800700a:	d00a      	beq.n	8007022 <xTaskCreateStatic+0x66>
	__asm volatile
 800700c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007010:	f383 8811 	msr	BASEPRI, r3
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	61bb      	str	r3, [r7, #24]
}
 800701e:	bf00      	nop
 8007020:	e7fe      	b.n	8007020 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007022:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007026:	2b00      	cmp	r3, #0
 8007028:	d01e      	beq.n	8007068 <xTaskCreateStatic+0xac>
 800702a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800702c:	2b00      	cmp	r3, #0
 800702e:	d01b      	beq.n	8007068 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007032:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007038:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800703a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703c:	2202      	movs	r2, #2
 800703e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007042:	2300      	movs	r3, #0
 8007044:	9303      	str	r3, [sp, #12]
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007048:	9302      	str	r3, [sp, #8]
 800704a:	f107 0314 	add.w	r3, r7, #20
 800704e:	9301      	str	r3, [sp, #4]
 8007050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	68b9      	ldr	r1, [r7, #8]
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f000 f850 	bl	8007100 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007060:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007062:	f000 f8dd 	bl	8007220 <prvAddNewTaskToReadyList>
 8007066:	e001      	b.n	800706c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007068:	2300      	movs	r3, #0
 800706a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800706c:	697b      	ldr	r3, [r7, #20]
	}
 800706e:	4618      	mov	r0, r3
 8007070:	3728      	adds	r7, #40	; 0x28
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007076:	b580      	push	{r7, lr}
 8007078:	b08c      	sub	sp, #48	; 0x30
 800707a:	af04      	add	r7, sp, #16
 800707c:	60f8      	str	r0, [r7, #12]
 800707e:	60b9      	str	r1, [r7, #8]
 8007080:	603b      	str	r3, [r7, #0]
 8007082:	4613      	mov	r3, r2
 8007084:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007086:	88fb      	ldrh	r3, [r7, #6]
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4618      	mov	r0, r3
 800708c:	f001 fc34 	bl	80088f8 <pvPortMalloc>
 8007090:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00e      	beq.n	80070b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007098:	205c      	movs	r0, #92	; 0x5c
 800709a:	f001 fc2d 	bl	80088f8 <pvPortMalloc>
 800709e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	631a      	str	r2, [r3, #48]	; 0x30
 80070ac:	e005      	b.n	80070ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070ae:	6978      	ldr	r0, [r7, #20]
 80070b0:	f001 fcee 	bl	8008a90 <vPortFree>
 80070b4:	e001      	b.n	80070ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80070b6:	2300      	movs	r3, #0
 80070b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d017      	beq.n	80070f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070c8:	88fa      	ldrh	r2, [r7, #6]
 80070ca:	2300      	movs	r3, #0
 80070cc:	9303      	str	r3, [sp, #12]
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	9302      	str	r3, [sp, #8]
 80070d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d4:	9301      	str	r3, [sp, #4]
 80070d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	68b9      	ldr	r1, [r7, #8]
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f000 f80e 	bl	8007100 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070e4:	69f8      	ldr	r0, [r7, #28]
 80070e6:	f000 f89b 	bl	8007220 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80070ea:	2301      	movs	r3, #1
 80070ec:	61bb      	str	r3, [r7, #24]
 80070ee:	e002      	b.n	80070f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070f0:	f04f 33ff 	mov.w	r3, #4294967295
 80070f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80070f6:	69bb      	ldr	r3, [r7, #24]
	}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3720      	adds	r7, #32
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b088      	sub	sp, #32
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
 800710c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800710e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007110:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	461a      	mov	r2, r3
 8007118:	21a5      	movs	r1, #165	; 0xa5
 800711a:	f002 f841 	bl	80091a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800711e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007128:	3b01      	subs	r3, #1
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	f023 0307 	bic.w	r3, r3, #7
 8007136:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	f003 0307 	and.w	r3, r3, #7
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00a      	beq.n	8007158 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	617b      	str	r3, [r7, #20]
}
 8007154:	bf00      	nop
 8007156:	e7fe      	b.n	8007156 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d01f      	beq.n	800719e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800715e:	2300      	movs	r3, #0
 8007160:	61fb      	str	r3, [r7, #28]
 8007162:	e012      	b.n	800718a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	4413      	add	r3, r2
 800716a:	7819      	ldrb	r1, [r3, #0]
 800716c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	4413      	add	r3, r2
 8007172:	3334      	adds	r3, #52	; 0x34
 8007174:	460a      	mov	r2, r1
 8007176:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	4413      	add	r3, r2
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d006      	beq.n	8007192 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	3301      	adds	r3, #1
 8007188:	61fb      	str	r3, [r7, #28]
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	2b0f      	cmp	r3, #15
 800718e:	d9e9      	bls.n	8007164 <prvInitialiseNewTask+0x64>
 8007190:	e000      	b.n	8007194 <prvInitialiseNewTask+0x94>
			{
				break;
 8007192:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800719c:	e003      	b.n	80071a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a8:	2b37      	cmp	r3, #55	; 0x37
 80071aa:	d901      	bls.n	80071b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071ac:	2337      	movs	r3, #55	; 0x37
 80071ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80071bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071be:	2200      	movs	r2, #0
 80071c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c4:	3304      	adds	r3, #4
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7ff f978 	bl	80064bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ce:	3318      	adds	r3, #24
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7ff f973 	bl	80064bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80071ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ee:	2200      	movs	r2, #0
 80071f0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80071f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	68f9      	ldr	r1, [r7, #12]
 80071fe:	69b8      	ldr	r0, [r7, #24]
 8007200:	f001 f928 	bl	8008454 <pxPortInitialiseStack>
 8007204:	4602      	mov	r2, r0
 8007206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007208:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800720a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007216:	bf00      	nop
 8007218:	3720      	adds	r7, #32
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
	...

08007220 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007228:	f001 fa44 	bl	80086b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800722c:	4b2d      	ldr	r3, [pc, #180]	; (80072e4 <prvAddNewTaskToReadyList+0xc4>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3301      	adds	r3, #1
 8007232:	4a2c      	ldr	r2, [pc, #176]	; (80072e4 <prvAddNewTaskToReadyList+0xc4>)
 8007234:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007236:	4b2c      	ldr	r3, [pc, #176]	; (80072e8 <prvAddNewTaskToReadyList+0xc8>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d109      	bne.n	8007252 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800723e:	4a2a      	ldr	r2, [pc, #168]	; (80072e8 <prvAddNewTaskToReadyList+0xc8>)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007244:	4b27      	ldr	r3, [pc, #156]	; (80072e4 <prvAddNewTaskToReadyList+0xc4>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d110      	bne.n	800726e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800724c:	f000 fc16 	bl	8007a7c <prvInitialiseTaskLists>
 8007250:	e00d      	b.n	800726e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007252:	4b26      	ldr	r3, [pc, #152]	; (80072ec <prvAddNewTaskToReadyList+0xcc>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d109      	bne.n	800726e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800725a:	4b23      	ldr	r3, [pc, #140]	; (80072e8 <prvAddNewTaskToReadyList+0xc8>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007264:	429a      	cmp	r2, r3
 8007266:	d802      	bhi.n	800726e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007268:	4a1f      	ldr	r2, [pc, #124]	; (80072e8 <prvAddNewTaskToReadyList+0xc8>)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800726e:	4b20      	ldr	r3, [pc, #128]	; (80072f0 <prvAddNewTaskToReadyList+0xd0>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3301      	adds	r3, #1
 8007274:	4a1e      	ldr	r2, [pc, #120]	; (80072f0 <prvAddNewTaskToReadyList+0xd0>)
 8007276:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007278:	4b1d      	ldr	r3, [pc, #116]	; (80072f0 <prvAddNewTaskToReadyList+0xd0>)
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007284:	4b1b      	ldr	r3, [pc, #108]	; (80072f4 <prvAddNewTaskToReadyList+0xd4>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	429a      	cmp	r2, r3
 800728a:	d903      	bls.n	8007294 <prvAddNewTaskToReadyList+0x74>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007290:	4a18      	ldr	r2, [pc, #96]	; (80072f4 <prvAddNewTaskToReadyList+0xd4>)
 8007292:	6013      	str	r3, [r2, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007298:	4613      	mov	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4a15      	ldr	r2, [pc, #84]	; (80072f8 <prvAddNewTaskToReadyList+0xd8>)
 80072a2:	441a      	add	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3304      	adds	r3, #4
 80072a8:	4619      	mov	r1, r3
 80072aa:	4610      	mov	r0, r2
 80072ac:	f7ff f913 	bl	80064d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80072b0:	f001 fa30 	bl	8008714 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80072b4:	4b0d      	ldr	r3, [pc, #52]	; (80072ec <prvAddNewTaskToReadyList+0xcc>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00e      	beq.n	80072da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072bc:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <prvAddNewTaskToReadyList+0xc8>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d207      	bcs.n	80072da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80072ca:	4b0c      	ldr	r3, [pc, #48]	; (80072fc <prvAddNewTaskToReadyList+0xdc>)
 80072cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072da:	bf00      	nop
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	20000c50 	.word	0x20000c50
 80072e8:	2000077c 	.word	0x2000077c
 80072ec:	20000c5c 	.word	0x20000c5c
 80072f0:	20000c6c 	.word	0x20000c6c
 80072f4:	20000c58 	.word	0x20000c58
 80072f8:	20000780 	.word	0x20000780
 80072fc:	e000ed04 	.word	0xe000ed04

08007300 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007308:	2300      	movs	r3, #0
 800730a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d017      	beq.n	8007342 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007312:	4b13      	ldr	r3, [pc, #76]	; (8007360 <vTaskDelay+0x60>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <vTaskDelay+0x30>
	__asm volatile
 800731a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731e:	f383 8811 	msr	BASEPRI, r3
 8007322:	f3bf 8f6f 	isb	sy
 8007326:	f3bf 8f4f 	dsb	sy
 800732a:	60bb      	str	r3, [r7, #8]
}
 800732c:	bf00      	nop
 800732e:	e7fe      	b.n	800732e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007330:	f000 f880 	bl	8007434 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007334:	2100      	movs	r1, #0
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fcea 	bl	8007d10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800733c:	f000 f888 	bl	8007450 <xTaskResumeAll>
 8007340:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d107      	bne.n	8007358 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007348:	4b06      	ldr	r3, [pc, #24]	; (8007364 <vTaskDelay+0x64>)
 800734a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007358:	bf00      	nop
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	20000c78 	.word	0x20000c78
 8007364:	e000ed04 	.word	0xe000ed04

08007368 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08a      	sub	sp, #40	; 0x28
 800736c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800736e:	2300      	movs	r3, #0
 8007370:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007372:	2300      	movs	r3, #0
 8007374:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007376:	463a      	mov	r2, r7
 8007378:	1d39      	adds	r1, r7, #4
 800737a:	f107 0308 	add.w	r3, r7, #8
 800737e:	4618      	mov	r0, r3
 8007380:	f7ff f848 	bl	8006414 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007384:	6839      	ldr	r1, [r7, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	9202      	str	r2, [sp, #8]
 800738c:	9301      	str	r3, [sp, #4]
 800738e:	2300      	movs	r3, #0
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	2300      	movs	r3, #0
 8007394:	460a      	mov	r2, r1
 8007396:	4921      	ldr	r1, [pc, #132]	; (800741c <vTaskStartScheduler+0xb4>)
 8007398:	4821      	ldr	r0, [pc, #132]	; (8007420 <vTaskStartScheduler+0xb8>)
 800739a:	f7ff fe0f 	bl	8006fbc <xTaskCreateStatic>
 800739e:	4603      	mov	r3, r0
 80073a0:	4a20      	ldr	r2, [pc, #128]	; (8007424 <vTaskStartScheduler+0xbc>)
 80073a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80073a4:	4b1f      	ldr	r3, [pc, #124]	; (8007424 <vTaskStartScheduler+0xbc>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80073ac:	2301      	movs	r3, #1
 80073ae:	617b      	str	r3, [r7, #20]
 80073b0:	e001      	b.n	80073b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80073b2:	2300      	movs	r3, #0
 80073b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d102      	bne.n	80073c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80073bc:	f000 fcfc 	bl	8007db8 <xTimerCreateTimerTask>
 80073c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d116      	bne.n	80073f6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80073c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073cc:	f383 8811 	msr	BASEPRI, r3
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	613b      	str	r3, [r7, #16]
}
 80073da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80073dc:	4b12      	ldr	r3, [pc, #72]	; (8007428 <vTaskStartScheduler+0xc0>)
 80073de:	f04f 32ff 	mov.w	r2, #4294967295
 80073e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80073e4:	4b11      	ldr	r3, [pc, #68]	; (800742c <vTaskStartScheduler+0xc4>)
 80073e6:	2201      	movs	r2, #1
 80073e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80073ea:	4b11      	ldr	r3, [pc, #68]	; (8007430 <vTaskStartScheduler+0xc8>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80073f0:	f001 f8be 	bl	8008570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80073f4:	e00e      	b.n	8007414 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073fc:	d10a      	bne.n	8007414 <vTaskStartScheduler+0xac>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	60fb      	str	r3, [r7, #12]
}
 8007410:	bf00      	nop
 8007412:	e7fe      	b.n	8007412 <vTaskStartScheduler+0xaa>
}
 8007414:	bf00      	nop
 8007416:	3718      	adds	r7, #24
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	0800a9e0 	.word	0x0800a9e0
 8007420:	08007a4d 	.word	0x08007a4d
 8007424:	20000c74 	.word	0x20000c74
 8007428:	20000c70 	.word	0x20000c70
 800742c:	20000c5c 	.word	0x20000c5c
 8007430:	20000c54 	.word	0x20000c54

08007434 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007434:	b480      	push	{r7}
 8007436:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007438:	4b04      	ldr	r3, [pc, #16]	; (800744c <vTaskSuspendAll+0x18>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3301      	adds	r3, #1
 800743e:	4a03      	ldr	r2, [pc, #12]	; (800744c <vTaskSuspendAll+0x18>)
 8007440:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007442:	bf00      	nop
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	20000c78 	.word	0x20000c78

08007450 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007456:	2300      	movs	r3, #0
 8007458:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800745a:	2300      	movs	r3, #0
 800745c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800745e:	4b42      	ldr	r3, [pc, #264]	; (8007568 <xTaskResumeAll+0x118>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10a      	bne.n	800747c <xTaskResumeAll+0x2c>
	__asm volatile
 8007466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	603b      	str	r3, [r7, #0]
}
 8007478:	bf00      	nop
 800747a:	e7fe      	b.n	800747a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800747c:	f001 f91a 	bl	80086b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007480:	4b39      	ldr	r3, [pc, #228]	; (8007568 <xTaskResumeAll+0x118>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	3b01      	subs	r3, #1
 8007486:	4a38      	ldr	r2, [pc, #224]	; (8007568 <xTaskResumeAll+0x118>)
 8007488:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800748a:	4b37      	ldr	r3, [pc, #220]	; (8007568 <xTaskResumeAll+0x118>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d162      	bne.n	8007558 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007492:	4b36      	ldr	r3, [pc, #216]	; (800756c <xTaskResumeAll+0x11c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d05e      	beq.n	8007558 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800749a:	e02f      	b.n	80074fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800749c:	4b34      	ldr	r3, [pc, #208]	; (8007570 <xTaskResumeAll+0x120>)
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	3318      	adds	r3, #24
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7ff f871 	bl	8006590 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	3304      	adds	r3, #4
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7ff f86c 	bl	8006590 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074bc:	4b2d      	ldr	r3, [pc, #180]	; (8007574 <xTaskResumeAll+0x124>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d903      	bls.n	80074cc <xTaskResumeAll+0x7c>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c8:	4a2a      	ldr	r2, [pc, #168]	; (8007574 <xTaskResumeAll+0x124>)
 80074ca:	6013      	str	r3, [r2, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d0:	4613      	mov	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4413      	add	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4a27      	ldr	r2, [pc, #156]	; (8007578 <xTaskResumeAll+0x128>)
 80074da:	441a      	add	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	3304      	adds	r3, #4
 80074e0:	4619      	mov	r1, r3
 80074e2:	4610      	mov	r0, r2
 80074e4:	f7fe fff7 	bl	80064d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ec:	4b23      	ldr	r3, [pc, #140]	; (800757c <xTaskResumeAll+0x12c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d302      	bcc.n	80074fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80074f6:	4b22      	ldr	r3, [pc, #136]	; (8007580 <xTaskResumeAll+0x130>)
 80074f8:	2201      	movs	r2, #1
 80074fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074fc:	4b1c      	ldr	r3, [pc, #112]	; (8007570 <xTaskResumeAll+0x120>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1cb      	bne.n	800749c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d001      	beq.n	800750e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800750a:	f000 fb55 	bl	8007bb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800750e:	4b1d      	ldr	r3, [pc, #116]	; (8007584 <xTaskResumeAll+0x134>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d010      	beq.n	800753c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800751a:	f000 f847 	bl	80075ac <xTaskIncrementTick>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d002      	beq.n	800752a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007524:	4b16      	ldr	r3, [pc, #88]	; (8007580 <xTaskResumeAll+0x130>)
 8007526:	2201      	movs	r2, #1
 8007528:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	3b01      	subs	r3, #1
 800752e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1f1      	bne.n	800751a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007536:	4b13      	ldr	r3, [pc, #76]	; (8007584 <xTaskResumeAll+0x134>)
 8007538:	2200      	movs	r2, #0
 800753a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800753c:	4b10      	ldr	r3, [pc, #64]	; (8007580 <xTaskResumeAll+0x130>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d009      	beq.n	8007558 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007544:	2301      	movs	r3, #1
 8007546:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007548:	4b0f      	ldr	r3, [pc, #60]	; (8007588 <xTaskResumeAll+0x138>)
 800754a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800754e:	601a      	str	r2, [r3, #0]
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007558:	f001 f8dc 	bl	8008714 <vPortExitCritical>

	return xAlreadyYielded;
 800755c:	68bb      	ldr	r3, [r7, #8]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	20000c78 	.word	0x20000c78
 800756c:	20000c50 	.word	0x20000c50
 8007570:	20000c10 	.word	0x20000c10
 8007574:	20000c58 	.word	0x20000c58
 8007578:	20000780 	.word	0x20000780
 800757c:	2000077c 	.word	0x2000077c
 8007580:	20000c64 	.word	0x20000c64
 8007584:	20000c60 	.word	0x20000c60
 8007588:	e000ed04 	.word	0xe000ed04

0800758c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007592:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <xTaskGetTickCount+0x1c>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007598:	687b      	ldr	r3, [r7, #4]
}
 800759a:	4618      	mov	r0, r3
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	20000c54 	.word	0x20000c54

080075ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075b2:	2300      	movs	r3, #0
 80075b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075b6:	4b4f      	ldr	r3, [pc, #316]	; (80076f4 <xTaskIncrementTick+0x148>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f040 808f 	bne.w	80076de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075c0:	4b4d      	ldr	r3, [pc, #308]	; (80076f8 <xTaskIncrementTick+0x14c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3301      	adds	r3, #1
 80075c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075c8:	4a4b      	ldr	r2, [pc, #300]	; (80076f8 <xTaskIncrementTick+0x14c>)
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d120      	bne.n	8007616 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80075d4:	4b49      	ldr	r3, [pc, #292]	; (80076fc <xTaskIncrementTick+0x150>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00a      	beq.n	80075f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80075de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	603b      	str	r3, [r7, #0]
}
 80075f0:	bf00      	nop
 80075f2:	e7fe      	b.n	80075f2 <xTaskIncrementTick+0x46>
 80075f4:	4b41      	ldr	r3, [pc, #260]	; (80076fc <xTaskIncrementTick+0x150>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	60fb      	str	r3, [r7, #12]
 80075fa:	4b41      	ldr	r3, [pc, #260]	; (8007700 <xTaskIncrementTick+0x154>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a3f      	ldr	r2, [pc, #252]	; (80076fc <xTaskIncrementTick+0x150>)
 8007600:	6013      	str	r3, [r2, #0]
 8007602:	4a3f      	ldr	r2, [pc, #252]	; (8007700 <xTaskIncrementTick+0x154>)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6013      	str	r3, [r2, #0]
 8007608:	4b3e      	ldr	r3, [pc, #248]	; (8007704 <xTaskIncrementTick+0x158>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3301      	adds	r3, #1
 800760e:	4a3d      	ldr	r2, [pc, #244]	; (8007704 <xTaskIncrementTick+0x158>)
 8007610:	6013      	str	r3, [r2, #0]
 8007612:	f000 fad1 	bl	8007bb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007616:	4b3c      	ldr	r3, [pc, #240]	; (8007708 <xTaskIncrementTick+0x15c>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	429a      	cmp	r2, r3
 800761e:	d349      	bcc.n	80076b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007620:	4b36      	ldr	r3, [pc, #216]	; (80076fc <xTaskIncrementTick+0x150>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d104      	bne.n	8007634 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800762a:	4b37      	ldr	r3, [pc, #220]	; (8007708 <xTaskIncrementTick+0x15c>)
 800762c:	f04f 32ff 	mov.w	r2, #4294967295
 8007630:	601a      	str	r2, [r3, #0]
					break;
 8007632:	e03f      	b.n	80076b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007634:	4b31      	ldr	r3, [pc, #196]	; (80076fc <xTaskIncrementTick+0x150>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	429a      	cmp	r2, r3
 800764a:	d203      	bcs.n	8007654 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800764c:	4a2e      	ldr	r2, [pc, #184]	; (8007708 <xTaskIncrementTick+0x15c>)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007652:	e02f      	b.n	80076b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	3304      	adds	r3, #4
 8007658:	4618      	mov	r0, r3
 800765a:	f7fe ff99 	bl	8006590 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007662:	2b00      	cmp	r3, #0
 8007664:	d004      	beq.n	8007670 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	3318      	adds	r3, #24
 800766a:	4618      	mov	r0, r3
 800766c:	f7fe ff90 	bl	8006590 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007674:	4b25      	ldr	r3, [pc, #148]	; (800770c <xTaskIncrementTick+0x160>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	429a      	cmp	r2, r3
 800767a:	d903      	bls.n	8007684 <xTaskIncrementTick+0xd8>
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007680:	4a22      	ldr	r2, [pc, #136]	; (800770c <xTaskIncrementTick+0x160>)
 8007682:	6013      	str	r3, [r2, #0]
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007688:	4613      	mov	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4a1f      	ldr	r2, [pc, #124]	; (8007710 <xTaskIncrementTick+0x164>)
 8007692:	441a      	add	r2, r3
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	3304      	adds	r3, #4
 8007698:	4619      	mov	r1, r3
 800769a:	4610      	mov	r0, r2
 800769c:	f7fe ff1b 	bl	80064d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a4:	4b1b      	ldr	r3, [pc, #108]	; (8007714 <xTaskIncrementTick+0x168>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d3b8      	bcc.n	8007620 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80076ae:	2301      	movs	r3, #1
 80076b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076b2:	e7b5      	b.n	8007620 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076b4:	4b17      	ldr	r3, [pc, #92]	; (8007714 <xTaskIncrementTick+0x168>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ba:	4915      	ldr	r1, [pc, #84]	; (8007710 <xTaskIncrementTick+0x164>)
 80076bc:	4613      	mov	r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	440b      	add	r3, r1
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d901      	bls.n	80076d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80076cc:	2301      	movs	r3, #1
 80076ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80076d0:	4b11      	ldr	r3, [pc, #68]	; (8007718 <xTaskIncrementTick+0x16c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d007      	beq.n	80076e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80076d8:	2301      	movs	r3, #1
 80076da:	617b      	str	r3, [r7, #20]
 80076dc:	e004      	b.n	80076e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80076de:	4b0f      	ldr	r3, [pc, #60]	; (800771c <xTaskIncrementTick+0x170>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3301      	adds	r3, #1
 80076e4:	4a0d      	ldr	r2, [pc, #52]	; (800771c <xTaskIncrementTick+0x170>)
 80076e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80076e8:	697b      	ldr	r3, [r7, #20]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3718      	adds	r7, #24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	20000c78 	.word	0x20000c78
 80076f8:	20000c54 	.word	0x20000c54
 80076fc:	20000c08 	.word	0x20000c08
 8007700:	20000c0c 	.word	0x20000c0c
 8007704:	20000c68 	.word	0x20000c68
 8007708:	20000c70 	.word	0x20000c70
 800770c:	20000c58 	.word	0x20000c58
 8007710:	20000780 	.word	0x20000780
 8007714:	2000077c 	.word	0x2000077c
 8007718:	20000c64 	.word	0x20000c64
 800771c:	20000c60 	.word	0x20000c60

08007720 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007726:	4b28      	ldr	r3, [pc, #160]	; (80077c8 <vTaskSwitchContext+0xa8>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d003      	beq.n	8007736 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800772e:	4b27      	ldr	r3, [pc, #156]	; (80077cc <vTaskSwitchContext+0xac>)
 8007730:	2201      	movs	r2, #1
 8007732:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007734:	e041      	b.n	80077ba <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007736:	4b25      	ldr	r3, [pc, #148]	; (80077cc <vTaskSwitchContext+0xac>)
 8007738:	2200      	movs	r2, #0
 800773a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800773c:	4b24      	ldr	r3, [pc, #144]	; (80077d0 <vTaskSwitchContext+0xb0>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	60fb      	str	r3, [r7, #12]
 8007742:	e010      	b.n	8007766 <vTaskSwitchContext+0x46>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10a      	bne.n	8007760 <vTaskSwitchContext+0x40>
	__asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	607b      	str	r3, [r7, #4]
}
 800775c:	bf00      	nop
 800775e:	e7fe      	b.n	800775e <vTaskSwitchContext+0x3e>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	3b01      	subs	r3, #1
 8007764:	60fb      	str	r3, [r7, #12]
 8007766:	491b      	ldr	r1, [pc, #108]	; (80077d4 <vTaskSwitchContext+0xb4>)
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	4613      	mov	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4413      	add	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	440b      	add	r3, r1
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d0e4      	beq.n	8007744 <vTaskSwitchContext+0x24>
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	4613      	mov	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4413      	add	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4a13      	ldr	r2, [pc, #76]	; (80077d4 <vTaskSwitchContext+0xb4>)
 8007786:	4413      	add	r3, r2
 8007788:	60bb      	str	r3, [r7, #8]
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	685a      	ldr	r2, [r3, #4]
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	605a      	str	r2, [r3, #4]
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	3308      	adds	r3, #8
 800779c:	429a      	cmp	r2, r3
 800779e:	d104      	bne.n	80077aa <vTaskSwitchContext+0x8a>
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	685a      	ldr	r2, [r3, #4]
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	605a      	str	r2, [r3, #4]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	4a09      	ldr	r2, [pc, #36]	; (80077d8 <vTaskSwitchContext+0xb8>)
 80077b2:	6013      	str	r3, [r2, #0]
 80077b4:	4a06      	ldr	r2, [pc, #24]	; (80077d0 <vTaskSwitchContext+0xb0>)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6013      	str	r3, [r2, #0]
}
 80077ba:	bf00      	nop
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	20000c78 	.word	0x20000c78
 80077cc:	20000c64 	.word	0x20000c64
 80077d0:	20000c58 	.word	0x20000c58
 80077d4:	20000780 	.word	0x20000780
 80077d8:	2000077c 	.word	0x2000077c

080077dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10a      	bne.n	8007802 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	60fb      	str	r3, [r7, #12]
}
 80077fe:	bf00      	nop
 8007800:	e7fe      	b.n	8007800 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007802:	4b07      	ldr	r3, [pc, #28]	; (8007820 <vTaskPlaceOnEventList+0x44>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3318      	adds	r3, #24
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7fe fe87 	bl	800651e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007810:	2101      	movs	r1, #1
 8007812:	6838      	ldr	r0, [r7, #0]
 8007814:	f000 fa7c 	bl	8007d10 <prvAddCurrentTaskToDelayedList>
}
 8007818:	bf00      	nop
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	2000077c 	.word	0x2000077c

08007824 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007824:	b580      	push	{r7, lr}
 8007826:	b086      	sub	sp, #24
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10a      	bne.n	800784c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	617b      	str	r3, [r7, #20]
}
 8007848:	bf00      	nop
 800784a:	e7fe      	b.n	800784a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800784c:	4b0a      	ldr	r3, [pc, #40]	; (8007878 <vTaskPlaceOnEventListRestricted+0x54>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	3318      	adds	r3, #24
 8007852:	4619      	mov	r1, r3
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f7fe fe3e 	bl	80064d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d002      	beq.n	8007866 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007860:	f04f 33ff 	mov.w	r3, #4294967295
 8007864:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007866:	6879      	ldr	r1, [r7, #4]
 8007868:	68b8      	ldr	r0, [r7, #8]
 800786a:	f000 fa51 	bl	8007d10 <prvAddCurrentTaskToDelayedList>
	}
 800786e:	bf00      	nop
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	2000077c 	.word	0x2000077c

0800787c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10a      	bne.n	80078a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	60fb      	str	r3, [r7, #12]
}
 80078a4:	bf00      	nop
 80078a6:	e7fe      	b.n	80078a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	3318      	adds	r3, #24
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fe fe6f 	bl	8006590 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078b2:	4b1e      	ldr	r3, [pc, #120]	; (800792c <xTaskRemoveFromEventList+0xb0>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d11d      	bne.n	80078f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	3304      	adds	r3, #4
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fe fe66 	bl	8006590 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c8:	4b19      	ldr	r3, [pc, #100]	; (8007930 <xTaskRemoveFromEventList+0xb4>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d903      	bls.n	80078d8 <xTaskRemoveFromEventList+0x5c>
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d4:	4a16      	ldr	r2, [pc, #88]	; (8007930 <xTaskRemoveFromEventList+0xb4>)
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078dc:	4613      	mov	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4a13      	ldr	r2, [pc, #76]	; (8007934 <xTaskRemoveFromEventList+0xb8>)
 80078e6:	441a      	add	r2, r3
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	3304      	adds	r3, #4
 80078ec:	4619      	mov	r1, r3
 80078ee:	4610      	mov	r0, r2
 80078f0:	f7fe fdf1 	bl	80064d6 <vListInsertEnd>
 80078f4:	e005      	b.n	8007902 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	3318      	adds	r3, #24
 80078fa:	4619      	mov	r1, r3
 80078fc:	480e      	ldr	r0, [pc, #56]	; (8007938 <xTaskRemoveFromEventList+0xbc>)
 80078fe:	f7fe fdea 	bl	80064d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007906:	4b0d      	ldr	r3, [pc, #52]	; (800793c <xTaskRemoveFromEventList+0xc0>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790c:	429a      	cmp	r2, r3
 800790e:	d905      	bls.n	800791c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007910:	2301      	movs	r3, #1
 8007912:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007914:	4b0a      	ldr	r3, [pc, #40]	; (8007940 <xTaskRemoveFromEventList+0xc4>)
 8007916:	2201      	movs	r2, #1
 8007918:	601a      	str	r2, [r3, #0]
 800791a:	e001      	b.n	8007920 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800791c:	2300      	movs	r3, #0
 800791e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007920:	697b      	ldr	r3, [r7, #20]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	20000c78 	.word	0x20000c78
 8007930:	20000c58 	.word	0x20000c58
 8007934:	20000780 	.word	0x20000780
 8007938:	20000c10 	.word	0x20000c10
 800793c:	2000077c 	.word	0x2000077c
 8007940:	20000c64 	.word	0x20000c64

08007944 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800794c:	4b06      	ldr	r3, [pc, #24]	; (8007968 <vTaskInternalSetTimeOutState+0x24>)
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007954:	4b05      	ldr	r3, [pc, #20]	; (800796c <vTaskInternalSetTimeOutState+0x28>)
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	605a      	str	r2, [r3, #4]
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	20000c68 	.word	0x20000c68
 800796c:	20000c54 	.word	0x20000c54

08007970 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b088      	sub	sp, #32
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10a      	bne.n	8007996 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007984:	f383 8811 	msr	BASEPRI, r3
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	613b      	str	r3, [r7, #16]
}
 8007992:	bf00      	nop
 8007994:	e7fe      	b.n	8007994 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10a      	bne.n	80079b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800799c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	60fb      	str	r3, [r7, #12]
}
 80079ae:	bf00      	nop
 80079b0:	e7fe      	b.n	80079b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80079b2:	f000 fe7f 	bl	80086b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079b6:	4b1d      	ldr	r3, [pc, #116]	; (8007a2c <xTaskCheckForTimeOut+0xbc>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ce:	d102      	bne.n	80079d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079d0:	2300      	movs	r3, #0
 80079d2:	61fb      	str	r3, [r7, #28]
 80079d4:	e023      	b.n	8007a1e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	4b15      	ldr	r3, [pc, #84]	; (8007a30 <xTaskCheckForTimeOut+0xc0>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d007      	beq.n	80079f2 <xTaskCheckForTimeOut+0x82>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d302      	bcc.n	80079f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079ec:	2301      	movs	r3, #1
 80079ee:	61fb      	str	r3, [r7, #28]
 80079f0:	e015      	b.n	8007a1e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d20b      	bcs.n	8007a14 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	1ad2      	subs	r2, r2, r3
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7ff ff9b 	bl	8007944 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	61fb      	str	r3, [r7, #28]
 8007a12:	e004      	b.n	8007a1e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2200      	movs	r2, #0
 8007a18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a1e:	f000 fe79 	bl	8008714 <vPortExitCritical>

	return xReturn;
 8007a22:	69fb      	ldr	r3, [r7, #28]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3720      	adds	r7, #32
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	20000c54 	.word	0x20000c54
 8007a30:	20000c68 	.word	0x20000c68

08007a34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a34:	b480      	push	{r7}
 8007a36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a38:	4b03      	ldr	r3, [pc, #12]	; (8007a48 <vTaskMissedYield+0x14>)
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	601a      	str	r2, [r3, #0]
}
 8007a3e:	bf00      	nop
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	20000c64 	.word	0x20000c64

08007a4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a54:	f000 f852 	bl	8007afc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a58:	4b06      	ldr	r3, [pc, #24]	; (8007a74 <prvIdleTask+0x28>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d9f9      	bls.n	8007a54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a60:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <prvIdleTask+0x2c>)
 8007a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a66:	601a      	str	r2, [r3, #0]
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a70:	e7f0      	b.n	8007a54 <prvIdleTask+0x8>
 8007a72:	bf00      	nop
 8007a74:	20000780 	.word	0x20000780
 8007a78:	e000ed04 	.word	0xe000ed04

08007a7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a82:	2300      	movs	r3, #0
 8007a84:	607b      	str	r3, [r7, #4]
 8007a86:	e00c      	b.n	8007aa2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4413      	add	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4a12      	ldr	r2, [pc, #72]	; (8007adc <prvInitialiseTaskLists+0x60>)
 8007a94:	4413      	add	r3, r2
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fe fcf0 	bl	800647c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	607b      	str	r3, [r7, #4]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b37      	cmp	r3, #55	; 0x37
 8007aa6:	d9ef      	bls.n	8007a88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007aa8:	480d      	ldr	r0, [pc, #52]	; (8007ae0 <prvInitialiseTaskLists+0x64>)
 8007aaa:	f7fe fce7 	bl	800647c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007aae:	480d      	ldr	r0, [pc, #52]	; (8007ae4 <prvInitialiseTaskLists+0x68>)
 8007ab0:	f7fe fce4 	bl	800647c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ab4:	480c      	ldr	r0, [pc, #48]	; (8007ae8 <prvInitialiseTaskLists+0x6c>)
 8007ab6:	f7fe fce1 	bl	800647c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007aba:	480c      	ldr	r0, [pc, #48]	; (8007aec <prvInitialiseTaskLists+0x70>)
 8007abc:	f7fe fcde 	bl	800647c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ac0:	480b      	ldr	r0, [pc, #44]	; (8007af0 <prvInitialiseTaskLists+0x74>)
 8007ac2:	f7fe fcdb 	bl	800647c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ac6:	4b0b      	ldr	r3, [pc, #44]	; (8007af4 <prvInitialiseTaskLists+0x78>)
 8007ac8:	4a05      	ldr	r2, [pc, #20]	; (8007ae0 <prvInitialiseTaskLists+0x64>)
 8007aca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007acc:	4b0a      	ldr	r3, [pc, #40]	; (8007af8 <prvInitialiseTaskLists+0x7c>)
 8007ace:	4a05      	ldr	r2, [pc, #20]	; (8007ae4 <prvInitialiseTaskLists+0x68>)
 8007ad0:	601a      	str	r2, [r3, #0]
}
 8007ad2:	bf00      	nop
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	20000780 	.word	0x20000780
 8007ae0:	20000be0 	.word	0x20000be0
 8007ae4:	20000bf4 	.word	0x20000bf4
 8007ae8:	20000c10 	.word	0x20000c10
 8007aec:	20000c24 	.word	0x20000c24
 8007af0:	20000c3c 	.word	0x20000c3c
 8007af4:	20000c08 	.word	0x20000c08
 8007af8:	20000c0c 	.word	0x20000c0c

08007afc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b02:	e019      	b.n	8007b38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b04:	f000 fdd6 	bl	80086b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b08:	4b10      	ldr	r3, [pc, #64]	; (8007b4c <prvCheckTasksWaitingTermination+0x50>)
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	3304      	adds	r3, #4
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7fe fd3b 	bl	8006590 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b1a:	4b0d      	ldr	r3, [pc, #52]	; (8007b50 <prvCheckTasksWaitingTermination+0x54>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	4a0b      	ldr	r2, [pc, #44]	; (8007b50 <prvCheckTasksWaitingTermination+0x54>)
 8007b22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b24:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <prvCheckTasksWaitingTermination+0x58>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	4a0a      	ldr	r2, [pc, #40]	; (8007b54 <prvCheckTasksWaitingTermination+0x58>)
 8007b2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b2e:	f000 fdf1 	bl	8008714 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f810 	bl	8007b58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b38:	4b06      	ldr	r3, [pc, #24]	; (8007b54 <prvCheckTasksWaitingTermination+0x58>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1e1      	bne.n	8007b04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b40:	bf00      	nop
 8007b42:	bf00      	nop
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	20000c24 	.word	0x20000c24
 8007b50:	20000c50 	.word	0x20000c50
 8007b54:	20000c38 	.word	0x20000c38

08007b58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d108      	bne.n	8007b7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 ff8e 	bl	8008a90 <vPortFree>
				vPortFree( pxTCB );
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 ff8b 	bl	8008a90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b7a:	e018      	b.n	8007bae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d103      	bne.n	8007b8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 ff82 	bl	8008a90 <vPortFree>
	}
 8007b8c:	e00f      	b.n	8007bae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d00a      	beq.n	8007bae <prvDeleteTCB+0x56>
	__asm volatile
 8007b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9c:	f383 8811 	msr	BASEPRI, r3
 8007ba0:	f3bf 8f6f 	isb	sy
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	60fb      	str	r3, [r7, #12]
}
 8007baa:	bf00      	nop
 8007bac:	e7fe      	b.n	8007bac <prvDeleteTCB+0x54>
	}
 8007bae:	bf00      	nop
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bbe:	4b0c      	ldr	r3, [pc, #48]	; (8007bf0 <prvResetNextTaskUnblockTime+0x38>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d104      	bne.n	8007bd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007bc8:	4b0a      	ldr	r3, [pc, #40]	; (8007bf4 <prvResetNextTaskUnblockTime+0x3c>)
 8007bca:	f04f 32ff 	mov.w	r2, #4294967295
 8007bce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007bd0:	e008      	b.n	8007be4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bd2:	4b07      	ldr	r3, [pc, #28]	; (8007bf0 <prvResetNextTaskUnblockTime+0x38>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	4a04      	ldr	r2, [pc, #16]	; (8007bf4 <prvResetNextTaskUnblockTime+0x3c>)
 8007be2:	6013      	str	r3, [r2, #0]
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr
 8007bf0:	20000c08 	.word	0x20000c08
 8007bf4:	20000c70 	.word	0x20000c70

08007bf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007bfe:	4b0b      	ldr	r3, [pc, #44]	; (8007c2c <xTaskGetSchedulerState+0x34>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d102      	bne.n	8007c0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c06:	2301      	movs	r3, #1
 8007c08:	607b      	str	r3, [r7, #4]
 8007c0a:	e008      	b.n	8007c1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c0c:	4b08      	ldr	r3, [pc, #32]	; (8007c30 <xTaskGetSchedulerState+0x38>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d102      	bne.n	8007c1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c14:	2302      	movs	r3, #2
 8007c16:	607b      	str	r3, [r7, #4]
 8007c18:	e001      	b.n	8007c1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c1e:	687b      	ldr	r3, [r7, #4]
	}
 8007c20:	4618      	mov	r0, r3
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	20000c5c 	.word	0x20000c5c
 8007c30:	20000c78 	.word	0x20000c78

08007c34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c40:	2300      	movs	r3, #0
 8007c42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d056      	beq.n	8007cf8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c4a:	4b2e      	ldr	r3, [pc, #184]	; (8007d04 <xTaskPriorityDisinherit+0xd0>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d00a      	beq.n	8007c6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	60fb      	str	r3, [r7, #12]
}
 8007c66:	bf00      	nop
 8007c68:	e7fe      	b.n	8007c68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10a      	bne.n	8007c88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	60bb      	str	r3, [r7, #8]
}
 8007c84:	bf00      	nop
 8007c86:	e7fe      	b.n	8007c86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c8c:	1e5a      	subs	r2, r3, #1
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d02c      	beq.n	8007cf8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d128      	bne.n	8007cf8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	3304      	adds	r3, #4
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fe fc70 	bl	8006590 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc8:	4b0f      	ldr	r3, [pc, #60]	; (8007d08 <xTaskPriorityDisinherit+0xd4>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d903      	bls.n	8007cd8 <xTaskPriorityDisinherit+0xa4>
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd4:	4a0c      	ldr	r2, [pc, #48]	; (8007d08 <xTaskPriorityDisinherit+0xd4>)
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cdc:	4613      	mov	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4a09      	ldr	r2, [pc, #36]	; (8007d0c <xTaskPriorityDisinherit+0xd8>)
 8007ce6:	441a      	add	r2, r3
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	3304      	adds	r3, #4
 8007cec:	4619      	mov	r1, r3
 8007cee:	4610      	mov	r0, r2
 8007cf0:	f7fe fbf1 	bl	80064d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007cf8:	697b      	ldr	r3, [r7, #20]
	}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3718      	adds	r7, #24
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	2000077c 	.word	0x2000077c
 8007d08:	20000c58 	.word	0x20000c58
 8007d0c:	20000780 	.word	0x20000780

08007d10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d1a:	4b21      	ldr	r3, [pc, #132]	; (8007da0 <prvAddCurrentTaskToDelayedList+0x90>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d20:	4b20      	ldr	r3, [pc, #128]	; (8007da4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	3304      	adds	r3, #4
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fe fc32 	bl	8006590 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d32:	d10a      	bne.n	8007d4a <prvAddCurrentTaskToDelayedList+0x3a>
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d007      	beq.n	8007d4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d3a:	4b1a      	ldr	r3, [pc, #104]	; (8007da4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3304      	adds	r3, #4
 8007d40:	4619      	mov	r1, r3
 8007d42:	4819      	ldr	r0, [pc, #100]	; (8007da8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007d44:	f7fe fbc7 	bl	80064d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d48:	e026      	b.n	8007d98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4413      	add	r3, r2
 8007d50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d52:	4b14      	ldr	r3, [pc, #80]	; (8007da4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d209      	bcs.n	8007d76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d62:	4b12      	ldr	r3, [pc, #72]	; (8007dac <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	4b0f      	ldr	r3, [pc, #60]	; (8007da4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3304      	adds	r3, #4
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	4610      	mov	r0, r2
 8007d70:	f7fe fbd5 	bl	800651e <vListInsert>
}
 8007d74:	e010      	b.n	8007d98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d76:	4b0e      	ldr	r3, [pc, #56]	; (8007db0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	4b0a      	ldr	r3, [pc, #40]	; (8007da4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	3304      	adds	r3, #4
 8007d80:	4619      	mov	r1, r3
 8007d82:	4610      	mov	r0, r2
 8007d84:	f7fe fbcb 	bl	800651e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d88:	4b0a      	ldr	r3, [pc, #40]	; (8007db4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d202      	bcs.n	8007d98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d92:	4a08      	ldr	r2, [pc, #32]	; (8007db4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	6013      	str	r3, [r2, #0]
}
 8007d98:	bf00      	nop
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	20000c54 	.word	0x20000c54
 8007da4:	2000077c 	.word	0x2000077c
 8007da8:	20000c3c 	.word	0x20000c3c
 8007dac:	20000c0c 	.word	0x20000c0c
 8007db0:	20000c08 	.word	0x20000c08
 8007db4:	20000c70 	.word	0x20000c70

08007db8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08a      	sub	sp, #40	; 0x28
 8007dbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007dc2:	f000 fb07 	bl	80083d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007dc6:	4b1c      	ldr	r3, [pc, #112]	; (8007e38 <xTimerCreateTimerTask+0x80>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d021      	beq.n	8007e12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007dd6:	1d3a      	adds	r2, r7, #4
 8007dd8:	f107 0108 	add.w	r1, r7, #8
 8007ddc:	f107 030c 	add.w	r3, r7, #12
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fe fb31 	bl	8006448 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007de6:	6879      	ldr	r1, [r7, #4]
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	9202      	str	r2, [sp, #8]
 8007dee:	9301      	str	r3, [sp, #4]
 8007df0:	2302      	movs	r3, #2
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	2300      	movs	r3, #0
 8007df6:	460a      	mov	r2, r1
 8007df8:	4910      	ldr	r1, [pc, #64]	; (8007e3c <xTimerCreateTimerTask+0x84>)
 8007dfa:	4811      	ldr	r0, [pc, #68]	; (8007e40 <xTimerCreateTimerTask+0x88>)
 8007dfc:	f7ff f8de 	bl	8006fbc <xTaskCreateStatic>
 8007e00:	4603      	mov	r3, r0
 8007e02:	4a10      	ldr	r2, [pc, #64]	; (8007e44 <xTimerCreateTimerTask+0x8c>)
 8007e04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e06:	4b0f      	ldr	r3, [pc, #60]	; (8007e44 <xTimerCreateTimerTask+0x8c>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d10a      	bne.n	8007e2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1c:	f383 8811 	msr	BASEPRI, r3
 8007e20:	f3bf 8f6f 	isb	sy
 8007e24:	f3bf 8f4f 	dsb	sy
 8007e28:	613b      	str	r3, [r7, #16]
}
 8007e2a:	bf00      	nop
 8007e2c:	e7fe      	b.n	8007e2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007e2e:	697b      	ldr	r3, [r7, #20]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3718      	adds	r7, #24
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	20000cac 	.word	0x20000cac
 8007e3c:	0800a9e8 	.word	0x0800a9e8
 8007e40:	08007f7d 	.word	0x08007f7d
 8007e44:	20000cb0 	.word	0x20000cb0

08007e48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b08a      	sub	sp, #40	; 0x28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	607a      	str	r2, [r7, #4]
 8007e54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e56:	2300      	movs	r3, #0
 8007e58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10a      	bne.n	8007e76 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e64:	f383 8811 	msr	BASEPRI, r3
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	623b      	str	r3, [r7, #32]
}
 8007e72:	bf00      	nop
 8007e74:	e7fe      	b.n	8007e74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e76:	4b1a      	ldr	r3, [pc, #104]	; (8007ee0 <xTimerGenericCommand+0x98>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d02a      	beq.n	8007ed4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	2b05      	cmp	r3, #5
 8007e8e:	dc18      	bgt.n	8007ec2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e90:	f7ff feb2 	bl	8007bf8 <xTaskGetSchedulerState>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d109      	bne.n	8007eae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e9a:	4b11      	ldr	r3, [pc, #68]	; (8007ee0 <xTimerGenericCommand+0x98>)
 8007e9c:	6818      	ldr	r0, [r3, #0]
 8007e9e:	f107 0110 	add.w	r1, r7, #16
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ea6:	f7fe fca1 	bl	80067ec <xQueueGenericSend>
 8007eaa:	6278      	str	r0, [r7, #36]	; 0x24
 8007eac:	e012      	b.n	8007ed4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007eae:	4b0c      	ldr	r3, [pc, #48]	; (8007ee0 <xTimerGenericCommand+0x98>)
 8007eb0:	6818      	ldr	r0, [r3, #0]
 8007eb2:	f107 0110 	add.w	r1, r7, #16
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f7fe fc97 	bl	80067ec <xQueueGenericSend>
 8007ebe:	6278      	str	r0, [r7, #36]	; 0x24
 8007ec0:	e008      	b.n	8007ed4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ec2:	4b07      	ldr	r3, [pc, #28]	; (8007ee0 <xTimerGenericCommand+0x98>)
 8007ec4:	6818      	ldr	r0, [r3, #0]
 8007ec6:	f107 0110 	add.w	r1, r7, #16
 8007eca:	2300      	movs	r3, #0
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	f7fe fd8b 	bl	80069e8 <xQueueGenericSendFromISR>
 8007ed2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3728      	adds	r7, #40	; 0x28
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	20000cac 	.word	0x20000cac

08007ee4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b088      	sub	sp, #32
 8007ee8:	af02      	add	r7, sp, #8
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eee:	4b22      	ldr	r3, [pc, #136]	; (8007f78 <prvProcessExpiredTimer+0x94>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	3304      	adds	r3, #4
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7fe fb47 	bl	8006590 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f08:	f003 0304 	and.w	r3, r3, #4
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d022      	beq.n	8007f56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	699a      	ldr	r2, [r3, #24]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	18d1      	adds	r1, r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	6978      	ldr	r0, [r7, #20]
 8007f1e:	f000 f8d1 	bl	80080c4 <prvInsertTimerInActiveList>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d01f      	beq.n	8007f68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f28:	2300      	movs	r3, #0
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	2100      	movs	r1, #0
 8007f32:	6978      	ldr	r0, [r7, #20]
 8007f34:	f7ff ff88 	bl	8007e48 <xTimerGenericCommand>
 8007f38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d113      	bne.n	8007f68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	60fb      	str	r3, [r7, #12]
}
 8007f52:	bf00      	nop
 8007f54:	e7fe      	b.n	8007f54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f5c:	f023 0301 	bic.w	r3, r3, #1
 8007f60:	b2da      	uxtb	r2, r3
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	6a1b      	ldr	r3, [r3, #32]
 8007f6c:	6978      	ldr	r0, [r7, #20]
 8007f6e:	4798      	blx	r3
}
 8007f70:	bf00      	nop
 8007f72:	3718      	adds	r7, #24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	20000ca4 	.word	0x20000ca4

08007f7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f84:	f107 0308 	add.w	r3, r7, #8
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 f857 	bl	800803c <prvGetNextExpireTime>
 8007f8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	4619      	mov	r1, r3
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f000 f803 	bl	8007fa0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f9a:	f000 f8d5 	bl	8008148 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f9e:	e7f1      	b.n	8007f84 <prvTimerTask+0x8>

08007fa0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007faa:	f7ff fa43 	bl	8007434 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fae:	f107 0308 	add.w	r3, r7, #8
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 f866 	bl	8008084 <prvSampleTimeNow>
 8007fb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d130      	bne.n	8008022 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10a      	bne.n	8007fdc <prvProcessTimerOrBlockTask+0x3c>
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d806      	bhi.n	8007fdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007fce:	f7ff fa3f 	bl	8007450 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007fd2:	68f9      	ldr	r1, [r7, #12]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f7ff ff85 	bl	8007ee4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007fda:	e024      	b.n	8008026 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d008      	beq.n	8007ff4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007fe2:	4b13      	ldr	r3, [pc, #76]	; (8008030 <prvProcessTimerOrBlockTask+0x90>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d101      	bne.n	8007ff0 <prvProcessTimerOrBlockTask+0x50>
 8007fec:	2301      	movs	r3, #1
 8007fee:	e000      	b.n	8007ff2 <prvProcessTimerOrBlockTask+0x52>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ff4:	4b0f      	ldr	r3, [pc, #60]	; (8008034 <prvProcessTimerOrBlockTask+0x94>)
 8007ff6:	6818      	ldr	r0, [r3, #0]
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	4619      	mov	r1, r3
 8008002:	f7fe ffa7 	bl	8006f54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008006:	f7ff fa23 	bl	8007450 <xTaskResumeAll>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10a      	bne.n	8008026 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008010:	4b09      	ldr	r3, [pc, #36]	; (8008038 <prvProcessTimerOrBlockTask+0x98>)
 8008012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008016:	601a      	str	r2, [r3, #0]
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	f3bf 8f6f 	isb	sy
}
 8008020:	e001      	b.n	8008026 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008022:	f7ff fa15 	bl	8007450 <xTaskResumeAll>
}
 8008026:	bf00      	nop
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	20000ca8 	.word	0x20000ca8
 8008034:	20000cac 	.word	0x20000cac
 8008038:	e000ed04 	.word	0xe000ed04

0800803c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008044:	4b0e      	ldr	r3, [pc, #56]	; (8008080 <prvGetNextExpireTime+0x44>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d101      	bne.n	8008052 <prvGetNextExpireTime+0x16>
 800804e:	2201      	movs	r2, #1
 8008050:	e000      	b.n	8008054 <prvGetNextExpireTime+0x18>
 8008052:	2200      	movs	r2, #0
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d105      	bne.n	800806c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008060:	4b07      	ldr	r3, [pc, #28]	; (8008080 <prvGetNextExpireTime+0x44>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	60fb      	str	r3, [r7, #12]
 800806a:	e001      	b.n	8008070 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008070:	68fb      	ldr	r3, [r7, #12]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	20000ca4 	.word	0x20000ca4

08008084 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800808c:	f7ff fa7e 	bl	800758c <xTaskGetTickCount>
 8008090:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008092:	4b0b      	ldr	r3, [pc, #44]	; (80080c0 <prvSampleTimeNow+0x3c>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	429a      	cmp	r2, r3
 800809a:	d205      	bcs.n	80080a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800809c:	f000 f936 	bl	800830c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	e002      	b.n	80080ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80080ae:	4a04      	ldr	r2, [pc, #16]	; (80080c0 <prvSampleTimeNow+0x3c>)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80080b4:	68fb      	ldr	r3, [r7, #12]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	20000cb4 	.word	0x20000cb4

080080c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b086      	sub	sp, #24
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
 80080d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80080d2:	2300      	movs	r3, #0
 80080d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d812      	bhi.n	8008110 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	1ad2      	subs	r2, r2, r3
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d302      	bcc.n	80080fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80080f8:	2301      	movs	r3, #1
 80080fa:	617b      	str	r3, [r7, #20]
 80080fc:	e01b      	b.n	8008136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80080fe:	4b10      	ldr	r3, [pc, #64]	; (8008140 <prvInsertTimerInActiveList+0x7c>)
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3304      	adds	r3, #4
 8008106:	4619      	mov	r1, r3
 8008108:	4610      	mov	r0, r2
 800810a:	f7fe fa08 	bl	800651e <vListInsert>
 800810e:	e012      	b.n	8008136 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	429a      	cmp	r2, r3
 8008116:	d206      	bcs.n	8008126 <prvInsertTimerInActiveList+0x62>
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	429a      	cmp	r2, r3
 800811e:	d302      	bcc.n	8008126 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008120:	2301      	movs	r3, #1
 8008122:	617b      	str	r3, [r7, #20]
 8008124:	e007      	b.n	8008136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008126:	4b07      	ldr	r3, [pc, #28]	; (8008144 <prvInsertTimerInActiveList+0x80>)
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3304      	adds	r3, #4
 800812e:	4619      	mov	r1, r3
 8008130:	4610      	mov	r0, r2
 8008132:	f7fe f9f4 	bl	800651e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008136:	697b      	ldr	r3, [r7, #20]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3718      	adds	r7, #24
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	20000ca8 	.word	0x20000ca8
 8008144:	20000ca4 	.word	0x20000ca4

08008148 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b08e      	sub	sp, #56	; 0x38
 800814c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800814e:	e0ca      	b.n	80082e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	da18      	bge.n	8008188 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008156:	1d3b      	adds	r3, r7, #4
 8008158:	3304      	adds	r3, #4
 800815a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800815c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10a      	bne.n	8008178 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	61fb      	str	r3, [r7, #28]
}
 8008174:	bf00      	nop
 8008176:	e7fe      	b.n	8008176 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800817e:	6850      	ldr	r0, [r2, #4]
 8008180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008182:	6892      	ldr	r2, [r2, #8]
 8008184:	4611      	mov	r1, r2
 8008186:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	f2c0 80aa 	blt.w	80082e4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008196:	695b      	ldr	r3, [r3, #20]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d004      	beq.n	80081a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800819c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819e:	3304      	adds	r3, #4
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fe f9f5 	bl	8006590 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081a6:	463b      	mov	r3, r7
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7ff ff6b 	bl	8008084 <prvSampleTimeNow>
 80081ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2b09      	cmp	r3, #9
 80081b4:	f200 8097 	bhi.w	80082e6 <prvProcessReceivedCommands+0x19e>
 80081b8:	a201      	add	r2, pc, #4	; (adr r2, 80081c0 <prvProcessReceivedCommands+0x78>)
 80081ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081be:	bf00      	nop
 80081c0:	080081e9 	.word	0x080081e9
 80081c4:	080081e9 	.word	0x080081e9
 80081c8:	080081e9 	.word	0x080081e9
 80081cc:	0800825d 	.word	0x0800825d
 80081d0:	08008271 	.word	0x08008271
 80081d4:	080082bb 	.word	0x080082bb
 80081d8:	080081e9 	.word	0x080081e9
 80081dc:	080081e9 	.word	0x080081e9
 80081e0:	0800825d 	.word	0x0800825d
 80081e4:	08008271 	.word	0x08008271
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081ee:	f043 0301 	orr.w	r3, r3, #1
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	18d1      	adds	r1, r2, r3
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008208:	f7ff ff5c 	bl	80080c4 <prvInsertTimerInActiveList>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d069      	beq.n	80082e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008214:	6a1b      	ldr	r3, [r3, #32]
 8008216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008218:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800821a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008220:	f003 0304 	and.w	r3, r3, #4
 8008224:	2b00      	cmp	r3, #0
 8008226:	d05e      	beq.n	80082e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	441a      	add	r2, r3
 8008230:	2300      	movs	r3, #0
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	2300      	movs	r3, #0
 8008236:	2100      	movs	r1, #0
 8008238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800823a:	f7ff fe05 	bl	8007e48 <xTimerGenericCommand>
 800823e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008240:	6a3b      	ldr	r3, [r7, #32]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d14f      	bne.n	80082e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824a:	f383 8811 	msr	BASEPRI, r3
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	61bb      	str	r3, [r7, #24]
}
 8008258:	bf00      	nop
 800825a:	e7fe      	b.n	800825a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008262:	f023 0301 	bic.w	r3, r3, #1
 8008266:	b2da      	uxtb	r2, r3
 8008268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800826e:	e03a      	b.n	80082e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008272:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008276:	f043 0301 	orr.w	r3, r3, #1
 800827a:	b2da      	uxtb	r2, r3
 800827c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008286:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10a      	bne.n	80082a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	617b      	str	r3, [r7, #20]
}
 80082a2:	bf00      	nop
 80082a4:	e7fe      	b.n	80082a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80082a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a8:	699a      	ldr	r2, [r3, #24]
 80082aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ac:	18d1      	adds	r1, r2, r3
 80082ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082b4:	f7ff ff06 	bl	80080c4 <prvInsertTimerInActiveList>
					break;
 80082b8:	e015      	b.n	80082e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80082ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082c0:	f003 0302 	and.w	r3, r3, #2
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d103      	bne.n	80082d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80082c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082ca:	f000 fbe1 	bl	8008a90 <vPortFree>
 80082ce:	e00a      	b.n	80082e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082d6:	f023 0301 	bic.w	r3, r3, #1
 80082da:	b2da      	uxtb	r2, r3
 80082dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80082e2:	e000      	b.n	80082e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80082e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082e6:	4b08      	ldr	r3, [pc, #32]	; (8008308 <prvProcessReceivedCommands+0x1c0>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	1d39      	adds	r1, r7, #4
 80082ec:	2200      	movs	r2, #0
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fe fc16 	bl	8006b20 <xQueueReceive>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f47f af2a 	bne.w	8008150 <prvProcessReceivedCommands+0x8>
	}
}
 80082fc:	bf00      	nop
 80082fe:	bf00      	nop
 8008300:	3730      	adds	r7, #48	; 0x30
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	20000cac 	.word	0x20000cac

0800830c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b088      	sub	sp, #32
 8008310:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008312:	e048      	b.n	80083a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008314:	4b2d      	ldr	r3, [pc, #180]	; (80083cc <prvSwitchTimerLists+0xc0>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800831e:	4b2b      	ldr	r3, [pc, #172]	; (80083cc <prvSwitchTimerLists+0xc0>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	3304      	adds	r3, #4
 800832c:	4618      	mov	r0, r3
 800832e:	f7fe f92f 	bl	8006590 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008340:	f003 0304 	and.w	r3, r3, #4
 8008344:	2b00      	cmp	r3, #0
 8008346:	d02e      	beq.n	80083a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	693a      	ldr	r2, [r7, #16]
 800834e:	4413      	add	r3, r2
 8008350:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	429a      	cmp	r2, r3
 8008358:	d90e      	bls.n	8008378 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008366:	4b19      	ldr	r3, [pc, #100]	; (80083cc <prvSwitchTimerLists+0xc0>)
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3304      	adds	r3, #4
 800836e:	4619      	mov	r1, r3
 8008370:	4610      	mov	r0, r2
 8008372:	f7fe f8d4 	bl	800651e <vListInsert>
 8008376:	e016      	b.n	80083a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008378:	2300      	movs	r3, #0
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	2300      	movs	r3, #0
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	2100      	movs	r1, #0
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f7ff fd60 	bl	8007e48 <xTimerGenericCommand>
 8008388:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10a      	bne.n	80083a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	603b      	str	r3, [r7, #0]
}
 80083a2:	bf00      	nop
 80083a4:	e7fe      	b.n	80083a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083a6:	4b09      	ldr	r3, [pc, #36]	; (80083cc <prvSwitchTimerLists+0xc0>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1b1      	bne.n	8008314 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80083b0:	4b06      	ldr	r3, [pc, #24]	; (80083cc <prvSwitchTimerLists+0xc0>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80083b6:	4b06      	ldr	r3, [pc, #24]	; (80083d0 <prvSwitchTimerLists+0xc4>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a04      	ldr	r2, [pc, #16]	; (80083cc <prvSwitchTimerLists+0xc0>)
 80083bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80083be:	4a04      	ldr	r2, [pc, #16]	; (80083d0 <prvSwitchTimerLists+0xc4>)
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	6013      	str	r3, [r2, #0]
}
 80083c4:	bf00      	nop
 80083c6:	3718      	adds	r7, #24
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	20000ca4 	.word	0x20000ca4
 80083d0:	20000ca8 	.word	0x20000ca8

080083d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80083da:	f000 f96b 	bl	80086b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80083de:	4b15      	ldr	r3, [pc, #84]	; (8008434 <prvCheckForValidListAndQueue+0x60>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d120      	bne.n	8008428 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80083e6:	4814      	ldr	r0, [pc, #80]	; (8008438 <prvCheckForValidListAndQueue+0x64>)
 80083e8:	f7fe f848 	bl	800647c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80083ec:	4813      	ldr	r0, [pc, #76]	; (800843c <prvCheckForValidListAndQueue+0x68>)
 80083ee:	f7fe f845 	bl	800647c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80083f2:	4b13      	ldr	r3, [pc, #76]	; (8008440 <prvCheckForValidListAndQueue+0x6c>)
 80083f4:	4a10      	ldr	r2, [pc, #64]	; (8008438 <prvCheckForValidListAndQueue+0x64>)
 80083f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80083f8:	4b12      	ldr	r3, [pc, #72]	; (8008444 <prvCheckForValidListAndQueue+0x70>)
 80083fa:	4a10      	ldr	r2, [pc, #64]	; (800843c <prvCheckForValidListAndQueue+0x68>)
 80083fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80083fe:	2300      	movs	r3, #0
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	4b11      	ldr	r3, [pc, #68]	; (8008448 <prvCheckForValidListAndQueue+0x74>)
 8008404:	4a11      	ldr	r2, [pc, #68]	; (800844c <prvCheckForValidListAndQueue+0x78>)
 8008406:	2110      	movs	r1, #16
 8008408:	200a      	movs	r0, #10
 800840a:	f7fe f953 	bl	80066b4 <xQueueGenericCreateStatic>
 800840e:	4603      	mov	r3, r0
 8008410:	4a08      	ldr	r2, [pc, #32]	; (8008434 <prvCheckForValidListAndQueue+0x60>)
 8008412:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008414:	4b07      	ldr	r3, [pc, #28]	; (8008434 <prvCheckForValidListAndQueue+0x60>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d005      	beq.n	8008428 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800841c:	4b05      	ldr	r3, [pc, #20]	; (8008434 <prvCheckForValidListAndQueue+0x60>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	490b      	ldr	r1, [pc, #44]	; (8008450 <prvCheckForValidListAndQueue+0x7c>)
 8008422:	4618      	mov	r0, r3
 8008424:	f7fe fd6c 	bl	8006f00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008428:	f000 f974 	bl	8008714 <vPortExitCritical>
}
 800842c:	bf00      	nop
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	20000cac 	.word	0x20000cac
 8008438:	20000c7c 	.word	0x20000c7c
 800843c:	20000c90 	.word	0x20000c90
 8008440:	20000ca4 	.word	0x20000ca4
 8008444:	20000ca8 	.word	0x20000ca8
 8008448:	20000d58 	.word	0x20000d58
 800844c:	20000cb8 	.word	0x20000cb8
 8008450:	0800a9f0 	.word	0x0800a9f0

08008454 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	3b04      	subs	r3, #4
 8008464:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800846c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3b04      	subs	r3, #4
 8008472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	f023 0201 	bic.w	r2, r3, #1
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3b04      	subs	r3, #4
 8008482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008484:	4a0c      	ldr	r2, [pc, #48]	; (80084b8 <pxPortInitialiseStack+0x64>)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	3b14      	subs	r3, #20
 800848e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	3b04      	subs	r3, #4
 800849a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f06f 0202 	mvn.w	r2, #2
 80084a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	3b20      	subs	r3, #32
 80084a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084aa:	68fb      	ldr	r3, [r7, #12]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3714      	adds	r7, #20
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr
 80084b8:	080084bd 	.word	0x080084bd

080084bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084c2:	2300      	movs	r3, #0
 80084c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084c6:	4b12      	ldr	r3, [pc, #72]	; (8008510 <prvTaskExitError+0x54>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ce:	d00a      	beq.n	80084e6 <prvTaskExitError+0x2a>
	__asm volatile
 80084d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	60fb      	str	r3, [r7, #12]
}
 80084e2:	bf00      	nop
 80084e4:	e7fe      	b.n	80084e4 <prvTaskExitError+0x28>
	__asm volatile
 80084e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	60bb      	str	r3, [r7, #8]
}
 80084f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084fa:	bf00      	nop
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d0fc      	beq.n	80084fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008502:	bf00      	nop
 8008504:	bf00      	nop
 8008506:	3714      	adds	r7, #20
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr
 8008510:	2000000c 	.word	0x2000000c
	...

08008520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008520:	4b07      	ldr	r3, [pc, #28]	; (8008540 <pxCurrentTCBConst2>)
 8008522:	6819      	ldr	r1, [r3, #0]
 8008524:	6808      	ldr	r0, [r1, #0]
 8008526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800852a:	f380 8809 	msr	PSP, r0
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	f04f 0000 	mov.w	r0, #0
 8008536:	f380 8811 	msr	BASEPRI, r0
 800853a:	4770      	bx	lr
 800853c:	f3af 8000 	nop.w

08008540 <pxCurrentTCBConst2>:
 8008540:	2000077c 	.word	0x2000077c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008544:	bf00      	nop
 8008546:	bf00      	nop

08008548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008548:	4808      	ldr	r0, [pc, #32]	; (800856c <prvPortStartFirstTask+0x24>)
 800854a:	6800      	ldr	r0, [r0, #0]
 800854c:	6800      	ldr	r0, [r0, #0]
 800854e:	f380 8808 	msr	MSP, r0
 8008552:	f04f 0000 	mov.w	r0, #0
 8008556:	f380 8814 	msr	CONTROL, r0
 800855a:	b662      	cpsie	i
 800855c:	b661      	cpsie	f
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	df00      	svc	0
 8008568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800856a:	bf00      	nop
 800856c:	e000ed08 	.word	0xe000ed08

08008570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008576:	4b46      	ldr	r3, [pc, #280]	; (8008690 <xPortStartScheduler+0x120>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a46      	ldr	r2, [pc, #280]	; (8008694 <xPortStartScheduler+0x124>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d10a      	bne.n	8008596 <xPortStartScheduler+0x26>
	__asm volatile
 8008580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008584:	f383 8811 	msr	BASEPRI, r3
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	f3bf 8f4f 	dsb	sy
 8008590:	613b      	str	r3, [r7, #16]
}
 8008592:	bf00      	nop
 8008594:	e7fe      	b.n	8008594 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008596:	4b3e      	ldr	r3, [pc, #248]	; (8008690 <xPortStartScheduler+0x120>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a3f      	ldr	r2, [pc, #252]	; (8008698 <xPortStartScheduler+0x128>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d10a      	bne.n	80085b6 <xPortStartScheduler+0x46>
	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	60fb      	str	r3, [r7, #12]
}
 80085b2:	bf00      	nop
 80085b4:	e7fe      	b.n	80085b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085b6:	4b39      	ldr	r3, [pc, #228]	; (800869c <xPortStartScheduler+0x12c>)
 80085b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	22ff      	movs	r2, #255	; 0xff
 80085c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085d0:	78fb      	ldrb	r3, [r7, #3]
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	4b31      	ldr	r3, [pc, #196]	; (80086a0 <xPortStartScheduler+0x130>)
 80085dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085de:	4b31      	ldr	r3, [pc, #196]	; (80086a4 <xPortStartScheduler+0x134>)
 80085e0:	2207      	movs	r2, #7
 80085e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085e4:	e009      	b.n	80085fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80085e6:	4b2f      	ldr	r3, [pc, #188]	; (80086a4 <xPortStartScheduler+0x134>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	4a2d      	ldr	r2, [pc, #180]	; (80086a4 <xPortStartScheduler+0x134>)
 80085ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085f0:	78fb      	ldrb	r3, [r7, #3]
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008602:	2b80      	cmp	r3, #128	; 0x80
 8008604:	d0ef      	beq.n	80085e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008606:	4b27      	ldr	r3, [pc, #156]	; (80086a4 <xPortStartScheduler+0x134>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f1c3 0307 	rsb	r3, r3, #7
 800860e:	2b04      	cmp	r3, #4
 8008610:	d00a      	beq.n	8008628 <xPortStartScheduler+0xb8>
	__asm volatile
 8008612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008616:	f383 8811 	msr	BASEPRI, r3
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	60bb      	str	r3, [r7, #8]
}
 8008624:	bf00      	nop
 8008626:	e7fe      	b.n	8008626 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008628:	4b1e      	ldr	r3, [pc, #120]	; (80086a4 <xPortStartScheduler+0x134>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	021b      	lsls	r3, r3, #8
 800862e:	4a1d      	ldr	r2, [pc, #116]	; (80086a4 <xPortStartScheduler+0x134>)
 8008630:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008632:	4b1c      	ldr	r3, [pc, #112]	; (80086a4 <xPortStartScheduler+0x134>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800863a:	4a1a      	ldr	r2, [pc, #104]	; (80086a4 <xPortStartScheduler+0x134>)
 800863c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	b2da      	uxtb	r2, r3
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008646:	4b18      	ldr	r3, [pc, #96]	; (80086a8 <xPortStartScheduler+0x138>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a17      	ldr	r2, [pc, #92]	; (80086a8 <xPortStartScheduler+0x138>)
 800864c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008650:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008652:	4b15      	ldr	r3, [pc, #84]	; (80086a8 <xPortStartScheduler+0x138>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a14      	ldr	r2, [pc, #80]	; (80086a8 <xPortStartScheduler+0x138>)
 8008658:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800865c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800865e:	f000 f8dd 	bl	800881c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008662:	4b12      	ldr	r3, [pc, #72]	; (80086ac <xPortStartScheduler+0x13c>)
 8008664:	2200      	movs	r2, #0
 8008666:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008668:	f000 f8fc 	bl	8008864 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800866c:	4b10      	ldr	r3, [pc, #64]	; (80086b0 <xPortStartScheduler+0x140>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a0f      	ldr	r2, [pc, #60]	; (80086b0 <xPortStartScheduler+0x140>)
 8008672:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008676:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008678:	f7ff ff66 	bl	8008548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800867c:	f7ff f850 	bl	8007720 <vTaskSwitchContext>
	prvTaskExitError();
 8008680:	f7ff ff1c 	bl	80084bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3718      	adds	r7, #24
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	e000ed00 	.word	0xe000ed00
 8008694:	410fc271 	.word	0x410fc271
 8008698:	410fc270 	.word	0x410fc270
 800869c:	e000e400 	.word	0xe000e400
 80086a0:	20000da8 	.word	0x20000da8
 80086a4:	20000dac 	.word	0x20000dac
 80086a8:	e000ed20 	.word	0xe000ed20
 80086ac:	2000000c 	.word	0x2000000c
 80086b0:	e000ef34 	.word	0xe000ef34

080086b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
	__asm volatile
 80086ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	607b      	str	r3, [r7, #4]
}
 80086cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086ce:	4b0f      	ldr	r3, [pc, #60]	; (800870c <vPortEnterCritical+0x58>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	3301      	adds	r3, #1
 80086d4:	4a0d      	ldr	r2, [pc, #52]	; (800870c <vPortEnterCritical+0x58>)
 80086d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086d8:	4b0c      	ldr	r3, [pc, #48]	; (800870c <vPortEnterCritical+0x58>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d10f      	bne.n	8008700 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086e0:	4b0b      	ldr	r3, [pc, #44]	; (8008710 <vPortEnterCritical+0x5c>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00a      	beq.n	8008700 <vPortEnterCritical+0x4c>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	603b      	str	r3, [r7, #0]
}
 80086fc:	bf00      	nop
 80086fe:	e7fe      	b.n	80086fe <vPortEnterCritical+0x4a>
	}
}
 8008700:	bf00      	nop
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr
 800870c:	2000000c 	.word	0x2000000c
 8008710:	e000ed04 	.word	0xe000ed04

08008714 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800871a:	4b12      	ldr	r3, [pc, #72]	; (8008764 <vPortExitCritical+0x50>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10a      	bne.n	8008738 <vPortExitCritical+0x24>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	607b      	str	r3, [r7, #4]
}
 8008734:	bf00      	nop
 8008736:	e7fe      	b.n	8008736 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008738:	4b0a      	ldr	r3, [pc, #40]	; (8008764 <vPortExitCritical+0x50>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	3b01      	subs	r3, #1
 800873e:	4a09      	ldr	r2, [pc, #36]	; (8008764 <vPortExitCritical+0x50>)
 8008740:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008742:	4b08      	ldr	r3, [pc, #32]	; (8008764 <vPortExitCritical+0x50>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d105      	bne.n	8008756 <vPortExitCritical+0x42>
 800874a:	2300      	movs	r3, #0
 800874c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	f383 8811 	msr	BASEPRI, r3
}
 8008754:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008756:	bf00      	nop
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	2000000c 	.word	0x2000000c
	...

08008770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008770:	f3ef 8009 	mrs	r0, PSP
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	4b15      	ldr	r3, [pc, #84]	; (80087d0 <pxCurrentTCBConst>)
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	f01e 0f10 	tst.w	lr, #16
 8008780:	bf08      	it	eq
 8008782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878a:	6010      	str	r0, [r2, #0]
 800878c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008790:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008794:	f380 8811 	msr	BASEPRI, r0
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f7fe ffbe 	bl	8007720 <vTaskSwitchContext>
 80087a4:	f04f 0000 	mov.w	r0, #0
 80087a8:	f380 8811 	msr	BASEPRI, r0
 80087ac:	bc09      	pop	{r0, r3}
 80087ae:	6819      	ldr	r1, [r3, #0]
 80087b0:	6808      	ldr	r0, [r1, #0]
 80087b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b6:	f01e 0f10 	tst.w	lr, #16
 80087ba:	bf08      	it	eq
 80087bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087c0:	f380 8809 	msr	PSP, r0
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	f3af 8000 	nop.w

080087d0 <pxCurrentTCBConst>:
 80087d0:	2000077c 	.word	0x2000077c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087d4:	bf00      	nop
 80087d6:	bf00      	nop

080087d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
	__asm volatile
 80087de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e2:	f383 8811 	msr	BASEPRI, r3
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	607b      	str	r3, [r7, #4]
}
 80087f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087f2:	f7fe fedb 	bl	80075ac <xTaskIncrementTick>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d003      	beq.n	8008804 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087fc:	4b06      	ldr	r3, [pc, #24]	; (8008818 <xPortSysTickHandler+0x40>)
 80087fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	2300      	movs	r3, #0
 8008806:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	f383 8811 	msr	BASEPRI, r3
}
 800880e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008810:	bf00      	nop
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	e000ed04 	.word	0xe000ed04

0800881c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800881c:	b480      	push	{r7}
 800881e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008820:	4b0b      	ldr	r3, [pc, #44]	; (8008850 <vPortSetupTimerInterrupt+0x34>)
 8008822:	2200      	movs	r2, #0
 8008824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008826:	4b0b      	ldr	r3, [pc, #44]	; (8008854 <vPortSetupTimerInterrupt+0x38>)
 8008828:	2200      	movs	r2, #0
 800882a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800882c:	4b0a      	ldr	r3, [pc, #40]	; (8008858 <vPortSetupTimerInterrupt+0x3c>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a0a      	ldr	r2, [pc, #40]	; (800885c <vPortSetupTimerInterrupt+0x40>)
 8008832:	fba2 2303 	umull	r2, r3, r2, r3
 8008836:	099b      	lsrs	r3, r3, #6
 8008838:	4a09      	ldr	r2, [pc, #36]	; (8008860 <vPortSetupTimerInterrupt+0x44>)
 800883a:	3b01      	subs	r3, #1
 800883c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800883e:	4b04      	ldr	r3, [pc, #16]	; (8008850 <vPortSetupTimerInterrupt+0x34>)
 8008840:	2207      	movs	r2, #7
 8008842:	601a      	str	r2, [r3, #0]
}
 8008844:	bf00      	nop
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	e000e010 	.word	0xe000e010
 8008854:	e000e018 	.word	0xe000e018
 8008858:	20000000 	.word	0x20000000
 800885c:	10624dd3 	.word	0x10624dd3
 8008860:	e000e014 	.word	0xe000e014

08008864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008864:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008874 <vPortEnableVFP+0x10>
 8008868:	6801      	ldr	r1, [r0, #0]
 800886a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800886e:	6001      	str	r1, [r0, #0]
 8008870:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008872:	bf00      	nop
 8008874:	e000ed88 	.word	0xe000ed88

08008878 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800887e:	f3ef 8305 	mrs	r3, IPSR
 8008882:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2b0f      	cmp	r3, #15
 8008888:	d914      	bls.n	80088b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800888a:	4a17      	ldr	r2, [pc, #92]	; (80088e8 <vPortValidateInterruptPriority+0x70>)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	4413      	add	r3, r2
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008894:	4b15      	ldr	r3, [pc, #84]	; (80088ec <vPortValidateInterruptPriority+0x74>)
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	7afa      	ldrb	r2, [r7, #11]
 800889a:	429a      	cmp	r2, r3
 800889c:	d20a      	bcs.n	80088b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800889e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a2:	f383 8811 	msr	BASEPRI, r3
 80088a6:	f3bf 8f6f 	isb	sy
 80088aa:	f3bf 8f4f 	dsb	sy
 80088ae:	607b      	str	r3, [r7, #4]
}
 80088b0:	bf00      	nop
 80088b2:	e7fe      	b.n	80088b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088b4:	4b0e      	ldr	r3, [pc, #56]	; (80088f0 <vPortValidateInterruptPriority+0x78>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088bc:	4b0d      	ldr	r3, [pc, #52]	; (80088f4 <vPortValidateInterruptPriority+0x7c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d90a      	bls.n	80088da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80088c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	603b      	str	r3, [r7, #0]
}
 80088d6:	bf00      	nop
 80088d8:	e7fe      	b.n	80088d8 <vPortValidateInterruptPriority+0x60>
	}
 80088da:	bf00      	nop
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	e000e3f0 	.word	0xe000e3f0
 80088ec:	20000da8 	.word	0x20000da8
 80088f0:	e000ed0c 	.word	0xe000ed0c
 80088f4:	20000dac 	.word	0x20000dac

080088f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b08a      	sub	sp, #40	; 0x28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008900:	2300      	movs	r3, #0
 8008902:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008904:	f7fe fd96 	bl	8007434 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008908:	4b5b      	ldr	r3, [pc, #364]	; (8008a78 <pvPortMalloc+0x180>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008910:	f000 f920 	bl	8008b54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008914:	4b59      	ldr	r3, [pc, #356]	; (8008a7c <pvPortMalloc+0x184>)
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4013      	ands	r3, r2
 800891c:	2b00      	cmp	r3, #0
 800891e:	f040 8093 	bne.w	8008a48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d01d      	beq.n	8008964 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008928:	2208      	movs	r2, #8
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4413      	add	r3, r2
 800892e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f003 0307 	and.w	r3, r3, #7
 8008936:	2b00      	cmp	r3, #0
 8008938:	d014      	beq.n	8008964 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f023 0307 	bic.w	r3, r3, #7
 8008940:	3308      	adds	r3, #8
 8008942:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f003 0307 	and.w	r3, r3, #7
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00a      	beq.n	8008964 <pvPortMalloc+0x6c>
	__asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	617b      	str	r3, [r7, #20]
}
 8008960:	bf00      	nop
 8008962:	e7fe      	b.n	8008962 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d06e      	beq.n	8008a48 <pvPortMalloc+0x150>
 800896a:	4b45      	ldr	r3, [pc, #276]	; (8008a80 <pvPortMalloc+0x188>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	429a      	cmp	r2, r3
 8008972:	d869      	bhi.n	8008a48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008974:	4b43      	ldr	r3, [pc, #268]	; (8008a84 <pvPortMalloc+0x18c>)
 8008976:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008978:	4b42      	ldr	r3, [pc, #264]	; (8008a84 <pvPortMalloc+0x18c>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800897e:	e004      	b.n	800898a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008982:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	429a      	cmp	r2, r3
 8008992:	d903      	bls.n	800899c <pvPortMalloc+0xa4>
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1f1      	bne.n	8008980 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800899c:	4b36      	ldr	r3, [pc, #216]	; (8008a78 <pvPortMalloc+0x180>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d050      	beq.n	8008a48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089a6:	6a3b      	ldr	r3, [r7, #32]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2208      	movs	r2, #8
 80089ac:	4413      	add	r3, r2
 80089ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	6a3b      	ldr	r3, [r7, #32]
 80089b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ba:	685a      	ldr	r2, [r3, #4]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	1ad2      	subs	r2, r2, r3
 80089c0:	2308      	movs	r3, #8
 80089c2:	005b      	lsls	r3, r3, #1
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d91f      	bls.n	8008a08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4413      	add	r3, r2
 80089ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	f003 0307 	and.w	r3, r3, #7
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00a      	beq.n	80089f0 <pvPortMalloc+0xf8>
	__asm volatile
 80089da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089de:	f383 8811 	msr	BASEPRI, r3
 80089e2:	f3bf 8f6f 	isb	sy
 80089e6:	f3bf 8f4f 	dsb	sy
 80089ea:	613b      	str	r3, [r7, #16]
}
 80089ec:	bf00      	nop
 80089ee:	e7fe      	b.n	80089ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f2:	685a      	ldr	r2, [r3, #4]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	1ad2      	subs	r2, r2, r3
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a02:	69b8      	ldr	r0, [r7, #24]
 8008a04:	f000 f908 	bl	8008c18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a08:	4b1d      	ldr	r3, [pc, #116]	; (8008a80 <pvPortMalloc+0x188>)
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	1ad3      	subs	r3, r2, r3
 8008a12:	4a1b      	ldr	r2, [pc, #108]	; (8008a80 <pvPortMalloc+0x188>)
 8008a14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a16:	4b1a      	ldr	r3, [pc, #104]	; (8008a80 <pvPortMalloc+0x188>)
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	4b1b      	ldr	r3, [pc, #108]	; (8008a88 <pvPortMalloc+0x190>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d203      	bcs.n	8008a2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a22:	4b17      	ldr	r3, [pc, #92]	; (8008a80 <pvPortMalloc+0x188>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a18      	ldr	r2, [pc, #96]	; (8008a88 <pvPortMalloc+0x190>)
 8008a28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	685a      	ldr	r2, [r3, #4]
 8008a2e:	4b13      	ldr	r3, [pc, #76]	; (8008a7c <pvPortMalloc+0x184>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	431a      	orrs	r2, r3
 8008a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a3e:	4b13      	ldr	r3, [pc, #76]	; (8008a8c <pvPortMalloc+0x194>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	3301      	adds	r3, #1
 8008a44:	4a11      	ldr	r2, [pc, #68]	; (8008a8c <pvPortMalloc+0x194>)
 8008a46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a48:	f7fe fd02 	bl	8007450 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	f003 0307 	and.w	r3, r3, #7
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00a      	beq.n	8008a6c <pvPortMalloc+0x174>
	__asm volatile
 8008a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	60fb      	str	r3, [r7, #12]
}
 8008a68:	bf00      	nop
 8008a6a:	e7fe      	b.n	8008a6a <pvPortMalloc+0x172>
	return pvReturn;
 8008a6c:	69fb      	ldr	r3, [r7, #28]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3728      	adds	r7, #40	; 0x28
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	200049b8 	.word	0x200049b8
 8008a7c:	200049cc 	.word	0x200049cc
 8008a80:	200049bc 	.word	0x200049bc
 8008a84:	200049b0 	.word	0x200049b0
 8008a88:	200049c0 	.word	0x200049c0
 8008a8c:	200049c4 	.word	0x200049c4

08008a90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b086      	sub	sp, #24
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d04d      	beq.n	8008b3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008aa2:	2308      	movs	r3, #8
 8008aa4:	425b      	negs	r3, r3
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	4b24      	ldr	r3, [pc, #144]	; (8008b48 <vPortFree+0xb8>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4013      	ands	r3, r2
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10a      	bne.n	8008ad4 <vPortFree+0x44>
	__asm volatile
 8008abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac2:	f383 8811 	msr	BASEPRI, r3
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	60fb      	str	r3, [r7, #12]
}
 8008ad0:	bf00      	nop
 8008ad2:	e7fe      	b.n	8008ad2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00a      	beq.n	8008af2 <vPortFree+0x62>
	__asm volatile
 8008adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae0:	f383 8811 	msr	BASEPRI, r3
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	60bb      	str	r3, [r7, #8]
}
 8008aee:	bf00      	nop
 8008af0:	e7fe      	b.n	8008af0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	4b14      	ldr	r3, [pc, #80]	; (8008b48 <vPortFree+0xb8>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4013      	ands	r3, r2
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d01e      	beq.n	8008b3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d11a      	bne.n	8008b3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	685a      	ldr	r2, [r3, #4]
 8008b0c:	4b0e      	ldr	r3, [pc, #56]	; (8008b48 <vPortFree+0xb8>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	43db      	mvns	r3, r3
 8008b12:	401a      	ands	r2, r3
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b18:	f7fe fc8c 	bl	8007434 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	4b0a      	ldr	r3, [pc, #40]	; (8008b4c <vPortFree+0xbc>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4413      	add	r3, r2
 8008b26:	4a09      	ldr	r2, [pc, #36]	; (8008b4c <vPortFree+0xbc>)
 8008b28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b2a:	6938      	ldr	r0, [r7, #16]
 8008b2c:	f000 f874 	bl	8008c18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b30:	4b07      	ldr	r3, [pc, #28]	; (8008b50 <vPortFree+0xc0>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	3301      	adds	r3, #1
 8008b36:	4a06      	ldr	r2, [pc, #24]	; (8008b50 <vPortFree+0xc0>)
 8008b38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b3a:	f7fe fc89 	bl	8007450 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b3e:	bf00      	nop
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	200049cc 	.word	0x200049cc
 8008b4c:	200049bc 	.word	0x200049bc
 8008b50:	200049c8 	.word	0x200049c8

08008b54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008b5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b60:	4b27      	ldr	r3, [pc, #156]	; (8008c00 <prvHeapInit+0xac>)
 8008b62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f003 0307 	and.w	r3, r3, #7
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00c      	beq.n	8008b88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	3307      	adds	r3, #7
 8008b72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f023 0307 	bic.w	r3, r3, #7
 8008b7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	4a1f      	ldr	r2, [pc, #124]	; (8008c00 <prvHeapInit+0xac>)
 8008b84:	4413      	add	r3, r2
 8008b86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b8c:	4a1d      	ldr	r2, [pc, #116]	; (8008c04 <prvHeapInit+0xb0>)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b92:	4b1c      	ldr	r3, [pc, #112]	; (8008c04 <prvHeapInit+0xb0>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ba0:	2208      	movs	r2, #8
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	1a9b      	subs	r3, r3, r2
 8008ba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f023 0307 	bic.w	r3, r3, #7
 8008bae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	4a15      	ldr	r2, [pc, #84]	; (8008c08 <prvHeapInit+0xb4>)
 8008bb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bb6:	4b14      	ldr	r3, [pc, #80]	; (8008c08 <prvHeapInit+0xb4>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bbe:	4b12      	ldr	r3, [pc, #72]	; (8008c08 <prvHeapInit+0xb4>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	1ad2      	subs	r2, r2, r3
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008bd4:	4b0c      	ldr	r3, [pc, #48]	; (8008c08 <prvHeapInit+0xb4>)
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	4a0a      	ldr	r2, [pc, #40]	; (8008c0c <prvHeapInit+0xb8>)
 8008be2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	4a09      	ldr	r2, [pc, #36]	; (8008c10 <prvHeapInit+0xbc>)
 8008bea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bec:	4b09      	ldr	r3, [pc, #36]	; (8008c14 <prvHeapInit+0xc0>)
 8008bee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bf2:	601a      	str	r2, [r3, #0]
}
 8008bf4:	bf00      	nop
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	20000db0 	.word	0x20000db0
 8008c04:	200049b0 	.word	0x200049b0
 8008c08:	200049b8 	.word	0x200049b8
 8008c0c:	200049c0 	.word	0x200049c0
 8008c10:	200049bc 	.word	0x200049bc
 8008c14:	200049cc 	.word	0x200049cc

08008c18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c20:	4b28      	ldr	r3, [pc, #160]	; (8008cc4 <prvInsertBlockIntoFreeList+0xac>)
 8008c22:	60fb      	str	r3, [r7, #12]
 8008c24:	e002      	b.n	8008c2c <prvInsertBlockIntoFreeList+0x14>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	60fb      	str	r3, [r7, #12]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d8f7      	bhi.n	8008c26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	68ba      	ldr	r2, [r7, #8]
 8008c40:	4413      	add	r3, r2
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d108      	bne.n	8008c5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	441a      	add	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	441a      	add	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d118      	bne.n	8008ca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	4b15      	ldr	r3, [pc, #84]	; (8008cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d00d      	beq.n	8008c96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	685a      	ldr	r2, [r3, #4]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	441a      	add	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	601a      	str	r2, [r3, #0]
 8008c94:	e008      	b.n	8008ca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c96:	4b0c      	ldr	r3, [pc, #48]	; (8008cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	e003      	b.n	8008ca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d002      	beq.n	8008cb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cb6:	bf00      	nop
 8008cb8:	3714      	adds	r7, #20
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	200049b0 	.word	0x200049b0
 8008cc8:	200049b8 	.word	0x200049b8

08008ccc <OLED_Refresh_Gram>:
#include "stdlib.h"
#include "oledfont.h"  

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	71fb      	strb	r3, [r7, #7]
 8008cd6:	e026      	b.n	8008d26 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8008cd8:	79fb      	ldrb	r3, [r7, #7]
 8008cda:	3b50      	subs	r3, #80	; 0x50
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	2100      	movs	r1, #0
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f000 f82b 	bl	8008d3c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	2000      	movs	r0, #0
 8008cea:	f000 f827 	bl	8008d3c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8008cee:	2100      	movs	r1, #0
 8008cf0:	2010      	movs	r0, #16
 8008cf2:	f000 f823 	bl	8008d3c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	71bb      	strb	r3, [r7, #6]
 8008cfa:	e00d      	b.n	8008d18 <OLED_Refresh_Gram+0x4c>
 8008cfc:	79ba      	ldrb	r2, [r7, #6]
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	490d      	ldr	r1, [pc, #52]	; (8008d38 <OLED_Refresh_Gram+0x6c>)
 8008d02:	00d2      	lsls	r2, r2, #3
 8008d04:	440a      	add	r2, r1
 8008d06:	4413      	add	r3, r2
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	2101      	movs	r1, #1
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f000 f815 	bl	8008d3c <OLED_WR_Byte>
 8008d12:	79bb      	ldrb	r3, [r7, #6]
 8008d14:	3301      	adds	r3, #1
 8008d16:	71bb      	strb	r3, [r7, #6]
 8008d18:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	daed      	bge.n	8008cfc <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8008d20:	79fb      	ldrb	r3, [r7, #7]
 8008d22:	3301      	adds	r3, #1
 8008d24:	71fb      	strb	r3, [r7, #7]
 8008d26:	79fb      	ldrb	r3, [r7, #7]
 8008d28:	2b07      	cmp	r3, #7
 8008d2a:	d9d5      	bls.n	8008cd8 <OLED_Refresh_Gram+0xc>
	}   
}
 8008d2c:	bf00      	nop
 8008d2e:	bf00      	nop
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	20004c0c 	.word	0x20004c0c

08008d3c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	4603      	mov	r3, r0
 8008d44:	460a      	mov	r2, r1
 8008d46:	71fb      	strb	r3, [r7, #7]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8008d4c:	79bb      	ldrb	r3, [r7, #6]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d006      	beq.n	8008d60 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8008d52:	2201      	movs	r2, #1
 8008d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008d58:	481c      	ldr	r0, [pc, #112]	; (8008dcc <OLED_WR_Byte+0x90>)
 8008d5a:	f7fa f8d1 	bl	8002f00 <HAL_GPIO_WritePin>
 8008d5e:	e005      	b.n	8008d6c <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8008d60:	2200      	movs	r2, #0
 8008d62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008d66:	4819      	ldr	r0, [pc, #100]	; (8008dcc <OLED_WR_Byte+0x90>)
 8008d68:	f7fa f8ca 	bl	8002f00 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	73fb      	strb	r3, [r7, #15]
 8008d70:	e01e      	b.n	8008db0 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8008d72:	2200      	movs	r2, #0
 8008d74:	2120      	movs	r1, #32
 8008d76:	4815      	ldr	r0, [pc, #84]	; (8008dcc <OLED_WR_Byte+0x90>)
 8008d78:	f7fa f8c2 	bl	8002f00 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8008d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	da05      	bge.n	8008d90 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8008d84:	2201      	movs	r2, #1
 8008d86:	2140      	movs	r1, #64	; 0x40
 8008d88:	4810      	ldr	r0, [pc, #64]	; (8008dcc <OLED_WR_Byte+0x90>)
 8008d8a:	f7fa f8b9 	bl	8002f00 <HAL_GPIO_WritePin>
 8008d8e:	e004      	b.n	8008d9a <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8008d90:	2200      	movs	r2, #0
 8008d92:	2140      	movs	r1, #64	; 0x40
 8008d94:	480d      	ldr	r0, [pc, #52]	; (8008dcc <OLED_WR_Byte+0x90>)
 8008d96:	f7fa f8b3 	bl	8002f00 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	2120      	movs	r1, #32
 8008d9e:	480b      	ldr	r0, [pc, #44]	; (8008dcc <OLED_WR_Byte+0x90>)
 8008da0:	f7fa f8ae 	bl	8002f00 <HAL_GPIO_WritePin>
		dat<<=1;   
 8008da4:	79fb      	ldrb	r3, [r7, #7]
 8008da6:	005b      	lsls	r3, r3, #1
 8008da8:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8008daa:	7bfb      	ldrb	r3, [r7, #15]
 8008dac:	3301      	adds	r3, #1
 8008dae:	73fb      	strb	r3, [r7, #15]
 8008db0:	7bfb      	ldrb	r3, [r7, #15]
 8008db2:	2b07      	cmp	r3, #7
 8008db4:	d9dd      	bls.n	8008d72 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8008db6:	2201      	movs	r2, #1
 8008db8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008dbc:	4803      	ldr	r0, [pc, #12]	; (8008dcc <OLED_WR_Byte+0x90>)
 8008dbe:	f7fa f89f 	bl	8002f00 <HAL_GPIO_WritePin>
} 
 8008dc2:	bf00      	nop
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	40021000 	.word	0x40021000

08008dd0 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	71fb      	strb	r3, [r7, #7]
 8008dda:	e014      	b.n	8008e06 <OLED_Clear+0x36>
 8008ddc:	2300      	movs	r3, #0
 8008dde:	71bb      	strb	r3, [r7, #6]
 8008de0:	e00a      	b.n	8008df8 <OLED_Clear+0x28>
 8008de2:	79ba      	ldrb	r2, [r7, #6]
 8008de4:	79fb      	ldrb	r3, [r7, #7]
 8008de6:	490c      	ldr	r1, [pc, #48]	; (8008e18 <OLED_Clear+0x48>)
 8008de8:	00d2      	lsls	r2, r2, #3
 8008dea:	440a      	add	r2, r1
 8008dec:	4413      	add	r3, r2
 8008dee:	2200      	movs	r2, #0
 8008df0:	701a      	strb	r2, [r3, #0]
 8008df2:	79bb      	ldrb	r3, [r7, #6]
 8008df4:	3301      	adds	r3, #1
 8008df6:	71bb      	strb	r3, [r7, #6]
 8008df8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	daf0      	bge.n	8008de2 <OLED_Clear+0x12>
 8008e00:	79fb      	ldrb	r3, [r7, #7]
 8008e02:	3301      	adds	r3, #1
 8008e04:	71fb      	strb	r3, [r7, #7]
 8008e06:	79fb      	ldrb	r3, [r7, #7]
 8008e08:	2b07      	cmp	r3, #7
 8008e0a:	d9e7      	bls.n	8008ddc <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8008e0c:	f7ff ff5e 	bl	8008ccc <OLED_Refresh_Gram>
}
 8008e10:	bf00      	nop
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	20004c0c 	.word	0x20004c0c

08008e1c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	4603      	mov	r3, r0
 8008e24:	71fb      	strb	r3, [r7, #7]
 8008e26:	460b      	mov	r3, r1
 8008e28:	71bb      	strb	r3, [r7, #6]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8008e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	db41      	blt.n	8008ebe <OLED_DrawPoint+0xa2>
 8008e3a:	79bb      	ldrb	r3, [r7, #6]
 8008e3c:	2b3f      	cmp	r3, #63	; 0x3f
 8008e3e:	d83e      	bhi.n	8008ebe <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8008e40:	79bb      	ldrb	r3, [r7, #6]
 8008e42:	08db      	lsrs	r3, r3, #3
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	f1c3 0307 	rsb	r3, r3, #7
 8008e4a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8008e4c:	79bb      	ldrb	r3, [r7, #6]
 8008e4e:	f003 0307 	and.w	r3, r3, #7
 8008e52:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8008e54:	7b7b      	ldrb	r3, [r7, #13]
 8008e56:	f1c3 0307 	rsb	r3, r3, #7
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e60:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8008e62:	797b      	ldrb	r3, [r7, #5]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d012      	beq.n	8008e8e <OLED_DrawPoint+0x72>
 8008e68:	79fa      	ldrb	r2, [r7, #7]
 8008e6a:	7bbb      	ldrb	r3, [r7, #14]
 8008e6c:	4917      	ldr	r1, [pc, #92]	; (8008ecc <OLED_DrawPoint+0xb0>)
 8008e6e:	00d2      	lsls	r2, r2, #3
 8008e70:	440a      	add	r2, r1
 8008e72:	4413      	add	r3, r2
 8008e74:	7818      	ldrb	r0, [r3, #0]
 8008e76:	79fa      	ldrb	r2, [r7, #7]
 8008e78:	7bbb      	ldrb	r3, [r7, #14]
 8008e7a:	7bf9      	ldrb	r1, [r7, #15]
 8008e7c:	4301      	orrs	r1, r0
 8008e7e:	b2c8      	uxtb	r0, r1
 8008e80:	4912      	ldr	r1, [pc, #72]	; (8008ecc <OLED_DrawPoint+0xb0>)
 8008e82:	00d2      	lsls	r2, r2, #3
 8008e84:	440a      	add	r2, r1
 8008e86:	4413      	add	r3, r2
 8008e88:	4602      	mov	r2, r0
 8008e8a:	701a      	strb	r2, [r3, #0]
 8008e8c:	e018      	b.n	8008ec0 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8008e8e:	79fa      	ldrb	r2, [r7, #7]
 8008e90:	7bbb      	ldrb	r3, [r7, #14]
 8008e92:	490e      	ldr	r1, [pc, #56]	; (8008ecc <OLED_DrawPoint+0xb0>)
 8008e94:	00d2      	lsls	r2, r2, #3
 8008e96:	440a      	add	r2, r1
 8008e98:	4413      	add	r3, r2
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	b25a      	sxtb	r2, r3
 8008e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ea2:	43db      	mvns	r3, r3
 8008ea4:	b25b      	sxtb	r3, r3
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	b259      	sxtb	r1, r3
 8008eaa:	79fa      	ldrb	r2, [r7, #7]
 8008eac:	7bbb      	ldrb	r3, [r7, #14]
 8008eae:	b2c8      	uxtb	r0, r1
 8008eb0:	4906      	ldr	r1, [pc, #24]	; (8008ecc <OLED_DrawPoint+0xb0>)
 8008eb2:	00d2      	lsls	r2, r2, #3
 8008eb4:	440a      	add	r2, r1
 8008eb6:	4413      	add	r3, r2
 8008eb8:	4602      	mov	r2, r0
 8008eba:	701a      	strb	r2, [r3, #0]
 8008ebc:	e000      	b.n	8008ec0 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8008ebe:	bf00      	nop
}
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	20004c0c 	.word	0x20004c0c

08008ed0 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8008ed0:	b590      	push	{r4, r7, lr}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	4608      	mov	r0, r1
 8008eda:	4611      	mov	r1, r2
 8008edc:	461a      	mov	r2, r3
 8008ede:	4623      	mov	r3, r4
 8008ee0:	71fb      	strb	r3, [r7, #7]
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	71bb      	strb	r3, [r7, #6]
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	717b      	strb	r3, [r7, #5]
 8008eea:	4613      	mov	r3, r2
 8008eec:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8008eee:	79bb      	ldrb	r3, [r7, #6]
 8008ef0:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8008ef2:	797b      	ldrb	r3, [r7, #5]
 8008ef4:	3b20      	subs	r3, #32
 8008ef6:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8008ef8:	2300      	movs	r3, #0
 8008efa:	73bb      	strb	r3, [r7, #14]
 8008efc:	e04d      	b.n	8008f9a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8008efe:	793b      	ldrb	r3, [r7, #4]
 8008f00:	2b0c      	cmp	r3, #12
 8008f02:	d10b      	bne.n	8008f1c <OLED_ShowChar+0x4c>
 8008f04:	797a      	ldrb	r2, [r7, #5]
 8008f06:	7bb9      	ldrb	r1, [r7, #14]
 8008f08:	4828      	ldr	r0, [pc, #160]	; (8008fac <OLED_ShowChar+0xdc>)
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	005b      	lsls	r3, r3, #1
 8008f0e:	4413      	add	r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4403      	add	r3, r0
 8008f14:	440b      	add	r3, r1
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	73fb      	strb	r3, [r7, #15]
 8008f1a:	e007      	b.n	8008f2c <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8008f1c:	797a      	ldrb	r2, [r7, #5]
 8008f1e:	7bbb      	ldrb	r3, [r7, #14]
 8008f20:	4923      	ldr	r1, [pc, #140]	; (8008fb0 <OLED_ShowChar+0xe0>)
 8008f22:	0112      	lsls	r2, r2, #4
 8008f24:	440a      	add	r2, r1
 8008f26:	4413      	add	r3, r2
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	737b      	strb	r3, [r7, #13]
 8008f30:	e02d      	b.n	8008f8e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8008f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	da07      	bge.n	8008f4a <OLED_ShowChar+0x7a>
 8008f3a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008f3e:	79b9      	ldrb	r1, [r7, #6]
 8008f40:	79fb      	ldrb	r3, [r7, #7]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7ff ff6a 	bl	8008e1c <OLED_DrawPoint>
 8008f48:	e00c      	b.n	8008f64 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8008f4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	bf0c      	ite	eq
 8008f52:	2301      	moveq	r3, #1
 8008f54:	2300      	movne	r3, #0
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	461a      	mov	r2, r3
 8008f5a:	79b9      	ldrb	r1, [r7, #6]
 8008f5c:	79fb      	ldrb	r3, [r7, #7]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7ff ff5c 	bl	8008e1c <OLED_DrawPoint>
			temp<<=1;
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
 8008f66:	005b      	lsls	r3, r3, #1
 8008f68:	73fb      	strb	r3, [r7, #15]
			y++;
 8008f6a:	79bb      	ldrb	r3, [r7, #6]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8008f70:	79ba      	ldrb	r2, [r7, #6]
 8008f72:	7b3b      	ldrb	r3, [r7, #12]
 8008f74:	1ad2      	subs	r2, r2, r3
 8008f76:	793b      	ldrb	r3, [r7, #4]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d105      	bne.n	8008f88 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8008f7c:	7b3b      	ldrb	r3, [r7, #12]
 8008f7e:	71bb      	strb	r3, [r7, #6]
				x++;
 8008f80:	79fb      	ldrb	r3, [r7, #7]
 8008f82:	3301      	adds	r3, #1
 8008f84:	71fb      	strb	r3, [r7, #7]
				break;
 8008f86:	e005      	b.n	8008f94 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8008f88:	7b7b      	ldrb	r3, [r7, #13]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	737b      	strb	r3, [r7, #13]
 8008f8e:	7b7b      	ldrb	r3, [r7, #13]
 8008f90:	2b07      	cmp	r3, #7
 8008f92:	d9ce      	bls.n	8008f32 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8008f94:	7bbb      	ldrb	r3, [r7, #14]
 8008f96:	3301      	adds	r3, #1
 8008f98:	73bb      	strb	r3, [r7, #14]
 8008f9a:	7bba      	ldrb	r2, [r7, #14]
 8008f9c:	793b      	ldrb	r3, [r7, #4]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d3ad      	bcc.n	8008efe <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8008fa2:	bf00      	nop
 8008fa4:	bf00      	nop
 8008fa6:	3714      	adds	r7, #20
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd90      	pop	{r4, r7, pc}
 8008fac:	0800aa58 	.word	0x0800aa58
 8008fb0:	0800aecc 	.word	0x0800aecc

08008fb4 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af02      	add	r7, sp, #8
 8008fba:	4603      	mov	r3, r0
 8008fbc:	603a      	str	r2, [r7, #0]
 8008fbe:	71fb      	strb	r3, [r7, #7]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8008fc4:	e01f      	b.n	8009006 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
 8008fc8:	2b7a      	cmp	r3, #122	; 0x7a
 8008fca:	d904      	bls.n	8008fd6 <OLED_ShowString+0x22>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	71fb      	strb	r3, [r7, #7]
 8008fd0:	79bb      	ldrb	r3, [r7, #6]
 8008fd2:	3310      	adds	r3, #16
 8008fd4:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8008fd6:	79bb      	ldrb	r3, [r7, #6]
 8008fd8:	2b3a      	cmp	r3, #58	; 0x3a
 8008fda:	d905      	bls.n	8008fe8 <OLED_ShowString+0x34>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	71fb      	strb	r3, [r7, #7]
 8008fe0:	79fb      	ldrb	r3, [r7, #7]
 8008fe2:	71bb      	strb	r3, [r7, #6]
 8008fe4:	f7ff fef4 	bl	8008dd0 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	781a      	ldrb	r2, [r3, #0]
 8008fec:	79b9      	ldrb	r1, [r7, #6]
 8008fee:	79f8      	ldrb	r0, [r7, #7]
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	230c      	movs	r3, #12
 8008ff6:	f7ff ff6b 	bl	8008ed0 <OLED_ShowChar>
        x+=8;
 8008ffa:	79fb      	ldrb	r3, [r7, #7]
 8008ffc:	3308      	adds	r3, #8
 8008ffe:	71fb      	strb	r3, [r7, #7]
        p++;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	3301      	adds	r3, #1
 8009004:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1db      	bne.n	8008fc6 <OLED_ShowString+0x12>
    }  
}	 
 800900e:	bf00      	nop
 8009010:	bf00      	nop
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <OLED_Init>:

void OLED_Init(void)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800901c:	f7f9 ff8a 	bl	8002f34 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8009020:	4b41      	ldr	r3, [pc, #260]	; (8009128 <OLED_Init+0x110>)
 8009022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009024:	4a40      	ldr	r2, [pc, #256]	; (8009128 <OLED_Init+0x110>)
 8009026:	f023 0301 	bic.w	r3, r3, #1
 800902a:	6713      	str	r3, [r2, #112]	; 0x70
 800902c:	4b3e      	ldr	r3, [pc, #248]	; (8009128 <OLED_Init+0x110>)
 800902e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009030:	4a3d      	ldr	r2, [pc, #244]	; (8009128 <OLED_Init+0x110>)
 8009032:	f023 0304 	bic.w	r3, r3, #4
 8009036:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8009038:	f7f9 ff90 	bl	8002f5c <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800903c:	2200      	movs	r2, #0
 800903e:	2180      	movs	r1, #128	; 0x80
 8009040:	483a      	ldr	r0, [pc, #232]	; (800912c <OLED_Init+0x114>)
 8009042:	f7f9 ff5d 	bl	8002f00 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8009046:	2064      	movs	r0, #100	; 0x64
 8009048:	f7f9 fbf6 	bl	8002838 <HAL_Delay>
	OLED_RST_Set();
 800904c:	2201      	movs	r2, #1
 800904e:	2180      	movs	r1, #128	; 0x80
 8009050:	4836      	ldr	r0, [pc, #216]	; (800912c <OLED_Init+0x114>)
 8009052:	f7f9 ff55 	bl	8002f00 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8009056:	2100      	movs	r1, #0
 8009058:	20ae      	movs	r0, #174	; 0xae
 800905a:	f7ff fe6f 	bl	8008d3c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800905e:	2100      	movs	r1, #0
 8009060:	20d5      	movs	r0, #213	; 0xd5
 8009062:	f7ff fe6b 	bl	8008d3c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8009066:	2100      	movs	r1, #0
 8009068:	2050      	movs	r0, #80	; 0x50
 800906a:	f7ff fe67 	bl	8008d3c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800906e:	2100      	movs	r1, #0
 8009070:	20a8      	movs	r0, #168	; 0xa8
 8009072:	f7ff fe63 	bl	8008d3c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8009076:	2100      	movs	r1, #0
 8009078:	203f      	movs	r0, #63	; 0x3f
 800907a:	f7ff fe5f 	bl	8008d3c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800907e:	2100      	movs	r1, #0
 8009080:	20d3      	movs	r0, #211	; 0xd3
 8009082:	f7ff fe5b 	bl	8008d3c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8009086:	2100      	movs	r1, #0
 8009088:	2000      	movs	r0, #0
 800908a:	f7ff fe57 	bl	8008d3c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800908e:	2100      	movs	r1, #0
 8009090:	2040      	movs	r0, #64	; 0x40
 8009092:	f7ff fe53 	bl	8008d3c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8009096:	2100      	movs	r1, #0
 8009098:	208d      	movs	r0, #141	; 0x8d
 800909a:	f7ff fe4f 	bl	8008d3c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800909e:	2100      	movs	r1, #0
 80090a0:	2014      	movs	r0, #20
 80090a2:	f7ff fe4b 	bl	8008d3c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 80090a6:	2100      	movs	r1, #0
 80090a8:	2020      	movs	r0, #32
 80090aa:	f7ff fe47 	bl	8008d3c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 80090ae:	2100      	movs	r1, #0
 80090b0:	2002      	movs	r0, #2
 80090b2:	f7ff fe43 	bl	8008d3c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80090b6:	2100      	movs	r1, #0
 80090b8:	20a1      	movs	r0, #161	; 0xa1
 80090ba:	f7ff fe3f 	bl	8008d3c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80090be:	2100      	movs	r1, #0
 80090c0:	20c0      	movs	r0, #192	; 0xc0
 80090c2:	f7ff fe3b 	bl	8008d3c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 80090c6:	2100      	movs	r1, #0
 80090c8:	20da      	movs	r0, #218	; 0xda
 80090ca:	f7ff fe37 	bl	8008d3c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 80090ce:	2100      	movs	r1, #0
 80090d0:	2012      	movs	r0, #18
 80090d2:	f7ff fe33 	bl	8008d3c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 80090d6:	2100      	movs	r1, #0
 80090d8:	2081      	movs	r0, #129	; 0x81
 80090da:	f7ff fe2f 	bl	8008d3c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 80090de:	2100      	movs	r1, #0
 80090e0:	20ef      	movs	r0, #239	; 0xef
 80090e2:	f7ff fe2b 	bl	8008d3c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80090e6:	2100      	movs	r1, #0
 80090e8:	20d9      	movs	r0, #217	; 0xd9
 80090ea:	f7ff fe27 	bl	8008d3c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80090ee:	2100      	movs	r1, #0
 80090f0:	20f1      	movs	r0, #241	; 0xf1
 80090f2:	f7ff fe23 	bl	8008d3c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80090f6:	2100      	movs	r1, #0
 80090f8:	20db      	movs	r0, #219	; 0xdb
 80090fa:	f7ff fe1f 	bl	8008d3c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80090fe:	2100      	movs	r1, #0
 8009100:	2030      	movs	r0, #48	; 0x30
 8009102:	f7ff fe1b 	bl	8008d3c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8009106:	2100      	movs	r1, #0
 8009108:	20a4      	movs	r0, #164	; 0xa4
 800910a:	f7ff fe17 	bl	8008d3c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800910e:	2100      	movs	r1, #0
 8009110:	20a6      	movs	r0, #166	; 0xa6
 8009112:	f7ff fe13 	bl	8008d3c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8009116:	2100      	movs	r1, #0
 8009118:	20af      	movs	r0, #175	; 0xaf
 800911a:	f7ff fe0f 	bl	8008d3c <OLED_WR_Byte>
	OLED_Clear(); 
 800911e:	f7ff fe57 	bl	8008dd0 <OLED_Clear>
 8009122:	bf00      	nop
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	40023800 	.word	0x40023800
 800912c:	40021000 	.word	0x40021000

08009130 <__errno>:
 8009130:	4b01      	ldr	r3, [pc, #4]	; (8009138 <__errno+0x8>)
 8009132:	6818      	ldr	r0, [r3, #0]
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	20000010 	.word	0x20000010

0800913c <__libc_init_array>:
 800913c:	b570      	push	{r4, r5, r6, lr}
 800913e:	4d0d      	ldr	r5, [pc, #52]	; (8009174 <__libc_init_array+0x38>)
 8009140:	4c0d      	ldr	r4, [pc, #52]	; (8009178 <__libc_init_array+0x3c>)
 8009142:	1b64      	subs	r4, r4, r5
 8009144:	10a4      	asrs	r4, r4, #2
 8009146:	2600      	movs	r6, #0
 8009148:	42a6      	cmp	r6, r4
 800914a:	d109      	bne.n	8009160 <__libc_init_array+0x24>
 800914c:	4d0b      	ldr	r5, [pc, #44]	; (800917c <__libc_init_array+0x40>)
 800914e:	4c0c      	ldr	r4, [pc, #48]	; (8009180 <__libc_init_array+0x44>)
 8009150:	f001 fc04 	bl	800a95c <_init>
 8009154:	1b64      	subs	r4, r4, r5
 8009156:	10a4      	asrs	r4, r4, #2
 8009158:	2600      	movs	r6, #0
 800915a:	42a6      	cmp	r6, r4
 800915c:	d105      	bne.n	800916a <__libc_init_array+0x2e>
 800915e:	bd70      	pop	{r4, r5, r6, pc}
 8009160:	f855 3b04 	ldr.w	r3, [r5], #4
 8009164:	4798      	blx	r3
 8009166:	3601      	adds	r6, #1
 8009168:	e7ee      	b.n	8009148 <__libc_init_array+0xc>
 800916a:	f855 3b04 	ldr.w	r3, [r5], #4
 800916e:	4798      	blx	r3
 8009170:	3601      	adds	r6, #1
 8009172:	e7f2      	b.n	800915a <__libc_init_array+0x1e>
 8009174:	0800b538 	.word	0x0800b538
 8009178:	0800b538 	.word	0x0800b538
 800917c:	0800b538 	.word	0x0800b538
 8009180:	0800b53c 	.word	0x0800b53c

08009184 <memcpy>:
 8009184:	440a      	add	r2, r1
 8009186:	4291      	cmp	r1, r2
 8009188:	f100 33ff 	add.w	r3, r0, #4294967295
 800918c:	d100      	bne.n	8009190 <memcpy+0xc>
 800918e:	4770      	bx	lr
 8009190:	b510      	push	{r4, lr}
 8009192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009196:	f803 4f01 	strb.w	r4, [r3, #1]!
 800919a:	4291      	cmp	r1, r2
 800919c:	d1f9      	bne.n	8009192 <memcpy+0xe>
 800919e:	bd10      	pop	{r4, pc}

080091a0 <memset>:
 80091a0:	4402      	add	r2, r0
 80091a2:	4603      	mov	r3, r0
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d100      	bne.n	80091aa <memset+0xa>
 80091a8:	4770      	bx	lr
 80091aa:	f803 1b01 	strb.w	r1, [r3], #1
 80091ae:	e7f9      	b.n	80091a4 <memset+0x4>

080091b0 <siprintf>:
 80091b0:	b40e      	push	{r1, r2, r3}
 80091b2:	b500      	push	{lr}
 80091b4:	b09c      	sub	sp, #112	; 0x70
 80091b6:	ab1d      	add	r3, sp, #116	; 0x74
 80091b8:	9002      	str	r0, [sp, #8]
 80091ba:	9006      	str	r0, [sp, #24]
 80091bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80091c0:	4809      	ldr	r0, [pc, #36]	; (80091e8 <siprintf+0x38>)
 80091c2:	9107      	str	r1, [sp, #28]
 80091c4:	9104      	str	r1, [sp, #16]
 80091c6:	4909      	ldr	r1, [pc, #36]	; (80091ec <siprintf+0x3c>)
 80091c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80091cc:	9105      	str	r1, [sp, #20]
 80091ce:	6800      	ldr	r0, [r0, #0]
 80091d0:	9301      	str	r3, [sp, #4]
 80091d2:	a902      	add	r1, sp, #8
 80091d4:	f000 f868 	bl	80092a8 <_svfiprintf_r>
 80091d8:	9b02      	ldr	r3, [sp, #8]
 80091da:	2200      	movs	r2, #0
 80091dc:	701a      	strb	r2, [r3, #0]
 80091de:	b01c      	add	sp, #112	; 0x70
 80091e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80091e4:	b003      	add	sp, #12
 80091e6:	4770      	bx	lr
 80091e8:	20000010 	.word	0x20000010
 80091ec:	ffff0208 	.word	0xffff0208

080091f0 <__ssputs_r>:
 80091f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091f4:	688e      	ldr	r6, [r1, #8]
 80091f6:	429e      	cmp	r6, r3
 80091f8:	4682      	mov	sl, r0
 80091fa:	460c      	mov	r4, r1
 80091fc:	4690      	mov	r8, r2
 80091fe:	461f      	mov	r7, r3
 8009200:	d838      	bhi.n	8009274 <__ssputs_r+0x84>
 8009202:	898a      	ldrh	r2, [r1, #12]
 8009204:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009208:	d032      	beq.n	8009270 <__ssputs_r+0x80>
 800920a:	6825      	ldr	r5, [r4, #0]
 800920c:	6909      	ldr	r1, [r1, #16]
 800920e:	eba5 0901 	sub.w	r9, r5, r1
 8009212:	6965      	ldr	r5, [r4, #20]
 8009214:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009218:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800921c:	3301      	adds	r3, #1
 800921e:	444b      	add	r3, r9
 8009220:	106d      	asrs	r5, r5, #1
 8009222:	429d      	cmp	r5, r3
 8009224:	bf38      	it	cc
 8009226:	461d      	movcc	r5, r3
 8009228:	0553      	lsls	r3, r2, #21
 800922a:	d531      	bpl.n	8009290 <__ssputs_r+0xa0>
 800922c:	4629      	mov	r1, r5
 800922e:	f000 fb39 	bl	80098a4 <_malloc_r>
 8009232:	4606      	mov	r6, r0
 8009234:	b950      	cbnz	r0, 800924c <__ssputs_r+0x5c>
 8009236:	230c      	movs	r3, #12
 8009238:	f8ca 3000 	str.w	r3, [sl]
 800923c:	89a3      	ldrh	r3, [r4, #12]
 800923e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009242:	81a3      	strh	r3, [r4, #12]
 8009244:	f04f 30ff 	mov.w	r0, #4294967295
 8009248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800924c:	6921      	ldr	r1, [r4, #16]
 800924e:	464a      	mov	r2, r9
 8009250:	f7ff ff98 	bl	8009184 <memcpy>
 8009254:	89a3      	ldrh	r3, [r4, #12]
 8009256:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800925a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800925e:	81a3      	strh	r3, [r4, #12]
 8009260:	6126      	str	r6, [r4, #16]
 8009262:	6165      	str	r5, [r4, #20]
 8009264:	444e      	add	r6, r9
 8009266:	eba5 0509 	sub.w	r5, r5, r9
 800926a:	6026      	str	r6, [r4, #0]
 800926c:	60a5      	str	r5, [r4, #8]
 800926e:	463e      	mov	r6, r7
 8009270:	42be      	cmp	r6, r7
 8009272:	d900      	bls.n	8009276 <__ssputs_r+0x86>
 8009274:	463e      	mov	r6, r7
 8009276:	4632      	mov	r2, r6
 8009278:	6820      	ldr	r0, [r4, #0]
 800927a:	4641      	mov	r1, r8
 800927c:	f000 faa8 	bl	80097d0 <memmove>
 8009280:	68a3      	ldr	r3, [r4, #8]
 8009282:	6822      	ldr	r2, [r4, #0]
 8009284:	1b9b      	subs	r3, r3, r6
 8009286:	4432      	add	r2, r6
 8009288:	60a3      	str	r3, [r4, #8]
 800928a:	6022      	str	r2, [r4, #0]
 800928c:	2000      	movs	r0, #0
 800928e:	e7db      	b.n	8009248 <__ssputs_r+0x58>
 8009290:	462a      	mov	r2, r5
 8009292:	f000 fb61 	bl	8009958 <_realloc_r>
 8009296:	4606      	mov	r6, r0
 8009298:	2800      	cmp	r0, #0
 800929a:	d1e1      	bne.n	8009260 <__ssputs_r+0x70>
 800929c:	6921      	ldr	r1, [r4, #16]
 800929e:	4650      	mov	r0, sl
 80092a0:	f000 fab0 	bl	8009804 <_free_r>
 80092a4:	e7c7      	b.n	8009236 <__ssputs_r+0x46>
	...

080092a8 <_svfiprintf_r>:
 80092a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ac:	4698      	mov	r8, r3
 80092ae:	898b      	ldrh	r3, [r1, #12]
 80092b0:	061b      	lsls	r3, r3, #24
 80092b2:	b09d      	sub	sp, #116	; 0x74
 80092b4:	4607      	mov	r7, r0
 80092b6:	460d      	mov	r5, r1
 80092b8:	4614      	mov	r4, r2
 80092ba:	d50e      	bpl.n	80092da <_svfiprintf_r+0x32>
 80092bc:	690b      	ldr	r3, [r1, #16]
 80092be:	b963      	cbnz	r3, 80092da <_svfiprintf_r+0x32>
 80092c0:	2140      	movs	r1, #64	; 0x40
 80092c2:	f000 faef 	bl	80098a4 <_malloc_r>
 80092c6:	6028      	str	r0, [r5, #0]
 80092c8:	6128      	str	r0, [r5, #16]
 80092ca:	b920      	cbnz	r0, 80092d6 <_svfiprintf_r+0x2e>
 80092cc:	230c      	movs	r3, #12
 80092ce:	603b      	str	r3, [r7, #0]
 80092d0:	f04f 30ff 	mov.w	r0, #4294967295
 80092d4:	e0d1      	b.n	800947a <_svfiprintf_r+0x1d2>
 80092d6:	2340      	movs	r3, #64	; 0x40
 80092d8:	616b      	str	r3, [r5, #20]
 80092da:	2300      	movs	r3, #0
 80092dc:	9309      	str	r3, [sp, #36]	; 0x24
 80092de:	2320      	movs	r3, #32
 80092e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80092e8:	2330      	movs	r3, #48	; 0x30
 80092ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009494 <_svfiprintf_r+0x1ec>
 80092ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092f2:	f04f 0901 	mov.w	r9, #1
 80092f6:	4623      	mov	r3, r4
 80092f8:	469a      	mov	sl, r3
 80092fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092fe:	b10a      	cbz	r2, 8009304 <_svfiprintf_r+0x5c>
 8009300:	2a25      	cmp	r2, #37	; 0x25
 8009302:	d1f9      	bne.n	80092f8 <_svfiprintf_r+0x50>
 8009304:	ebba 0b04 	subs.w	fp, sl, r4
 8009308:	d00b      	beq.n	8009322 <_svfiprintf_r+0x7a>
 800930a:	465b      	mov	r3, fp
 800930c:	4622      	mov	r2, r4
 800930e:	4629      	mov	r1, r5
 8009310:	4638      	mov	r0, r7
 8009312:	f7ff ff6d 	bl	80091f0 <__ssputs_r>
 8009316:	3001      	adds	r0, #1
 8009318:	f000 80aa 	beq.w	8009470 <_svfiprintf_r+0x1c8>
 800931c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800931e:	445a      	add	r2, fp
 8009320:	9209      	str	r2, [sp, #36]	; 0x24
 8009322:	f89a 3000 	ldrb.w	r3, [sl]
 8009326:	2b00      	cmp	r3, #0
 8009328:	f000 80a2 	beq.w	8009470 <_svfiprintf_r+0x1c8>
 800932c:	2300      	movs	r3, #0
 800932e:	f04f 32ff 	mov.w	r2, #4294967295
 8009332:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009336:	f10a 0a01 	add.w	sl, sl, #1
 800933a:	9304      	str	r3, [sp, #16]
 800933c:	9307      	str	r3, [sp, #28]
 800933e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009342:	931a      	str	r3, [sp, #104]	; 0x68
 8009344:	4654      	mov	r4, sl
 8009346:	2205      	movs	r2, #5
 8009348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800934c:	4851      	ldr	r0, [pc, #324]	; (8009494 <_svfiprintf_r+0x1ec>)
 800934e:	f7f6 ff47 	bl	80001e0 <memchr>
 8009352:	9a04      	ldr	r2, [sp, #16]
 8009354:	b9d8      	cbnz	r0, 800938e <_svfiprintf_r+0xe6>
 8009356:	06d0      	lsls	r0, r2, #27
 8009358:	bf44      	itt	mi
 800935a:	2320      	movmi	r3, #32
 800935c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009360:	0711      	lsls	r1, r2, #28
 8009362:	bf44      	itt	mi
 8009364:	232b      	movmi	r3, #43	; 0x2b
 8009366:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800936a:	f89a 3000 	ldrb.w	r3, [sl]
 800936e:	2b2a      	cmp	r3, #42	; 0x2a
 8009370:	d015      	beq.n	800939e <_svfiprintf_r+0xf6>
 8009372:	9a07      	ldr	r2, [sp, #28]
 8009374:	4654      	mov	r4, sl
 8009376:	2000      	movs	r0, #0
 8009378:	f04f 0c0a 	mov.w	ip, #10
 800937c:	4621      	mov	r1, r4
 800937e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009382:	3b30      	subs	r3, #48	; 0x30
 8009384:	2b09      	cmp	r3, #9
 8009386:	d94e      	bls.n	8009426 <_svfiprintf_r+0x17e>
 8009388:	b1b0      	cbz	r0, 80093b8 <_svfiprintf_r+0x110>
 800938a:	9207      	str	r2, [sp, #28]
 800938c:	e014      	b.n	80093b8 <_svfiprintf_r+0x110>
 800938e:	eba0 0308 	sub.w	r3, r0, r8
 8009392:	fa09 f303 	lsl.w	r3, r9, r3
 8009396:	4313      	orrs	r3, r2
 8009398:	9304      	str	r3, [sp, #16]
 800939a:	46a2      	mov	sl, r4
 800939c:	e7d2      	b.n	8009344 <_svfiprintf_r+0x9c>
 800939e:	9b03      	ldr	r3, [sp, #12]
 80093a0:	1d19      	adds	r1, r3, #4
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	9103      	str	r1, [sp, #12]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	bfbb      	ittet	lt
 80093aa:	425b      	neglt	r3, r3
 80093ac:	f042 0202 	orrlt.w	r2, r2, #2
 80093b0:	9307      	strge	r3, [sp, #28]
 80093b2:	9307      	strlt	r3, [sp, #28]
 80093b4:	bfb8      	it	lt
 80093b6:	9204      	strlt	r2, [sp, #16]
 80093b8:	7823      	ldrb	r3, [r4, #0]
 80093ba:	2b2e      	cmp	r3, #46	; 0x2e
 80093bc:	d10c      	bne.n	80093d8 <_svfiprintf_r+0x130>
 80093be:	7863      	ldrb	r3, [r4, #1]
 80093c0:	2b2a      	cmp	r3, #42	; 0x2a
 80093c2:	d135      	bne.n	8009430 <_svfiprintf_r+0x188>
 80093c4:	9b03      	ldr	r3, [sp, #12]
 80093c6:	1d1a      	adds	r2, r3, #4
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	9203      	str	r2, [sp, #12]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	bfb8      	it	lt
 80093d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80093d4:	3402      	adds	r4, #2
 80093d6:	9305      	str	r3, [sp, #20]
 80093d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80094a4 <_svfiprintf_r+0x1fc>
 80093dc:	7821      	ldrb	r1, [r4, #0]
 80093de:	2203      	movs	r2, #3
 80093e0:	4650      	mov	r0, sl
 80093e2:	f7f6 fefd 	bl	80001e0 <memchr>
 80093e6:	b140      	cbz	r0, 80093fa <_svfiprintf_r+0x152>
 80093e8:	2340      	movs	r3, #64	; 0x40
 80093ea:	eba0 000a 	sub.w	r0, r0, sl
 80093ee:	fa03 f000 	lsl.w	r0, r3, r0
 80093f2:	9b04      	ldr	r3, [sp, #16]
 80093f4:	4303      	orrs	r3, r0
 80093f6:	3401      	adds	r4, #1
 80093f8:	9304      	str	r3, [sp, #16]
 80093fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093fe:	4826      	ldr	r0, [pc, #152]	; (8009498 <_svfiprintf_r+0x1f0>)
 8009400:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009404:	2206      	movs	r2, #6
 8009406:	f7f6 feeb 	bl	80001e0 <memchr>
 800940a:	2800      	cmp	r0, #0
 800940c:	d038      	beq.n	8009480 <_svfiprintf_r+0x1d8>
 800940e:	4b23      	ldr	r3, [pc, #140]	; (800949c <_svfiprintf_r+0x1f4>)
 8009410:	bb1b      	cbnz	r3, 800945a <_svfiprintf_r+0x1b2>
 8009412:	9b03      	ldr	r3, [sp, #12]
 8009414:	3307      	adds	r3, #7
 8009416:	f023 0307 	bic.w	r3, r3, #7
 800941a:	3308      	adds	r3, #8
 800941c:	9303      	str	r3, [sp, #12]
 800941e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009420:	4433      	add	r3, r6
 8009422:	9309      	str	r3, [sp, #36]	; 0x24
 8009424:	e767      	b.n	80092f6 <_svfiprintf_r+0x4e>
 8009426:	fb0c 3202 	mla	r2, ip, r2, r3
 800942a:	460c      	mov	r4, r1
 800942c:	2001      	movs	r0, #1
 800942e:	e7a5      	b.n	800937c <_svfiprintf_r+0xd4>
 8009430:	2300      	movs	r3, #0
 8009432:	3401      	adds	r4, #1
 8009434:	9305      	str	r3, [sp, #20]
 8009436:	4619      	mov	r1, r3
 8009438:	f04f 0c0a 	mov.w	ip, #10
 800943c:	4620      	mov	r0, r4
 800943e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009442:	3a30      	subs	r2, #48	; 0x30
 8009444:	2a09      	cmp	r2, #9
 8009446:	d903      	bls.n	8009450 <_svfiprintf_r+0x1a8>
 8009448:	2b00      	cmp	r3, #0
 800944a:	d0c5      	beq.n	80093d8 <_svfiprintf_r+0x130>
 800944c:	9105      	str	r1, [sp, #20]
 800944e:	e7c3      	b.n	80093d8 <_svfiprintf_r+0x130>
 8009450:	fb0c 2101 	mla	r1, ip, r1, r2
 8009454:	4604      	mov	r4, r0
 8009456:	2301      	movs	r3, #1
 8009458:	e7f0      	b.n	800943c <_svfiprintf_r+0x194>
 800945a:	ab03      	add	r3, sp, #12
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	462a      	mov	r2, r5
 8009460:	4b0f      	ldr	r3, [pc, #60]	; (80094a0 <_svfiprintf_r+0x1f8>)
 8009462:	a904      	add	r1, sp, #16
 8009464:	4638      	mov	r0, r7
 8009466:	f3af 8000 	nop.w
 800946a:	1c42      	adds	r2, r0, #1
 800946c:	4606      	mov	r6, r0
 800946e:	d1d6      	bne.n	800941e <_svfiprintf_r+0x176>
 8009470:	89ab      	ldrh	r3, [r5, #12]
 8009472:	065b      	lsls	r3, r3, #25
 8009474:	f53f af2c 	bmi.w	80092d0 <_svfiprintf_r+0x28>
 8009478:	9809      	ldr	r0, [sp, #36]	; 0x24
 800947a:	b01d      	add	sp, #116	; 0x74
 800947c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009480:	ab03      	add	r3, sp, #12
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	462a      	mov	r2, r5
 8009486:	4b06      	ldr	r3, [pc, #24]	; (80094a0 <_svfiprintf_r+0x1f8>)
 8009488:	a904      	add	r1, sp, #16
 800948a:	4638      	mov	r0, r7
 800948c:	f000 f87a 	bl	8009584 <_printf_i>
 8009490:	e7eb      	b.n	800946a <_svfiprintf_r+0x1c2>
 8009492:	bf00      	nop
 8009494:	0800b4bc 	.word	0x0800b4bc
 8009498:	0800b4c6 	.word	0x0800b4c6
 800949c:	00000000 	.word	0x00000000
 80094a0:	080091f1 	.word	0x080091f1
 80094a4:	0800b4c2 	.word	0x0800b4c2

080094a8 <_printf_common>:
 80094a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094ac:	4616      	mov	r6, r2
 80094ae:	4699      	mov	r9, r3
 80094b0:	688a      	ldr	r2, [r1, #8]
 80094b2:	690b      	ldr	r3, [r1, #16]
 80094b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094b8:	4293      	cmp	r3, r2
 80094ba:	bfb8      	it	lt
 80094bc:	4613      	movlt	r3, r2
 80094be:	6033      	str	r3, [r6, #0]
 80094c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094c4:	4607      	mov	r7, r0
 80094c6:	460c      	mov	r4, r1
 80094c8:	b10a      	cbz	r2, 80094ce <_printf_common+0x26>
 80094ca:	3301      	adds	r3, #1
 80094cc:	6033      	str	r3, [r6, #0]
 80094ce:	6823      	ldr	r3, [r4, #0]
 80094d0:	0699      	lsls	r1, r3, #26
 80094d2:	bf42      	ittt	mi
 80094d4:	6833      	ldrmi	r3, [r6, #0]
 80094d6:	3302      	addmi	r3, #2
 80094d8:	6033      	strmi	r3, [r6, #0]
 80094da:	6825      	ldr	r5, [r4, #0]
 80094dc:	f015 0506 	ands.w	r5, r5, #6
 80094e0:	d106      	bne.n	80094f0 <_printf_common+0x48>
 80094e2:	f104 0a19 	add.w	sl, r4, #25
 80094e6:	68e3      	ldr	r3, [r4, #12]
 80094e8:	6832      	ldr	r2, [r6, #0]
 80094ea:	1a9b      	subs	r3, r3, r2
 80094ec:	42ab      	cmp	r3, r5
 80094ee:	dc26      	bgt.n	800953e <_printf_common+0x96>
 80094f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094f4:	1e13      	subs	r3, r2, #0
 80094f6:	6822      	ldr	r2, [r4, #0]
 80094f8:	bf18      	it	ne
 80094fa:	2301      	movne	r3, #1
 80094fc:	0692      	lsls	r2, r2, #26
 80094fe:	d42b      	bmi.n	8009558 <_printf_common+0xb0>
 8009500:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009504:	4649      	mov	r1, r9
 8009506:	4638      	mov	r0, r7
 8009508:	47c0      	blx	r8
 800950a:	3001      	adds	r0, #1
 800950c:	d01e      	beq.n	800954c <_printf_common+0xa4>
 800950e:	6823      	ldr	r3, [r4, #0]
 8009510:	68e5      	ldr	r5, [r4, #12]
 8009512:	6832      	ldr	r2, [r6, #0]
 8009514:	f003 0306 	and.w	r3, r3, #6
 8009518:	2b04      	cmp	r3, #4
 800951a:	bf08      	it	eq
 800951c:	1aad      	subeq	r5, r5, r2
 800951e:	68a3      	ldr	r3, [r4, #8]
 8009520:	6922      	ldr	r2, [r4, #16]
 8009522:	bf0c      	ite	eq
 8009524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009528:	2500      	movne	r5, #0
 800952a:	4293      	cmp	r3, r2
 800952c:	bfc4      	itt	gt
 800952e:	1a9b      	subgt	r3, r3, r2
 8009530:	18ed      	addgt	r5, r5, r3
 8009532:	2600      	movs	r6, #0
 8009534:	341a      	adds	r4, #26
 8009536:	42b5      	cmp	r5, r6
 8009538:	d11a      	bne.n	8009570 <_printf_common+0xc8>
 800953a:	2000      	movs	r0, #0
 800953c:	e008      	b.n	8009550 <_printf_common+0xa8>
 800953e:	2301      	movs	r3, #1
 8009540:	4652      	mov	r2, sl
 8009542:	4649      	mov	r1, r9
 8009544:	4638      	mov	r0, r7
 8009546:	47c0      	blx	r8
 8009548:	3001      	adds	r0, #1
 800954a:	d103      	bne.n	8009554 <_printf_common+0xac>
 800954c:	f04f 30ff 	mov.w	r0, #4294967295
 8009550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009554:	3501      	adds	r5, #1
 8009556:	e7c6      	b.n	80094e6 <_printf_common+0x3e>
 8009558:	18e1      	adds	r1, r4, r3
 800955a:	1c5a      	adds	r2, r3, #1
 800955c:	2030      	movs	r0, #48	; 0x30
 800955e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009562:	4422      	add	r2, r4
 8009564:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009568:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800956c:	3302      	adds	r3, #2
 800956e:	e7c7      	b.n	8009500 <_printf_common+0x58>
 8009570:	2301      	movs	r3, #1
 8009572:	4622      	mov	r2, r4
 8009574:	4649      	mov	r1, r9
 8009576:	4638      	mov	r0, r7
 8009578:	47c0      	blx	r8
 800957a:	3001      	adds	r0, #1
 800957c:	d0e6      	beq.n	800954c <_printf_common+0xa4>
 800957e:	3601      	adds	r6, #1
 8009580:	e7d9      	b.n	8009536 <_printf_common+0x8e>
	...

08009584 <_printf_i>:
 8009584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009588:	460c      	mov	r4, r1
 800958a:	4691      	mov	r9, r2
 800958c:	7e27      	ldrb	r7, [r4, #24]
 800958e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009590:	2f78      	cmp	r7, #120	; 0x78
 8009592:	4680      	mov	r8, r0
 8009594:	469a      	mov	sl, r3
 8009596:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800959a:	d807      	bhi.n	80095ac <_printf_i+0x28>
 800959c:	2f62      	cmp	r7, #98	; 0x62
 800959e:	d80a      	bhi.n	80095b6 <_printf_i+0x32>
 80095a0:	2f00      	cmp	r7, #0
 80095a2:	f000 80d8 	beq.w	8009756 <_printf_i+0x1d2>
 80095a6:	2f58      	cmp	r7, #88	; 0x58
 80095a8:	f000 80a3 	beq.w	80096f2 <_printf_i+0x16e>
 80095ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80095b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095b4:	e03a      	b.n	800962c <_printf_i+0xa8>
 80095b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095ba:	2b15      	cmp	r3, #21
 80095bc:	d8f6      	bhi.n	80095ac <_printf_i+0x28>
 80095be:	a001      	add	r0, pc, #4	; (adr r0, 80095c4 <_printf_i+0x40>)
 80095c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80095c4:	0800961d 	.word	0x0800961d
 80095c8:	08009631 	.word	0x08009631
 80095cc:	080095ad 	.word	0x080095ad
 80095d0:	080095ad 	.word	0x080095ad
 80095d4:	080095ad 	.word	0x080095ad
 80095d8:	080095ad 	.word	0x080095ad
 80095dc:	08009631 	.word	0x08009631
 80095e0:	080095ad 	.word	0x080095ad
 80095e4:	080095ad 	.word	0x080095ad
 80095e8:	080095ad 	.word	0x080095ad
 80095ec:	080095ad 	.word	0x080095ad
 80095f0:	0800973d 	.word	0x0800973d
 80095f4:	08009661 	.word	0x08009661
 80095f8:	0800971f 	.word	0x0800971f
 80095fc:	080095ad 	.word	0x080095ad
 8009600:	080095ad 	.word	0x080095ad
 8009604:	0800975f 	.word	0x0800975f
 8009608:	080095ad 	.word	0x080095ad
 800960c:	08009661 	.word	0x08009661
 8009610:	080095ad 	.word	0x080095ad
 8009614:	080095ad 	.word	0x080095ad
 8009618:	08009727 	.word	0x08009727
 800961c:	680b      	ldr	r3, [r1, #0]
 800961e:	1d1a      	adds	r2, r3, #4
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	600a      	str	r2, [r1, #0]
 8009624:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800962c:	2301      	movs	r3, #1
 800962e:	e0a3      	b.n	8009778 <_printf_i+0x1f4>
 8009630:	6825      	ldr	r5, [r4, #0]
 8009632:	6808      	ldr	r0, [r1, #0]
 8009634:	062e      	lsls	r6, r5, #24
 8009636:	f100 0304 	add.w	r3, r0, #4
 800963a:	d50a      	bpl.n	8009652 <_printf_i+0xce>
 800963c:	6805      	ldr	r5, [r0, #0]
 800963e:	600b      	str	r3, [r1, #0]
 8009640:	2d00      	cmp	r5, #0
 8009642:	da03      	bge.n	800964c <_printf_i+0xc8>
 8009644:	232d      	movs	r3, #45	; 0x2d
 8009646:	426d      	negs	r5, r5
 8009648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800964c:	485e      	ldr	r0, [pc, #376]	; (80097c8 <_printf_i+0x244>)
 800964e:	230a      	movs	r3, #10
 8009650:	e019      	b.n	8009686 <_printf_i+0x102>
 8009652:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009656:	6805      	ldr	r5, [r0, #0]
 8009658:	600b      	str	r3, [r1, #0]
 800965a:	bf18      	it	ne
 800965c:	b22d      	sxthne	r5, r5
 800965e:	e7ef      	b.n	8009640 <_printf_i+0xbc>
 8009660:	680b      	ldr	r3, [r1, #0]
 8009662:	6825      	ldr	r5, [r4, #0]
 8009664:	1d18      	adds	r0, r3, #4
 8009666:	6008      	str	r0, [r1, #0]
 8009668:	0628      	lsls	r0, r5, #24
 800966a:	d501      	bpl.n	8009670 <_printf_i+0xec>
 800966c:	681d      	ldr	r5, [r3, #0]
 800966e:	e002      	b.n	8009676 <_printf_i+0xf2>
 8009670:	0669      	lsls	r1, r5, #25
 8009672:	d5fb      	bpl.n	800966c <_printf_i+0xe8>
 8009674:	881d      	ldrh	r5, [r3, #0]
 8009676:	4854      	ldr	r0, [pc, #336]	; (80097c8 <_printf_i+0x244>)
 8009678:	2f6f      	cmp	r7, #111	; 0x6f
 800967a:	bf0c      	ite	eq
 800967c:	2308      	moveq	r3, #8
 800967e:	230a      	movne	r3, #10
 8009680:	2100      	movs	r1, #0
 8009682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009686:	6866      	ldr	r6, [r4, #4]
 8009688:	60a6      	str	r6, [r4, #8]
 800968a:	2e00      	cmp	r6, #0
 800968c:	bfa2      	ittt	ge
 800968e:	6821      	ldrge	r1, [r4, #0]
 8009690:	f021 0104 	bicge.w	r1, r1, #4
 8009694:	6021      	strge	r1, [r4, #0]
 8009696:	b90d      	cbnz	r5, 800969c <_printf_i+0x118>
 8009698:	2e00      	cmp	r6, #0
 800969a:	d04d      	beq.n	8009738 <_printf_i+0x1b4>
 800969c:	4616      	mov	r6, r2
 800969e:	fbb5 f1f3 	udiv	r1, r5, r3
 80096a2:	fb03 5711 	mls	r7, r3, r1, r5
 80096a6:	5dc7      	ldrb	r7, [r0, r7]
 80096a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80096ac:	462f      	mov	r7, r5
 80096ae:	42bb      	cmp	r3, r7
 80096b0:	460d      	mov	r5, r1
 80096b2:	d9f4      	bls.n	800969e <_printf_i+0x11a>
 80096b4:	2b08      	cmp	r3, #8
 80096b6:	d10b      	bne.n	80096d0 <_printf_i+0x14c>
 80096b8:	6823      	ldr	r3, [r4, #0]
 80096ba:	07df      	lsls	r7, r3, #31
 80096bc:	d508      	bpl.n	80096d0 <_printf_i+0x14c>
 80096be:	6923      	ldr	r3, [r4, #16]
 80096c0:	6861      	ldr	r1, [r4, #4]
 80096c2:	4299      	cmp	r1, r3
 80096c4:	bfde      	ittt	le
 80096c6:	2330      	movle	r3, #48	; 0x30
 80096c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096d0:	1b92      	subs	r2, r2, r6
 80096d2:	6122      	str	r2, [r4, #16]
 80096d4:	f8cd a000 	str.w	sl, [sp]
 80096d8:	464b      	mov	r3, r9
 80096da:	aa03      	add	r2, sp, #12
 80096dc:	4621      	mov	r1, r4
 80096de:	4640      	mov	r0, r8
 80096e0:	f7ff fee2 	bl	80094a8 <_printf_common>
 80096e4:	3001      	adds	r0, #1
 80096e6:	d14c      	bne.n	8009782 <_printf_i+0x1fe>
 80096e8:	f04f 30ff 	mov.w	r0, #4294967295
 80096ec:	b004      	add	sp, #16
 80096ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096f2:	4835      	ldr	r0, [pc, #212]	; (80097c8 <_printf_i+0x244>)
 80096f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80096f8:	6823      	ldr	r3, [r4, #0]
 80096fa:	680e      	ldr	r6, [r1, #0]
 80096fc:	061f      	lsls	r7, r3, #24
 80096fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8009702:	600e      	str	r6, [r1, #0]
 8009704:	d514      	bpl.n	8009730 <_printf_i+0x1ac>
 8009706:	07d9      	lsls	r1, r3, #31
 8009708:	bf44      	itt	mi
 800970a:	f043 0320 	orrmi.w	r3, r3, #32
 800970e:	6023      	strmi	r3, [r4, #0]
 8009710:	b91d      	cbnz	r5, 800971a <_printf_i+0x196>
 8009712:	6823      	ldr	r3, [r4, #0]
 8009714:	f023 0320 	bic.w	r3, r3, #32
 8009718:	6023      	str	r3, [r4, #0]
 800971a:	2310      	movs	r3, #16
 800971c:	e7b0      	b.n	8009680 <_printf_i+0xfc>
 800971e:	6823      	ldr	r3, [r4, #0]
 8009720:	f043 0320 	orr.w	r3, r3, #32
 8009724:	6023      	str	r3, [r4, #0]
 8009726:	2378      	movs	r3, #120	; 0x78
 8009728:	4828      	ldr	r0, [pc, #160]	; (80097cc <_printf_i+0x248>)
 800972a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800972e:	e7e3      	b.n	80096f8 <_printf_i+0x174>
 8009730:	065e      	lsls	r6, r3, #25
 8009732:	bf48      	it	mi
 8009734:	b2ad      	uxthmi	r5, r5
 8009736:	e7e6      	b.n	8009706 <_printf_i+0x182>
 8009738:	4616      	mov	r6, r2
 800973a:	e7bb      	b.n	80096b4 <_printf_i+0x130>
 800973c:	680b      	ldr	r3, [r1, #0]
 800973e:	6826      	ldr	r6, [r4, #0]
 8009740:	6960      	ldr	r0, [r4, #20]
 8009742:	1d1d      	adds	r5, r3, #4
 8009744:	600d      	str	r5, [r1, #0]
 8009746:	0635      	lsls	r5, r6, #24
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	d501      	bpl.n	8009750 <_printf_i+0x1cc>
 800974c:	6018      	str	r0, [r3, #0]
 800974e:	e002      	b.n	8009756 <_printf_i+0x1d2>
 8009750:	0671      	lsls	r1, r6, #25
 8009752:	d5fb      	bpl.n	800974c <_printf_i+0x1c8>
 8009754:	8018      	strh	r0, [r3, #0]
 8009756:	2300      	movs	r3, #0
 8009758:	6123      	str	r3, [r4, #16]
 800975a:	4616      	mov	r6, r2
 800975c:	e7ba      	b.n	80096d4 <_printf_i+0x150>
 800975e:	680b      	ldr	r3, [r1, #0]
 8009760:	1d1a      	adds	r2, r3, #4
 8009762:	600a      	str	r2, [r1, #0]
 8009764:	681e      	ldr	r6, [r3, #0]
 8009766:	6862      	ldr	r2, [r4, #4]
 8009768:	2100      	movs	r1, #0
 800976a:	4630      	mov	r0, r6
 800976c:	f7f6 fd38 	bl	80001e0 <memchr>
 8009770:	b108      	cbz	r0, 8009776 <_printf_i+0x1f2>
 8009772:	1b80      	subs	r0, r0, r6
 8009774:	6060      	str	r0, [r4, #4]
 8009776:	6863      	ldr	r3, [r4, #4]
 8009778:	6123      	str	r3, [r4, #16]
 800977a:	2300      	movs	r3, #0
 800977c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009780:	e7a8      	b.n	80096d4 <_printf_i+0x150>
 8009782:	6923      	ldr	r3, [r4, #16]
 8009784:	4632      	mov	r2, r6
 8009786:	4649      	mov	r1, r9
 8009788:	4640      	mov	r0, r8
 800978a:	47d0      	blx	sl
 800978c:	3001      	adds	r0, #1
 800978e:	d0ab      	beq.n	80096e8 <_printf_i+0x164>
 8009790:	6823      	ldr	r3, [r4, #0]
 8009792:	079b      	lsls	r3, r3, #30
 8009794:	d413      	bmi.n	80097be <_printf_i+0x23a>
 8009796:	68e0      	ldr	r0, [r4, #12]
 8009798:	9b03      	ldr	r3, [sp, #12]
 800979a:	4298      	cmp	r0, r3
 800979c:	bfb8      	it	lt
 800979e:	4618      	movlt	r0, r3
 80097a0:	e7a4      	b.n	80096ec <_printf_i+0x168>
 80097a2:	2301      	movs	r3, #1
 80097a4:	4632      	mov	r2, r6
 80097a6:	4649      	mov	r1, r9
 80097a8:	4640      	mov	r0, r8
 80097aa:	47d0      	blx	sl
 80097ac:	3001      	adds	r0, #1
 80097ae:	d09b      	beq.n	80096e8 <_printf_i+0x164>
 80097b0:	3501      	adds	r5, #1
 80097b2:	68e3      	ldr	r3, [r4, #12]
 80097b4:	9903      	ldr	r1, [sp, #12]
 80097b6:	1a5b      	subs	r3, r3, r1
 80097b8:	42ab      	cmp	r3, r5
 80097ba:	dcf2      	bgt.n	80097a2 <_printf_i+0x21e>
 80097bc:	e7eb      	b.n	8009796 <_printf_i+0x212>
 80097be:	2500      	movs	r5, #0
 80097c0:	f104 0619 	add.w	r6, r4, #25
 80097c4:	e7f5      	b.n	80097b2 <_printf_i+0x22e>
 80097c6:	bf00      	nop
 80097c8:	0800b4cd 	.word	0x0800b4cd
 80097cc:	0800b4de 	.word	0x0800b4de

080097d0 <memmove>:
 80097d0:	4288      	cmp	r0, r1
 80097d2:	b510      	push	{r4, lr}
 80097d4:	eb01 0402 	add.w	r4, r1, r2
 80097d8:	d902      	bls.n	80097e0 <memmove+0x10>
 80097da:	4284      	cmp	r4, r0
 80097dc:	4623      	mov	r3, r4
 80097de:	d807      	bhi.n	80097f0 <memmove+0x20>
 80097e0:	1e43      	subs	r3, r0, #1
 80097e2:	42a1      	cmp	r1, r4
 80097e4:	d008      	beq.n	80097f8 <memmove+0x28>
 80097e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097ee:	e7f8      	b.n	80097e2 <memmove+0x12>
 80097f0:	4402      	add	r2, r0
 80097f2:	4601      	mov	r1, r0
 80097f4:	428a      	cmp	r2, r1
 80097f6:	d100      	bne.n	80097fa <memmove+0x2a>
 80097f8:	bd10      	pop	{r4, pc}
 80097fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009802:	e7f7      	b.n	80097f4 <memmove+0x24>

08009804 <_free_r>:
 8009804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009806:	2900      	cmp	r1, #0
 8009808:	d048      	beq.n	800989c <_free_r+0x98>
 800980a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800980e:	9001      	str	r0, [sp, #4]
 8009810:	2b00      	cmp	r3, #0
 8009812:	f1a1 0404 	sub.w	r4, r1, #4
 8009816:	bfb8      	it	lt
 8009818:	18e4      	addlt	r4, r4, r3
 800981a:	f000 f8d3 	bl	80099c4 <__malloc_lock>
 800981e:	4a20      	ldr	r2, [pc, #128]	; (80098a0 <_free_r+0x9c>)
 8009820:	9801      	ldr	r0, [sp, #4]
 8009822:	6813      	ldr	r3, [r2, #0]
 8009824:	4615      	mov	r5, r2
 8009826:	b933      	cbnz	r3, 8009836 <_free_r+0x32>
 8009828:	6063      	str	r3, [r4, #4]
 800982a:	6014      	str	r4, [r2, #0]
 800982c:	b003      	add	sp, #12
 800982e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009832:	f000 b8cd 	b.w	80099d0 <__malloc_unlock>
 8009836:	42a3      	cmp	r3, r4
 8009838:	d90b      	bls.n	8009852 <_free_r+0x4e>
 800983a:	6821      	ldr	r1, [r4, #0]
 800983c:	1862      	adds	r2, r4, r1
 800983e:	4293      	cmp	r3, r2
 8009840:	bf04      	itt	eq
 8009842:	681a      	ldreq	r2, [r3, #0]
 8009844:	685b      	ldreq	r3, [r3, #4]
 8009846:	6063      	str	r3, [r4, #4]
 8009848:	bf04      	itt	eq
 800984a:	1852      	addeq	r2, r2, r1
 800984c:	6022      	streq	r2, [r4, #0]
 800984e:	602c      	str	r4, [r5, #0]
 8009850:	e7ec      	b.n	800982c <_free_r+0x28>
 8009852:	461a      	mov	r2, r3
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	b10b      	cbz	r3, 800985c <_free_r+0x58>
 8009858:	42a3      	cmp	r3, r4
 800985a:	d9fa      	bls.n	8009852 <_free_r+0x4e>
 800985c:	6811      	ldr	r1, [r2, #0]
 800985e:	1855      	adds	r5, r2, r1
 8009860:	42a5      	cmp	r5, r4
 8009862:	d10b      	bne.n	800987c <_free_r+0x78>
 8009864:	6824      	ldr	r4, [r4, #0]
 8009866:	4421      	add	r1, r4
 8009868:	1854      	adds	r4, r2, r1
 800986a:	42a3      	cmp	r3, r4
 800986c:	6011      	str	r1, [r2, #0]
 800986e:	d1dd      	bne.n	800982c <_free_r+0x28>
 8009870:	681c      	ldr	r4, [r3, #0]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	6053      	str	r3, [r2, #4]
 8009876:	4421      	add	r1, r4
 8009878:	6011      	str	r1, [r2, #0]
 800987a:	e7d7      	b.n	800982c <_free_r+0x28>
 800987c:	d902      	bls.n	8009884 <_free_r+0x80>
 800987e:	230c      	movs	r3, #12
 8009880:	6003      	str	r3, [r0, #0]
 8009882:	e7d3      	b.n	800982c <_free_r+0x28>
 8009884:	6825      	ldr	r5, [r4, #0]
 8009886:	1961      	adds	r1, r4, r5
 8009888:	428b      	cmp	r3, r1
 800988a:	bf04      	itt	eq
 800988c:	6819      	ldreq	r1, [r3, #0]
 800988e:	685b      	ldreq	r3, [r3, #4]
 8009890:	6063      	str	r3, [r4, #4]
 8009892:	bf04      	itt	eq
 8009894:	1949      	addeq	r1, r1, r5
 8009896:	6021      	streq	r1, [r4, #0]
 8009898:	6054      	str	r4, [r2, #4]
 800989a:	e7c7      	b.n	800982c <_free_r+0x28>
 800989c:	b003      	add	sp, #12
 800989e:	bd30      	pop	{r4, r5, pc}
 80098a0:	200049d0 	.word	0x200049d0

080098a4 <_malloc_r>:
 80098a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a6:	1ccd      	adds	r5, r1, #3
 80098a8:	f025 0503 	bic.w	r5, r5, #3
 80098ac:	3508      	adds	r5, #8
 80098ae:	2d0c      	cmp	r5, #12
 80098b0:	bf38      	it	cc
 80098b2:	250c      	movcc	r5, #12
 80098b4:	2d00      	cmp	r5, #0
 80098b6:	4606      	mov	r6, r0
 80098b8:	db01      	blt.n	80098be <_malloc_r+0x1a>
 80098ba:	42a9      	cmp	r1, r5
 80098bc:	d903      	bls.n	80098c6 <_malloc_r+0x22>
 80098be:	230c      	movs	r3, #12
 80098c0:	6033      	str	r3, [r6, #0]
 80098c2:	2000      	movs	r0, #0
 80098c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098c6:	f000 f87d 	bl	80099c4 <__malloc_lock>
 80098ca:	4921      	ldr	r1, [pc, #132]	; (8009950 <_malloc_r+0xac>)
 80098cc:	680a      	ldr	r2, [r1, #0]
 80098ce:	4614      	mov	r4, r2
 80098d0:	b99c      	cbnz	r4, 80098fa <_malloc_r+0x56>
 80098d2:	4f20      	ldr	r7, [pc, #128]	; (8009954 <_malloc_r+0xb0>)
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	b923      	cbnz	r3, 80098e2 <_malloc_r+0x3e>
 80098d8:	4621      	mov	r1, r4
 80098da:	4630      	mov	r0, r6
 80098dc:	f000 f862 	bl	80099a4 <_sbrk_r>
 80098e0:	6038      	str	r0, [r7, #0]
 80098e2:	4629      	mov	r1, r5
 80098e4:	4630      	mov	r0, r6
 80098e6:	f000 f85d 	bl	80099a4 <_sbrk_r>
 80098ea:	1c43      	adds	r3, r0, #1
 80098ec:	d123      	bne.n	8009936 <_malloc_r+0x92>
 80098ee:	230c      	movs	r3, #12
 80098f0:	6033      	str	r3, [r6, #0]
 80098f2:	4630      	mov	r0, r6
 80098f4:	f000 f86c 	bl	80099d0 <__malloc_unlock>
 80098f8:	e7e3      	b.n	80098c2 <_malloc_r+0x1e>
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	1b5b      	subs	r3, r3, r5
 80098fe:	d417      	bmi.n	8009930 <_malloc_r+0x8c>
 8009900:	2b0b      	cmp	r3, #11
 8009902:	d903      	bls.n	800990c <_malloc_r+0x68>
 8009904:	6023      	str	r3, [r4, #0]
 8009906:	441c      	add	r4, r3
 8009908:	6025      	str	r5, [r4, #0]
 800990a:	e004      	b.n	8009916 <_malloc_r+0x72>
 800990c:	6863      	ldr	r3, [r4, #4]
 800990e:	42a2      	cmp	r2, r4
 8009910:	bf0c      	ite	eq
 8009912:	600b      	streq	r3, [r1, #0]
 8009914:	6053      	strne	r3, [r2, #4]
 8009916:	4630      	mov	r0, r6
 8009918:	f000 f85a 	bl	80099d0 <__malloc_unlock>
 800991c:	f104 000b 	add.w	r0, r4, #11
 8009920:	1d23      	adds	r3, r4, #4
 8009922:	f020 0007 	bic.w	r0, r0, #7
 8009926:	1ac2      	subs	r2, r0, r3
 8009928:	d0cc      	beq.n	80098c4 <_malloc_r+0x20>
 800992a:	1a1b      	subs	r3, r3, r0
 800992c:	50a3      	str	r3, [r4, r2]
 800992e:	e7c9      	b.n	80098c4 <_malloc_r+0x20>
 8009930:	4622      	mov	r2, r4
 8009932:	6864      	ldr	r4, [r4, #4]
 8009934:	e7cc      	b.n	80098d0 <_malloc_r+0x2c>
 8009936:	1cc4      	adds	r4, r0, #3
 8009938:	f024 0403 	bic.w	r4, r4, #3
 800993c:	42a0      	cmp	r0, r4
 800993e:	d0e3      	beq.n	8009908 <_malloc_r+0x64>
 8009940:	1a21      	subs	r1, r4, r0
 8009942:	4630      	mov	r0, r6
 8009944:	f000 f82e 	bl	80099a4 <_sbrk_r>
 8009948:	3001      	adds	r0, #1
 800994a:	d1dd      	bne.n	8009908 <_malloc_r+0x64>
 800994c:	e7cf      	b.n	80098ee <_malloc_r+0x4a>
 800994e:	bf00      	nop
 8009950:	200049d0 	.word	0x200049d0
 8009954:	200049d4 	.word	0x200049d4

08009958 <_realloc_r>:
 8009958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800995a:	4607      	mov	r7, r0
 800995c:	4614      	mov	r4, r2
 800995e:	460e      	mov	r6, r1
 8009960:	b921      	cbnz	r1, 800996c <_realloc_r+0x14>
 8009962:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009966:	4611      	mov	r1, r2
 8009968:	f7ff bf9c 	b.w	80098a4 <_malloc_r>
 800996c:	b922      	cbnz	r2, 8009978 <_realloc_r+0x20>
 800996e:	f7ff ff49 	bl	8009804 <_free_r>
 8009972:	4625      	mov	r5, r4
 8009974:	4628      	mov	r0, r5
 8009976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009978:	f000 f830 	bl	80099dc <_malloc_usable_size_r>
 800997c:	42a0      	cmp	r0, r4
 800997e:	d20f      	bcs.n	80099a0 <_realloc_r+0x48>
 8009980:	4621      	mov	r1, r4
 8009982:	4638      	mov	r0, r7
 8009984:	f7ff ff8e 	bl	80098a4 <_malloc_r>
 8009988:	4605      	mov	r5, r0
 800998a:	2800      	cmp	r0, #0
 800998c:	d0f2      	beq.n	8009974 <_realloc_r+0x1c>
 800998e:	4631      	mov	r1, r6
 8009990:	4622      	mov	r2, r4
 8009992:	f7ff fbf7 	bl	8009184 <memcpy>
 8009996:	4631      	mov	r1, r6
 8009998:	4638      	mov	r0, r7
 800999a:	f7ff ff33 	bl	8009804 <_free_r>
 800999e:	e7e9      	b.n	8009974 <_realloc_r+0x1c>
 80099a0:	4635      	mov	r5, r6
 80099a2:	e7e7      	b.n	8009974 <_realloc_r+0x1c>

080099a4 <_sbrk_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	4d06      	ldr	r5, [pc, #24]	; (80099c0 <_sbrk_r+0x1c>)
 80099a8:	2300      	movs	r3, #0
 80099aa:	4604      	mov	r4, r0
 80099ac:	4608      	mov	r0, r1
 80099ae:	602b      	str	r3, [r5, #0]
 80099b0:	f7f8 fe5e 	bl	8002670 <_sbrk>
 80099b4:	1c43      	adds	r3, r0, #1
 80099b6:	d102      	bne.n	80099be <_sbrk_r+0x1a>
 80099b8:	682b      	ldr	r3, [r5, #0]
 80099ba:	b103      	cbz	r3, 80099be <_sbrk_r+0x1a>
 80099bc:	6023      	str	r3, [r4, #0]
 80099be:	bd38      	pop	{r3, r4, r5, pc}
 80099c0:	2000500c 	.word	0x2000500c

080099c4 <__malloc_lock>:
 80099c4:	4801      	ldr	r0, [pc, #4]	; (80099cc <__malloc_lock+0x8>)
 80099c6:	f000 b811 	b.w	80099ec <__retarget_lock_acquire_recursive>
 80099ca:	bf00      	nop
 80099cc:	20005014 	.word	0x20005014

080099d0 <__malloc_unlock>:
 80099d0:	4801      	ldr	r0, [pc, #4]	; (80099d8 <__malloc_unlock+0x8>)
 80099d2:	f000 b80c 	b.w	80099ee <__retarget_lock_release_recursive>
 80099d6:	bf00      	nop
 80099d8:	20005014 	.word	0x20005014

080099dc <_malloc_usable_size_r>:
 80099dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099e0:	1f18      	subs	r0, r3, #4
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	bfbc      	itt	lt
 80099e6:	580b      	ldrlt	r3, [r1, r0]
 80099e8:	18c0      	addlt	r0, r0, r3
 80099ea:	4770      	bx	lr

080099ec <__retarget_lock_acquire_recursive>:
 80099ec:	4770      	bx	lr

080099ee <__retarget_lock_release_recursive>:
 80099ee:	4770      	bx	lr

080099f0 <pow>:
 80099f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099f4:	ec59 8b10 	vmov	r8, r9, d0
 80099f8:	ec57 6b11 	vmov	r6, r7, d1
 80099fc:	f000 f8a8 	bl	8009b50 <__ieee754_pow>
 8009a00:	4b4e      	ldr	r3, [pc, #312]	; (8009b3c <pow+0x14c>)
 8009a02:	f993 3000 	ldrsb.w	r3, [r3]
 8009a06:	3301      	adds	r3, #1
 8009a08:	ec55 4b10 	vmov	r4, r5, d0
 8009a0c:	d015      	beq.n	8009a3a <pow+0x4a>
 8009a0e:	4632      	mov	r2, r6
 8009a10:	463b      	mov	r3, r7
 8009a12:	4630      	mov	r0, r6
 8009a14:	4639      	mov	r1, r7
 8009a16:	f7f7 f889 	bl	8000b2c <__aeabi_dcmpun>
 8009a1a:	b970      	cbnz	r0, 8009a3a <pow+0x4a>
 8009a1c:	4642      	mov	r2, r8
 8009a1e:	464b      	mov	r3, r9
 8009a20:	4640      	mov	r0, r8
 8009a22:	4649      	mov	r1, r9
 8009a24:	f7f7 f882 	bl	8000b2c <__aeabi_dcmpun>
 8009a28:	2200      	movs	r2, #0
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	b148      	cbz	r0, 8009a42 <pow+0x52>
 8009a2e:	4630      	mov	r0, r6
 8009a30:	4639      	mov	r1, r7
 8009a32:	f7f7 f849 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d17d      	bne.n	8009b36 <pow+0x146>
 8009a3a:	ec45 4b10 	vmov	d0, r4, r5
 8009a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a42:	4640      	mov	r0, r8
 8009a44:	4649      	mov	r1, r9
 8009a46:	f7f7 f83f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a4a:	b1e0      	cbz	r0, 8009a86 <pow+0x96>
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	2300      	movs	r3, #0
 8009a50:	4630      	mov	r0, r6
 8009a52:	4639      	mov	r1, r7
 8009a54:	f7f7 f838 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	d16c      	bne.n	8009b36 <pow+0x146>
 8009a5c:	ec47 6b10 	vmov	d0, r6, r7
 8009a60:	f000 fe55 	bl	800a70e <finite>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d0e8      	beq.n	8009a3a <pow+0x4a>
 8009a68:	2200      	movs	r2, #0
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	4630      	mov	r0, r6
 8009a6e:	4639      	mov	r1, r7
 8009a70:	f7f7 f834 	bl	8000adc <__aeabi_dcmplt>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	d0e0      	beq.n	8009a3a <pow+0x4a>
 8009a78:	f7ff fb5a 	bl	8009130 <__errno>
 8009a7c:	2321      	movs	r3, #33	; 0x21
 8009a7e:	6003      	str	r3, [r0, #0]
 8009a80:	2400      	movs	r4, #0
 8009a82:	4d2f      	ldr	r5, [pc, #188]	; (8009b40 <pow+0x150>)
 8009a84:	e7d9      	b.n	8009a3a <pow+0x4a>
 8009a86:	ec45 4b10 	vmov	d0, r4, r5
 8009a8a:	f000 fe40 	bl	800a70e <finite>
 8009a8e:	bbb8      	cbnz	r0, 8009b00 <pow+0x110>
 8009a90:	ec49 8b10 	vmov	d0, r8, r9
 8009a94:	f000 fe3b 	bl	800a70e <finite>
 8009a98:	b390      	cbz	r0, 8009b00 <pow+0x110>
 8009a9a:	ec47 6b10 	vmov	d0, r6, r7
 8009a9e:	f000 fe36 	bl	800a70e <finite>
 8009aa2:	b368      	cbz	r0, 8009b00 <pow+0x110>
 8009aa4:	4622      	mov	r2, r4
 8009aa6:	462b      	mov	r3, r5
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	4629      	mov	r1, r5
 8009aac:	f7f7 f83e 	bl	8000b2c <__aeabi_dcmpun>
 8009ab0:	b160      	cbz	r0, 8009acc <pow+0xdc>
 8009ab2:	f7ff fb3d 	bl	8009130 <__errno>
 8009ab6:	2321      	movs	r3, #33	; 0x21
 8009ab8:	6003      	str	r3, [r0, #0]
 8009aba:	2200      	movs	r2, #0
 8009abc:	2300      	movs	r3, #0
 8009abe:	4610      	mov	r0, r2
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	f7f6 fec3 	bl	800084c <__aeabi_ddiv>
 8009ac6:	4604      	mov	r4, r0
 8009ac8:	460d      	mov	r5, r1
 8009aca:	e7b6      	b.n	8009a3a <pow+0x4a>
 8009acc:	f7ff fb30 	bl	8009130 <__errno>
 8009ad0:	2322      	movs	r3, #34	; 0x22
 8009ad2:	6003      	str	r3, [r0, #0]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	4640      	mov	r0, r8
 8009ada:	4649      	mov	r1, r9
 8009adc:	f7f6 fffe 	bl	8000adc <__aeabi_dcmplt>
 8009ae0:	2400      	movs	r4, #0
 8009ae2:	b158      	cbz	r0, 8009afc <pow+0x10c>
 8009ae4:	ec47 6b10 	vmov	d0, r6, r7
 8009ae8:	f000 fe26 	bl	800a738 <rint>
 8009aec:	4632      	mov	r2, r6
 8009aee:	ec51 0b10 	vmov	r0, r1, d0
 8009af2:	463b      	mov	r3, r7
 8009af4:	f7f6 ffe8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	d0c2      	beq.n	8009a82 <pow+0x92>
 8009afc:	4d11      	ldr	r5, [pc, #68]	; (8009b44 <pow+0x154>)
 8009afe:	e79c      	b.n	8009a3a <pow+0x4a>
 8009b00:	2200      	movs	r2, #0
 8009b02:	2300      	movs	r3, #0
 8009b04:	4620      	mov	r0, r4
 8009b06:	4629      	mov	r1, r5
 8009b08:	f7f6 ffde 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d094      	beq.n	8009a3a <pow+0x4a>
 8009b10:	ec49 8b10 	vmov	d0, r8, r9
 8009b14:	f000 fdfb 	bl	800a70e <finite>
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	d08e      	beq.n	8009a3a <pow+0x4a>
 8009b1c:	ec47 6b10 	vmov	d0, r6, r7
 8009b20:	f000 fdf5 	bl	800a70e <finite>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	d088      	beq.n	8009a3a <pow+0x4a>
 8009b28:	f7ff fb02 	bl	8009130 <__errno>
 8009b2c:	2322      	movs	r3, #34	; 0x22
 8009b2e:	6003      	str	r3, [r0, #0]
 8009b30:	2400      	movs	r4, #0
 8009b32:	2500      	movs	r5, #0
 8009b34:	e781      	b.n	8009a3a <pow+0x4a>
 8009b36:	4d04      	ldr	r5, [pc, #16]	; (8009b48 <pow+0x158>)
 8009b38:	2400      	movs	r4, #0
 8009b3a:	e77e      	b.n	8009a3a <pow+0x4a>
 8009b3c:	20000074 	.word	0x20000074
 8009b40:	fff00000 	.word	0xfff00000
 8009b44:	7ff00000 	.word	0x7ff00000
 8009b48:	3ff00000 	.word	0x3ff00000
 8009b4c:	00000000 	.word	0x00000000

08009b50 <__ieee754_pow>:
 8009b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b54:	ed2d 8b06 	vpush	{d8-d10}
 8009b58:	b08d      	sub	sp, #52	; 0x34
 8009b5a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009b5e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8009b62:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009b66:	ea56 0100 	orrs.w	r1, r6, r0
 8009b6a:	ec53 2b10 	vmov	r2, r3, d0
 8009b6e:	f000 84d1 	beq.w	800a514 <__ieee754_pow+0x9c4>
 8009b72:	497f      	ldr	r1, [pc, #508]	; (8009d70 <__ieee754_pow+0x220>)
 8009b74:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8009b78:	428c      	cmp	r4, r1
 8009b7a:	ee10 8a10 	vmov	r8, s0
 8009b7e:	4699      	mov	r9, r3
 8009b80:	dc09      	bgt.n	8009b96 <__ieee754_pow+0x46>
 8009b82:	d103      	bne.n	8009b8c <__ieee754_pow+0x3c>
 8009b84:	b97a      	cbnz	r2, 8009ba6 <__ieee754_pow+0x56>
 8009b86:	42a6      	cmp	r6, r4
 8009b88:	dd02      	ble.n	8009b90 <__ieee754_pow+0x40>
 8009b8a:	e00c      	b.n	8009ba6 <__ieee754_pow+0x56>
 8009b8c:	428e      	cmp	r6, r1
 8009b8e:	dc02      	bgt.n	8009b96 <__ieee754_pow+0x46>
 8009b90:	428e      	cmp	r6, r1
 8009b92:	d110      	bne.n	8009bb6 <__ieee754_pow+0x66>
 8009b94:	b178      	cbz	r0, 8009bb6 <__ieee754_pow+0x66>
 8009b96:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009b9a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009b9e:	ea54 0308 	orrs.w	r3, r4, r8
 8009ba2:	f000 84b7 	beq.w	800a514 <__ieee754_pow+0x9c4>
 8009ba6:	4873      	ldr	r0, [pc, #460]	; (8009d74 <__ieee754_pow+0x224>)
 8009ba8:	b00d      	add	sp, #52	; 0x34
 8009baa:	ecbd 8b06 	vpop	{d8-d10}
 8009bae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb2:	f000 bdb9 	b.w	800a728 <nan>
 8009bb6:	f1b9 0f00 	cmp.w	r9, #0
 8009bba:	da36      	bge.n	8009c2a <__ieee754_pow+0xda>
 8009bbc:	496e      	ldr	r1, [pc, #440]	; (8009d78 <__ieee754_pow+0x228>)
 8009bbe:	428e      	cmp	r6, r1
 8009bc0:	dc51      	bgt.n	8009c66 <__ieee754_pow+0x116>
 8009bc2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8009bc6:	428e      	cmp	r6, r1
 8009bc8:	f340 84af 	ble.w	800a52a <__ieee754_pow+0x9da>
 8009bcc:	1531      	asrs	r1, r6, #20
 8009bce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009bd2:	2914      	cmp	r1, #20
 8009bd4:	dd0f      	ble.n	8009bf6 <__ieee754_pow+0xa6>
 8009bd6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8009bda:	fa20 fc01 	lsr.w	ip, r0, r1
 8009bde:	fa0c f101 	lsl.w	r1, ip, r1
 8009be2:	4281      	cmp	r1, r0
 8009be4:	f040 84a1 	bne.w	800a52a <__ieee754_pow+0x9da>
 8009be8:	f00c 0c01 	and.w	ip, ip, #1
 8009bec:	f1cc 0102 	rsb	r1, ip, #2
 8009bf0:	9100      	str	r1, [sp, #0]
 8009bf2:	b180      	cbz	r0, 8009c16 <__ieee754_pow+0xc6>
 8009bf4:	e059      	b.n	8009caa <__ieee754_pow+0x15a>
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	d155      	bne.n	8009ca6 <__ieee754_pow+0x156>
 8009bfa:	f1c1 0114 	rsb	r1, r1, #20
 8009bfe:	fa46 fc01 	asr.w	ip, r6, r1
 8009c02:	fa0c f101 	lsl.w	r1, ip, r1
 8009c06:	42b1      	cmp	r1, r6
 8009c08:	f040 848c 	bne.w	800a524 <__ieee754_pow+0x9d4>
 8009c0c:	f00c 0c01 	and.w	ip, ip, #1
 8009c10:	f1cc 0102 	rsb	r1, ip, #2
 8009c14:	9100      	str	r1, [sp, #0]
 8009c16:	4959      	ldr	r1, [pc, #356]	; (8009d7c <__ieee754_pow+0x22c>)
 8009c18:	428e      	cmp	r6, r1
 8009c1a:	d12d      	bne.n	8009c78 <__ieee754_pow+0x128>
 8009c1c:	2f00      	cmp	r7, #0
 8009c1e:	da79      	bge.n	8009d14 <__ieee754_pow+0x1c4>
 8009c20:	4956      	ldr	r1, [pc, #344]	; (8009d7c <__ieee754_pow+0x22c>)
 8009c22:	2000      	movs	r0, #0
 8009c24:	f7f6 fe12 	bl	800084c <__aeabi_ddiv>
 8009c28:	e016      	b.n	8009c58 <__ieee754_pow+0x108>
 8009c2a:	2100      	movs	r1, #0
 8009c2c:	9100      	str	r1, [sp, #0]
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	d13b      	bne.n	8009caa <__ieee754_pow+0x15a>
 8009c32:	494f      	ldr	r1, [pc, #316]	; (8009d70 <__ieee754_pow+0x220>)
 8009c34:	428e      	cmp	r6, r1
 8009c36:	d1ee      	bne.n	8009c16 <__ieee754_pow+0xc6>
 8009c38:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009c3c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009c40:	ea53 0308 	orrs.w	r3, r3, r8
 8009c44:	f000 8466 	beq.w	800a514 <__ieee754_pow+0x9c4>
 8009c48:	4b4d      	ldr	r3, [pc, #308]	; (8009d80 <__ieee754_pow+0x230>)
 8009c4a:	429c      	cmp	r4, r3
 8009c4c:	dd0d      	ble.n	8009c6a <__ieee754_pow+0x11a>
 8009c4e:	2f00      	cmp	r7, #0
 8009c50:	f280 8464 	bge.w	800a51c <__ieee754_pow+0x9cc>
 8009c54:	2000      	movs	r0, #0
 8009c56:	2100      	movs	r1, #0
 8009c58:	ec41 0b10 	vmov	d0, r0, r1
 8009c5c:	b00d      	add	sp, #52	; 0x34
 8009c5e:	ecbd 8b06 	vpop	{d8-d10}
 8009c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c66:	2102      	movs	r1, #2
 8009c68:	e7e0      	b.n	8009c2c <__ieee754_pow+0xdc>
 8009c6a:	2f00      	cmp	r7, #0
 8009c6c:	daf2      	bge.n	8009c54 <__ieee754_pow+0x104>
 8009c6e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8009c72:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009c76:	e7ef      	b.n	8009c58 <__ieee754_pow+0x108>
 8009c78:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009c7c:	d104      	bne.n	8009c88 <__ieee754_pow+0x138>
 8009c7e:	4610      	mov	r0, r2
 8009c80:	4619      	mov	r1, r3
 8009c82:	f7f6 fcb9 	bl	80005f8 <__aeabi_dmul>
 8009c86:	e7e7      	b.n	8009c58 <__ieee754_pow+0x108>
 8009c88:	493e      	ldr	r1, [pc, #248]	; (8009d84 <__ieee754_pow+0x234>)
 8009c8a:	428f      	cmp	r7, r1
 8009c8c:	d10d      	bne.n	8009caa <__ieee754_pow+0x15a>
 8009c8e:	f1b9 0f00 	cmp.w	r9, #0
 8009c92:	db0a      	blt.n	8009caa <__ieee754_pow+0x15a>
 8009c94:	ec43 2b10 	vmov	d0, r2, r3
 8009c98:	b00d      	add	sp, #52	; 0x34
 8009c9a:	ecbd 8b06 	vpop	{d8-d10}
 8009c9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca2:	f000 bc77 	b.w	800a594 <__ieee754_sqrt>
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	9100      	str	r1, [sp, #0]
 8009caa:	ec43 2b10 	vmov	d0, r2, r3
 8009cae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009cb2:	f000 fd23 	bl	800a6fc <fabs>
 8009cb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cba:	ec51 0b10 	vmov	r0, r1, d0
 8009cbe:	f1b8 0f00 	cmp.w	r8, #0
 8009cc2:	d12a      	bne.n	8009d1a <__ieee754_pow+0x1ca>
 8009cc4:	b12c      	cbz	r4, 8009cd2 <__ieee754_pow+0x182>
 8009cc6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8009d7c <__ieee754_pow+0x22c>
 8009cca:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8009cce:	45e6      	cmp	lr, ip
 8009cd0:	d123      	bne.n	8009d1a <__ieee754_pow+0x1ca>
 8009cd2:	2f00      	cmp	r7, #0
 8009cd4:	da05      	bge.n	8009ce2 <__ieee754_pow+0x192>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	460b      	mov	r3, r1
 8009cda:	2000      	movs	r0, #0
 8009cdc:	4927      	ldr	r1, [pc, #156]	; (8009d7c <__ieee754_pow+0x22c>)
 8009cde:	f7f6 fdb5 	bl	800084c <__aeabi_ddiv>
 8009ce2:	f1b9 0f00 	cmp.w	r9, #0
 8009ce6:	dab7      	bge.n	8009c58 <__ieee754_pow+0x108>
 8009ce8:	9b00      	ldr	r3, [sp, #0]
 8009cea:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009cee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009cf2:	4323      	orrs	r3, r4
 8009cf4:	d108      	bne.n	8009d08 <__ieee754_pow+0x1b8>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	4610      	mov	r0, r2
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	f7f6 fac3 	bl	8000288 <__aeabi_dsub>
 8009d02:	4602      	mov	r2, r0
 8009d04:	460b      	mov	r3, r1
 8009d06:	e78d      	b.n	8009c24 <__ieee754_pow+0xd4>
 8009d08:	9b00      	ldr	r3, [sp, #0]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d1a4      	bne.n	8009c58 <__ieee754_pow+0x108>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d14:	4610      	mov	r0, r2
 8009d16:	4619      	mov	r1, r3
 8009d18:	e79e      	b.n	8009c58 <__ieee754_pow+0x108>
 8009d1a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8009d1e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8009d22:	950a      	str	r5, [sp, #40]	; 0x28
 8009d24:	9d00      	ldr	r5, [sp, #0]
 8009d26:	46ac      	mov	ip, r5
 8009d28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009d2a:	ea5c 0505 	orrs.w	r5, ip, r5
 8009d2e:	d0e4      	beq.n	8009cfa <__ieee754_pow+0x1aa>
 8009d30:	4b15      	ldr	r3, [pc, #84]	; (8009d88 <__ieee754_pow+0x238>)
 8009d32:	429e      	cmp	r6, r3
 8009d34:	f340 80fc 	ble.w	8009f30 <__ieee754_pow+0x3e0>
 8009d38:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009d3c:	429e      	cmp	r6, r3
 8009d3e:	4b10      	ldr	r3, [pc, #64]	; (8009d80 <__ieee754_pow+0x230>)
 8009d40:	dd07      	ble.n	8009d52 <__ieee754_pow+0x202>
 8009d42:	429c      	cmp	r4, r3
 8009d44:	dc0a      	bgt.n	8009d5c <__ieee754_pow+0x20c>
 8009d46:	2f00      	cmp	r7, #0
 8009d48:	da84      	bge.n	8009c54 <__ieee754_pow+0x104>
 8009d4a:	a307      	add	r3, pc, #28	; (adr r3, 8009d68 <__ieee754_pow+0x218>)
 8009d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d50:	e795      	b.n	8009c7e <__ieee754_pow+0x12e>
 8009d52:	429c      	cmp	r4, r3
 8009d54:	dbf7      	blt.n	8009d46 <__ieee754_pow+0x1f6>
 8009d56:	4b09      	ldr	r3, [pc, #36]	; (8009d7c <__ieee754_pow+0x22c>)
 8009d58:	429c      	cmp	r4, r3
 8009d5a:	dd17      	ble.n	8009d8c <__ieee754_pow+0x23c>
 8009d5c:	2f00      	cmp	r7, #0
 8009d5e:	dcf4      	bgt.n	8009d4a <__ieee754_pow+0x1fa>
 8009d60:	e778      	b.n	8009c54 <__ieee754_pow+0x104>
 8009d62:	bf00      	nop
 8009d64:	f3af 8000 	nop.w
 8009d68:	8800759c 	.word	0x8800759c
 8009d6c:	7e37e43c 	.word	0x7e37e43c
 8009d70:	7ff00000 	.word	0x7ff00000
 8009d74:	0800b4c1 	.word	0x0800b4c1
 8009d78:	433fffff 	.word	0x433fffff
 8009d7c:	3ff00000 	.word	0x3ff00000
 8009d80:	3fefffff 	.word	0x3fefffff
 8009d84:	3fe00000 	.word	0x3fe00000
 8009d88:	41e00000 	.word	0x41e00000
 8009d8c:	4b64      	ldr	r3, [pc, #400]	; (8009f20 <__ieee754_pow+0x3d0>)
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f7f6 fa7a 	bl	8000288 <__aeabi_dsub>
 8009d94:	a356      	add	r3, pc, #344	; (adr r3, 8009ef0 <__ieee754_pow+0x3a0>)
 8009d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	460d      	mov	r5, r1
 8009d9e:	f7f6 fc2b 	bl	80005f8 <__aeabi_dmul>
 8009da2:	a355      	add	r3, pc, #340	; (adr r3, 8009ef8 <__ieee754_pow+0x3a8>)
 8009da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da8:	4606      	mov	r6, r0
 8009daa:	460f      	mov	r7, r1
 8009dac:	4620      	mov	r0, r4
 8009dae:	4629      	mov	r1, r5
 8009db0:	f7f6 fc22 	bl	80005f8 <__aeabi_dmul>
 8009db4:	4b5b      	ldr	r3, [pc, #364]	; (8009f24 <__ieee754_pow+0x3d4>)
 8009db6:	4682      	mov	sl, r0
 8009db8:	468b      	mov	fp, r1
 8009dba:	2200      	movs	r2, #0
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	4629      	mov	r1, r5
 8009dc0:	f7f6 fc1a 	bl	80005f8 <__aeabi_dmul>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	a14d      	add	r1, pc, #308	; (adr r1, 8009f00 <__ieee754_pow+0x3b0>)
 8009dca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dce:	f7f6 fa5b 	bl	8000288 <__aeabi_dsub>
 8009dd2:	4622      	mov	r2, r4
 8009dd4:	462b      	mov	r3, r5
 8009dd6:	f7f6 fc0f 	bl	80005f8 <__aeabi_dmul>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	460b      	mov	r3, r1
 8009dde:	2000      	movs	r0, #0
 8009de0:	4951      	ldr	r1, [pc, #324]	; (8009f28 <__ieee754_pow+0x3d8>)
 8009de2:	f7f6 fa51 	bl	8000288 <__aeabi_dsub>
 8009de6:	4622      	mov	r2, r4
 8009de8:	4680      	mov	r8, r0
 8009dea:	4689      	mov	r9, r1
 8009dec:	462b      	mov	r3, r5
 8009dee:	4620      	mov	r0, r4
 8009df0:	4629      	mov	r1, r5
 8009df2:	f7f6 fc01 	bl	80005f8 <__aeabi_dmul>
 8009df6:	4602      	mov	r2, r0
 8009df8:	460b      	mov	r3, r1
 8009dfa:	4640      	mov	r0, r8
 8009dfc:	4649      	mov	r1, r9
 8009dfe:	f7f6 fbfb 	bl	80005f8 <__aeabi_dmul>
 8009e02:	a341      	add	r3, pc, #260	; (adr r3, 8009f08 <__ieee754_pow+0x3b8>)
 8009e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e08:	f7f6 fbf6 	bl	80005f8 <__aeabi_dmul>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4650      	mov	r0, sl
 8009e12:	4659      	mov	r1, fp
 8009e14:	f7f6 fa38 	bl	8000288 <__aeabi_dsub>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	4680      	mov	r8, r0
 8009e1e:	4689      	mov	r9, r1
 8009e20:	4630      	mov	r0, r6
 8009e22:	4639      	mov	r1, r7
 8009e24:	f7f6 fa32 	bl	800028c <__adddf3>
 8009e28:	2400      	movs	r4, #0
 8009e2a:	4632      	mov	r2, r6
 8009e2c:	463b      	mov	r3, r7
 8009e2e:	4620      	mov	r0, r4
 8009e30:	460d      	mov	r5, r1
 8009e32:	f7f6 fa29 	bl	8000288 <__aeabi_dsub>
 8009e36:	4602      	mov	r2, r0
 8009e38:	460b      	mov	r3, r1
 8009e3a:	4640      	mov	r0, r8
 8009e3c:	4649      	mov	r1, r9
 8009e3e:	f7f6 fa23 	bl	8000288 <__aeabi_dsub>
 8009e42:	9b00      	ldr	r3, [sp, #0]
 8009e44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e46:	3b01      	subs	r3, #1
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	4682      	mov	sl, r0
 8009e4c:	468b      	mov	fp, r1
 8009e4e:	f040 81f1 	bne.w	800a234 <__ieee754_pow+0x6e4>
 8009e52:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009f10 <__ieee754_pow+0x3c0>
 8009e56:	eeb0 8a47 	vmov.f32	s16, s14
 8009e5a:	eef0 8a67 	vmov.f32	s17, s15
 8009e5e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e62:	2600      	movs	r6, #0
 8009e64:	4632      	mov	r2, r6
 8009e66:	463b      	mov	r3, r7
 8009e68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e6c:	f7f6 fa0c 	bl	8000288 <__aeabi_dsub>
 8009e70:	4622      	mov	r2, r4
 8009e72:	462b      	mov	r3, r5
 8009e74:	f7f6 fbc0 	bl	80005f8 <__aeabi_dmul>
 8009e78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e7c:	4680      	mov	r8, r0
 8009e7e:	4689      	mov	r9, r1
 8009e80:	4650      	mov	r0, sl
 8009e82:	4659      	mov	r1, fp
 8009e84:	f7f6 fbb8 	bl	80005f8 <__aeabi_dmul>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	4640      	mov	r0, r8
 8009e8e:	4649      	mov	r1, r9
 8009e90:	f7f6 f9fc 	bl	800028c <__adddf3>
 8009e94:	4632      	mov	r2, r6
 8009e96:	463b      	mov	r3, r7
 8009e98:	4680      	mov	r8, r0
 8009e9a:	4689      	mov	r9, r1
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	4629      	mov	r1, r5
 8009ea0:	f7f6 fbaa 	bl	80005f8 <__aeabi_dmul>
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	460d      	mov	r5, r1
 8009eaa:	4602      	mov	r2, r0
 8009eac:	4649      	mov	r1, r9
 8009eae:	4640      	mov	r0, r8
 8009eb0:	f7f6 f9ec 	bl	800028c <__adddf3>
 8009eb4:	4b1d      	ldr	r3, [pc, #116]	; (8009f2c <__ieee754_pow+0x3dc>)
 8009eb6:	4299      	cmp	r1, r3
 8009eb8:	ec45 4b19 	vmov	d9, r4, r5
 8009ebc:	4606      	mov	r6, r0
 8009ebe:	460f      	mov	r7, r1
 8009ec0:	468b      	mov	fp, r1
 8009ec2:	f340 82fe 	ble.w	800a4c2 <__ieee754_pow+0x972>
 8009ec6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009eca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009ece:	4303      	orrs	r3, r0
 8009ed0:	f000 81f0 	beq.w	800a2b4 <__ieee754_pow+0x764>
 8009ed4:	a310      	add	r3, pc, #64	; (adr r3, 8009f18 <__ieee754_pow+0x3c8>)
 8009ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eda:	ec51 0b18 	vmov	r0, r1, d8
 8009ede:	f7f6 fb8b 	bl	80005f8 <__aeabi_dmul>
 8009ee2:	a30d      	add	r3, pc, #52	; (adr r3, 8009f18 <__ieee754_pow+0x3c8>)
 8009ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee8:	e6cb      	b.n	8009c82 <__ieee754_pow+0x132>
 8009eea:	bf00      	nop
 8009eec:	f3af 8000 	nop.w
 8009ef0:	60000000 	.word	0x60000000
 8009ef4:	3ff71547 	.word	0x3ff71547
 8009ef8:	f85ddf44 	.word	0xf85ddf44
 8009efc:	3e54ae0b 	.word	0x3e54ae0b
 8009f00:	55555555 	.word	0x55555555
 8009f04:	3fd55555 	.word	0x3fd55555
 8009f08:	652b82fe 	.word	0x652b82fe
 8009f0c:	3ff71547 	.word	0x3ff71547
 8009f10:	00000000 	.word	0x00000000
 8009f14:	bff00000 	.word	0xbff00000
 8009f18:	8800759c 	.word	0x8800759c
 8009f1c:	7e37e43c 	.word	0x7e37e43c
 8009f20:	3ff00000 	.word	0x3ff00000
 8009f24:	3fd00000 	.word	0x3fd00000
 8009f28:	3fe00000 	.word	0x3fe00000
 8009f2c:	408fffff 	.word	0x408fffff
 8009f30:	4bd7      	ldr	r3, [pc, #860]	; (800a290 <__ieee754_pow+0x740>)
 8009f32:	ea03 0309 	and.w	r3, r3, r9
 8009f36:	2200      	movs	r2, #0
 8009f38:	b92b      	cbnz	r3, 8009f46 <__ieee754_pow+0x3f6>
 8009f3a:	4bd6      	ldr	r3, [pc, #856]	; (800a294 <__ieee754_pow+0x744>)
 8009f3c:	f7f6 fb5c 	bl	80005f8 <__aeabi_dmul>
 8009f40:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009f44:	460c      	mov	r4, r1
 8009f46:	1523      	asrs	r3, r4, #20
 8009f48:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009f4c:	4413      	add	r3, r2
 8009f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f50:	4bd1      	ldr	r3, [pc, #836]	; (800a298 <__ieee754_pow+0x748>)
 8009f52:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009f56:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009f5a:	429c      	cmp	r4, r3
 8009f5c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009f60:	dd08      	ble.n	8009f74 <__ieee754_pow+0x424>
 8009f62:	4bce      	ldr	r3, [pc, #824]	; (800a29c <__ieee754_pow+0x74c>)
 8009f64:	429c      	cmp	r4, r3
 8009f66:	f340 8163 	ble.w	800a230 <__ieee754_pow+0x6e0>
 8009f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f70:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009f74:	2400      	movs	r4, #0
 8009f76:	00e3      	lsls	r3, r4, #3
 8009f78:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f7a:	4bc9      	ldr	r3, [pc, #804]	; (800a2a0 <__ieee754_pow+0x750>)
 8009f7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009f80:	ed93 7b00 	vldr	d7, [r3]
 8009f84:	4629      	mov	r1, r5
 8009f86:	ec53 2b17 	vmov	r2, r3, d7
 8009f8a:	eeb0 8a47 	vmov.f32	s16, s14
 8009f8e:	eef0 8a67 	vmov.f32	s17, s15
 8009f92:	4682      	mov	sl, r0
 8009f94:	f7f6 f978 	bl	8000288 <__aeabi_dsub>
 8009f98:	4652      	mov	r2, sl
 8009f9a:	4606      	mov	r6, r0
 8009f9c:	460f      	mov	r7, r1
 8009f9e:	462b      	mov	r3, r5
 8009fa0:	ec51 0b18 	vmov	r0, r1, d8
 8009fa4:	f7f6 f972 	bl	800028c <__adddf3>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	460b      	mov	r3, r1
 8009fac:	2000      	movs	r0, #0
 8009fae:	49bd      	ldr	r1, [pc, #756]	; (800a2a4 <__ieee754_pow+0x754>)
 8009fb0:	f7f6 fc4c 	bl	800084c <__aeabi_ddiv>
 8009fb4:	ec41 0b19 	vmov	d9, r0, r1
 8009fb8:	4602      	mov	r2, r0
 8009fba:	460b      	mov	r3, r1
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	4639      	mov	r1, r7
 8009fc0:	f7f6 fb1a 	bl	80005f8 <__aeabi_dmul>
 8009fc4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009fc8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fcc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	9304      	str	r3, [sp, #16]
 8009fd4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009fd8:	46ab      	mov	fp, r5
 8009fda:	106d      	asrs	r5, r5, #1
 8009fdc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009fe0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009fe4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009fe8:	2200      	movs	r2, #0
 8009fea:	4640      	mov	r0, r8
 8009fec:	4649      	mov	r1, r9
 8009fee:	4614      	mov	r4, r2
 8009ff0:	461d      	mov	r5, r3
 8009ff2:	f7f6 fb01 	bl	80005f8 <__aeabi_dmul>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	4639      	mov	r1, r7
 8009ffe:	f7f6 f943 	bl	8000288 <__aeabi_dsub>
 800a002:	ec53 2b18 	vmov	r2, r3, d8
 800a006:	4606      	mov	r6, r0
 800a008:	460f      	mov	r7, r1
 800a00a:	4620      	mov	r0, r4
 800a00c:	4629      	mov	r1, r5
 800a00e:	f7f6 f93b 	bl	8000288 <__aeabi_dsub>
 800a012:	4602      	mov	r2, r0
 800a014:	460b      	mov	r3, r1
 800a016:	4650      	mov	r0, sl
 800a018:	4659      	mov	r1, fp
 800a01a:	f7f6 f935 	bl	8000288 <__aeabi_dsub>
 800a01e:	4642      	mov	r2, r8
 800a020:	464b      	mov	r3, r9
 800a022:	f7f6 fae9 	bl	80005f8 <__aeabi_dmul>
 800a026:	4602      	mov	r2, r0
 800a028:	460b      	mov	r3, r1
 800a02a:	4630      	mov	r0, r6
 800a02c:	4639      	mov	r1, r7
 800a02e:	f7f6 f92b 	bl	8000288 <__aeabi_dsub>
 800a032:	ec53 2b19 	vmov	r2, r3, d9
 800a036:	f7f6 fadf 	bl	80005f8 <__aeabi_dmul>
 800a03a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a03e:	ec41 0b18 	vmov	d8, r0, r1
 800a042:	4610      	mov	r0, r2
 800a044:	4619      	mov	r1, r3
 800a046:	f7f6 fad7 	bl	80005f8 <__aeabi_dmul>
 800a04a:	a37d      	add	r3, pc, #500	; (adr r3, 800a240 <__ieee754_pow+0x6f0>)
 800a04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a050:	4604      	mov	r4, r0
 800a052:	460d      	mov	r5, r1
 800a054:	f7f6 fad0 	bl	80005f8 <__aeabi_dmul>
 800a058:	a37b      	add	r3, pc, #492	; (adr r3, 800a248 <__ieee754_pow+0x6f8>)
 800a05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05e:	f7f6 f915 	bl	800028c <__adddf3>
 800a062:	4622      	mov	r2, r4
 800a064:	462b      	mov	r3, r5
 800a066:	f7f6 fac7 	bl	80005f8 <__aeabi_dmul>
 800a06a:	a379      	add	r3, pc, #484	; (adr r3, 800a250 <__ieee754_pow+0x700>)
 800a06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a070:	f7f6 f90c 	bl	800028c <__adddf3>
 800a074:	4622      	mov	r2, r4
 800a076:	462b      	mov	r3, r5
 800a078:	f7f6 fabe 	bl	80005f8 <__aeabi_dmul>
 800a07c:	a376      	add	r3, pc, #472	; (adr r3, 800a258 <__ieee754_pow+0x708>)
 800a07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a082:	f7f6 f903 	bl	800028c <__adddf3>
 800a086:	4622      	mov	r2, r4
 800a088:	462b      	mov	r3, r5
 800a08a:	f7f6 fab5 	bl	80005f8 <__aeabi_dmul>
 800a08e:	a374      	add	r3, pc, #464	; (adr r3, 800a260 <__ieee754_pow+0x710>)
 800a090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a094:	f7f6 f8fa 	bl	800028c <__adddf3>
 800a098:	4622      	mov	r2, r4
 800a09a:	462b      	mov	r3, r5
 800a09c:	f7f6 faac 	bl	80005f8 <__aeabi_dmul>
 800a0a0:	a371      	add	r3, pc, #452	; (adr r3, 800a268 <__ieee754_pow+0x718>)
 800a0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a6:	f7f6 f8f1 	bl	800028c <__adddf3>
 800a0aa:	4622      	mov	r2, r4
 800a0ac:	4606      	mov	r6, r0
 800a0ae:	460f      	mov	r7, r1
 800a0b0:	462b      	mov	r3, r5
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	4629      	mov	r1, r5
 800a0b6:	f7f6 fa9f 	bl	80005f8 <__aeabi_dmul>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	460b      	mov	r3, r1
 800a0be:	4630      	mov	r0, r6
 800a0c0:	4639      	mov	r1, r7
 800a0c2:	f7f6 fa99 	bl	80005f8 <__aeabi_dmul>
 800a0c6:	4642      	mov	r2, r8
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	460d      	mov	r5, r1
 800a0cc:	464b      	mov	r3, r9
 800a0ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0d2:	f7f6 f8db 	bl	800028c <__adddf3>
 800a0d6:	ec53 2b18 	vmov	r2, r3, d8
 800a0da:	f7f6 fa8d 	bl	80005f8 <__aeabi_dmul>
 800a0de:	4622      	mov	r2, r4
 800a0e0:	462b      	mov	r3, r5
 800a0e2:	f7f6 f8d3 	bl	800028c <__adddf3>
 800a0e6:	4642      	mov	r2, r8
 800a0e8:	4682      	mov	sl, r0
 800a0ea:	468b      	mov	fp, r1
 800a0ec:	464b      	mov	r3, r9
 800a0ee:	4640      	mov	r0, r8
 800a0f0:	4649      	mov	r1, r9
 800a0f2:	f7f6 fa81 	bl	80005f8 <__aeabi_dmul>
 800a0f6:	4b6c      	ldr	r3, [pc, #432]	; (800a2a8 <__ieee754_pow+0x758>)
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	4606      	mov	r6, r0
 800a0fc:	460f      	mov	r7, r1
 800a0fe:	f7f6 f8c5 	bl	800028c <__adddf3>
 800a102:	4652      	mov	r2, sl
 800a104:	465b      	mov	r3, fp
 800a106:	f7f6 f8c1 	bl	800028c <__adddf3>
 800a10a:	9c04      	ldr	r4, [sp, #16]
 800a10c:	460d      	mov	r5, r1
 800a10e:	4622      	mov	r2, r4
 800a110:	460b      	mov	r3, r1
 800a112:	4640      	mov	r0, r8
 800a114:	4649      	mov	r1, r9
 800a116:	f7f6 fa6f 	bl	80005f8 <__aeabi_dmul>
 800a11a:	4b63      	ldr	r3, [pc, #396]	; (800a2a8 <__ieee754_pow+0x758>)
 800a11c:	4680      	mov	r8, r0
 800a11e:	4689      	mov	r9, r1
 800a120:	2200      	movs	r2, #0
 800a122:	4620      	mov	r0, r4
 800a124:	4629      	mov	r1, r5
 800a126:	f7f6 f8af 	bl	8000288 <__aeabi_dsub>
 800a12a:	4632      	mov	r2, r6
 800a12c:	463b      	mov	r3, r7
 800a12e:	f7f6 f8ab 	bl	8000288 <__aeabi_dsub>
 800a132:	4602      	mov	r2, r0
 800a134:	460b      	mov	r3, r1
 800a136:	4650      	mov	r0, sl
 800a138:	4659      	mov	r1, fp
 800a13a:	f7f6 f8a5 	bl	8000288 <__aeabi_dsub>
 800a13e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a142:	f7f6 fa59 	bl	80005f8 <__aeabi_dmul>
 800a146:	4622      	mov	r2, r4
 800a148:	4606      	mov	r6, r0
 800a14a:	460f      	mov	r7, r1
 800a14c:	462b      	mov	r3, r5
 800a14e:	ec51 0b18 	vmov	r0, r1, d8
 800a152:	f7f6 fa51 	bl	80005f8 <__aeabi_dmul>
 800a156:	4602      	mov	r2, r0
 800a158:	460b      	mov	r3, r1
 800a15a:	4630      	mov	r0, r6
 800a15c:	4639      	mov	r1, r7
 800a15e:	f7f6 f895 	bl	800028c <__adddf3>
 800a162:	4606      	mov	r6, r0
 800a164:	460f      	mov	r7, r1
 800a166:	4602      	mov	r2, r0
 800a168:	460b      	mov	r3, r1
 800a16a:	4640      	mov	r0, r8
 800a16c:	4649      	mov	r1, r9
 800a16e:	f7f6 f88d 	bl	800028c <__adddf3>
 800a172:	9c04      	ldr	r4, [sp, #16]
 800a174:	a33e      	add	r3, pc, #248	; (adr r3, 800a270 <__ieee754_pow+0x720>)
 800a176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17a:	4620      	mov	r0, r4
 800a17c:	460d      	mov	r5, r1
 800a17e:	f7f6 fa3b 	bl	80005f8 <__aeabi_dmul>
 800a182:	4642      	mov	r2, r8
 800a184:	ec41 0b18 	vmov	d8, r0, r1
 800a188:	464b      	mov	r3, r9
 800a18a:	4620      	mov	r0, r4
 800a18c:	4629      	mov	r1, r5
 800a18e:	f7f6 f87b 	bl	8000288 <__aeabi_dsub>
 800a192:	4602      	mov	r2, r0
 800a194:	460b      	mov	r3, r1
 800a196:	4630      	mov	r0, r6
 800a198:	4639      	mov	r1, r7
 800a19a:	f7f6 f875 	bl	8000288 <__aeabi_dsub>
 800a19e:	a336      	add	r3, pc, #216	; (adr r3, 800a278 <__ieee754_pow+0x728>)
 800a1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a4:	f7f6 fa28 	bl	80005f8 <__aeabi_dmul>
 800a1a8:	a335      	add	r3, pc, #212	; (adr r3, 800a280 <__ieee754_pow+0x730>)
 800a1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ae:	4606      	mov	r6, r0
 800a1b0:	460f      	mov	r7, r1
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	4629      	mov	r1, r5
 800a1b6:	f7f6 fa1f 	bl	80005f8 <__aeabi_dmul>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	460b      	mov	r3, r1
 800a1be:	4630      	mov	r0, r6
 800a1c0:	4639      	mov	r1, r7
 800a1c2:	f7f6 f863 	bl	800028c <__adddf3>
 800a1c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1c8:	4b38      	ldr	r3, [pc, #224]	; (800a2ac <__ieee754_pow+0x75c>)
 800a1ca:	4413      	add	r3, r2
 800a1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d0:	f7f6 f85c 	bl	800028c <__adddf3>
 800a1d4:	4682      	mov	sl, r0
 800a1d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1d8:	468b      	mov	fp, r1
 800a1da:	f7f6 f9a3 	bl	8000524 <__aeabi_i2d>
 800a1de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1e0:	4b33      	ldr	r3, [pc, #204]	; (800a2b0 <__ieee754_pow+0x760>)
 800a1e2:	4413      	add	r3, r2
 800a1e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a1e8:	4606      	mov	r6, r0
 800a1ea:	460f      	mov	r7, r1
 800a1ec:	4652      	mov	r2, sl
 800a1ee:	465b      	mov	r3, fp
 800a1f0:	ec51 0b18 	vmov	r0, r1, d8
 800a1f4:	f7f6 f84a 	bl	800028c <__adddf3>
 800a1f8:	4642      	mov	r2, r8
 800a1fa:	464b      	mov	r3, r9
 800a1fc:	f7f6 f846 	bl	800028c <__adddf3>
 800a200:	4632      	mov	r2, r6
 800a202:	463b      	mov	r3, r7
 800a204:	f7f6 f842 	bl	800028c <__adddf3>
 800a208:	9c04      	ldr	r4, [sp, #16]
 800a20a:	4632      	mov	r2, r6
 800a20c:	463b      	mov	r3, r7
 800a20e:	4620      	mov	r0, r4
 800a210:	460d      	mov	r5, r1
 800a212:	f7f6 f839 	bl	8000288 <__aeabi_dsub>
 800a216:	4642      	mov	r2, r8
 800a218:	464b      	mov	r3, r9
 800a21a:	f7f6 f835 	bl	8000288 <__aeabi_dsub>
 800a21e:	ec53 2b18 	vmov	r2, r3, d8
 800a222:	f7f6 f831 	bl	8000288 <__aeabi_dsub>
 800a226:	4602      	mov	r2, r0
 800a228:	460b      	mov	r3, r1
 800a22a:	4650      	mov	r0, sl
 800a22c:	4659      	mov	r1, fp
 800a22e:	e606      	b.n	8009e3e <__ieee754_pow+0x2ee>
 800a230:	2401      	movs	r4, #1
 800a232:	e6a0      	b.n	8009f76 <__ieee754_pow+0x426>
 800a234:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a288 <__ieee754_pow+0x738>
 800a238:	e60d      	b.n	8009e56 <__ieee754_pow+0x306>
 800a23a:	bf00      	nop
 800a23c:	f3af 8000 	nop.w
 800a240:	4a454eef 	.word	0x4a454eef
 800a244:	3fca7e28 	.word	0x3fca7e28
 800a248:	93c9db65 	.word	0x93c9db65
 800a24c:	3fcd864a 	.word	0x3fcd864a
 800a250:	a91d4101 	.word	0xa91d4101
 800a254:	3fd17460 	.word	0x3fd17460
 800a258:	518f264d 	.word	0x518f264d
 800a25c:	3fd55555 	.word	0x3fd55555
 800a260:	db6fabff 	.word	0xdb6fabff
 800a264:	3fdb6db6 	.word	0x3fdb6db6
 800a268:	33333303 	.word	0x33333303
 800a26c:	3fe33333 	.word	0x3fe33333
 800a270:	e0000000 	.word	0xe0000000
 800a274:	3feec709 	.word	0x3feec709
 800a278:	dc3a03fd 	.word	0xdc3a03fd
 800a27c:	3feec709 	.word	0x3feec709
 800a280:	145b01f5 	.word	0x145b01f5
 800a284:	be3e2fe0 	.word	0xbe3e2fe0
 800a288:	00000000 	.word	0x00000000
 800a28c:	3ff00000 	.word	0x3ff00000
 800a290:	7ff00000 	.word	0x7ff00000
 800a294:	43400000 	.word	0x43400000
 800a298:	0003988e 	.word	0x0003988e
 800a29c:	000bb679 	.word	0x000bb679
 800a2a0:	0800b4f0 	.word	0x0800b4f0
 800a2a4:	3ff00000 	.word	0x3ff00000
 800a2a8:	40080000 	.word	0x40080000
 800a2ac:	0800b510 	.word	0x0800b510
 800a2b0:	0800b500 	.word	0x0800b500
 800a2b4:	a3b5      	add	r3, pc, #724	; (adr r3, 800a58c <__ieee754_pow+0xa3c>)
 800a2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ba:	4640      	mov	r0, r8
 800a2bc:	4649      	mov	r1, r9
 800a2be:	f7f5 ffe5 	bl	800028c <__adddf3>
 800a2c2:	4622      	mov	r2, r4
 800a2c4:	ec41 0b1a 	vmov	d10, r0, r1
 800a2c8:	462b      	mov	r3, r5
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	4639      	mov	r1, r7
 800a2ce:	f7f5 ffdb 	bl	8000288 <__aeabi_dsub>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	ec51 0b1a 	vmov	r0, r1, d10
 800a2da:	f7f6 fc1d 	bl	8000b18 <__aeabi_dcmpgt>
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	f47f adf8 	bne.w	8009ed4 <__ieee754_pow+0x384>
 800a2e4:	4aa4      	ldr	r2, [pc, #656]	; (800a578 <__ieee754_pow+0xa28>)
 800a2e6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	f340 810b 	ble.w	800a506 <__ieee754_pow+0x9b6>
 800a2f0:	151b      	asrs	r3, r3, #20
 800a2f2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a2f6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a2fa:	fa4a f303 	asr.w	r3, sl, r3
 800a2fe:	445b      	add	r3, fp
 800a300:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a304:	4e9d      	ldr	r6, [pc, #628]	; (800a57c <__ieee754_pow+0xa2c>)
 800a306:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a30a:	4116      	asrs	r6, r2
 800a30c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a310:	2000      	movs	r0, #0
 800a312:	ea23 0106 	bic.w	r1, r3, r6
 800a316:	f1c2 0214 	rsb	r2, r2, #20
 800a31a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a31e:	fa4a fa02 	asr.w	sl, sl, r2
 800a322:	f1bb 0f00 	cmp.w	fp, #0
 800a326:	4602      	mov	r2, r0
 800a328:	460b      	mov	r3, r1
 800a32a:	4620      	mov	r0, r4
 800a32c:	4629      	mov	r1, r5
 800a32e:	bfb8      	it	lt
 800a330:	f1ca 0a00 	rsblt	sl, sl, #0
 800a334:	f7f5 ffa8 	bl	8000288 <__aeabi_dsub>
 800a338:	ec41 0b19 	vmov	d9, r0, r1
 800a33c:	4642      	mov	r2, r8
 800a33e:	464b      	mov	r3, r9
 800a340:	ec51 0b19 	vmov	r0, r1, d9
 800a344:	f7f5 ffa2 	bl	800028c <__adddf3>
 800a348:	2400      	movs	r4, #0
 800a34a:	a379      	add	r3, pc, #484	; (adr r3, 800a530 <__ieee754_pow+0x9e0>)
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	4620      	mov	r0, r4
 800a352:	460d      	mov	r5, r1
 800a354:	f7f6 f950 	bl	80005f8 <__aeabi_dmul>
 800a358:	ec53 2b19 	vmov	r2, r3, d9
 800a35c:	4606      	mov	r6, r0
 800a35e:	460f      	mov	r7, r1
 800a360:	4620      	mov	r0, r4
 800a362:	4629      	mov	r1, r5
 800a364:	f7f5 ff90 	bl	8000288 <__aeabi_dsub>
 800a368:	4602      	mov	r2, r0
 800a36a:	460b      	mov	r3, r1
 800a36c:	4640      	mov	r0, r8
 800a36e:	4649      	mov	r1, r9
 800a370:	f7f5 ff8a 	bl	8000288 <__aeabi_dsub>
 800a374:	a370      	add	r3, pc, #448	; (adr r3, 800a538 <__ieee754_pow+0x9e8>)
 800a376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37a:	f7f6 f93d 	bl	80005f8 <__aeabi_dmul>
 800a37e:	a370      	add	r3, pc, #448	; (adr r3, 800a540 <__ieee754_pow+0x9f0>)
 800a380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a384:	4680      	mov	r8, r0
 800a386:	4689      	mov	r9, r1
 800a388:	4620      	mov	r0, r4
 800a38a:	4629      	mov	r1, r5
 800a38c:	f7f6 f934 	bl	80005f8 <__aeabi_dmul>
 800a390:	4602      	mov	r2, r0
 800a392:	460b      	mov	r3, r1
 800a394:	4640      	mov	r0, r8
 800a396:	4649      	mov	r1, r9
 800a398:	f7f5 ff78 	bl	800028c <__adddf3>
 800a39c:	4604      	mov	r4, r0
 800a39e:	460d      	mov	r5, r1
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	4639      	mov	r1, r7
 800a3a8:	f7f5 ff70 	bl	800028c <__adddf3>
 800a3ac:	4632      	mov	r2, r6
 800a3ae:	463b      	mov	r3, r7
 800a3b0:	4680      	mov	r8, r0
 800a3b2:	4689      	mov	r9, r1
 800a3b4:	f7f5 ff68 	bl	8000288 <__aeabi_dsub>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	4620      	mov	r0, r4
 800a3be:	4629      	mov	r1, r5
 800a3c0:	f7f5 ff62 	bl	8000288 <__aeabi_dsub>
 800a3c4:	4642      	mov	r2, r8
 800a3c6:	4606      	mov	r6, r0
 800a3c8:	460f      	mov	r7, r1
 800a3ca:	464b      	mov	r3, r9
 800a3cc:	4640      	mov	r0, r8
 800a3ce:	4649      	mov	r1, r9
 800a3d0:	f7f6 f912 	bl	80005f8 <__aeabi_dmul>
 800a3d4:	a35c      	add	r3, pc, #368	; (adr r3, 800a548 <__ieee754_pow+0x9f8>)
 800a3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3da:	4604      	mov	r4, r0
 800a3dc:	460d      	mov	r5, r1
 800a3de:	f7f6 f90b 	bl	80005f8 <__aeabi_dmul>
 800a3e2:	a35b      	add	r3, pc, #364	; (adr r3, 800a550 <__ieee754_pow+0xa00>)
 800a3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e8:	f7f5 ff4e 	bl	8000288 <__aeabi_dsub>
 800a3ec:	4622      	mov	r2, r4
 800a3ee:	462b      	mov	r3, r5
 800a3f0:	f7f6 f902 	bl	80005f8 <__aeabi_dmul>
 800a3f4:	a358      	add	r3, pc, #352	; (adr r3, 800a558 <__ieee754_pow+0xa08>)
 800a3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fa:	f7f5 ff47 	bl	800028c <__adddf3>
 800a3fe:	4622      	mov	r2, r4
 800a400:	462b      	mov	r3, r5
 800a402:	f7f6 f8f9 	bl	80005f8 <__aeabi_dmul>
 800a406:	a356      	add	r3, pc, #344	; (adr r3, 800a560 <__ieee754_pow+0xa10>)
 800a408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40c:	f7f5 ff3c 	bl	8000288 <__aeabi_dsub>
 800a410:	4622      	mov	r2, r4
 800a412:	462b      	mov	r3, r5
 800a414:	f7f6 f8f0 	bl	80005f8 <__aeabi_dmul>
 800a418:	a353      	add	r3, pc, #332	; (adr r3, 800a568 <__ieee754_pow+0xa18>)
 800a41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41e:	f7f5 ff35 	bl	800028c <__adddf3>
 800a422:	4622      	mov	r2, r4
 800a424:	462b      	mov	r3, r5
 800a426:	f7f6 f8e7 	bl	80005f8 <__aeabi_dmul>
 800a42a:	4602      	mov	r2, r0
 800a42c:	460b      	mov	r3, r1
 800a42e:	4640      	mov	r0, r8
 800a430:	4649      	mov	r1, r9
 800a432:	f7f5 ff29 	bl	8000288 <__aeabi_dsub>
 800a436:	4604      	mov	r4, r0
 800a438:	460d      	mov	r5, r1
 800a43a:	4602      	mov	r2, r0
 800a43c:	460b      	mov	r3, r1
 800a43e:	4640      	mov	r0, r8
 800a440:	4649      	mov	r1, r9
 800a442:	f7f6 f8d9 	bl	80005f8 <__aeabi_dmul>
 800a446:	2200      	movs	r2, #0
 800a448:	ec41 0b19 	vmov	d9, r0, r1
 800a44c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a450:	4620      	mov	r0, r4
 800a452:	4629      	mov	r1, r5
 800a454:	f7f5 ff18 	bl	8000288 <__aeabi_dsub>
 800a458:	4602      	mov	r2, r0
 800a45a:	460b      	mov	r3, r1
 800a45c:	ec51 0b19 	vmov	r0, r1, d9
 800a460:	f7f6 f9f4 	bl	800084c <__aeabi_ddiv>
 800a464:	4632      	mov	r2, r6
 800a466:	4604      	mov	r4, r0
 800a468:	460d      	mov	r5, r1
 800a46a:	463b      	mov	r3, r7
 800a46c:	4640      	mov	r0, r8
 800a46e:	4649      	mov	r1, r9
 800a470:	f7f6 f8c2 	bl	80005f8 <__aeabi_dmul>
 800a474:	4632      	mov	r2, r6
 800a476:	463b      	mov	r3, r7
 800a478:	f7f5 ff08 	bl	800028c <__adddf3>
 800a47c:	4602      	mov	r2, r0
 800a47e:	460b      	mov	r3, r1
 800a480:	4620      	mov	r0, r4
 800a482:	4629      	mov	r1, r5
 800a484:	f7f5 ff00 	bl	8000288 <__aeabi_dsub>
 800a488:	4642      	mov	r2, r8
 800a48a:	464b      	mov	r3, r9
 800a48c:	f7f5 fefc 	bl	8000288 <__aeabi_dsub>
 800a490:	460b      	mov	r3, r1
 800a492:	4602      	mov	r2, r0
 800a494:	493a      	ldr	r1, [pc, #232]	; (800a580 <__ieee754_pow+0xa30>)
 800a496:	2000      	movs	r0, #0
 800a498:	f7f5 fef6 	bl	8000288 <__aeabi_dsub>
 800a49c:	e9cd 0100 	strd	r0, r1, [sp]
 800a4a0:	9b01      	ldr	r3, [sp, #4]
 800a4a2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a4a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4aa:	da2f      	bge.n	800a50c <__ieee754_pow+0x9bc>
 800a4ac:	4650      	mov	r0, sl
 800a4ae:	ed9d 0b00 	vldr	d0, [sp]
 800a4b2:	f000 f9cd 	bl	800a850 <scalbn>
 800a4b6:	ec51 0b10 	vmov	r0, r1, d0
 800a4ba:	ec53 2b18 	vmov	r2, r3, d8
 800a4be:	f7ff bbe0 	b.w	8009c82 <__ieee754_pow+0x132>
 800a4c2:	4b30      	ldr	r3, [pc, #192]	; (800a584 <__ieee754_pow+0xa34>)
 800a4c4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a4c8:	429e      	cmp	r6, r3
 800a4ca:	f77f af0b 	ble.w	800a2e4 <__ieee754_pow+0x794>
 800a4ce:	4b2e      	ldr	r3, [pc, #184]	; (800a588 <__ieee754_pow+0xa38>)
 800a4d0:	440b      	add	r3, r1
 800a4d2:	4303      	orrs	r3, r0
 800a4d4:	d00b      	beq.n	800a4ee <__ieee754_pow+0x99e>
 800a4d6:	a326      	add	r3, pc, #152	; (adr r3, 800a570 <__ieee754_pow+0xa20>)
 800a4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4dc:	ec51 0b18 	vmov	r0, r1, d8
 800a4e0:	f7f6 f88a 	bl	80005f8 <__aeabi_dmul>
 800a4e4:	a322      	add	r3, pc, #136	; (adr r3, 800a570 <__ieee754_pow+0xa20>)
 800a4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ea:	f7ff bbca 	b.w	8009c82 <__ieee754_pow+0x132>
 800a4ee:	4622      	mov	r2, r4
 800a4f0:	462b      	mov	r3, r5
 800a4f2:	f7f5 fec9 	bl	8000288 <__aeabi_dsub>
 800a4f6:	4642      	mov	r2, r8
 800a4f8:	464b      	mov	r3, r9
 800a4fa:	f7f6 fb03 	bl	8000b04 <__aeabi_dcmpge>
 800a4fe:	2800      	cmp	r0, #0
 800a500:	f43f aef0 	beq.w	800a2e4 <__ieee754_pow+0x794>
 800a504:	e7e7      	b.n	800a4d6 <__ieee754_pow+0x986>
 800a506:	f04f 0a00 	mov.w	sl, #0
 800a50a:	e717      	b.n	800a33c <__ieee754_pow+0x7ec>
 800a50c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a510:	4619      	mov	r1, r3
 800a512:	e7d2      	b.n	800a4ba <__ieee754_pow+0x96a>
 800a514:	491a      	ldr	r1, [pc, #104]	; (800a580 <__ieee754_pow+0xa30>)
 800a516:	2000      	movs	r0, #0
 800a518:	f7ff bb9e 	b.w	8009c58 <__ieee754_pow+0x108>
 800a51c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a520:	f7ff bb9a 	b.w	8009c58 <__ieee754_pow+0x108>
 800a524:	9000      	str	r0, [sp, #0]
 800a526:	f7ff bb76 	b.w	8009c16 <__ieee754_pow+0xc6>
 800a52a:	2100      	movs	r1, #0
 800a52c:	f7ff bb60 	b.w	8009bf0 <__ieee754_pow+0xa0>
 800a530:	00000000 	.word	0x00000000
 800a534:	3fe62e43 	.word	0x3fe62e43
 800a538:	fefa39ef 	.word	0xfefa39ef
 800a53c:	3fe62e42 	.word	0x3fe62e42
 800a540:	0ca86c39 	.word	0x0ca86c39
 800a544:	be205c61 	.word	0xbe205c61
 800a548:	72bea4d0 	.word	0x72bea4d0
 800a54c:	3e663769 	.word	0x3e663769
 800a550:	c5d26bf1 	.word	0xc5d26bf1
 800a554:	3ebbbd41 	.word	0x3ebbbd41
 800a558:	af25de2c 	.word	0xaf25de2c
 800a55c:	3f11566a 	.word	0x3f11566a
 800a560:	16bebd93 	.word	0x16bebd93
 800a564:	3f66c16c 	.word	0x3f66c16c
 800a568:	5555553e 	.word	0x5555553e
 800a56c:	3fc55555 	.word	0x3fc55555
 800a570:	c2f8f359 	.word	0xc2f8f359
 800a574:	01a56e1f 	.word	0x01a56e1f
 800a578:	3fe00000 	.word	0x3fe00000
 800a57c:	000fffff 	.word	0x000fffff
 800a580:	3ff00000 	.word	0x3ff00000
 800a584:	4090cbff 	.word	0x4090cbff
 800a588:	3f6f3400 	.word	0x3f6f3400
 800a58c:	652b82fe 	.word	0x652b82fe
 800a590:	3c971547 	.word	0x3c971547

0800a594 <__ieee754_sqrt>:
 800a594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a598:	ec55 4b10 	vmov	r4, r5, d0
 800a59c:	4e56      	ldr	r6, [pc, #344]	; (800a6f8 <__ieee754_sqrt+0x164>)
 800a59e:	43ae      	bics	r6, r5
 800a5a0:	ee10 0a10 	vmov	r0, s0
 800a5a4:	ee10 3a10 	vmov	r3, s0
 800a5a8:	4629      	mov	r1, r5
 800a5aa:	462a      	mov	r2, r5
 800a5ac:	d110      	bne.n	800a5d0 <__ieee754_sqrt+0x3c>
 800a5ae:	ee10 2a10 	vmov	r2, s0
 800a5b2:	462b      	mov	r3, r5
 800a5b4:	f7f6 f820 	bl	80005f8 <__aeabi_dmul>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	4620      	mov	r0, r4
 800a5be:	4629      	mov	r1, r5
 800a5c0:	f7f5 fe64 	bl	800028c <__adddf3>
 800a5c4:	4604      	mov	r4, r0
 800a5c6:	460d      	mov	r5, r1
 800a5c8:	ec45 4b10 	vmov	d0, r4, r5
 800a5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5d0:	2d00      	cmp	r5, #0
 800a5d2:	dc10      	bgt.n	800a5f6 <__ieee754_sqrt+0x62>
 800a5d4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a5d8:	4330      	orrs	r0, r6
 800a5da:	d0f5      	beq.n	800a5c8 <__ieee754_sqrt+0x34>
 800a5dc:	b15d      	cbz	r5, 800a5f6 <__ieee754_sqrt+0x62>
 800a5de:	ee10 2a10 	vmov	r2, s0
 800a5e2:	462b      	mov	r3, r5
 800a5e4:	ee10 0a10 	vmov	r0, s0
 800a5e8:	f7f5 fe4e 	bl	8000288 <__aeabi_dsub>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	f7f6 f92c 	bl	800084c <__aeabi_ddiv>
 800a5f4:	e7e6      	b.n	800a5c4 <__ieee754_sqrt+0x30>
 800a5f6:	1509      	asrs	r1, r1, #20
 800a5f8:	d076      	beq.n	800a6e8 <__ieee754_sqrt+0x154>
 800a5fa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a5fe:	07ce      	lsls	r6, r1, #31
 800a600:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a604:	bf5e      	ittt	pl
 800a606:	0fda      	lsrpl	r2, r3, #31
 800a608:	005b      	lslpl	r3, r3, #1
 800a60a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a60e:	0fda      	lsrs	r2, r3, #31
 800a610:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a614:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a618:	2000      	movs	r0, #0
 800a61a:	106d      	asrs	r5, r5, #1
 800a61c:	005b      	lsls	r3, r3, #1
 800a61e:	f04f 0e16 	mov.w	lr, #22
 800a622:	4684      	mov	ip, r0
 800a624:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a628:	eb0c 0401 	add.w	r4, ip, r1
 800a62c:	4294      	cmp	r4, r2
 800a62e:	bfde      	ittt	le
 800a630:	1b12      	suble	r2, r2, r4
 800a632:	eb04 0c01 	addle.w	ip, r4, r1
 800a636:	1840      	addle	r0, r0, r1
 800a638:	0052      	lsls	r2, r2, #1
 800a63a:	f1be 0e01 	subs.w	lr, lr, #1
 800a63e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a642:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a646:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a64a:	d1ed      	bne.n	800a628 <__ieee754_sqrt+0x94>
 800a64c:	4671      	mov	r1, lr
 800a64e:	2720      	movs	r7, #32
 800a650:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a654:	4562      	cmp	r2, ip
 800a656:	eb04 060e 	add.w	r6, r4, lr
 800a65a:	dc02      	bgt.n	800a662 <__ieee754_sqrt+0xce>
 800a65c:	d113      	bne.n	800a686 <__ieee754_sqrt+0xf2>
 800a65e:	429e      	cmp	r6, r3
 800a660:	d811      	bhi.n	800a686 <__ieee754_sqrt+0xf2>
 800a662:	2e00      	cmp	r6, #0
 800a664:	eb06 0e04 	add.w	lr, r6, r4
 800a668:	da43      	bge.n	800a6f2 <__ieee754_sqrt+0x15e>
 800a66a:	f1be 0f00 	cmp.w	lr, #0
 800a66e:	db40      	blt.n	800a6f2 <__ieee754_sqrt+0x15e>
 800a670:	f10c 0801 	add.w	r8, ip, #1
 800a674:	eba2 020c 	sub.w	r2, r2, ip
 800a678:	429e      	cmp	r6, r3
 800a67a:	bf88      	it	hi
 800a67c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a680:	1b9b      	subs	r3, r3, r6
 800a682:	4421      	add	r1, r4
 800a684:	46c4      	mov	ip, r8
 800a686:	0052      	lsls	r2, r2, #1
 800a688:	3f01      	subs	r7, #1
 800a68a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a68e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a692:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a696:	d1dd      	bne.n	800a654 <__ieee754_sqrt+0xc0>
 800a698:	4313      	orrs	r3, r2
 800a69a:	d006      	beq.n	800a6aa <__ieee754_sqrt+0x116>
 800a69c:	1c4c      	adds	r4, r1, #1
 800a69e:	bf13      	iteet	ne
 800a6a0:	3101      	addne	r1, #1
 800a6a2:	3001      	addeq	r0, #1
 800a6a4:	4639      	moveq	r1, r7
 800a6a6:	f021 0101 	bicne.w	r1, r1, #1
 800a6aa:	1043      	asrs	r3, r0, #1
 800a6ac:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a6b0:	0849      	lsrs	r1, r1, #1
 800a6b2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a6b6:	07c2      	lsls	r2, r0, #31
 800a6b8:	bf48      	it	mi
 800a6ba:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a6be:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	463d      	mov	r5, r7
 800a6c6:	e77f      	b.n	800a5c8 <__ieee754_sqrt+0x34>
 800a6c8:	0ada      	lsrs	r2, r3, #11
 800a6ca:	3815      	subs	r0, #21
 800a6cc:	055b      	lsls	r3, r3, #21
 800a6ce:	2a00      	cmp	r2, #0
 800a6d0:	d0fa      	beq.n	800a6c8 <__ieee754_sqrt+0x134>
 800a6d2:	02d7      	lsls	r7, r2, #11
 800a6d4:	d50a      	bpl.n	800a6ec <__ieee754_sqrt+0x158>
 800a6d6:	f1c1 0420 	rsb	r4, r1, #32
 800a6da:	fa23 f404 	lsr.w	r4, r3, r4
 800a6de:	1e4d      	subs	r5, r1, #1
 800a6e0:	408b      	lsls	r3, r1
 800a6e2:	4322      	orrs	r2, r4
 800a6e4:	1b41      	subs	r1, r0, r5
 800a6e6:	e788      	b.n	800a5fa <__ieee754_sqrt+0x66>
 800a6e8:	4608      	mov	r0, r1
 800a6ea:	e7f0      	b.n	800a6ce <__ieee754_sqrt+0x13a>
 800a6ec:	0052      	lsls	r2, r2, #1
 800a6ee:	3101      	adds	r1, #1
 800a6f0:	e7ef      	b.n	800a6d2 <__ieee754_sqrt+0x13e>
 800a6f2:	46e0      	mov	r8, ip
 800a6f4:	e7be      	b.n	800a674 <__ieee754_sqrt+0xe0>
 800a6f6:	bf00      	nop
 800a6f8:	7ff00000 	.word	0x7ff00000

0800a6fc <fabs>:
 800a6fc:	ec51 0b10 	vmov	r0, r1, d0
 800a700:	ee10 2a10 	vmov	r2, s0
 800a704:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a708:	ec43 2b10 	vmov	d0, r2, r3
 800a70c:	4770      	bx	lr

0800a70e <finite>:
 800a70e:	b082      	sub	sp, #8
 800a710:	ed8d 0b00 	vstr	d0, [sp]
 800a714:	9801      	ldr	r0, [sp, #4]
 800a716:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a71a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a71e:	0fc0      	lsrs	r0, r0, #31
 800a720:	b002      	add	sp, #8
 800a722:	4770      	bx	lr
 800a724:	0000      	movs	r0, r0
	...

0800a728 <nan>:
 800a728:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a730 <nan+0x8>
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	00000000 	.word	0x00000000
 800a734:	7ff80000 	.word	0x7ff80000

0800a738 <rint>:
 800a738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a73a:	ec51 0b10 	vmov	r0, r1, d0
 800a73e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a742:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a746:	2e13      	cmp	r6, #19
 800a748:	ee10 4a10 	vmov	r4, s0
 800a74c:	460b      	mov	r3, r1
 800a74e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a752:	dc58      	bgt.n	800a806 <rint+0xce>
 800a754:	2e00      	cmp	r6, #0
 800a756:	da2b      	bge.n	800a7b0 <rint+0x78>
 800a758:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a75c:	4302      	orrs	r2, r0
 800a75e:	d023      	beq.n	800a7a8 <rint+0x70>
 800a760:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a764:	4302      	orrs	r2, r0
 800a766:	4254      	negs	r4, r2
 800a768:	4314      	orrs	r4, r2
 800a76a:	0c4b      	lsrs	r3, r1, #17
 800a76c:	0b24      	lsrs	r4, r4, #12
 800a76e:	045b      	lsls	r3, r3, #17
 800a770:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a774:	ea44 0103 	orr.w	r1, r4, r3
 800a778:	4b32      	ldr	r3, [pc, #200]	; (800a844 <rint+0x10c>)
 800a77a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a77e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a782:	4602      	mov	r2, r0
 800a784:	460b      	mov	r3, r1
 800a786:	4630      	mov	r0, r6
 800a788:	4639      	mov	r1, r7
 800a78a:	f7f5 fd7f 	bl	800028c <__adddf3>
 800a78e:	e9cd 0100 	strd	r0, r1, [sp]
 800a792:	463b      	mov	r3, r7
 800a794:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a798:	4632      	mov	r2, r6
 800a79a:	f7f5 fd75 	bl	8000288 <__aeabi_dsub>
 800a79e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a7a2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a7a6:	4639      	mov	r1, r7
 800a7a8:	ec41 0b10 	vmov	d0, r0, r1
 800a7ac:	b003      	add	sp, #12
 800a7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7b0:	4a25      	ldr	r2, [pc, #148]	; (800a848 <rint+0x110>)
 800a7b2:	4132      	asrs	r2, r6
 800a7b4:	ea01 0702 	and.w	r7, r1, r2
 800a7b8:	4307      	orrs	r7, r0
 800a7ba:	d0f5      	beq.n	800a7a8 <rint+0x70>
 800a7bc:	0851      	lsrs	r1, r2, #1
 800a7be:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800a7c2:	4314      	orrs	r4, r2
 800a7c4:	d00c      	beq.n	800a7e0 <rint+0xa8>
 800a7c6:	ea23 0201 	bic.w	r2, r3, r1
 800a7ca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a7ce:	2e13      	cmp	r6, #19
 800a7d0:	fa43 f606 	asr.w	r6, r3, r6
 800a7d4:	bf0c      	ite	eq
 800a7d6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a7da:	2400      	movne	r4, #0
 800a7dc:	ea42 0306 	orr.w	r3, r2, r6
 800a7e0:	4918      	ldr	r1, [pc, #96]	; (800a844 <rint+0x10c>)
 800a7e2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a7e6:	4622      	mov	r2, r4
 800a7e8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	f7f5 fd4c 	bl	800028c <__adddf3>
 800a7f4:	e9cd 0100 	strd	r0, r1, [sp]
 800a7f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7fc:	4622      	mov	r2, r4
 800a7fe:	462b      	mov	r3, r5
 800a800:	f7f5 fd42 	bl	8000288 <__aeabi_dsub>
 800a804:	e7d0      	b.n	800a7a8 <rint+0x70>
 800a806:	2e33      	cmp	r6, #51	; 0x33
 800a808:	dd07      	ble.n	800a81a <rint+0xe2>
 800a80a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a80e:	d1cb      	bne.n	800a7a8 <rint+0x70>
 800a810:	ee10 2a10 	vmov	r2, s0
 800a814:	f7f5 fd3a 	bl	800028c <__adddf3>
 800a818:	e7c6      	b.n	800a7a8 <rint+0x70>
 800a81a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800a81e:	f04f 36ff 	mov.w	r6, #4294967295
 800a822:	40d6      	lsrs	r6, r2
 800a824:	4230      	tst	r0, r6
 800a826:	d0bf      	beq.n	800a7a8 <rint+0x70>
 800a828:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800a82c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800a830:	bf1f      	itttt	ne
 800a832:	ea24 0101 	bicne.w	r1, r4, r1
 800a836:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a83a:	fa44 f202 	asrne.w	r2, r4, r2
 800a83e:	ea41 0402 	orrne.w	r4, r1, r2
 800a842:	e7cd      	b.n	800a7e0 <rint+0xa8>
 800a844:	0800b520 	.word	0x0800b520
 800a848:	000fffff 	.word	0x000fffff
 800a84c:	00000000 	.word	0x00000000

0800a850 <scalbn>:
 800a850:	b570      	push	{r4, r5, r6, lr}
 800a852:	ec55 4b10 	vmov	r4, r5, d0
 800a856:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a85a:	4606      	mov	r6, r0
 800a85c:	462b      	mov	r3, r5
 800a85e:	b99a      	cbnz	r2, 800a888 <scalbn+0x38>
 800a860:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a864:	4323      	orrs	r3, r4
 800a866:	d036      	beq.n	800a8d6 <scalbn+0x86>
 800a868:	4b39      	ldr	r3, [pc, #228]	; (800a950 <scalbn+0x100>)
 800a86a:	4629      	mov	r1, r5
 800a86c:	ee10 0a10 	vmov	r0, s0
 800a870:	2200      	movs	r2, #0
 800a872:	f7f5 fec1 	bl	80005f8 <__aeabi_dmul>
 800a876:	4b37      	ldr	r3, [pc, #220]	; (800a954 <scalbn+0x104>)
 800a878:	429e      	cmp	r6, r3
 800a87a:	4604      	mov	r4, r0
 800a87c:	460d      	mov	r5, r1
 800a87e:	da10      	bge.n	800a8a2 <scalbn+0x52>
 800a880:	a32b      	add	r3, pc, #172	; (adr r3, 800a930 <scalbn+0xe0>)
 800a882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a886:	e03a      	b.n	800a8fe <scalbn+0xae>
 800a888:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a88c:	428a      	cmp	r2, r1
 800a88e:	d10c      	bne.n	800a8aa <scalbn+0x5a>
 800a890:	ee10 2a10 	vmov	r2, s0
 800a894:	4620      	mov	r0, r4
 800a896:	4629      	mov	r1, r5
 800a898:	f7f5 fcf8 	bl	800028c <__adddf3>
 800a89c:	4604      	mov	r4, r0
 800a89e:	460d      	mov	r5, r1
 800a8a0:	e019      	b.n	800a8d6 <scalbn+0x86>
 800a8a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	3a36      	subs	r2, #54	; 0x36
 800a8aa:	4432      	add	r2, r6
 800a8ac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a8b0:	428a      	cmp	r2, r1
 800a8b2:	dd08      	ble.n	800a8c6 <scalbn+0x76>
 800a8b4:	2d00      	cmp	r5, #0
 800a8b6:	a120      	add	r1, pc, #128	; (adr r1, 800a938 <scalbn+0xe8>)
 800a8b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8bc:	da1c      	bge.n	800a8f8 <scalbn+0xa8>
 800a8be:	a120      	add	r1, pc, #128	; (adr r1, 800a940 <scalbn+0xf0>)
 800a8c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8c4:	e018      	b.n	800a8f8 <scalbn+0xa8>
 800a8c6:	2a00      	cmp	r2, #0
 800a8c8:	dd08      	ble.n	800a8dc <scalbn+0x8c>
 800a8ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a8ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a8d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a8d6:	ec45 4b10 	vmov	d0, r4, r5
 800a8da:	bd70      	pop	{r4, r5, r6, pc}
 800a8dc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a8e0:	da19      	bge.n	800a916 <scalbn+0xc6>
 800a8e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a8e6:	429e      	cmp	r6, r3
 800a8e8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a8ec:	dd0a      	ble.n	800a904 <scalbn+0xb4>
 800a8ee:	a112      	add	r1, pc, #72	; (adr r1, 800a938 <scalbn+0xe8>)
 800a8f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1e2      	bne.n	800a8be <scalbn+0x6e>
 800a8f8:	a30f      	add	r3, pc, #60	; (adr r3, 800a938 <scalbn+0xe8>)
 800a8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fe:	f7f5 fe7b 	bl	80005f8 <__aeabi_dmul>
 800a902:	e7cb      	b.n	800a89c <scalbn+0x4c>
 800a904:	a10a      	add	r1, pc, #40	; (adr r1, 800a930 <scalbn+0xe0>)
 800a906:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d0b8      	beq.n	800a880 <scalbn+0x30>
 800a90e:	a10e      	add	r1, pc, #56	; (adr r1, 800a948 <scalbn+0xf8>)
 800a910:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a914:	e7b4      	b.n	800a880 <scalbn+0x30>
 800a916:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a91a:	3236      	adds	r2, #54	; 0x36
 800a91c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a920:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a924:	4620      	mov	r0, r4
 800a926:	4b0c      	ldr	r3, [pc, #48]	; (800a958 <scalbn+0x108>)
 800a928:	2200      	movs	r2, #0
 800a92a:	e7e8      	b.n	800a8fe <scalbn+0xae>
 800a92c:	f3af 8000 	nop.w
 800a930:	c2f8f359 	.word	0xc2f8f359
 800a934:	01a56e1f 	.word	0x01a56e1f
 800a938:	8800759c 	.word	0x8800759c
 800a93c:	7e37e43c 	.word	0x7e37e43c
 800a940:	8800759c 	.word	0x8800759c
 800a944:	fe37e43c 	.word	0xfe37e43c
 800a948:	c2f8f359 	.word	0xc2f8f359
 800a94c:	81a56e1f 	.word	0x81a56e1f
 800a950:	43500000 	.word	0x43500000
 800a954:	ffff3cb0 	.word	0xffff3cb0
 800a958:	3c900000 	.word	0x3c900000

0800a95c <_init>:
 800a95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a95e:	bf00      	nop
 800a960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a962:	bc08      	pop	{r3}
 800a964:	469e      	mov	lr, r3
 800a966:	4770      	bx	lr

0800a968 <_fini>:
 800a968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a96a:	bf00      	nop
 800a96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a96e:	bc08      	pop	{r3}
 800a970:	469e      	mov	lr, r3
 800a972:	4770      	bx	lr
